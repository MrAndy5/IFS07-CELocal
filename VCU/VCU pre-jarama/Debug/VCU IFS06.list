
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011864  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08011b34  08011b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ed0  08011ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011ed8  08011ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011edc  08011edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08011ee0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000998  2400006c  08011f4c  0001306c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a04  08011f4c  00013a04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000257b2  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  0003884c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  0003f9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002676e  00000000  00000000  00078ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001792b4  00000000  00000000  0009f414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002186c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  0021870c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00220dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011b1c 	.word	0x08011b1c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08011b1c 	.word	0x08011b1c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f9f4 	bl	8002adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f9f6 	bl	8000ae4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa62 	bl	8000bc0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fec6 	bl	800148c <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fea4 	bl	800144c <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa8e 	bl	8000c24 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb28 	bl	8000d5c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb8e 	bl	8000e2c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fc0a 	bl	8000f28 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd22 	bl	800115c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe4c 	bl	80013b4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fdd6 	bl	80012cc <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fdfc 	bl	800131c <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fcfc 	bl	8001120 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 fab4 	bl	8010c94 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc7a 	bl	8001024 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	499d      	ldr	r1, [pc, #628]	@ (80009a8 <main+0x2bc>)
 8000734:	489d      	ldr	r0, [pc, #628]	@ (80009ac <main+0x2c0>)
 8000736:	f002 ff7b 	bl	8003630 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	489b      	ldr	r0, [pc, #620]	@ (80009b0 <main+0x2c4>)
 8000742:	f000 ff75 	bl	8001630 <print>
#endif
		Error_Handler();
 8000746:	f001 fc0b 	bl	8001f60 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	489a      	ldr	r0, [pc, #616]	@ (80009b4 <main+0x2c8>)
 800074c:	f006 ff52 	bl	80075f4 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	4898      	ldr	r0, [pc, #608]	@ (80009b8 <main+0x2cc>)
 8000758:	f000 ff6a 	bl	8001630 <print>
#endif
		Error_Handler();
 800075c:	f001 fc00 	bl	8001f60 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	4893      	ldr	r0, [pc, #588]	@ (80009b4 <main+0x2c8>)
 8000766:	f007 f937 	bl	80079d8 <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	4892      	ldr	r0, [pc, #584]	@ (80009bc <main+0x2d0>)
 8000772:	f000 ff5d 	bl	8001630 <print>
#endif
		Error_Handler();
 8000776:	f001 fbf3 	bl	8001f60 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	4891      	ldr	r0, [pc, #580]	@ (80009c0 <main+0x2d4>)
 800077c:	f006 ff3a 	bl	80075f4 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	488f      	ldr	r0, [pc, #572]	@ (80009c4 <main+0x2d8>)
 8000788:	f000 ff52 	bl	8001630 <print>

#endif
		Error_Handler();
 800078c:	f001 fbe8 	bl	8001f60 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	488a      	ldr	r0, [pc, #552]	@ (80009c0 <main+0x2d4>)
 8000796:	f007 f91f 	bl	80079d8 <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	4889      	ldr	r0, [pc, #548]	@ (80009c8 <main+0x2dc>)
 80007a2:	f000 ff45 	bl	8001630 <print>
#endif
		Error_Handler();
 80007a6:	f001 fbdb 	bl	8001f60 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	4888      	ldr	r0, [pc, #544]	@ (80009cc <main+0x2e0>)
 80007ac:	f006 ff22 	bl	80075f4 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	4886      	ldr	r0, [pc, #536]	@ (80009d0 <main+0x2e4>)
 80007b8:	f000 ff3a 	bl	8001630 <print>

#endif
		Error_Handler();
 80007bc:	f001 fbd0 	bl	8001f60 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4881      	ldr	r0, [pc, #516]	@ (80009cc <main+0x2e0>)
 80007c6:	f007 f907 	bl	80079d8 <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	4880      	ldr	r0, [pc, #512]	@ (80009d4 <main+0x2e8>)
 80007d2:	f000 ff2d 	bl	8001630 <print>
#endif
		Error_Handler();
 80007d6:	f001 fbc3 	bl	8001f60 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	487f      	ldr	r0, [pc, #508]	@ (80009d8 <main+0x2ec>)
 80007dc:	f000 ff28 	bl	8001630 <print>
#if (CALIBRATION)
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e0:	e009      	b.n	80007f6 <main+0x10a>
	{
		print("Solicitar tensión inversor");
 80007e2:	487d      	ldr	r0, [pc, #500]	@ (80009d8 <main+0x2ec>)
 80007e4:	f000 ff24 	bl	8001630 <print>
		if (config_inv_lectura_v == 1)
 80007e8:	4b7c      	ldr	r3, [pc, #496]	@ (80009dc <main+0x2f0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	487b      	ldr	r0, [pc, #492]	@ (80009e0 <main+0x2f4>)
 80007f2:	f000 ff1d 	bl	8001630 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b79      	ldr	r3, [pc, #484]	@ (80009dc <main+0x2f0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f1      	beq.n	80007e2 <main+0xf6>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80007fe:	e059      	b.n	80008b4 <main+0x1c8>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000800:	4b78      	ldr	r3, [pc, #480]	@ (80009e4 <main+0x2f8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4978      	ldr	r1, [pc, #480]	@ (80009e8 <main+0x2fc>)
 8000808:	4878      	ldr	r0, [pc, #480]	@ (80009ec <main+0x300>)
 800080a:	f010 fce7 	bl	80111dc <siprintf>
		print(TxBuffer);
 800080e:	4877      	ldr	r0, [pc, #476]	@ (80009ec <main+0x300>)
 8000810:	f000 ff0e 	bl	8001630 <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000814:	4b76      	ldr	r3, [pc, #472]	@ (80009f0 <main+0x304>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a76      	ldr	r2, [pc, #472]	@ (80009f4 <main+0x308>)
 800081a:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 800081c:	4b75      	ldr	r3, [pc, #468]	@ (80009f4 <main+0x308>)
 800081e:	2202      	movs	r2, #2
 8000820:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000822:	4b74      	ldr	r3, [pc, #464]	@ (80009f4 <main+0x308>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000828:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800082a:	4b72      	ldr	r3, [pc, #456]	@ (80009f4 <main+0x308>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000830:	4b70      	ldr	r3, [pc, #448]	@ (80009f4 <main+0x308>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000836:	4b6b      	ldr	r3, [pc, #428]	@ (80009e4 <main+0x2f8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b6e      	ldr	r3, [pc, #440]	@ (80009f8 <main+0x30c>)
 800083e:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000840:	4b68      	ldr	r3, [pc, #416]	@ (80009e4 <main+0x2f8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	121b      	asrs	r3, r3, #8
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b6b      	ldr	r3, [pc, #428]	@ (80009f8 <main+0x30c>)
 800084a:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 800084c:	4a6a      	ldr	r2, [pc, #424]	@ (80009f8 <main+0x30c>)
 800084e:	4969      	ldr	r1, [pc, #420]	@ (80009f4 <main+0x308>)
 8000850:	485b      	ldr	r0, [pc, #364]	@ (80009c0 <main+0x2d4>)
 8000852:	f006 fefa 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	4868      	ldr	r0, [pc, #416]	@ (80009fc <main+0x310>)
 800085a:	f007 ffe1 	bl	8008820 <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b67      	ldr	r3, [pc, #412]	@ (8000a00 <main+0x314>)
 8000864:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000866:	4b66      	ldr	r3, [pc, #408]	@ (8000a00 <main+0x314>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d11b      	bne.n	80008a6 <main+0x1ba>
			TxHeader_Acu.Identifier = 0x600;
 800086e:	4b61      	ldr	r3, [pc, #388]	@ (80009f4 <main+0x308>)
 8000870:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000874:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000876:	4b5f      	ldr	r3, [pc, #380]	@ (80009f4 <main+0x308>)
 8000878:	2202      	movs	r2, #2
 800087a:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800087c:	4b5d      	ldr	r3, [pc, #372]	@ (80009f4 <main+0x308>)
 800087e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000882:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000884:	4b5b      	ldr	r3, [pc, #364]	@ (80009f4 <main+0x308>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800088a:	4b5a      	ldr	r3, [pc, #360]	@ (80009f4 <main+0x308>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = 0x0;
 8000890:	4b59      	ldr	r3, [pc, #356]	@ (80009f8 <main+0x30c>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
			TxData_Acu[1] = 0x0;
 8000896:	4b58      	ldr	r3, [pc, #352]	@ (80009f8 <main+0x30c>)
 8000898:	2200      	movs	r2, #0
 800089a:	705a      	strb	r2, [r3, #1]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 800089c:	4a56      	ldr	r2, [pc, #344]	@ (80009f8 <main+0x30c>)
 800089e:	4955      	ldr	r1, [pc, #340]	@ (80009f4 <main+0x308>)
 80008a0:	4847      	ldr	r0, [pc, #284]	@ (80009c0 <main+0x2d4>)
 80008a2:	f006 fed2 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 80008a6:	4b57      	ldr	r3, [pc, #348]	@ (8000a04 <main+0x318>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d102      	bne.n	80008b4 <main+0x1c8>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008ae:	4856      	ldr	r0, [pc, #344]	@ (8000a08 <main+0x31c>)
 80008b0:	f000 febe 	bl	8001630 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80008b4:	4b53      	ldr	r3, [pc, #332]	@ (8000a04 <main+0x318>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <main+0x1da>
 80008bc:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <main+0x2f8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80008c4:	db9c      	blt.n	8000800 <main+0x114>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80008c6:	4b4a      	ldr	r3, [pc, #296]	@ (80009f0 <main+0x304>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a4a      	ldr	r2, [pc, #296]	@ (80009f4 <main+0x308>)
 80008cc:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 80008ce:	4b49      	ldr	r3, [pc, #292]	@ (80009f4 <main+0x308>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008d4:	4b47      	ldr	r3, [pc, #284]	@ (80009f4 <main+0x308>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008da:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008dc:	4b45      	ldr	r3, [pc, #276]	@ (80009f4 <main+0x308>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008e2:	4b44      	ldr	r3, [pc, #272]	@ (80009f4 <main+0x308>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008e8:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <main+0x2f8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b42      	ldr	r3, [pc, #264]	@ (80009f8 <main+0x30c>)
 80008f0:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008f2:	4b3c      	ldr	r3, [pc, #240]	@ (80009e4 <main+0x2f8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	121b      	asrs	r3, r3, #8
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <main+0x30c>)
 80008fc:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008fe:	4a3e      	ldr	r2, [pc, #248]	@ (80009f8 <main+0x30c>)
 8000900:	493c      	ldr	r1, [pc, #240]	@ (80009f4 <main+0x308>)
 8000902:	482f      	ldr	r0, [pc, #188]	@ (80009c0 <main+0x2d4>)
 8000904:	f006 fea1 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000908:	e01f      	b.n	800094a <main+0x25e>
	{



		printValue(start_button_act);
 800090a:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <main+0x320>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f000 feac 	bl	800166c <printValue>
		print("Botón Start + Freno:");
 8000914:	483e      	ldr	r0, [pc, #248]	@ (8000a10 <main+0x324>)
 8000916:	f000 fe8b 	bl	8001630 <print>
		if (start_button_act == 1)
 800091a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <main+0x320>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d113      	bne.n	800094a <main+0x25e>
		{

#if DEBUG
			printValue(s_freno);
 8000922:	4b3c      	ldr	r3, [pc, #240]	@ (8000a14 <main+0x328>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fea0 	bl	800166c <printValue>
#endif
			if (s_freno > 900)
 800092c:	4b39      	ldr	r3, [pc, #228]	@ (8000a14 <main+0x328>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000934:	dd06      	ble.n	8000944 <main+0x258>
			{
				boton_arranque = 1;
 8000936:	4b38      	ldr	r3, [pc, #224]	@ (8000a18 <main+0x32c>)
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 800093c:	4837      	ldr	r0, [pc, #220]	@ (8000a1c <main+0x330>)
 800093e:	f000 fe77 	bl	8001630 <print>
 8000942:	e002      	b.n	800094a <main+0x25e>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000944:	4836      	ldr	r0, [pc, #216]	@ (8000a20 <main+0x334>)
 8000946:	f000 fe73 	bl	8001630 <print>
	while (boton_arranque == 0)
 800094a:	4b33      	ldr	r3, [pc, #204]	@ (8000a18 <main+0x32c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0db      	beq.n	800090a <main+0x21e>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000952:	4834      	ldr	r0, [pc, #208]	@ (8000a24 <main+0x338>)
 8000954:	f000 fe6c 	bl	8001630 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000958:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <main+0x33c>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 800095e:	2201      	movs	r2, #1
 8000960:	2102      	movs	r1, #2
 8000962:	4832      	ldr	r0, [pc, #200]	@ (8000a2c <main+0x340>)
 8000964:	f007 ff74 	bl	8008850 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000968:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800096c:	f002 f948 	bl	8002c00 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000970:	2200      	movs	r2, #0
 8000972:	2102      	movs	r1, #2
 8000974:	482d      	ldr	r0, [pc, #180]	@ (8000a2c <main+0x340>)
 8000976:	f007 ff6b 	bl	8008850 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 800097a:	482d      	ldr	r0, [pc, #180]	@ (8000a30 <main+0x344>)
 800097c:	f000 fe58 	bl	8001630 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 8000980:	482c      	ldr	r0, [pc, #176]	@ (8000a34 <main+0x348>)
 8000982:	f00c ffc1 	bl	800d908 <HAL_TIM_Base_Start_IT>

	// Estado STAND BY inversor
	while (state != 3)
 8000986:	e006      	b.n	8000996 <main+0x2aa>
	{
		if (state == 3)
 8000988:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <main+0x34c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d102      	bne.n	8000996 <main+0x2aa>
		{
#if DEBUG
			print("Precarga");
 8000990:	482a      	ldr	r0, [pc, #168]	@ (8000a3c <main+0x350>)
 8000992:	f000 fe4d 	bl	8001630 <print>
	while (state != 3)
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <main+0x34c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d1f4      	bne.n	8000988 <main+0x29c>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 800099e:	4828      	ldr	r0, [pc, #160]	@ (8000a40 <main+0x354>)
 80009a0:	f000 fe46 	bl	8001630 <print>
#endif

	while (state != 4)
 80009a4:	e086      	b.n	8000ab4 <main+0x3c8>
 80009a6:	bf00      	nop
 80009a8:	240006fc 	.word	0x240006fc
 80009ac:	24000094 	.word	0x24000094
 80009b0:	08011b34 	.word	0x08011b34
 80009b4:	240001ec 	.word	0x240001ec
 80009b8:	08011b54 	.word	0x08011b54
 80009bc:	08011b74 	.word	0x08011b74
 80009c0:	2400028c 	.word	0x2400028c
 80009c4:	08011b9c 	.word	0x08011b9c
 80009c8:	08011bbc 	.word	0x08011bbc
 80009cc:	2400032c 	.word	0x2400032c
 80009d0:	08011be4 	.word	0x08011be4
 80009d4:	08011c04 	.word	0x08011c04
 80009d8:	08011c2c 	.word	0x08011c2c
 80009dc:	2400008c 	.word	0x2400008c
 80009e0:	08011c48 	.word	0x08011c48
 80009e4:	240006f4 	.word	0x240006f4
 80009e8:	08011c7c 	.word	0x08011c7c
 80009ec:	24000790 	.word	0x24000790
 80009f0:	24000004 	.word	0x24000004
 80009f4:	24000654 	.word	0x24000654
 80009f8:	240006d8 	.word	0x240006d8
 80009fc:	58021800 	.word	0x58021800
 8000a00:	24000728 	.word	0x24000728
 8000a04:	24000088 	.word	0x24000088
 8000a08:	08011c94 	.word	0x08011c94
 8000a0c:	240006f0 	.word	0x240006f0
 8000a10:	08011cb0 	.word	0x08011cb0
 8000a14:	2400070c 	.word	0x2400070c
 8000a18:	24000090 	.word	0x24000090
 8000a1c:	08011cc8 	.word	0x08011cc8
 8000a20:	08011ce8 	.word	0x08011ce8
 8000a24:	08011d04 	.word	0x08011d04
 8000a28:	2400088c 	.word	0x2400088c
 8000a2c:	58020800 	.word	0x58020800
 8000a30:	08011d14 	.word	0x08011d14
 8000a34:	24000494 	.word	0x24000494
 8000a38:	2400071a 	.word	0x2400071a
 8000a3c:	08011d24 	.word	0x08011d24
 8000a40:	08011d30 	.word	0x08011d30
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a44:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <main+0x3dc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a20      	ldr	r2, [pc, #128]	@ (8000acc <main+0x3e0>)
 8000a4a:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <main+0x3e0>)
 8000a4e:	2203      	movs	r2, #3
 8000a50:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <main+0x3e0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <main+0x3e4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <main+0x3e4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <main+0x3e4>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a6a:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <main+0x3e4>)
 8000a6c:	4917      	ldr	r1, [pc, #92]	@ (8000acc <main+0x3e0>)
 8000a6e:	4819      	ldr	r0, [pc, #100]	@ (8000ad4 <main+0x3e8>)
 8000a70:	f006 fdeb 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <main+0x3e0>)
 8000a76:	f240 3262 	movw	r2, #866	@ 0x362
 8000a7a:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <main+0x3e0>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <main+0x3ec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <main+0x3e4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <main+0x3e4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <main+0x3ec>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <main+0x3e4>)
 8000a9c:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <main+0x3e4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <main+0x3e4>)
 8000aa6:	4909      	ldr	r1, [pc, #36]	@ (8000acc <main+0x3e0>)
 8000aa8:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <main+0x3e8>)
 8000aaa:	f006 fdce 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f002 f8a6 	bl	8002c00 <HAL_Delay>
	while (state != 4)
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <main+0x3f0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d1c3      	bne.n	8000a44 <main+0x358>

	}

#if DEBUG
	print("state: ready");
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <main+0x3f4>)
 8000abe:	f000 fdb7 	bl	8001630 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ac2:	bf00      	nop
 8000ac4:	e7fd      	b.n	8000ac2 <main+0x3d6>
 8000ac6:	bf00      	nop
 8000ac8:	24000000 	.word	0x24000000
 8000acc:	24000608 	.word	0x24000608
 8000ad0:	240006c8 	.word	0x240006c8
 8000ad4:	240001ec 	.word	0x240001ec
 8000ad8:	24000718 	.word	0x24000718
 8000adc:	2400071a 	.word	0x2400071a
 8000ae0:	08011d44 	.word	0x08011d44

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b09c      	sub	sp, #112	@ 0x70
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	224c      	movs	r2, #76	@ 0x4c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f010 fb94 	bl	8011220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2220      	movs	r2, #32
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f010 fb8e 	bl	8011220 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f007 febd 	bl	8008884 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <SystemClock_Config+0xd8>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a2a      	ldr	r2, [pc, #168]	@ (8000bbc <SystemClock_Config+0xd8>)
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b28      	ldr	r3, [pc, #160]	@ (8000bbc <SystemClock_Config+0xd8>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b26:	bf00      	nop
 8000b28:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <SystemClock_Config+0xd8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b34:	d1f8      	bne.n	8000b28 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b4c:	232c      	movs	r3, #44	@ 0x2c
 8000b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b5c:	230c      	movs	r3, #12
 8000b5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f007 fec3 	bl	80088f8 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b78:	f001 f9f2 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	233f      	movs	r3, #63	@ 0x3f
 8000b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2303      	movs	r3, #3
 8000b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b8c:	2340      	movs	r3, #64	@ 0x40
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b9a:	2340      	movs	r3, #64	@ 0x40
 8000b9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 fa82 	bl	80090ac <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bae:	f001 f9d7 	bl	8001f60 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3770      	adds	r7, #112	@ 0x70
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024800 	.word	0x58024800

08000bc0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bc4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	22b8      	movs	r2, #184	@ 0xb8
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f010 fb27 	bl	8011220 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000bd2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000bd6:	f04f 0300 	mov.w	r3, #0
 8000bda:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000be2:	2310      	movs	r3, #16
 8000be4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bf2:	23c0      	movs	r3, #192	@ 0xc0
 8000bf4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000bfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c02:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f008 fdd9 	bl	80097c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000c18:	f001 f9a2 	bl	8001f60 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37b8      	adds	r7, #184	@ 0xb8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2224      	movs	r2, #36	@ 0x24
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f010 faef 	bl	8011220 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c42:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c44:	4a41      	ldr	r2, [pc, #260]	@ (8000d4c <MX_ADC1_Init+0x128>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c48:	4b3f      	ldr	r3, [pc, #252]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c4a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c50:	4b3d      	ldr	r3, [pc, #244]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c52:	2208      	movs	r2, #8
 8000c54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c5e:	2208      	movs	r2, #8
 8000c60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c62:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c68:	4b37      	ldr	r3, [pc, #220]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c6e:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c70:	2203      	movs	r2, #3
 8000c72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c74:	4b34      	ldr	r3, [pc, #208]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7c:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c82:	4b31      	ldr	r3, [pc, #196]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c88:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca8:	4827      	ldr	r0, [pc, #156]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000caa:	f002 fab9 	bl	8003220 <HAL_ADC_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cb4:	f001 f954 	bl	8001f60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4821      	ldr	r0, [pc, #132]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000cc4:	f003 ff7c 	bl	8004bc0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000cce:	f001 f947 	bl	8001f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <MX_ADC1_Init+0x12c>)
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cde:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000cf8:	f002 ffce 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d02:	f001 f92d 	bl	8001f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d06:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <MX_ADC1_Init+0x130>)
 8000d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000d14:	f002 ffc0 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d1e:	f001 f91f 	bl	8001f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <MX_ADC1_Init+0x134>)
 8000d24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d26:	2312      	movs	r3, #18
 8000d28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <MX_ADC1_Init+0x124>)
 8000d30:	f002 ffb2 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d3a:	f001 f911 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	@ 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000094 	.word	0x24000094
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	10c00010 	.word	0x10c00010
 8000d54:	14f00020 	.word	0x14f00020
 8000d58:	08600004 	.word	0x08600004

08000d5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2224      	movs	r2, #36	@ 0x24
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f010 fa59 	bl	8011220 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d70:	4a2c      	ldr	r2, [pc, #176]	@ (8000e24 <MX_ADC2_Init+0xc8>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d76:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d82:	4b27      	ldr	r3, [pc, #156]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000dce:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd4:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000dd6:	f002 fa23 	bl	8003220 <HAL_ADC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000de0:	f001 f8be 	bl	8001f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000de4:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_ADC2_Init+0xcc>)
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de8:	2306      	movs	r3, #6
 8000dea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df6:	2304      	movs	r3, #4
 8000df8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_ADC2_Init+0xc4>)
 8000e0a:	f002 ff45 	bl	8003c98 <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000e14:	f001 f8a4 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	@ 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	24000104 	.word	0x24000104
 8000e24:	40022100 	.word	0x40022100
 8000e28:	25b00200 	.word	0x25b00200

08000e2c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e34:	4a3b      	ldr	r2, [pc, #236]	@ (8000f24 <MX_FDCAN1_Init+0xf8>)
 8000e36:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e38:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e44:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e4a:	4b35      	ldr	r3, [pc, #212]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e50:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e56:	4b32      	ldr	r3, [pc, #200]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e58:	2206      	movs	r2, #6
 8000e5a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e62:	4b2f      	ldr	r3, [pc, #188]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e80:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e86:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e92:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eda:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000edc:	f006 f936 	bl	800714c <HAL_FDCAN_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000ee6:	f001 f83b 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <MX_FDCAN1_Init+0xf4>)
 8000f08:	f006 fafe 	bl	8007508 <HAL_FDCAN_ConfigFilter>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000f12:	f001 f825 	bl	8001f60 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	240001ec 	.word	0x240001ec
 8000f24:	4000a000 	.word	0x4000a000

08000f28 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f30:	4a3b      	ldr	r2, [pc, #236]	@ (8001020 <MX_FDCAN2_Init+0xf8>)
 8000f32:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f34:	4b39      	ldr	r3, [pc, #228]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f40:	4b36      	ldr	r3, [pc, #216]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f46:	4b35      	ldr	r3, [pc, #212]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f4c:	4b33      	ldr	r3, [pc, #204]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f52:	4b32      	ldr	r3, [pc, #200]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f54:	2206      	movs	r2, #6
 8000f56:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f64:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f66:	2205      	movs	r2, #5
 8000f68:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f82:	4b26      	ldr	r3, [pc, #152]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f88:	4b24      	ldr	r3, [pc, #144]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f94:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f96:	2210      	movs	r2, #16
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fd6:	4811      	ldr	r0, [pc, #68]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8000fd8:	f006 f8b8 	bl	800714c <HAL_FDCAN_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000fe2:	f000 ffbd 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fe6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fea:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_FDCAN2_Init+0xf4>)
 8001006:	f006 fa7f 	bl	8007508 <HAL_FDCAN_ConfigFilter>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001010:	f000 ffa6 	bl	8001f60 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2400028c 	.word	0x2400028c
 8001020:	4000a400 	.word	0x4000a400

08001024 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800102c:	4a3b      	ldr	r2, [pc, #236]	@ (800111c <MX_FDCAN3_Init+0xf8>)
 800102e:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001030:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001036:	4b38      	ldr	r3, [pc, #224]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800103c:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800103e:	2200      	movs	r2, #0
 8001040:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001042:	4b35      	ldr	r3, [pc, #212]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001044:	2200      	movs	r2, #0
 8001046:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001048:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800104a:	2200      	movs	r2, #0
 800104c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001050:	2206      	movs	r2, #6
 8001052:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001054:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001056:	2201      	movs	r2, #1
 8001058:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800105a:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800105c:	2202      	movs	r2, #2
 800105e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001060:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001062:	2205      	movs	r2, #5
 8001064:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001066:	4b2c      	ldr	r3, [pc, #176]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001068:	2201      	movs	r2, #1
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800106c:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800106e:	2201      	movs	r2, #1
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001074:	2201      	movs	r2, #1
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001078:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800107a:	2201      	movs	r2, #1
 800107c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001080:	2200      	movs	r2, #0
 8001082:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001084:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001086:	2201      	movs	r2, #1
 8001088:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800108c:	2201      	movs	r2, #1
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001090:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001092:	2210      	movs	r2, #16
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001096:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001098:	2204      	movs	r2, #4
 800109a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 800109e:	2210      	movs	r2, #16
 80010a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010c2:	2210      	movs	r2, #16
 80010c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010ce:	2204      	movs	r2, #4
 80010d0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 80010d4:	f006 f83a 	bl	800714c <HAL_FDCAN_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80010de:	f000 ff3f 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80010e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010e6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_FDCAN3_Init+0xf4>)
 8001102:	f006 fa01 	bl	8007508 <HAL_FDCAN_ConfigFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 800110c:	f000 ff28 	bl	8001f60 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2400032c 	.word	0x2400032c
 800111c:	4000d400 	.word	0x4000d400

08001120 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_SDMMC1_SD_Init+0x34>)
 8001126:	4a0c      	ldr	r2, [pc, #48]	@ (8001158 <MX_SDMMC1_SD_Init+0x38>)
 8001128:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_SDMMC1_SD_Init+0x34>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_SDMMC1_SD_Init+0x34>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_SDMMC1_SD_Init+0x34>)
 8001138:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <MX_SDMMC1_SD_Init+0x34>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <MX_SDMMC1_SD_Init+0x34>)
 8001146:	2202      	movs	r2, #2
 8001148:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	240003cc 	.word	0x240003cc
 8001158:	52007000 	.word	0x52007000

0800115c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09c      	sub	sp, #112	@ 0x70
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2234      	movs	r2, #52	@ 0x34
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f010 f842 	bl	8011220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800119c:	4b49      	ldr	r3, [pc, #292]	@ (80012c4 <MX_TIM1_Init+0x168>)
 800119e:	4a4a      	ldr	r2, [pc, #296]	@ (80012c8 <MX_TIM1_Init+0x16c>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a2:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011ae:	4b45      	ldr	r3, [pc, #276]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011bc:	4b41      	ldr	r3, [pc, #260]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c2:	4b40      	ldr	r3, [pc, #256]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011c8:	483e      	ldr	r0, [pc, #248]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011ca:	f00c fb45 	bl	800d858 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011d4:	f000 fec4 	bl	8001f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011e2:	4619      	mov	r1, r3
 80011e4:	4837      	ldr	r0, [pc, #220]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011e6:	f00c fe91 	bl	800df0c <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011f0:	f000 feb6 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f4:	4833      	ldr	r0, [pc, #204]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80011f6:	f00c fc0d 	bl	800da14 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001200:	f000 feae 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001210:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001214:	4619      	mov	r1, r3
 8001216:	482b      	ldr	r0, [pc, #172]	@ (80012c4 <MX_TIM1_Init+0x168>)
 8001218:	f00d fbbe 	bl	800e998 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001222:	f000 fe9d 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	@ 0x60
 8001228:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122e:	2300      	movs	r3, #0
 8001230:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001232:	2300      	movs	r3, #0
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001242:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	481e      	ldr	r0, [pc, #120]	@ (80012c4 <MX_TIM1_Init+0x168>)
 800124c:	f00c fd4a 	bl	800dce4 <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001256:	f000 fe83 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125e:	2204      	movs	r2, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <MX_TIM1_Init+0x168>)
 8001264:	f00c fd3e 	bl	800dce4 <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800126e:	f000 fe77 	bl	8001f60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001294:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80012a8:	f00d fc12 	bl	800ead0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012b2:	f000 fe55 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_TIM1_Init+0x168>)
 80012b8:	f001 f9ca 	bl	8002650 <HAL_TIM_MspPostInit>

}
 80012bc:	bf00      	nop
 80012be:	3770      	adds	r7, #112	@ 0x70
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	24000448 	.word	0x24000448
 80012c8:	40010000 	.word	0x40010000

080012cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012d2:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <MX_TIM16_Init+0x4c>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012d8:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80012dc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b0d      	ldr	r3, [pc, #52]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_TIM16_Init+0x48>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_TIM16_Init+0x48>)
 8001300:	f00c faaa 	bl	800d858 <HAL_TIM_Base_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800130a:	f000 fe29 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24000494 	.word	0x24000494
 8001318:	40014400 	.word	0x40014400

0800131c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001320:	4b22      	ldr	r3, [pc, #136]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001322:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <MX_USART1_UART_Init+0x94>)
 8001324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001366:	f00d fc5d 	bl	800ec24 <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001370:	f000 fdf6 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 8001378:	f00e fdf7 	bl	800ff6a <HAL_UARTEx_SetTxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001382:	f000 fded 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4808      	ldr	r0, [pc, #32]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 800138a:	f00e fe2c 	bl	800ffe6 <HAL_UARTEx_SetRxFifoThreshold>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001394:	f000 fde4 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_USART1_UART_Init+0x90>)
 800139a:	f00e fdad 	bl	800fef8 <HAL_UARTEx_DisableFifoMode>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 fddc 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	240004e0 	.word	0x240004e0
 80013b0:	40011000 	.word	0x40011000

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <MX_USART2_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 80013fe:	f00d fc11 	bl	800ec24 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fdaa 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 8001410:	f00e fdab 	bl	800ff6a <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 fda1 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 8001422:	f00e fde0 	bl	800ffe6 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fd98 	bl	8001f60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_USART2_UART_Init+0x90>)
 8001432:	f00e fd61 	bl	800fef8 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fd90 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	24000574 	.word	0x24000574
 8001448:	40004400 	.word	0x40004400

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <MX_DMA_Init+0x3c>)
 8001454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001458:	4a0b      	ldr	r2, [pc, #44]	@ (8001488 <MX_DMA_Init+0x3c>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_DMA_Init+0x3c>)
 8001464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	200b      	movs	r0, #11
 8001476:	f003 fd60 	bl	8004f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800147a:	200b      	movs	r0, #11
 800147c:	f003 fd77 	bl	8004f6e <HAL_NVIC_EnableIRQ>

}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	4b5e      	ldr	r3, [pc, #376]	@ (800161c <MX_GPIO_Init+0x190>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a8:	4a5c      	ldr	r2, [pc, #368]	@ (800161c <MX_GPIO_Init+0x190>)
 80014aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b2:	4b5a      	ldr	r3, [pc, #360]	@ (800161c <MX_GPIO_Init+0x190>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b56      	ldr	r3, [pc, #344]	@ (800161c <MX_GPIO_Init+0x190>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c6:	4a55      	ldr	r2, [pc, #340]	@ (800161c <MX_GPIO_Init+0x190>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d0:	4b52      	ldr	r3, [pc, #328]	@ (800161c <MX_GPIO_Init+0x190>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	61fb      	str	r3, [r7, #28]
 80014dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b4f      	ldr	r3, [pc, #316]	@ (800161c <MX_GPIO_Init+0x190>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e4:	4a4d      	ldr	r2, [pc, #308]	@ (800161c <MX_GPIO_Init+0x190>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ee:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <MX_GPIO_Init+0x190>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b47      	ldr	r3, [pc, #284]	@ (800161c <MX_GPIO_Init+0x190>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001502:	4a46      	ldr	r2, [pc, #280]	@ (800161c <MX_GPIO_Init+0x190>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <MX_GPIO_Init+0x190>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800151a:	4b40      	ldr	r3, [pc, #256]	@ (800161c <MX_GPIO_Init+0x190>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4a3e      	ldr	r2, [pc, #248]	@ (800161c <MX_GPIO_Init+0x190>)
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <MX_GPIO_Init+0x190>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001538:	4b38      	ldr	r3, [pc, #224]	@ (800161c <MX_GPIO_Init+0x190>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4a37      	ldr	r2, [pc, #220]	@ (800161c <MX_GPIO_Init+0x190>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <MX_GPIO_Init+0x190>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <MX_GPIO_Init+0x190>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4a2f      	ldr	r2, [pc, #188]	@ (800161c <MX_GPIO_Init+0x190>)
 800155e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4b2d      	ldr	r3, [pc, #180]	@ (800161c <MX_GPIO_Init+0x190>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	4b29      	ldr	r3, [pc, #164]	@ (800161c <MX_GPIO_Init+0x190>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	4a28      	ldr	r2, [pc, #160]	@ (800161c <MX_GPIO_Init+0x190>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <MX_GPIO_Init+0x190>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2103      	movs	r1, #3
 8001596:	4822      	ldr	r0, [pc, #136]	@ (8001620 <MX_GPIO_Init+0x194>)
 8001598:	f007 f95a 	bl	8008850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a2:	4820      	ldr	r0, [pc, #128]	@ (8001624 <MX_GPIO_Init+0x198>)
 80015a4:	f007 f954 	bl	8008850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 80015a8:	2303      	movs	r3, #3
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4818      	ldr	r0, [pc, #96]	@ (8001620 <MX_GPIO_Init+0x194>)
 80015c0:	f006 ff86 	bl	80084d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80015c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4813      	ldr	r0, [pc, #76]	@ (8001628 <MX_GPIO_Init+0x19c>)
 80015da:	f006 ff79 	bl	80084d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80015de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <MX_GPIO_Init+0x198>)
 80015f8:	f006 ff6a 	bl	80084d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001604:	2302      	movs	r3, #2
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	@ (800162c <MX_GPIO_Init+0x1a0>)
 8001610:	f006 ff5e 	bl	80084d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001614:	bf00      	nop
 8001616:	3738      	adds	r7, #56	@ 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024400 	.word	0x58024400
 8001620:	58020800 	.word	0x58020800
 8001624:	58021000 	.word	0x58021000
 8001628:	58021400 	.word	0x58021400
 800162c:	58021800 	.word	0x58021800

08001630 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4909      	ldr	r1, [pc, #36]	@ (8001660 <print+0x30>)
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <print+0x34>)
 800163e:	f00f fdcd 	bl	80111dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001642:	4808      	ldr	r0, [pc, #32]	@ (8001664 <print+0x34>)
 8001644:	f7fe fe64 	bl	8000310 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	4904      	ldr	r1, [pc, #16]	@ (8001664 <print+0x34>)
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <print+0x38>)
 8001654:	f00d fb36 	bl	800ecc4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	08011d54 	.word	0x08011d54
 8001664:	2400072c 	.word	0x2400072c
 8001668:	24000574 	.word	0x24000574

0800166c <printValue>:

void printValue(int value)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4909      	ldr	r1, [pc, #36]	@ (800169c <printValue+0x30>)
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <printValue+0x34>)
 800167a:	f00f fdaf 	bl	80111dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800167e:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <printValue+0x34>)
 8001680:	f7fe fe46 	bl	8000310 <strlen>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	4904      	ldr	r1, [pc, #16]	@ (80016a0 <printValue+0x34>)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <printValue+0x38>)
 8001690:	f00d fb18 	bl	800ecc4 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	08011d5c 	.word	0x08011d5c
 80016a0:	2400072c 	.word	0x2400072c
 80016a4:	24000574 	.word	0x24000574

080016a8 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80cd 	beq.w	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a67      	ldr	r2, [pc, #412]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d165      	bne.n	80017a8 <HAL_FDCAN_RxFifo0Callback+0xec>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80016dc:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016de:	4a67      	ldr	r2, [pc, #412]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016e0:	2140      	movs	r1, #64	@ 0x40
 80016e2:	4867      	ldr	r0, [pc, #412]	@ (8001880 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016e4:	f006 f80c 	bl	8007700 <HAL_FDCAN_GetRxMessage>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80be 	bne.w	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 80016f0:	4b62      	ldr	r3, [pc, #392]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f240 4266 	movw	r2, #1126	@ 0x466
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d03c      	beq.n	8001776 <HAL_FDCAN_RxFifo0Callback+0xba>
 80016fc:	f240 4266 	movw	r2, #1126	@ 0x466
 8001700:	4293      	cmp	r3, r2
 8001702:	f200 80b3 	bhi.w	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
 8001706:	f240 4261 	movw	r2, #1121	@ 0x461
 800170a:	4293      	cmp	r3, r2
 800170c:	d004      	beq.n	8001718 <HAL_FDCAN_RxFifo0Callback+0x5c>
 800170e:	f240 4263 	movw	r2, #1123	@ 0x463
 8001712:	4293      	cmp	r3, r2
 8001714:	d015      	beq.n	8001742 <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 8001716:	e0a9      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					state = RxData_Inv[4] & 0xF;
 8001718:	4b57      	ldr	r3, [pc, #348]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001724:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 8001726:	4b57      	ldr	r3, [pc, #348]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b0a      	cmp	r3, #10
 800172c:	d004      	beq.n	8001738 <HAL_FDCAN_RxFifo0Callback+0x7c>
 800172e:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0b      	cmp	r3, #11
 8001734:	f040 8093 	bne.w	800185e <HAL_FDCAN_RxFifo0Callback+0x1a2>
						error = RxData_Inv[2];
 8001738:	4b4f      	ldr	r3, [pc, #316]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800173a:	789a      	ldrb	r2, [r3, #2]
 800173c:	4b52      	ldr	r3, [pc, #328]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800173e:	701a      	strb	r2, [r3, #0]
					break;
 8001740:	e08d      	b.n	800185e <HAL_FDCAN_RxFifo0Callback+0x1a2>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001742:	4b4d      	ldr	r3, [pc, #308]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001744:	79db      	ldrb	r3, [r3, #7]
 8001746:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800174a:	4b4b      	ldr	r3, [pc, #300]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800174c:	7a1b      	ldrb	r3, [r3, #8]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4313      	orrs	r3, r2
 8001752:	4a49      	ldr	r2, [pc, #292]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001754:	7952      	ldrb	r2, [r2, #5]
 8001756:	4313      	orrs	r3, r2
 8001758:	4a4c      	ldr	r2, [pc, #304]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800175a:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d07c      	beq.n	8001862 <HAL_FDCAN_RxFifo0Callback+0x1a6>
						e_machine_rpm |= 0xFFF0000;
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b48      	ldr	r3, [pc, #288]	@ (8001890 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	4a46      	ldr	r2, [pc, #280]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001772:	6013      	str	r3, [r2, #0]
					break;
 8001774:	e075      	b.n	8001862 <HAL_FDCAN_RxFifo0Callback+0x1a6>
					if (RxHeader_Inv.DataLength == 6)
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b06      	cmp	r3, #6
 800177c:	d173      	bne.n	8001866 <HAL_FDCAN_RxFifo0Callback+0x1aa>
						if (config_inv_lectura_v == 0)
 800177e:	4b45      	ldr	r3, [pc, #276]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_FDCAN_RxFifo0Callback+0xd2>
							config_inv_lectura_v = 1;
 8001786:	4b43      	ldr	r3, [pc, #268]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]
					break;
 800178c:	e06b      	b.n	8001866 <HAL_FDCAN_RxFifo0Callback+0x1aa>
						else if (config_inv_lectura_v == 1)
 800178e:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d167      	bne.n	8001866 <HAL_FDCAN_RxFifo0Callback+0x1aa>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 8001796:	4b38      	ldr	r3, [pc, #224]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001798:	78db      	ldrb	r3, [r3, #3]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	4a36      	ldr	r2, [pc, #216]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800179e:	7892      	ldrb	r2, [r2, #2]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80017a4:	6013      	str	r3, [r2, #0]
					break;
 80017a6:	e05e      	b.n	8001866 <HAL_FDCAN_RxFifo0Callback+0x1aa>
		else if (hfdcan->Instance == FDCAN2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a3b      	ldr	r2, [pc, #236]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d126      	bne.n	8001800 <HAL_FDCAN_RxFifo0Callback+0x144>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80017b2:	4b3b      	ldr	r3, [pc, #236]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017b4:	4a3b      	ldr	r2, [pc, #236]	@ (80018a4 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017b6:	2140      	movs	r1, #64	@ 0x40
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f005 ffa1 	bl	8007700 <HAL_FDCAN_GetRxMessage>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d153      	bne.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
				switch (RxHeader_Acu.Identifier)
 80017c4:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d003      	beq.n	80017d4 <HAL_FDCAN_RxFifo0Callback+0x118>
 80017cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017d0:	d008      	beq.n	80017e4 <HAL_FDCAN_RxFifo0Callback+0x128>
}
 80017d2:	e04b      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					if (RxData_Acu[0] == 0)
 80017d4:	4b32      	ldr	r3, [pc, #200]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d146      	bne.n	800186a <HAL_FDCAN_RxFifo0Callback+0x1ae>
						precarga_inv = 1;
 80017dc:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
					break;
 80017e2:	e042      	b.n	800186a <HAL_FDCAN_RxFifo0Callback+0x1ae>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	4a2d      	ldr	r2, [pc, #180]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017ec:	7852      	ldrb	r2, [r2, #1]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f8:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80017fa:	edc3 7a00 	vstr	s15, [r3]
					break;
 80017fe:	e035      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
		else if (hfdcan->Instance == FDCAN3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2a      	ldr	r2, [pc, #168]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d130      	bne.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800180c:	4a2a      	ldr	r2, [pc, #168]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 800180e:	2140      	movs	r1, #64	@ 0x40
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f005 ff75 	bl	8007700 <HAL_FDCAN_GetRxMessage>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d127      	bne.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
				switch (RxHeader_Dash.Identifier)
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f240 1233 	movw	r2, #307	@ 0x133
 8001824:	4293      	cmp	r3, r2
 8001826:	d121      	bne.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b21b      	sxth	r3, r3
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001840:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001844:	789b      	ldrb	r3, [r3, #2]
 8001846:	b21b      	sxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0x204>)
 800185a:	801a      	strh	r2, [r3, #0]
}
 800185c:	e006      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 800185e:	bf00      	nop
 8001860:	e004      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 8001862:	bf00      	nop
 8001864:	e002      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 800186a:	bf00      	nop
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	4000a000 	.word	0x4000a000
 8001878:	240006d0 	.word	0x240006d0
 800187c:	2400062c 	.word	0x2400062c
 8001880:	240001ec 	.word	0x240001ec
 8001884:	2400071a 	.word	0x2400071a
 8001888:	2400088a 	.word	0x2400088a
 800188c:	240006f8 	.word	0x240006f8
 8001890:	0fff0000 	.word	0x0fff0000
 8001894:	2400008c 	.word	0x2400008c
 8001898:	240006f4 	.word	0x240006f4
 800189c:	4000a400 	.word	0x4000a400
 80018a0:	240006e0 	.word	0x240006e0
 80018a4:	24000678 	.word	0x24000678
 80018a8:	24000088 	.word	0x24000088
 80018ac:	24000008 	.word	0x24000008
 80018b0:	4000d400 	.word	0x4000d400
 80018b4:	240006e8 	.word	0x240006e8
 80018b8:	240006a0 	.word	0x240006a0
 80018bc:	24000702 	.word	0x24000702
 80018c0:	24000704 	.word	0x24000704

080018c4 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a03      	ldr	r2, [pc, #12]	@ (80018e0 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 80018d2:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	2400028c 	.word	0x2400028c
 80018e4:	00000000 	.word	0x00000000

080018e8 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 80018ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001b60 <setTorque+0x278>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018fe:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800190a:	ee17 3a90 	vmov	r3, s15
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b94      	ldr	r3, [pc, #592]	@ (8001b64 <setTorque+0x27c>)
 8001912:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001914:	4b93      	ldr	r3, [pc, #588]	@ (8001b64 <setTorque+0x27c>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	2b64      	cmp	r3, #100	@ 0x64
 800191a:	d902      	bls.n	8001922 <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 800191c:	4b91      	ldr	r3, [pc, #580]	@ (8001b64 <setTorque+0x27c>)
 800191e:	2264      	movs	r2, #100	@ 0x64
 8001920:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001922:	4b91      	ldr	r3, [pc, #580]	@ (8001b68 <setTorque+0x280>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001932:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001b38 <setTorque+0x250>
 8001936:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800193a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800193e:	ee17 3a90 	vmov	r3, s15
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b89      	ldr	r3, [pc, #548]	@ (8001b6c <setTorque+0x284>)
 8001946:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001948:	4b88      	ldr	r3, [pc, #544]	@ (8001b6c <setTorque+0x284>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	2b64      	cmp	r3, #100	@ 0x64
 800194e:	d902      	bls.n	8001956 <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001950:	4b86      	ldr	r3, [pc, #536]	@ (8001b6c <setTorque+0x284>)
 8001952:	2264      	movs	r2, #100	@ 0x64
 8001954:	801a      	strh	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 8001956:	4886      	ldr	r0, [pc, #536]	@ (8001b70 <setTorque+0x288>)
 8001958:	f7ff fe6a 	bl	8001630 <print>
	printValue(s1_aceleracion_aux);
 800195c:	4b81      	ldr	r3, [pc, #516]	@ (8001b64 <setTorque+0x27c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe83 	bl	800166c <printValue>
	print("");
 8001966:	4883      	ldr	r0, [pc, #524]	@ (8001b74 <setTorque+0x28c>)
 8001968:	f7ff fe62 	bl	8001630 <print>
	print("Sensor % 2: ");
 800196c:	4882      	ldr	r0, [pc, #520]	@ (8001b78 <setTorque+0x290>)
 800196e:	f7ff fe5f 	bl	8001630 <print>
	printValue(s2_aceleracion_aux);
 8001972:	4b7e      	ldr	r3, [pc, #504]	@ (8001b6c <setTorque+0x284>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fe78 	bl	800166c <printValue>
	print("");
 800197c:	487d      	ldr	r0, [pc, #500]	@ (8001b74 <setTorque+0x28c>)
 800197e:	f7ff fe57 	bl	8001630 <print>
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001982:	4b78      	ldr	r3, [pc, #480]	@ (8001b64 <setTorque+0x27c>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	2b08      	cmp	r3, #8
 8001988:	d911      	bls.n	80019ae <setTorque+0xc6>
 800198a:	4b78      	ldr	r3, [pc, #480]	@ (8001b6c <setTorque+0x284>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d90d      	bls.n	80019ae <setTorque+0xc6>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001992:	4b74      	ldr	r3, [pc, #464]	@ (8001b64 <setTorque+0x27c>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b74      	ldr	r3, [pc, #464]	@ (8001b6c <setTorque+0x284>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	4413      	add	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da00      	bge.n	80019a4 <setTorque+0xbc>
 80019a2:	3301      	adds	r3, #1
 80019a4:	105b      	asrs	r3, r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <setTorque+0x294>)
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	e002      	b.n	80019b4 <setTorque+0xcc>
	}
	else
	{
		torque_total = 0;
 80019ae:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <setTorque+0x294>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 80019b4:	4b71      	ldr	r3, [pc, #452]	@ (8001b7c <setTorque+0x294>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d803      	bhi.n	80019c4 <setTorque+0xdc>
	{
		torque_total = 0;
 80019bc:	4b6f      	ldr	r3, [pc, #444]	@ (8001b7c <setTorque+0x294>)
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	e006      	b.n	80019d2 <setTorque+0xea>
	}
	else if (torque_total > 90)
 80019c4:	4b6d      	ldr	r3, [pc, #436]	@ (8001b7c <setTorque+0x294>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b5a      	cmp	r3, #90	@ 0x5a
 80019ca:	d902      	bls.n	80019d2 <setTorque+0xea>
	{
		torque_total = 100;
 80019cc:	4b6b      	ldr	r3, [pc, #428]	@ (8001b7c <setTorque+0x294>)
 80019ce:	2264      	movs	r2, #100	@ 0x64
 80019d0:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80019d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b80 <setTorque+0x298>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019da:	4293      	cmp	r3, r2
 80019dc:	dd0a      	ble.n	80019f4 <setTorque+0x10c>
 80019de:	4b67      	ldr	r3, [pc, #412]	@ (8001b7c <setTorque+0x294>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b19      	cmp	r3, #25
 80019e4:	d906      	bls.n	80019f4 <setTorque+0x10c>
	{
		print("EV_2_3");
 80019e6:	4867      	ldr	r0, [pc, #412]	@ (8001b84 <setTorque+0x29c>)
 80019e8:	f7ff fe22 	bl	8001630 <print>
		flag_EV_2_3 = 1;
 80019ec:	4b66      	ldr	r3, [pc, #408]	@ (8001b88 <setTorque+0x2a0>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e00c      	b.n	8001a0e <setTorque+0x126>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80019f4:	4b62      	ldr	r3, [pc, #392]	@ (8001b80 <setTorque+0x298>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019fc:	4293      	cmp	r3, r2
 80019fe:	dc06      	bgt.n	8001a0e <setTorque+0x126>
 8001a00:	4b5e      	ldr	r3, [pc, #376]	@ (8001b7c <setTorque+0x294>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d802      	bhi.n	8001a0e <setTorque+0x126>
	{
		flag_EV_2_3 = 0;
 8001a08:	4b5f      	ldr	r3, [pc, #380]	@ (8001b88 <setTorque+0x2a0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001a0e:	4b55      	ldr	r3, [pc, #340]	@ (8001b64 <setTorque+0x27c>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <setTorque+0x284>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bfb8      	it	lt
 8001a1e:	425b      	neglt	r3, r3
 8001a20:	2b0a      	cmp	r3, #10
 8001a22:	dd06      	ble.n	8001a32 <setTorque+0x14a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001a24:	4859      	ldr	r0, [pc, #356]	@ (8001b8c <setTorque+0x2a4>)
 8001a26:	f7ff fe03 	bl	8001630 <print>
		flag_T11_8_9 = 1;
 8001a2a:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <setTorque+0x2a8>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e007      	b.n	8001a42 <setTorque+0x15a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001a32:	f001 f8d9 	bl	8002be8 <HAL_GetTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a56      	ldr	r2, [pc, #344]	@ (8001b94 <setTorque+0x2ac>)
 8001a3a:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001a3c:	4b54      	ldr	r3, [pc, #336]	@ (8001b90 <setTorque+0x2a8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001a42:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <setTorque+0x2a0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <setTorque+0x16a>
 8001a4a:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <setTorque+0x2a8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <setTorque+0x170>
	{
		torque_total = 0;
 8001a52:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <setTorque+0x294>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a58:	4b4f      	ldr	r3, [pc, #316]	@ (8001b98 <setTorque+0x2b0>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001b9c <setTorque+0x2b4>
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d53a      	bpl.n	8001ae2 <setTorque+0x1fa>
	{
		if (v_celda_min > 2800)
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <setTorque+0x2b0>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001ba0 <setTorque+0x2b8>
 8001a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	dd1f      	ble.n	8001ac0 <setTorque+0x1d8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a80:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <setTorque+0x294>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a8c:	4b42      	ldr	r3, [pc, #264]	@ (8001b98 <setTorque+0x2b0>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a96:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b40 <setTorque+0x258>
 8001a9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a9e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b48 <setTorque+0x260>
 8001aa2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001aaa:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b50 <setTorque+0x268>
 8001aae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ab6:	ee17 2a90 	vmov	r2, s15
 8001aba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <setTorque+0x2bc>)
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e015      	b.n	8001aec <setTorque+0x204>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <setTorque+0x294>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001acc:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001b58 <setTorque+0x270>
 8001ad0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ad4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ad8:	ee17 2a90 	vmov	r2, s15
 8001adc:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <setTorque+0x2bc>)
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e004      	b.n	8001aec <setTorque+0x204>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001ae2:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <setTorque+0x294>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <setTorque+0x2bc>)
 8001aea:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <setTorque+0x294>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d912      	bls.n	8001b1a <setTorque+0x232>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <setTorque+0x294>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4a29      	ldr	r2, [pc, #164]	@ (8001ba8 <setTorque+0x2c0>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	441a      	add	r2, r3
 8001b0a:	1192      	asrs	r2, r2, #6
 8001b0c:	17db      	asrs	r3, r3, #31
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b1a      	subs	r3, #26
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <setTorque+0x294>)
 8001b18:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <setTorque+0x294>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	3301      	adds	r3, #1
 8001b26:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001b28:	88bb      	ldrh	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	f3af 8000 	nop.w
 8001b38:	33333334 	.word	0x33333334
 8001b3c:	401a3333 	.word	0x401a3333
 8001b40:	a1cac083 	.word	0xa1cac083
 8001b44:	3ff5b645 	.word	0x3ff5b645
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40ad4c00 	.word	0x40ad4c00
 8001b50:	00000000 	.word	0x00000000
 8001b54:	408f4000 	.word	0x408f4000
 8001b58:	9999999a 	.word	0x9999999a
 8001b5c:	3fa99999 	.word	0x3fa99999
 8001b60:	24000702 	.word	0x24000702
 8001b64:	24000706 	.word	0x24000706
 8001b68:	24000704 	.word	0x24000704
 8001b6c:	24000708 	.word	0x24000708
 8001b70:	08011d70 	.word	0x08011d70
 8001b74:	08011d80 	.word	0x08011d80
 8001b78:	08011d84 	.word	0x08011d84
 8001b7c:	24000710 	.word	0x24000710
 8001b80:	2400070c 	.word	0x2400070c
 8001b84:	08011d94 	.word	0x08011d94
 8001b88:	24000720 	.word	0x24000720
 8001b8c:	08011d9c 	.word	0x08011d9c
 8001b90:	24000724 	.word	0x24000724
 8001b94:	2400071c 	.word	0x2400071c
 8001b98:	24000008 	.word	0x24000008
 8001b9c:	455ac000 	.word	0x455ac000
 8001ba0:	452f0000 	.word	0x452f0000
 8001ba4:	24000714 	.word	0x24000714
 8001ba8:	b60b60b7 	.word	0xb60b60b7

08001bac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a9e      	ldr	r2, [pc, #632]	@ (8001e30 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	f040 81bb 	bne.w	8001f34 <HAL_TIM_PeriodElapsedCallback+0x388>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001bbe:	4b9d      	ldr	r3, [pc, #628]	@ (8001e34 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a9d      	ldr	r2, [pc, #628]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bc4:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8001bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bc8:	2202      	movs	r2, #2
 8001bca:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001bcc:	4b9a      	ldr	r3, [pc, #616]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd2:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001bd4:	4b98      	ldr	r3, [pc, #608]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001bda:	4b97      	ldr	r3, [pc, #604]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8001be0:	4b96      	ldr	r3, [pc, #600]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b96      	ldr	r3, [pc, #600]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001be8:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8001bea:	4b94      	ldr	r3, [pc, #592]	@ (8001e3c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	121b      	asrs	r3, r3, #8
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b93      	ldr	r3, [pc, #588]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bf4:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001bf6:	4a92      	ldr	r2, [pc, #584]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bf8:	498f      	ldr	r1, [pc, #572]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bfa:	4892      	ldr	r0, [pc, #584]	@ (8001e44 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bfc:	f005 fd25 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	4891      	ldr	r0, [pc, #580]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c04:	f006 fe0c 	bl	8008820 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c0e:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8001c10:	4b8e      	ldr	r3, [pc, #568]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d11b      	bne.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0xa4>
			TxHeader_Acu.Identifier = 0x600;
 8001c18:	4b87      	ldr	r3, [pc, #540]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c1a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001c1e:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8001c20:	4b85      	ldr	r3, [pc, #532]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001c26:	4b84      	ldr	r3, [pc, #528]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c2c:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001c2e:	4b82      	ldr	r3, [pc, #520]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001c34:	4b80      	ldr	r3, [pc, #512]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = 0x0;
 8001c3a:	4b81      	ldr	r3, [pc, #516]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
			TxData_Acu[1] = 0x0;
 8001c40:	4b7f      	ldr	r3, [pc, #508]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	705a      	strb	r2, [r3, #1]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001c46:	4a7e      	ldr	r2, [pc, #504]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c48:	497b      	ldr	r1, [pc, #492]	@ (8001e38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c4a:	487e      	ldr	r0, [pc, #504]	@ (8001e44 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c4c:	f005 fcfd 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001c50:	4b7f      	ldr	r3, [pc, #508]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d003      	beq.n	8001c60 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001c58:	4b7d      	ldr	r3, [pc, #500]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d11b      	bne.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xec>
 8001c60:	4b7c      	ldr	r3, [pc, #496]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d117      	bne.n	8001c98 <HAL_TIM_PeriodElapsedCallback+0xec>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c68:	4b7b      	ldr	r3, [pc, #492]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a7b      	ldr	r2, [pc, #492]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c6e:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c70:	4b7a      	ldr	r3, [pc, #488]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c72:	2203      	movs	r2, #3
 8001c74:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c76:	4b79      	ldr	r3, [pc, #484]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c7c:	4b78      	ldr	r3, [pc, #480]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c82:	4b77      	ldr	r3, [pc, #476]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001c88:	4b75      	ldr	r3, [pc, #468]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c8a:	2206      	movs	r2, #6
 8001c8c:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c8e:	4a74      	ldr	r2, [pc, #464]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c90:	4972      	ldr	r1, [pc, #456]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c92:	4874      	ldr	r0, [pc, #464]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c94:	f005 fcd9 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001c98:	4b6d      	ldr	r3, [pc, #436]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b0d      	cmp	r3, #13
 8001c9e:	f200 8149 	bhi.w	8001f34 <HAL_TIM_PeriodElapsedCallback+0x388>
 8001ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca8:	08001ce1 	.word	0x08001ce1
 8001cac:	08001f35 	.word	0x08001f35
 8001cb0:	08001f35 	.word	0x08001f35
 8001cb4:	08001d11 	.word	0x08001d11
 8001cb8:	08001d47 	.word	0x08001d47
 8001cbc:	08001f35 	.word	0x08001f35
 8001cc0:	08001dcf 	.word	0x08001dcf
 8001cc4:	08001f35 	.word	0x08001f35
 8001cc8:	08001f35 	.word	0x08001f35
 8001ccc:	08001f35 	.word	0x08001f35
 8001cd0:	08001e81 	.word	0x08001e81
 8001cd4:	08001ec1 	.word	0x08001ec1
 8001cd8:	08001f35 	.word	0x08001f35
 8001cdc:	08001efd 	.word	0x08001efd
		{
		case 0:
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ce6:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cea:	2203      	movs	r2, #3
 8001cec:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001cee:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001cfa:	4b59      	ldr	r3, [pc, #356]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001d00:	4b57      	ldr	r3, [pc, #348]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d06:	4a56      	ldr	r2, [pc, #344]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d08:	4954      	ldr	r1, [pc, #336]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d0a:	4856      	ldr	r0, [pc, #344]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d0c:	f005 fc9d 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>

		case 3:
#if DEBUG
			//print("state: standby");
#endif
			flag_react = 0;
 8001d10:	4b55      	ldr	r3, [pc, #340]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d16:	4b50      	ldr	r3, [pc, #320]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a50      	ldr	r2, [pc, #320]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d1c:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d20:	2203      	movs	r2, #3
 8001d22:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d24:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d30:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001d36:	4b4a      	ldr	r3, [pc, #296]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d38:	2204      	movs	r2, #4
 8001d3a:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d3e:	4947      	ldr	r1, [pc, #284]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d40:	4848      	ldr	r0, [pc, #288]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d42:	f005 fc82 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001d46:	4849      	ldr	r0, [pc, #292]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d48:	f7ff fc72 	bl	8001630 <print>
#endif
			if (flag_r2d == 1){
 8001d4c:	4b41      	ldr	r3, [pc, #260]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d120      	bne.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x1ea>
				TxHeader_Inv.Identifier = 0x362;
 8001d54:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d56:	f240 3262 	movw	r2, #866	@ 0x362
 8001d5a:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d5e:	2204      	movs	r2, #4
 8001d60:	60da      	str	r2, [r3, #12]

				real_torque = 0;
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]

				TxData_Inv[0] = 0x0;
 8001d68:	4b3d      	ldr	r3, [pc, #244]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = real_torque;
 8001d74:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d7c:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = 0x0;
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	70da      	strb	r2, [r3, #3]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d84:	4a36      	ldr	r2, [pc, #216]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d86:	4935      	ldr	r1, [pc, #212]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d88:	4836      	ldr	r0, [pc, #216]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d8a:	f005 fc5e 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
				flag_react = 0; // Reactivado
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
				TxData_Inv[2] = 0x4;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
			}

			break;
 8001d94:	e0ce      	b.n	8001f34 <HAL_TIM_PeriodElapsedCallback+0x388>
				flag_react = 0;
 8001d96:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001da2:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001da4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001da6:	2203      	movs	r2, #3
 8001da8:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001daa:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
				TxData_Inv[0] = 0x0;
 8001db0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001dc2:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001dc4:	4925      	ldr	r1, [pc, #148]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dc6:	4827      	ldr	r0, [pc, #156]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001dc8:	f005 fc3f 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
			break;
 8001dcc:	e0b2      	b.n	8001f34 <HAL_TIM_PeriodElapsedCallback+0x388>
		case 6:
			print("state: torque");
 8001dce:	4829      	ldr	r0, [pc, #164]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dd0:	f7ff fc2e 	bl	8001630 <print>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001dd4:	f7ff fd88 	bl	80018e8 <setTorque>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dde:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001de2:	f240 3262 	movw	r2, #866	@ 0x362
 8001de6:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dea:	2204      	movs	r2, #4
 8001dec:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001df6:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e04:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001e06:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e18:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e20:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001e22:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e24:	490d      	ldr	r1, [pc, #52]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e26:	480f      	ldr	r0, [pc, #60]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e28:	f005 fc0f 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
			//CAN_bus_off_check_reset(&hfdcan1);

			break;
 8001e2c:	e082      	b.n	8001f34 <HAL_TIM_PeriodElapsedCallback+0x388>
 8001e2e:	bf00      	nop
 8001e30:	24000494 	.word	0x24000494
 8001e34:	24000004 	.word	0x24000004
 8001e38:	24000654 	.word	0x24000654
 8001e3c:	240006f4 	.word	0x240006f4
 8001e40:	240006d8 	.word	0x240006d8
 8001e44:	2400028c 	.word	0x2400028c
 8001e48:	58021800 	.word	0x58021800
 8001e4c:	24000728 	.word	0x24000728
 8001e50:	2400071a 	.word	0x2400071a
 8001e54:	2400088c 	.word	0x2400088c
 8001e58:	24000000 	.word	0x24000000
 8001e5c:	24000608 	.word	0x24000608
 8001e60:	240006c8 	.word	0x240006c8
 8001e64:	240001ec 	.word	0x240001ec
 8001e68:	2400088b 	.word	0x2400088b
 8001e6c:	08011d44 	.word	0x08011d44
 8001e70:	24000718 	.word	0x24000718
 8001e74:	08011da4 	.word	0x08011da4
 8001e78:	24000712 	.word	0x24000712
 8001e7c:	24000713 	.word	0x24000713

		case 10:
			print("state: soft fault");
 8001e80:	482e      	ldr	r0, [pc, #184]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001e82:	f7ff fbd5 	bl	8001630 <print>
			printValue(error);
 8001e86:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fbee 	bl	800166c <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001e90:	4b2c      	ldr	r3, [pc, #176]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2c      	ldr	r2, [pc, #176]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001e96:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001e98:	4b2b      	ldr	r3, [pc, #172]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001ea4:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x13;
 8001eb0:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001eb2:	2213      	movs	r2, #19
 8001eb4:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001eb6:	4a25      	ldr	r2, [pc, #148]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001eb8:	4923      	ldr	r1, [pc, #140]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001eba:	4825      	ldr	r0, [pc, #148]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001ebc:	f005 fbc5 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
												  TxData_Inv);
				}*/

		case 11:
			print("state: hard fault");
 8001ec0:	4824      	ldr	r0, [pc, #144]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001ec2:	f7ff fbb5 	bl	8001630 <print>
			flag_react = 1;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001ed2:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 13;
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001eee:	220d      	movs	r2, #13
 8001ef0:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001ef4:	4914      	ldr	r1, [pc, #80]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001ef6:	4816      	ldr	r0, [pc, #88]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001ef8:	f005 fba7 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>

		case 13:
			print("state: shutdown");
 8001efc:	4817      	ldr	r0, [pc, #92]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001efe:	f7ff fb97 	bl	8001630 <print>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a10      	ldr	r2, [pc, #64]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001f08:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001f28:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001f2a:	4907      	ldr	r1, [pc, #28]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001f2c:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001f2e:	f005 fb8c 	bl	800764a <HAL_FDCAN_AddMessageToTxFifoQ>


			break;
 8001f32:	bf00      	nop
		}
#endif
	}
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	08011db4 	.word	0x08011db4
 8001f40:	2400088a 	.word	0x2400088a
 8001f44:	24000000 	.word	0x24000000
 8001f48:	24000608 	.word	0x24000608
 8001f4c:	240006c8 	.word	0x240006c8
 8001f50:	240001ec 	.word	0x240001ec
 8001f54:	08011dc8 	.word	0x08011dc8
 8001f58:	2400088b 	.word	0x2400088b
 8001f5c:	08011ddc 	.word	0x08011ddc

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <Error_Handler+0x8>

08001f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_MspInit+0x30>)
 8001f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f78:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <HAL_MspInit+0x30>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_MspInit+0x30>)
 8001f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	58024400 	.word	0x58024400

08001fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b090      	sub	sp, #64	@ 0x40
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a90      	ldr	r2, [pc, #576]	@ (8002200 <HAL_ADC_MspInit+0x260>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	f040 80a3 	bne.w	800210a <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002204 <HAL_ADC_MspInit+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4a8e      	ldr	r2, [pc, #568]	@ (8002204 <HAL_ADC_MspInit+0x264>)
 8001fcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fce:	4b8d      	ldr	r3, [pc, #564]	@ (8002204 <HAL_ADC_MspInit+0x264>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8001fd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fdc:	4a8a      	ldr	r2, [pc, #552]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fe6:	4b88      	ldr	r3, [pc, #544]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8001fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff4:	4b84      	ldr	r3, [pc, #528]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffa:	4a83      	ldr	r2, [pc, #524]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002004:	4b80      	ldr	r3, [pc, #512]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b7d      	ldr	r3, [pc, #500]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	4a7b      	ldr	r2, [pc, #492]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002022:	4b79      	ldr	r3, [pc, #484]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002030:	4b75      	ldr	r3, [pc, #468]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002036:	4a74      	ldr	r2, [pc, #464]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002040:	4b71      	ldr	r3, [pc, #452]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 800204e:	2330      	movs	r3, #48	@ 0x30
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	486a      	ldr	r0, [pc, #424]	@ (800220c <HAL_ADC_MspInit+0x26c>)
 8002062:	f006 fa35 	bl	80084d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002066:	2303      	movs	r3, #3
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206a:	2303      	movs	r3, #3
 800206c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002072:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002076:	4619      	mov	r1, r3
 8002078:	4865      	ldr	r0, [pc, #404]	@ (8002210 <HAL_ADC_MspInit+0x270>)
 800207a:	f006 fa29 	bl	80084d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 800207e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002084:	2303      	movs	r3, #3
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	4860      	ldr	r0, [pc, #384]	@ (8002214 <HAL_ADC_MspInit+0x274>)
 8002094:	f006 fa1c 	bl	80084d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 800209a:	4a60      	ldr	r2, [pc, #384]	@ (800221c <HAL_ADC_MspInit+0x27c>)
 800209c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800209e:	4b5e      	ldr	r3, [pc, #376]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020a0:	2209      	movs	r2, #9
 80020a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b8:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020c0:	4b55      	ldr	r3, [pc, #340]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020c8:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020d0:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d6:	4b50      	ldr	r3, [pc, #320]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020dc:	484e      	ldr	r0, [pc, #312]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020de:	f002 ff61 	bl	8004fa4 <HAL_DMA_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 80020e8:	f7ff ff3a 	bl	8001f60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80020f2:	4a49      	ldr	r2, [pc, #292]	@ (8002218 <HAL_ADC_MspInit+0x278>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2012      	movs	r0, #18
 80020fe:	f002 ff1c 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002102:	2012      	movs	r0, #18
 8002104:	f002 ff33 	bl	8004f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002108:	e076      	b.n	80021f8 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a44      	ldr	r2, [pc, #272]	@ (8002220 <HAL_ADC_MspInit+0x280>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d171      	bne.n	80021f8 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002114:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_ADC_MspInit+0x264>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	4a3a      	ldr	r2, [pc, #232]	@ (8002204 <HAL_ADC_MspInit+0x264>)
 800211c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_ADC_MspInit+0x264>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10e      	bne.n	8002144 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800212c:	4a36      	ldr	r2, [pc, #216]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002136:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002144:	4b30      	ldr	r3, [pc, #192]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214a:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002154:	4b2c      	ldr	r3, [pc, #176]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	4a20      	ldr	r2, [pc, #128]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002188:	f043 0320 	orr.w	r3, r3, #32
 800218c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_ADC_MspInit+0x268>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800219e:	2320      	movs	r3, #32
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	4816      	ldr	r0, [pc, #88]	@ (800220c <HAL_ADC_MspInit+0x26c>)
 80021b2:	f006 f98d 	bl	80084d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80021b6:	2301      	movs	r3, #1
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ba:	2303      	movs	r3, #3
 80021bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c6:	4619      	mov	r1, r3
 80021c8:	4811      	ldr	r0, [pc, #68]	@ (8002210 <HAL_ADC_MspInit+0x270>)
 80021ca:	f006 f981 	bl	80084d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 80021ce:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d4:	2303      	movs	r3, #3
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e0:	4619      	mov	r1, r3
 80021e2:	480c      	ldr	r0, [pc, #48]	@ (8002214 <HAL_ADC_MspInit+0x274>)
 80021e4:	f006 f974 	bl	80084d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2012      	movs	r0, #18
 80021ee:	f002 fea4 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021f2:	2012      	movs	r0, #18
 80021f4:	f002 febb 	bl	8004f6e <HAL_NVIC_EnableIRQ>
}
 80021f8:	bf00      	nop
 80021fa:	3740      	adds	r7, #64	@ 0x40
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40022000 	.word	0x40022000
 8002204:	24000890 	.word	0x24000890
 8002208:	58024400 	.word	0x58024400
 800220c:	58020800 	.word	0x58020800
 8002210:	58020400 	.word	0x58020400
 8002214:	58021400 	.word	0x58021400
 8002218:	24000174 	.word	0x24000174
 800221c:	40020010 	.word	0x40020010
 8002220:	40022100 	.word	0x40022100

08002224 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0bc      	sub	sp, #240	@ 0xf0
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	22b8      	movs	r2, #184	@ 0xb8
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f00e ffeb 	bl	8011220 <memset>
  if(hfdcan->Instance==FDCAN1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a8d      	ldr	r2, [pc, #564]	@ (8002484 <HAL_FDCAN_MspInit+0x260>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d157      	bne.n	8002304 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002254:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 0320 	add.w	r3, r7, #32
 800226a:	4618      	mov	r0, r3
 800226c:	f007 faaa 	bl	80097c4 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002276:	f7ff fe73 	bl	8001f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800227a:	4b83      	ldr	r3, [pc, #524]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	4a81      	ldr	r2, [pc, #516]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 8002282:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002284:	4b80      	ldr	r3, [pc, #512]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10e      	bne.n	80022aa <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800228c:	4b7f      	ldr	r3, [pc, #508]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 800228e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002292:	4a7e      	ldr	r2, [pc, #504]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800229c:	4b7b      	ldr	r3, [pc, #492]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 800229e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	4b78      	ldr	r3, [pc, #480]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b0:	4a76      	ldr	r2, [pc, #472]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ba:	4b74      	ldr	r3, [pc, #464]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022c8:	2303      	movs	r3, #3
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80022e0:	2309      	movs	r3, #9
 80022e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022ea:	4619      	mov	r1, r3
 80022ec:	4868      	ldr	r0, [pc, #416]	@ (8002490 <HAL_FDCAN_MspInit+0x26c>)
 80022ee:	f006 f8ef 	bl	80084d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2101      	movs	r1, #1
 80022f6:	2013      	movs	r0, #19
 80022f8:	f002 fe1f 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80022fc:	2013      	movs	r0, #19
 80022fe:	f002 fe36 	bl	8004f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002302:	e0ba      	b.n	800247a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a62      	ldr	r2, [pc, #392]	@ (8002494 <HAL_FDCAN_MspInit+0x270>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d158      	bne.n	80023c0 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800230e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4618      	mov	r0, r3
 8002326:	f007 fa4d 	bl	80097c4 <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002330:	f7ff fe16 	bl	8001f60 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002334:	4b54      	ldr	r3, [pc, #336]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a53      	ldr	r2, [pc, #332]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 800233c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800233e:	4b52      	ldr	r3, [pc, #328]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10e      	bne.n	8002364 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002346:	4b51      	ldr	r3, [pc, #324]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002348:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800234c:	4a4f      	ldr	r2, [pc, #316]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002356:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002358:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4b49      	ldr	r3, [pc, #292]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800236a:	4a48      	ldr	r2, [pc, #288]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002374:	4b45      	ldr	r3, [pc, #276]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002382:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002386:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800239c:	2309      	movs	r3, #9
 800239e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023a6:	4619      	mov	r1, r3
 80023a8:	483b      	ldr	r0, [pc, #236]	@ (8002498 <HAL_FDCAN_MspInit+0x274>)
 80023aa:	f006 f891 	bl	80084d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2102      	movs	r1, #2
 80023b2:	2014      	movs	r0, #20
 80023b4:	f002 fdc1 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80023b8:	2014      	movs	r0, #20
 80023ba:	f002 fdd8 	bl	8004f6e <HAL_NVIC_EnableIRQ>
}
 80023be:	e05c      	b.n	800247a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a35      	ldr	r2, [pc, #212]	@ (800249c <HAL_FDCAN_MspInit+0x278>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d157      	bne.n	800247a <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023dc:	f107 0320 	add.w	r3, r7, #32
 80023e0:	4618      	mov	r0, r3
 80023e2:	f007 f9ef 	bl	80097c4 <HAL_RCCEx_PeriphCLKConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80023ec:	f7ff fdb8 	bl	8001f60 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80023f0:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4a24      	ldr	r2, [pc, #144]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 80023f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80023fa:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <HAL_FDCAN_MspInit+0x264>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10e      	bne.n	8002420 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002402:	4b22      	ldr	r3, [pc, #136]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002404:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002408:	4a20      	ldr	r2, [pc, #128]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002412:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002414:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002420:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b16      	ldr	r3, [pc, #88]	@ (800248c <HAL_FDCAN_MspInit+0x268>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800243e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002442:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002462:	4619      	mov	r1, r3
 8002464:	480e      	ldr	r0, [pc, #56]	@ (80024a0 <HAL_FDCAN_MspInit+0x27c>)
 8002466:	f006 f833 	bl	80084d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	209f      	movs	r0, #159	@ 0x9f
 8002470:	f002 fd63 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002474:	209f      	movs	r0, #159	@ 0x9f
 8002476:	f002 fd7a 	bl	8004f6e <HAL_NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	37f0      	adds	r7, #240	@ 0xf0
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	4000a000 	.word	0x4000a000
 8002488:	24000894 	.word	0x24000894
 800248c:	58024400 	.word	0x58024400
 8002490:	58020c00 	.word	0x58020c00
 8002494:	4000a400 	.word	0x4000a400
 8002498:	58020400 	.word	0x58020400
 800249c:	4000d400 	.word	0x4000d400
 80024a0:	58021800 	.word	0x58021800

080024a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3e      	ldr	r2, [pc, #248]	@ (80025bc <HAL_SD_MspInit+0x118>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d175      	bne.n	80025b2 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024c6:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 80024c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024cc:	4a3c      	ldr	r2, [pc, #240]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024d6:	4b3a      	ldr	r3, [pc, #232]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 80024d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e4:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ea:	4a35      	ldr	r2, [pc, #212]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002508:	4a2d      	ldr	r2, [pc, #180]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002512:	4b2b      	ldr	r3, [pc, #172]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	4a26      	ldr	r2, [pc, #152]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_SD_MspInit+0x11c>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800253e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002542:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002550:	230c      	movs	r3, #12
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	481a      	ldr	r0, [pc, #104]	@ (80025c4 <HAL_SD_MspInit+0x120>)
 800255c:	f005 ffb8 	bl	80084d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002560:	2304      	movs	r3, #4
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002570:	230c      	movs	r3, #12
 8002572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	4813      	ldr	r0, [pc, #76]	@ (80025c8 <HAL_SD_MspInit+0x124>)
 800257c:	f005 ffa8 	bl	80084d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8002592:	2307      	movs	r3, #7
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	480b      	ldr	r0, [pc, #44]	@ (80025cc <HAL_SD_MspInit+0x128>)
 800259e:	f005 ff97 	bl	80084d0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2031      	movs	r0, #49	@ 0x31
 80025a8:	f002 fcc7 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80025ac:	2031      	movs	r0, #49	@ 0x31
 80025ae:	f002 fcde 	bl	8004f6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80025b2:	bf00      	nop
 80025b4:	3730      	adds	r7, #48	@ 0x30
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	52007000 	.word	0x52007000
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58020800 	.word	0x58020800
 80025c8:	58020c00 	.word	0x58020c00
 80025cc:	58020400 	.word	0x58020400

080025d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <HAL_TIM_Base_MspInit+0x74>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10f      	bne.n	8002602 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e2:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_TIM_Base_MspInit+0x78>)
 80025e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_TIM_Base_MspInit+0x78>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_TIM_Base_MspInit+0x78>)
 80025f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002600:	e01b      	b.n	800263a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a11      	ldr	r2, [pc, #68]	@ (800264c <HAL_TIM_Base_MspInit+0x7c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d116      	bne.n	800263a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_TIM_Base_MspInit+0x78>)
 800260e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002612:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <HAL_TIM_Base_MspInit+0x78>)
 8002614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002618:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800261c:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <HAL_TIM_Base_MspInit+0x78>)
 800261e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2075      	movs	r0, #117	@ 0x75
 8002630:	f002 fc83 	bl	8004f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002634:	2075      	movs	r0, #117	@ 0x75
 8002636:	f002 fc9a 	bl	8004f6e <HAL_NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	58024400 	.word	0x58024400
 800264c:	40014400 	.word	0x40014400

08002650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a13      	ldr	r2, [pc, #76]	@ (80026bc <HAL_TIM_MspPostInit+0x6c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11f      	bne.n	80026b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002672:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_TIM_MspPostInit+0x70>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002678:	4a11      	ldr	r2, [pc, #68]	@ (80026c0 <HAL_TIM_MspPostInit+0x70>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002682:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <HAL_TIM_MspPostInit+0x70>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8002690:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002694:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <HAL_TIM_MspPostInit+0x74>)
 80026ae:	f005 ff0f 	bl	80084d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40010000 	.word	0x40010000
 80026c0:	58024400 	.word	0x58024400
 80026c4:	58021000 	.word	0x58021000

080026c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0ba      	sub	sp, #232	@ 0xe8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e0:	f107 0318 	add.w	r3, r7, #24
 80026e4:	22b8      	movs	r2, #184	@ 0xb8
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f00e fd99 	bl	8011220 <memset>
  if(huart->Instance==USART1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002828 <HAL_UART_MspInit+0x160>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d147      	bne.n	8002788 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026f8:	f04f 0201 	mov.w	r2, #1
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800270a:	f107 0318 	add.w	r3, r7, #24
 800270e:	4618      	mov	r0, r3
 8002710:	f007 f858 	bl	80097c4 <HAL_RCCEx_PeriphCLKConfig>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800271a:	f7ff fc21 	bl	8001f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800271e:	4b43      	ldr	r3, [pc, #268]	@ (800282c <HAL_UART_MspInit+0x164>)
 8002720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002724:	4a41      	ldr	r2, [pc, #260]	@ (800282c <HAL_UART_MspInit+0x164>)
 8002726:	f043 0310 	orr.w	r3, r3, #16
 800272a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800272e:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <HAL_UART_MspInit+0x164>)
 8002730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_UART_MspInit+0x164>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002742:	4a3a      	ldr	r2, [pc, #232]	@ (800282c <HAL_UART_MspInit+0x164>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800274c:	4b37      	ldr	r3, [pc, #220]	@ (800282c <HAL_UART_MspInit+0x164>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800275a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800275e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002774:	2307      	movs	r3, #7
 8002776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800277e:	4619      	mov	r1, r3
 8002780:	482b      	ldr	r0, [pc, #172]	@ (8002830 <HAL_UART_MspInit+0x168>)
 8002782:	f005 fea5 	bl	80084d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002786:	e04a      	b.n	800281e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <HAL_UART_MspInit+0x16c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d145      	bne.n	800281e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002792:	f04f 0202 	mov.w	r2, #2
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a4:	f107 0318 	add.w	r3, r7, #24
 80027a8:	4618      	mov	r0, r3
 80027aa:	f007 f80b 	bl	80097c4 <HAL_RCCEx_PeriphCLKConfig>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80027b4:	f7ff fbd4 	bl	8001f60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b8:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <HAL_UART_MspInit+0x164>)
 80027ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027be:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_UART_MspInit+0x164>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027c8:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_UART_MspInit+0x164>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_UART_MspInit+0x164>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027dc:	4a13      	ldr	r2, [pc, #76]	@ (800282c <HAL_UART_MspInit+0x164>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_UART_MspInit+0x164>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027f4:	230c      	movs	r3, #12
 80027f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800280c:	2307      	movs	r3, #7
 800280e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	@ (8002830 <HAL_UART_MspInit+0x168>)
 800281a:	f005 fe59 	bl	80084d0 <HAL_GPIO_Init>
}
 800281e:	bf00      	nop
 8002820:	37e8      	adds	r7, #232	@ 0xe8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40011000 	.word	0x40011000
 800282c:	58024400 	.word	0x58024400
 8002830:	58020000 	.word	0x58020000
 8002834:	40004400 	.word	0x40004400

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <NMI_Handler+0x4>

08002840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <MemManage_Handler+0x4>

08002850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <BusFault_Handler+0x4>

08002858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <UsageFault_Handler+0x4>

08002860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800288e:	f000 f997 	bl	8002bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800289c:	4802      	ldr	r0, [pc, #8]	@ (80028a8 <DMA1_Stream0_IRQHandler+0x10>)
 800289e:	f003 f943 	bl	8005b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	24000174 	.word	0x24000174

080028ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028b0:	4803      	ldr	r0, [pc, #12]	@ (80028c0 <ADC_IRQHandler+0x14>)
 80028b2:	f000 ff99 	bl	80037e8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028b6:	4803      	ldr	r0, [pc, #12]	@ (80028c4 <ADC_IRQHandler+0x18>)
 80028b8:	f000 ff96 	bl	80037e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	24000094 	.word	0x24000094
 80028c4:	24000104 	.word	0x24000104

080028c8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <FDCAN1_IT0_IRQHandler+0x10>)
 80028ce:	f005 f8fd 	bl	8007acc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	240001ec 	.word	0x240001ec

080028dc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <FDCAN2_IT0_IRQHandler+0x10>)
 80028e2:	f005 f8f3 	bl	8007acc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2400028c 	.word	0x2400028c

080028f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <SDMMC1_IRQHandler+0x10>)
 80028f6:	f009 fdbb 	bl	800c470 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	240003cc 	.word	0x240003cc

08002904 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <TIM16_IRQHandler+0x10>)
 800290a:	f00b f8e4 	bl	800dad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	24000494 	.word	0x24000494

08002918 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800291c:	4802      	ldr	r0, [pc, #8]	@ (8002928 <FDCAN3_IT0_IRQHandler+0x10>)
 800291e:	f005 f8d5 	bl	8007acc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2400032c 	.word	0x2400032c

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f00e fc68 	bl	8011230 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	24050000 	.word	0x24050000
 800298c:	00000400 	.word	0x00000400
 8002990:	24000898 	.word	0x24000898
 8002994:	24000a08 	.word	0x24000a08

08002998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800299c:	4b32      	ldr	r3, [pc, #200]	@ (8002a68 <SystemInit+0xd0>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	4a31      	ldr	r2, [pc, #196]	@ (8002a68 <SystemInit+0xd0>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <SystemInit+0xd4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d807      	bhi.n	80029c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029b8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a6c <SystemInit+0xd4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 030f 	bic.w	r3, r3, #15
 80029c0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a6c <SystemInit+0xd4>)
 80029c2:	f043 0307 	orr.w	r3, r3, #7
 80029c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029c8:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <SystemInit+0xd8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <SystemInit+0xd8>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029d4:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <SystemInit+0xd8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029da:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <SystemInit+0xd8>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4924      	ldr	r1, [pc, #144]	@ (8002a70 <SystemInit+0xd8>)
 80029e0:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <SystemInit+0xdc>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <SystemInit+0xd4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <SystemInit+0xd4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 030f 	bic.w	r3, r3, #15
 80029fa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <SystemInit+0xd4>)
 80029fc:	f043 0307 	orr.w	r3, r3, #7
 8002a00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <SystemInit+0xd8>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a08:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <SystemInit+0xd8>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a0e:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <SystemInit+0xd8>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a14:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <SystemInit+0xd8>)
 8002a16:	4a18      	ldr	r2, [pc, #96]	@ (8002a78 <SystemInit+0xe0>)
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <SystemInit+0xd8>)
 8002a1c:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <SystemInit+0xe4>)
 8002a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <SystemInit+0xd8>)
 8002a22:	4a17      	ldr	r2, [pc, #92]	@ (8002a80 <SystemInit+0xe8>)
 8002a24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a26:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <SystemInit+0xd8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a2c:	4b10      	ldr	r3, [pc, #64]	@ (8002a70 <SystemInit+0xd8>)
 8002a2e:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <SystemInit+0xe8>)
 8002a30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a32:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <SystemInit+0xd8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a38:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <SystemInit+0xd8>)
 8002a3a:	4a11      	ldr	r2, [pc, #68]	@ (8002a80 <SystemInit+0xe8>)
 8002a3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <SystemInit+0xd8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <SystemInit+0xd8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <SystemInit+0xd8>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a50:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <SystemInit+0xd8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <SystemInit+0xec>)
 8002a58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	52002000 	.word	0x52002000
 8002a70:	58024400 	.word	0x58024400
 8002a74:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a78:	02020200 	.word	0x02020200
 8002a7c:	01ff0000 	.word	0x01ff0000
 8002a80:	01010280 	.word	0x01010280
 8002a84:	52004000 	.word	0x52004000

08002a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a8c:	f7ff ff84 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a90:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a92:	490d      	ldr	r1, [pc, #52]	@ (8002ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f00e fbc1 	bl	801123c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aba:	f7fd fe17 	bl	80006ec <main>
  bx  lr
 8002abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ac4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ac8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002acc:	08011ee0 	.word	0x08011ee0
  ldr r2, =_sbss
 8002ad0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002ad4:	24000a04 	.word	0x24000a04

08002ad8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC3_IRQHandler>
	...

08002adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae2:	2003      	movs	r0, #3
 8002ae4:	f002 fa1e 	bl	8004f24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ae8:	f006 fc96 	bl	8009418 <HAL_RCC_GetSysClockFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_Init+0x68>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	4913      	ldr	r1, [pc, #76]	@ (8002b48 <HAL_Init+0x6c>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b06:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <HAL_Init+0x68>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b48 <HAL_Init+0x6c>)
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <HAL_Init+0x70>)
 8002b1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b20:	4a0b      	ldr	r2, [pc, #44]	@ (8002b50 <HAL_Init+0x74>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b26:	200f      	movs	r0, #15
 8002b28:	f000 f814 	bl	8002b54 <HAL_InitTick>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e002      	b.n	8002b3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b36:	f7ff fa19 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	58024400 	.word	0x58024400
 8002b48:	08011e38 	.word	0x08011e38
 8002b4c:	24000010 	.word	0x24000010
 8002b50:	2400000c 	.word	0x2400000c

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b5c:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_InitTick+0x60>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e021      	b.n	8002bac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b68:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <HAL_InitTick+0x64>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <HAL_InitTick+0x60>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fa03 	bl	8004f8a <HAL_SYSTICK_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00e      	b.n	8002bac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b0f      	cmp	r3, #15
 8002b92:	d80a      	bhi.n	8002baa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b94:	2200      	movs	r2, #0
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f002 f9cd 	bl	8004f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba0:	4a06      	ldr	r2, [pc, #24]	@ (8002bbc <HAL_InitTick+0x68>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e000      	b.n	8002bac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	24000018 	.word	0x24000018
 8002bb8:	2400000c 	.word	0x2400000c
 8002bbc:	24000014 	.word	0x24000014

08002bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_IncTick+0x20>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_IncTick+0x24>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	4a04      	ldr	r2, [pc, #16]	@ (8002be4 <HAL_IncTick+0x24>)
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	24000018 	.word	0x24000018
 8002be4:	2400089c 	.word	0x2400089c

08002be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return uwTick;
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <HAL_GetTick+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	2400089c 	.word	0x2400089c

08002c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c08:	f7ff ffee 	bl	8002be8 <HAL_GetTick>
 8002c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d005      	beq.n	8002c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c44 <HAL_Delay+0x44>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c26:	bf00      	nop
 8002c28:	f7ff ffde 	bl	8002be8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d8f7      	bhi.n	8002c28 <HAL_Delay+0x28>
  {
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	24000018 	.word	0x24000018

08002c48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	609a      	str	r2, [r3, #8]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3360      	adds	r3, #96	@ 0x60
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a10      	ldr	r2, [pc, #64]	@ (8002d10 <LL_ADC_SetOffset+0x60>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d10b      	bne.n	8002cec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cea:	e00b      	b.n	8002d04 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	58026000 	.word	0x58026000

08002d14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3360      	adds	r3, #96	@ 0x60
 8002d22:	461a      	mov	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	611a      	str	r2, [r3, #16]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a0c      	ldr	r2, [pc, #48]	@ (8002db4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3360      	adds	r3, #96	@ 0x60
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	601a      	str	r2, [r3, #0]
  }
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	58026000 	.word	0x58026000

08002db8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002df8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10e      	bne.n	8002dea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3360      	adds	r3, #96	@ 0x60
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	58026000 	.word	0x58026000

08002dfc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e3c <LL_ADC_SetOffsetSign+0x40>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10e      	bne.n	8002e2e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3360      	adds	r3, #96	@ 0x60
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	58026000 	.word	0x58026000

08002e40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3360      	adds	r3, #96	@ 0x60
 8002e50:	461a      	mov	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e90 <LL_ADC_SetOffsetState+0x50>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e72:	e007      	b.n	8002e84 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	58026000 	.word	0x58026000

08002e94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3330      	adds	r3, #48	@ 0x30
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	4413      	add	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	211f      	movs	r1, #31
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	f003 011f 	and.w	r1, r3, #31
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f023 0203 	bic.w	r2, r3, #3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a08      	ldr	r2, [pc, #32]	@ (8002f88 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d107      	bne.n	8002f7a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60da      	str	r2, [r3, #12]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	58026000 	.word	0x58026000

08002f8c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f98:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b087      	sub	sp, #28
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0e5b      	lsrs	r3, r3, #25
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	4413      	add	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	0d1b      	lsrs	r3, r3, #20
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2107      	movs	r1, #7
 8002fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	0d1b      	lsrs	r3, r3, #20
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d115      	bne.n	8003048 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0318 	and.w	r3, r3, #24
 8003032:	4914      	ldr	r1, [pc, #80]	@ (8003084 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003034:	40d9      	lsrs	r1, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	400b      	ands	r3, r1
 800303a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303e:	431a      	orrs	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003046:	e014      	b.n	8003072 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003054:	43db      	mvns	r3, r3
 8003056:	401a      	ands	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0318 	and.w	r3, r3, #24
 800305e:	4909      	ldr	r1, [pc, #36]	@ (8003084 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003060:	40d9      	lsrs	r1, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	400b      	ands	r3, r1
 8003066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	58026000 	.word	0x58026000
 8003084:	000fffff 	.word	0x000fffff

08003088 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 031f 	and.w	r3, r3, #31
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6093      	str	r3, [r2, #8]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	5fffffc0 	.word	0x5fffffc0

080030e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f8:	d101      	bne.n	80030fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <LL_ADC_EnableInternalRegulator+0x24>)
 800311a:	4013      	ands	r3, r2
 800311c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	6fffffc0 	.word	0x6fffffc0

08003134 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003148:	d101      	bne.n	800314e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <LL_ADC_Enable+0x24>)
 800316a:	4013      	ands	r3, r2
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	7fffffc0 	.word	0x7fffffc0

08003184 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <LL_ADC_IsEnabled+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_IsEnabled+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <LL_ADC_REG_StartConversion+0x24>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	f043 0204 	orr.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	7fffffc0 	.word	0x7fffffc0

080031d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d101      	bne.n	80031ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b08      	cmp	r3, #8
 800320c:	d101      	bne.n	8003212 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e1ee      	b.n	8003618 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe fea9 	bl	8001fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff3f 	bl	80030e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff25 	bl	80030c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff5a 	bl	8003134 <LL_ADC_IsInternalRegulatorEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d114      	bne.n	80032b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff3e 	bl	800310c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003290:	4b8e      	ldr	r3, [pc, #568]	@ (80034cc <HAL_ADC_Init+0x2ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	4a8e      	ldr	r2, [pc, #568]	@ (80034d0 <HAL_ADC_Init+0x2b0>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	3301      	adds	r3, #1
 80032a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032a2:	e002      	b.n	80032aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f9      	bne.n	80032a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff3d 	bl	8003134 <LL_ADC_IsInternalRegulatorEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c4:	f043 0210 	orr.w	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff77 	bl	80031d4 <LL_ADC_REG_IsConversionOngoing>
 80032e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 8188 	bne.w	8003606 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 8184 	bne.w	8003606 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003306:	f043 0202 	orr.w	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff36 	bl	8003184 <LL_ADC_IsEnabled>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d136      	bne.n	800338c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6c      	ldr	r2, [pc, #432]	@ (80034d4 <HAL_ADC_Init+0x2b4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_ADC_Init+0x112>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6a      	ldr	r2, [pc, #424]	@ (80034d8 <HAL_ADC_Init+0x2b8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10e      	bne.n	8003350 <HAL_ADC_Init+0x130>
 8003332:	4868      	ldr	r0, [pc, #416]	@ (80034d4 <HAL_ADC_Init+0x2b4>)
 8003334:	f7ff ff26 	bl	8003184 <LL_ADC_IsEnabled>
 8003338:	4604      	mov	r4, r0
 800333a:	4867      	ldr	r0, [pc, #412]	@ (80034d8 <HAL_ADC_Init+0x2b8>)
 800333c:	f7ff ff22 	bl	8003184 <LL_ADC_IsEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	4323      	orrs	r3, r4
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e008      	b.n	8003362 <HAL_ADC_Init+0x142>
 8003350:	4862      	ldr	r0, [pc, #392]	@ (80034dc <HAL_ADC_Init+0x2bc>)
 8003352:	f7ff ff17 	bl	8003184 <LL_ADC_IsEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <HAL_ADC_Init+0x2b4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d004      	beq.n	800337a <HAL_ADC_Init+0x15a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a58      	ldr	r2, [pc, #352]	@ (80034d8 <HAL_ADC_Init+0x2b8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_ADC_Init+0x15e>
 800337a:	4a59      	ldr	r2, [pc, #356]	@ (80034e0 <HAL_ADC_Init+0x2c0>)
 800337c:	e000      	b.n	8003380 <HAL_ADC_Init+0x160>
 800337e:	4a59      	ldr	r2, [pc, #356]	@ (80034e4 <HAL_ADC_Init+0x2c4>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7ff fc5e 	bl	8002c48 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a52      	ldr	r2, [pc, #328]	@ (80034dc <HAL_ADC_Init+0x2bc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d129      	bne.n	80033ea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7e5b      	ldrb	r3, [r3, #25]
 800339a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033a0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80033a6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d013      	beq.n	80033d8 <HAL_ADC_Init+0x1b8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d00d      	beq.n	80033d4 <HAL_ADC_Init+0x1b4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b1c      	cmp	r3, #28
 80033be:	d007      	beq.n	80033d0 <HAL_ADC_Init+0x1b0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_Init+0x1ac>
 80033c8:	2318      	movs	r3, #24
 80033ca:	e006      	b.n	80033da <HAL_ADC_Init+0x1ba>
 80033cc:	2300      	movs	r3, #0
 80033ce:	e004      	b.n	80033da <HAL_ADC_Init+0x1ba>
 80033d0:	2310      	movs	r3, #16
 80033d2:	e002      	b.n	80033da <HAL_ADC_Init+0x1ba>
 80033d4:	2308      	movs	r3, #8
 80033d6:	e000      	b.n	80033da <HAL_ADC_Init+0x1ba>
 80033d8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80033da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e00e      	b.n	8003408 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7e5b      	ldrb	r3, [r3, #25]
 80033ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003402:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d106      	bne.n	8003420 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	045b      	lsls	r3, r3, #17
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a26      	ldr	r2, [pc, #152]	@ (80034dc <HAL_ADC_Init+0x2bc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d115      	bne.n	8003472 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <HAL_ADC_Init+0x2c8>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	430b      	orrs	r3, r1
 8003458:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	611a      	str	r2, [r3, #16]
 8003470:	e009      	b.n	8003486 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HAL_ADC_Init+0x2cc>)
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	69b9      	ldr	r1, [r7, #24]
 8003482:	430b      	orrs	r3, r1
 8003484:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fea2 	bl	80031d4 <LL_ADC_REG_IsConversionOngoing>
 8003490:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff feaf 	bl	80031fa <LL_ADC_INJ_IsConversionOngoing>
 800349c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 808e 	bne.w	80035c2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 808a 	bne.w	80035c2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a0a      	ldr	r2, [pc, #40]	@ (80034dc <HAL_ADC_Init+0x2bc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d11b      	bne.n	80034f0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7e1b      	ldrb	r3, [r3, #24]
 80034bc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034c4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	e018      	b.n	80034fe <HAL_ADC_Init+0x2de>
 80034cc:	2400000c 	.word	0x2400000c
 80034d0:	053e2d63 	.word	0x053e2d63
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40022100 	.word	0x40022100
 80034dc:	58026000 	.word	0x58026000
 80034e0:	40022300 	.word	0x40022300
 80034e4:	58026300 	.word	0x58026300
 80034e8:	fff04007 	.word	0xfff04007
 80034ec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7e1b      	ldrb	r3, [r3, #24]
 80034f4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4b46      	ldr	r3, [pc, #280]	@ (8003620 <HAL_ADC_Init+0x400>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	69b9      	ldr	r1, [r7, #24]
 800350e:	430b      	orrs	r3, r1
 8003510:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003518:	2b01      	cmp	r3, #1
 800351a:	d137      	bne.n	800358c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3f      	ldr	r2, [pc, #252]	@ (8003624 <HAL_ADC_Init+0x404>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d116      	bne.n	800355a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_ADC_Init+0x408>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800354a:	430a      	orrs	r2, r1
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	611a      	str	r2, [r3, #16]
 8003558:	e020      	b.n	800359c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	4b32      	ldr	r3, [pc, #200]	@ (800362c <HAL_ADC_Init+0x40c>)
 8003562:	4013      	ands	r3, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003568:	3a01      	subs	r2, #1
 800356a:	0411      	lsls	r1, r2, #16
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800357c:	430a      	orrs	r2, r1
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	e007      	b.n	800359c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003624 <HAL_ADC_Init+0x404>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d002      	beq.n	80035c2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f001 f9b9 	bl	8004934 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10c      	bne.n	80035e4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d0:	f023 010f 	bic.w	r1, r3, #15
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	1e5a      	subs	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035e2:	e007      	b.n	80035f4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 020f 	bic.w	r2, r2, #15
 80035f2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f8:	f023 0303 	bic.w	r3, r3, #3
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	661a      	str	r2, [r3, #96]	@ 0x60
 8003604:	e007      	b.n	8003616 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360a:	f043 0210 	orr.w	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003616:	7ffb      	ldrb	r3, [r7, #31]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3724      	adds	r7, #36	@ 0x24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	ffffbffc 	.word	0xffffbffc
 8003624:	58026000 	.word	0x58026000
 8003628:	fc00f81f 	.word	0xfc00f81f
 800362c:	fc00f81e 	.word	0xfc00f81e

08003630 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a60      	ldr	r2, [pc, #384]	@ (80037c4 <HAL_ADC_Start_DMA+0x194>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_ADC_Start_DMA+0x20>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5f      	ldr	r2, [pc, #380]	@ (80037c8 <HAL_ADC_Start_DMA+0x198>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_ADC_Start_DMA+0x24>
 8003650:	4b5e      	ldr	r3, [pc, #376]	@ (80037cc <HAL_ADC_Start_DMA+0x19c>)
 8003652:	e000      	b.n	8003656 <HAL_ADC_Start_DMA+0x26>
 8003654:	4b5e      	ldr	r3, [pc, #376]	@ (80037d0 <HAL_ADC_Start_DMA+0x1a0>)
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fd16 	bl	8003088 <LL_ADC_GetMultimode>
 800365c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fdb6 	bl	80031d4 <LL_ADC_REG_IsConversionOngoing>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80a2 	bne.w	80037b4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_ADC_Start_DMA+0x4e>
 800367a:	2302      	movs	r3, #2
 800367c:	e09d      	b.n	80037ba <HAL_ADC_Start_DMA+0x18a>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d003      	beq.n	800369a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b09      	cmp	r3, #9
 8003696:	f040 8086 	bne.w	80037a6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f001 f82c 	bl	80046f8 <ADC_Enable>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d178      	bne.n	800379c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036ae:	4b49      	ldr	r3, [pc, #292]	@ (80037d4 <HAL_ADC_Start_DMA+0x1a4>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a42      	ldr	r2, [pc, #264]	@ (80037c8 <HAL_ADC_Start_DMA+0x198>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d002      	beq.n	80036ca <HAL_ADC_Start_DMA+0x9a>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	e000      	b.n	80036cc <HAL_ADC_Start_DMA+0x9c>
 80036ca:	4b3e      	ldr	r3, [pc, #248]	@ (80037c4 <HAL_ADC_Start_DMA+0x194>)
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d002      	beq.n	80036da <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036f6:	f023 0206 	bic.w	r2, r3, #6
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	665a      	str	r2, [r3, #100]	@ 0x64
 80036fe:	e002      	b.n	8003706 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	4a33      	ldr	r2, [pc, #204]	@ (80037d8 <HAL_ADC_Start_DMA+0x1a8>)
 800370c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	4a32      	ldr	r2, [pc, #200]	@ (80037dc <HAL_ADC_Start_DMA+0x1ac>)
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	4a31      	ldr	r2, [pc, #196]	@ (80037e0 <HAL_ADC_Start_DMA+0x1b0>)
 800371c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	221c      	movs	r2, #28
 8003724:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0210 	orr.w	r2, r2, #16
 800373c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <HAL_ADC_Start_DMA+0x1b4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10f      	bne.n	8003768 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7ff fbfe 	bl	8002f58 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fbe9 	bl	8002f38 <LL_ADC_EnableDMAReq>
 8003766:	e007      	b.n	8003778 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7ff fbcd 	bl	8002f12 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3340      	adds	r3, #64	@ 0x40
 8003782:	4619      	mov	r1, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f001 ff64 	bl	8005654 <HAL_DMA_Start_IT>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fd09 	bl	80031ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800379a:	e00d      	b.n	80037b8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80037a4:	e008      	b.n	80037b8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80037b2:	e001      	b.n	80037b8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037b4:	2302      	movs	r3, #2
 80037b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40022100 	.word	0x40022100
 80037cc:	40022300 	.word	0x40022300
 80037d0:	58026300 	.word	0x58026300
 80037d4:	fffff0fe 	.word	0xfffff0fe
 80037d8:	0800480d 	.word	0x0800480d
 80037dc:	080048e5 	.word	0x080048e5
 80037e0:	08004901 	.word	0x08004901
 80037e4:	58026000 	.word	0x58026000

080037e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037f0:	2300      	movs	r3, #0
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a87      	ldr	r2, [pc, #540]	@ (8003a28 <HAL_ADC_IRQHandler+0x240>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_ADC_IRQHandler+0x30>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a86      	ldr	r2, [pc, #536]	@ (8003a2c <HAL_ADC_IRQHandler+0x244>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_ADC_IRQHandler+0x34>
 8003818:	4b85      	ldr	r3, [pc, #532]	@ (8003a30 <HAL_ADC_IRQHandler+0x248>)
 800381a:	e000      	b.n	800381e <HAL_ADC_IRQHandler+0x36>
 800381c:	4b85      	ldr	r3, [pc, #532]	@ (8003a34 <HAL_ADC_IRQHandler+0x24c>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fc32 	bl	8003088 <LL_ADC_GetMultimode>
 8003824:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_ADC_IRQHandler+0x78>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d105      	bne.n	8003852 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 f9aa 	bl	8004bac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2202      	movs	r2, #2
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <HAL_ADC_IRQHandler+0x8c>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8083 	beq.w	8003986 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d07d      	beq.n	8003986 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff faf4 	bl	8002e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d062      	beq.n	8003978 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a2c <HAL_ADC_IRQHandler+0x244>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d002      	beq.n	80038c2 <HAL_ADC_IRQHandler+0xda>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	e000      	b.n	80038c4 <HAL_ADC_IRQHandler+0xdc>
 80038c2:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_ADC_IRQHandler+0x240>)
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d008      	beq.n	80038de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d002      	beq.n	80038de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d104      	bne.n	80038e8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	e00c      	b.n	8003902 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a4f      	ldr	r2, [pc, #316]	@ (8003a2c <HAL_ADC_IRQHandler+0x244>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d002      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x110>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e000      	b.n	80038fa <HAL_ADC_IRQHandler+0x112>
 80038f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003a28 <HAL_ADC_IRQHandler+0x240>)
 80038fa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d135      	bne.n	8003978 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b08      	cmp	r3, #8
 8003918:	d12e      	bne.n	8003978 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fc58 	bl	80031d4 <LL_ADC_REG_IsConversionOngoing>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11a      	bne.n	8003960 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 020c 	bic.w	r2, r2, #12
 8003938:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d112      	bne.n	8003978 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60
 800395e:	e00b      	b.n	8003978 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd fe95 	bl	80016a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	220c      	movs	r2, #12
 8003984:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_ADC_IRQHandler+0x1b2>
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a0 	beq.w	8003ae6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 809a 	beq.w	8003ae6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fadc 	bl	8002f8c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fa5a 	bl	8002e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a11      	ldr	r2, [pc, #68]	@ (8003a2c <HAL_ADC_IRQHandler+0x244>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d002      	beq.n	80039f2 <HAL_ADC_IRQHandler+0x20a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_IRQHandler+0x20c>
 80039f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <HAL_ADC_IRQHandler+0x240>)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d008      	beq.n	8003a0e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b06      	cmp	r3, #6
 8003a06:	d002      	beq.n	8003a0e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b07      	cmp	r3, #7
 8003a0c:	d104      	bne.n	8003a18 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	e014      	b.n	8003a42 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a03      	ldr	r2, [pc, #12]	@ (8003a2c <HAL_ADC_IRQHandler+0x244>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00a      	beq.n	8003a38 <HAL_ADC_IRQHandler+0x250>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	e008      	b.n	8003a3a <HAL_ADC_IRQHandler+0x252>
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40022100 	.word	0x40022100
 8003a30:	40022300 	.word	0x40022300
 8003a34:	58026300 	.word	0x58026300
 8003a38:	4b84      	ldr	r3, [pc, #528]	@ (8003c4c <HAL_ADC_IRQHandler+0x464>)
 8003a3a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d047      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x27a>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d03f      	beq.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d13a      	bne.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d133      	bne.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d12e      	bne.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fbbb 	bl	80031fa <LL_ADC_INJ_IsConversionOngoing>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11a      	bne.n	8003ac0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d112      	bne.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	661a      	str	r2, [r3, #96]	@ 0x60
 8003abe:	e00b      	b.n	8003ad8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac4:	f043 0210 	orr.w	r2, r3, #16
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f001 f83f 	bl	8004b5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2260      	movs	r2, #96	@ 0x60
 8003ae4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d011      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x32c>
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8b2 	bl	8003c70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x35c>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00d      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f001 f825 	bl	8004b84 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x38c>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f001 f817 	bl	8004b98 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d043      	beq.n	8003c06 <HAL_ADC_IRQHandler+0x41e>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03e      	beq.n	8003c06 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b90:	2301      	movs	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b94:	e021      	b.n	8003bda <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c4c <HAL_ADC_IRQHandler+0x464>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_ADC_IRQHandler+0x3c8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a29      	ldr	r2, [pc, #164]	@ (8003c50 <HAL_ADC_IRQHandler+0x468>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_IRQHandler+0x3cc>
 8003bb0:	4b28      	ldr	r3, [pc, #160]	@ (8003c54 <HAL_ADC_IRQHandler+0x46c>)
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_IRQHandler+0x3ce>
 8003bb4:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <HAL_ADC_IRQHandler+0x470>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fa74 	bl	80030a4 <LL_ADC_GetMultiDMATransfer>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc6:	e008      	b.n	8003bda <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10e      	bne.n	8003bfe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf0:	f043 0202 	orr.w	r2, r3, #2
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f843 	bl	8003c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2210      	movs	r2, #16
 8003c04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d018      	beq.n	8003c42 <HAL_ADC_IRQHandler+0x45a>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c2a:	f043 0208 	orr.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c3a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 ff97 	bl	8004b70 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c42:	bf00      	nop
 8003c44:	3728      	adds	r7, #40	@ 0x28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40022100 	.word	0x40022100
 8003c54:	40022300 	.word	0x40022300
 8003c58:	58026300 	.word	0x58026300

08003c5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b0b9      	sub	sp, #228	@ 0xe4
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cb2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4aab      	ldr	r2, [pc, #684]	@ (8003f68 <HAL_ADC_ConfigChannel+0x2d0>)
 8003cba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x34>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f000 bcfe 	b.w	80046c8 <HAL_ADC_ConfigChannel+0xa30>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fa7b 	bl	80031d4 <LL_ADC_REG_IsConversionOngoing>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 84e2 	bne.w	80046aa <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	db38      	blt.n	8003d60 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a9e      	ldr	r2, [pc, #632]	@ (8003f6c <HAL_ADC_ConfigChannel+0x2d4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d033      	beq.n	8003d60 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d108      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x7e>
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2201      	movs	r2, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	e01d      	b.n	8003d52 <HAL_ADC_ConfigChannel+0xba>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e004      	b.n	8003d48 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	69d1      	ldr	r1, [r2, #28]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f7ff f8a4 	bl	8002eba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fa2c 	bl	80031d4 <LL_ADC_REG_IsConversionOngoing>
 8003d7c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fa38 	bl	80031fa <LL_ADC_INJ_IsConversionOngoing>
 8003d8a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 8270 	bne.w	8004278 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 826b 	bne.w	8004278 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f7ff f8ff 	bl	8002fb2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6c      	ldr	r2, [pc, #432]	@ (8003f6c <HAL_ADC_ConfigChannel+0x2d4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10d      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	08db      	lsrs	r3, r3, #3
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dd8:	e032      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dda:	4b65      	ldr	r3, [pc, #404]	@ (8003f70 <HAL_ADC_ConfigChannel+0x2d8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003de6:	d10b      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x168>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	e01d      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x1a4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10b      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x18e>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	e00a      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x1a4>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d048      	beq.n	8003eda <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6919      	ldr	r1, [r3, #16]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e58:	f7fe ff2a 	bl	8002cb0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a42      	ldr	r2, [pc, #264]	@ (8003f6c <HAL_ADC_ConfigChannel+0x2d4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d119      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6919      	ldr	r1, [r3, #16]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f7fe ffc2 	bl	8002dfc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6919      	ldr	r1, [r3, #16]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <HAL_ADC_ConfigChannel+0x1f8>
 8003e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e8e:	e000      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x1fa>
 8003e90:	2300      	movs	r3, #0
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7fe ff90 	bl	8002db8 <LL_ADC_SetOffsetSaturation>
 8003e98:	e1ee      	b.n	8004278 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6919      	ldr	r1, [r3, #16]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_ADC_ConfigChannel+0x21a>
 8003eac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003eb0:	e000      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x21c>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f7fe ff5d 	bl	8002d74 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6919      	ldr	r1, [r3, #16]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7e1b      	ldrb	r3, [r3, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x238>
 8003eca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ece:	e000      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x23a>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fe ff34 	bl	8002d40 <LL_ADC_SetDataRightShift>
 8003ed8:	e1ce      	b.n	8004278 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a23      	ldr	r2, [pc, #140]	@ (8003f6c <HAL_ADC_ConfigChannel+0x2d4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f040 8181 	bne.w	80041e8 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe ff11 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x27a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe ff06 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	0e9b      	lsrs	r3, r3, #26
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	e01e      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x2b8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fefb 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8003f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e004      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003f44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x2dc>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	e01e      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x30e>
 8003f68:	47ff0000 	.word	0x47ff0000
 8003f6c:	58026000 	.word	0x58026000
 8003f70:	5c001000 	.word	0x5c001000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003f90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e004      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d106      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe ff44 	bl	8002e40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fea8 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x34c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fe9d 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	f003 021f 	and.w	r2, r3, #31
 8003fe2:	e01e      	b.n	8004022 <HAL_ADC_ConfigChannel+0x38a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fe92 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004002:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800400a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004012:	2320      	movs	r3, #32
 8004014:	e004      	b.n	8004020 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_ADC_ConfigChannel+0x3a2>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	e018      	b.n	800406c <HAL_ADC_ConfigChannel+0x3d4>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004046:	fa93 f3a3 	rbit	r3, r3
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800404e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004052:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004056:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e004      	b.n	800406c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	429a      	cmp	r2, r3
 800406e:	d106      	bne.n	800407e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	2101      	movs	r1, #1
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fee1 	bl	8002e40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2102      	movs	r1, #2
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe fe45 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x412>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fe3a 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 80040a0:	4603      	mov	r3, r0
 80040a2:	0e9b      	lsrs	r3, r3, #26
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	e01e      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x450>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fe2f 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80040c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80040d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e004      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80040dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e0:	fab3 f383 	clz	r3, r3
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x468>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	e014      	b.n	800412a <HAL_ADC_ConfigChannel+0x492>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800410e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e004      	b.n	800412a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	429a      	cmp	r2, r3
 800412c:	d106      	bne.n	800413c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fe82 	bl	8002e40 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2103      	movs	r1, #3
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fde6 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x4d0>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2103      	movs	r1, #3
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fddb 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	f003 021f 	and.w	r2, r3, #31
 8004166:	e017      	b.n	8004198 <HAL_ADC_ConfigChannel+0x500>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2103      	movs	r1, #3
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fdd0 	bl	8002d14 <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004182:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800418a:	2320      	movs	r3, #32
 800418c:	e003      	b.n	8004196 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800418e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x518>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	e011      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x53c>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80041be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80041c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80041c8:	2320      	movs	r3, #32
 80041ca:	e003      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80041cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d14f      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	2103      	movs	r1, #3
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe fe2d 	bl	8002e40 <LL_ADC_SetOffsetState>
 80041e6:	e047      	b.n	8004278 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	069b      	lsls	r3, r3, #26
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d107      	bne.n	800420c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800420a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	069b      	lsls	r3, r3, #26
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800422e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004236:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	069b      	lsls	r3, r3, #26
 8004240:	429a      	cmp	r2, r3
 8004242:	d107      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004252:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	429a      	cmp	r2, r3
 8004266:	d107      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004276:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe ff81 	bl	8003184 <LL_ADC_IsEnabled>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 8219 	bne.w	80046bc <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	461a      	mov	r2, r3
 8004298:	f7fe feb6 	bl	8003008 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4aa1      	ldr	r2, [pc, #644]	@ (8004528 <HAL_ADC_ConfigChannel+0x890>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	f040 812e 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x638>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	3301      	adds	r3, #1
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	bf94      	ite	ls
 80042c8:	2301      	movls	r3, #1
 80042ca:	2300      	movhi	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e019      	b.n	8004304 <HAL_ADC_ConfigChannel+0x66c>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80042de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80042e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	e003      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80042ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3301      	adds	r3, #1
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	bf94      	ite	ls
 80042fe:	2301      	movls	r3, #1
 8004300:	2300      	movhi	r3, #0
 8004302:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004304:	2b00      	cmp	r3, #0
 8004306:	d079      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004310:	2b00      	cmp	r3, #0
 8004312:	d107      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x68c>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	069b      	lsls	r3, r3, #26
 800431e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004322:	e015      	b.n	8004350 <HAL_ADC_ConfigChannel+0x6b8>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004334:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800433c:	2320      	movs	r3, #32
 800433e:	e003      	b.n	8004348 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	3301      	adds	r3, #1
 800434a:	069b      	lsls	r3, r3, #26
 800434c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x6d8>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	0e9b      	lsrs	r3, r3, #26
 8004362:	3301      	adds	r3, #1
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	2101      	movs	r1, #1
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	e017      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x708>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800437e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e003      	b.n	8004394 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800438c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	3301      	adds	r3, #1
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x72e>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0e9b      	lsrs	r3, r3, #26
 80043b6:	3301      	adds	r3, #1
 80043b8:	f003 021f 	and.w	r2, r3, #31
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	051b      	lsls	r3, r3, #20
 80043c4:	e018      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x760>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80043d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80043de:	2320      	movs	r3, #32
 80043e0:	e003      	b.n	80043ea <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f003 021f 	and.w	r2, r3, #31
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043f8:	430b      	orrs	r3, r1
 80043fa:	e07e      	b.n	80044fa <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x780>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	0e9b      	lsrs	r3, r3, #26
 800440e:	3301      	adds	r3, #1
 8004410:	069b      	lsls	r3, r3, #26
 8004412:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004416:	e015      	b.n	8004444 <HAL_ADC_ConfigChannel+0x7ac>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004430:	2320      	movs	r3, #32
 8004432:	e003      	b.n	800443c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3301      	adds	r3, #1
 800443e:	069b      	lsls	r3, r3, #26
 8004440:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x7cc>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	3301      	adds	r3, #1
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2101      	movs	r1, #1
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	e017      	b.n	8004494 <HAL_ADC_ConfigChannel+0x7fc>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	61bb      	str	r3, [r7, #24]
  return result;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800447c:	2320      	movs	r3, #32
 800447e:	e003      	b.n	8004488 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3301      	adds	r3, #1
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2101      	movs	r1, #1
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10d      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x828>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0e9b      	lsrs	r3, r3, #26
 80044aa:	3301      	adds	r3, #1
 80044ac:	f003 021f 	and.w	r2, r3, #31
 80044b0:	4613      	mov	r3, r2
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	4413      	add	r3, r2
 80044b6:	3b1e      	subs	r3, #30
 80044b8:	051b      	lsls	r3, r3, #20
 80044ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044be:	e01b      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x860>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	60fb      	str	r3, [r7, #12]
  return result;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80044d8:	2320      	movs	r3, #32
 80044da:	e003      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	3301      	adds	r3, #1
 80044e6:	f003 021f 	and.w	r2, r3, #31
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	3b1e      	subs	r3, #30
 80044f2:	051b      	lsls	r3, r3, #20
 80044f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f8:	430b      	orrs	r3, r1
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	6892      	ldr	r2, [r2, #8]
 80044fe:	4619      	mov	r1, r3
 8004500:	f7fe fd57 	bl	8002fb2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f280 80d7 	bge.w	80046bc <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a06      	ldr	r2, [pc, #24]	@ (800452c <HAL_ADC_ConfigChannel+0x894>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d004      	beq.n	8004522 <HAL_ADC_ConfigChannel+0x88a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <HAL_ADC_ConfigChannel+0x898>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10a      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x8a0>
 8004522:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <HAL_ADC_ConfigChannel+0x89c>)
 8004524:	e009      	b.n	800453a <HAL_ADC_ConfigChannel+0x8a2>
 8004526:	bf00      	nop
 8004528:	47ff0000 	.word	0x47ff0000
 800452c:	40022000 	.word	0x40022000
 8004530:	40022100 	.word	0x40022100
 8004534:	40022300 	.word	0x40022300
 8004538:	4b65      	ldr	r3, [pc, #404]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fbaa 	bl	8002c94 <LL_ADC_GetCommonPathInternalCh>
 8004540:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a62      	ldr	r2, [pc, #392]	@ (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_ADC_ConfigChannel+0x8c0>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a61      	ldr	r2, [pc, #388]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa40>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d10e      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x8de>
 8004558:	485e      	ldr	r0, [pc, #376]	@ (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 800455a:	f7fe fe13 	bl	8003184 <LL_ADC_IsEnabled>
 800455e:	4604      	mov	r4, r0
 8004560:	485d      	ldr	r0, [pc, #372]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa40>)
 8004562:	f7fe fe0f 	bl	8003184 <LL_ADC_IsEnabled>
 8004566:	4603      	mov	r3, r0
 8004568:	4323      	orrs	r3, r4
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e008      	b.n	8004588 <HAL_ADC_ConfigChannel+0x8f0>
 8004576:	4859      	ldr	r0, [pc, #356]	@ (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 8004578:	f7fe fe04 	bl	8003184 <LL_ADC_IsEnabled>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8084 	beq.w	8004696 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a53      	ldr	r2, [pc, #332]	@ (80046e0 <HAL_ADC_ConfigChannel+0xa48>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d132      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x966>
 8004598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800459c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d12c      	bne.n	80045fe <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4c      	ldr	r2, [pc, #304]	@ (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	f040 8086 	bne.w	80046bc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a47      	ldr	r2, [pc, #284]	@ (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_ADC_ConfigChannel+0x92c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a46      	ldr	r2, [pc, #280]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa40>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x930>
 80045c4:	4a47      	ldr	r2, [pc, #284]	@ (80046e4 <HAL_ADC_ConfigChannel+0xa4c>)
 80045c6:	e000      	b.n	80045ca <HAL_ADC_ConfigChannel+0x932>
 80045c8:	4a41      	ldr	r2, [pc, #260]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 80045ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7fe fb4a 	bl	8002c6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045da:	4b43      	ldr	r3, [pc, #268]	@ (80046e8 <HAL_ADC_ConfigChannel+0xa50>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	4a42      	ldr	r2, [pc, #264]	@ (80046ec <HAL_ADC_ConfigChannel+0xa54>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	3301      	adds	r3, #1
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045ee:	e002      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f9      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045fc:	e05e      	b.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a3b      	ldr	r2, [pc, #236]	@ (80046f0 <HAL_ADC_ConfigChannel+0xa58>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d120      	bne.n	800464a <HAL_ADC_ConfigChannel+0x9b2>
 8004608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800460c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11a      	bne.n	800464a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a30      	ldr	r2, [pc, #192]	@ (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d14e      	bne.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_ADC_ConfigChannel+0x99a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa40>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x99e>
 8004632:	4a2c      	ldr	r2, [pc, #176]	@ (80046e4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004634:	e000      	b.n	8004638 <HAL_ADC_ConfigChannel+0x9a0>
 8004636:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 8004638:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800463c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7fe fb13 	bl	8002c6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004648:	e038      	b.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a29      	ldr	r2, [pc, #164]	@ (80046f4 <HAL_ADC_ConfigChannel+0xa5c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d133      	bne.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
 8004654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d12d      	bne.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1d      	ldr	r2, [pc, #116]	@ (80046dc <HAL_ADC_ConfigChannel+0xa44>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d128      	bne.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_ADC_ConfigChannel+0x9e6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <HAL_ADC_ConfigChannel+0xa40>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x9ea>
 800467e:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004680:	e000      	b.n	8004684 <HAL_ADC_ConfigChannel+0x9ec>
 8004682:	4a13      	ldr	r2, [pc, #76]	@ (80046d0 <HAL_ADC_ConfigChannel+0xa38>)
 8004684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004688:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f7fe faed 	bl	8002c6e <LL_ADC_SetCommonPathInternalCh>
 8004694:	e012      	b.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469a:	f043 0220 	orr.w	r2, r3, #32
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80046a8:	e008      	b.n	80046bc <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046c4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	37e4      	adds	r7, #228	@ 0xe4
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd90      	pop	{r4, r7, pc}
 80046d0:	58026300 	.word	0x58026300
 80046d4:	40022000 	.word	0x40022000
 80046d8:	40022100 	.word	0x40022100
 80046dc:	58026000 	.word	0x58026000
 80046e0:	c7520000 	.word	0xc7520000
 80046e4:	40022300 	.word	0x40022300
 80046e8:	2400000c 	.word	0x2400000c
 80046ec:	053e2d63 	.word	0x053e2d63
 80046f0:	c3210000 	.word	0xc3210000
 80046f4:	cb840000 	.word	0xcb840000

080046f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe fd3d 	bl	8003184 <LL_ADC_IsEnabled>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d16e      	bne.n	80047ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	4b38      	ldr	r3, [pc, #224]	@ (80047f8 <ADC_Enable+0x100>)
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004722:	f043 0210 	orr.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e05a      	b.n	80047f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fd0c 	bl	800315c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004744:	f7fe fa50 	bl	8002be8 <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2b      	ldr	r2, [pc, #172]	@ (80047fc <ADC_Enable+0x104>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <ADC_Enable+0x66>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a29      	ldr	r2, [pc, #164]	@ (8004800 <ADC_Enable+0x108>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <ADC_Enable+0x6a>
 800475e:	4b29      	ldr	r3, [pc, #164]	@ (8004804 <ADC_Enable+0x10c>)
 8004760:	e000      	b.n	8004764 <ADC_Enable+0x6c>
 8004762:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <ADC_Enable+0x110>)
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe fc8f 	bl	8003088 <LL_ADC_GetMultimode>
 800476a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <ADC_Enable+0x108>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d002      	beq.n	800477c <ADC_Enable+0x84>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	e000      	b.n	800477e <ADC_Enable+0x86>
 800477c:	4b1f      	ldr	r3, [pc, #124]	@ (80047fc <ADC_Enable+0x104>)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	4293      	cmp	r3, r2
 8004784:	d02c      	beq.n	80047e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d130      	bne.n	80047ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800478c:	e028      	b.n	80047e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fcf6 	bl	8003184 <LL_ADC_IsEnabled>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fcda 	bl	800315c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047a8:	f7fe fa1e 	bl	8002be8 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d914      	bls.n	80047e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d00d      	beq.n	80047e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c8:	f043 0210 	orr.w	r2, r3, #16
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e007      	b.n	80047f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d1cf      	bne.n	800478e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	8000003f 	.word	0x8000003f
 80047fc:	40022000 	.word	0x40022000
 8004800:	40022100 	.word	0x40022100
 8004804:	40022300 	.word	0x40022300
 8004808:	58026300 	.word	0x58026300

0800480c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004822:	2b00      	cmp	r3, #0
 8004824:	d14b      	bne.n	80048be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d021      	beq.n	8004884 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe fb25 	bl	8002e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d032      	beq.n	80048b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d12b      	bne.n	80048b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11f      	bne.n	80048b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	661a      	str	r2, [r3, #96]	@ 0x60
 8004882:	e018      	b.n	80048b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d111      	bne.n	80048b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004896:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ae:	f043 0201 	orr.w	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7fc fef6 	bl	80016a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048bc:	e00e      	b.n	80048dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff f9da 	bl	8003c84 <HAL_ADC_ErrorCallback>
}
 80048d0:	e004      	b.n	80048dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff f9b2 	bl	8003c5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004912:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491e:	f043 0204 	orr.w	r2, r3, #4
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff f9ac 	bl	8003c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6c      	ldr	r2, [pc, #432]	@ (8004af4 <ADC_ConfigureBoostMode+0x1c0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <ADC_ConfigureBoostMode+0x1c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6b      	ldr	r2, [pc, #428]	@ (8004af8 <ADC_ConfigureBoostMode+0x1c4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d109      	bne.n	8004964 <ADC_ConfigureBoostMode+0x30>
 8004950:	4b6a      	ldr	r3, [pc, #424]	@ (8004afc <ADC_ConfigureBoostMode+0x1c8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e008      	b.n	8004976 <ADC_ConfigureBoostMode+0x42>
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <ADC_ConfigureBoostMode+0x1cc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01c      	beq.n	80049b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800497a:	f004 fec7 	bl	800970c <HAL_RCC_GetHCLKFreq>
 800497e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004988:	d010      	beq.n	80049ac <ADC_ConfigureBoostMode+0x78>
 800498a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800498e:	d873      	bhi.n	8004a78 <ADC_ConfigureBoostMode+0x144>
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004994:	d002      	beq.n	800499c <ADC_ConfigureBoostMode+0x68>
 8004996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800499a:	d16d      	bne.n	8004a78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	60fb      	str	r3, [r7, #12]
        break;
 80049aa:	e068      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	60fb      	str	r3, [r7, #12]
        break;
 80049b2:	e064      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	f006 f8a2 	bl	800ab04 <HAL_RCCEx_GetPeriphCLKFreq>
 80049c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049ca:	d051      	beq.n	8004a70 <ADC_ConfigureBoostMode+0x13c>
 80049cc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049d0:	d854      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 80049d2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049d6:	d047      	beq.n	8004a68 <ADC_ConfigureBoostMode+0x134>
 80049d8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049dc:	d84e      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 80049de:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049e2:	d03d      	beq.n	8004a60 <ADC_ConfigureBoostMode+0x12c>
 80049e4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049e8:	d848      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049ee:	d033      	beq.n	8004a58 <ADC_ConfigureBoostMode+0x124>
 80049f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049f4:	d842      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 80049f6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80049fa:	d029      	beq.n	8004a50 <ADC_ConfigureBoostMode+0x11c>
 80049fc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a00:	d83c      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 8004a02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a06:	d01a      	beq.n	8004a3e <ADC_ConfigureBoostMode+0x10a>
 8004a08:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a0c:	d836      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 8004a0e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a12:	d014      	beq.n	8004a3e <ADC_ConfigureBoostMode+0x10a>
 8004a14:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a18:	d830      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1e:	d00e      	beq.n	8004a3e <ADC_ConfigureBoostMode+0x10a>
 8004a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a24:	d82a      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 8004a26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a2a:	d008      	beq.n	8004a3e <ADC_ConfigureBoostMode+0x10a>
 8004a2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a30:	d824      	bhi.n	8004a7c <ADC_ConfigureBoostMode+0x148>
 8004a32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a36:	d002      	beq.n	8004a3e <ADC_ConfigureBoostMode+0x10a>
 8004a38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a3c:	d11e      	bne.n	8004a7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
        break;
 8004a4e:	e016      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]
        break;
 8004a56:	e012      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	60fb      	str	r3, [r7, #12]
        break;
 8004a5e:	e00e      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	60fb      	str	r3, [r7, #12]
        break;
 8004a66:	e00a      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	09db      	lsrs	r3, r3, #7
 8004a6c:	60fb      	str	r3, [r7, #12]
        break;
 8004a6e:	e006      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	60fb      	str	r3, [r7, #12]
        break;
 8004a76:	e002      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a7c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <ADC_ConfigureBoostMode+0x1d0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d808      	bhi.n	8004a9e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a9c:	e025      	b.n	8004aea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	@ (8004b08 <ADC_ConfigureBoostMode+0x1d4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d80a      	bhi.n	8004abc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ab8:	609a      	str	r2, [r3, #8]
}
 8004aba:	e016      	b.n	8004aea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <ADC_ConfigureBoostMode+0x1d8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d80a      	bhi.n	8004ada <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	e007      	b.n	8004aea <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004ae8:	609a      	str	r2, [r3, #8]
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40022000 	.word	0x40022000
 8004af8:	40022100 	.word	0x40022100
 8004afc:	40022300 	.word	0x40022300
 8004b00:	58026300 	.word	0x58026300
 8004b04:	005f5e10 	.word	0x005f5e10
 8004b08:	00bebc20 	.word	0x00bebc20
 8004b0c:	017d7840 	.word	0x017d7840

08004b10 <LL_ADC_IsEnabled>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <LL_ADC_IsEnabled+0x18>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <LL_ADC_IsEnabled+0x1a>
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_ADC_REG_IsConversionOngoing>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d101      	bne.n	8004b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b0a3      	sub	sp, #140	@ 0x8c
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e0c1      	b.n	8004d62 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004be6:	2300      	movs	r3, #0
 8004be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e001      	b.n	8004c02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0a0      	b.n	8004d62 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff ff87 	bl	8004b36 <LL_ADC_REG_IsConversionOngoing>
 8004c28:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff80 	bl	8004b36 <LL_ADC_REG_IsConversionOngoing>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 8081 	bne.w	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d17c      	bne.n	8004d40 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a48      	ldr	r2, [pc, #288]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a46      	ldr	r2, [pc, #280]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d101      	bne.n	8004c5e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c5a:	4b46      	ldr	r3, [pc, #280]	@ (8004d74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c5c:	e000      	b.n	8004c60 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c5e:	4b46      	ldr	r3, [pc, #280]	@ (8004d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c60:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d039      	beq.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3a      	ldr	r2, [pc, #232]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a39      	ldr	r2, [pc, #228]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10e      	bne.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c90:	4836      	ldr	r0, [pc, #216]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c92:	f7ff ff3d 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c96:	4604      	mov	r4, r0
 8004c98:	4835      	ldr	r0, [pc, #212]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c9a:	f7ff ff39 	bl	8004b10 <LL_ADC_IsEnabled>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4323      	orrs	r3, r4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e008      	b.n	8004cc0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004cae:	4833      	ldr	r0, [pc, #204]	@ (8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cb0:	f7ff ff2e 	bl	8004b10 <LL_ADC_IsEnabled>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d047      	beq.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	6811      	ldr	r1, [r2, #0]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	6892      	ldr	r2, [r2, #8]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cda:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cdc:	e03a      	b.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004cde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ce8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d10e      	bne.n	8004d1c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cfe:	481b      	ldr	r0, [pc, #108]	@ (8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d00:	f7ff ff06 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d04:	4604      	mov	r4, r0
 8004d06:	481a      	ldr	r0, [pc, #104]	@ (8004d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d08:	f7ff ff02 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4323      	orrs	r3, r4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e008      	b.n	8004d2e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004d1c:	4817      	ldr	r0, [pc, #92]	@ (8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d1e:	f7ff fef7 	bl	8004b10 <LL_ADC_IsEnabled>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d3c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d3e:	e009      	b.n	8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004d52:	e000      	b.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d5e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	378c      	adds	r7, #140	@ 0x8c
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd90      	pop	{r4, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40022000 	.word	0x40022000
 8004d70:	40022100 	.word	0x40022100
 8004d74:	40022300 	.word	0x40022300
 8004d78:	58026300 	.word	0x58026300
 8004d7c:	58026000 	.word	0x58026000
 8004d80:	fffff0e0 	.word	0xfffff0e0

08004d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004da0:	4013      	ands	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004db2:	4a04      	ldr	r2, [pc, #16]	@ (8004dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	60d3      	str	r3, [r2, #12]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00
 8004dc8:	05fa0000 	.word	0x05fa0000

08004dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd0:	4b04      	ldr	r3, [pc, #16]	@ (8004de4 <__NVIC_GetPriorityGrouping+0x18>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	f003 0307 	and.w	r3, r3, #7
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db0b      	blt.n	8004e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	f003 021f 	and.w	r2, r3, #31
 8004e00:	4907      	ldr	r1, [pc, #28]	@ (8004e20 <__NVIC_EnableIRQ+0x38>)
 8004e02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	2001      	movs	r0, #1
 8004e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	e000e100 	.word	0xe000e100

08004e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	db0a      	blt.n	8004e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	490c      	ldr	r1, [pc, #48]	@ (8004e70 <__NVIC_SetPriority+0x4c>)
 8004e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	440b      	add	r3, r1
 8004e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e4c:	e00a      	b.n	8004e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4908      	ldr	r1, [pc, #32]	@ (8004e74 <__NVIC_SetPriority+0x50>)
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	440b      	add	r3, r1
 8004e62:	761a      	strb	r2, [r3, #24]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000e100 	.word	0xe000e100
 8004e74:	e000ed00 	.word	0xe000ed00

08004e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f1c3 0307 	rsb	r3, r3, #7
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf28      	it	cs
 8004e96:	2304      	movcs	r3, #4
 8004e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d902      	bls.n	8004ea8 <NVIC_EncodePriority+0x30>
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3b03      	subs	r3, #3
 8004ea6:	e000      	b.n	8004eaa <NVIC_EncodePriority+0x32>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	401a      	ands	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	43d9      	mvns	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed0:	4313      	orrs	r3, r2
         );
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3724      	adds	r7, #36	@ 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ef0:	d301      	bcc.n	8004ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e00f      	b.n	8004f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8004f20 <SysTick_Config+0x40>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004efe:	210f      	movs	r1, #15
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	f7ff ff8e 	bl	8004e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <SysTick_Config+0x40>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f0e:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <SysTick_Config+0x40>)
 8004f10:	2207      	movs	r2, #7
 8004f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000e010 	.word	0xe000e010

08004f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff29 	bl	8004d84 <__NVIC_SetPriorityGrouping>
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	4603      	mov	r3, r0
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f48:	f7ff ff40 	bl	8004dcc <__NVIC_GetPriorityGrouping>
 8004f4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff ff90 	bl	8004e78 <NVIC_EncodePriority>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff5f 	bl	8004e24 <__NVIC_SetPriority>
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	4603      	mov	r3, r0
 8004f76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff33 	bl	8004de8 <__NVIC_EnableIRQ>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff ffa4 	bl	8004ee0 <SysTick_Config>
 8004f98:	4603      	mov	r3, r0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004fac:	f7fd fe1c 	bl	8002be8 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e312      	b.n	80055e2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a66      	ldr	r2, [pc, #408]	@ (800515c <HAL_DMA_Init+0x1b8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d04a      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a65      	ldr	r2, [pc, #404]	@ (8005160 <HAL_DMA_Init+0x1bc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d045      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <HAL_DMA_Init+0x1c0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d040      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a62      	ldr	r2, [pc, #392]	@ (8005168 <HAL_DMA_Init+0x1c4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d03b      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a60      	ldr	r2, [pc, #384]	@ (800516c <HAL_DMA_Init+0x1c8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d036      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8005170 <HAL_DMA_Init+0x1cc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d031      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8005174 <HAL_DMA_Init+0x1d0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02c      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a5c      	ldr	r2, [pc, #368]	@ (8005178 <HAL_DMA_Init+0x1d4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d027      	beq.n	800505c <HAL_DMA_Init+0xb8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a5a      	ldr	r2, [pc, #360]	@ (800517c <HAL_DMA_Init+0x1d8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d022      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a59      	ldr	r2, [pc, #356]	@ (8005180 <HAL_DMA_Init+0x1dc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d01d      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a57      	ldr	r2, [pc, #348]	@ (8005184 <HAL_DMA_Init+0x1e0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d018      	beq.n	800505c <HAL_DMA_Init+0xb8>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a56      	ldr	r2, [pc, #344]	@ (8005188 <HAL_DMA_Init+0x1e4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d013      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a54      	ldr	r2, [pc, #336]	@ (800518c <HAL_DMA_Init+0x1e8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00e      	beq.n	800505c <HAL_DMA_Init+0xb8>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a53      	ldr	r2, [pc, #332]	@ (8005190 <HAL_DMA_Init+0x1ec>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d009      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a51      	ldr	r2, [pc, #324]	@ (8005194 <HAL_DMA_Init+0x1f0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_DMA_Init+0xb8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a50      	ldr	r2, [pc, #320]	@ (8005198 <HAL_DMA_Init+0x1f4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d101      	bne.n	8005060 <HAL_DMA_Init+0xbc>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <HAL_DMA_Init+0xbe>
 8005060:	2300      	movs	r3, #0
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 813c 	beq.w	80052e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a37      	ldr	r2, [pc, #220]	@ (800515c <HAL_DMA_Init+0x1b8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04a      	beq.n	8005118 <HAL_DMA_Init+0x174>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a36      	ldr	r2, [pc, #216]	@ (8005160 <HAL_DMA_Init+0x1bc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d045      	beq.n	8005118 <HAL_DMA_Init+0x174>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a34      	ldr	r2, [pc, #208]	@ (8005164 <HAL_DMA_Init+0x1c0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d040      	beq.n	8005118 <HAL_DMA_Init+0x174>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <HAL_DMA_Init+0x1c4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d03b      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a31      	ldr	r2, [pc, #196]	@ (800516c <HAL_DMA_Init+0x1c8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d036      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a30      	ldr	r2, [pc, #192]	@ (8005170 <HAL_DMA_Init+0x1cc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d031      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005174 <HAL_DMA_Init+0x1d0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02c      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005178 <HAL_DMA_Init+0x1d4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <HAL_DMA_Init+0x1d8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005180 <HAL_DMA_Init+0x1dc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a28      	ldr	r2, [pc, #160]	@ (8005184 <HAL_DMA_Init+0x1e0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a27      	ldr	r2, [pc, #156]	@ (8005188 <HAL_DMA_Init+0x1e4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a25      	ldr	r2, [pc, #148]	@ (800518c <HAL_DMA_Init+0x1e8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_Init+0x174>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a24      	ldr	r2, [pc, #144]	@ (8005190 <HAL_DMA_Init+0x1ec>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_Init+0x174>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <HAL_DMA_Init+0x1f0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_Init+0x174>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	@ (8005198 <HAL_DMA_Init+0x1f4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <HAL_DMA_Init+0x186>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e007      	b.n	800513a <HAL_DMA_Init+0x196>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800513a:	e02f      	b.n	800519c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800513c:	f7fd fd54 	bl	8002be8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b05      	cmp	r3, #5
 8005148:	d928      	bls.n	800519c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2203      	movs	r2, #3
 8005154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e242      	b.n	80055e2 <HAL_DMA_Init+0x63e>
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1c8      	bne.n	800513c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4b83      	ldr	r3, [pc, #524]	@ (80053c4 <HAL_DMA_Init+0x420>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80051c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d107      	bne.n	8005200 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	4313      	orrs	r3, r2
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b28      	cmp	r3, #40	@ 0x28
 8005206:	d903      	bls.n	8005210 <HAL_DMA_Init+0x26c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b2e      	cmp	r3, #46	@ 0x2e
 800520e:	d91f      	bls.n	8005250 <HAL_DMA_Init+0x2ac>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b3e      	cmp	r3, #62	@ 0x3e
 8005216:	d903      	bls.n	8005220 <HAL_DMA_Init+0x27c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b42      	cmp	r3, #66	@ 0x42
 800521e:	d917      	bls.n	8005250 <HAL_DMA_Init+0x2ac>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b46      	cmp	r3, #70	@ 0x46
 8005226:	d903      	bls.n	8005230 <HAL_DMA_Init+0x28c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b48      	cmp	r3, #72	@ 0x48
 800522e:	d90f      	bls.n	8005250 <HAL_DMA_Init+0x2ac>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b4e      	cmp	r3, #78	@ 0x4e
 8005236:	d903      	bls.n	8005240 <HAL_DMA_Init+0x29c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b52      	cmp	r3, #82	@ 0x52
 800523e:	d907      	bls.n	8005250 <HAL_DMA_Init+0x2ac>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b73      	cmp	r3, #115	@ 0x73
 8005246:	d905      	bls.n	8005254 <HAL_DMA_Init+0x2b0>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b77      	cmp	r3, #119	@ 0x77
 800524e:	d801      	bhi.n	8005254 <HAL_DMA_Init+0x2b0>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_DMA_Init+0x2b2>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005260:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f023 0307 	bic.w	r3, r3, #7
 8005278:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	2b04      	cmp	r3, #4
 800528a:	d117      	bne.n	80052bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f001 fdca 	bl	8006e38 <DMA_CheckFifoParam>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2240      	movs	r2, #64	@ 0x40
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e192      	b.n	80055e2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fd05 	bl	8006cd4 <DMA_CalcBaseAndBitshift>
 80052ca:	4603      	mov	r3, r0
 80052cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	223f      	movs	r2, #63	@ 0x3f
 80052d8:	409a      	lsls	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	e0c8      	b.n	8005472 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a38      	ldr	r2, [pc, #224]	@ (80053c8 <HAL_DMA_Init+0x424>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d022      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a37      	ldr	r2, [pc, #220]	@ (80053cc <HAL_DMA_Init+0x428>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d01d      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <HAL_DMA_Init+0x42c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d018      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a34      	ldr	r2, [pc, #208]	@ (80053d4 <HAL_DMA_Init+0x430>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a32      	ldr	r2, [pc, #200]	@ (80053d8 <HAL_DMA_Init+0x434>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00e      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a31      	ldr	r2, [pc, #196]	@ (80053dc <HAL_DMA_Init+0x438>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2f      	ldr	r2, [pc, #188]	@ (80053e0 <HAL_DMA_Init+0x43c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_DMA_Init+0x38c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2e      	ldr	r2, [pc, #184]	@ (80053e4 <HAL_DMA_Init+0x440>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_DMA_Init+0x390>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <HAL_DMA_Init+0x392>
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8092 	beq.w	8005460 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a21      	ldr	r2, [pc, #132]	@ (80053c8 <HAL_DMA_Init+0x424>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d021      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a20      	ldr	r2, [pc, #128]	@ (80053cc <HAL_DMA_Init+0x428>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d01c      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1e      	ldr	r2, [pc, #120]	@ (80053d0 <HAL_DMA_Init+0x42c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d017      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <HAL_DMA_Init+0x430>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d012      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_DMA_Init+0x434>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00d      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <HAL_DMA_Init+0x438>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d008      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <HAL_DMA_Init+0x43c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <HAL_DMA_Init+0x3e6>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <HAL_DMA_Init+0x440>)
 8005388:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4b10      	ldr	r3, [pc, #64]	@ (80053e8 <HAL_DMA_Init+0x444>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b40      	cmp	r3, #64	@ 0x40
 80053b0:	d01c      	beq.n	80053ec <HAL_DMA_Init+0x448>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b80      	cmp	r3, #128	@ 0x80
 80053b8:	d102      	bne.n	80053c0 <HAL_DMA_Init+0x41c>
 80053ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80053be:	e016      	b.n	80053ee <HAL_DMA_Init+0x44a>
 80053c0:	2300      	movs	r3, #0
 80053c2:	e014      	b.n	80053ee <HAL_DMA_Init+0x44a>
 80053c4:	fe10803f 	.word	0xfe10803f
 80053c8:	58025408 	.word	0x58025408
 80053cc:	5802541c 	.word	0x5802541c
 80053d0:	58025430 	.word	0x58025430
 80053d4:	58025444 	.word	0x58025444
 80053d8:	58025458 	.word	0x58025458
 80053dc:	5802546c 	.word	0x5802546c
 80053e0:	58025480 	.word	0x58025480
 80053e4:	58025494 	.word	0x58025494
 80053e8:	fffe000f 	.word	0xfffe000f
 80053ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68d2      	ldr	r2, [r2, #12]
 80053f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80053fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005404:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800540c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800541c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	4b6e      	ldr	r3, [pc, #440]	@ (80055ec <HAL_DMA_Init+0x648>)
 8005434:	4413      	add	r3, r2
 8005436:	4a6e      	ldr	r2, [pc, #440]	@ (80055f0 <HAL_DMA_Init+0x64c>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	009a      	lsls	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 fc45 	bl	8006cd4 <DMA_CalcBaseAndBitshift>
 800544a:	4603      	mov	r3, r0
 800544c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2201      	movs	r2, #1
 8005458:	409a      	lsls	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	e008      	b.n	8005472 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2240      	movs	r2, #64	@ 0x40
 8005464:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2203      	movs	r2, #3
 800546a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0b7      	b.n	80055e2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a5f      	ldr	r2, [pc, #380]	@ (80055f4 <HAL_DMA_Init+0x650>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d072      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a5d      	ldr	r2, [pc, #372]	@ (80055f8 <HAL_DMA_Init+0x654>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d06d      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a5c      	ldr	r2, [pc, #368]	@ (80055fc <HAL_DMA_Init+0x658>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d068      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5a      	ldr	r2, [pc, #360]	@ (8005600 <HAL_DMA_Init+0x65c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d063      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a59      	ldr	r2, [pc, #356]	@ (8005604 <HAL_DMA_Init+0x660>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d05e      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a57      	ldr	r2, [pc, #348]	@ (8005608 <HAL_DMA_Init+0x664>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d059      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a56      	ldr	r2, [pc, #344]	@ (800560c <HAL_DMA_Init+0x668>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d054      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a54      	ldr	r2, [pc, #336]	@ (8005610 <HAL_DMA_Init+0x66c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d04f      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a53      	ldr	r2, [pc, #332]	@ (8005614 <HAL_DMA_Init+0x670>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d04a      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a51      	ldr	r2, [pc, #324]	@ (8005618 <HAL_DMA_Init+0x674>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d045      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a50      	ldr	r2, [pc, #320]	@ (800561c <HAL_DMA_Init+0x678>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d040      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a4e      	ldr	r2, [pc, #312]	@ (8005620 <HAL_DMA_Init+0x67c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d03b      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a4d      	ldr	r2, [pc, #308]	@ (8005624 <HAL_DMA_Init+0x680>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d036      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005628 <HAL_DMA_Init+0x684>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d031      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a4a      	ldr	r2, [pc, #296]	@ (800562c <HAL_DMA_Init+0x688>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d02c      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a48      	ldr	r2, [pc, #288]	@ (8005630 <HAL_DMA_Init+0x68c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d027      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a47      	ldr	r2, [pc, #284]	@ (8005634 <HAL_DMA_Init+0x690>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a45      	ldr	r2, [pc, #276]	@ (8005638 <HAL_DMA_Init+0x694>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01d      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a44      	ldr	r2, [pc, #272]	@ (800563c <HAL_DMA_Init+0x698>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a42      	ldr	r2, [pc, #264]	@ (8005640 <HAL_DMA_Init+0x69c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a41      	ldr	r2, [pc, #260]	@ (8005644 <HAL_DMA_Init+0x6a0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a3f      	ldr	r2, [pc, #252]	@ (8005648 <HAL_DMA_Init+0x6a4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a3e      	ldr	r2, [pc, #248]	@ (800564c <HAL_DMA_Init+0x6a8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_DMA_Init+0x5be>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a3c      	ldr	r2, [pc, #240]	@ (8005650 <HAL_DMA_Init+0x6ac>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d101      	bne.n	8005566 <HAL_DMA_Init+0x5c2>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <HAL_DMA_Init+0x5c4>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d032      	beq.n	80055d2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 fcdf 	bl	8006f30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d102      	bne.n	8005580 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005594:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_DMA_Init+0x61c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d80c      	bhi.n	80055c0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fd5c 	bl	8007064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e008      	b.n	80055d2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	a7fdabf8 	.word	0xa7fdabf8
 80055f0:	cccccccd 	.word	0xcccccccd
 80055f4:	40020010 	.word	0x40020010
 80055f8:	40020028 	.word	0x40020028
 80055fc:	40020040 	.word	0x40020040
 8005600:	40020058 	.word	0x40020058
 8005604:	40020070 	.word	0x40020070
 8005608:	40020088 	.word	0x40020088
 800560c:	400200a0 	.word	0x400200a0
 8005610:	400200b8 	.word	0x400200b8
 8005614:	40020410 	.word	0x40020410
 8005618:	40020428 	.word	0x40020428
 800561c:	40020440 	.word	0x40020440
 8005620:	40020458 	.word	0x40020458
 8005624:	40020470 	.word	0x40020470
 8005628:	40020488 	.word	0x40020488
 800562c:	400204a0 	.word	0x400204a0
 8005630:	400204b8 	.word	0x400204b8
 8005634:	58025408 	.word	0x58025408
 8005638:	5802541c 	.word	0x5802541c
 800563c:	58025430 	.word	0x58025430
 8005640:	58025444 	.word	0x58025444
 8005644:	58025458 	.word	0x58025458
 8005648:	5802546c 	.word	0x5802546c
 800564c:	58025480 	.word	0x58025480
 8005650:	58025494 	.word	0x58025494

08005654 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e226      	b.n	8005abe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_DMA_Start_IT+0x2a>
 800567a:	2302      	movs	r3, #2
 800567c:	e21f      	b.n	8005abe <HAL_DMA_Start_IT+0x46a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b01      	cmp	r3, #1
 8005690:	f040 820a 	bne.w	8005aa8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a68      	ldr	r2, [pc, #416]	@ (8005848 <HAL_DMA_Start_IT+0x1f4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a66      	ldr	r2, [pc, #408]	@ (800584c <HAL_DMA_Start_IT+0x1f8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a65      	ldr	r2, [pc, #404]	@ (8005850 <HAL_DMA_Start_IT+0x1fc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a63      	ldr	r2, [pc, #396]	@ (8005854 <HAL_DMA_Start_IT+0x200>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a62      	ldr	r2, [pc, #392]	@ (8005858 <HAL_DMA_Start_IT+0x204>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a60      	ldr	r2, [pc, #384]	@ (800585c <HAL_DMA_Start_IT+0x208>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a5f      	ldr	r2, [pc, #380]	@ (8005860 <HAL_DMA_Start_IT+0x20c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005864 <HAL_DMA_Start_IT+0x210>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a5c      	ldr	r2, [pc, #368]	@ (8005868 <HAL_DMA_Start_IT+0x214>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a5a      	ldr	r2, [pc, #360]	@ (800586c <HAL_DMA_Start_IT+0x218>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a59      	ldr	r2, [pc, #356]	@ (8005870 <HAL_DMA_Start_IT+0x21c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a57      	ldr	r2, [pc, #348]	@ (8005874 <HAL_DMA_Start_IT+0x220>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a56      	ldr	r2, [pc, #344]	@ (8005878 <HAL_DMA_Start_IT+0x224>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a54      	ldr	r2, [pc, #336]	@ (800587c <HAL_DMA_Start_IT+0x228>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a53      	ldr	r2, [pc, #332]	@ (8005880 <HAL_DMA_Start_IT+0x22c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Start_IT+0xee>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a51      	ldr	r2, [pc, #324]	@ (8005884 <HAL_DMA_Start_IT+0x230>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <HAL_DMA_Start_IT+0x100>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 0201 	bic.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e007      	b.n	8005764 <HAL_DMA_Start_IT+0x110>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f001 f906 	bl	800697c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a34      	ldr	r2, [pc, #208]	@ (8005848 <HAL_DMA_Start_IT+0x1f4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d04a      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a33      	ldr	r2, [pc, #204]	@ (800584c <HAL_DMA_Start_IT+0x1f8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d045      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a31      	ldr	r2, [pc, #196]	@ (8005850 <HAL_DMA_Start_IT+0x1fc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d040      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a30      	ldr	r2, [pc, #192]	@ (8005854 <HAL_DMA_Start_IT+0x200>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d03b      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a2e      	ldr	r2, [pc, #184]	@ (8005858 <HAL_DMA_Start_IT+0x204>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d036      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <HAL_DMA_Start_IT+0x208>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005860 <HAL_DMA_Start_IT+0x20c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d02c      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005864 <HAL_DMA_Start_IT+0x210>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d027      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a28      	ldr	r2, [pc, #160]	@ (8005868 <HAL_DMA_Start_IT+0x214>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a27      	ldr	r2, [pc, #156]	@ (800586c <HAL_DMA_Start_IT+0x218>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01d      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a25      	ldr	r2, [pc, #148]	@ (8005870 <HAL_DMA_Start_IT+0x21c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a24      	ldr	r2, [pc, #144]	@ (8005874 <HAL_DMA_Start_IT+0x220>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a22      	ldr	r2, [pc, #136]	@ (8005878 <HAL_DMA_Start_IT+0x224>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a21      	ldr	r2, [pc, #132]	@ (800587c <HAL_DMA_Start_IT+0x228>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1f      	ldr	r2, [pc, #124]	@ (8005880 <HAL_DMA_Start_IT+0x22c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_DMA_Start_IT+0x1bc>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1e      	ldr	r2, [pc, #120]	@ (8005884 <HAL_DMA_Start_IT+0x230>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_DMA_Start_IT+0x1c0>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_DMA_Start_IT+0x1c2>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d036      	beq.n	8005888 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 021e 	bic.w	r2, r3, #30
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0216 	orr.w	r2, r2, #22
 800582c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d03e      	beq.n	80058b4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0208 	orr.w	r2, r2, #8
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e035      	b.n	80058b4 <HAL_DMA_Start_IT+0x260>
 8005848:	40020010 	.word	0x40020010
 800584c:	40020028 	.word	0x40020028
 8005850:	40020040 	.word	0x40020040
 8005854:	40020058 	.word	0x40020058
 8005858:	40020070 	.word	0x40020070
 800585c:	40020088 	.word	0x40020088
 8005860:	400200a0 	.word	0x400200a0
 8005864:	400200b8 	.word	0x400200b8
 8005868:	40020410 	.word	0x40020410
 800586c:	40020428 	.word	0x40020428
 8005870:	40020440 	.word	0x40020440
 8005874:	40020458 	.word	0x40020458
 8005878:	40020470 	.word	0x40020470
 800587c:	40020488 	.word	0x40020488
 8005880:	400204a0 	.word	0x400204a0
 8005884:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 020e 	bic.w	r2, r3, #14
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 020a 	orr.w	r2, r2, #10
 800589a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0204 	orr.w	r2, r2, #4
 80058b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a83      	ldr	r2, [pc, #524]	@ (8005ac8 <HAL_DMA_Start_IT+0x474>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d072      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a82      	ldr	r2, [pc, #520]	@ (8005acc <HAL_DMA_Start_IT+0x478>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d06d      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a80      	ldr	r2, [pc, #512]	@ (8005ad0 <HAL_DMA_Start_IT+0x47c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d068      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7f      	ldr	r2, [pc, #508]	@ (8005ad4 <HAL_DMA_Start_IT+0x480>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d063      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7d      	ldr	r2, [pc, #500]	@ (8005ad8 <HAL_DMA_Start_IT+0x484>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d05e      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a7c      	ldr	r2, [pc, #496]	@ (8005adc <HAL_DMA_Start_IT+0x488>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d059      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ae0 <HAL_DMA_Start_IT+0x48c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d054      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a79      	ldr	r2, [pc, #484]	@ (8005ae4 <HAL_DMA_Start_IT+0x490>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d04f      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a77      	ldr	r2, [pc, #476]	@ (8005ae8 <HAL_DMA_Start_IT+0x494>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d04a      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a76      	ldr	r2, [pc, #472]	@ (8005aec <HAL_DMA_Start_IT+0x498>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d045      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a74      	ldr	r2, [pc, #464]	@ (8005af0 <HAL_DMA_Start_IT+0x49c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d040      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a73      	ldr	r2, [pc, #460]	@ (8005af4 <HAL_DMA_Start_IT+0x4a0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d03b      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a71      	ldr	r2, [pc, #452]	@ (8005af8 <HAL_DMA_Start_IT+0x4a4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d036      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a70      	ldr	r2, [pc, #448]	@ (8005afc <HAL_DMA_Start_IT+0x4a8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d031      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6e      	ldr	r2, [pc, #440]	@ (8005b00 <HAL_DMA_Start_IT+0x4ac>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d02c      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6d      	ldr	r2, [pc, #436]	@ (8005b04 <HAL_DMA_Start_IT+0x4b0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d027      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a6b      	ldr	r2, [pc, #428]	@ (8005b08 <HAL_DMA_Start_IT+0x4b4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d022      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6a      	ldr	r2, [pc, #424]	@ (8005b0c <HAL_DMA_Start_IT+0x4b8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d01d      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a68      	ldr	r2, [pc, #416]	@ (8005b10 <HAL_DMA_Start_IT+0x4bc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d018      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a67      	ldr	r2, [pc, #412]	@ (8005b14 <HAL_DMA_Start_IT+0x4c0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d013      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a65      	ldr	r2, [pc, #404]	@ (8005b18 <HAL_DMA_Start_IT+0x4c4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00e      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a64      	ldr	r2, [pc, #400]	@ (8005b1c <HAL_DMA_Start_IT+0x4c8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d009      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a62      	ldr	r2, [pc, #392]	@ (8005b20 <HAL_DMA_Start_IT+0x4cc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <HAL_DMA_Start_IT+0x350>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a61      	ldr	r2, [pc, #388]	@ (8005b24 <HAL_DMA_Start_IT+0x4d0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <HAL_DMA_Start_IT+0x354>
 80059a4:	2301      	movs	r3, #1
 80059a6:	e000      	b.n	80059aa <HAL_DMA_Start_IT+0x356>
 80059a8:	2300      	movs	r3, #0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01a      	beq.n	80059e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a37      	ldr	r2, [pc, #220]	@ (8005ac8 <HAL_DMA_Start_IT+0x474>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d04a      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a36      	ldr	r2, [pc, #216]	@ (8005acc <HAL_DMA_Start_IT+0x478>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d045      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a34      	ldr	r2, [pc, #208]	@ (8005ad0 <HAL_DMA_Start_IT+0x47c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d040      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a33      	ldr	r2, [pc, #204]	@ (8005ad4 <HAL_DMA_Start_IT+0x480>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d03b      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a31      	ldr	r2, [pc, #196]	@ (8005ad8 <HAL_DMA_Start_IT+0x484>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d036      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a30      	ldr	r2, [pc, #192]	@ (8005adc <HAL_DMA_Start_IT+0x488>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d031      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae0 <HAL_DMA_Start_IT+0x48c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02c      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae4 <HAL_DMA_Start_IT+0x490>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d027      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2b      	ldr	r2, [pc, #172]	@ (8005ae8 <HAL_DMA_Start_IT+0x494>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d022      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2a      	ldr	r2, [pc, #168]	@ (8005aec <HAL_DMA_Start_IT+0x498>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d01d      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	@ (8005af0 <HAL_DMA_Start_IT+0x49c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d018      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a27      	ldr	r2, [pc, #156]	@ (8005af4 <HAL_DMA_Start_IT+0x4a0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a25      	ldr	r2, [pc, #148]	@ (8005af8 <HAL_DMA_Start_IT+0x4a4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a24      	ldr	r2, [pc, #144]	@ (8005afc <HAL_DMA_Start_IT+0x4a8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a22      	ldr	r2, [pc, #136]	@ (8005b00 <HAL_DMA_Start_IT+0x4ac>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_DMA_Start_IT+0x430>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a21      	ldr	r2, [pc, #132]	@ (8005b04 <HAL_DMA_Start_IT+0x4b0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d108      	bne.n	8005a96 <HAL_DMA_Start_IT+0x442>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	e012      	b.n	8005abc <HAL_DMA_Start_IT+0x468>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e009      	b.n	8005abc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40020010 	.word	0x40020010
 8005acc:	40020028 	.word	0x40020028
 8005ad0:	40020040 	.word	0x40020040
 8005ad4:	40020058 	.word	0x40020058
 8005ad8:	40020070 	.word	0x40020070
 8005adc:	40020088 	.word	0x40020088
 8005ae0:	400200a0 	.word	0x400200a0
 8005ae4:	400200b8 	.word	0x400200b8
 8005ae8:	40020410 	.word	0x40020410
 8005aec:	40020428 	.word	0x40020428
 8005af0:	40020440 	.word	0x40020440
 8005af4:	40020458 	.word	0x40020458
 8005af8:	40020470 	.word	0x40020470
 8005afc:	40020488 	.word	0x40020488
 8005b00:	400204a0 	.word	0x400204a0
 8005b04:	400204b8 	.word	0x400204b8
 8005b08:	58025408 	.word	0x58025408
 8005b0c:	5802541c 	.word	0x5802541c
 8005b10:	58025430 	.word	0x58025430
 8005b14:	58025444 	.word	0x58025444
 8005b18:	58025458 	.word	0x58025458
 8005b1c:	5802546c 	.word	0x5802546c
 8005b20:	58025480 	.word	0x58025480
 8005b24:	58025494 	.word	0x58025494

08005b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	@ 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b34:	4b67      	ldr	r3, [pc, #412]	@ (8005cd4 <HAL_DMA_IRQHandler+0x1ac>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a67      	ldr	r2, [pc, #412]	@ (8005cd8 <HAL_DMA_IRQHandler+0x1b0>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8005cdc <HAL_DMA_IRQHandler+0x1b4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d04a      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5d      	ldr	r2, [pc, #372]	@ (8005ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d045      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a5c      	ldr	r2, [pc, #368]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d040      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8005ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d03b      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a59      	ldr	r2, [pc, #356]	@ (8005cec <HAL_DMA_IRQHandler+0x1c4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d036      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a57      	ldr	r2, [pc, #348]	@ (8005cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d031      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a56      	ldr	r2, [pc, #344]	@ (8005cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d02c      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a54      	ldr	r2, [pc, #336]	@ (8005cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d027      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a53      	ldr	r2, [pc, #332]	@ (8005cfc <HAL_DMA_IRQHandler+0x1d4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a51      	ldr	r2, [pc, #324]	@ (8005d00 <HAL_DMA_IRQHandler+0x1d8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01d      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a50      	ldr	r2, [pc, #320]	@ (8005d04 <HAL_DMA_IRQHandler+0x1dc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8005d08 <HAL_DMA_IRQHandler+0x1e0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8005d0c <HAL_DMA_IRQHandler+0x1e4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a4b      	ldr	r2, [pc, #300]	@ (8005d10 <HAL_DMA_IRQHandler+0x1e8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a4a      	ldr	r2, [pc, #296]	@ (8005d14 <HAL_DMA_IRQHandler+0x1ec>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xd2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a48      	ldr	r2, [pc, #288]	@ (8005d18 <HAL_DMA_IRQHandler+0x1f0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <HAL_DMA_IRQHandler+0xd6>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_DMA_IRQHandler+0xd8>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 842b 	beq.w	800645c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	2208      	movs	r2, #8
 8005c10:	409a      	lsls	r2, r3
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 80a2 	beq.w	8005d60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2e      	ldr	r2, [pc, #184]	@ (8005cdc <HAL_DMA_IRQHandler+0x1b4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d04a      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d045      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d040      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d03b      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a28      	ldr	r2, [pc, #160]	@ (8005cec <HAL_DMA_IRQHandler+0x1c4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d036      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a27      	ldr	r2, [pc, #156]	@ (8005cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d031      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	@ (8005cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02c      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a24      	ldr	r2, [pc, #144]	@ (8005cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d027      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a22      	ldr	r2, [pc, #136]	@ (8005cfc <HAL_DMA_IRQHandler+0x1d4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a21      	ldr	r2, [pc, #132]	@ (8005d00 <HAL_DMA_IRQHandler+0x1d8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01d      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	@ (8005d04 <HAL_DMA_IRQHandler+0x1dc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d08 <HAL_DMA_IRQHandler+0x1e0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1c      	ldr	r2, [pc, #112]	@ (8005d0c <HAL_DMA_IRQHandler+0x1e4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d10 <HAL_DMA_IRQHandler+0x1e8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a19      	ldr	r2, [pc, #100]	@ (8005d14 <HAL_DMA_IRQHandler+0x1ec>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x194>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	@ (8005d18 <HAL_DMA_IRQHandler+0x1f0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d12f      	bne.n	8005d1c <HAL_DMA_IRQHandler+0x1f4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	e02e      	b.n	8005d30 <HAL_DMA_IRQHandler+0x208>
 8005cd2:	bf00      	nop
 8005cd4:	2400000c 	.word	0x2400000c
 8005cd8:	1b4e81b5 	.word	0x1b4e81b5
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bf14      	ite	ne
 8005d2a:	2301      	movne	r3, #1
 8005d2c:	2300      	moveq	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d015      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0204 	bic.w	r2, r2, #4
 8005d42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d58:	f043 0201 	orr.w	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d06e      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a69      	ldr	r2, [pc, #420]	@ (8005f20 <HAL_DMA_IRQHandler+0x3f8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d04a      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a67      	ldr	r2, [pc, #412]	@ (8005f24 <HAL_DMA_IRQHandler+0x3fc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d045      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a66      	ldr	r2, [pc, #408]	@ (8005f28 <HAL_DMA_IRQHandler+0x400>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d040      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a64      	ldr	r2, [pc, #400]	@ (8005f2c <HAL_DMA_IRQHandler+0x404>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d03b      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a63      	ldr	r2, [pc, #396]	@ (8005f30 <HAL_DMA_IRQHandler+0x408>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d036      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a61      	ldr	r2, [pc, #388]	@ (8005f34 <HAL_DMA_IRQHandler+0x40c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d031      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a60      	ldr	r2, [pc, #384]	@ (8005f38 <HAL_DMA_IRQHandler+0x410>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d02c      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f3c <HAL_DMA_IRQHandler+0x414>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d027      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5d      	ldr	r2, [pc, #372]	@ (8005f40 <HAL_DMA_IRQHandler+0x418>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d022      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a5b      	ldr	r2, [pc, #364]	@ (8005f44 <HAL_DMA_IRQHandler+0x41c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a5a      	ldr	r2, [pc, #360]	@ (8005f48 <HAL_DMA_IRQHandler+0x420>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a58      	ldr	r2, [pc, #352]	@ (8005f4c <HAL_DMA_IRQHandler+0x424>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a57      	ldr	r2, [pc, #348]	@ (8005f50 <HAL_DMA_IRQHandler+0x428>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a55      	ldr	r2, [pc, #340]	@ (8005f54 <HAL_DMA_IRQHandler+0x42c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a54      	ldr	r2, [pc, #336]	@ (8005f58 <HAL_DMA_IRQHandler+0x430>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x2ee>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a52      	ldr	r2, [pc, #328]	@ (8005f5c <HAL_DMA_IRQHandler+0x434>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10a      	bne.n	8005e2c <HAL_DMA_IRQHandler+0x304>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e003      	b.n	8005e34 <HAL_DMA_IRQHandler+0x30c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2300      	movs	r3, #0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2201      	movs	r2, #1
 8005e42:	409a      	lsls	r2, r3
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4c:	f043 0202 	orr.w	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	409a      	lsls	r2, r3
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 808f 	beq.w	8005f88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005f20 <HAL_DMA_IRQHandler+0x3f8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d04a      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2a      	ldr	r2, [pc, #168]	@ (8005f24 <HAL_DMA_IRQHandler+0x3fc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d045      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a29      	ldr	r2, [pc, #164]	@ (8005f28 <HAL_DMA_IRQHandler+0x400>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d040      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a27      	ldr	r2, [pc, #156]	@ (8005f2c <HAL_DMA_IRQHandler+0x404>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d03b      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a26      	ldr	r2, [pc, #152]	@ (8005f30 <HAL_DMA_IRQHandler+0x408>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d036      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a24      	ldr	r2, [pc, #144]	@ (8005f34 <HAL_DMA_IRQHandler+0x40c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a23      	ldr	r2, [pc, #140]	@ (8005f38 <HAL_DMA_IRQHandler+0x410>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d02c      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a21      	ldr	r2, [pc, #132]	@ (8005f3c <HAL_DMA_IRQHandler+0x414>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d027      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a20      	ldr	r2, [pc, #128]	@ (8005f40 <HAL_DMA_IRQHandler+0x418>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d022      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8005f44 <HAL_DMA_IRQHandler+0x41c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f48 <HAL_DMA_IRQHandler+0x420>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f4c <HAL_DMA_IRQHandler+0x424>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d013      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f50 <HAL_DMA_IRQHandler+0x428>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <HAL_DMA_IRQHandler+0x42c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <HAL_DMA_IRQHandler+0x430>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_DMA_IRQHandler+0x3e2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <HAL_DMA_IRQHandler+0x434>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d12a      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x438>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e023      	b.n	8005f68 <HAL_DMA_IRQHandler+0x440>
 8005f20:	40020010 	.word	0x40020010
 8005f24:	40020028 	.word	0x40020028
 8005f28:	40020040 	.word	0x40020040
 8005f2c:	40020058 	.word	0x40020058
 8005f30:	40020070 	.word	0x40020070
 8005f34:	40020088 	.word	0x40020088
 8005f38:	400200a0 	.word	0x400200a0
 8005f3c:	400200b8 	.word	0x400200b8
 8005f40:	40020410 	.word	0x40020410
 8005f44:	40020428 	.word	0x40020428
 8005f48:	40020440 	.word	0x40020440
 8005f4c:	40020458 	.word	0x40020458
 8005f50:	40020470 	.word	0x40020470
 8005f54:	40020488 	.word	0x40020488
 8005f58:	400204a0 	.word	0x400204a0
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2300      	movs	r3, #0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00d      	beq.n	8005f88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2204      	movs	r2, #4
 8005f76:	409a      	lsls	r2, r3
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f80:	f043 0204 	orr.w	r2, r3, #4
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	2210      	movs	r2, #16
 8005f92:	409a      	lsls	r2, r3
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a6 	beq.w	80060ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a85      	ldr	r2, [pc, #532]	@ (80061b8 <HAL_DMA_IRQHandler+0x690>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d04a      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a83      	ldr	r2, [pc, #524]	@ (80061bc <HAL_DMA_IRQHandler+0x694>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d045      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a82      	ldr	r2, [pc, #520]	@ (80061c0 <HAL_DMA_IRQHandler+0x698>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d040      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a80      	ldr	r2, [pc, #512]	@ (80061c4 <HAL_DMA_IRQHandler+0x69c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d03b      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a7f      	ldr	r2, [pc, #508]	@ (80061c8 <HAL_DMA_IRQHandler+0x6a0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d036      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a7d      	ldr	r2, [pc, #500]	@ (80061cc <HAL_DMA_IRQHandler+0x6a4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d031      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a7c      	ldr	r2, [pc, #496]	@ (80061d0 <HAL_DMA_IRQHandler+0x6a8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d02c      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a7a      	ldr	r2, [pc, #488]	@ (80061d4 <HAL_DMA_IRQHandler+0x6ac>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d027      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a79      	ldr	r2, [pc, #484]	@ (80061d8 <HAL_DMA_IRQHandler+0x6b0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d022      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a77      	ldr	r2, [pc, #476]	@ (80061dc <HAL_DMA_IRQHandler+0x6b4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01d      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a76      	ldr	r2, [pc, #472]	@ (80061e0 <HAL_DMA_IRQHandler+0x6b8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d018      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a74      	ldr	r2, [pc, #464]	@ (80061e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a73      	ldr	r2, [pc, #460]	@ (80061e8 <HAL_DMA_IRQHandler+0x6c0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00e      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a71      	ldr	r2, [pc, #452]	@ (80061ec <HAL_DMA_IRQHandler+0x6c4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d009      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a70      	ldr	r2, [pc, #448]	@ (80061f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d004      	beq.n	800603e <HAL_DMA_IRQHandler+0x516>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a6e      	ldr	r2, [pc, #440]	@ (80061f4 <HAL_DMA_IRQHandler+0x6cc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d10a      	bne.n	8006054 <HAL_DMA_IRQHandler+0x52c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e009      	b.n	8006068 <HAL_DMA_IRQHandler+0x540>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2301      	movne	r3, #1
 8006064:	2300      	moveq	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d03e      	beq.n	80060ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2210      	movs	r2, #16
 8006076:	409a      	lsls	r2, r3
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d018      	beq.n	80060bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d024      	beq.n	80060ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	e01f      	b.n	80060ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
 80060ba:	e016      	b.n	80060ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d107      	bne.n	80060da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0208 	bic.w	r2, r2, #8
 80060d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2220      	movs	r2, #32
 80060f4:	409a      	lsls	r2, r3
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8110 	beq.w	8006320 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a2c      	ldr	r2, [pc, #176]	@ (80061b8 <HAL_DMA_IRQHandler+0x690>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d04a      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2b      	ldr	r2, [pc, #172]	@ (80061bc <HAL_DMA_IRQHandler+0x694>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d045      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a29      	ldr	r2, [pc, #164]	@ (80061c0 <HAL_DMA_IRQHandler+0x698>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d040      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a28      	ldr	r2, [pc, #160]	@ (80061c4 <HAL_DMA_IRQHandler+0x69c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d03b      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a26      	ldr	r2, [pc, #152]	@ (80061c8 <HAL_DMA_IRQHandler+0x6a0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d036      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a25      	ldr	r2, [pc, #148]	@ (80061cc <HAL_DMA_IRQHandler+0x6a4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d031      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a23      	ldr	r2, [pc, #140]	@ (80061d0 <HAL_DMA_IRQHandler+0x6a8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02c      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a22      	ldr	r2, [pc, #136]	@ (80061d4 <HAL_DMA_IRQHandler+0x6ac>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d027      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a20      	ldr	r2, [pc, #128]	@ (80061d8 <HAL_DMA_IRQHandler+0x6b0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d022      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1f      	ldr	r2, [pc, #124]	@ (80061dc <HAL_DMA_IRQHandler+0x6b4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01d      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1d      	ldr	r2, [pc, #116]	@ (80061e0 <HAL_DMA_IRQHandler+0x6b8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d018      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1c      	ldr	r2, [pc, #112]	@ (80061e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1a      	ldr	r2, [pc, #104]	@ (80061e8 <HAL_DMA_IRQHandler+0x6c0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00e      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a19      	ldr	r2, [pc, #100]	@ (80061ec <HAL_DMA_IRQHandler+0x6c4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a17      	ldr	r2, [pc, #92]	@ (80061f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x678>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a16      	ldr	r2, [pc, #88]	@ (80061f4 <HAL_DMA_IRQHandler+0x6cc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d12b      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x6d0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	e02a      	b.n	800620c <HAL_DMA_IRQHandler+0x6e4>
 80061b6:	bf00      	nop
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf14      	ite	ne
 8006206:	2301      	movne	r3, #1
 8006208:	2300      	moveq	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8087 	beq.w	8006320 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2220      	movs	r2, #32
 800621c:	409a      	lsls	r2, r3
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b04      	cmp	r3, #4
 800622c:	d139      	bne.n	80062a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0216 	bic.w	r2, r2, #22
 800623c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800624c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <HAL_DMA_IRQHandler+0x736>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0208 	bic.w	r2, r2, #8
 800626c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	223f      	movs	r2, #63	@ 0x3f
 8006278:	409a      	lsls	r2, r3
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 834a 	beq.w	800692c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
          }
          return;
 80062a0:	e344      	b.n	800692c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d018      	beq.n	80062e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02c      	beq.n	8006320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
 80062ce:	e027      	b.n	8006320 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d023      	beq.n	8006320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	4798      	blx	r3
 80062e0:	e01e      	b.n	8006320 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10f      	bne.n	8006310 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0210 	bic.w	r2, r2, #16
 80062fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 8306 	beq.w	8006936 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8088 	beq.w	8006448 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2204      	movs	r2, #4
 800633c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7a      	ldr	r2, [pc, #488]	@ (8006530 <HAL_DMA_IRQHandler+0xa08>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d04a      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a79      	ldr	r2, [pc, #484]	@ (8006534 <HAL_DMA_IRQHandler+0xa0c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d045      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a77      	ldr	r2, [pc, #476]	@ (8006538 <HAL_DMA_IRQHandler+0xa10>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d040      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a76      	ldr	r2, [pc, #472]	@ (800653c <HAL_DMA_IRQHandler+0xa14>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d03b      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a74      	ldr	r2, [pc, #464]	@ (8006540 <HAL_DMA_IRQHandler+0xa18>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d036      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a73      	ldr	r2, [pc, #460]	@ (8006544 <HAL_DMA_IRQHandler+0xa1c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d031      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a71      	ldr	r2, [pc, #452]	@ (8006548 <HAL_DMA_IRQHandler+0xa20>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d02c      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a70      	ldr	r2, [pc, #448]	@ (800654c <HAL_DMA_IRQHandler+0xa24>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d027      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a6e      	ldr	r2, [pc, #440]	@ (8006550 <HAL_DMA_IRQHandler+0xa28>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d022      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6d      	ldr	r2, [pc, #436]	@ (8006554 <HAL_DMA_IRQHandler+0xa2c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d01d      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006558 <HAL_DMA_IRQHandler+0xa30>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d018      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a6a      	ldr	r2, [pc, #424]	@ (800655c <HAL_DMA_IRQHandler+0xa34>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a68      	ldr	r2, [pc, #416]	@ (8006560 <HAL_DMA_IRQHandler+0xa38>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00e      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a67      	ldr	r2, [pc, #412]	@ (8006564 <HAL_DMA_IRQHandler+0xa3c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d009      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a65      	ldr	r2, [pc, #404]	@ (8006568 <HAL_DMA_IRQHandler+0xa40>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d004      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x8b8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a64      	ldr	r2, [pc, #400]	@ (800656c <HAL_DMA_IRQHandler+0xa44>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <HAL_DMA_IRQHandler+0x8ca>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e007      	b.n	8006402 <HAL_DMA_IRQHandler+0x8da>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3301      	adds	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640a:	429a      	cmp	r2, r3
 800640c:	d307      	bcc.n	800641e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1f2      	bne.n	8006402 <HAL_DMA_IRQHandler+0x8da>
 800641c:	e000      	b.n	8006420 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800641e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2203      	movs	r2, #3
 8006432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006436:	e003      	b.n	8006440 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8272 	beq.w	8006936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
 800645a:	e26c      	b.n	8006936 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a43      	ldr	r2, [pc, #268]	@ (8006570 <HAL_DMA_IRQHandler+0xa48>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d022      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a42      	ldr	r2, [pc, #264]	@ (8006574 <HAL_DMA_IRQHandler+0xa4c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d01d      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a40      	ldr	r2, [pc, #256]	@ (8006578 <HAL_DMA_IRQHandler+0xa50>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a3f      	ldr	r2, [pc, #252]	@ (800657c <HAL_DMA_IRQHandler+0xa54>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a3d      	ldr	r2, [pc, #244]	@ (8006580 <HAL_DMA_IRQHandler+0xa58>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3c      	ldr	r2, [pc, #240]	@ (8006584 <HAL_DMA_IRQHandler+0xa5c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3a      	ldr	r2, [pc, #232]	@ (8006588 <HAL_DMA_IRQHandler+0xa60>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_DMA_IRQHandler+0x984>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a39      	ldr	r2, [pc, #228]	@ (800658c <HAL_DMA_IRQHandler+0xa64>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d101      	bne.n	80064b0 <HAL_DMA_IRQHandler+0x988>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_DMA_IRQHandler+0x98a>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 823f 	beq.w	8006936 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	2204      	movs	r2, #4
 80064ca:	409a      	lsls	r2, r3
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80cd 	beq.w	8006670 <HAL_DMA_IRQHandler+0xb48>
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80c7 	beq.w	8006670 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	2204      	movs	r2, #4
 80064ec:	409a      	lsls	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d049      	beq.n	8006590 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8210 	beq.w	8006930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006518:	e20a      	b.n	8006930 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 8206 	beq.w	8006930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800652c:	e200      	b.n	8006930 <HAL_DMA_IRQHandler+0xe08>
 800652e:	bf00      	nop
 8006530:	40020010 	.word	0x40020010
 8006534:	40020028 	.word	0x40020028
 8006538:	40020040 	.word	0x40020040
 800653c:	40020058 	.word	0x40020058
 8006540:	40020070 	.word	0x40020070
 8006544:	40020088 	.word	0x40020088
 8006548:	400200a0 	.word	0x400200a0
 800654c:	400200b8 	.word	0x400200b8
 8006550:	40020410 	.word	0x40020410
 8006554:	40020428 	.word	0x40020428
 8006558:	40020440 	.word	0x40020440
 800655c:	40020458 	.word	0x40020458
 8006560:	40020470 	.word	0x40020470
 8006564:	40020488 	.word	0x40020488
 8006568:	400204a0 	.word	0x400204a0
 800656c:	400204b8 	.word	0x400204b8
 8006570:	58025408 	.word	0x58025408
 8006574:	5802541c 	.word	0x5802541c
 8006578:	58025430 	.word	0x58025430
 800657c:	58025444 	.word	0x58025444
 8006580:	58025458 	.word	0x58025458
 8006584:	5802546c 	.word	0x5802546c
 8006588:	58025480 	.word	0x58025480
 800658c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d160      	bne.n	800665c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a7f      	ldr	r2, [pc, #508]	@ (800679c <HAL_DMA_IRQHandler+0xc74>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d04a      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a7d      	ldr	r2, [pc, #500]	@ (80067a0 <HAL_DMA_IRQHandler+0xc78>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d045      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a7c      	ldr	r2, [pc, #496]	@ (80067a4 <HAL_DMA_IRQHandler+0xc7c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d040      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a7a      	ldr	r2, [pc, #488]	@ (80067a8 <HAL_DMA_IRQHandler+0xc80>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d03b      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a79      	ldr	r2, [pc, #484]	@ (80067ac <HAL_DMA_IRQHandler+0xc84>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d036      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a77      	ldr	r2, [pc, #476]	@ (80067b0 <HAL_DMA_IRQHandler+0xc88>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d031      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a76      	ldr	r2, [pc, #472]	@ (80067b4 <HAL_DMA_IRQHandler+0xc8c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d02c      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a74      	ldr	r2, [pc, #464]	@ (80067b8 <HAL_DMA_IRQHandler+0xc90>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d027      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a73      	ldr	r2, [pc, #460]	@ (80067bc <HAL_DMA_IRQHandler+0xc94>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d022      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a71      	ldr	r2, [pc, #452]	@ (80067c0 <HAL_DMA_IRQHandler+0xc98>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01d      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a70      	ldr	r2, [pc, #448]	@ (80067c4 <HAL_DMA_IRQHandler+0xc9c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d018      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6e      	ldr	r2, [pc, #440]	@ (80067c8 <HAL_DMA_IRQHandler+0xca0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6d      	ldr	r2, [pc, #436]	@ (80067cc <HAL_DMA_IRQHandler+0xca4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00e      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a6b      	ldr	r2, [pc, #428]	@ (80067d0 <HAL_DMA_IRQHandler+0xca8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d009      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6a      	ldr	r2, [pc, #424]	@ (80067d4 <HAL_DMA_IRQHandler+0xcac>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d004      	beq.n	800663a <HAL_DMA_IRQHandler+0xb12>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a68      	ldr	r2, [pc, #416]	@ (80067d8 <HAL_DMA_IRQHandler+0xcb0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d108      	bne.n	800664c <HAL_DMA_IRQHandler+0xb24>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0208 	bic.w	r2, r2, #8
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e007      	b.n	800665c <HAL_DMA_IRQHandler+0xb34>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0204 	bic.w	r2, r2, #4
 800665a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8165 	beq.w	8006930 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800666e:	e15f      	b.n	8006930 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2202      	movs	r2, #2
 800667a:	409a      	lsls	r2, r3
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	4013      	ands	r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80c5 	beq.w	8006810 <HAL_DMA_IRQHandler+0xce8>
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80bf 	beq.w	8006810 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2202      	movs	r2, #2
 800669c:	409a      	lsls	r2, r3
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d018      	beq.n	80066de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 813a 	beq.w	8006934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066c8:	e134      	b.n	8006934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8130 	beq.w	8006934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066dc:	e12a      	b.n	8006934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f040 8089 	bne.w	80067fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a2b      	ldr	r2, [pc, #172]	@ (800679c <HAL_DMA_IRQHandler+0xc74>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d04a      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <HAL_DMA_IRQHandler+0xc78>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d045      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a28      	ldr	r2, [pc, #160]	@ (80067a4 <HAL_DMA_IRQHandler+0xc7c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d040      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a26      	ldr	r2, [pc, #152]	@ (80067a8 <HAL_DMA_IRQHandler+0xc80>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d03b      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a25      	ldr	r2, [pc, #148]	@ (80067ac <HAL_DMA_IRQHandler+0xc84>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d036      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <HAL_DMA_IRQHandler+0xc88>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d031      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a22      	ldr	r2, [pc, #136]	@ (80067b4 <HAL_DMA_IRQHandler+0xc8c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d02c      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a20      	ldr	r2, [pc, #128]	@ (80067b8 <HAL_DMA_IRQHandler+0xc90>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d027      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1f      	ldr	r2, [pc, #124]	@ (80067bc <HAL_DMA_IRQHandler+0xc94>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d022      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1d      	ldr	r2, [pc, #116]	@ (80067c0 <HAL_DMA_IRQHandler+0xc98>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01d      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1c      	ldr	r2, [pc, #112]	@ (80067c4 <HAL_DMA_IRQHandler+0xc9c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d018      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1a      	ldr	r2, [pc, #104]	@ (80067c8 <HAL_DMA_IRQHandler+0xca0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a19      	ldr	r2, [pc, #100]	@ (80067cc <HAL_DMA_IRQHandler+0xca4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00e      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <HAL_DMA_IRQHandler+0xca8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d009      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a16      	ldr	r2, [pc, #88]	@ (80067d4 <HAL_DMA_IRQHandler+0xcac>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d004      	beq.n	800678a <HAL_DMA_IRQHandler+0xc62>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a14      	ldr	r2, [pc, #80]	@ (80067d8 <HAL_DMA_IRQHandler+0xcb0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d128      	bne.n	80067dc <HAL_DMA_IRQHandler+0xcb4>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0214 	bic.w	r2, r2, #20
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e027      	b.n	80067ec <HAL_DMA_IRQHandler+0xcc4>
 800679c:	40020010 	.word	0x40020010
 80067a0:	40020028 	.word	0x40020028
 80067a4:	40020040 	.word	0x40020040
 80067a8:	40020058 	.word	0x40020058
 80067ac:	40020070 	.word	0x40020070
 80067b0:	40020088 	.word	0x40020088
 80067b4:	400200a0 	.word	0x400200a0
 80067b8:	400200b8 	.word	0x400200b8
 80067bc:	40020410 	.word	0x40020410
 80067c0:	40020428 	.word	0x40020428
 80067c4:	40020440 	.word	0x40020440
 80067c8:	40020458 	.word	0x40020458
 80067cc:	40020470 	.word	0x40020470
 80067d0:	40020488 	.word	0x40020488
 80067d4:	400204a0 	.word	0x400204a0
 80067d8:	400204b8 	.word	0x400204b8
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 020a 	bic.w	r2, r2, #10
 80067ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8097 	beq.w	8006934 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800680e:	e091      	b.n	8006934 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2208      	movs	r2, #8
 800681a:	409a      	lsls	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8088 	beq.w	8006936 <HAL_DMA_IRQHandler+0xe0e>
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 8082 	beq.w	8006936 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a41      	ldr	r2, [pc, #260]	@ (800693c <HAL_DMA_IRQHandler+0xe14>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04a      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a3f      	ldr	r2, [pc, #252]	@ (8006940 <HAL_DMA_IRQHandler+0xe18>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d045      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3e      	ldr	r2, [pc, #248]	@ (8006944 <HAL_DMA_IRQHandler+0xe1c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d040      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a3c      	ldr	r2, [pc, #240]	@ (8006948 <HAL_DMA_IRQHandler+0xe20>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03b      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a3b      	ldr	r2, [pc, #236]	@ (800694c <HAL_DMA_IRQHandler+0xe24>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d036      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a39      	ldr	r2, [pc, #228]	@ (8006950 <HAL_DMA_IRQHandler+0xe28>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a38      	ldr	r2, [pc, #224]	@ (8006954 <HAL_DMA_IRQHandler+0xe2c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02c      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a36      	ldr	r2, [pc, #216]	@ (8006958 <HAL_DMA_IRQHandler+0xe30>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d027      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a35      	ldr	r2, [pc, #212]	@ (800695c <HAL_DMA_IRQHandler+0xe34>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a33      	ldr	r2, [pc, #204]	@ (8006960 <HAL_DMA_IRQHandler+0xe38>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a32      	ldr	r2, [pc, #200]	@ (8006964 <HAL_DMA_IRQHandler+0xe3c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a30      	ldr	r2, [pc, #192]	@ (8006968 <HAL_DMA_IRQHandler+0xe40>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2f      	ldr	r2, [pc, #188]	@ (800696c <HAL_DMA_IRQHandler+0xe44>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006970 <HAL_DMA_IRQHandler+0xe48>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <HAL_DMA_IRQHandler+0xe4c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <HAL_DMA_IRQHandler+0xdaa>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <HAL_DMA_IRQHandler+0xe50>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d108      	bne.n	80068e4 <HAL_DMA_IRQHandler+0xdbc>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 021c 	bic.w	r2, r2, #28
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	e007      	b.n	80068f4 <HAL_DMA_IRQHandler+0xdcc>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 020e 	bic.w	r2, r2, #14
 80068f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2201      	movs	r2, #1
 80068fe:	409a      	lsls	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	e004      	b.n	8006936 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800692c:	bf00      	nop
 800692e:	e002      	b.n	8006936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006930:	bf00      	nop
 8006932:	e000      	b.n	8006936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006934:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006936:	3728      	adds	r7, #40	@ 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40020010 	.word	0x40020010
 8006940:	40020028 	.word	0x40020028
 8006944:	40020040 	.word	0x40020040
 8006948:	40020058 	.word	0x40020058
 800694c:	40020070 	.word	0x40020070
 8006950:	40020088 	.word	0x40020088
 8006954:	400200a0 	.word	0x400200a0
 8006958:	400200b8 	.word	0x400200b8
 800695c:	40020410 	.word	0x40020410
 8006960:	40020428 	.word	0x40020428
 8006964:	40020440 	.word	0x40020440
 8006968:	40020458 	.word	0x40020458
 800696c:	40020470 	.word	0x40020470
 8006970:	40020488 	.word	0x40020488
 8006974:	400204a0 	.word	0x400204a0
 8006978:	400204b8 	.word	0x400204b8

0800697c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800698e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006994:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a7f      	ldr	r2, [pc, #508]	@ (8006b98 <DMA_SetConfig+0x21c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d072      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a7d      	ldr	r2, [pc, #500]	@ (8006b9c <DMA_SetConfig+0x220>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d06d      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a7c      	ldr	r2, [pc, #496]	@ (8006ba0 <DMA_SetConfig+0x224>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d068      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a7a      	ldr	r2, [pc, #488]	@ (8006ba4 <DMA_SetConfig+0x228>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d063      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a79      	ldr	r2, [pc, #484]	@ (8006ba8 <DMA_SetConfig+0x22c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d05e      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a77      	ldr	r2, [pc, #476]	@ (8006bac <DMA_SetConfig+0x230>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d059      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a76      	ldr	r2, [pc, #472]	@ (8006bb0 <DMA_SetConfig+0x234>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d054      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a74      	ldr	r2, [pc, #464]	@ (8006bb4 <DMA_SetConfig+0x238>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d04f      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a73      	ldr	r2, [pc, #460]	@ (8006bb8 <DMA_SetConfig+0x23c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d04a      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a71      	ldr	r2, [pc, #452]	@ (8006bbc <DMA_SetConfig+0x240>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d045      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a70      	ldr	r2, [pc, #448]	@ (8006bc0 <DMA_SetConfig+0x244>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d040      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a6e      	ldr	r2, [pc, #440]	@ (8006bc4 <DMA_SetConfig+0x248>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d03b      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a6d      	ldr	r2, [pc, #436]	@ (8006bc8 <DMA_SetConfig+0x24c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d036      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8006bcc <DMA_SetConfig+0x250>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d031      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a6a      	ldr	r2, [pc, #424]	@ (8006bd0 <DMA_SetConfig+0x254>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d02c      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a68      	ldr	r2, [pc, #416]	@ (8006bd4 <DMA_SetConfig+0x258>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d027      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a67      	ldr	r2, [pc, #412]	@ (8006bd8 <DMA_SetConfig+0x25c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d022      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a65      	ldr	r2, [pc, #404]	@ (8006bdc <DMA_SetConfig+0x260>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01d      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a64      	ldr	r2, [pc, #400]	@ (8006be0 <DMA_SetConfig+0x264>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d018      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a62      	ldr	r2, [pc, #392]	@ (8006be4 <DMA_SetConfig+0x268>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d013      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a61      	ldr	r2, [pc, #388]	@ (8006be8 <DMA_SetConfig+0x26c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00e      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8006bec <DMA_SetConfig+0x270>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d009      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a5e      	ldr	r2, [pc, #376]	@ (8006bf0 <DMA_SetConfig+0x274>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d004      	beq.n	8006a86 <DMA_SetConfig+0x10a>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a5c      	ldr	r2, [pc, #368]	@ (8006bf4 <DMA_SetConfig+0x278>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d101      	bne.n	8006a8a <DMA_SetConfig+0x10e>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <DMA_SetConfig+0x110>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006a98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006aaa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a39      	ldr	r2, [pc, #228]	@ (8006b98 <DMA_SetConfig+0x21c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d04a      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a38      	ldr	r2, [pc, #224]	@ (8006b9c <DMA_SetConfig+0x220>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d045      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a36      	ldr	r2, [pc, #216]	@ (8006ba0 <DMA_SetConfig+0x224>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d040      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a35      	ldr	r2, [pc, #212]	@ (8006ba4 <DMA_SetConfig+0x228>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d03b      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a33      	ldr	r2, [pc, #204]	@ (8006ba8 <DMA_SetConfig+0x22c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d036      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <DMA_SetConfig+0x230>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d031      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a30      	ldr	r2, [pc, #192]	@ (8006bb0 <DMA_SetConfig+0x234>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d02c      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a2f      	ldr	r2, [pc, #188]	@ (8006bb4 <DMA_SetConfig+0x238>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d027      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a2d      	ldr	r2, [pc, #180]	@ (8006bb8 <DMA_SetConfig+0x23c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d022      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bbc <DMA_SetConfig+0x240>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d01d      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2a      	ldr	r2, [pc, #168]	@ (8006bc0 <DMA_SetConfig+0x244>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a29      	ldr	r2, [pc, #164]	@ (8006bc4 <DMA_SetConfig+0x248>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a27      	ldr	r2, [pc, #156]	@ (8006bc8 <DMA_SetConfig+0x24c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a26      	ldr	r2, [pc, #152]	@ (8006bcc <DMA_SetConfig+0x250>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a24      	ldr	r2, [pc, #144]	@ (8006bd0 <DMA_SetConfig+0x254>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <DMA_SetConfig+0x1d0>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <DMA_SetConfig+0x258>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <DMA_SetConfig+0x1d4>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <DMA_SetConfig+0x1d6>
 8006b50:	2300      	movs	r3, #0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d059      	beq.n	8006c0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	223f      	movs	r2, #63	@ 0x3f
 8006b60:	409a      	lsls	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006b74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d138      	bne.n	8006bf8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b96:	e086      	b.n	8006ca6 <DMA_SetConfig+0x32a>
 8006b98:	40020010 	.word	0x40020010
 8006b9c:	40020028 	.word	0x40020028
 8006ba0:	40020040 	.word	0x40020040
 8006ba4:	40020058 	.word	0x40020058
 8006ba8:	40020070 	.word	0x40020070
 8006bac:	40020088 	.word	0x40020088
 8006bb0:	400200a0 	.word	0x400200a0
 8006bb4:	400200b8 	.word	0x400200b8
 8006bb8:	40020410 	.word	0x40020410
 8006bbc:	40020428 	.word	0x40020428
 8006bc0:	40020440 	.word	0x40020440
 8006bc4:	40020458 	.word	0x40020458
 8006bc8:	40020470 	.word	0x40020470
 8006bcc:	40020488 	.word	0x40020488
 8006bd0:	400204a0 	.word	0x400204a0
 8006bd4:	400204b8 	.word	0x400204b8
 8006bd8:	58025408 	.word	0x58025408
 8006bdc:	5802541c 	.word	0x5802541c
 8006be0:	58025430 	.word	0x58025430
 8006be4:	58025444 	.word	0x58025444
 8006be8:	58025458 	.word	0x58025458
 8006bec:	5802546c 	.word	0x5802546c
 8006bf0:	58025480 	.word	0x58025480
 8006bf4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
}
 8006c08:	e04d      	b.n	8006ca6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a29      	ldr	r2, [pc, #164]	@ (8006cb4 <DMA_SetConfig+0x338>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d022      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a27      	ldr	r2, [pc, #156]	@ (8006cb8 <DMA_SetConfig+0x33c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01d      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a26      	ldr	r2, [pc, #152]	@ (8006cbc <DMA_SetConfig+0x340>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d018      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a24      	ldr	r2, [pc, #144]	@ (8006cc0 <DMA_SetConfig+0x344>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d013      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a23      	ldr	r2, [pc, #140]	@ (8006cc4 <DMA_SetConfig+0x348>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00e      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a21      	ldr	r2, [pc, #132]	@ (8006cc8 <DMA_SetConfig+0x34c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d009      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a20      	ldr	r2, [pc, #128]	@ (8006ccc <DMA_SetConfig+0x350>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d004      	beq.n	8006c5a <DMA_SetConfig+0x2de>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1e      	ldr	r2, [pc, #120]	@ (8006cd0 <DMA_SetConfig+0x354>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <DMA_SetConfig+0x2e2>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <DMA_SetConfig+0x2e4>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d020      	beq.n	8006ca6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b40      	cmp	r3, #64	@ 0x40
 8006c82:	d108      	bne.n	8006c96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	60da      	str	r2, [r3, #12]
}
 8006c94:	e007      	b.n	8006ca6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	60da      	str	r2, [r3, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	58025408 	.word	0x58025408
 8006cb8:	5802541c 	.word	0x5802541c
 8006cbc:	58025430 	.word	0x58025430
 8006cc0:	58025444 	.word	0x58025444
 8006cc4:	58025458 	.word	0x58025458
 8006cc8:	5802546c 	.word	0x5802546c
 8006ccc:	58025480 	.word	0x58025480
 8006cd0:	58025494 	.word	0x58025494

08006cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a42      	ldr	r2, [pc, #264]	@ (8006dec <DMA_CalcBaseAndBitshift+0x118>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04a      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a41      	ldr	r2, [pc, #260]	@ (8006df0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d045      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8006df4 <DMA_CalcBaseAndBitshift+0x120>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d040      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8006df8 <DMA_CalcBaseAndBitshift+0x124>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d03b      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a3c      	ldr	r2, [pc, #240]	@ (8006dfc <DMA_CalcBaseAndBitshift+0x128>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d036      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a3b      	ldr	r2, [pc, #236]	@ (8006e00 <DMA_CalcBaseAndBitshift+0x12c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d031      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a39      	ldr	r2, [pc, #228]	@ (8006e04 <DMA_CalcBaseAndBitshift+0x130>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02c      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a38      	ldr	r2, [pc, #224]	@ (8006e08 <DMA_CalcBaseAndBitshift+0x134>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d027      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a36      	ldr	r2, [pc, #216]	@ (8006e0c <DMA_CalcBaseAndBitshift+0x138>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a35      	ldr	r2, [pc, #212]	@ (8006e10 <DMA_CalcBaseAndBitshift+0x13c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01d      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a33      	ldr	r2, [pc, #204]	@ (8006e14 <DMA_CalcBaseAndBitshift+0x140>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a32      	ldr	r2, [pc, #200]	@ (8006e18 <DMA_CalcBaseAndBitshift+0x144>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a30      	ldr	r2, [pc, #192]	@ (8006e1c <DMA_CalcBaseAndBitshift+0x148>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2f      	ldr	r2, [pc, #188]	@ (8006e20 <DMA_CalcBaseAndBitshift+0x14c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006e24 <DMA_CalcBaseAndBitshift+0x150>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <DMA_CalcBaseAndBitshift+0xa8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2c      	ldr	r2, [pc, #176]	@ (8006e28 <DMA_CalcBaseAndBitshift+0x154>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d101      	bne.n	8006d80 <DMA_CalcBaseAndBitshift+0xac>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <DMA_CalcBaseAndBitshift+0xae>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d024      	beq.n	8006dd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	3b10      	subs	r3, #16
 8006d8e:	4a27      	ldr	r2, [pc, #156]	@ (8006e2c <DMA_CalcBaseAndBitshift+0x158>)
 8006d90:	fba2 2303 	umull	r2, r3, r2, r3
 8006d94:	091b      	lsrs	r3, r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	4a24      	ldr	r2, [pc, #144]	@ (8006e30 <DMA_CalcBaseAndBitshift+0x15c>)
 8006da0:	5cd3      	ldrb	r3, [r2, r3]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d908      	bls.n	8006dc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	4b1f      	ldr	r3, [pc, #124]	@ (8006e34 <DMA_CalcBaseAndBitshift+0x160>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	1d1a      	adds	r2, r3, #4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8006dbe:	e00d      	b.n	8006ddc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <DMA_CalcBaseAndBitshift+0x160>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dce:	e005      	b.n	8006ddc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	40020010 	.word	0x40020010
 8006df0:	40020028 	.word	0x40020028
 8006df4:	40020040 	.word	0x40020040
 8006df8:	40020058 	.word	0x40020058
 8006dfc:	40020070 	.word	0x40020070
 8006e00:	40020088 	.word	0x40020088
 8006e04:	400200a0 	.word	0x400200a0
 8006e08:	400200b8 	.word	0x400200b8
 8006e0c:	40020410 	.word	0x40020410
 8006e10:	40020428 	.word	0x40020428
 8006e14:	40020440 	.word	0x40020440
 8006e18:	40020458 	.word	0x40020458
 8006e1c:	40020470 	.word	0x40020470
 8006e20:	40020488 	.word	0x40020488
 8006e24:	400204a0 	.word	0x400204a0
 8006e28:	400204b8 	.word	0x400204b8
 8006e2c:	aaaaaaab 	.word	0xaaaaaaab
 8006e30:	08011e48 	.word	0x08011e48
 8006e34:	fffffc00 	.word	0xfffffc00

08006e38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d120      	bne.n	8006e8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d858      	bhi.n	8006f06 <DMA_CheckFifoParam+0xce>
 8006e54:	a201      	add	r2, pc, #4	@ (adr r2, 8006e5c <DMA_CheckFifoParam+0x24>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e6d 	.word	0x08006e6d
 8006e60:	08006e7f 	.word	0x08006e7f
 8006e64:	08006e6d 	.word	0x08006e6d
 8006e68:	08006f07 	.word	0x08006f07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d048      	beq.n	8006f0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e7c:	e045      	b.n	8006f0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e86:	d142      	bne.n	8006f0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e8c:	e03f      	b.n	8006f0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e96:	d123      	bne.n	8006ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d838      	bhi.n	8006f12 <DMA_CheckFifoParam+0xda>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <DMA_CheckFifoParam+0x70>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006eb9 	.word	0x08006eb9
 8006eac:	08006ebf 	.word	0x08006ebf
 8006eb0:	08006eb9 	.word	0x08006eb9
 8006eb4:	08006ed1 	.word	0x08006ed1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	73fb      	strb	r3, [r7, #15]
        break;
 8006ebc:	e030      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d025      	beq.n	8006f16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ece:	e022      	b.n	8006f16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ed8:	d11f      	bne.n	8006f1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ede:	e01c      	b.n	8006f1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d902      	bls.n	8006eee <DMA_CheckFifoParam+0xb6>
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d003      	beq.n	8006ef4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006eec:	e018      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ef2:	e015      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00e      	beq.n	8006f1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
    break;
 8006f04:	e00b      	b.n	8006f1e <DMA_CheckFifoParam+0xe6>
        break;
 8006f06:	bf00      	nop
 8006f08:	e00a      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        break;
 8006f0a:	bf00      	nop
 8006f0c:	e008      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        break;
 8006f0e:	bf00      	nop
 8006f10:	e006      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        break;
 8006f12:	bf00      	nop
 8006f14:	e004      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        break;
 8006f16:	bf00      	nop
 8006f18:	e002      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
        break;
 8006f1a:	bf00      	nop
 8006f1c:	e000      	b.n	8006f20 <DMA_CheckFifoParam+0xe8>
    break;
 8006f1e:	bf00      	nop
    }
  }

  return status;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop

08006f30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a38      	ldr	r2, [pc, #224]	@ (8007024 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d022      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a36      	ldr	r2, [pc, #216]	@ (8007028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d01d      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a35      	ldr	r2, [pc, #212]	@ (800702c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d018      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a33      	ldr	r2, [pc, #204]	@ (8007030 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a32      	ldr	r2, [pc, #200]	@ (8007034 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00e      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a30      	ldr	r2, [pc, #192]	@ (8007038 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d009      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800703c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d004      	beq.n	8006f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2d      	ldr	r2, [pc, #180]	@ (8007040 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d101      	bne.n	8006f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	3b08      	subs	r3, #8
 8006fa0:	4a28      	ldr	r2, [pc, #160]	@ (8007044 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	091b      	lsrs	r3, r3, #4
 8006fa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4b26      	ldr	r3, [pc, #152]	@ (8007048 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a24      	ldr	r2, [pc, #144]	@ (800704c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006fbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006fcc:	e024      	b.n	8007018 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	3b10      	subs	r3, #16
 8006fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007050 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8007054 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d806      	bhi.n	8006ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4a1b      	ldr	r2, [pc, #108]	@ (8007058 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d902      	bls.n	8006ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4b18      	ldr	r3, [pc, #96]	@ (800705c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a16      	ldr	r2, [pc, #88]	@ (8007060 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007008:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f003 031f 	and.w	r3, r3, #31
 8007010:	2201      	movs	r2, #1
 8007012:	409a      	lsls	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	58025408 	.word	0x58025408
 8007028:	5802541c 	.word	0x5802541c
 800702c:	58025430 	.word	0x58025430
 8007030:	58025444 	.word	0x58025444
 8007034:	58025458 	.word	0x58025458
 8007038:	5802546c 	.word	0x5802546c
 800703c:	58025480 	.word	0x58025480
 8007040:	58025494 	.word	0x58025494
 8007044:	cccccccd 	.word	0xcccccccd
 8007048:	16009600 	.word	0x16009600
 800704c:	58025880 	.word	0x58025880
 8007050:	aaaaaaab 	.word	0xaaaaaaab
 8007054:	400204b8 	.word	0x400204b8
 8007058:	4002040f 	.word	0x4002040f
 800705c:	10008200 	.word	0x10008200
 8007060:	40020880 	.word	0x40020880

08007064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d04a      	beq.n	8007110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b08      	cmp	r3, #8
 800707e:	d847      	bhi.n	8007110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a25      	ldr	r2, [pc, #148]	@ (800711c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a24      	ldr	r2, [pc, #144]	@ (8007120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d01d      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a22      	ldr	r2, [pc, #136]	@ (8007124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a21      	ldr	r2, [pc, #132]	@ (8007128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1f      	ldr	r2, [pc, #124]	@ (800712c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1e      	ldr	r2, [pc, #120]	@ (8007130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d101      	bne.n	80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4b17      	ldr	r3, [pc, #92]	@ (800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a15      	ldr	r2, [pc, #84]	@ (8007140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80070ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80070ee:	e009      	b.n	8007104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4b14      	ldr	r3, [pc, #80]	@ (8007144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a11      	ldr	r2, [pc, #68]	@ (8007148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007102:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3b01      	subs	r3, #1
 8007108:	2201      	movs	r2, #1
 800710a:	409a      	lsls	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	58025408 	.word	0x58025408
 8007120:	5802541c 	.word	0x5802541c
 8007124:	58025430 	.word	0x58025430
 8007128:	58025444 	.word	0x58025444
 800712c:	58025458 	.word	0x58025458
 8007130:	5802546c 	.word	0x5802546c
 8007134:	58025480 	.word	0x58025480
 8007138:	58025494 	.word	0x58025494
 800713c:	1600963f 	.word	0x1600963f
 8007140:	58025940 	.word	0x58025940
 8007144:	1000823f 	.word	0x1000823f
 8007148:	40020940 	.word	0x40020940

0800714c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b098      	sub	sp, #96	@ 0x60
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007154:	4a84      	ldr	r2, [pc, #528]	@ (8007368 <HAL_FDCAN_Init+0x21c>)
 8007156:	f107 030c 	add.w	r3, r7, #12
 800715a:	4611      	mov	r1, r2
 800715c:	224c      	movs	r2, #76	@ 0x4c
 800715e:	4618      	mov	r0, r3
 8007160:	f00a f892 	bl	8011288 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e1c6      	b.n	80074fc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a7e      	ldr	r2, [pc, #504]	@ (800736c <HAL_FDCAN_Init+0x220>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d106      	bne.n	8007186 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007180:	461a      	mov	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fb f842 	bl	8002224 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0210 	bic.w	r2, r2, #16
 80071ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071b0:	f7fb fd1a 	bl	8002be8 <HAL_GetTick>
 80071b4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071b6:	e014      	b.n	80071e2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071b8:	f7fb fd16 	bl	8002be8 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b0a      	cmp	r3, #10
 80071c4:	d90d      	bls.n	80071e2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071cc:	f043 0201 	orr.w	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2203      	movs	r2, #3
 80071da:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e18c      	b.n	80074fc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d0e3      	beq.n	80071b8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007200:	f7fb fcf2 	bl	8002be8 <HAL_GetTick>
 8007204:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007206:	e014      	b.n	8007232 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007208:	f7fb fcee 	bl	8002be8 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b0a      	cmp	r3, #10
 8007214:	d90d      	bls.n	8007232 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800721c:	f043 0201 	orr.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e164      	b.n	80074fc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0e3      	beq.n	8007208 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0202 	orr.w	r2, r2, #2
 800724e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7c1b      	ldrb	r3, [r3, #16]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d108      	bne.n	800726a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007266:	619a      	str	r2, [r3, #24]
 8007268:	e007      	b.n	800727a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007278:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7c5b      	ldrb	r3, [r3, #17]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d108      	bne.n	8007294 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007290:	619a      	str	r2, [r3, #24]
 8007292:	e007      	b.n	80072a4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7c9b      	ldrb	r3, [r3, #18]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d108      	bne.n	80072be <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072ba:	619a      	str	r2, [r3, #24]
 80072bc:	e007      	b.n	80072ce <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072cc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80072f2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691a      	ldr	r2, [r3, #16]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0210 	bic.w	r2, r2, #16
 8007302:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d108      	bne.n	800731e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0204 	orr.w	r2, r2, #4
 800731a:	619a      	str	r2, [r3, #24]
 800731c:	e030      	b.n	8007380 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d02c      	beq.n	8007380 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d020      	beq.n	8007370 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800733c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0210 	orr.w	r2, r2, #16
 800734c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d114      	bne.n	8007380 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f042 0220 	orr.w	r2, r2, #32
 8007364:	619a      	str	r2, [r3, #24]
 8007366:	e00b      	b.n	8007380 <HAL_FDCAN_Init+0x234>
 8007368:	08011dec 	.word	0x08011dec
 800736c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0220 	orr.w	r2, r2, #32
 800737e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	3b01      	subs	r3, #1
 8007386:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	3b01      	subs	r3, #1
 800738e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007390:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007398:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80073a8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073aa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073b4:	d115      	bne.n	80073e2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	3b01      	subs	r3, #1
 80073c2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073c4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ca:	3b01      	subs	r3, #1
 80073cc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073ce:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	3b01      	subs	r3, #1
 80073d8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073de:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073e0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007408:	4413      	add	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d011      	beq.n	8007432 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007416:	f023 0107 	bic.w	r1, r3, #7
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	3360      	adds	r3, #96	@ 0x60
 8007422:	443b      	add	r3, r7
 8007424:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d011      	beq.n	800745e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007442:	f023 0107 	bic.w	r1, r3, #7
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	3360      	adds	r3, #96	@ 0x60
 800744e:	443b      	add	r3, r7
 8007450:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007462:	2b00      	cmp	r3, #0
 8007464:	d012      	beq.n	800748c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800746e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	3360      	adds	r3, #96	@ 0x60
 800747a:	443b      	add	r3, r7
 800747c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007480:	011a      	lsls	r2, r3, #4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007490:	2b00      	cmp	r3, #0
 8007492:	d012      	beq.n	80074ba <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800749c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	3360      	adds	r3, #96	@ 0x60
 80074a8:	443b      	add	r3, r7
 80074aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80074ae:	021a      	lsls	r2, r3, #8
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a11      	ldr	r2, [pc, #68]	@ (8007504 <HAL_FDCAN_Init+0x3b8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d107      	bne.n	80074d4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f022 0203 	bic.w	r2, r2, #3
 80074d2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fdeb 	bl	80080c8 <FDCAN_CalcultateRamBlockAddresses>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80074f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3760      	adds	r7, #96	@ 0x60
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	4000a000 	.word	0x4000a000

08007508 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007518:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d002      	beq.n	8007526 <HAL_FDCAN_ConfigFilter+0x1e>
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d157      	bne.n	80075d6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d12b      	bne.n	8007586 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	2b07      	cmp	r3, #7
 8007534:	d10d      	bne.n	8007552 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007542:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007548:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800754a:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	e00e      	b.n	8007570 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800755e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007566:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e025      	b.n	80075d2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	075a      	lsls	r2, r3, #29
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	2b07      	cmp	r3, #7
 800759a:	d103      	bne.n	80075a4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	e006      	b.n	80075b2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	079a      	lsls	r2, r3, #30
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4413      	add	r3, r2
 80075be:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	3304      	adds	r3, #4
 80075ca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e008      	b.n	80075e8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075dc:	f043 0202 	orr.w	r2, r3, #2
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
  }
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d111      	bne.n	800762c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e008      	b.n	800763e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007632:	f043 0204 	orr.w	r2, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d141      	bne.n	80076e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800766a:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d109      	bne.n	8007686 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e038      	b.n	80076f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800768e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800769c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e026      	b.n	80076f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80076b2:	0c1b      	lsrs	r3, r3, #16
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fe87 	bl	80083d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2101      	movs	r1, #1
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	fa01 f202 	lsl.w	r2, r1, r2
 80076d2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80076d6:	2201      	movs	r2, #1
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	409a      	lsls	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e008      	b.n	80076f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076ec:	f043 0208 	orr.w	r2, r3, #8
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
  }
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007700:	b480      	push	{r7}
 8007702:	b08b      	sub	sp, #44	@ 0x2c
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007718:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800771a:	7efb      	ldrb	r3, [r7, #27]
 800771c:	2b02      	cmp	r3, #2
 800771e:	f040 8149 	bne.w	80079b4 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	d14c      	bne.n	80077c2 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007730:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800773e:	f043 0220 	orr.w	r2, r3, #32
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e13c      	b.n	80079c6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007762:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e12a      	b.n	80079c6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800777c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007780:	d10a      	bne.n	8007798 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800778a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800778e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007792:	d101      	bne.n	8007798 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007794:	2301      	movs	r3, #1
 8007796:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	4413      	add	r3, r2
 80077aa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	fb01 f303 	mul.w	r3, r1, r3
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c0:	e068      	b.n	8007894 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b41      	cmp	r3, #65	@ 0x41
 80077c6:	d14c      	bne.n	8007862 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077de:	f043 0220 	orr.w	r2, r3, #32
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0ec      	b.n	80079c6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007802:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0da      	b.n	80079c6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800781c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007820:	d10a      	bne.n	8007838 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800782a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800782e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007832:	d101      	bne.n	8007838 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007834:	2301      	movs	r3, #1
 8007836:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007860:	e018      	b.n	8007894 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d309      	bcc.n	8007880 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e0a2      	b.n	80079c6 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d107      	bne.n	80078b8 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	0c9b      	lsrs	r3, r3, #18
 80078ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	e005      	b.n	80078c4 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	3304      	adds	r3, #4
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	f003 020f 	and.w	r2, r3, #15
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	0e1b      	lsrs	r3, r3, #24
 8007918:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	0fda      	lsrs	r2, r3, #31
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	3304      	adds	r3, #4
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007934:	2300      	movs	r3, #0
 8007936:	623b      	str	r3, [r7, #32]
 8007938:	e00a      	b.n	8007950 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	441a      	add	r2, r3
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	440b      	add	r3, r1
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	3301      	adds	r3, #1
 800794e:	623b      	str	r3, [r7, #32]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4a1f      	ldr	r2, [pc, #124]	@ (80079d4 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007956:	5cd3      	ldrb	r3, [r2, r3]
 8007958:	461a      	mov	r2, r3
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	4293      	cmp	r3, r2
 800795e:	d3ec      	bcc.n	800793a <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b40      	cmp	r3, #64	@ 0x40
 8007964:	d105      	bne.n	8007972 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007970:	e01e      	b.n	80079b0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b41      	cmp	r3, #65	@ 0x41
 8007976:	d105      	bne.n	8007984 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007982:	e015      	b.n	80079b0 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b1f      	cmp	r3, #31
 8007988:	d808      	bhi.n	800799c <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2101      	movs	r1, #1
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	fa01 f202 	lsl.w	r2, r1, r2
 8007996:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800799a:	e009      	b.n	80079b0 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 021f 	and.w	r2, r3, #31
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2101      	movs	r1, #1
 80079a8:	fa01 f202 	lsl.w	r2, r1, r2
 80079ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	e008      	b.n	80079c6 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079ba:	f043 0208 	orr.w	r2, r3, #8
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
  }
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	372c      	adds	r7, #44	@ 0x2c
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	08011e50 	.word	0x08011e50

080079d8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079ea:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d002      	beq.n	80079f8 <HAL_FDCAN_ActivateNotification+0x20>
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d155      	bne.n	8007aa4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d108      	bne.n	8007a18 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a16:	e014      	b.n	8007a42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	4013      	ands	r3, r2
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d108      	bne.n	8007a3a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0202 	orr.w	r2, r2, #2
 8007a36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a38:	e003      	b.n	8007a42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2203      	movs	r2, #3
 8007a40:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d009      	beq.n	8007a60 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac4 <HAL_FDCAN_ActivateNotification+0xec>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	6812      	ldr	r2, [r2, #0]
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a92:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007a94:	695a      	ldr	r2, [r3, #20]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	0f9b      	lsrs	r3, r3, #30
 8007a9a:	490b      	ldr	r1, [pc, #44]	@ (8007ac8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e008      	b.n	8007ab6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007aaa:	f043 0202 	orr.w	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
  }
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	3fcfffff 	.word	0x3fcfffff
 8007ac8:	4000a800 	.word	0x4000a800

08007acc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b096      	sub	sp, #88	@ 0x58
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007ad4:	4b9a      	ldr	r3, [pc, #616]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	079b      	lsls	r3, r3, #30
 8007ada:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007adc:	4b98      	ldr	r3, [pc, #608]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	079b      	lsls	r3, r3, #30
 8007ae2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007af2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007afc:	4013      	ands	r3, r2
 8007afe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b14:	4013      	ands	r3, r2
 8007b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b36:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b44:	4013      	ands	r3, r2
 8007b46:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8007b52:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b90:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b92:	4b6b      	ldr	r3, [pc, #428]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa54 	bl	8008046 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ba0:	0a9b      	lsrs	r3, r3, #10
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01d      	beq.n	8007be6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bac:	0a9b      	lsrs	r3, r3, #10
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d017      	beq.n	8007be6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bbe:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bca:	4013      	ands	r3, r2
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bd8:	4b59      	ldr	r3, [pc, #356]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007bde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa07 	bl	8007ff4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00d      	beq.n	8007c08 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bf2:	4b54      	ldr	r3, [pc, #336]	@ (8007d44 <HAL_FDCAN_IRQHandler+0x278>)
 8007bf4:	400b      	ands	r3, r1
 8007bf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bf8:	4a51      	ldr	r2, [pc, #324]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bfc:	0f9b      	lsrs	r3, r3, #30
 8007bfe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9c0 	bl	8007f88 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00d      	beq.n	8007c2a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c14:	4b4b      	ldr	r3, [pc, #300]	@ (8007d44 <HAL_FDCAN_IRQHandler+0x278>)
 8007c16:	400b      	ands	r3, r1
 8007c18:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c1a:	4a49      	ldr	r2, [pc, #292]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007c1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c1e:	0f9b      	lsrs	r3, r3, #30
 8007c20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007c22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f9ba 	bl	8007f9e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c36:	4b43      	ldr	r3, [pc, #268]	@ (8007d44 <HAL_FDCAN_IRQHandler+0x278>)
 8007c38:	400b      	ands	r3, r1
 8007c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c3c:	4a40      	ldr	r2, [pc, #256]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c40:	0f9b      	lsrs	r3, r3, #30
 8007c42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007c44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7f9 fd38 	bl	80016bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00d      	beq.n	8007c6e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c58:	4b3a      	ldr	r3, [pc, #232]	@ (8007d44 <HAL_FDCAN_IRQHandler+0x278>)
 8007c5a:	400b      	ands	r3, r1
 8007c5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c5e:	4a38      	ldr	r2, [pc, #224]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c62:	0f9b      	lsrs	r3, r3, #30
 8007c64:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007c66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9a3 	bl	8007fb4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c70:	0adb      	lsrs	r3, r3, #11
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d010      	beq.n	8007c9c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	0adb      	lsrs	r3, r3, #11
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c90:	4b2b      	ldr	r3, [pc, #172]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f997 	bl	8007fca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007caa:	0a5b      	lsrs	r3, r3, #9
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007cbc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc8:	4013      	ands	r3, r2
 8007cca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f97d 	bl	8007fde <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce6:	0cdb      	lsrs	r3, r3, #19
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d010      	beq.n	8007d12 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf2:	0cdb      	lsrs	r3, r3, #19
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007d04:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d06:	4b0e      	ldr	r3, [pc, #56]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f97c 	bl	800800a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d016      	beq.n	8007d4c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d20:	0c1b      	lsrs	r3, r3, #16
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d010      	beq.n	8007d4c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007d32:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d34:	4b02      	ldr	r3, [pc, #8]	@ (8007d40 <HAL_FDCAN_IRQHandler+0x274>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	e004      	b.n	8007d48 <HAL_FDCAN_IRQHandler+0x27c>
 8007d3e:	bf00      	nop
 8007d40:	4000a800 	.word	0x4000a800
 8007d44:	3fcfffff 	.word	0x3fcfffff
 8007d48:	f000 f969 	bl	800801e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d4e:	0c9b      	lsrs	r3, r3, #18
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d5a:	0c9b      	lsrs	r3, r3, #18
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007d6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d6e:	4b83      	ldr	r3, [pc, #524]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f95c 	bl	8008032 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d7c:	0c5b      	lsrs	r3, r3, #17
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d015      	beq.n	8007db2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d88:	0c5b      	lsrs	r3, r3, #17
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00f      	beq.n	8007db2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007d9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d9c:	4b77      	ldr	r3, [pc, #476]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007da8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00d      	beq.n	8007dd4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dbe:	4b70      	ldr	r3, [pc, #448]	@ (8007f80 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007dc0:	400b      	ands	r3, r1
 8007dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007dc8:	0f9b      	lsrs	r3, r3, #30
 8007dca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7f9 fd78 	bl	80018c4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d011      	beq.n	8007dfe <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007de0:	4b67      	ldr	r3, [pc, #412]	@ (8007f80 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007de2:	400b      	ands	r3, r1
 8007de4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007de6:	4a65      	ldr	r2, [pc, #404]	@ (8007f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8007de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dea:	0f9b      	lsrs	r3, r3, #30
 8007dec:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a60      	ldr	r2, [pc, #384]	@ (8007f84 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	f040 80ac 	bne.w	8007f62 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 80a4 	beq.w	8007f62 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e2e:	4013      	ands	r3, r2
 8007e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e46:	4013      	ands	r3, r2
 8007e48:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e5e:	4013      	ands	r3, r2
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007e6c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	6a3a      	ldr	r2, [r7, #32]
 8007e76:	4013      	ands	r3, r2
 8007e78:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8007e84:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e98:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007eb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8db 	bl	800806e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ec4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f8db 	bl	8008084 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	099b      	lsrs	r3, r3, #6
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01a      	beq.n	8007f10 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	099b      	lsrs	r3, r3, #6
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007efc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2240      	movs	r2, #64	@ 0x40
 8007f04:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	6939      	ldr	r1, [r7, #16]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f8c5 	bl	800809a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8c6 	bl	80080b2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00b      	beq.n	8007f44 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	6a3a      	ldr	r2, [r7, #32]
 8007f32:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f874 	bl	800805a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007f72:	bf00      	nop
 8007f74:	3758      	adds	r7, #88	@ 0x58
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	4000a800 	.word	0x4000a800
 8007f80:	3fcfffff 	.word	0x3fcfffff
 8007f84:	4000a000 	.word	0x4000a000

08007f88 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800803a:	bf00      	nop
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80080de:	4ba7      	ldr	r3, [pc, #668]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	0091      	lsls	r1, r2, #2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	430b      	orrs	r3, r1
 80080ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080f8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008100:	041a      	lsls	r2, r3, #16
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	4413      	add	r3, r2
 8008114:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800811e:	4b97      	ldr	r3, [pc, #604]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008120:	4013      	ands	r3, r2
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0091      	lsls	r1, r2, #2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	430b      	orrs	r3, r1
 800812c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008138:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008140:	041a      	lsls	r2, r3, #16
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008160:	4b86      	ldr	r3, [pc, #536]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008162:	4013      	ands	r3, r2
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	0091      	lsls	r1, r2, #2
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	430b      	orrs	r3, r1
 800816e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800817a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008182:	041a      	lsls	r2, r3, #16
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80081a8:	4b74      	ldr	r3, [pc, #464]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081aa:	4013      	ands	r3, r2
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	0091      	lsls	r1, r2, #2
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	430b      	orrs	r3, r1
 80081b6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80081c2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ca:	041a      	lsls	r2, r3, #16
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081de:	fb02 f303 	mul.w	r3, r2, r3
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80081f0:	4b62      	ldr	r3, [pc, #392]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081f2:	4013      	ands	r3, r2
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	0091      	lsls	r1, r2, #2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	430b      	orrs	r3, r1
 80081fe:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800821c:	4b57      	ldr	r3, [pc, #348]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800821e:	4013      	ands	r3, r2
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	0091      	lsls	r1, r2, #2
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	430b      	orrs	r3, r1
 800822a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008236:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823e:	041a      	lsls	r2, r3, #16
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4413      	add	r3, r2
 8008254:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800825e:	4b47      	ldr	r3, [pc, #284]	@ (800837c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008260:	4013      	ands	r3, r2
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	0091      	lsls	r1, r2, #2
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	430b      	orrs	r3, r1
 800826c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008278:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008280:	041a      	lsls	r2, r3, #16
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008294:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800829c:	061a      	lsls	r2, r3, #24
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ac:	4b34      	ldr	r3, [pc, #208]	@ (8008380 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80082ae:	4413      	add	r3, r2
 80082b0:	009a      	lsls	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	441a      	add	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	441a      	add	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80082e2:	fb01 f303 	mul.w	r3, r1, r3
 80082e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80082e8:	441a      	add	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008300:	441a      	add	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008318:	441a      	add	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	441a      	add	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	441a      	add	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800835e:	fb01 f303 	mul.w	r3, r1, r3
 8008362:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008372:	4a04      	ldr	r2, [pc, #16]	@ (8008384 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d915      	bls.n	80083a4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008378:	e006      	b.n	8008388 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800837a:	bf00      	nop
 800837c:	ffff0003 	.word	0xffff0003
 8008380:	10002b00 	.word	0x10002b00
 8008384:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800838e:	f043 0220 	orr.w	r2, r3, #32
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2203      	movs	r2, #3
 800839c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e010      	b.n	80083c6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	e005      	b.n	80083b8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3304      	adds	r3, #4
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d3f3      	bcc.n	80083ac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b089      	sub	sp, #36	@ 0x24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80083f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	e00a      	b.n	8008416 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008408:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800840e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008410:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008414:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008420:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008426:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800842c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	3304      	adds	r3, #4
 8008458:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	3304      	adds	r3, #4
 8008464:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e020      	b.n	80084ae <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	3303      	adds	r3, #3
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3302      	adds	r3, #2
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	440b      	add	r3, r1
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008484:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	3301      	adds	r3, #1
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	440b      	add	r3, r1
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008492:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	440a      	add	r2, r1
 800849a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800849c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	3304      	adds	r3, #4
 80084a6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	3304      	adds	r3, #4
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	4a06      	ldr	r2, [pc, #24]	@ (80084cc <FDCAN_CopyMessageToRAM+0xf8>)
 80084b4:	5cd3      	ldrb	r3, [r2, r3]
 80084b6:	461a      	mov	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d3d6      	bcc.n	800846c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	3724      	adds	r7, #36	@ 0x24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	08011e50 	.word	0x08011e50

080084d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	@ 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084de:	4b86      	ldr	r3, [pc, #536]	@ (80086f8 <HAL_GPIO_Init+0x228>)
 80084e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084e2:	e18c      	b.n	80087fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	2101      	movs	r1, #1
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	fa01 f303 	lsl.w	r3, r1, r3
 80084f0:	4013      	ands	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 817e 	beq.w	80087f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b01      	cmp	r3, #1
 8008506:	d005      	beq.n	8008514 <HAL_GPIO_Init+0x44>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f003 0303 	and.w	r3, r3, #3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d130      	bne.n	8008576 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	2203      	movs	r2, #3
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	43db      	mvns	r3, r3
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	4013      	ands	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	4313      	orrs	r3, r2
 800853c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800854a:	2201      	movs	r2, #1
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	fa02 f303 	lsl.w	r3, r2, r3
 8008552:	43db      	mvns	r3, r3
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	4013      	ands	r3, r2
 8008558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	091b      	lsrs	r3, r3, #4
 8008560:	f003 0201 	and.w	r2, r3, #1
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	fa02 f303 	lsl.w	r3, r2, r3
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	4313      	orrs	r3, r2
 800856e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	2b03      	cmp	r3, #3
 8008580:	d017      	beq.n	80085b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	2203      	movs	r2, #3
 800858e:	fa02 f303 	lsl.w	r3, r2, r3
 8008592:	43db      	mvns	r3, r3
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	4013      	ands	r3, r2
 8008598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	fa02 f303 	lsl.w	r3, r2, r3
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d123      	bne.n	8008606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	08da      	lsrs	r2, r3, #3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3208      	adds	r2, #8
 80085c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	220f      	movs	r2, #15
 80085d6:	fa02 f303 	lsl.w	r3, r2, r3
 80085da:	43db      	mvns	r3, r3
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	4013      	ands	r3, r2
 80085e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f003 0307 	and.w	r3, r3, #7
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	08da      	lsrs	r2, r3, #3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3208      	adds	r2, #8
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	2203      	movs	r2, #3
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	43db      	mvns	r3, r3
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	4013      	ands	r3, r2
 800861c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f003 0203 	and.w	r2, r3, #3
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	fa02 f303 	lsl.w	r3, r2, r3
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	4313      	orrs	r3, r2
 8008632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80d8 	beq.w	80087f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008648:	4b2c      	ldr	r3, [pc, #176]	@ (80086fc <HAL_GPIO_Init+0x22c>)
 800864a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800864e:	4a2b      	ldr	r2, [pc, #172]	@ (80086fc <HAL_GPIO_Init+0x22c>)
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008658:	4b28      	ldr	r3, [pc, #160]	@ (80086fc <HAL_GPIO_Init+0x22c>)
 800865a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008666:	4a26      	ldr	r2, [pc, #152]	@ (8008700 <HAL_GPIO_Init+0x230>)
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	089b      	lsrs	r3, r3, #2
 800866c:	3302      	adds	r3, #2
 800866e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	220f      	movs	r2, #15
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	43db      	mvns	r3, r3
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	4013      	ands	r3, r2
 8008688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1d      	ldr	r2, [pc, #116]	@ (8008704 <HAL_GPIO_Init+0x234>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d04a      	beq.n	8008728 <HAL_GPIO_Init+0x258>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1c      	ldr	r2, [pc, #112]	@ (8008708 <HAL_GPIO_Init+0x238>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d02b      	beq.n	80086f2 <HAL_GPIO_Init+0x222>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1b      	ldr	r2, [pc, #108]	@ (800870c <HAL_GPIO_Init+0x23c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d025      	beq.n	80086ee <HAL_GPIO_Init+0x21e>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008710 <HAL_GPIO_Init+0x240>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01f      	beq.n	80086ea <HAL_GPIO_Init+0x21a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a19      	ldr	r2, [pc, #100]	@ (8008714 <HAL_GPIO_Init+0x244>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d019      	beq.n	80086e6 <HAL_GPIO_Init+0x216>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a18      	ldr	r2, [pc, #96]	@ (8008718 <HAL_GPIO_Init+0x248>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d013      	beq.n	80086e2 <HAL_GPIO_Init+0x212>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a17      	ldr	r2, [pc, #92]	@ (800871c <HAL_GPIO_Init+0x24c>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00d      	beq.n	80086de <HAL_GPIO_Init+0x20e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a16      	ldr	r2, [pc, #88]	@ (8008720 <HAL_GPIO_Init+0x250>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d007      	beq.n	80086da <HAL_GPIO_Init+0x20a>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <HAL_GPIO_Init+0x254>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d101      	bne.n	80086d6 <HAL_GPIO_Init+0x206>
 80086d2:	2309      	movs	r3, #9
 80086d4:	e029      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086d6:	230a      	movs	r3, #10
 80086d8:	e027      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086da:	2307      	movs	r3, #7
 80086dc:	e025      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086de:	2306      	movs	r3, #6
 80086e0:	e023      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086e2:	2305      	movs	r3, #5
 80086e4:	e021      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086e6:	2304      	movs	r3, #4
 80086e8:	e01f      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086ea:	2303      	movs	r3, #3
 80086ec:	e01d      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e01b      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e019      	b.n	800872a <HAL_GPIO_Init+0x25a>
 80086f6:	bf00      	nop
 80086f8:	58000080 	.word	0x58000080
 80086fc:	58024400 	.word	0x58024400
 8008700:	58000400 	.word	0x58000400
 8008704:	58020000 	.word	0x58020000
 8008708:	58020400 	.word	0x58020400
 800870c:	58020800 	.word	0x58020800
 8008710:	58020c00 	.word	0x58020c00
 8008714:	58021000 	.word	0x58021000
 8008718:	58021400 	.word	0x58021400
 800871c:	58021800 	.word	0x58021800
 8008720:	58021c00 	.word	0x58021c00
 8008724:	58022400 	.word	0x58022400
 8008728:	2300      	movs	r3, #0
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	f002 0203 	and.w	r2, r2, #3
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	4093      	lsls	r3, r2
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4313      	orrs	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800873a:	4938      	ldr	r1, [pc, #224]	@ (800881c <HAL_GPIO_Init+0x34c>)
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	089b      	lsrs	r3, r3, #2
 8008740:	3302      	adds	r3, #2
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800876e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	43db      	mvns	r3, r3
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	4013      	ands	r3, r2
 8008786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800879c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	43db      	mvns	r3, r3
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	4013      	ands	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	43db      	mvns	r3, r3
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	4013      	ands	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	3301      	adds	r3, #1
 80087fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	fa22 f303 	lsr.w	r3, r2, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	f47f ae6b 	bne.w	80084e4 <HAL_GPIO_Init+0x14>
  }
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	3724      	adds	r7, #36	@ 0x24
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	58000400 	.word	0x58000400

08008820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	887b      	ldrh	r3, [r7, #2]
 8008832:	4013      	ands	r3, r2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]
 800883c:	e001      	b.n	8008842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
 800885c:	4613      	mov	r3, r2
 800885e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008860:	787b      	ldrb	r3, [r7, #1]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008866:	887a      	ldrh	r2, [r7, #2]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800886c:	e003      	b.n	8008876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800886e:	887b      	ldrh	r3, [r7, #2]
 8008870:	041a      	lsls	r2, r3, #16
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	619a      	str	r2, [r3, #24]
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
	...

08008884 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800888c:	4b19      	ldr	r3, [pc, #100]	@ (80088f4 <HAL_PWREx_ConfigSupply+0x70>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b04      	cmp	r3, #4
 8008896:	d00a      	beq.n	80088ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008898:	4b16      	ldr	r3, [pc, #88]	@ (80088f4 <HAL_PWREx_ConfigSupply+0x70>)
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d001      	beq.n	80088aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e01f      	b.n	80088ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e01d      	b.n	80088ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80088ae:	4b11      	ldr	r3, [pc, #68]	@ (80088f4 <HAL_PWREx_ConfigSupply+0x70>)
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f023 0207 	bic.w	r2, r3, #7
 80088b6:	490f      	ldr	r1, [pc, #60]	@ (80088f4 <HAL_PWREx_ConfigSupply+0x70>)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80088be:	f7fa f993 	bl	8002be8 <HAL_GetTick>
 80088c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088c4:	e009      	b.n	80088da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80088c6:	f7fa f98f 	bl	8002be8 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088d4:	d901      	bls.n	80088da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e007      	b.n	80088ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088da:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <HAL_PWREx_ConfigSupply+0x70>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088e6:	d1ee      	bne.n	80088c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	58024800 	.word	0x58024800

080088f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	@ 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e3c8      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 8087 	beq.w	8008a26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008918:	4b88      	ldr	r3, [pc, #544]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008922:	4b86      	ldr	r3, [pc, #536]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	2b10      	cmp	r3, #16
 800892c:	d007      	beq.n	800893e <HAL_RCC_OscConfig+0x46>
 800892e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008930:	2b18      	cmp	r3, #24
 8008932:	d110      	bne.n	8008956 <HAL_RCC_OscConfig+0x5e>
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d10b      	bne.n	8008956 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800893e:	4b7f      	ldr	r3, [pc, #508]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d06c      	beq.n	8008a24 <HAL_RCC_OscConfig+0x12c>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d168      	bne.n	8008a24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e3a2      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800895e:	d106      	bne.n	800896e <HAL_RCC_OscConfig+0x76>
 8008960:	4b76      	ldr	r3, [pc, #472]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a75      	ldr	r2, [pc, #468]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	e02e      	b.n	80089cc <HAL_RCC_OscConfig+0xd4>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10c      	bne.n	8008990 <HAL_RCC_OscConfig+0x98>
 8008976:	4b71      	ldr	r3, [pc, #452]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a70      	ldr	r2, [pc, #448]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 800897c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	4b6e      	ldr	r3, [pc, #440]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a6d      	ldr	r2, [pc, #436]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e01d      	b.n	80089cc <HAL_RCC_OscConfig+0xd4>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008998:	d10c      	bne.n	80089b4 <HAL_RCC_OscConfig+0xbc>
 800899a:	4b68      	ldr	r3, [pc, #416]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a67      	ldr	r2, [pc, #412]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	4b65      	ldr	r3, [pc, #404]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a64      	ldr	r2, [pc, #400]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	e00b      	b.n	80089cc <HAL_RCC_OscConfig+0xd4>
 80089b4:	4b61      	ldr	r3, [pc, #388]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a60      	ldr	r2, [pc, #384]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	4b5e      	ldr	r3, [pc, #376]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a5d      	ldr	r2, [pc, #372]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d013      	beq.n	80089fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d4:	f7fa f908 	bl	8002be8 <HAL_GetTick>
 80089d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089da:	e008      	b.n	80089ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089dc:	f7fa f904 	bl	8002be8 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b64      	cmp	r3, #100	@ 0x64
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e356      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089ee:	4b53      	ldr	r3, [pc, #332]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0f0      	beq.n	80089dc <HAL_RCC_OscConfig+0xe4>
 80089fa:	e014      	b.n	8008a26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fc:	f7fa f8f4 	bl	8002be8 <HAL_GetTick>
 8008a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a04:	f7fa f8f0 	bl	8002be8 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b64      	cmp	r3, #100	@ 0x64
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e342      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a16:	4b49      	ldr	r3, [pc, #292]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <HAL_RCC_OscConfig+0x10c>
 8008a22:	e000      	b.n	8008a26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 808c 	beq.w	8008b4c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a34:	4b41      	ldr	r3, [pc, #260]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <HAL_RCC_OscConfig+0x162>
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	2b18      	cmp	r3, #24
 8008a4e:	d137      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x1c8>
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d132      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a5a:	4b38      	ldr	r3, [pc, #224]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <HAL_RCC_OscConfig+0x17a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e314      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a72:	4b32      	ldr	r3, [pc, #200]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f023 0219 	bic.w	r2, r3, #25
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	492f      	ldr	r1, [pc, #188]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a84:	f7fa f8b0 	bl	8002be8 <HAL_GetTick>
 8008a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a8c:	f7fa f8ac 	bl	8002be8 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e2fe      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a9e:	4b27      	ldr	r3, [pc, #156]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0f0      	beq.n	8008a8c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aaa:	4b24      	ldr	r3, [pc, #144]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	061b      	lsls	r3, r3, #24
 8008ab8:	4920      	ldr	r1, [pc, #128]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008abe:	e045      	b.n	8008b4c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d026      	beq.n	8008b16 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f023 0219 	bic.w	r2, r3, #25
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	4919      	ldr	r1, [pc, #100]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ada:	f7fa f885 	bl	8002be8 <HAL_GetTick>
 8008ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ae0:	e008      	b.n	8008af4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ae2:	f7fa f881 	bl	8002be8 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e2d3      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008af4:	4b11      	ldr	r3, [pc, #68]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f0      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b00:	4b0e      	ldr	r3, [pc, #56]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	061b      	lsls	r3, r3, #24
 8008b0e:	490b      	ldr	r1, [pc, #44]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	604b      	str	r3, [r1, #4]
 8008b14:	e01a      	b.n	8008b4c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b16:	4b09      	ldr	r3, [pc, #36]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <HAL_RCC_OscConfig+0x244>)
 8008b1c:	f023 0301 	bic.w	r3, r3, #1
 8008b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b22:	f7fa f861 	bl	8002be8 <HAL_GetTick>
 8008b26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b28:	e00a      	b.n	8008b40 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b2a:	f7fa f85d 	bl	8002be8 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d903      	bls.n	8008b40 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e2af      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
 8008b3c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b40:	4b96      	ldr	r3, [pc, #600]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ee      	bne.n	8008b2a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d06a      	beq.n	8008c2e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b58:	4b90      	ldr	r3, [pc, #576]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b62:	4b8e      	ldr	r3, [pc, #568]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d007      	beq.n	8008b7e <HAL_RCC_OscConfig+0x286>
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	2b18      	cmp	r3, #24
 8008b72:	d11b      	bne.n	8008bac <HAL_RCC_OscConfig+0x2b4>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d116      	bne.n	8008bac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b7e:	4b87      	ldr	r3, [pc, #540]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <HAL_RCC_OscConfig+0x29e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	2b80      	cmp	r3, #128	@ 0x80
 8008b90:	d001      	beq.n	8008b96 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e282      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b96:	4b81      	ldr	r3, [pc, #516]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	061b      	lsls	r3, r3, #24
 8008ba4:	497d      	ldr	r1, [pc, #500]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008baa:	e040      	b.n	8008c2e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d023      	beq.n	8008bfc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bb4:	4b79      	ldr	r3, [pc, #484]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a78      	ldr	r2, [pc, #480]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fa f812 	bl	8002be8 <HAL_GetTick>
 8008bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bc8:	f7fa f80e 	bl	8002be8 <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e260      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bda:	4b70      	ldr	r3, [pc, #448]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0f0      	beq.n	8008bc8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008be6:	4b6d      	ldr	r3, [pc, #436]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	061b      	lsls	r3, r3, #24
 8008bf4:	4969      	ldr	r1, [pc, #420]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60cb      	str	r3, [r1, #12]
 8008bfa:	e018      	b.n	8008c2e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008bfc:	4b67      	ldr	r3, [pc, #412]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a66      	ldr	r2, [pc, #408]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c08:	f7f9 ffee 	bl	8002be8 <HAL_GetTick>
 8008c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c10:	f7f9 ffea 	bl	8002be8 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e23c      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c22:	4b5e      	ldr	r3, [pc, #376]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f0      	bne.n	8008c10 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d036      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d019      	beq.n	8008c76 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c42:	4b56      	ldr	r3, [pc, #344]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c46:	4a55      	ldr	r2, [pc, #340]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c4e:	f7f9 ffcb 	bl	8002be8 <HAL_GetTick>
 8008c52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c54:	e008      	b.n	8008c68 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c56:	f7f9 ffc7 	bl	8002be8 <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d901      	bls.n	8008c68 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e219      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c68:	4b4c      	ldr	r3, [pc, #304]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c6c:	f003 0302 	and.w	r3, r3, #2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0f0      	beq.n	8008c56 <HAL_RCC_OscConfig+0x35e>
 8008c74:	e018      	b.n	8008ca8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c76:	4b49      	ldr	r3, [pc, #292]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c7a:	4a48      	ldr	r2, [pc, #288]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c7c:	f023 0301 	bic.w	r3, r3, #1
 8008c80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c82:	f7f9 ffb1 	bl	8002be8 <HAL_GetTick>
 8008c86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c8a:	f7f9 ffad 	bl	8002be8 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e1ff      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1f0      	bne.n	8008c8a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d036      	beq.n	8008d22 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d019      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cbc:	4b37      	ldr	r3, [pc, #220]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a36      	ldr	r2, [pc, #216]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008cc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008cc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cc8:	f7f9 ff8e 	bl	8002be8 <HAL_GetTick>
 8008ccc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cd0:	f7f9 ff8a 	bl	8002be8 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e1dc      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x3d8>
 8008cee:	e018      	b.n	8008d22 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a29      	ldr	r2, [pc, #164]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cfa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cfc:	f7f9 ff74 	bl	8002be8 <HAL_GetTick>
 8008d00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d04:	f7f9 ff70 	bl	8002be8 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e1c2      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d16:	4b21      	ldr	r3, [pc, #132]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f0      	bne.n	8008d04 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 8086 	beq.w	8008e3c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d30:	4b1b      	ldr	r3, [pc, #108]	@ (8008da0 <HAL_RCC_OscConfig+0x4a8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a1a      	ldr	r2, [pc, #104]	@ (8008da0 <HAL_RCC_OscConfig+0x4a8>)
 8008d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d3c:	f7f9 ff54 	bl	8002be8 <HAL_GetTick>
 8008d40:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d42:	e008      	b.n	8008d56 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d44:	f7f9 ff50 	bl	8002be8 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b64      	cmp	r3, #100	@ 0x64
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e1a2      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d56:	4b12      	ldr	r3, [pc, #72]	@ (8008da0 <HAL_RCC_OscConfig+0x4a8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f0      	beq.n	8008d44 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d106      	bne.n	8008d78 <HAL_RCC_OscConfig+0x480>
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d70:	f043 0301 	orr.w	r3, r3, #1
 8008d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d76:	e032      	b.n	8008dde <HAL_RCC_OscConfig+0x4e6>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d111      	bne.n	8008da4 <HAL_RCC_OscConfig+0x4ac>
 8008d80:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d84:	4a05      	ldr	r2, [pc, #20]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d86:	f023 0301 	bic.w	r3, r3, #1
 8008d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d8c:	4b03      	ldr	r3, [pc, #12]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d90:	4a02      	ldr	r2, [pc, #8]	@ (8008d9c <HAL_RCC_OscConfig+0x4a4>)
 8008d92:	f023 0304 	bic.w	r3, r3, #4
 8008d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d98:	e021      	b.n	8008dde <HAL_RCC_OscConfig+0x4e6>
 8008d9a:	bf00      	nop
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	58024800 	.word	0x58024800
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	2b05      	cmp	r3, #5
 8008daa:	d10c      	bne.n	8008dc6 <HAL_RCC_OscConfig+0x4ce>
 8008dac:	4b83      	ldr	r3, [pc, #524]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008db0:	4a82      	ldr	r2, [pc, #520]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008db2:	f043 0304 	orr.w	r3, r3, #4
 8008db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008db8:	4b80      	ldr	r3, [pc, #512]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dbc:	4a7f      	ldr	r2, [pc, #508]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dc4:	e00b      	b.n	8008dde <HAL_RCC_OscConfig+0x4e6>
 8008dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dca:	4a7c      	ldr	r2, [pc, #496]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd6:	4a79      	ldr	r2, [pc, #484]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008dd8:	f023 0304 	bic.w	r3, r3, #4
 8008ddc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d015      	beq.n	8008e12 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de6:	f7f9 feff 	bl	8002be8 <HAL_GetTick>
 8008dea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dec:	e00a      	b.n	8008e04 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dee:	f7f9 fefb 	bl	8002be8 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e14b      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e04:	4b6d      	ldr	r3, [pc, #436]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0ee      	beq.n	8008dee <HAL_RCC_OscConfig+0x4f6>
 8008e10:	e014      	b.n	8008e3c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e12:	f7f9 fee9 	bl	8002be8 <HAL_GetTick>
 8008e16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e18:	e00a      	b.n	8008e30 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e1a:	f7f9 fee5 	bl	8002be8 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e135      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e30:	4b62      	ldr	r3, [pc, #392]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1ee      	bne.n	8008e1a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 812a 	beq.w	800909a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e46:	4b5d      	ldr	r3, [pc, #372]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e4e:	2b18      	cmp	r3, #24
 8008e50:	f000 80ba 	beq.w	8008fc8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	f040 8095 	bne.w	8008f88 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5e:	4b57      	ldr	r3, [pc, #348]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a56      	ldr	r2, [pc, #344]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6a:	f7f9 febd 	bl	8002be8 <HAL_GetTick>
 8008e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e70:	e008      	b.n	8008e84 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e72:	f7f9 feb9 	bl	8002be8 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d901      	bls.n	8008e84 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e10b      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e84:	4b4d      	ldr	r3, [pc, #308]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f0      	bne.n	8008e72 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e90:	4b4a      	ldr	r3, [pc, #296]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e94:	4b4a      	ldr	r3, [pc, #296]	@ (8008fc0 <HAL_RCC_OscConfig+0x6c8>)
 8008e96:	4013      	ands	r3, r2
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ea0:	0112      	lsls	r2, r2, #4
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	4945      	ldr	r1, [pc, #276]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	628b      	str	r3, [r1, #40]	@ 0x28
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	025b      	lsls	r3, r3, #9
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	041b      	lsls	r3, r3, #16
 8008ec8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	061b      	lsls	r3, r3, #24
 8008ed6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008eda:	4938      	ldr	r1, [pc, #224]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ee0:	4b36      	ldr	r3, [pc, #216]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	4a35      	ldr	r2, [pc, #212]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008ee6:	f023 0301 	bic.w	r3, r3, #1
 8008eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008eec:	4b33      	ldr	r3, [pc, #204]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ef0:	4b34      	ldr	r3, [pc, #208]	@ (8008fc4 <HAL_RCC_OscConfig+0x6cc>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ef8:	00d2      	lsls	r2, r2, #3
 8008efa:	4930      	ldr	r1, [pc, #192]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f00:	4b2e      	ldr	r3, [pc, #184]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f04:	f023 020c 	bic.w	r2, r3, #12
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0c:	492b      	ldr	r1, [pc, #172]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f12:	4b2a      	ldr	r3, [pc, #168]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f16:	f023 0202 	bic.w	r2, r3, #2
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1e:	4927      	ldr	r1, [pc, #156]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f24:	4b25      	ldr	r3, [pc, #148]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	4a24      	ldr	r2, [pc, #144]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f30:	4b22      	ldr	r3, [pc, #136]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f34:	4a21      	ldr	r2, [pc, #132]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f40:	4a1e      	ldr	r2, [pc, #120]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f48:	4b1c      	ldr	r3, [pc, #112]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f4e:	f043 0301 	orr.w	r3, r3, #1
 8008f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f54:	4b19      	ldr	r3, [pc, #100]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a18      	ldr	r2, [pc, #96]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f60:	f7f9 fe42 	bl	8002be8 <HAL_GetTick>
 8008f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f66:	e008      	b.n	8008f7a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f68:	f7f9 fe3e 	bl	8002be8 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e090      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f7a:	4b10      	ldr	r3, [pc, #64]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0f0      	beq.n	8008f68 <HAL_RCC_OscConfig+0x670>
 8008f86:	e088      	b.n	800909a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f88:	4b0c      	ldr	r3, [pc, #48]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7f9 fe28 	bl	8002be8 <HAL_GetTick>
 8008f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9c:	f7f9 fe24 	bl	8002be8 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e076      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fae:	4b03      	ldr	r3, [pc, #12]	@ (8008fbc <HAL_RCC_OscConfig+0x6c4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f0      	bne.n	8008f9c <HAL_RCC_OscConfig+0x6a4>
 8008fba:	e06e      	b.n	800909a <HAL_RCC_OscConfig+0x7a2>
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	fffffc0c 	.word	0xfffffc0c
 8008fc4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fc8:	4b36      	ldr	r3, [pc, #216]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 8008fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fcc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fce:	4b35      	ldr	r3, [pc, #212]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d031      	beq.n	8009040 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f003 0203 	and.w	r2, r3, #3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d12a      	bne.n	8009040 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	091b      	lsrs	r3, r3, #4
 8008fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d122      	bne.n	8009040 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009006:	429a      	cmp	r2, r3
 8009008:	d11a      	bne.n	8009040 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	0a5b      	lsrs	r3, r3, #9
 800900e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009016:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009018:	429a      	cmp	r2, r3
 800901a:	d111      	bne.n	8009040 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	0c1b      	lsrs	r3, r3, #16
 8009020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009028:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800902a:	429a      	cmp	r2, r3
 800902c:	d108      	bne.n	8009040 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	0e1b      	lsrs	r3, r3, #24
 8009032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800903c:	429a      	cmp	r2, r3
 800903e:	d001      	beq.n	8009044 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e02b      	b.n	800909c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009044:	4b17      	ldr	r3, [pc, #92]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 8009046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009048:	08db      	lsrs	r3, r3, #3
 800904a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800904e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	429a      	cmp	r2, r3
 8009058:	d01f      	beq.n	800909a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800905a:	4b12      	ldr	r3, [pc, #72]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	4a11      	ldr	r2, [pc, #68]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 8009060:	f023 0301 	bic.w	r3, r3, #1
 8009064:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009066:	f7f9 fdbf 	bl	8002be8 <HAL_GetTick>
 800906a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800906c:	bf00      	nop
 800906e:	f7f9 fdbb 	bl	8002be8 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	4293      	cmp	r3, r2
 8009078:	d0f9      	beq.n	800906e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800907a:	4b0a      	ldr	r3, [pc, #40]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 800907c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800907e:	4b0a      	ldr	r3, [pc, #40]	@ (80090a8 <HAL_RCC_OscConfig+0x7b0>)
 8009080:	4013      	ands	r3, r2
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009086:	00d2      	lsls	r2, r2, #3
 8009088:	4906      	ldr	r1, [pc, #24]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 800908a:	4313      	orrs	r3, r2
 800908c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800908e:	4b05      	ldr	r3, [pc, #20]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 8009090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009092:	4a04      	ldr	r2, [pc, #16]	@ (80090a4 <HAL_RCC_OscConfig+0x7ac>)
 8009094:	f043 0301 	orr.w	r3, r3, #1
 8009098:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3730      	adds	r7, #48	@ 0x30
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	58024400 	.word	0x58024400
 80090a8:	ffff0007 	.word	0xffff0007

080090ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e19c      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090c0:	4b8a      	ldr	r3, [pc, #552]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d910      	bls.n	80090f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ce:	4b87      	ldr	r3, [pc, #540]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f023 020f 	bic.w	r2, r3, #15
 80090d6:	4985      	ldr	r1, [pc, #532]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	4313      	orrs	r3, r2
 80090dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090de:	4b83      	ldr	r3, [pc, #524]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d001      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e184      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0304 	and.w	r3, r3, #4
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d010      	beq.n	800911e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	4b7b      	ldr	r3, [pc, #492]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009108:	429a      	cmp	r2, r3
 800910a:	d908      	bls.n	800911e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800910c:	4b78      	ldr	r3, [pc, #480]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	4975      	ldr	r1, [pc, #468]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800911a:	4313      	orrs	r3, r2
 800911c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d010      	beq.n	800914c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695a      	ldr	r2, [r3, #20]
 800912e:	4b70      	ldr	r3, [pc, #448]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009136:	429a      	cmp	r2, r3
 8009138:	d908      	bls.n	800914c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800913a:	4b6d      	ldr	r3, [pc, #436]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	496a      	ldr	r1, [pc, #424]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 8009148:	4313      	orrs	r3, r2
 800914a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0310 	and.w	r3, r3, #16
 8009154:	2b00      	cmp	r3, #0
 8009156:	d010      	beq.n	800917a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699a      	ldr	r2, [r3, #24]
 800915c:	4b64      	ldr	r3, [pc, #400]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009164:	429a      	cmp	r2, r3
 8009166:	d908      	bls.n	800917a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009168:	4b61      	ldr	r3, [pc, #388]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	495e      	ldr	r1, [pc, #376]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 8009176:	4313      	orrs	r3, r2
 8009178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d010      	beq.n	80091a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	69da      	ldr	r2, [r3, #28]
 800918a:	4b59      	ldr	r3, [pc, #356]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009192:	429a      	cmp	r2, r3
 8009194:	d908      	bls.n	80091a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009196:	4b56      	ldr	r3, [pc, #344]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	4953      	ldr	r1, [pc, #332]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d010      	beq.n	80091d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	4b4d      	ldr	r3, [pc, #308]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d908      	bls.n	80091d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c4:	4b4a      	ldr	r3, [pc, #296]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	f023 020f 	bic.w	r2, r3, #15
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	4947      	ldr	r1, [pc, #284]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d055      	beq.n	800928e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091e2:	4b43      	ldr	r3, [pc, #268]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	4940      	ldr	r1, [pc, #256]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d107      	bne.n	800920c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091fc:	4b3c      	ldr	r3, [pc, #240]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d121      	bne.n	800924c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e0f6      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d107      	bne.n	8009224 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009214:	4b36      	ldr	r3, [pc, #216]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d115      	bne.n	800924c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0ea      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d107      	bne.n	800923c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800922c:	4b30      	ldr	r3, [pc, #192]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e0de      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800923c:	4b2c      	ldr	r3, [pc, #176]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e0d6      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800924c:	4b28      	ldr	r3, [pc, #160]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f023 0207 	bic.w	r2, r3, #7
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	4925      	ldr	r1, [pc, #148]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800925a:	4313      	orrs	r3, r2
 800925c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800925e:	f7f9 fcc3 	bl	8002be8 <HAL_GetTick>
 8009262:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009264:	e00a      	b.n	800927c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009266:	f7f9 fcbf 	bl	8002be8 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009274:	4293      	cmp	r3, r2
 8009276:	d901      	bls.n	800927c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e0be      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800927c:	4b1c      	ldr	r3, [pc, #112]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	429a      	cmp	r2, r3
 800928c:	d1eb      	bne.n	8009266 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d010      	beq.n	80092bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	4b14      	ldr	r3, [pc, #80]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d208      	bcs.n	80092bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092aa:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	f023 020f 	bic.w	r2, r3, #15
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	490e      	ldr	r1, [pc, #56]	@ (80092f0 <HAL_RCC_ClockConfig+0x244>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092bc:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 030f 	and.w	r3, r3, #15
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d214      	bcs.n	80092f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ca:	4b08      	ldr	r3, [pc, #32]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f023 020f 	bic.w	r2, r3, #15
 80092d2:	4906      	ldr	r1, [pc, #24]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092da:	4b04      	ldr	r3, [pc, #16]	@ (80092ec <HAL_RCC_ClockConfig+0x240>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	683a      	ldr	r2, [r7, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d005      	beq.n	80092f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e086      	b.n	80093fa <HAL_RCC_ClockConfig+0x34e>
 80092ec:	52002000 	.word	0x52002000
 80092f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d010      	beq.n	8009322 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	4b3f      	ldr	r3, [pc, #252]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800930c:	429a      	cmp	r2, r3
 800930e:	d208      	bcs.n	8009322 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009310:	4b3c      	ldr	r3, [pc, #240]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	4939      	ldr	r1, [pc, #228]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 800931e:	4313      	orrs	r3, r2
 8009320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d010      	beq.n	8009350 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695a      	ldr	r2, [r3, #20]
 8009332:	4b34      	ldr	r3, [pc, #208]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800933a:	429a      	cmp	r2, r3
 800933c:	d208      	bcs.n	8009350 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800933e:	4b31      	ldr	r3, [pc, #196]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	492e      	ldr	r1, [pc, #184]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 800934c:	4313      	orrs	r3, r2
 800934e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0310 	and.w	r3, r3, #16
 8009358:	2b00      	cmp	r3, #0
 800935a:	d010      	beq.n	800937e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699a      	ldr	r2, [r3, #24]
 8009360:	4b28      	ldr	r3, [pc, #160]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009368:	429a      	cmp	r2, r3
 800936a:	d208      	bcs.n	800937e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800936c:	4b25      	ldr	r3, [pc, #148]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	4922      	ldr	r1, [pc, #136]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 800937a:	4313      	orrs	r3, r2
 800937c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d010      	beq.n	80093ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69da      	ldr	r2, [r3, #28]
 800938e:	4b1d      	ldr	r3, [pc, #116]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009396:	429a      	cmp	r2, r3
 8009398:	d208      	bcs.n	80093ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800939a:	4b1a      	ldr	r3, [pc, #104]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	4917      	ldr	r1, [pc, #92]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093ac:	f000 f834 	bl	8009418 <HAL_RCC_GetSysClockFreq>
 80093b0:	4602      	mov	r2, r0
 80093b2:	4b14      	ldr	r3, [pc, #80]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	0a1b      	lsrs	r3, r3, #8
 80093b8:	f003 030f 	and.w	r3, r3, #15
 80093bc:	4912      	ldr	r1, [pc, #72]	@ (8009408 <HAL_RCC_ClockConfig+0x35c>)
 80093be:	5ccb      	ldrb	r3, [r1, r3]
 80093c0:	f003 031f 	and.w	r3, r3, #31
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009404 <HAL_RCC_ClockConfig+0x358>)
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009408 <HAL_RCC_ClockConfig+0x35c>)
 80093d4:	5cd3      	ldrb	r3, [r2, r3]
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
 80093e0:	4a0a      	ldr	r2, [pc, #40]	@ (800940c <HAL_RCC_ClockConfig+0x360>)
 80093e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093e4:	4a0a      	ldr	r2, [pc, #40]	@ (8009410 <HAL_RCC_ClockConfig+0x364>)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80093ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009414 <HAL_RCC_ClockConfig+0x368>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7f9 fbb0 	bl	8002b54 <HAL_InitTick>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	58024400 	.word	0x58024400
 8009408:	08011e38 	.word	0x08011e38
 800940c:	24000010 	.word	0x24000010
 8009410:	2400000c 	.word	0x2400000c
 8009414:	24000014 	.word	0x24000014

08009418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009418:	b480      	push	{r7}
 800941a:	b089      	sub	sp, #36	@ 0x24
 800941c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800941e:	4bb3      	ldr	r3, [pc, #716]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009426:	2b18      	cmp	r3, #24
 8009428:	f200 8155 	bhi.w	80096d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800942c:	a201      	add	r2, pc, #4	@ (adr r2, 8009434 <HAL_RCC_GetSysClockFreq+0x1c>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	08009499 	.word	0x08009499
 8009438:	080096d7 	.word	0x080096d7
 800943c:	080096d7 	.word	0x080096d7
 8009440:	080096d7 	.word	0x080096d7
 8009444:	080096d7 	.word	0x080096d7
 8009448:	080096d7 	.word	0x080096d7
 800944c:	080096d7 	.word	0x080096d7
 8009450:	080096d7 	.word	0x080096d7
 8009454:	080094bf 	.word	0x080094bf
 8009458:	080096d7 	.word	0x080096d7
 800945c:	080096d7 	.word	0x080096d7
 8009460:	080096d7 	.word	0x080096d7
 8009464:	080096d7 	.word	0x080096d7
 8009468:	080096d7 	.word	0x080096d7
 800946c:	080096d7 	.word	0x080096d7
 8009470:	080096d7 	.word	0x080096d7
 8009474:	080094c5 	.word	0x080094c5
 8009478:	080096d7 	.word	0x080096d7
 800947c:	080096d7 	.word	0x080096d7
 8009480:	080096d7 	.word	0x080096d7
 8009484:	080096d7 	.word	0x080096d7
 8009488:	080096d7 	.word	0x080096d7
 800948c:	080096d7 	.word	0x080096d7
 8009490:	080096d7 	.word	0x080096d7
 8009494:	080094cb 	.word	0x080094cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009498:	4b94      	ldr	r3, [pc, #592]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0320 	and.w	r3, r3, #32
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094a4:	4b91      	ldr	r3, [pc, #580]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	08db      	lsrs	r3, r3, #3
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	4a90      	ldr	r2, [pc, #576]	@ (80096f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094b0:	fa22 f303 	lsr.w	r3, r2, r3
 80094b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094b6:	e111      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094b8:	4b8d      	ldr	r3, [pc, #564]	@ (80096f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094ba:	61bb      	str	r3, [r7, #24]
      break;
 80094bc:	e10e      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094be:	4b8d      	ldr	r3, [pc, #564]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094c0:	61bb      	str	r3, [r7, #24]
      break;
 80094c2:	e10b      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094c4:	4b8c      	ldr	r3, [pc, #560]	@ (80096f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094c6:	61bb      	str	r3, [r7, #24]
      break;
 80094c8:	e108      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ca:	4b88      	ldr	r3, [pc, #544]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094d4:	4b85      	ldr	r3, [pc, #532]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	091b      	lsrs	r3, r3, #4
 80094da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094e0:	4b82      	ldr	r3, [pc, #520]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094ea:	4b80      	ldr	r3, [pc, #512]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ee:	08db      	lsrs	r3, r3, #3
 80094f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	fb02 f303 	mul.w	r3, r2, r3
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009502:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 80e1 	beq.w	80096d0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2b02      	cmp	r3, #2
 8009512:	f000 8083 	beq.w	800961c <HAL_RCC_GetSysClockFreq+0x204>
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b02      	cmp	r3, #2
 800951a:	f200 80a1 	bhi.w	8009660 <HAL_RCC_GetSysClockFreq+0x248>
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <HAL_RCC_GetSysClockFreq+0x114>
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d056      	beq.n	80095d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800952a:	e099      	b.n	8009660 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800952c:	4b6f      	ldr	r3, [pc, #444]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0320 	and.w	r3, r3, #32
 8009534:	2b00      	cmp	r3, #0
 8009536:	d02d      	beq.n	8009594 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009538:	4b6c      	ldr	r3, [pc, #432]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	08db      	lsrs	r3, r3, #3
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	4a6b      	ldr	r2, [pc, #428]	@ (80096f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009544:	fa22 f303 	lsr.w	r3, r2, r3
 8009548:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009562:	4b62      	ldr	r3, [pc, #392]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009572:	ed97 6a02 	vldr	s12, [r7, #8]
 8009576:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80096fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800957a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800958a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009592:	e087      	b.n	80096a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009700 <HAL_RCC_GetSysClockFreq+0x2e8>
 80095a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a6:	4b51      	ldr	r3, [pc, #324]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ae:	ee07 3a90 	vmov	s15, r3
 80095b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80096fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80095be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095d6:	e065      	b.n	80096a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009704 <HAL_RCC_GetSysClockFreq+0x2ec>
 80095e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ea:	4b40      	ldr	r3, [pc, #256]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80095fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80096fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800960e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800961a:	e043      	b.n	80096a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009708 <HAL_RCC_GetSysClockFreq+0x2f0>
 800962a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962e:	4b2f      	ldr	r3, [pc, #188]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009642:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80096fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800965e:	e021      	b.n	80096a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009704 <HAL_RCC_GetSysClockFreq+0x2ec>
 800966e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009672:	4b1e      	ldr	r3, [pc, #120]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009682:	ed97 6a02 	vldr	s12, [r7, #8]
 8009686:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80096fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800968a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80096a4:	4b11      	ldr	r3, [pc, #68]	@ (80096ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a8:	0a5b      	lsrs	r3, r3, #9
 80096aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ae:	3301      	adds	r3, #1
 80096b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80096c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c8:	ee17 3a90 	vmov	r3, s15
 80096cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096ce:	e005      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	61bb      	str	r3, [r7, #24]
      break;
 80096d4:	e002      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096d6:	4b07      	ldr	r3, [pc, #28]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096d8:	61bb      	str	r3, [r7, #24]
      break;
 80096da:	bf00      	nop
  }

  return sysclockfreq;
 80096dc:	69bb      	ldr	r3, [r7, #24]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3724      	adds	r7, #36	@ 0x24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	58024400 	.word	0x58024400
 80096f0:	03d09000 	.word	0x03d09000
 80096f4:	003d0900 	.word	0x003d0900
 80096f8:	016e3600 	.word	0x016e3600
 80096fc:	46000000 	.word	0x46000000
 8009700:	4c742400 	.word	0x4c742400
 8009704:	4a742400 	.word	0x4a742400
 8009708:	4bb71b00 	.word	0x4bb71b00

0800970c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009712:	f7ff fe81 	bl	8009418 <HAL_RCC_GetSysClockFreq>
 8009716:	4602      	mov	r2, r0
 8009718:	4b10      	ldr	r3, [pc, #64]	@ (800975c <HAL_RCC_GetHCLKFreq+0x50>)
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	f003 030f 	and.w	r3, r3, #15
 8009722:	490f      	ldr	r1, [pc, #60]	@ (8009760 <HAL_RCC_GetHCLKFreq+0x54>)
 8009724:	5ccb      	ldrb	r3, [r1, r3]
 8009726:	f003 031f 	and.w	r3, r3, #31
 800972a:	fa22 f303 	lsr.w	r3, r2, r3
 800972e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009730:	4b0a      	ldr	r3, [pc, #40]	@ (800975c <HAL_RCC_GetHCLKFreq+0x50>)
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	4a09      	ldr	r2, [pc, #36]	@ (8009760 <HAL_RCC_GetHCLKFreq+0x54>)
 800973a:	5cd3      	ldrb	r3, [r2, r3]
 800973c:	f003 031f 	and.w	r3, r3, #31
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	fa22 f303 	lsr.w	r3, r2, r3
 8009746:	4a07      	ldr	r2, [pc, #28]	@ (8009764 <HAL_RCC_GetHCLKFreq+0x58>)
 8009748:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800974a:	4a07      	ldr	r2, [pc, #28]	@ (8009768 <HAL_RCC_GetHCLKFreq+0x5c>)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009750:	4b04      	ldr	r3, [pc, #16]	@ (8009764 <HAL_RCC_GetHCLKFreq+0x58>)
 8009752:	681b      	ldr	r3, [r3, #0]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	58024400 	.word	0x58024400
 8009760:	08011e38 	.word	0x08011e38
 8009764:	24000010 	.word	0x24000010
 8009768:	2400000c 	.word	0x2400000c

0800976c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009770:	f7ff ffcc 	bl	800970c <HAL_RCC_GetHCLKFreq>
 8009774:	4602      	mov	r2, r0
 8009776:	4b06      	ldr	r3, [pc, #24]	@ (8009790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	091b      	lsrs	r3, r3, #4
 800977c:	f003 0307 	and.w	r3, r3, #7
 8009780:	4904      	ldr	r1, [pc, #16]	@ (8009794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009782:	5ccb      	ldrb	r3, [r1, r3]
 8009784:	f003 031f 	and.w	r3, r3, #31
 8009788:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800978c:	4618      	mov	r0, r3
 800978e:	bd80      	pop	{r7, pc}
 8009790:	58024400 	.word	0x58024400
 8009794:	08011e38 	.word	0x08011e38

08009798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800979c:	f7ff ffb6 	bl	800970c <HAL_RCC_GetHCLKFreq>
 80097a0:	4602      	mov	r2, r0
 80097a2:	4b06      	ldr	r3, [pc, #24]	@ (80097bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	4904      	ldr	r1, [pc, #16]	@ (80097c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097ae:	5ccb      	ldrb	r3, [r1, r3]
 80097b0:	f003 031f 	and.w	r3, r3, #31
 80097b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	58024400 	.word	0x58024400
 80097c0:	08011e38 	.word	0x08011e38

080097c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097c8:	b0c6      	sub	sp, #280	@ 0x118
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097d6:	2300      	movs	r3, #0
 80097d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80097e8:	2500      	movs	r5, #0
 80097ea:	ea54 0305 	orrs.w	r3, r4, r5
 80097ee:	d049      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097fa:	d02f      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80097fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009800:	d828      	bhi.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009802:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009806:	d01a      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009808:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800980c:	d822      	bhi.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009816:	d007      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009818:	e01c      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800981a:	4bab      	ldr	r3, [pc, #684]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	4aaa      	ldr	r2, [pc, #680]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009826:	e01a      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982c:	3308      	adds	r3, #8
 800982e:	2102      	movs	r1, #2
 8009830:	4618      	mov	r0, r3
 8009832:	f002 fa49 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800983c:	e00f      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009842:	3328      	adds	r3, #40	@ 0x28
 8009844:	2102      	movs	r1, #2
 8009846:	4618      	mov	r0, r3
 8009848:	f002 faf0 	bl	800be2c <RCCEx_PLL3_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009852:	e004      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800985a:	e000      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800985c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009866:	4b98      	ldr	r3, [pc, #608]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800986a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009874:	4a94      	ldr	r2, [pc, #592]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009876:	430b      	orrs	r3, r1
 8009878:	6513      	str	r3, [r2, #80]	@ 0x50
 800987a:	e003      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009890:	f04f 0900 	mov.w	r9, #0
 8009894:	ea58 0309 	orrs.w	r3, r8, r9
 8009898:	d047      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800989a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d82a      	bhi.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80098a4:	a201      	add	r2, pc, #4	@ (adr r2, 80098ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098c1 	.word	0x080098c1
 80098b0:	080098cf 	.word	0x080098cf
 80098b4:	080098e5 	.word	0x080098e5
 80098b8:	08009903 	.word	0x08009903
 80098bc:	08009903 	.word	0x08009903
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098c0:	4b81      	ldr	r3, [pc, #516]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	4a80      	ldr	r2, [pc, #512]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098cc:	e01a      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d2:	3308      	adds	r3, #8
 80098d4:	2100      	movs	r1, #0
 80098d6:	4618      	mov	r0, r3
 80098d8:	f002 f9f6 	bl	800bcc8 <RCCEx_PLL2_Config>
 80098dc:	4603      	mov	r3, r0
 80098de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e2:	e00f      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e8:	3328      	adds	r3, #40	@ 0x28
 80098ea:	2100      	movs	r1, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f002 fa9d 	bl	800be2c <RCCEx_PLL3_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098f8:	e004      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009900:	e000      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800990c:	4b6e      	ldr	r3, [pc, #440]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800990e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009910:	f023 0107 	bic.w	r1, r3, #7
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800991a:	4a6b      	ldr	r2, [pc, #428]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800991c:	430b      	orrs	r3, r1
 800991e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009920:	e003      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009922:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009926:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800992a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009936:	f04f 0b00 	mov.w	fp, #0
 800993a:	ea5a 030b 	orrs.w	r3, sl, fp
 800993e:	d05b      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009944:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009948:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800994c:	d03b      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800994e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009952:	d834      	bhi.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009954:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009958:	d037      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 800995a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800995e:	d82e      	bhi.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009960:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009964:	d033      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009966:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800996a:	d828      	bhi.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800996c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009970:	d01a      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009976:	d822      	bhi.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800997c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009980:	d007      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009982:	e01c      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009984:	4b50      	ldr	r3, [pc, #320]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009988:	4a4f      	ldr	r2, [pc, #316]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800998a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800998e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009990:	e01e      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009996:	3308      	adds	r3, #8
 8009998:	2100      	movs	r1, #0
 800999a:	4618      	mov	r0, r3
 800999c:	f002 f994 	bl	800bcc8 <RCCEx_PLL2_Config>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099a6:	e013      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ac:	3328      	adds	r3, #40	@ 0x28
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f002 fa3b 	bl	800be2c <RCCEx_PLL3_Config>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099bc:	e008      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099c4:	e004      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099c6:	bf00      	nop
 80099c8:	e002      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10b      	bne.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099d8:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099dc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099e8:	4a37      	ldr	r2, [pc, #220]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099ea:	430b      	orrs	r3, r1
 80099ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ee:	e003      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009a0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009a12:	460b      	mov	r3, r1
 8009a14:	4313      	orrs	r3, r2
 8009a16:	d05d      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a20:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009a24:	d03b      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009a26:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009a2a:	d834      	bhi.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a30:	d037      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a36:	d82e      	bhi.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a3c:	d033      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009a3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a42:	d828      	bhi.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a48:	d01a      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a4e:	d822      	bhi.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a58:	d007      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009a5a:	e01c      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	4a19      	ldr	r2, [pc, #100]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a68:	e01e      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6e:	3308      	adds	r3, #8
 8009a70:	2100      	movs	r1, #0
 8009a72:	4618      	mov	r0, r3
 8009a74:	f002 f928 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a7e:	e013      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a84:	3328      	adds	r3, #40	@ 0x28
 8009a86:	2100      	movs	r1, #0
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f002 f9cf 	bl	800be2c <RCCEx_PLL3_Config>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a94:	e008      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a9c:	e004      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a9e:	bf00      	nop
 8009aa0:	e002      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009aa2:	bf00      	nop
 8009aa4:	e000      	b.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10d      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ab0:	4b05      	ldr	r3, [pc, #20]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009ac0:	4a01      	ldr	r2, [pc, #4]	@ (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ac6:	e005      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009ac8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009acc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009ae0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009aea:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d03a      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009afa:	2b30      	cmp	r3, #48	@ 0x30
 8009afc:	d01f      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009afe:	2b30      	cmp	r3, #48	@ 0x30
 8009b00:	d819      	bhi.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d00c      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d815      	bhi.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d019      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b0e:	2b10      	cmp	r3, #16
 8009b10:	d111      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b12:	4baa      	ldr	r3, [pc, #680]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b16:	4aa9      	ldr	r2, [pc, #676]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b1e:	e011      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b24:	3308      	adds	r3, #8
 8009b26:	2102      	movs	r1, #2
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 f8cd 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b34:	e006      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b3c:	e002      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b3e:	bf00      	nop
 8009b40:	e000      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009b4c:	4b9b      	ldr	r3, [pc, #620]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b5a:	4a98      	ldr	r2, [pc, #608]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b5c:	430b      	orrs	r3, r1
 8009b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b60:	e003      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009b80:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009b84:	460b      	mov	r3, r1
 8009b86:	4313      	orrs	r3, r2
 8009b88:	d051      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b94:	d035      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b9a:	d82e      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009b9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ba0:	d031      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009ba2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ba6:	d828      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bac:	d01a      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bb2:	d822      	bhi.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bbc:	d007      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009bbe:	e01c      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc4:	4a7d      	ldr	r2, [pc, #500]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bcc:	e01c      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f002 f876 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009be2:	e011      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be8:	3328      	adds	r3, #40	@ 0x28
 8009bea:	2100      	movs	r1, #0
 8009bec:	4618      	mov	r0, r3
 8009bee:	f002 f91d 	bl	800be2c <RCCEx_PLL3_Config>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bf8:	e006      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c00:	e002      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c02:	bf00      	nop
 8009c04:	e000      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c10:	4b6a      	ldr	r3, [pc, #424]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c1e:	4a67      	ldr	r2, [pc, #412]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c20:	430b      	orrs	r3, r1
 8009c22:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c24:	e003      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c3e:	2300      	movs	r3, #0
 8009c40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c44:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	d053      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c58:	d033      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c5e:	d82c      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c64:	d02f      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c6a:	d826      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c70:	d02b      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c76:	d820      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c7c:	d012      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009c7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c82:	d81a      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d022      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c8c:	d115      	bne.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c92:	3308      	adds	r3, #8
 8009c94:	2101      	movs	r1, #1
 8009c96:	4618      	mov	r0, r3
 8009c98:	f002 f816 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ca2:	e015      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca8:	3328      	adds	r3, #40	@ 0x28
 8009caa:	2101      	movs	r1, #1
 8009cac:	4618      	mov	r0, r3
 8009cae:	f002 f8bd 	bl	800be2c <RCCEx_PLL3_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cb8:	e00a      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cc0:	e006      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cc2:	bf00      	nop
 8009cc4:	e004      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cc6:	bf00      	nop
 8009cc8:	e002      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cca:	bf00      	nop
 8009ccc:	e000      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10a      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009cd8:	4b38      	ldr	r3, [pc, #224]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ce6:	4a35      	ldr	r2, [pc, #212]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009ce8:	430b      	orrs	r3, r1
 8009cea:	6513      	str	r3, [r2, #80]	@ 0x50
 8009cec:	e003      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009d02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009d06:	2300      	movs	r3, #0
 8009d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009d0c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009d10:	460b      	mov	r3, r1
 8009d12:	4313      	orrs	r3, r2
 8009d14:	d058      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d22:	d033      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d28:	d82c      	bhi.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d2e:	d02f      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d34:	d826      	bhi.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d3a:	d02b      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009d3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d40:	d820      	bhi.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d46:	d012      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d4c:	d81a      	bhi.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d022      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d56:	d115      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	2101      	movs	r1, #1
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 ffb1 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d6c:	e015      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d72:	3328      	adds	r3, #40	@ 0x28
 8009d74:	2101      	movs	r1, #1
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 f858 	bl	800be2c <RCCEx_PLL3_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d82:	e00a      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d8a:	e006      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d8c:	bf00      	nop
 8009d8e:	e004      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d90:	bf00      	nop
 8009d92:	e002      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d94:	bf00      	nop
 8009d96:	e000      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10e      	bne.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009da2:	4b06      	ldr	r3, [pc, #24]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009da6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009db2:	4a02      	ldr	r2, [pc, #8]	@ (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009db8:	e006      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009dba:	bf00      	nop
 8009dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009dde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4313      	orrs	r3, r2
 8009de6:	d037      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df2:	d00e      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009df8:	d816      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d018      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e02:	d111      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e04:	4bc4      	ldr	r3, [pc, #784]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e08:	4ac3      	ldr	r2, [pc, #780]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e10:	e00f      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e16:	3308      	adds	r3, #8
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 ff54 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e26:	e004      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e2e:	e000      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e3a:	4bb7      	ldr	r3, [pc, #732]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e48:	4ab3      	ldr	r2, [pc, #716]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e4e:	e003      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009e72:	460b      	mov	r3, r1
 8009e74:	4313      	orrs	r3, r2
 8009e76:	d039      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d81c      	bhi.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ec5 	.word	0x08009ec5
 8009e8c:	08009e99 	.word	0x08009e99
 8009e90:	08009ea7 	.word	0x08009ea7
 8009e94:	08009ec5 	.word	0x08009ec5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e98:	4b9f      	ldr	r3, [pc, #636]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9c:	4a9e      	ldr	r2, [pc, #632]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ea4:	e00f      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eaa:	3308      	adds	r3, #8
 8009eac:	2102      	movs	r1, #2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 ff0a 	bl	800bcc8 <RCCEx_PLL2_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009eba:	e004      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10a      	bne.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ece:	4b92      	ldr	r3, [pc, #584]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed2:	f023 0103 	bic.w	r1, r3, #3
 8009ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009edc:	4a8e      	ldr	r2, [pc, #568]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ee2:	e003      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009efc:	2300      	movs	r3, #0
 8009efe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	f000 8099 	beq.w	800a040 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f0e:	4b83      	ldr	r3, [pc, #524]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a82      	ldr	r2, [pc, #520]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f1a:	f7f8 fe65 	bl	8002be8 <HAL_GetTick>
 8009f1e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f22:	e00b      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f24:	f7f8 fe60 	bl	8002be8 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b64      	cmp	r3, #100	@ 0x64
 8009f32:	d903      	bls.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f3a:	e005      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f3c:	4b77      	ldr	r3, [pc, #476]	@ (800a11c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0ed      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d173      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f50:	4b71      	ldr	r3, [pc, #452]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f5c:	4053      	eors	r3, r2
 8009f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d015      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f66:	4b6c      	ldr	r3, [pc, #432]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f6e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f72:	4b69      	ldr	r3, [pc, #420]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f76:	4a68      	ldr	r2, [pc, #416]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f7e:	4b66      	ldr	r3, [pc, #408]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f82:	4a65      	ldr	r2, [pc, #404]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f8a:	4a63      	ldr	r2, [pc, #396]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f9e:	d118      	bne.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa0:	f7f8 fe22 	bl	8002be8 <HAL_GetTick>
 8009fa4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fa8:	e00d      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009faa:	f7f8 fe1d 	bl	8002be8 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009fb4:	1ad2      	subs	r2, r2, r3
 8009fb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d903      	bls.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009fc4:	e005      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fc6:	4b54      	ldr	r3, [pc, #336]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0eb      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d129      	bne.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fea:	d10e      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009fec:	4b4a      	ldr	r3, [pc, #296]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ffc:	091a      	lsrs	r2, r3, #4
 8009ffe:	4b48      	ldr	r3, [pc, #288]	@ (800a120 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a000:	4013      	ands	r3, r2
 800a002:	4a45      	ldr	r2, [pc, #276]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a004:	430b      	orrs	r3, r1
 800a006:	6113      	str	r3, [r2, #16]
 800a008:	e005      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a00a:	4b43      	ldr	r3, [pc, #268]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	4a42      	ldr	r2, [pc, #264]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a010:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a014:	6113      	str	r3, [r2, #16]
 800a016:	4b40      	ldr	r3, [pc, #256]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a018:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a026:	4a3c      	ldr	r2, [pc, #240]	@ (800a118 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a028:	430b      	orrs	r3, r1
 800a02a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a02c:	e008      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a02e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a032:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a036:	e003      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a03c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f002 0301 	and.w	r3, r2, #1
 800a04c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a050:	2300      	movs	r3, #0
 800a052:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a056:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a05a:	460b      	mov	r3, r1
 800a05c:	4313      	orrs	r3, r2
 800a05e:	f000 808f 	beq.w	800a180 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a066:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a068:	2b28      	cmp	r3, #40	@ 0x28
 800a06a:	d871      	bhi.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a06c:	a201      	add	r2, pc, #4	@ (adr r2, 800a074 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a159 	.word	0x0800a159
 800a078:	0800a151 	.word	0x0800a151
 800a07c:	0800a151 	.word	0x0800a151
 800a080:	0800a151 	.word	0x0800a151
 800a084:	0800a151 	.word	0x0800a151
 800a088:	0800a151 	.word	0x0800a151
 800a08c:	0800a151 	.word	0x0800a151
 800a090:	0800a151 	.word	0x0800a151
 800a094:	0800a125 	.word	0x0800a125
 800a098:	0800a151 	.word	0x0800a151
 800a09c:	0800a151 	.word	0x0800a151
 800a0a0:	0800a151 	.word	0x0800a151
 800a0a4:	0800a151 	.word	0x0800a151
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a151 	.word	0x0800a151
 800a0b0:	0800a151 	.word	0x0800a151
 800a0b4:	0800a13b 	.word	0x0800a13b
 800a0b8:	0800a151 	.word	0x0800a151
 800a0bc:	0800a151 	.word	0x0800a151
 800a0c0:	0800a151 	.word	0x0800a151
 800a0c4:	0800a151 	.word	0x0800a151
 800a0c8:	0800a151 	.word	0x0800a151
 800a0cc:	0800a151 	.word	0x0800a151
 800a0d0:	0800a151 	.word	0x0800a151
 800a0d4:	0800a159 	.word	0x0800a159
 800a0d8:	0800a151 	.word	0x0800a151
 800a0dc:	0800a151 	.word	0x0800a151
 800a0e0:	0800a151 	.word	0x0800a151
 800a0e4:	0800a151 	.word	0x0800a151
 800a0e8:	0800a151 	.word	0x0800a151
 800a0ec:	0800a151 	.word	0x0800a151
 800a0f0:	0800a151 	.word	0x0800a151
 800a0f4:	0800a159 	.word	0x0800a159
 800a0f8:	0800a151 	.word	0x0800a151
 800a0fc:	0800a151 	.word	0x0800a151
 800a100:	0800a151 	.word	0x0800a151
 800a104:	0800a151 	.word	0x0800a151
 800a108:	0800a151 	.word	0x0800a151
 800a10c:	0800a151 	.word	0x0800a151
 800a110:	0800a151 	.word	0x0800a151
 800a114:	0800a159 	.word	0x0800a159
 800a118:	58024400 	.word	0x58024400
 800a11c:	58024800 	.word	0x58024800
 800a120:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a128:	3308      	adds	r3, #8
 800a12a:	2101      	movs	r1, #1
 800a12c:	4618      	mov	r0, r3
 800a12e:	f001 fdcb 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a138:	e00f      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13e:	3328      	adds	r3, #40	@ 0x28
 800a140:	2101      	movs	r1, #1
 800a142:	4618      	mov	r0, r3
 800a144:	f001 fe72 	bl	800be2c <RCCEx_PLL3_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a14e:	e004      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a162:	4bbf      	ldr	r3, [pc, #764]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a166:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a170:	4abb      	ldr	r2, [pc, #748]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a172:	430b      	orrs	r3, r1
 800a174:	6553      	str	r3, [r2, #84]	@ 0x54
 800a176:	e003      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a17c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f002 0302 	and.w	r3, r2, #2
 800a18c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a190:	2300      	movs	r3, #0
 800a192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a196:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4313      	orrs	r3, r2
 800a19e:	d041      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1a6:	2b05      	cmp	r3, #5
 800a1a8:	d824      	bhi.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b0:	0800a1fd 	.word	0x0800a1fd
 800a1b4:	0800a1c9 	.word	0x0800a1c9
 800a1b8:	0800a1df 	.word	0x0800a1df
 800a1bc:	0800a1fd 	.word	0x0800a1fd
 800a1c0:	0800a1fd 	.word	0x0800a1fd
 800a1c4:	0800a1fd 	.word	0x0800a1fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f001 fd79 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1dc:	e00f      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e2:	3328      	adds	r3, #40	@ 0x28
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f001 fe20 	bl	800be2c <RCCEx_PLL3_Config>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1f2:	e004      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1fa:	e000      	b.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a206:	4b96      	ldr	r3, [pc, #600]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a20a:	f023 0107 	bic.w	r1, r3, #7
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a214:	4a92      	ldr	r2, [pc, #584]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a216:	430b      	orrs	r3, r1
 800a218:	6553      	str	r3, [r2, #84]	@ 0x54
 800a21a:	e003      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f002 0304 	and.w	r3, r2, #4
 800a230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a234:	2300      	movs	r3, #0
 800a236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a23a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a23e:	460b      	mov	r3, r1
 800a240:	4313      	orrs	r3, r2
 800a242:	d044      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a24c:	2b05      	cmp	r3, #5
 800a24e:	d825      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a250:	a201      	add	r2, pc, #4	@ (adr r2, 800a258 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a256:	bf00      	nop
 800a258:	0800a2a5 	.word	0x0800a2a5
 800a25c:	0800a271 	.word	0x0800a271
 800a260:	0800a287 	.word	0x0800a287
 800a264:	0800a2a5 	.word	0x0800a2a5
 800a268:	0800a2a5 	.word	0x0800a2a5
 800a26c:	0800a2a5 	.word	0x0800a2a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a274:	3308      	adds	r3, #8
 800a276:	2101      	movs	r1, #1
 800a278:	4618      	mov	r0, r3
 800a27a:	f001 fd25 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a27e:	4603      	mov	r3, r0
 800a280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a284:	e00f      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a28a:	3328      	adds	r3, #40	@ 0x28
 800a28c:	2101      	movs	r1, #1
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 fdcc 	bl	800be2c <RCCEx_PLL3_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a29a:	e004      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2a2:	e000      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a2a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10b      	bne.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2ae:	4b6c      	ldr	r3, [pc, #432]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b2:	f023 0107 	bic.w	r1, r3, #7
 800a2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2be:	4a68      	ldr	r2, [pc, #416]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2c4:	e003      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f002 0320 	and.w	r3, r2, #32
 800a2da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	d055      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2fa:	d033      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a2fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a300:	d82c      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a306:	d02f      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a30c:	d826      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a30e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a312:	d02b      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a314:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a318:	d820      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a31a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a31e:	d012      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a324:	d81a      	bhi.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d022      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a32a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32e:	d115      	bne.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a334:	3308      	adds	r3, #8
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f001 fcc5 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a344:	e015      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34a:	3328      	adds	r3, #40	@ 0x28
 800a34c:	2102      	movs	r1, #2
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 fd6c 	bl	800be2c <RCCEx_PLL3_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a35a:	e00a      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a362:	e006      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a364:	bf00      	nop
 800a366:	e004      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a368:	bf00      	nop
 800a36a:	e002      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a36c:	bf00      	nop
 800a36e:	e000      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a370:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a37a:	4b39      	ldr	r3, [pc, #228]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a37c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a37e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a38a:	4a35      	ldr	r2, [pc, #212]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a396:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a3a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3b0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d058      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a3c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a3c6:	d033      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a3c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a3cc:	d82c      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d2:	d02f      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a3d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d8:	d826      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3de:	d02b      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a3e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a3e4:	d820      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ea:	d012      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a3ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3f0:	d81a      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d022      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a3f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3fa:	d115      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a400:	3308      	adds	r3, #8
 800a402:	2100      	movs	r1, #0
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fc5f 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a410:	e015      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a416:	3328      	adds	r3, #40	@ 0x28
 800a418:	2102      	movs	r1, #2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 fd06 	bl	800be2c <RCCEx_PLL3_Config>
 800a420:	4603      	mov	r3, r0
 800a422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a426:	e00a      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a42e:	e006      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a430:	bf00      	nop
 800a432:	e004      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a434:	bf00      	nop
 800a436:	e002      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a438:	bf00      	nop
 800a43a:	e000      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a43c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10e      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a446:	4b06      	ldr	r3, [pc, #24]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a44a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a456:	4a02      	ldr	r2, [pc, #8]	@ (800a460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a458:	430b      	orrs	r3, r1
 800a45a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a45c:	e006      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a45e:	bf00      	nop
 800a460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a478:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a482:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	d055      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a490:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a494:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a498:	d033      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a49a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a49e:	d82c      	bhi.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4a4:	d02f      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a4a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4aa:	d826      	bhi.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4b0:	d02b      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a4b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4b6:	d820      	bhi.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4bc:	d012      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a4be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4c2:	d81a      	bhi.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d022      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a4c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4cc:	d115      	bne.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f001 fbf6 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4e2:	e015      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e8:	3328      	adds	r3, #40	@ 0x28
 800a4ea:	2102      	movs	r1, #2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f001 fc9d 	bl	800be2c <RCCEx_PLL3_Config>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4f8:	e00a      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a500:	e006      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a502:	bf00      	nop
 800a504:	e004      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a506:	bf00      	nop
 800a508:	e002      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a50a:	bf00      	nop
 800a50c:	e000      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a50e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10b      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a518:	4ba0      	ldr	r3, [pc, #640]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a51a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a51c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a528:	4a9c      	ldr	r2, [pc, #624]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a52a:	430b      	orrs	r3, r1
 800a52c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a52e:	e003      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f002 0308 	and.w	r3, r2, #8
 800a544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a548:	2300      	movs	r3, #0
 800a54a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a54e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a552:	460b      	mov	r3, r1
 800a554:	4313      	orrs	r3, r2
 800a556:	d01e      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a564:	d10c      	bne.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56a:	3328      	adds	r3, #40	@ 0x28
 800a56c:	2102      	movs	r1, #2
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 fc5c 	bl	800be2c <RCCEx_PLL3_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a580:	4b86      	ldr	r3, [pc, #536]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a584:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a590:	4a82      	ldr	r2, [pc, #520]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a592:	430b      	orrs	r3, r1
 800a594:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f002 0310 	and.w	r3, r2, #16
 800a5a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a5ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	d01e      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c2:	d10c      	bne.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c8:	3328      	adds	r3, #40	@ 0x28
 800a5ca:	2102      	movs	r1, #2
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f001 fc2d 	bl	800be2c <RCCEx_PLL3_Config>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5de:	4b6f      	ldr	r3, [pc, #444]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5ee:	4a6b      	ldr	r2, [pc, #428]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5f0:	430b      	orrs	r3, r1
 800a5f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a600:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a602:	2300      	movs	r3, #0
 800a604:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a606:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a60a:	460b      	mov	r3, r1
 800a60c:	4313      	orrs	r3, r2
 800a60e:	d03e      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a61c:	d022      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a61e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a622:	d81b      	bhi.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a62c:	d00b      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a62e:	e015      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a634:	3308      	adds	r3, #8
 800a636:	2100      	movs	r1, #0
 800a638:	4618      	mov	r0, r3
 800a63a:	f001 fb45 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a63e:	4603      	mov	r3, r0
 800a640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a644:	e00f      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64a:	3328      	adds	r3, #40	@ 0x28
 800a64c:	2102      	movs	r1, #2
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 fbec 	bl	800be2c <RCCEx_PLL3_Config>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a65a:	e004      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a662:	e000      	b.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10b      	bne.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a66e:	4b4b      	ldr	r3, [pc, #300]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a672:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a67e:	4a47      	ldr	r2, [pc, #284]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a680:	430b      	orrs	r3, r1
 800a682:	6593      	str	r3, [r2, #88]	@ 0x58
 800a684:	e003      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a68a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a69a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a69c:	2300      	movs	r3, #0
 800a69e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	d03b      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6b6:	d01f      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a6b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6bc:	d818      	bhi.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a6be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6c2:	d003      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a6c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6c8:	d007      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a6ca:	e011      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6cc:	4b33      	ldr	r3, [pc, #204]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d0:	4a32      	ldr	r2, [pc, #200]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6d8:	e00f      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6de:	3328      	adds	r3, #40	@ 0x28
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fba2 	bl	800be2c <RCCEx_PLL3_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6ee:	e004      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6f6:	e000      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a702:	4b26      	ldr	r3, [pc, #152]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a706:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a712:	4a22      	ldr	r2, [pc, #136]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6553      	str	r3, [r2, #84]	@ 0x54
 800a718:	e003      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a71e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a72e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a730:	2300      	movs	r3, #0
 800a732:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a734:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a738:	460b      	mov	r3, r1
 800a73a:	4313      	orrs	r3, r2
 800a73c:	d034      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a744:	2b00      	cmp	r3, #0
 800a746:	d003      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a74c:	d007      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a74e:	e011      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a750:	4b12      	ldr	r3, [pc, #72]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a754:	4a11      	ldr	r2, [pc, #68]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a75a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a75c:	e00e      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a762:	3308      	adds	r3, #8
 800a764:	2102      	movs	r1, #2
 800a766:	4618      	mov	r0, r3
 800a768:	f001 faae 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a772:	e003      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a77a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a77c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10d      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a784:	4b05      	ldr	r3, [pc, #20]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a788:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a792:	4a02      	ldr	r2, [pc, #8]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a794:	430b      	orrs	r3, r1
 800a796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a798:	e006      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a79a:	bf00      	nop
 800a79c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a7b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7ba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	d00c      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c8:	3328      	adds	r3, #40	@ 0x28
 800a7ca:	2102      	movs	r1, #2
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f001 fb2d 	bl	800be2c <RCCEx_PLL3_Config>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a7ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a7f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	d036      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a800:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a804:	d018      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a806:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a80a:	d811      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a810:	d014      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a816:	d80b      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d011      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a81c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a820:	d106      	bne.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a822:	4bb7      	ldr	r3, [pc, #732]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a826:	4ab6      	ldr	r2, [pc, #728]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a82c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a82e:	e008      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a838:	bf00      	nop
 800a83a:	e002      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a83c:	bf00      	nop
 800a83e:	e000      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a84a:	4bad      	ldr	r3, [pc, #692]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a858:	4aa9      	ldr	r2, [pc, #676]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a85a:	430b      	orrs	r3, r1
 800a85c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a85e:	e003      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a874:	653b      	str	r3, [r7, #80]	@ 0x50
 800a876:	2300      	movs	r3, #0
 800a878:	657b      	str	r3, [r7, #84]	@ 0x54
 800a87a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a87e:	460b      	mov	r3, r1
 800a880:	4313      	orrs	r3, r2
 800a882:	d009      	beq.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a884:	4b9e      	ldr	r3, [pc, #632]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a888:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a892:	4a9b      	ldr	r2, [pc, #620]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a894:	430b      	orrs	r3, r1
 800a896:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a8a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	d009      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8b4:	4b92      	ldr	r3, [pc, #584]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8c2:	4a8f      	ldr	r2, [pc, #572]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a8d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	d00e      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8e4:	4b86      	ldr	r3, [pc, #536]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	4a85      	ldr	r2, [pc, #532]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8ee:	6113      	str	r3, [r2, #16]
 800a8f0:	4b83      	ldr	r3, [pc, #524]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8f2:	6919      	ldr	r1, [r3, #16]
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a8fc:	4a80      	ldr	r2, [pc, #512]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8fe:	430b      	orrs	r3, r1
 800a900:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a90e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a914:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a918:	460b      	mov	r3, r1
 800a91a:	4313      	orrs	r3, r2
 800a91c:	d009      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a91e:	4b78      	ldr	r3, [pc, #480]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a922:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a92c:	4a74      	ldr	r2, [pc, #464]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a92e:	430b      	orrs	r3, r1
 800a930:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a93e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a940:	2300      	movs	r3, #0
 800a942:	637b      	str	r3, [r7, #52]	@ 0x34
 800a944:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a948:	460b      	mov	r3, r1
 800a94a:	4313      	orrs	r3, r2
 800a94c:	d00a      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a94e:	4b6c      	ldr	r3, [pc, #432]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a952:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a95e:	4a68      	ldr	r2, [pc, #416]	@ (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a960:	430b      	orrs	r3, r1
 800a962:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	2100      	movs	r1, #0
 800a96e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a976:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a97a:	460b      	mov	r3, r1
 800a97c:	4313      	orrs	r3, r2
 800a97e:	d011      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a984:	3308      	adds	r3, #8
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 f99d 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6239      	str	r1, [r7, #32]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	d011      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 f97d 	bl	800bcc8 <RCCEx_PLL2_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a9d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	61b9      	str	r1, [r7, #24]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	61fb      	str	r3, [r7, #28]
 800a9f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	d011      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa04:	3308      	adds	r3, #8
 800aa06:	2102      	movs	r1, #2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f001 f95d 	bl	800bcc8 <RCCEx_PLL2_Config>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	6139      	str	r1, [r7, #16]
 800aa30:	f003 0308 	and.w	r3, r3, #8
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	d011      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa44:	3328      	adds	r3, #40	@ 0x28
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 f9ef 	bl	800be2c <RCCEx_PLL3_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800aa54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	f003 0310 	and.w	r3, r3, #16
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d011      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	3328      	adds	r3, #40	@ 0x28
 800aa86:	2101      	movs	r1, #1
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 f9cf 	bl	800be2c <RCCEx_PLL3_Config>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aa94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	2100      	movs	r1, #0
 800aaae:	6039      	str	r1, [r7, #0]
 800aab0:	f003 0320 	and.w	r3, r3, #32
 800aab4:	607b      	str	r3, [r7, #4]
 800aab6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaba:	460b      	mov	r3, r1
 800aabc:	4313      	orrs	r3, r2
 800aabe:	d011      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac4:	3328      	adds	r3, #40	@ 0x28
 800aac6:	2102      	movs	r1, #2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f001 f9af 	bl	800be2c <RCCEx_PLL3_Config>
 800aace:	4603      	mov	r3, r0
 800aad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800aad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aadc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aae0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800aae4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e000      	b.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aafe:	bf00      	nop
 800ab00:	58024400 	.word	0x58024400

0800ab04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b090      	sub	sp, #64	@ 0x40
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ab16:	430b      	orrs	r3, r1
 800ab18:	f040 8094 	bne.w	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab1c:	4b9b      	ldr	r3, [pc, #620]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab20:	f003 0307 	and.w	r3, r3, #7
 800ab24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	2b04      	cmp	r3, #4
 800ab2a:	f200 8087 	bhi.w	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800ab49 	.word	0x0800ab49
 800ab38:	0800ab71 	.word	0x0800ab71
 800ab3c:	0800ab99 	.word	0x0800ab99
 800ab40:	0800ac35 	.word	0x0800ac35
 800ab44:	0800abc1 	.word	0x0800abc1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab48:	4b90      	ldr	r3, [pc, #576]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab54:	d108      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 ff62 	bl	800ba24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab64:	f000 bc93 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6c:	f000 bc8f 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab70:	4b86      	ldr	r3, [pc, #536]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab7c:	d108      	bne.n	800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab7e:	f107 0318 	add.w	r3, r7, #24
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 fca6 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab8c:	f000 bc7f 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab94:	f000 bc7b 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab98:	4b7c      	ldr	r3, [pc, #496]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aba4:	d108      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aba6:	f107 030c 	add.w	r3, r7, #12
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fde6 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb4:	f000 bc6b 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abbc:	f000 bc67 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abc0:	4b72      	ldr	r3, [pc, #456]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abca:	4b70      	ldr	r3, [pc, #448]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d10c      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d109      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abdc:	4b6b      	ldr	r3, [pc, #428]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	08db      	lsrs	r3, r3, #3
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	4a6a      	ldr	r2, [pc, #424]	@ (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abe8:	fa22 f303 	lsr.w	r3, r2, r3
 800abec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abee:	e01f      	b.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abf0:	4b66      	ldr	r3, [pc, #408]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac04:	d102      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac06:	4b63      	ldr	r3, [pc, #396]	@ (800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ac08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac0a:	e011      	b.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac0c:	4b5f      	ldr	r3, [pc, #380]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac18:	d106      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac20:	d102      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac22:	4b5d      	ldr	r3, [pc, #372]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac26:	e003      	b.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac2c:	f000 bc2f 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac30:	f000 bc2d 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac34:	4b59      	ldr	r3, [pc, #356]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac38:	f000 bc29 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac40:	f000 bc25 	b.w	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ac44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac48:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	f040 80a7 	bne.w	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac52:	4b4e      	ldr	r3, [pc, #312]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac56:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ac5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac62:	d054      	beq.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ac64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac6a:	f200 808b 	bhi.w	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac74:	f000 8083 	beq.w	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ac78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac7e:	f200 8081 	bhi.w	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac88:	d02f      	beq.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac90:	d878      	bhi.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac9e:	d012      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800aca0:	e070      	b.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aca2:	4b3a      	ldr	r3, [pc, #232]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acaa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800acae:	d107      	bne.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 feb5 	bl	800ba24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acbe:	e3e6      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc4:	e3e3      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acc6:	4b31      	ldr	r3, [pc, #196]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acd2:	d107      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd4:	f107 0318 	add.w	r3, r7, #24
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fbfb 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace2:	e3d4      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace8:	e3d1      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acea:	4b28      	ldr	r3, [pc, #160]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf6:	d107      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf8:	f107 030c 	add.w	r3, r7, #12
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fd3d 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad06:	e3c2      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad0c:	e3bf      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad0e:	4b1f      	ldr	r3, [pc, #124]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad18:	4b1c      	ldr	r3, [pc, #112]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d10c      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ad24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad2a:	4b18      	ldr	r3, [pc, #96]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	08db      	lsrs	r3, r3, #3
 800ad30:	f003 0303 	and.w	r3, r3, #3
 800ad34:	4a16      	ldr	r2, [pc, #88]	@ (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad36:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad3c:	e01e      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad3e:	4b13      	ldr	r3, [pc, #76]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad4a:	d106      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad52:	d102      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad54:	4b0f      	ldr	r3, [pc, #60]	@ (800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ad56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad58:	e010      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad66:	d106      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ad68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad6e:	d102      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad70:	4b09      	ldr	r3, [pc, #36]	@ (800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad74:	e002      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad7a:	e388      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad7c:	e387      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad7e:	4b07      	ldr	r3, [pc, #28]	@ (800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad82:	e384      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad88:	e381      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad8a:	bf00      	nop
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	03d09000 	.word	0x03d09000
 800ad94:	003d0900 	.word	0x003d0900
 800ad98:	016e3600 	.word	0x016e3600
 800ad9c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ada0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ada8:	430b      	orrs	r3, r1
 800adaa:	f040 809c 	bne.w	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800adae:	4b9e      	ldr	r3, [pc, #632]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adb2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800adb6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800adb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adbe:	d054      	beq.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800adc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adc6:	f200 808b 	bhi.w	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800add0:	f000 8083 	beq.w	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800add4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800adda:	f200 8081 	bhi.w	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ade4:	d02f      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ade6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adec:	d878      	bhi.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d004      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adfa:	d012      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800adfc:	e070      	b.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adfe:	4b8a      	ldr	r3, [pc, #552]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae0a:	d107      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 fe07 	bl	800ba24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1a:	e338      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae20:	e335      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae22:	4b81      	ldr	r3, [pc, #516]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae2e:	d107      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae30:	f107 0318 	add.w	r3, r7, #24
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fb4d 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3e:	e326      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae44:	e323      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae46:	4b78      	ldr	r3, [pc, #480]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae52:	d107      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae54:	f107 030c 	add.w	r3, r7, #12
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 fc8f 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae62:	e314      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae68:	e311      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae6a:	4b6f      	ldr	r3, [pc, #444]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae74:	4b6c      	ldr	r3, [pc, #432]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d10c      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ae80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d109      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae86:	4b68      	ldr	r3, [pc, #416]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	08db      	lsrs	r3, r3, #3
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	4a66      	ldr	r2, [pc, #408]	@ (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae98:	e01e      	b.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae9a:	4b63      	ldr	r3, [pc, #396]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aea6:	d106      	bne.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800aea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeae:	d102      	bne.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aeb0:	4b5f      	ldr	r3, [pc, #380]	@ (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aeb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aeb4:	e010      	b.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeb6:	4b5c      	ldr	r3, [pc, #368]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aebe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aec2:	d106      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800aec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeca:	d102      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aecc:	4b59      	ldr	r3, [pc, #356]	@ (800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aed0:	e002      	b.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aed6:	e2da      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aed8:	e2d9      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aeda:	4b57      	ldr	r3, [pc, #348]	@ (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aede:	e2d6      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee4:	e2d3      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800aeee:	430b      	orrs	r3, r1
 800aef0:	f040 80a7 	bne.w	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aef4:	4b4c      	ldr	r3, [pc, #304]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aef8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aefc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af04:	d055      	beq.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af0c:	f200 8096 	bhi.w	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af16:	f000 8084 	beq.w	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800af1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af20:	f200 808c 	bhi.w	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af2a:	d030      	beq.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af32:	f200 8083 	bhi.w	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af42:	d012      	beq.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800af44:	e07a      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af46:	4b38      	ldr	r3, [pc, #224]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af52:	d107      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fd63 	bl	800ba24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af62:	e294      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af68:	e291      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af6a:	4b2f      	ldr	r3, [pc, #188]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af76:	d107      	bne.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af78:	f107 0318 	add.w	r3, r7, #24
 800af7c:	4618      	mov	r0, r3
 800af7e:	f000 faa9 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af86:	e282      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af8c:	e27f      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af8e:	4b26      	ldr	r3, [pc, #152]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af9a:	d107      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af9c:	f107 030c 	add.w	r3, r7, #12
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fbeb 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afaa:	e270      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afb0:	e26d      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afb2:	4b1d      	ldr	r3, [pc, #116]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800afba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afbc:	4b1a      	ldr	r3, [pc, #104]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d10c      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800afc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d109      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afce:	4b16      	ldr	r3, [pc, #88]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	08db      	lsrs	r3, r3, #3
 800afd4:	f003 0303 	and.w	r3, r3, #3
 800afd8:	4a14      	ldr	r2, [pc, #80]	@ (800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800afda:	fa22 f303 	lsr.w	r3, r2, r3
 800afde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afe0:	e01e      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afe2:	4b11      	ldr	r3, [pc, #68]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afee:	d106      	bne.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800aff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aff6:	d102      	bne.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aff8:	4b0d      	ldr	r3, [pc, #52]	@ (800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800affa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800affc:	e010      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800affe:	4b0a      	ldr	r3, [pc, #40]	@ (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b00a:	d106      	bne.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b012:	d102      	bne.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b014:	4b07      	ldr	r3, [pc, #28]	@ (800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b018:	e002      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b01e:	e236      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b020:	e235      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b022:	4b05      	ldr	r3, [pc, #20]	@ (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b026:	e232      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b028:	58024400 	.word	0x58024400
 800b02c:	03d09000 	.word	0x03d09000
 800b030:	003d0900 	.word	0x003d0900
 800b034:	016e3600 	.word	0x016e3600
 800b038:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b040:	e225      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b046:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b04a:	430b      	orrs	r3, r1
 800b04c:	f040 8085 	bne.w	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b050:	4b9c      	ldr	r3, [pc, #624]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b054:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b058:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b060:	d06b      	beq.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b068:	d874      	bhi.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b070:	d056      	beq.n	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b078:	d86c      	bhi.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b080:	d03b      	beq.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b084:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b088:	d864      	bhi.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b090:	d021      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b098:	d85c      	bhi.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d004      	beq.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0a6:	d004      	beq.n	800b0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b0a8:	e054      	b.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b0aa:	f7fe fb5f 	bl	800976c <HAL_RCC_GetPCLK1Freq>
 800b0ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0b0:	e1ed      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b2:	4b84      	ldr	r3, [pc, #528]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0be:	d107      	bne.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c0:	f107 0318 	add.w	r3, r7, #24
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fa05 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ce:	e1de      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d4:	e1db      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0d6:	4b7b      	ldr	r3, [pc, #492]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0e2:	d107      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e4:	f107 030c 	add.w	r3, r7, #12
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fb47 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f2:	e1cc      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f8:	e1c9      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0fa:	4b72      	ldr	r3, [pc, #456]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0304 	and.w	r3, r3, #4
 800b102:	2b04      	cmp	r3, #4
 800b104:	d109      	bne.n	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b106:	4b6f      	ldr	r3, [pc, #444]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	08db      	lsrs	r3, r3, #3
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	4a6d      	ldr	r2, [pc, #436]	@ (800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b112:	fa22 f303 	lsr.w	r3, r2, r3
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b118:	e1b9      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11e:	e1b6      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b120:	4b68      	ldr	r3, [pc, #416]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b12c:	d102      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b12e:	4b67      	ldr	r3, [pc, #412]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b132:	e1ac      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b138:	e1a9      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b13a:	4b62      	ldr	r3, [pc, #392]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b146:	d102      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b148:	4b61      	ldr	r3, [pc, #388]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14c:	e19f      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b152:	e19c      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b158:	e199      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b15e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b162:	430b      	orrs	r3, r1
 800b164:	d173      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b166:	4b57      	ldr	r3, [pc, #348]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b16a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b16e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b176:	d02f      	beq.n	800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b17e:	d863      	bhi.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b182:	2b00      	cmp	r3, #0
 800b184:	d004      	beq.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b18c:	d012      	beq.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b18e:	e05b      	b.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b190:	4b4c      	ldr	r3, [pc, #304]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b198:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b19c:	d107      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b19e:	f107 0318 	add.w	r3, r7, #24
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f996 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ac:	e16f      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b2:	e16c      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1b4:	4b43      	ldr	r3, [pc, #268]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1c0:	d107      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1c2:	f107 030c 	add.w	r3, r7, #12
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 fad8 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d0:	e15d      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d6:	e15a      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1d8:	4b3a      	ldr	r3, [pc, #232]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1e2:	4b38      	ldr	r3, [pc, #224]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d10c      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d109      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1f4:	4b33      	ldr	r3, [pc, #204]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	08db      	lsrs	r3, r3, #3
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	4a32      	ldr	r2, [pc, #200]	@ (800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b200:	fa22 f303 	lsr.w	r3, r2, r3
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b206:	e01e      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b208:	4b2e      	ldr	r3, [pc, #184]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b214:	d106      	bne.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b21c:	d102      	bne.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b21e:	4b2b      	ldr	r3, [pc, #172]	@ (800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b222:	e010      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b224:	4b27      	ldr	r3, [pc, #156]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b22c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b230:	d106      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b238:	d102      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b23a:	4b25      	ldr	r3, [pc, #148]	@ (800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b23c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b23e:	e002      	b.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b244:	e123      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b246:	e122      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24c:	e11f      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b252:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b256:	430b      	orrs	r3, r1
 800b258:	d13c      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b25a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b25e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b262:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b270:	d012      	beq.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b272:	e023      	b.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b274:	4b13      	ldr	r3, [pc, #76]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b27c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b280:	d107      	bne.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fbcc 	bl	800ba24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b290:	e0fd      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b296:	e0fa      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b298:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2a4:	d107      	bne.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2a6:	f107 0318 	add.w	r3, r7, #24
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f000 f912 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2b4:	e0eb      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ba:	e0e8      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c0:	e0e5      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2c2:	bf00      	nop
 800b2c4:	58024400 	.word	0x58024400
 800b2c8:	03d09000 	.word	0x03d09000
 800b2cc:	003d0900 	.word	0x003d0900
 800b2d0:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	f040 8085 	bne.w	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b2e2:	4b6d      	ldr	r3, [pc, #436]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2e6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b2ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2f2:	d06b      	beq.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2fa:	d874      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b302:	d056      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b30a:	d86c      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b312:	d03b      	beq.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b31a:	d864      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b322:	d021      	beq.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b32a:	d85c      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b338:	d004      	beq.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b33a:	e054      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b33c:	f000 f8b4 	bl	800b4a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b340:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b342:	e0a4      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b344:	4b54      	ldr	r3, [pc, #336]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b34c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b350:	d107      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b352:	f107 0318 	add.w	r3, r7, #24
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f8bc 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b360:	e095      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b366:	e092      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b368:	4b4b      	ldr	r3, [pc, #300]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b374:	d107      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 f9fe 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b384:	e083      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38a:	e080      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b38c:	4b42      	ldr	r3, [pc, #264]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b04      	cmp	r3, #4
 800b396:	d109      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b398:	4b3f      	ldr	r3, [pc, #252]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	08db      	lsrs	r3, r3, #3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	4a3e      	ldr	r2, [pc, #248]	@ (800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3aa:	e070      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b0:	e06d      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3b2:	4b39      	ldr	r3, [pc, #228]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b3c0:	4b37      	ldr	r3, [pc, #220]	@ (800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c4:	e063      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ca:	e060      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3cc:	4b32      	ldr	r3, [pc, #200]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b3da:	4b32      	ldr	r3, [pc, #200]	@ (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3de:	e056      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3e4:	e053      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ea:	e050      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b3ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	d148      	bne.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b3f8:	4b27      	ldr	r3, [pc, #156]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b400:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b408:	d02a      	beq.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b410:	d838      	bhi.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b41e:	d00d      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b420:	e030      	b.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b422:	4b1d      	ldr	r3, [pc, #116]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b42a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b42e:	d102      	bne.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b430:	4b1c      	ldr	r3, [pc, #112]	@ (800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b434:	e02b      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b43a:	e028      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b43c:	4b16      	ldr	r3, [pc, #88]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b448:	d107      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b44a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 fae8 	bl	800ba24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b458:	e019      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45e:	e016      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b460:	4b0d      	ldr	r3, [pc, #52]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b46c:	d107      	bne.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46e:	f107 0318 	add.w	r3, r7, #24
 800b472:	4618      	mov	r0, r3
 800b474:	f000 f82e 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b47c:	e007      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b47e:	2300      	movs	r3, #0
 800b480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b482:	e004      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b484:	2300      	movs	r3, #0
 800b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b488:	e001      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b490:	4618      	mov	r0, r3
 800b492:	3740      	adds	r7, #64	@ 0x40
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	58024400 	.word	0x58024400
 800b49c:	03d09000 	.word	0x03d09000
 800b4a0:	003d0900 	.word	0x003d0900
 800b4a4:	016e3600 	.word	0x016e3600

0800b4a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b4ac:	f7fe f92e 	bl	800970c <HAL_RCC_GetHCLKFreq>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	4b06      	ldr	r3, [pc, #24]	@ (800b4cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	091b      	lsrs	r3, r3, #4
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	4904      	ldr	r1, [pc, #16]	@ (800b4d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b4be:	5ccb      	ldrb	r3, [r1, r3]
 800b4c0:	f003 031f 	and.w	r3, r3, #31
 800b4c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	58024400 	.word	0x58024400
 800b4d0:	08011e38 	.word	0x08011e38

0800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b089      	sub	sp, #36	@ 0x24
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4dc:	4ba1      	ldr	r3, [pc, #644]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e0:	f003 0303 	and.w	r3, r3, #3
 800b4e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b4e6:	4b9f      	ldr	r3, [pc, #636]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ea:	0b1b      	lsrs	r3, r3, #12
 800b4ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b4f2:	4b9c      	ldr	r3, [pc, #624]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f6:	091b      	lsrs	r3, r3, #4
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4fe:	4b99      	ldr	r3, [pc, #612]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b502:	08db      	lsrs	r3, r3, #3
 800b504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	fb02 f303 	mul.w	r3, r2, r3
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 8111 	beq.w	800b744 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	2b02      	cmp	r3, #2
 800b526:	f000 8083 	beq.w	800b630 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	f200 80a1 	bhi.w	800b674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d056      	beq.n	800b5ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b53e:	e099      	b.n	800b674 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b540:	4b88      	ldr	r3, [pc, #544]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 0320 	and.w	r3, r3, #32
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d02d      	beq.n	800b5a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b54c:	4b85      	ldr	r3, [pc, #532]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	08db      	lsrs	r3, r3, #3
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	4a84      	ldr	r2, [pc, #528]	@ (800b768 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b558:	fa22 f303 	lsr.w	r3, r2, r3
 800b55c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	ee07 3a90 	vmov	s15, r3
 800b564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b576:	4b7b      	ldr	r3, [pc, #492]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57e:	ee07 3a90 	vmov	s15, r3
 800b582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b586:	ed97 6a03 	vldr	s12, [r7, #12]
 800b58a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5a6:	e087      	b.n	800b6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5ea:	e065      	b.n	800b6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5fe:	4b59      	ldr	r3, [pc, #356]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b606:	ee07 3a90 	vmov	s15, r3
 800b60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b612:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b61e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b62e:	e043      	b.n	800b6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b642:	4b48      	ldr	r3, [pc, #288]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b64a:	ee07 3a90 	vmov	s15, r3
 800b64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b652:	ed97 6a03 	vldr	s12, [r7, #12]
 800b656:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b672:	e021      	b.n	800b6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	ee07 3a90 	vmov	s15, r3
 800b67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b686:	4b37      	ldr	r3, [pc, #220]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68e:	ee07 3a90 	vmov	s15, r3
 800b692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b696:	ed97 6a03 	vldr	s12, [r7, #12]
 800b69a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b76c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b6b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6bc:	0a5b      	lsrs	r3, r3, #9
 800b6be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6de:	ee17 2a90 	vmov	r2, s15
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b6e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ea:	0c1b      	lsrs	r3, r3, #16
 800b6ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f0:	ee07 3a90 	vmov	s15, r3
 800b6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b700:	edd7 6a07 	vldr	s13, [r7, #28]
 800b704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70c:	ee17 2a90 	vmov	r2, s15
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b714:	4b13      	ldr	r3, [pc, #76]	@ (800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b718:	0e1b      	lsrs	r3, r3, #24
 800b71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b72a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b72e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73a:	ee17 2a90 	vmov	r2, s15
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b742:	e008      	b.n	800b756 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	609a      	str	r2, [r3, #8]
}
 800b756:	bf00      	nop
 800b758:	3724      	adds	r7, #36	@ 0x24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	58024400 	.word	0x58024400
 800b768:	03d09000 	.word	0x03d09000
 800b76c:	46000000 	.word	0x46000000
 800b770:	4c742400 	.word	0x4c742400
 800b774:	4a742400 	.word	0x4a742400
 800b778:	4bb71b00 	.word	0x4bb71b00

0800b77c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b089      	sub	sp, #36	@ 0x24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b784:	4ba1      	ldr	r3, [pc, #644]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b788:	f003 0303 	and.w	r3, r3, #3
 800b78c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b78e:	4b9f      	ldr	r3, [pc, #636]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b792:	0d1b      	lsrs	r3, r3, #20
 800b794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b798:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b79a:	4b9c      	ldr	r3, [pc, #624]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79e:	0a1b      	lsrs	r3, r3, #8
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b7a6:	4b99      	ldr	r3, [pc, #612]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7aa:	08db      	lsrs	r3, r3, #3
 800b7ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	fb02 f303 	mul.w	r3, r2, r3
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 8111 	beq.w	800b9ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	f000 8083 	beq.w	800b8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	f200 80a1 	bhi.w	800b91c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d003      	beq.n	800b7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d056      	beq.n	800b894 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b7e6:	e099      	b.n	800b91c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7e8:	4b88      	ldr	r3, [pc, #544]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 0320 	and.w	r3, r3, #32
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d02d      	beq.n	800b850 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7f4:	4b85      	ldr	r3, [pc, #532]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	08db      	lsrs	r3, r3, #3
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	4a84      	ldr	r2, [pc, #528]	@ (800ba10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b800:	fa22 f303 	lsr.w	r3, r2, r3
 800b804:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	ee07 3a90 	vmov	s15, r3
 800b80c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	ee07 3a90 	vmov	s15, r3
 800b816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81e:	4b7b      	ldr	r3, [pc, #492]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b832:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b84a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b84e:	e087      	b.n	800b960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	ee07 3a90 	vmov	s15, r3
 800b856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b85e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b862:	4b6a      	ldr	r3, [pc, #424]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b872:	ed97 6a03 	vldr	s12, [r7, #12]
 800b876:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b87a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b892:	e065      	b.n	800b960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ba1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8a6:	4b59      	ldr	r3, [pc, #356]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8d6:	e043      	b.n	800b960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	ee07 3a90 	vmov	s15, r3
 800b8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ea:	4b48      	ldr	r3, [pc, #288]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b91a:	e021      	b.n	800b960 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b926:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ba1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92e:	4b37      	ldr	r3, [pc, #220]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b942:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b95e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b960:	4b2a      	ldr	r3, [pc, #168]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b964:	0a5b      	lsrs	r3, r3, #9
 800b966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b96a:	ee07 3a90 	vmov	s15, r3
 800b96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b97a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b97e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b986:	ee17 2a90 	vmov	r2, s15
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b98e:	4b1f      	ldr	r3, [pc, #124]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b992:	0c1b      	lsrs	r3, r3, #16
 800b994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b998:	ee07 3a90 	vmov	s15, r3
 800b99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b4:	ee17 2a90 	vmov	r2, s15
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b9bc:	4b13      	ldr	r3, [pc, #76]	@ (800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9c0:	0e1b      	lsrs	r3, r3, #24
 800b9c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9c6:	ee07 3a90 	vmov	s15, r3
 800b9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9e2:	ee17 2a90 	vmov	r2, s15
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b9ea:	e008      	b.n	800b9fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	609a      	str	r2, [r3, #8]
}
 800b9fe:	bf00      	nop
 800ba00:	3724      	adds	r7, #36	@ 0x24
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	58024400 	.word	0x58024400
 800ba10:	03d09000 	.word	0x03d09000
 800ba14:	46000000 	.word	0x46000000
 800ba18:	4c742400 	.word	0x4c742400
 800ba1c:	4a742400 	.word	0x4a742400
 800ba20:	4bb71b00 	.word	0x4bb71b00

0800ba24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b089      	sub	sp, #36	@ 0x24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba2c:	4ba0      	ldr	r3, [pc, #640]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba30:	f003 0303 	and.w	r3, r3, #3
 800ba34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ba36:	4b9e      	ldr	r3, [pc, #632]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3a:	091b      	lsrs	r3, r3, #4
 800ba3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ba42:	4b9b      	ldr	r3, [pc, #620]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ba4c:	4b98      	ldr	r3, [pc, #608]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba50:	08db      	lsrs	r3, r3, #3
 800ba52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	fb02 f303 	mul.w	r3, r2, r3
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 8111 	beq.w	800bc92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	f000 8083 	beq.w	800bb7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	f200 80a1 	bhi.w	800bbc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d056      	beq.n	800bb3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba8c:	e099      	b.n	800bbc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba8e:	4b88      	ldr	r3, [pc, #544]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d02d      	beq.n	800baf6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba9a:	4b85      	ldr	r3, [pc, #532]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	08db      	lsrs	r3, r3, #3
 800baa0:	f003 0303 	and.w	r3, r3, #3
 800baa4:	4a83      	ldr	r2, [pc, #524]	@ (800bcb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800baa6:	fa22 f303 	lsr.w	r3, r2, r3
 800baaa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac4:	4b7a      	ldr	r3, [pc, #488]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800badc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800baf4:	e087      	b.n	800bc06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	ee07 3a90 	vmov	s15, r3
 800bafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb00:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb08:	4b69      	ldr	r3, [pc, #420]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb18:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb38:	e065      	b.n	800bc06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	ee07 3a90 	vmov	s15, r3
 800bb40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb44:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800bcc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bb48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb4c:	4b58      	ldr	r3, [pc, #352]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb60:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb7c:	e043      	b.n	800bc06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	ee07 3a90 	vmov	s15, r3
 800bb84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb88:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800bcc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb90:	4b47      	ldr	r3, [pc, #284]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb98:	ee07 3a90 	vmov	s15, r3
 800bb9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bba4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbc0:	e021      	b.n	800bc06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	ee07 3a90 	vmov	s15, r3
 800bbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbcc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bcbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd4:	4b36      	ldr	r3, [pc, #216]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbdc:	ee07 3a90 	vmov	s15, r3
 800bbe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbe8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bcb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bc06:	4b2a      	ldr	r3, [pc, #168]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0a:	0a5b      	lsrs	r3, r3, #9
 800bc0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc10:	ee07 3a90 	vmov	s15, r3
 800bc14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc20:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc2c:	ee17 2a90 	vmov	r2, s15
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc34:	4b1e      	ldr	r3, [pc, #120]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc38:	0c1b      	lsrs	r3, r3, #16
 800bc3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc5a:	ee17 2a90 	vmov	r2, s15
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc62:	4b13      	ldr	r3, [pc, #76]	@ (800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc66:	0e1b      	lsrs	r3, r3, #24
 800bc68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc6c:	ee07 3a90 	vmov	s15, r3
 800bc70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc88:	ee17 2a90 	vmov	r2, s15
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc90:	e008      	b.n	800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	609a      	str	r2, [r3, #8]
}
 800bca4:	bf00      	nop
 800bca6:	3724      	adds	r7, #36	@ 0x24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	58024400 	.word	0x58024400
 800bcb4:	03d09000 	.word	0x03d09000
 800bcb8:	46000000 	.word	0x46000000
 800bcbc:	4c742400 	.word	0x4c742400
 800bcc0:	4a742400 	.word	0x4a742400
 800bcc4:	4bb71b00 	.word	0x4bb71b00

0800bcc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcd6:	4b53      	ldr	r3, [pc, #332]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bcd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcda:	f003 0303 	and.w	r3, r3, #3
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d101      	bne.n	800bce6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e099      	b.n	800be1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bce6:	4b4f      	ldr	r3, [pc, #316]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a4e      	ldr	r2, [pc, #312]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bcec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bcf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcf2:	f7f6 ff79 	bl	8002be8 <HAL_GetTick>
 800bcf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcf8:	e008      	b.n	800bd0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bcfa:	f7f6 ff75 	bl	8002be8 <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d901      	bls.n	800bd0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e086      	b.n	800be1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd0c:	4b45      	ldr	r3, [pc, #276]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1f0      	bne.n	800bcfa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd18:	4b42      	ldr	r3, [pc, #264]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	031b      	lsls	r3, r3, #12
 800bd26:	493f      	ldr	r1, [pc, #252]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	025b      	lsls	r3, r3, #9
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	431a      	orrs	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	041b      	lsls	r3, r3, #16
 800bd4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bd4e:	431a      	orrs	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	061b      	lsls	r3, r3, #24
 800bd58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd5c:	4931      	ldr	r1, [pc, #196]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd62:	4b30      	ldr	r3, [pc, #192]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	492d      	ldr	r1, [pc, #180]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd74:	4b2b      	ldr	r3, [pc, #172]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd78:	f023 0220 	bic.w	r2, r3, #32
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	4928      	ldr	r1, [pc, #160]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd82:	4313      	orrs	r3, r2
 800bd84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd86:	4b27      	ldr	r3, [pc, #156]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8a:	4a26      	ldr	r2, [pc, #152]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd8c:	f023 0310 	bic.w	r3, r3, #16
 800bd90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd92:	4b24      	ldr	r3, [pc, #144]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bd94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd96:	4b24      	ldr	r3, [pc, #144]	@ (800be28 <RCCEx_PLL2_Config+0x160>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	69d2      	ldr	r2, [r2, #28]
 800bd9e:	00d2      	lsls	r2, r2, #3
 800bda0:	4920      	ldr	r1, [pc, #128]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bda6:	4b1f      	ldr	r3, [pc, #124]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdaa:	4a1e      	ldr	r2, [pc, #120]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bdac:	f043 0310 	orr.w	r3, r3, #16
 800bdb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d106      	bne.n	800bdc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bdb8:	4b1a      	ldr	r3, [pc, #104]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdbc:	4a19      	ldr	r2, [pc, #100]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bdbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdc4:	e00f      	b.n	800bde6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d106      	bne.n	800bdda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bdcc:	4b15      	ldr	r3, [pc, #84]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd0:	4a14      	ldr	r2, [pc, #80]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bdd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bdd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bdd8:	e005      	b.n	800bde6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdda:	4b12      	ldr	r3, [pc, #72]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdde:	4a11      	ldr	r2, [pc, #68]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bde0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bde4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bde6:	4b0f      	ldr	r3, [pc, #60]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a0e      	ldr	r2, [pc, #56]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800bdec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bdf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdf2:	f7f6 fef9 	bl	8002be8 <HAL_GetTick>
 800bdf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdf8:	e008      	b.n	800be0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bdfa:	f7f6 fef5 	bl	8002be8 <HAL_GetTick>
 800bdfe:	4602      	mov	r2, r0
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	2b02      	cmp	r3, #2
 800be06:	d901      	bls.n	800be0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be08:	2303      	movs	r3, #3
 800be0a:	e006      	b.n	800be1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be0c:	4b05      	ldr	r3, [pc, #20]	@ (800be24 <RCCEx_PLL2_Config+0x15c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be14:	2b00      	cmp	r3, #0
 800be16:	d0f0      	beq.n	800bdfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	58024400 	.word	0x58024400
 800be28:	ffff0007 	.word	0xffff0007

0800be2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be3a:	4b53      	ldr	r3, [pc, #332]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800be3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be3e:	f003 0303 	and.w	r3, r3, #3
 800be42:	2b03      	cmp	r3, #3
 800be44:	d101      	bne.n	800be4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e099      	b.n	800bf7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be4a:	4b4f      	ldr	r3, [pc, #316]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a4e      	ldr	r2, [pc, #312]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800be50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be56:	f7f6 fec7 	bl	8002be8 <HAL_GetTick>
 800be5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be5c:	e008      	b.n	800be70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be5e:	f7f6 fec3 	bl	8002be8 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d901      	bls.n	800be70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e086      	b.n	800bf7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be70:	4b45      	ldr	r3, [pc, #276]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1f0      	bne.n	800be5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be7c:	4b42      	ldr	r3, [pc, #264]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800be7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	051b      	lsls	r3, r3, #20
 800be8a:	493f      	ldr	r1, [pc, #252]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800be8c:	4313      	orrs	r3, r2
 800be8e:	628b      	str	r3, [r1, #40]	@ 0x28
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	3b01      	subs	r3, #1
 800be96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	3b01      	subs	r3, #1
 800bea0:	025b      	lsls	r3, r3, #9
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	431a      	orrs	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	3b01      	subs	r3, #1
 800beac:	041b      	lsls	r3, r3, #16
 800beae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800beb2:	431a      	orrs	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	3b01      	subs	r3, #1
 800beba:	061b      	lsls	r3, r3, #24
 800bebc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bec0:	4931      	ldr	r1, [pc, #196]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bec6:	4b30      	ldr	r3, [pc, #192]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	492d      	ldr	r1, [pc, #180]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bed8:	4b2b      	ldr	r3, [pc, #172]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800beda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bedc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	4928      	ldr	r1, [pc, #160]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bee6:	4313      	orrs	r3, r2
 800bee8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800beea:	4b27      	ldr	r3, [pc, #156]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800beec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beee:	4a26      	ldr	r2, [pc, #152]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bef6:	4b24      	ldr	r3, [pc, #144]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800befa:	4b24      	ldr	r3, [pc, #144]	@ (800bf8c <RCCEx_PLL3_Config+0x160>)
 800befc:	4013      	ands	r3, r2
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	69d2      	ldr	r2, [r2, #28]
 800bf02:	00d2      	lsls	r2, r2, #3
 800bf04:	4920      	ldr	r1, [pc, #128]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf0a:	4b1f      	ldr	r3, [pc, #124]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf0e:	4a1e      	ldr	r2, [pc, #120]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d106      	bne.n	800bf2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf20:	4a19      	ldr	r2, [pc, #100]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bf26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf28:	e00f      	b.n	800bf4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d106      	bne.n	800bf3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf30:	4b15      	ldr	r3, [pc, #84]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf34:	4a14      	ldr	r2, [pc, #80]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bf3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf3c:	e005      	b.n	800bf4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf3e:	4b12      	ldr	r3, [pc, #72]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf42:	4a11      	ldr	r2, [pc, #68]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a0e      	ldr	r2, [pc, #56]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf56:	f7f6 fe47 	bl	8002be8 <HAL_GetTick>
 800bf5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf5c:	e008      	b.n	800bf70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf5e:	f7f6 fe43 	bl	8002be8 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d901      	bls.n	800bf70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	e006      	b.n	800bf7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf70:	4b05      	ldr	r3, [pc, #20]	@ (800bf88 <RCCEx_PLL3_Config+0x15c>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d0f0      	beq.n	800bf5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	58024400 	.word	0x58024400
 800bf8c:	ffff0007 	.word	0xffff0007

0800bf90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	@ 0x28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e075      	b.n	800c08e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7f6 fa75 	bl	80024a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2204      	movs	r2, #4
 800bfbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f868 	bl	800c098 <HAL_SD_InitCard>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e05d      	b.n	800c08e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bfd2:	f107 0308 	add.w	r3, r7, #8
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fdaf 	bl	800cb3c <HAL_SD_GetCardStatus>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e052      	b.n	800c08e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bfe8:	7e3b      	ldrb	r3, [r7, #24]
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bfee:	7e7b      	ldrb	r3, [r7, #25]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d10a      	bne.n	800c012 <HAL_SD_Init+0x82>
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <HAL_SD_Init+0x78>
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d004      	beq.n	800c012 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c00e:	659a      	str	r2, [r3, #88]	@ 0x58
 800c010:	e00b      	b.n	800c02a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c016:	2b01      	cmp	r3, #1
 800c018:	d104      	bne.n	800c024 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c020:	659a      	str	r2, [r3, #88]	@ 0x58
 800c022:	e002      	b.n	800c02a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fe6d 	bl	800cd10 <HAL_SD_ConfigWideBusOperation>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e026      	b.n	800c08e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c040:	f7f6 fdd2 	bl	8002be8 <HAL_GetTick>
 800c044:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c046:	e011      	b.n	800c06c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c048:	f7f6 fdce 	bl	8002be8 <HAL_GetTick>
 800c04c:	4602      	mov	r2, r0
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d109      	bne.n	800c06c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c05e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e010      	b.n	800c08e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 ff61 	bl	800cf34 <HAL_SD_GetCardState>
 800c072:	4603      	mov	r3, r0
 800c074:	2b04      	cmp	r3, #4
 800c076:	d1e7      	bne.n	800c048 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3728      	adds	r7, #40	@ 0x28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c098:	b590      	push	{r4, r7, lr}
 800c09a:	b08d      	sub	sp, #52	@ 0x34
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c0b0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c0b4:	f04f 0100 	mov.w	r1, #0
 800c0b8:	f7fe fd24 	bl	800ab04 <HAL_RCCEx_GetPeriphCLKFreq>
 800c0bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d109      	bne.n	800c0d8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c0d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e070      	b.n	800c1ba <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	0a1b      	lsrs	r3, r3, #8
 800c0dc:	4a39      	ldr	r2, [pc, #228]	@ (800c1c4 <HAL_SD_InitCard+0x12c>)
 800c0de:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e2:	091b      	lsrs	r3, r3, #4
 800c0e4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681c      	ldr	r4, [r3, #0]
 800c0ea:	466a      	mov	r2, sp
 800c0ec:	f107 0318 	add.w	r3, r7, #24
 800c0f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0f4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0fe:	4620      	mov	r0, r4
 800c100:	f003 fffe 	bl	8010100 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4618      	mov	r0, r3
 800c10a:	f004 f841 	bl	8010190 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d005      	beq.n	800c120 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	2b00      	cmp	r3, #0
 800c124:	d007      	beq.n	800c136 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c126:	4a28      	ldr	r2, [pc, #160]	@ (800c1c8 <HAL_SD_InitCard+0x130>)
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12e:	3301      	adds	r3, #1
 800c130:	4618      	mov	r0, r3
 800c132:	f7f6 fd65 	bl	8002c00 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 ffea 	bl	800d110 <SD_PowerON>
 800c13c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d00b      	beq.n	800c15c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	e02e      	b.n	800c1ba <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 ff09 	bl	800cf74 <SD_InitCard>
 800c162:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00b      	beq.n	800c182 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	431a      	orrs	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e01b      	b.n	800c1ba <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c18a:	4618      	mov	r0, r3
 800c18c:	f004 f896 	bl	80102bc <SDMMC_CmdBlockLength>
 800c190:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c192:	6a3b      	ldr	r3, [r7, #32]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00f      	beq.n	800c1b8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a0b      	ldr	r2, [pc, #44]	@ (800c1cc <HAL_SD_InitCard+0x134>)
 800c19e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1a4:	6a3b      	ldr	r3, [r7, #32]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e000      	b.n	800c1ba <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	372c      	adds	r7, #44	@ 0x2c
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd90      	pop	{r4, r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	014f8b59 	.word	0x014f8b59
 800c1c8:	00012110 	.word	0x00012110
 800c1cc:	1fe00fff 	.word	0x1fe00fff

0800c1d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b08c      	sub	sp, #48	@ 0x30
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
 800c1dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d107      	bne.n	800c1f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e08d      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b01      	cmp	r3, #1
 800c202:	f040 8086 	bne.w	800c312 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c20c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	441a      	add	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c216:	429a      	cmp	r2, r3
 800c218:	d907      	bls.n	800c22a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c21e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e074      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2203      	movs	r2, #3
 800c22e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2200      	movs	r2, #0
 800c238:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	025a      	lsls	r2, r3, #9
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d002      	beq.n	800c256 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c252:	025b      	lsls	r3, r3, #9
 800c254:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c256:	f04f 33ff 	mov.w	r3, #4294967295
 800c25a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	025b      	lsls	r3, r3, #9
 800c260:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c262:	2390      	movs	r3, #144	@ 0x90
 800c264:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c266:	2302      	movs	r3, #2
 800c268:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c26e:	2300      	movs	r3, #0
 800c270:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f107 0210 	add.w	r2, r7, #16
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f003 fff1 	bl	8010264 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c290:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d90a      	bls.n	800c2be <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2282      	movs	r2, #130	@ 0x82
 800c2ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f004 f847 	bl	8010348 <SDMMC_CmdReadMultiBlock>
 800c2ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2bc:	e009      	b.n	800c2d2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2281      	movs	r2, #129	@ 0x81
 800c2c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f004 f819 	bl	8010302 <SDMMC_CmdReadSingleBlock>
 800c2d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d012      	beq.n	800c2fe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a0f      	ldr	r2, [pc, #60]	@ (800c31c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c2de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e00a      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c30c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e000      	b.n	800c314 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c312:	2302      	movs	r3, #2
  }
}
 800c314:	4618      	mov	r0, r3
 800c316:	3730      	adds	r7, #48	@ 0x30
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	1fe00fff 	.word	0x1fe00fff

0800c320 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08c      	sub	sp, #48	@ 0x30
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
 800c32c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d107      	bne.n	800c348 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c33c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e08d      	b.n	800c464 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	2b01      	cmp	r3, #1
 800c352:	f040 8086 	bne.w	800c462 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c35c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	441a      	add	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c366:	429a      	cmp	r2, r3
 800c368:	d907      	bls.n	800c37a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e074      	b.n	800c464 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2203      	movs	r2, #3
 800c37e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2200      	movs	r2, #0
 800c388:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	025a      	lsls	r2, r3, #9
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d002      	beq.n	800c3a6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	025b      	lsls	r3, r3, #9
 800c3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	025b      	lsls	r3, r3, #9
 800c3b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3b2:	2390      	movs	r3, #144	@ 0x90
 800c3b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f107 0210 	add.w	r2, r7, #16
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f003 ff49 	bl	8010264 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68da      	ldr	r2, [r3, #12]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3e0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d90a      	bls.n	800c40e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	22a0      	movs	r2, #160	@ 0xa0
 800c3fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c404:	4618      	mov	r0, r3
 800c406:	f003 ffe5 	bl	80103d4 <SDMMC_CmdWriteMultiBlock>
 800c40a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c40c:	e009      	b.n	800c422 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2290      	movs	r2, #144	@ 0x90
 800c412:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c41a:	4618      	mov	r0, r3
 800c41c:	f003 ffb7 	bl	801038e <SDMMC_CmdWriteSingleBlock>
 800c420:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c424:	2b00      	cmp	r3, #0
 800c426:	d012      	beq.n	800c44e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a0f      	ldr	r2, [pc, #60]	@ (800c46c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c42e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c436:	431a      	orrs	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e00a      	b.n	800c464 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c45c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c45e:	2300      	movs	r3, #0
 800c460:	e000      	b.n	800c464 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c462:	2302      	movs	r3, #2
  }
}
 800c464:	4618      	mov	r0, r3
 800c466:	3730      	adds	r7, #48	@ 0x30
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	1fe00fff 	.word	0x1fe00fff

0800c470 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d008      	beq.n	800c49e <HAL_SD_IRQHandler+0x2e>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f003 0308 	and.w	r3, r3, #8
 800c492:	2b00      	cmp	r3, #0
 800c494:	d003      	beq.n	800c49e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f001 f926 	bl	800d6e8 <SD_Read_IT>
 800c49c:	e19a      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 80ac 	beq.w	800c606 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c4b6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	4b59      	ldr	r3, [pc, #356]	@ (800c628 <HAL_SD_IRQHandler+0x1b8>)
 800c4c4:	400b      	ands	r3, r1
 800c4c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c4d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68da      	ldr	r2, [r3, #12]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4e6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f003 0308 	and.w	r3, r3, #8
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d038      	beq.n	800c564 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d104      	bne.n	800c506 <HAL_SD_IRQHandler+0x96>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f003 0320 	and.w	r3, r3, #32
 800c502:	2b00      	cmp	r3, #0
 800c504:	d011      	beq.n	800c52a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f003 ff86 	bl	801041c <SDMMC_CmdStopTransfer>
 800c510:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d008      	beq.n	800c52a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	431a      	orrs	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f95b 	bl	800c7e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a3f      	ldr	r2, [pc, #252]	@ (800c62c <HAL_SD_IRQHandler+0x1bc>)
 800c530:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2200      	movs	r2, #0
 800c53e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d104      	bne.n	800c554 <HAL_SD_IRQHandler+0xe4>
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d003      	beq.n	800c55c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f004 fc31 	bl	8010dbc <HAL_SD_RxCpltCallback>
 800c55a:	e13b      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f004 fc23 	bl	8010da8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c562:	e137      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 8132 	beq.w	800c7d4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2200      	movs	r2, #0
 800c576:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2200      	movs	r2, #0
 800c57e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2200      	movs	r2, #0
 800c586:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f003 0302 	and.w	r3, r3, #2
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d104      	bne.n	800c59c <HAL_SD_IRQHandler+0x12c>
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f003 0320 	and.w	r3, r3, #32
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d011      	beq.n	800c5c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f003 ff3b 	bl	801041c <SDMMC_CmdStopTransfer>
 800c5a6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d008      	beq.n	800c5c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	431a      	orrs	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f910 	bl	800c7e0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f003 0310 	and.w	r3, r3, #16
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <HAL_SD_IRQHandler+0x172>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f004 fbe0 	bl	8010da8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d105      	bne.n	800c5fe <HAL_SD_IRQHandler+0x18e>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80eb 	beq.w	800c7d4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f004 fbdc 	bl	8010dbc <HAL_SD_RxCpltCallback>
}
 800c604:	e0e6      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00d      	beq.n	800c630 <HAL_SD_IRQHandler+0x1c0>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f003 0308 	and.w	r3, r3, #8
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d008      	beq.n	800c630 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f001 f8a8 	bl	800d774 <SD_Write_IT>
 800c624:	e0d6      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
 800c626:	bf00      	nop
 800c628:	ffff3ec5 	.word	0xffff3ec5
 800c62c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c636:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 809d 	beq.w	800c77a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d005      	beq.n	800c65a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c652:	f043 0202 	orr.w	r2, r3, #2
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b00      	cmp	r3, #0
 800c666:	d005      	beq.n	800c674 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c66c:	f043 0208 	orr.w	r2, r3, #8
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67a:	f003 0320 	and.w	r3, r3, #32
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c686:	f043 0220 	orr.w	r2, r3, #32
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c694:	f003 0310 	and.w	r3, r3, #16
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a0:	f043 0210 	orr.w	r2, r3, #16
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a4b      	ldr	r2, [pc, #300]	@ (800c7dc <HAL_SD_IRQHandler+0x36c>)
 800c6ae:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c6be:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c6ce:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c6de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c6ee:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f003 fe91 	bl	801041c <SDMMC_CmdStopTransfer>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c700:	431a      	orrs	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68da      	ldr	r2, [r3, #12]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c714:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c71e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00a      	beq.n	800c740 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f851 	bl	800c7e0 <HAL_SD_ErrorCallback>
}
 800c73e:	e049      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c746:	2b00      	cmp	r3, #0
 800c748:	d044      	beq.n	800c7d4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d040      	beq.n	800c7d4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c760:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2200      	movs	r2, #0
 800c768:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f834 	bl	800c7e0 <HAL_SD_ErrorCallback>
}
 800c778:	e02c      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d025      	beq.n	800c7d4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c790:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c798:	f003 0304 	and.w	r3, r3, #4
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10c      	bne.n	800c7ba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f003 0320 	and.w	r3, r3, #32
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f001 f84a 	bl	800d844 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c7b0:	e010      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 f832 	bl	800d81c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c7b8:	e00c      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 f833 	bl	800d830 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c7ca:	e003      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f001 f81b 	bl	800d808 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c7d2:	e7ff      	b.n	800c7d4 <HAL_SD_IRQHandler+0x364>
 800c7d4:	bf00      	nop
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	18000f3a 	.word	0x18000f3a

0800c7e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c802:	0f9b      	lsrs	r3, r3, #30
 800c804:	b2da      	uxtb	r2, r3
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c80e:	0e9b      	lsrs	r3, r3, #26
 800c810:	b2db      	uxtb	r3, r3
 800c812:	f003 030f 	and.w	r3, r3, #15
 800c816:	b2da      	uxtb	r2, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c820:	0e1b      	lsrs	r3, r3, #24
 800c822:	b2db      	uxtb	r3, r3
 800c824:	f003 0303 	and.w	r3, r3, #3
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	b2da      	uxtb	r2, r3
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c83e:	0a1b      	lsrs	r3, r3, #8
 800c840:	b2da      	uxtb	r2, r3
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c854:	0d1b      	lsrs	r3, r3, #20
 800c856:	b29a      	uxth	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c860:	0c1b      	lsrs	r3, r3, #16
 800c862:	b2db      	uxtb	r3, r3
 800c864:	f003 030f 	and.w	r3, r3, #15
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c872:	0bdb      	lsrs	r3, r3, #15
 800c874:	b2db      	uxtb	r3, r3
 800c876:	f003 0301 	and.w	r3, r3, #1
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c884:	0b9b      	lsrs	r3, r3, #14
 800c886:	b2db      	uxtb	r3, r3
 800c888:	f003 0301 	and.w	r3, r3, #1
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c896:	0b5b      	lsrs	r3, r3, #13
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8a8:	0b1b      	lsrs	r3, r3, #12
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	f003 0301 	and.w	r3, r3, #1
 800c8b0:	b2da      	uxtb	r2, r3
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d163      	bne.n	800c98c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c8c8:	009a      	lsls	r2, r3, #2
 800c8ca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c8d4:	0f92      	lsrs	r2, r2, #30
 800c8d6:	431a      	orrs	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e0:	0edb      	lsrs	r3, r3, #27
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	f003 0307 	and.w	r3, r3, #7
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f2:	0e1b      	lsrs	r3, r3, #24
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c904:	0d5b      	lsrs	r3, r3, #21
 800c906:	b2db      	uxtb	r3, r3
 800c908:	f003 0307 	and.w	r3, r3, #7
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c916:	0c9b      	lsrs	r3, r3, #18
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	f003 0307 	and.w	r3, r3, #7
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c928:	0bdb      	lsrs	r3, r3, #15
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	f003 0307 	and.w	r3, r3, #7
 800c930:	b2da      	uxtb	r2, r3
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	7e1b      	ldrb	r3, [r3, #24]
 800c944:	b2db      	uxtb	r3, r3
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	3302      	adds	r3, #2
 800c94c:	2201      	movs	r2, #1
 800c94e:	fa02 f303 	lsl.w	r3, r2, r3
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c956:	fb03 f202 	mul.w	r2, r3, r2
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	7a1b      	ldrb	r3, [r3, #8]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	f003 030f 	and.w	r3, r3, #15
 800c968:	2201      	movs	r2, #1
 800c96a:	409a      	lsls	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c978:	0a52      	lsrs	r2, r2, #9
 800c97a:	fb03 f202 	mul.w	r2, r3, r2
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c988:	655a      	str	r2, [r3, #84]	@ 0x54
 800c98a:	e031      	b.n	800c9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c990:	2b01      	cmp	r3, #1
 800c992:	d11d      	bne.n	800c9d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c998:	041b      	lsls	r3, r3, #16
 800c99a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9a2:	0c1b      	lsrs	r3, r3, #16
 800c9a4:	431a      	orrs	r2, r3
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	029a      	lsls	r2, r3, #10
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	655a      	str	r2, [r3, #84]	@ 0x54
 800c9ce:	e00f      	b.n	800c9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a58      	ldr	r2, [pc, #352]	@ (800cb38 <HAL_SD_GetCardCSD+0x344>)
 800c9d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e09d      	b.n	800cb2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9f4:	0b9b      	lsrs	r3, r3, #14
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	f003 0301 	and.w	r3, r3, #1
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca06:	09db      	lsrs	r3, r3, #7
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca28:	0fdb      	lsrs	r3, r3, #31
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca34:	0f5b      	lsrs	r3, r3, #29
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	f003 0303 	and.w	r3, r3, #3
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca46:	0e9b      	lsrs	r3, r3, #26
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca58:	0d9b      	lsrs	r3, r3, #22
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	f003 030f 	and.w	r3, r3, #15
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca6a:	0d5b      	lsrs	r3, r3, #21
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca86:	0c1b      	lsrs	r3, r3, #16
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca9a:	0bdb      	lsrs	r3, r3, #15
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caae:	0b9b      	lsrs	r3, r3, #14
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cac2:	0b5b      	lsrs	r3, r3, #13
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cad6:	0b1b      	lsrs	r3, r3, #12
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caea:	0a9b      	lsrs	r3, r3, #10
 800caec:	b2db      	uxtb	r3, r3
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cafe:	0a1b      	lsrs	r3, r3, #8
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	f003 0303 	and.w	r3, r3, #3
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cb12:	085b      	lsrs	r3, r3, #1
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb1a:	b2da      	uxtb	r2, r3
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	1fe00fff 	.word	0x1fe00fff

0800cb3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b094      	sub	sp, #80	@ 0x50
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	d101      	bne.n	800cb5c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e0a7      	b.n	800ccac <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cb5c:	f107 0308 	add.w	r3, r7, #8
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fb62 	bl	800d22c <SD_SendSDStatus>
 800cb68:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d011      	beq.n	800cb94 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a4f      	ldr	r2, [pc, #316]	@ (800ccb4 <HAL_SD_GetCardStatus+0x178>)
 800cb76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb7e:	431a      	orrs	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800cb92:	e070      	b.n	800cc76 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	099b      	lsrs	r3, r3, #6
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	095b      	lsrs	r3, r3, #5
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	0a1b      	lsrs	r3, r3, #8
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	0e1b      	lsrs	r3, r3, #24
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	061a      	lsls	r2, r3, #24
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cbda:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	0a1b      	lsrs	r3, r3, #8
 800cbe0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbe4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	0e1b      	lsrs	r3, r3, #24
 800cbea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	0a1b      	lsrs	r3, r3, #8
 800cbfc:	b2da      	uxtb	r2, r3
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	0d1b      	lsrs	r3, r3, #20
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f003 030f 	and.w	r3, r3, #15
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	0c1b      	lsrs	r3, r3, #16
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	4313      	orrs	r3, r2
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	0a9b      	lsrs	r3, r3, #10
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	0a1b      	lsrs	r3, r3, #8
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	f003 0303 	and.w	r3, r3, #3
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	091b      	lsrs	r3, r3, #4
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	f003 030f 	and.w	r3, r3, #15
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	f003 030f 	and.w	r3, r3, #15
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	0e1b      	lsrs	r3, r3, #24
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f003 fb1c 	bl	80102bc <SDMMC_CmdBlockLength>
 800cc84:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00d      	beq.n	800cca8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a08      	ldr	r2, [pc, #32]	@ (800ccb4 <HAL_SD_GetCardStatus+0x178>)
 800cc92:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc98:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800cca8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3750      	adds	r7, #80	@ 0x50
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	1fe00fff 	.word	0x1fe00fff

0800ccb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd10:	b590      	push	{r4, r7, lr}
 800cd12:	b08d      	sub	sp, #52	@ 0x34
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2203      	movs	r2, #3
 800cd24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd2c:	2b03      	cmp	r3, #3
 800cd2e:	d02e      	beq.n	800cd8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd36:	d106      	bne.n	800cd46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd44:	e029      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd4c:	d10a      	bne.n	800cd64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fb64 	bl	800d41c <SD_WideBus_Enable>
 800cd54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	431a      	orrs	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd62:	e01a      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fba1 	bl	800d4b2 <SD_WideBus_Disable>
 800cd70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	431a      	orrs	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd7e:	e00c      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd84:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd8c:	e005      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd92:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d007      	beq.n	800cdb2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a5f      	ldr	r2, [pc, #380]	@ (800cf24 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cda8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cdb0:	e096      	b.n	800cee0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cdb2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cdb6:	f04f 0100 	mov.w	r1, #0
 800cdba:	f7fd fea3 	bl	800ab04 <HAL_RCCEx_GetPeriphCLKFreq>
 800cdbe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 8083 	beq.w	800cece <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	695a      	ldr	r2, [r3, #20]
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	4950      	ldr	r1, [pc, #320]	@ (800cf28 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cde6:	fba1 1303 	umull	r1, r3, r1, r3
 800cdea:	0e1b      	lsrs	r3, r3, #24
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d303      	bcc.n	800cdf8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	695b      	ldr	r3, [r3, #20]
 800cdf4:	61bb      	str	r3, [r7, #24]
 800cdf6:	e05a      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce00:	d103      	bne.n	800ce0a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	695b      	ldr	r3, [r3, #20]
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	e051      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce12:	d126      	bne.n	800ce62 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	695b      	ldr	r3, [r3, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10e      	bne.n	800ce3a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	4a43      	ldr	r2, [pc, #268]	@ (800cf2c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d906      	bls.n	800ce32 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	4a40      	ldr	r2, [pc, #256]	@ (800cf28 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce28:	fba2 2303 	umull	r2, r3, r2, r3
 800ce2c:	0e5b      	lsrs	r3, r3, #25
 800ce2e:	61bb      	str	r3, [r7, #24]
 800ce30:	e03d      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	e039      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	695b      	ldr	r3, [r3, #20]
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	69fa      	ldr	r2, [r7, #28]
 800ce42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce46:	4a39      	ldr	r2, [pc, #228]	@ (800cf2c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d906      	bls.n	800ce5a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	4a36      	ldr	r2, [pc, #216]	@ (800cf28 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce50:	fba2 2303 	umull	r2, r3, r2, r3
 800ce54:	0e5b      	lsrs	r3, r3, #25
 800ce56:	61bb      	str	r3, [r7, #24]
 800ce58:	e029      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	61bb      	str	r3, [r7, #24]
 800ce60:	e025      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d10e      	bne.n	800ce88 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	4a30      	ldr	r2, [pc, #192]	@ (800cf30 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d906      	bls.n	800ce80 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	4a2c      	ldr	r2, [pc, #176]	@ (800cf28 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce76:	fba2 2303 	umull	r2, r3, r2, r3
 800ce7a:	0e1b      	lsrs	r3, r3, #24
 800ce7c:	61bb      	str	r3, [r7, #24]
 800ce7e:	e016      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	61bb      	str	r3, [r7, #24]
 800ce86:	e012      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	695b      	ldr	r3, [r3, #20]
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	69fa      	ldr	r2, [r7, #28]
 800ce90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce94:	4a26      	ldr	r2, [pc, #152]	@ (800cf30 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d906      	bls.n	800cea8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	4a22      	ldr	r2, [pc, #136]	@ (800cf28 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cea2:	0e1b      	lsrs	r3, r3, #24
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	e002      	b.n	800ceae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681c      	ldr	r4, [r3, #0]
 800ceb2:	466a      	mov	r2, sp
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cebc:	e882 0003 	stmia.w	r2, {r0, r1}
 800cec0:	f107 0308 	add.w	r3, r7, #8
 800cec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cec6:	4620      	mov	r0, r4
 800cec8:	f003 f91a 	bl	8010100 <SDMMC_Init>
 800cecc:	e008      	b.n	800cee0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ced2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cee8:	4618      	mov	r0, r3
 800ceea:	f003 f9e7 	bl	80102bc <SDMMC_CmdBlockLength>
 800ceee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00c      	beq.n	800cf10 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a0a      	ldr	r2, [pc, #40]	@ (800cf24 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cefc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	431a      	orrs	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800cf18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	372c      	adds	r7, #44	@ 0x2c
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd90      	pop	{r4, r7, pc}
 800cf24:	1fe00fff 	.word	0x1fe00fff
 800cf28:	55e63b89 	.word	0x55e63b89
 800cf2c:	02faf080 	.word	0x02faf080
 800cf30:	017d7840 	.word	0x017d7840

0800cf34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf40:	f107 030c 	add.w	r3, r7, #12
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa40 	bl	800d3cc <SD_SendStatus>
 800cf4c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d005      	beq.n	800cf60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	431a      	orrs	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	0a5b      	lsrs	r3, r3, #9
 800cf64:	f003 030f 	and.w	r3, r3, #15
 800cf68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf6a:	693b      	ldr	r3, [r7, #16]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b090      	sub	sp, #64	@ 0x40
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cf80:	f7f5 fe32 	bl	8002be8 <HAL_GetTick>
 800cf84:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f003 f911 	bl	80101b2 <SDMMC_GetPowerState>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cf9a:	e0b5      	b.n	800d108 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa0:	2b03      	cmp	r3, #3
 800cfa2:	d02e      	beq.n	800d002 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f003 fb5c 	bl	8010666 <SDMMC_CmdSendCID>
 800cfae:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <SD_InitCard+0x46>
    {
      return errorstate;
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb8:	e0a6      	b.n	800d108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f003 f93c 	bl	801023e <SDMMC_GetResponse>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2104      	movs	r1, #4
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f003 f933 	bl	801023e <SDMMC_GetResponse>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2108      	movs	r1, #8
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f003 f92a 	bl	801023e <SDMMC_GetResponse>
 800cfea:	4602      	mov	r2, r0
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	210c      	movs	r1, #12
 800cff6:	4618      	mov	r0, r3
 800cff8:	f003 f921 	bl	801023e <SDMMC_GetResponse>
 800cffc:	4602      	mov	r2, r0
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d006:	2b03      	cmp	r3, #3
 800d008:	d01d      	beq.n	800d046 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d00a:	e019      	b.n	800d040 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f107 020a 	add.w	r2, r7, #10
 800d014:	4611      	mov	r1, r2
 800d016:	4618      	mov	r0, r3
 800d018:	f003 fb64 	bl	80106e4 <SDMMC_CmdSetRelAdd>
 800d01c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d026:	e06f      	b.n	800d108 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d028:	f7f5 fdde 	bl	8002be8 <HAL_GetTick>
 800d02c:	4602      	mov	r2, r0
 800d02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d036:	4293      	cmp	r3, r2
 800d038:	d902      	bls.n	800d040 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d03a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d03e:	e063      	b.n	800d108 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d040:	897b      	ldrh	r3, [r7, #10]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d0e2      	beq.n	800d00c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d036      	beq.n	800d0bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d04e:	897b      	ldrh	r3, [r7, #10]
 800d050:	461a      	mov	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d05e:	041b      	lsls	r3, r3, #16
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f003 fb1e 	bl	80106a4 <SDMMC_CmdSendCSD>
 800d068:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <SD_InitCard+0x100>
    {
      return errorstate;
 800d070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d072:	e049      	b.n	800d108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2100      	movs	r1, #0
 800d07a:	4618      	mov	r0, r3
 800d07c:	f003 f8df 	bl	801023e <SDMMC_GetResponse>
 800d080:	4602      	mov	r2, r0
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2104      	movs	r1, #4
 800d08c:	4618      	mov	r0, r3
 800d08e:	f003 f8d6 	bl	801023e <SDMMC_GetResponse>
 800d092:	4602      	mov	r2, r0
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2108      	movs	r1, #8
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f003 f8cd 	bl	801023e <SDMMC_GetResponse>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	210c      	movs	r1, #12
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f003 f8c4 	bl	801023e <SDMMC_GetResponse>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2104      	movs	r1, #4
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f003 f8bb 	bl	801023e <SDMMC_GetResponse>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	0d1a      	lsrs	r2, r3, #20
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0d0:	f107 030c 	add.w	r3, r7, #12
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7ff fb8c 	bl	800c7f4 <HAL_SD_GetCardCSD>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d0e6:	e00f      	b.n	800d108 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0f0:	041b      	lsls	r3, r3, #16
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f003 f9cd 	bl	8010494 <SDMMC_CmdSelDesel>
 800d0fa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <SD_InitCard+0x192>
  {
    return errorstate;
 800d102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d104:	e000      	b.n	800d108 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d106:	2300      	movs	r3, #0
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3740      	adds	r7, #64	@ 0x40
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d118:	2300      	movs	r3, #0
 800d11a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d11c:	2300      	movs	r3, #0
 800d11e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	f003 f9d6 	bl	80104da <SDMMC_CmdGoIdleState>
 800d12e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	e072      	b.n	800d220 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4618      	mov	r0, r3
 800d140:	f003 f9e9 	bl	8010516 <SDMMC_CmdOperCond>
 800d144:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d14c:	d10d      	bne.n	800d16a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2200      	movs	r2, #0
 800d152:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4618      	mov	r0, r3
 800d15a:	f003 f9be 	bl	80104da <SDMMC_CmdGoIdleState>
 800d15e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d004      	beq.n	800d170 <SD_PowerON+0x60>
    {
      return errorstate;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	e05a      	b.n	800d220 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d174:	2b01      	cmp	r3, #1
 800d176:	d137      	bne.n	800d1e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2100      	movs	r1, #0
 800d17e:	4618      	mov	r0, r3
 800d180:	f003 f9e9 	bl	8010556 <SDMMC_CmdAppCommand>
 800d184:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02d      	beq.n	800d1e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d18c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d190:	e046      	b.n	800d220 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2100      	movs	r1, #0
 800d198:	4618      	mov	r0, r3
 800d19a:	f003 f9dc 	bl	8010556 <SDMMC_CmdAppCommand>
 800d19e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <SD_PowerON+0x9a>
    {
      return errorstate;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	e03a      	b.n	800d220 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	491e      	ldr	r1, [pc, #120]	@ (800d228 <SD_PowerON+0x118>)
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f003 f9f3 	bl	801059c <SDMMC_CmdAppOperCommand>
 800d1b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d1c2:	e02d      	b.n	800d220 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f003 f837 	bl	801023e <SDMMC_GetResponse>
 800d1d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	0fdb      	lsrs	r3, r3, #31
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d101      	bne.n	800d1de <SD_PowerON+0xce>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e000      	b.n	800d1e0 <SD_PowerON+0xd0>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	613b      	str	r3, [r7, #16]

    count++;
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d802      	bhi.n	800d1f8 <SD_PowerON+0xe8>
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d0cc      	beq.n	800d192 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d902      	bls.n	800d208 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d202:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d206:	e00b      	b.n	800d220 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	c1100000 	.word	0xc1100000

0800d22c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08c      	sub	sp, #48	@ 0x30
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d236:	f7f5 fcd7 	bl	8002be8 <HAL_GetTick>
 800d23a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2100      	movs	r1, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f002 fff9 	bl	801023e <SDMMC_GetResponse>
 800d24c:	4603      	mov	r3, r0
 800d24e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d256:	d102      	bne.n	800d25e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d258:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d25c:	e0b0      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2140      	movs	r1, #64	@ 0x40
 800d264:	4618      	mov	r0, r3
 800d266:	f003 f829 	bl	80102bc <SDMMC_CmdBlockLength>
 800d26a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d005      	beq.n	800d27e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	e0a0      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d286:	041b      	lsls	r3, r3, #16
 800d288:	4619      	mov	r1, r3
 800d28a:	4610      	mov	r0, r2
 800d28c:	f003 f963 	bl	8010556 <SDMMC_CmdAppCommand>
 800d290:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d005      	beq.n	800d2a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	e08d      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d2aa:	2340      	movs	r3, #64	@ 0x40
 800d2ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d2ae:	2360      	movs	r3, #96	@ 0x60
 800d2b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f107 0208 	add.w	r2, r7, #8
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f002 ffcb 	bl	8010264 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f003 fa4b 	bl	801076e <SDMMC_CmdStatusRegister>
 800d2d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d02b      	beq.n	800d338 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	e069      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d013      	beq.n	800d322 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2fe:	e00d      	b.n	800d31c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4618      	mov	r0, r3
 800d306:	f002 ff25 	bl	8010154 <SDMMC_ReadFIFO>
 800d30a:	4602      	mov	r2, r0
 800d30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30e:	601a      	str	r2, [r3, #0]
        pData++;
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	3304      	adds	r3, #4
 800d314:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	3301      	adds	r3, #1
 800d31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31e:	2b07      	cmp	r3, #7
 800d320:	d9ee      	bls.n	800d300 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d322:	f7f5 fc61 	bl	8002be8 <HAL_GetTick>
 800d326:	4602      	mov	r2, r0
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d330:	d102      	bne.n	800d338 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d332:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d336:	e043      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d33e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d342:	2b00      	cmp	r3, #0
 800d344:	d0d2      	beq.n	800d2ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d34c:	f003 0308 	and.w	r3, r3, #8
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d354:	2308      	movs	r3, #8
 800d356:	e033      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d35e:	f003 0302 	and.w	r3, r3, #2
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d366:	2302      	movs	r3, #2
 800d368:	e02a      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d370:	f003 0320 	and.w	r3, r3, #32
 800d374:	2b00      	cmp	r3, #0
 800d376:	d017      	beq.n	800d3a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d378:	2320      	movs	r3, #32
 800d37a:	e021      	b.n	800d3c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f002 fee7 	bl	8010154 <SDMMC_ReadFIFO>
 800d386:	4602      	mov	r2, r0
 800d388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38a:	601a      	str	r2, [r3, #0]
    pData++;
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	3304      	adds	r3, #4
 800d390:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d392:	f7f5 fc29 	bl	8002be8 <HAL_GetTick>
 800d396:	4602      	mov	r2, r0
 800d398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a0:	d102      	bne.n	800d3a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d3a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3a6:	e00b      	b.n	800d3c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e2      	bne.n	800d37c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a03      	ldr	r2, [pc, #12]	@ (800d3c8 <SD_SendSDStatus+0x19c>)
 800d3bc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3730      	adds	r7, #48	@ 0x30
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	18000f3a 	.word	0x18000f3a

0800d3cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d3dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d3e0:	e018      	b.n	800d414 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3ea:	041b      	lsls	r3, r3, #16
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	f003 f99a 	bl	8010728 <SDMMC_CmdSendStatus>
 800d3f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	e009      	b.n	800d414 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2100      	movs	r1, #0
 800d406:	4618      	mov	r0, r3
 800d408:	f002 ff19 	bl	801023e <SDMMC_GetResponse>
 800d40c:	4602      	mov	r2, r0
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	2300      	movs	r3, #0
 800d42a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2100      	movs	r1, #0
 800d432:	4618      	mov	r0, r3
 800d434:	f002 ff03 	bl	801023e <SDMMC_GetResponse>
 800d438:	4603      	mov	r3, r0
 800d43a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d43e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d442:	d102      	bne.n	800d44a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d444:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d448:	e02f      	b.n	800d4aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d44a:	f107 030c 	add.w	r3, r7, #12
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f879 	bl	800d548 <SD_FindSCR>
 800d456:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	e023      	b.n	800d4aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d01c      	beq.n	800d4a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d474:	041b      	lsls	r3, r3, #16
 800d476:	4619      	mov	r1, r3
 800d478:	4610      	mov	r0, r2
 800d47a:	f003 f86c 	bl	8010556 <SDMMC_CmdAppCommand>
 800d47e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	e00f      	b.n	800d4aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2102      	movs	r1, #2
 800d490:	4618      	mov	r0, r3
 800d492:	f003 f8a3 	bl	80105dc <SDMMC_CmdBusWidth>
 800d496:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	e003      	b.n	800d4aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e001      	b.n	800d4aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d4a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3718      	adds	r7, #24
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b086      	sub	sp, #24
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f002 feb8 	bl	801023e <SDMMC_GetResponse>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4d8:	d102      	bne.n	800d4e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d4de:	e02f      	b.n	800d540 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d4e0:	f107 030c 	add.w	r3, r7, #12
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f82e 	bl	800d548 <SD_FindSCR>
 800d4ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	e023      	b.n	800d540 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d01c      	beq.n	800d53c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d50a:	041b      	lsls	r3, r3, #16
 800d50c:	4619      	mov	r1, r3
 800d50e:	4610      	mov	r0, r2
 800d510:	f003 f821 	bl	8010556 <SDMMC_CmdAppCommand>
 800d514:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	e00f      	b.n	800d540 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2100      	movs	r1, #0
 800d526:	4618      	mov	r0, r3
 800d528:	f003 f858 	bl	80105dc <SDMMC_CmdBusWidth>
 800d52c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d001      	beq.n	800d538 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	e003      	b.n	800d540 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d538:	2300      	movs	r3, #0
 800d53a:	e001      	b.n	800d540 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d53c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08e      	sub	sp, #56	@ 0x38
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d552:	f7f5 fb49 	bl	8002be8 <HAL_GetTick>
 800d556:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d55c:	2300      	movs	r3, #0
 800d55e:	60bb      	str	r3, [r7, #8]
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2108      	movs	r1, #8
 800d56e:	4618      	mov	r0, r3
 800d570:	f002 fea4 	bl	80102bc <SDMMC_CmdBlockLength>
 800d574:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57e:	e0ad      	b.n	800d6dc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d588:	041b      	lsls	r3, r3, #16
 800d58a:	4619      	mov	r1, r3
 800d58c:	4610      	mov	r0, r2
 800d58e:	f002 ffe2 	bl	8010556 <SDMMC_CmdAppCommand>
 800d592:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <SD_FindSCR+0x56>
  {
    return errorstate;
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	e09e      	b.n	800d6dc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d59e:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d5a4:	2308      	movs	r3, #8
 800d5a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d5a8:	2330      	movs	r3, #48	@ 0x30
 800d5aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f107 0210 	add.w	r2, r7, #16
 800d5c0:	4611      	mov	r1, r2
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f002 fe4e 	bl	8010264 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f003 f828 	bl	8010622 <SDMMC_CmdSendSCR>
 800d5d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d027      	beq.n	800d62a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5dc:	e07e      	b.n	800d6dc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d113      	bne.n	800d614 <SD_FindSCR+0xcc>
 800d5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d110      	bne.n	800d614 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f002 fdac 	bl	8010154 <SDMMC_ReadFIFO>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4618      	mov	r0, r3
 800d606:	f002 fda5 	bl	8010154 <SDMMC_ReadFIFO>
 800d60a:	4603      	mov	r3, r0
 800d60c:	60fb      	str	r3, [r7, #12]
      index++;
 800d60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d610:	3301      	adds	r3, #1
 800d612:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d614:	f7f5 fae8 	bl	8002be8 <HAL_GetTick>
 800d618:	4602      	mov	r2, r0
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d622:	d102      	bne.n	800d62a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d624:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d628:	e058      	b.n	800d6dc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d630:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d634:	4013      	ands	r3, r2
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0d1      	beq.n	800d5de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d640:	f003 0308 	and.w	r3, r3, #8
 800d644:	2b00      	cmp	r3, #0
 800d646:	d005      	beq.n	800d654 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2208      	movs	r2, #8
 800d64e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d650:	2308      	movs	r3, #8
 800d652:	e043      	b.n	800d6dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d65a:	f003 0302 	and.w	r3, r3, #2
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d005      	beq.n	800d66e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2202      	movs	r2, #2
 800d668:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d66a:	2302      	movs	r3, #2
 800d66c:	e036      	b.n	800d6dc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d674:	f003 0320 	and.w	r3, r3, #32
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d005      	beq.n	800d688 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2220      	movs	r2, #32
 800d682:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d684:	2320      	movs	r3, #32
 800d686:	e029      	b.n	800d6dc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a15      	ldr	r2, [pc, #84]	@ (800d6e4 <SD_FindSCR+0x19c>)
 800d68e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	061a      	lsls	r2, r3, #24
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	021b      	lsls	r3, r3, #8
 800d698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d69c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	0a1b      	lsrs	r3, r3, #8
 800d6a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d6a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	0e1b      	lsrs	r3, r3, #24
 800d6ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b0:	601a      	str	r2, [r3, #0]
    scr++;
 800d6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	061a      	lsls	r2, r3, #24
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	021b      	lsls	r3, r3, #8
 800d6c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d6c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	0a1b      	lsrs	r3, r3, #8
 800d6ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	0e1b      	lsrs	r3, r3, #24
 800d6d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3738      	adds	r7, #56	@ 0x38
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	18000f3a 	.word	0x18000f3a

0800d6e8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6fa:	2b1f      	cmp	r3, #31
 800d6fc:	d936      	bls.n	800d76c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d6fe:	2300      	movs	r3, #0
 800d700:	617b      	str	r3, [r7, #20]
 800d702:	e027      	b.n	800d754 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4618      	mov	r0, r3
 800d70a:	f002 fd23 	bl	8010154 <SDMMC_ReadFIFO>
 800d70e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	b2da      	uxtb	r2, r3
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	3301      	adds	r3, #1
 800d71c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	0a1b      	lsrs	r3, r3, #8
 800d722:	b2da      	uxtb	r2, r3
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	3301      	adds	r3, #1
 800d72c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	0c1b      	lsrs	r3, r3, #16
 800d732:	b2da      	uxtb	r2, r3
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	3301      	adds	r3, #1
 800d73c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	0e1b      	lsrs	r3, r3, #24
 800d742:	b2da      	uxtb	r2, r3
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	3301      	adds	r3, #1
 800d74c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	3301      	adds	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b07      	cmp	r3, #7
 800d758:	d9d4      	bls.n	800d704 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d764:	f1a3 0220 	sub.w	r2, r3, #32
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d76c:	bf00      	nop
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	69db      	ldr	r3, [r3, #28]
 800d780:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	2b1f      	cmp	r3, #31
 800d788:	d93a      	bls.n	800d800 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d78a:	2300      	movs	r3, #0
 800d78c:	617b      	str	r3, [r7, #20]
 800d78e:	e02b      	b.n	800d7e8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	3301      	adds	r3, #1
 800d79a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	021a      	lsls	r2, r3, #8
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	041a      	lsls	r2, r3, #16
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	061a      	lsls	r2, r3, #24
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f107 020c 	add.w	r2, r7, #12
 800d7da:	4611      	mov	r1, r2
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f002 fcc6 	bl	801016e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	617b      	str	r3, [r7, #20]
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2b07      	cmp	r3, #7
 800d7ec:	d9d0      	bls.n	800d790 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	f1a3 0220 	sub.w	r2, r3, #32
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	621a      	str	r2, [r3, #32]
  }
}
 800d800:	bf00      	nop
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d866:	2301      	movs	r3, #1
 800d868:	e049      	b.n	800d8fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d870:	b2db      	uxtb	r3, r3
 800d872:	2b00      	cmp	r3, #0
 800d874:	d106      	bne.n	800d884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7f4 fea6 	bl	80025d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2202      	movs	r2, #2
 800d888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	3304      	adds	r3, #4
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f000 fc58 	bl	800e14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8fc:	2300      	movs	r3, #0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
	...

0800d908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d001      	beq.n	800d920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e05e      	b.n	800d9de <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2202      	movs	r2, #2
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68da      	ldr	r2, [r3, #12]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f042 0201 	orr.w	r2, r2, #1
 800d936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a2b      	ldr	r2, [pc, #172]	@ (800d9ec <HAL_TIM_Base_Start_IT+0xe4>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d02c      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d94a:	d027      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a27      	ldr	r2, [pc, #156]	@ (800d9f0 <HAL_TIM_Base_Start_IT+0xe8>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d022      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a26      	ldr	r2, [pc, #152]	@ (800d9f4 <HAL_TIM_Base_Start_IT+0xec>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d01d      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a24      	ldr	r2, [pc, #144]	@ (800d9f8 <HAL_TIM_Base_Start_IT+0xf0>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d018      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a23      	ldr	r2, [pc, #140]	@ (800d9fc <HAL_TIM_Base_Start_IT+0xf4>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d013      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a21      	ldr	r2, [pc, #132]	@ (800da00 <HAL_TIM_Base_Start_IT+0xf8>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d00e      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a20      	ldr	r2, [pc, #128]	@ (800da04 <HAL_TIM_Base_Start_IT+0xfc>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d009      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a1e      	ldr	r2, [pc, #120]	@ (800da08 <HAL_TIM_Base_Start_IT+0x100>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d004      	beq.n	800d99c <HAL_TIM_Base_Start_IT+0x94>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a1d      	ldr	r2, [pc, #116]	@ (800da0c <HAL_TIM_Base_Start_IT+0x104>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d115      	bne.n	800d9c8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689a      	ldr	r2, [r3, #8]
 800d9a2:	4b1b      	ldr	r3, [pc, #108]	@ (800da10 <HAL_TIM_Base_Start_IT+0x108>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2b06      	cmp	r3, #6
 800d9ac:	d015      	beq.n	800d9da <HAL_TIM_Base_Start_IT+0xd2>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9b4:	d011      	beq.n	800d9da <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f042 0201 	orr.w	r2, r2, #1
 800d9c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9c6:	e008      	b.n	800d9da <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f042 0201 	orr.w	r2, r2, #1
 800d9d6:	601a      	str	r2, [r3, #0]
 800d9d8:	e000      	b.n	800d9dc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	40010000 	.word	0x40010000
 800d9f0:	40000400 	.word	0x40000400
 800d9f4:	40000800 	.word	0x40000800
 800d9f8:	40000c00 	.word	0x40000c00
 800d9fc:	40010400 	.word	0x40010400
 800da00:	40001800 	.word	0x40001800
 800da04:	40014000 	.word	0x40014000
 800da08:	4000e000 	.word	0x4000e000
 800da0c:	4000e400 	.word	0x4000e400
 800da10:	00010007 	.word	0x00010007

0800da14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e049      	b.n	800daba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d106      	bne.n	800da40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f841 	bl	800dac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2202      	movs	r2, #2
 800da44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	3304      	adds	r3, #4
 800da50:	4619      	mov	r1, r3
 800da52:	4610      	mov	r0, r2
 800da54:	f000 fb7a 	bl	800e14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2201      	movs	r2, #1
 800da64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2201      	movs	r2, #1
 800da6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dab8:	2300      	movs	r3, #0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800daca:	bf00      	nop
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f003 0302 	and.w	r3, r3, #2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d020      	beq.n	800db3a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f003 0302 	and.w	r3, r3, #2
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d01b      	beq.n	800db3a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f06f 0202 	mvn.w	r2, #2
 800db0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	f003 0303 	and.w	r3, r3, #3
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 faf5 	bl	800e110 <HAL_TIM_IC_CaptureCallback>
 800db26:	e005      	b.n	800db34 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fae7 	bl	800e0fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 faf8 	bl	800e124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f003 0304 	and.w	r3, r3, #4
 800db40:	2b00      	cmp	r3, #0
 800db42:	d020      	beq.n	800db86 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f003 0304 	and.w	r3, r3, #4
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d01b      	beq.n	800db86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f06f 0204 	mvn.w	r2, #4
 800db56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2202      	movs	r2, #2
 800db5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d003      	beq.n	800db74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 facf 	bl	800e110 <HAL_TIM_IC_CaptureCallback>
 800db72:	e005      	b.n	800db80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fac1 	bl	800e0fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fad2 	bl	800e124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	f003 0308 	and.w	r3, r3, #8
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d020      	beq.n	800dbd2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f003 0308 	and.w	r3, r3, #8
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01b      	beq.n	800dbd2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f06f 0208 	mvn.w	r2, #8
 800dba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2204      	movs	r2, #4
 800dba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	f003 0303 	and.w	r3, r3, #3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 faa9 	bl	800e110 <HAL_TIM_IC_CaptureCallback>
 800dbbe:	e005      	b.n	800dbcc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fa9b 	bl	800e0fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 faac 	bl	800e124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	f003 0310 	and.w	r3, r3, #16
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d020      	beq.n	800dc1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f003 0310 	and.w	r3, r3, #16
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d01b      	beq.n	800dc1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f06f 0210 	mvn.w	r2, #16
 800dbee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2208      	movs	r2, #8
 800dbf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	69db      	ldr	r3, [r3, #28]
 800dbfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d003      	beq.n	800dc0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fa83 	bl	800e110 <HAL_TIM_IC_CaptureCallback>
 800dc0a:	e005      	b.n	800dc18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fa75 	bl	800e0fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fa86 	bl	800e124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00c      	beq.n	800dc42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d007      	beq.n	800dc42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f06f 0201 	mvn.w	r2, #1
 800dc3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7f3 ffb5 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d104      	bne.n	800dc56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00c      	beq.n	800dc70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d007      	beq.n	800dc70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 ffc6 	bl	800ebfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00c      	beq.n	800dc94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d007      	beq.n	800dc94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dc8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 ffbe 	bl	800ec10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00c      	beq.n	800dcb8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d007      	beq.n	800dcb8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fa40 	bl	800e138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	f003 0320 	and.w	r3, r3, #32
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00c      	beq.n	800dcdc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f003 0320 	and.w	r3, r3, #32
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f06f 0220 	mvn.w	r2, #32
 800dcd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 ff86 	bl	800ebe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcdc:	bf00      	nop
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d101      	bne.n	800dd02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dcfe:	2302      	movs	r3, #2
 800dd00:	e0ff      	b.n	800df02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b14      	cmp	r3, #20
 800dd0e:	f200 80f0 	bhi.w	800def2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd12:	a201      	add	r2, pc, #4	@ (adr r2, 800dd18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd6d 	.word	0x0800dd6d
 800dd1c:	0800def3 	.word	0x0800def3
 800dd20:	0800def3 	.word	0x0800def3
 800dd24:	0800def3 	.word	0x0800def3
 800dd28:	0800ddad 	.word	0x0800ddad
 800dd2c:	0800def3 	.word	0x0800def3
 800dd30:	0800def3 	.word	0x0800def3
 800dd34:	0800def3 	.word	0x0800def3
 800dd38:	0800ddef 	.word	0x0800ddef
 800dd3c:	0800def3 	.word	0x0800def3
 800dd40:	0800def3 	.word	0x0800def3
 800dd44:	0800def3 	.word	0x0800def3
 800dd48:	0800de2f 	.word	0x0800de2f
 800dd4c:	0800def3 	.word	0x0800def3
 800dd50:	0800def3 	.word	0x0800def3
 800dd54:	0800def3 	.word	0x0800def3
 800dd58:	0800de71 	.word	0x0800de71
 800dd5c:	0800def3 	.word	0x0800def3
 800dd60:	0800def3 	.word	0x0800def3
 800dd64:	0800def3 	.word	0x0800def3
 800dd68:	0800deb1 	.word	0x0800deb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68b9      	ldr	r1, [r7, #8]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f000 fa9c 	bl	800e2b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	699a      	ldr	r2, [r3, #24]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f042 0208 	orr.w	r2, r2, #8
 800dd86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	699a      	ldr	r2, [r3, #24]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f022 0204 	bic.w	r2, r2, #4
 800dd96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	6999      	ldr	r1, [r3, #24]
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	691a      	ldr	r2, [r3, #16]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	430a      	orrs	r2, r1
 800dda8:	619a      	str	r2, [r3, #24]
      break;
 800ddaa:	e0a5      	b.n	800def8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fb0c 	bl	800e3d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	699a      	ldr	r2, [r3, #24]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ddc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	699a      	ldr	r2, [r3, #24]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6999      	ldr	r1, [r3, #24]
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	021a      	lsls	r2, r3, #8
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	430a      	orrs	r2, r1
 800ddea:	619a      	str	r2, [r3, #24]
      break;
 800ddec:	e084      	b.n	800def8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68b9      	ldr	r1, [r7, #8]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 fb75 	bl	800e4e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	69da      	ldr	r2, [r3, #28]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f042 0208 	orr.w	r2, r2, #8
 800de08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	69da      	ldr	r2, [r3, #28]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f022 0204 	bic.w	r2, r2, #4
 800de18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69d9      	ldr	r1, [r3, #28]
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	691a      	ldr	r2, [r3, #16]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	430a      	orrs	r2, r1
 800de2a:	61da      	str	r2, [r3, #28]
      break;
 800de2c:	e064      	b.n	800def8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68b9      	ldr	r1, [r7, #8]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 fbdd 	bl	800e5f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	69da      	ldr	r2, [r3, #28]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69da      	ldr	r2, [r3, #28]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	69d9      	ldr	r1, [r3, #28]
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	021a      	lsls	r2, r3, #8
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	430a      	orrs	r2, r1
 800de6c:	61da      	str	r2, [r3, #28]
      break;
 800de6e:	e043      	b.n	800def8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	4618      	mov	r0, r3
 800de78:	f000 fc26 	bl	800e6c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f042 0208 	orr.w	r2, r2, #8
 800de8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f022 0204 	bic.w	r2, r2, #4
 800de9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	691a      	ldr	r2, [r3, #16]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	430a      	orrs	r2, r1
 800deac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800deae:	e023      	b.n	800def8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fc6a 	bl	800e790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800deca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800deda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	021a      	lsls	r2, r3, #8
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	430a      	orrs	r2, r1
 800deee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800def0:	e002      	b.n	800def8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	75fb      	strb	r3, [r7, #23]
      break;
 800def6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df00:	7dfb      	ldrb	r3, [r7, #23]
}
 800df02:	4618      	mov	r0, r3
 800df04:	3718      	adds	r7, #24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop

0800df0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df16:	2300      	movs	r3, #0
 800df18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df20:	2b01      	cmp	r3, #1
 800df22:	d101      	bne.n	800df28 <HAL_TIM_ConfigClockSource+0x1c>
 800df24:	2302      	movs	r3, #2
 800df26:	e0dc      	b.n	800e0e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2202      	movs	r2, #2
 800df34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df40:	68ba      	ldr	r2, [r7, #8]
 800df42:	4b6a      	ldr	r3, [pc, #424]	@ (800e0ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800df44:	4013      	ands	r3, r2
 800df46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a64      	ldr	r2, [pc, #400]	@ (800e0f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	f000 80a9 	beq.w	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800df64:	4a62      	ldr	r2, [pc, #392]	@ (800e0f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df66:	4293      	cmp	r3, r2
 800df68:	f200 80ae 	bhi.w	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800df6c:	4a61      	ldr	r2, [pc, #388]	@ (800e0f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	f000 80a1 	beq.w	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800df74:	4a5f      	ldr	r2, [pc, #380]	@ (800e0f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800df76:	4293      	cmp	r3, r2
 800df78:	f200 80a6 	bhi.w	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800df7c:	4a5e      	ldr	r2, [pc, #376]	@ (800e0f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	f000 8099 	beq.w	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800df84:	4a5c      	ldr	r2, [pc, #368]	@ (800e0f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800df86:	4293      	cmp	r3, r2
 800df88:	f200 809e 	bhi.w	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800df8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df90:	f000 8091 	beq.w	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800df94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df98:	f200 8096 	bhi.w	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800df9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfa0:	f000 8089 	beq.w	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dfa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfa8:	f200 808e 	bhi.w	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfb0:	d03e      	beq.n	800e030 <HAL_TIM_ConfigClockSource+0x124>
 800dfb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfb6:	f200 8087 	bhi.w	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfbe:	f000 8086 	beq.w	800e0ce <HAL_TIM_ConfigClockSource+0x1c2>
 800dfc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfc6:	d87f      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfc8:	2b70      	cmp	r3, #112	@ 0x70
 800dfca:	d01a      	beq.n	800e002 <HAL_TIM_ConfigClockSource+0xf6>
 800dfcc:	2b70      	cmp	r3, #112	@ 0x70
 800dfce:	d87b      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfd0:	2b60      	cmp	r3, #96	@ 0x60
 800dfd2:	d050      	beq.n	800e076 <HAL_TIM_ConfigClockSource+0x16a>
 800dfd4:	2b60      	cmp	r3, #96	@ 0x60
 800dfd6:	d877      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfd8:	2b50      	cmp	r3, #80	@ 0x50
 800dfda:	d03c      	beq.n	800e056 <HAL_TIM_ConfigClockSource+0x14a>
 800dfdc:	2b50      	cmp	r3, #80	@ 0x50
 800dfde:	d873      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe0:	2b40      	cmp	r3, #64	@ 0x40
 800dfe2:	d058      	beq.n	800e096 <HAL_TIM_ConfigClockSource+0x18a>
 800dfe4:	2b40      	cmp	r3, #64	@ 0x40
 800dfe6:	d86f      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe8:	2b30      	cmp	r3, #48	@ 0x30
 800dfea:	d064      	beq.n	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dfec:	2b30      	cmp	r3, #48	@ 0x30
 800dfee:	d86b      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff0:	2b20      	cmp	r3, #32
 800dff2:	d060      	beq.n	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dff4:	2b20      	cmp	r3, #32
 800dff6:	d867      	bhi.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d05c      	beq.n	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800dffc:	2b10      	cmp	r3, #16
 800dffe:	d05a      	beq.n	800e0b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800e000:	e062      	b.n	800e0c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e012:	f000 fca1 	bl	800e958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	689b      	ldr	r3, [r3, #8]
 800e01c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	609a      	str	r2, [r3, #8]
      break;
 800e02e:	e04f      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e040:	f000 fc8a 	bl	800e958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	689a      	ldr	r2, [r3, #8]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e052:	609a      	str	r2, [r3, #8]
      break;
 800e054:	e03c      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e062:	461a      	mov	r2, r3
 800e064:	f000 fbfa 	bl	800e85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2150      	movs	r1, #80	@ 0x50
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 fc54 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e074:	e02c      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e082:	461a      	mov	r2, r3
 800e084:	f000 fc19 	bl	800e8ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2160      	movs	r1, #96	@ 0x60
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 fc44 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e094:	e01c      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f000 fbda 	bl	800e85c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2140      	movs	r1, #64	@ 0x40
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 fc34 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e0b4:	e00c      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	f000 fc2b 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e0c6:	e003      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e0cc:	e000      	b.n	800e0d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e0ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	ffceff88 	.word	0xffceff88
 800e0f0:	00100040 	.word	0x00100040
 800e0f4:	00100030 	.word	0x00100030
 800e0f8:	00100020 	.word	0x00100020

0800e0fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a4a      	ldr	r2, [pc, #296]	@ (800e288 <TIM_Base_SetConfig+0x13c>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d013      	beq.n	800e18c <TIM_Base_SetConfig+0x40>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e16a:	d00f      	beq.n	800e18c <TIM_Base_SetConfig+0x40>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a47      	ldr	r2, [pc, #284]	@ (800e28c <TIM_Base_SetConfig+0x140>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d00b      	beq.n	800e18c <TIM_Base_SetConfig+0x40>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a46      	ldr	r2, [pc, #280]	@ (800e290 <TIM_Base_SetConfig+0x144>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d007      	beq.n	800e18c <TIM_Base_SetConfig+0x40>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a45      	ldr	r2, [pc, #276]	@ (800e294 <TIM_Base_SetConfig+0x148>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d003      	beq.n	800e18c <TIM_Base_SetConfig+0x40>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a44      	ldr	r2, [pc, #272]	@ (800e298 <TIM_Base_SetConfig+0x14c>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d108      	bne.n	800e19e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	4313      	orrs	r3, r2
 800e19c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a39      	ldr	r2, [pc, #228]	@ (800e288 <TIM_Base_SetConfig+0x13c>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d027      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ac:	d023      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a36      	ldr	r2, [pc, #216]	@ (800e28c <TIM_Base_SetConfig+0x140>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d01f      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a35      	ldr	r2, [pc, #212]	@ (800e290 <TIM_Base_SetConfig+0x144>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d01b      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a34      	ldr	r2, [pc, #208]	@ (800e294 <TIM_Base_SetConfig+0x148>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d017      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a33      	ldr	r2, [pc, #204]	@ (800e298 <TIM_Base_SetConfig+0x14c>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d013      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a32      	ldr	r2, [pc, #200]	@ (800e29c <TIM_Base_SetConfig+0x150>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d00f      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a31      	ldr	r2, [pc, #196]	@ (800e2a0 <TIM_Base_SetConfig+0x154>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d00b      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a30      	ldr	r2, [pc, #192]	@ (800e2a4 <TIM_Base_SetConfig+0x158>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d007      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a2f      	ldr	r2, [pc, #188]	@ (800e2a8 <TIM_Base_SetConfig+0x15c>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d003      	beq.n	800e1f6 <TIM_Base_SetConfig+0xaa>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a2e      	ldr	r2, [pc, #184]	@ (800e2ac <TIM_Base_SetConfig+0x160>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d108      	bne.n	800e208 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	4313      	orrs	r3, r2
 800e206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	4313      	orrs	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	689a      	ldr	r2, [r3, #8]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a16      	ldr	r2, [pc, #88]	@ (800e288 <TIM_Base_SetConfig+0x13c>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d00f      	beq.n	800e254 <TIM_Base_SetConfig+0x108>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4a18      	ldr	r2, [pc, #96]	@ (800e298 <TIM_Base_SetConfig+0x14c>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d00b      	beq.n	800e254 <TIM_Base_SetConfig+0x108>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a17      	ldr	r2, [pc, #92]	@ (800e29c <TIM_Base_SetConfig+0x150>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d007      	beq.n	800e254 <TIM_Base_SetConfig+0x108>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a16      	ldr	r2, [pc, #88]	@ (800e2a0 <TIM_Base_SetConfig+0x154>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d003      	beq.n	800e254 <TIM_Base_SetConfig+0x108>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a15      	ldr	r2, [pc, #84]	@ (800e2a4 <TIM_Base_SetConfig+0x158>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d103      	bne.n	800e25c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	691a      	ldr	r2, [r3, #16]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691b      	ldr	r3, [r3, #16]
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d105      	bne.n	800e27a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	f023 0201 	bic.w	r2, r3, #1
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	611a      	str	r2, [r3, #16]
  }
}
 800e27a:	bf00      	nop
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	40010000 	.word	0x40010000
 800e28c:	40000400 	.word	0x40000400
 800e290:	40000800 	.word	0x40000800
 800e294:	40000c00 	.word	0x40000c00
 800e298:	40010400 	.word	0x40010400
 800e29c:	40014000 	.word	0x40014000
 800e2a0:	40014400 	.word	0x40014400
 800e2a4:	40014800 	.word	0x40014800
 800e2a8:	4000e000 	.word	0x4000e000
 800e2ac:	4000e400 	.word	0x4000e400

0800e2b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a1b      	ldr	r3, [r3, #32]
 800e2c4:	f023 0201 	bic.w	r2, r3, #1
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	699b      	ldr	r3, [r3, #24]
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	4b37      	ldr	r3, [pc, #220]	@ (800e3b8 <TIM_OC1_SetConfig+0x108>)
 800e2dc:	4013      	ands	r3, r2
 800e2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f023 0302 	bic.w	r3, r3, #2
 800e2f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	4313      	orrs	r3, r2
 800e302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a2d      	ldr	r2, [pc, #180]	@ (800e3bc <TIM_OC1_SetConfig+0x10c>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d00f      	beq.n	800e32c <TIM_OC1_SetConfig+0x7c>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a2c      	ldr	r2, [pc, #176]	@ (800e3c0 <TIM_OC1_SetConfig+0x110>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d00b      	beq.n	800e32c <TIM_OC1_SetConfig+0x7c>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a2b      	ldr	r2, [pc, #172]	@ (800e3c4 <TIM_OC1_SetConfig+0x114>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d007      	beq.n	800e32c <TIM_OC1_SetConfig+0x7c>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a2a      	ldr	r2, [pc, #168]	@ (800e3c8 <TIM_OC1_SetConfig+0x118>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d003      	beq.n	800e32c <TIM_OC1_SetConfig+0x7c>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a29      	ldr	r2, [pc, #164]	@ (800e3cc <TIM_OC1_SetConfig+0x11c>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d10c      	bne.n	800e346 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f023 0308 	bic.w	r3, r3, #8
 800e332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	68db      	ldr	r3, [r3, #12]
 800e338:	697a      	ldr	r2, [r7, #20]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	f023 0304 	bic.w	r3, r3, #4
 800e344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a1c      	ldr	r2, [pc, #112]	@ (800e3bc <TIM_OC1_SetConfig+0x10c>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d00f      	beq.n	800e36e <TIM_OC1_SetConfig+0xbe>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a1b      	ldr	r2, [pc, #108]	@ (800e3c0 <TIM_OC1_SetConfig+0x110>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d00b      	beq.n	800e36e <TIM_OC1_SetConfig+0xbe>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a1a      	ldr	r2, [pc, #104]	@ (800e3c4 <TIM_OC1_SetConfig+0x114>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d007      	beq.n	800e36e <TIM_OC1_SetConfig+0xbe>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a19      	ldr	r2, [pc, #100]	@ (800e3c8 <TIM_OC1_SetConfig+0x118>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d003      	beq.n	800e36e <TIM_OC1_SetConfig+0xbe>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4a18      	ldr	r2, [pc, #96]	@ (800e3cc <TIM_OC1_SetConfig+0x11c>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d111      	bne.n	800e392 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e37c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	4313      	orrs	r3, r2
 800e386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	4313      	orrs	r3, r2
 800e390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	693a      	ldr	r2, [r7, #16]
 800e396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	685a      	ldr	r2, [r3, #4]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	697a      	ldr	r2, [r7, #20]
 800e3aa:	621a      	str	r2, [r3, #32]
}
 800e3ac:	bf00      	nop
 800e3ae:	371c      	adds	r7, #28
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	fffeff8f 	.word	0xfffeff8f
 800e3bc:	40010000 	.word	0x40010000
 800e3c0:	40010400 	.word	0x40010400
 800e3c4:	40014000 	.word	0x40014000
 800e3c8:	40014400 	.word	0x40014400
 800e3cc:	40014800 	.word	0x40014800

0800e3d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b087      	sub	sp, #28
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a1b      	ldr	r3, [r3, #32]
 800e3e4:	f023 0210 	bic.w	r2, r3, #16
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	4b34      	ldr	r3, [pc, #208]	@ (800e4cc <TIM_OC2_SetConfig+0xfc>)
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	021b      	lsls	r3, r3, #8
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	4313      	orrs	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	f023 0320 	bic.w	r3, r3, #32
 800e41a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	011b      	lsls	r3, r3, #4
 800e422:	697a      	ldr	r2, [r7, #20]
 800e424:	4313      	orrs	r3, r2
 800e426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	4a29      	ldr	r2, [pc, #164]	@ (800e4d0 <TIM_OC2_SetConfig+0x100>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d003      	beq.n	800e438 <TIM_OC2_SetConfig+0x68>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a28      	ldr	r2, [pc, #160]	@ (800e4d4 <TIM_OC2_SetConfig+0x104>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d10d      	bne.n	800e454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e43e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	011b      	lsls	r3, r3, #4
 800e446:	697a      	ldr	r2, [r7, #20]
 800e448:	4313      	orrs	r3, r2
 800e44a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4a1e      	ldr	r2, [pc, #120]	@ (800e4d0 <TIM_OC2_SetConfig+0x100>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d00f      	beq.n	800e47c <TIM_OC2_SetConfig+0xac>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	4a1d      	ldr	r2, [pc, #116]	@ (800e4d4 <TIM_OC2_SetConfig+0x104>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d00b      	beq.n	800e47c <TIM_OC2_SetConfig+0xac>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4a1c      	ldr	r2, [pc, #112]	@ (800e4d8 <TIM_OC2_SetConfig+0x108>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d007      	beq.n	800e47c <TIM_OC2_SetConfig+0xac>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a1b      	ldr	r2, [pc, #108]	@ (800e4dc <TIM_OC2_SetConfig+0x10c>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d003      	beq.n	800e47c <TIM_OC2_SetConfig+0xac>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a1a      	ldr	r2, [pc, #104]	@ (800e4e0 <TIM_OC2_SetConfig+0x110>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d113      	bne.n	800e4a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e48a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	693a      	ldr	r2, [r7, #16]
 800e494:	4313      	orrs	r3, r2
 800e496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	685a      	ldr	r2, [r3, #4]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	621a      	str	r2, [r3, #32]
}
 800e4be:	bf00      	nop
 800e4c0:	371c      	adds	r7, #28
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	feff8fff 	.word	0xfeff8fff
 800e4d0:	40010000 	.word	0x40010000
 800e4d4:	40010400 	.word	0x40010400
 800e4d8:	40014000 	.word	0x40014000
 800e4dc:	40014400 	.word	0x40014400
 800e4e0:	40014800 	.word	0x40014800

0800e4e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b087      	sub	sp, #28
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a1b      	ldr	r3, [r3, #32]
 800e4f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a1b      	ldr	r3, [r3, #32]
 800e4f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	69db      	ldr	r3, [r3, #28]
 800e50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	4b33      	ldr	r3, [pc, #204]	@ (800e5dc <TIM_OC3_SetConfig+0xf8>)
 800e510:	4013      	ands	r3, r2
 800e512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f023 0303 	bic.w	r3, r3, #3
 800e51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	4313      	orrs	r3, r2
 800e524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e52c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	021b      	lsls	r3, r3, #8
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	4313      	orrs	r3, r2
 800e538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	4a28      	ldr	r2, [pc, #160]	@ (800e5e0 <TIM_OC3_SetConfig+0xfc>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d003      	beq.n	800e54a <TIM_OC3_SetConfig+0x66>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4a27      	ldr	r2, [pc, #156]	@ (800e5e4 <TIM_OC3_SetConfig+0x100>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d10d      	bne.n	800e566 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	021b      	lsls	r3, r3, #8
 800e558:	697a      	ldr	r2, [r7, #20]
 800e55a:	4313      	orrs	r3, r2
 800e55c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	4a1d      	ldr	r2, [pc, #116]	@ (800e5e0 <TIM_OC3_SetConfig+0xfc>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d00f      	beq.n	800e58e <TIM_OC3_SetConfig+0xaa>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a1c      	ldr	r2, [pc, #112]	@ (800e5e4 <TIM_OC3_SetConfig+0x100>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d00b      	beq.n	800e58e <TIM_OC3_SetConfig+0xaa>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a1b      	ldr	r2, [pc, #108]	@ (800e5e8 <TIM_OC3_SetConfig+0x104>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d007      	beq.n	800e58e <TIM_OC3_SetConfig+0xaa>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a1a      	ldr	r2, [pc, #104]	@ (800e5ec <TIM_OC3_SetConfig+0x108>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d003      	beq.n	800e58e <TIM_OC3_SetConfig+0xaa>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a19      	ldr	r2, [pc, #100]	@ (800e5f0 <TIM_OC3_SetConfig+0x10c>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d113      	bne.n	800e5b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e59c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	695b      	ldr	r3, [r3, #20]
 800e5a2:	011b      	lsls	r3, r3, #4
 800e5a4:	693a      	ldr	r2, [r7, #16]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	699b      	ldr	r3, [r3, #24]
 800e5ae:	011b      	lsls	r3, r3, #4
 800e5b0:	693a      	ldr	r2, [r7, #16]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	693a      	ldr	r2, [r7, #16]
 800e5ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	697a      	ldr	r2, [r7, #20]
 800e5ce:	621a      	str	r2, [r3, #32]
}
 800e5d0:	bf00      	nop
 800e5d2:	371c      	adds	r7, #28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	fffeff8f 	.word	0xfffeff8f
 800e5e0:	40010000 	.word	0x40010000
 800e5e4:	40010400 	.word	0x40010400
 800e5e8:	40014000 	.word	0x40014000
 800e5ec:	40014400 	.word	0x40014400
 800e5f0:	40014800 	.word	0x40014800

0800e5f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6a1b      	ldr	r3, [r3, #32]
 800e608:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	69db      	ldr	r3, [r3, #28]
 800e61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	4b24      	ldr	r3, [pc, #144]	@ (800e6b0 <TIM_OC4_SetConfig+0xbc>)
 800e620:	4013      	ands	r3, r2
 800e622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	021b      	lsls	r3, r3, #8
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	4313      	orrs	r3, r2
 800e636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e63e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	031b      	lsls	r3, r3, #12
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	4313      	orrs	r3, r2
 800e64a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a19      	ldr	r2, [pc, #100]	@ (800e6b4 <TIM_OC4_SetConfig+0xc0>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d00f      	beq.n	800e674 <TIM_OC4_SetConfig+0x80>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a18      	ldr	r2, [pc, #96]	@ (800e6b8 <TIM_OC4_SetConfig+0xc4>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d00b      	beq.n	800e674 <TIM_OC4_SetConfig+0x80>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a17      	ldr	r2, [pc, #92]	@ (800e6bc <TIM_OC4_SetConfig+0xc8>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d007      	beq.n	800e674 <TIM_OC4_SetConfig+0x80>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a16      	ldr	r2, [pc, #88]	@ (800e6c0 <TIM_OC4_SetConfig+0xcc>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d003      	beq.n	800e674 <TIM_OC4_SetConfig+0x80>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a15      	ldr	r2, [pc, #84]	@ (800e6c4 <TIM_OC4_SetConfig+0xd0>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d109      	bne.n	800e688 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e67a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	019b      	lsls	r3, r3, #6
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	4313      	orrs	r3, r2
 800e686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	685a      	ldr	r2, [r3, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	693a      	ldr	r2, [r7, #16]
 800e6a0:	621a      	str	r2, [r3, #32]
}
 800e6a2:	bf00      	nop
 800e6a4:	371c      	adds	r7, #28
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	feff8fff 	.word	0xfeff8fff
 800e6b4:	40010000 	.word	0x40010000
 800e6b8:	40010400 	.word	0x40010400
 800e6bc:	40014000 	.word	0x40014000
 800e6c0:	40014400 	.word	0x40014400
 800e6c4:	40014800 	.word	0x40014800

0800e6c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b087      	sub	sp, #28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a1b      	ldr	r3, [r3, #32]
 800e6d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6a1b      	ldr	r3, [r3, #32]
 800e6dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	4b21      	ldr	r3, [pc, #132]	@ (800e778 <TIM_OC5_SetConfig+0xb0>)
 800e6f4:	4013      	ands	r3, r2
 800e6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	4313      	orrs	r3, r2
 800e700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e708:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	041b      	lsls	r3, r3, #16
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	4313      	orrs	r3, r2
 800e714:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4a18      	ldr	r2, [pc, #96]	@ (800e77c <TIM_OC5_SetConfig+0xb4>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d00f      	beq.n	800e73e <TIM_OC5_SetConfig+0x76>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4a17      	ldr	r2, [pc, #92]	@ (800e780 <TIM_OC5_SetConfig+0xb8>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d00b      	beq.n	800e73e <TIM_OC5_SetConfig+0x76>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4a16      	ldr	r2, [pc, #88]	@ (800e784 <TIM_OC5_SetConfig+0xbc>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d007      	beq.n	800e73e <TIM_OC5_SetConfig+0x76>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a15      	ldr	r2, [pc, #84]	@ (800e788 <TIM_OC5_SetConfig+0xc0>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d003      	beq.n	800e73e <TIM_OC5_SetConfig+0x76>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a14      	ldr	r2, [pc, #80]	@ (800e78c <TIM_OC5_SetConfig+0xc4>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d109      	bne.n	800e752 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	695b      	ldr	r3, [r3, #20]
 800e74a:	021b      	lsls	r3, r3, #8
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	4313      	orrs	r3, r2
 800e750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	697a      	ldr	r2, [r7, #20]
 800e756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	685a      	ldr	r2, [r3, #4]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	621a      	str	r2, [r3, #32]
}
 800e76c:	bf00      	nop
 800e76e:	371c      	adds	r7, #28
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	fffeff8f 	.word	0xfffeff8f
 800e77c:	40010000 	.word	0x40010000
 800e780:	40010400 	.word	0x40010400
 800e784:	40014000 	.word	0x40014000
 800e788:	40014400 	.word	0x40014400
 800e78c:	40014800 	.word	0x40014800

0800e790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e790:	b480      	push	{r7}
 800e792:	b087      	sub	sp, #28
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a1b      	ldr	r3, [r3, #32]
 800e79e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6a1b      	ldr	r3, [r3, #32]
 800e7a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	4b22      	ldr	r3, [pc, #136]	@ (800e844 <TIM_OC6_SetConfig+0xb4>)
 800e7bc:	4013      	ands	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	021b      	lsls	r3, r3, #8
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e7d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	051b      	lsls	r3, r3, #20
 800e7da:	693a      	ldr	r2, [r7, #16]
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a19      	ldr	r2, [pc, #100]	@ (800e848 <TIM_OC6_SetConfig+0xb8>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d00f      	beq.n	800e808 <TIM_OC6_SetConfig+0x78>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a18      	ldr	r2, [pc, #96]	@ (800e84c <TIM_OC6_SetConfig+0xbc>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d00b      	beq.n	800e808 <TIM_OC6_SetConfig+0x78>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a17      	ldr	r2, [pc, #92]	@ (800e850 <TIM_OC6_SetConfig+0xc0>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d007      	beq.n	800e808 <TIM_OC6_SetConfig+0x78>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a16      	ldr	r2, [pc, #88]	@ (800e854 <TIM_OC6_SetConfig+0xc4>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d003      	beq.n	800e808 <TIM_OC6_SetConfig+0x78>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a15      	ldr	r2, [pc, #84]	@ (800e858 <TIM_OC6_SetConfig+0xc8>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d109      	bne.n	800e81c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e80e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	029b      	lsls	r3, r3, #10
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	4313      	orrs	r3, r2
 800e81a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	68fa      	ldr	r2, [r7, #12]
 800e826:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	685a      	ldr	r2, [r3, #4]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	693a      	ldr	r2, [r7, #16]
 800e834:	621a      	str	r2, [r3, #32]
}
 800e836:	bf00      	nop
 800e838:	371c      	adds	r7, #28
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	feff8fff 	.word	0xfeff8fff
 800e848:	40010000 	.word	0x40010000
 800e84c:	40010400 	.word	0x40010400
 800e850:	40014000 	.word	0x40014000
 800e854:	40014400 	.word	0x40014400
 800e858:	40014800 	.word	0x40014800

0800e85c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6a1b      	ldr	r3, [r3, #32]
 800e86c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	f023 0201 	bic.w	r2, r3, #1
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	011b      	lsls	r3, r3, #4
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	4313      	orrs	r3, r2
 800e890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	f023 030a 	bic.w	r3, r3, #10
 800e898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	621a      	str	r2, [r3, #32]
}
 800e8ae:	bf00      	nop
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b087      	sub	sp, #28
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	f023 0210 	bic.w	r2, r3, #16
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	699b      	ldr	r3, [r3, #24]
 800e8dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e8e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	031b      	lsls	r3, r3, #12
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e8f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	011b      	lsls	r3, r3, #4
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	693a      	ldr	r2, [r7, #16]
 800e906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	621a      	str	r2, [r3, #32]
}
 800e90e:	bf00      	nop
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
	...

0800e91c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	4b09      	ldr	r3, [pc, #36]	@ (800e954 <TIM_ITRx_SetConfig+0x38>)
 800e930:	4013      	ands	r3, r2
 800e932:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	4313      	orrs	r3, r2
 800e93a:	f043 0307 	orr.w	r3, r3, #7
 800e93e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	609a      	str	r2, [r3, #8]
}
 800e946:	bf00      	nop
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	ffcfff8f 	.word	0xffcfff8f

0800e958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e958:	b480      	push	{r7}
 800e95a:	b087      	sub	sp, #28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	021a      	lsls	r2, r3, #8
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	431a      	orrs	r2, r3
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	4313      	orrs	r3, r2
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4313      	orrs	r3, r2
 800e984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	609a      	str	r2, [r3, #8]
}
 800e98c:	bf00      	nop
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d101      	bne.n	800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	e077      	b.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a35      	ldr	r2, [pc, #212]	@ (800eaac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d004      	beq.n	800e9e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a34      	ldr	r2, [pc, #208]	@ (800eab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d108      	bne.n	800e9f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e9ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a25      	ldr	r2, [pc, #148]	@ (800eaac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d02c      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea22:	d027      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a22      	ldr	r2, [pc, #136]	@ (800eab4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d022      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a21      	ldr	r2, [pc, #132]	@ (800eab8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d01d      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a1f      	ldr	r2, [pc, #124]	@ (800eabc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d018      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a1a      	ldr	r2, [pc, #104]	@ (800eab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d013      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a1b      	ldr	r2, [pc, #108]	@ (800eac0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d00e      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a1a      	ldr	r2, [pc, #104]	@ (800eac4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d009      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a18      	ldr	r2, [pc, #96]	@ (800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d004      	beq.n	800ea74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4a17      	ldr	r2, [pc, #92]	@ (800eacc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d10c      	bne.n	800ea8e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	68ba      	ldr	r2, [r7, #8]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea9e:	2300      	movs	r3, #0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr
 800eaac:	40010000 	.word	0x40010000
 800eab0:	40010400 	.word	0x40010400
 800eab4:	40000400 	.word	0x40000400
 800eab8:	40000800 	.word	0x40000800
 800eabc:	40000c00 	.word	0x40000c00
 800eac0:	40001800 	.word	0x40001800
 800eac4:	40014000 	.word	0x40014000
 800eac8:	4000e000 	.word	0x4000e000
 800eacc:	4000e400 	.word	0x4000e400

0800ead0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d101      	bne.n	800eaec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eae8:	2302      	movs	r3, #2
 800eaea:	e073      	b.n	800ebd4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	4313      	orrs	r3, r2
 800eb46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb52:	4313      	orrs	r3, r2
 800eb54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	041b      	lsls	r3, r3, #16
 800eb62:	4313      	orrs	r3, r2
 800eb64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a19      	ldr	r2, [pc, #100]	@ (800ebe0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d004      	beq.n	800eb88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a18      	ldr	r2, [pc, #96]	@ (800ebe4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800eb84:	4293      	cmp	r3, r2
 800eb86:	d11c      	bne.n	800ebc2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb92:	051b      	lsls	r3, r3, #20
 800eb94:	4313      	orrs	r3, r2
 800eb96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	40010000 	.word	0x40010000
 800ebe4:	40010400 	.word	0x40010400

0800ebe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ebf0:	bf00      	nop
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec04:	bf00      	nop
 800ec06:	370c      	adds	r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	e042      	b.n	800ecbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d106      	bne.n	800ec4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7f3 fd3d 	bl	80026c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2224      	movs	r2, #36	@ 0x24
 800ec52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f022 0201 	bic.w	r2, r2, #1
 800ec64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 ff22 	bl	800fab8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 f8b3 	bl	800ede0 <UART_SetConfig>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d101      	bne.n	800ec84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e01b      	b.n	800ecbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	685a      	ldr	r2, [r3, #4]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ec92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	689a      	ldr	r2, [r3, #8]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800eca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f042 0201 	orr.w	r2, r2, #1
 800ecb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 ffa1 	bl	800fbfc <UART_CheckIdleState>
 800ecba:	4603      	mov	r3, r0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b08a      	sub	sp, #40	@ 0x28
 800ecc8:	af02      	add	r7, sp, #8
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecda:	2b20      	cmp	r3, #32
 800ecdc:	d17b      	bne.n	800edd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <HAL_UART_Transmit+0x26>
 800ece4:	88fb      	ldrh	r3, [r7, #6]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d101      	bne.n	800ecee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ecea:	2301      	movs	r3, #1
 800ecec:	e074      	b.n	800edd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2221      	movs	r2, #33	@ 0x21
 800ecfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ecfe:	f7f3 ff73 	bl	8002be8 <HAL_GetTick>
 800ed02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	88fa      	ldrh	r2, [r7, #6]
 800ed08:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	88fa      	ldrh	r2, [r7, #6]
 800ed10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed1c:	d108      	bne.n	800ed30 <HAL_UART_Transmit+0x6c>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d104      	bne.n	800ed30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ed26:	2300      	movs	r3, #0
 800ed28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	e003      	b.n	800ed38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed34:	2300      	movs	r3, #0
 800ed36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ed38:	e030      	b.n	800ed9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2200      	movs	r2, #0
 800ed42:	2180      	movs	r1, #128	@ 0x80
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f001 f803 	bl	800fd50 <UART_WaitOnFlagUntilTimeout>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d005      	beq.n	800ed5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2220      	movs	r2, #32
 800ed54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	e03d      	b.n	800edd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d10b      	bne.n	800ed7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	461a      	mov	r2, r3
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed70:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	3302      	adds	r3, #2
 800ed76:	61bb      	str	r3, [r7, #24]
 800ed78:	e007      	b.n	800ed8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	781a      	ldrb	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	3301      	adds	r3, #1
 800ed88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	3b01      	subs	r3, #1
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1c8      	bne.n	800ed3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2200      	movs	r2, #0
 800edb0:	2140      	movs	r1, #64	@ 0x40
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f000 ffcc 	bl	800fd50 <UART_WaitOnFlagUntilTimeout>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d005      	beq.n	800edca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2220      	movs	r2, #32
 800edc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800edc6:	2303      	movs	r3, #3
 800edc8:	e006      	b.n	800edd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2220      	movs	r2, #32
 800edce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800edd2:	2300      	movs	r3, #0
 800edd4:	e000      	b.n	800edd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800edd6:	2302      	movs	r3, #2
  }
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3720      	adds	r7, #32
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ede0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ede4:	b092      	sub	sp, #72	@ 0x48
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	689a      	ldr	r2, [r3, #8]
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	691b      	ldr	r3, [r3, #16]
 800edf8:	431a      	orrs	r2, r3
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	431a      	orrs	r2, r3
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	69db      	ldr	r3, [r3, #28]
 800ee04:	4313      	orrs	r3, r2
 800ee06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	4bbe      	ldr	r3, [pc, #760]	@ (800f108 <UART_SetConfig+0x328>)
 800ee10:	4013      	ands	r3, r2
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	6812      	ldr	r2, [r2, #0]
 800ee16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee18:	430b      	orrs	r3, r1
 800ee1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	68da      	ldr	r2, [r3, #12]
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	430a      	orrs	r2, r1
 800ee30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	699b      	ldr	r3, [r3, #24]
 800ee36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4ab3      	ldr	r2, [pc, #716]	@ (800f10c <UART_SetConfig+0x32c>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d004      	beq.n	800ee4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	6a1b      	ldr	r3, [r3, #32]
 800ee46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	689a      	ldr	r2, [r3, #8]
 800ee52:	4baf      	ldr	r3, [pc, #700]	@ (800f110 <UART_SetConfig+0x330>)
 800ee54:	4013      	ands	r3, r2
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	6812      	ldr	r2, [r2, #0]
 800ee5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee5c:	430b      	orrs	r3, r1
 800ee5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee66:	f023 010f 	bic.w	r1, r3, #15
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	430a      	orrs	r2, r1
 800ee74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4aa6      	ldr	r2, [pc, #664]	@ (800f114 <UART_SetConfig+0x334>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d177      	bne.n	800ef70 <UART_SetConfig+0x190>
 800ee80:	4ba5      	ldr	r3, [pc, #660]	@ (800f118 <UART_SetConfig+0x338>)
 800ee82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ee88:	2b28      	cmp	r3, #40	@ 0x28
 800ee8a:	d86d      	bhi.n	800ef68 <UART_SetConfig+0x188>
 800ee8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ee94 <UART_SetConfig+0xb4>)
 800ee8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee92:	bf00      	nop
 800ee94:	0800ef39 	.word	0x0800ef39
 800ee98:	0800ef69 	.word	0x0800ef69
 800ee9c:	0800ef69 	.word	0x0800ef69
 800eea0:	0800ef69 	.word	0x0800ef69
 800eea4:	0800ef69 	.word	0x0800ef69
 800eea8:	0800ef69 	.word	0x0800ef69
 800eeac:	0800ef69 	.word	0x0800ef69
 800eeb0:	0800ef69 	.word	0x0800ef69
 800eeb4:	0800ef41 	.word	0x0800ef41
 800eeb8:	0800ef69 	.word	0x0800ef69
 800eebc:	0800ef69 	.word	0x0800ef69
 800eec0:	0800ef69 	.word	0x0800ef69
 800eec4:	0800ef69 	.word	0x0800ef69
 800eec8:	0800ef69 	.word	0x0800ef69
 800eecc:	0800ef69 	.word	0x0800ef69
 800eed0:	0800ef69 	.word	0x0800ef69
 800eed4:	0800ef49 	.word	0x0800ef49
 800eed8:	0800ef69 	.word	0x0800ef69
 800eedc:	0800ef69 	.word	0x0800ef69
 800eee0:	0800ef69 	.word	0x0800ef69
 800eee4:	0800ef69 	.word	0x0800ef69
 800eee8:	0800ef69 	.word	0x0800ef69
 800eeec:	0800ef69 	.word	0x0800ef69
 800eef0:	0800ef69 	.word	0x0800ef69
 800eef4:	0800ef51 	.word	0x0800ef51
 800eef8:	0800ef69 	.word	0x0800ef69
 800eefc:	0800ef69 	.word	0x0800ef69
 800ef00:	0800ef69 	.word	0x0800ef69
 800ef04:	0800ef69 	.word	0x0800ef69
 800ef08:	0800ef69 	.word	0x0800ef69
 800ef0c:	0800ef69 	.word	0x0800ef69
 800ef10:	0800ef69 	.word	0x0800ef69
 800ef14:	0800ef59 	.word	0x0800ef59
 800ef18:	0800ef69 	.word	0x0800ef69
 800ef1c:	0800ef69 	.word	0x0800ef69
 800ef20:	0800ef69 	.word	0x0800ef69
 800ef24:	0800ef69 	.word	0x0800ef69
 800ef28:	0800ef69 	.word	0x0800ef69
 800ef2c:	0800ef69 	.word	0x0800ef69
 800ef30:	0800ef69 	.word	0x0800ef69
 800ef34:	0800ef61 	.word	0x0800ef61
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3e:	e326      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef40:	2304      	movs	r3, #4
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef46:	e322      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef48:	2308      	movs	r3, #8
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4e:	e31e      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef50:	2310      	movs	r3, #16
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef56:	e31a      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef58:	2320      	movs	r3, #32
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5e:	e316      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef60:	2340      	movs	r3, #64	@ 0x40
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e312      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef68:	2380      	movs	r3, #128	@ 0x80
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e30e      	b.n	800f58e <UART_SetConfig+0x7ae>
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a69      	ldr	r2, [pc, #420]	@ (800f11c <UART_SetConfig+0x33c>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d130      	bne.n	800efdc <UART_SetConfig+0x1fc>
 800ef7a:	4b67      	ldr	r3, [pc, #412]	@ (800f118 <UART_SetConfig+0x338>)
 800ef7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef7e:	f003 0307 	and.w	r3, r3, #7
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d826      	bhi.n	800efd4 <UART_SetConfig+0x1f4>
 800ef86:	a201      	add	r2, pc, #4	@ (adr r2, 800ef8c <UART_SetConfig+0x1ac>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800efa5 	.word	0x0800efa5
 800ef90:	0800efad 	.word	0x0800efad
 800ef94:	0800efb5 	.word	0x0800efb5
 800ef98:	0800efbd 	.word	0x0800efbd
 800ef9c:	0800efc5 	.word	0x0800efc5
 800efa0:	0800efcd 	.word	0x0800efcd
 800efa4:	2300      	movs	r3, #0
 800efa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efaa:	e2f0      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efac:	2304      	movs	r3, #4
 800efae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb2:	e2ec      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efb4:	2308      	movs	r3, #8
 800efb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efba:	e2e8      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efbc:	2310      	movs	r3, #16
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc2:	e2e4      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efc4:	2320      	movs	r3, #32
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efca:	e2e0      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efcc:	2340      	movs	r3, #64	@ 0x40
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e2dc      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efd4:	2380      	movs	r3, #128	@ 0x80
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e2d8      	b.n	800f58e <UART_SetConfig+0x7ae>
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a4f      	ldr	r2, [pc, #316]	@ (800f120 <UART_SetConfig+0x340>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d130      	bne.n	800f048 <UART_SetConfig+0x268>
 800efe6:	4b4c      	ldr	r3, [pc, #304]	@ (800f118 <UART_SetConfig+0x338>)
 800efe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efea:	f003 0307 	and.w	r3, r3, #7
 800efee:	2b05      	cmp	r3, #5
 800eff0:	d826      	bhi.n	800f040 <UART_SetConfig+0x260>
 800eff2:	a201      	add	r2, pc, #4	@ (adr r2, 800eff8 <UART_SetConfig+0x218>)
 800eff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff8:	0800f011 	.word	0x0800f011
 800effc:	0800f019 	.word	0x0800f019
 800f000:	0800f021 	.word	0x0800f021
 800f004:	0800f029 	.word	0x0800f029
 800f008:	0800f031 	.word	0x0800f031
 800f00c:	0800f039 	.word	0x0800f039
 800f010:	2300      	movs	r3, #0
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f016:	e2ba      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f018:	2304      	movs	r3, #4
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f01e:	e2b6      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f020:	2308      	movs	r3, #8
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f026:	e2b2      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f028:	2310      	movs	r3, #16
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02e:	e2ae      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f030:	2320      	movs	r3, #32
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f036:	e2aa      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f038:	2340      	movs	r3, #64	@ 0x40
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03e:	e2a6      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f040:	2380      	movs	r3, #128	@ 0x80
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f046:	e2a2      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4a35      	ldr	r2, [pc, #212]	@ (800f124 <UART_SetConfig+0x344>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d130      	bne.n	800f0b4 <UART_SetConfig+0x2d4>
 800f052:	4b31      	ldr	r3, [pc, #196]	@ (800f118 <UART_SetConfig+0x338>)
 800f054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f056:	f003 0307 	and.w	r3, r3, #7
 800f05a:	2b05      	cmp	r3, #5
 800f05c:	d826      	bhi.n	800f0ac <UART_SetConfig+0x2cc>
 800f05e:	a201      	add	r2, pc, #4	@ (adr r2, 800f064 <UART_SetConfig+0x284>)
 800f060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f064:	0800f07d 	.word	0x0800f07d
 800f068:	0800f085 	.word	0x0800f085
 800f06c:	0800f08d 	.word	0x0800f08d
 800f070:	0800f095 	.word	0x0800f095
 800f074:	0800f09d 	.word	0x0800f09d
 800f078:	0800f0a5 	.word	0x0800f0a5
 800f07c:	2300      	movs	r3, #0
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f082:	e284      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f084:	2304      	movs	r3, #4
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f08a:	e280      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f08c:	2308      	movs	r3, #8
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f092:	e27c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f094:	2310      	movs	r3, #16
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f09a:	e278      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f09c:	2320      	movs	r3, #32
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a2:	e274      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f0a4:	2340      	movs	r3, #64	@ 0x40
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0aa:	e270      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f0ac:	2380      	movs	r3, #128	@ 0x80
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b2:	e26c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800f128 <UART_SetConfig+0x348>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d142      	bne.n	800f144 <UART_SetConfig+0x364>
 800f0be:	4b16      	ldr	r3, [pc, #88]	@ (800f118 <UART_SetConfig+0x338>)
 800f0c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0c2:	f003 0307 	and.w	r3, r3, #7
 800f0c6:	2b05      	cmp	r3, #5
 800f0c8:	d838      	bhi.n	800f13c <UART_SetConfig+0x35c>
 800f0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d0 <UART_SetConfig+0x2f0>)
 800f0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d0:	0800f0e9 	.word	0x0800f0e9
 800f0d4:	0800f0f1 	.word	0x0800f0f1
 800f0d8:	0800f0f9 	.word	0x0800f0f9
 800f0dc:	0800f101 	.word	0x0800f101
 800f0e0:	0800f12d 	.word	0x0800f12d
 800f0e4:	0800f135 	.word	0x0800f135
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ee:	e24e      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f6:	e24a      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f0f8:	2308      	movs	r3, #8
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fe:	e246      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f100:	2310      	movs	r3, #16
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f106:	e242      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f108:	cfff69f3 	.word	0xcfff69f3
 800f10c:	58000c00 	.word	0x58000c00
 800f110:	11fff4ff 	.word	0x11fff4ff
 800f114:	40011000 	.word	0x40011000
 800f118:	58024400 	.word	0x58024400
 800f11c:	40004400 	.word	0x40004400
 800f120:	40004800 	.word	0x40004800
 800f124:	40004c00 	.word	0x40004c00
 800f128:	40005000 	.word	0x40005000
 800f12c:	2320      	movs	r3, #32
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f132:	e22c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f134:	2340      	movs	r3, #64	@ 0x40
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f13a:	e228      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f13c:	2380      	movs	r3, #128	@ 0x80
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f142:	e224      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4ab1      	ldr	r2, [pc, #708]	@ (800f410 <UART_SetConfig+0x630>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d176      	bne.n	800f23c <UART_SetConfig+0x45c>
 800f14e:	4bb1      	ldr	r3, [pc, #708]	@ (800f414 <UART_SetConfig+0x634>)
 800f150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f156:	2b28      	cmp	r3, #40	@ 0x28
 800f158:	d86c      	bhi.n	800f234 <UART_SetConfig+0x454>
 800f15a:	a201      	add	r2, pc, #4	@ (adr r2, 800f160 <UART_SetConfig+0x380>)
 800f15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f160:	0800f205 	.word	0x0800f205
 800f164:	0800f235 	.word	0x0800f235
 800f168:	0800f235 	.word	0x0800f235
 800f16c:	0800f235 	.word	0x0800f235
 800f170:	0800f235 	.word	0x0800f235
 800f174:	0800f235 	.word	0x0800f235
 800f178:	0800f235 	.word	0x0800f235
 800f17c:	0800f235 	.word	0x0800f235
 800f180:	0800f20d 	.word	0x0800f20d
 800f184:	0800f235 	.word	0x0800f235
 800f188:	0800f235 	.word	0x0800f235
 800f18c:	0800f235 	.word	0x0800f235
 800f190:	0800f235 	.word	0x0800f235
 800f194:	0800f235 	.word	0x0800f235
 800f198:	0800f235 	.word	0x0800f235
 800f19c:	0800f235 	.word	0x0800f235
 800f1a0:	0800f215 	.word	0x0800f215
 800f1a4:	0800f235 	.word	0x0800f235
 800f1a8:	0800f235 	.word	0x0800f235
 800f1ac:	0800f235 	.word	0x0800f235
 800f1b0:	0800f235 	.word	0x0800f235
 800f1b4:	0800f235 	.word	0x0800f235
 800f1b8:	0800f235 	.word	0x0800f235
 800f1bc:	0800f235 	.word	0x0800f235
 800f1c0:	0800f21d 	.word	0x0800f21d
 800f1c4:	0800f235 	.word	0x0800f235
 800f1c8:	0800f235 	.word	0x0800f235
 800f1cc:	0800f235 	.word	0x0800f235
 800f1d0:	0800f235 	.word	0x0800f235
 800f1d4:	0800f235 	.word	0x0800f235
 800f1d8:	0800f235 	.word	0x0800f235
 800f1dc:	0800f235 	.word	0x0800f235
 800f1e0:	0800f225 	.word	0x0800f225
 800f1e4:	0800f235 	.word	0x0800f235
 800f1e8:	0800f235 	.word	0x0800f235
 800f1ec:	0800f235 	.word	0x0800f235
 800f1f0:	0800f235 	.word	0x0800f235
 800f1f4:	0800f235 	.word	0x0800f235
 800f1f8:	0800f235 	.word	0x0800f235
 800f1fc:	0800f235 	.word	0x0800f235
 800f200:	0800f22d 	.word	0x0800f22d
 800f204:	2301      	movs	r3, #1
 800f206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f20a:	e1c0      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f20c:	2304      	movs	r3, #4
 800f20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f212:	e1bc      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f214:	2308      	movs	r3, #8
 800f216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21a:	e1b8      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f21c:	2310      	movs	r3, #16
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f222:	e1b4      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f224:	2320      	movs	r3, #32
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22a:	e1b0      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f22c:	2340      	movs	r3, #64	@ 0x40
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f232:	e1ac      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f234:	2380      	movs	r3, #128	@ 0x80
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f23a:	e1a8      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a75      	ldr	r2, [pc, #468]	@ (800f418 <UART_SetConfig+0x638>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d130      	bne.n	800f2a8 <UART_SetConfig+0x4c8>
 800f246:	4b73      	ldr	r3, [pc, #460]	@ (800f414 <UART_SetConfig+0x634>)
 800f248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f24a:	f003 0307 	and.w	r3, r3, #7
 800f24e:	2b05      	cmp	r3, #5
 800f250:	d826      	bhi.n	800f2a0 <UART_SetConfig+0x4c0>
 800f252:	a201      	add	r2, pc, #4	@ (adr r2, 800f258 <UART_SetConfig+0x478>)
 800f254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f258:	0800f271 	.word	0x0800f271
 800f25c:	0800f279 	.word	0x0800f279
 800f260:	0800f281 	.word	0x0800f281
 800f264:	0800f289 	.word	0x0800f289
 800f268:	0800f291 	.word	0x0800f291
 800f26c:	0800f299 	.word	0x0800f299
 800f270:	2300      	movs	r3, #0
 800f272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f276:	e18a      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f278:	2304      	movs	r3, #4
 800f27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f27e:	e186      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f280:	2308      	movs	r3, #8
 800f282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f286:	e182      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f288:	2310      	movs	r3, #16
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f28e:	e17e      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f290:	2320      	movs	r3, #32
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f296:	e17a      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f298:	2340      	movs	r3, #64	@ 0x40
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29e:	e176      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f2a0:	2380      	movs	r3, #128	@ 0x80
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2a6:	e172      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a5b      	ldr	r2, [pc, #364]	@ (800f41c <UART_SetConfig+0x63c>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d130      	bne.n	800f314 <UART_SetConfig+0x534>
 800f2b2:	4b58      	ldr	r3, [pc, #352]	@ (800f414 <UART_SetConfig+0x634>)
 800f2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2b6:	f003 0307 	and.w	r3, r3, #7
 800f2ba:	2b05      	cmp	r3, #5
 800f2bc:	d826      	bhi.n	800f30c <UART_SetConfig+0x52c>
 800f2be:	a201      	add	r2, pc, #4	@ (adr r2, 800f2c4 <UART_SetConfig+0x4e4>)
 800f2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c4:	0800f2dd 	.word	0x0800f2dd
 800f2c8:	0800f2e5 	.word	0x0800f2e5
 800f2cc:	0800f2ed 	.word	0x0800f2ed
 800f2d0:	0800f2f5 	.word	0x0800f2f5
 800f2d4:	0800f2fd 	.word	0x0800f2fd
 800f2d8:	0800f305 	.word	0x0800f305
 800f2dc:	2300      	movs	r3, #0
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2e2:	e154      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f2e4:	2304      	movs	r3, #4
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ea:	e150      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f2ec:	2308      	movs	r3, #8
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2f2:	e14c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f2f4:	2310      	movs	r3, #16
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2fa:	e148      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f2fc:	2320      	movs	r3, #32
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f302:	e144      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f304:	2340      	movs	r3, #64	@ 0x40
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30a:	e140      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f30c:	2380      	movs	r3, #128	@ 0x80
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f312:	e13c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a41      	ldr	r2, [pc, #260]	@ (800f420 <UART_SetConfig+0x640>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	f040 8082 	bne.w	800f424 <UART_SetConfig+0x644>
 800f320:	4b3c      	ldr	r3, [pc, #240]	@ (800f414 <UART_SetConfig+0x634>)
 800f322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f328:	2b28      	cmp	r3, #40	@ 0x28
 800f32a:	d86d      	bhi.n	800f408 <UART_SetConfig+0x628>
 800f32c:	a201      	add	r2, pc, #4	@ (adr r2, 800f334 <UART_SetConfig+0x554>)
 800f32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f332:	bf00      	nop
 800f334:	0800f3d9 	.word	0x0800f3d9
 800f338:	0800f409 	.word	0x0800f409
 800f33c:	0800f409 	.word	0x0800f409
 800f340:	0800f409 	.word	0x0800f409
 800f344:	0800f409 	.word	0x0800f409
 800f348:	0800f409 	.word	0x0800f409
 800f34c:	0800f409 	.word	0x0800f409
 800f350:	0800f409 	.word	0x0800f409
 800f354:	0800f3e1 	.word	0x0800f3e1
 800f358:	0800f409 	.word	0x0800f409
 800f35c:	0800f409 	.word	0x0800f409
 800f360:	0800f409 	.word	0x0800f409
 800f364:	0800f409 	.word	0x0800f409
 800f368:	0800f409 	.word	0x0800f409
 800f36c:	0800f409 	.word	0x0800f409
 800f370:	0800f409 	.word	0x0800f409
 800f374:	0800f3e9 	.word	0x0800f3e9
 800f378:	0800f409 	.word	0x0800f409
 800f37c:	0800f409 	.word	0x0800f409
 800f380:	0800f409 	.word	0x0800f409
 800f384:	0800f409 	.word	0x0800f409
 800f388:	0800f409 	.word	0x0800f409
 800f38c:	0800f409 	.word	0x0800f409
 800f390:	0800f409 	.word	0x0800f409
 800f394:	0800f3f1 	.word	0x0800f3f1
 800f398:	0800f409 	.word	0x0800f409
 800f39c:	0800f409 	.word	0x0800f409
 800f3a0:	0800f409 	.word	0x0800f409
 800f3a4:	0800f409 	.word	0x0800f409
 800f3a8:	0800f409 	.word	0x0800f409
 800f3ac:	0800f409 	.word	0x0800f409
 800f3b0:	0800f409 	.word	0x0800f409
 800f3b4:	0800f3f9 	.word	0x0800f3f9
 800f3b8:	0800f409 	.word	0x0800f409
 800f3bc:	0800f409 	.word	0x0800f409
 800f3c0:	0800f409 	.word	0x0800f409
 800f3c4:	0800f409 	.word	0x0800f409
 800f3c8:	0800f409 	.word	0x0800f409
 800f3cc:	0800f409 	.word	0x0800f409
 800f3d0:	0800f409 	.word	0x0800f409
 800f3d4:	0800f401 	.word	0x0800f401
 800f3d8:	2301      	movs	r3, #1
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3de:	e0d6      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f3e0:	2304      	movs	r3, #4
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e6:	e0d2      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f3e8:	2308      	movs	r3, #8
 800f3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ee:	e0ce      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f3f0:	2310      	movs	r3, #16
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e0ca      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f3f8:	2320      	movs	r3, #32
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e0c6      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f400:	2340      	movs	r3, #64	@ 0x40
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f406:	e0c2      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f408:	2380      	movs	r3, #128	@ 0x80
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40e:	e0be      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f410:	40011400 	.word	0x40011400
 800f414:	58024400 	.word	0x58024400
 800f418:	40007800 	.word	0x40007800
 800f41c:	40007c00 	.word	0x40007c00
 800f420:	40011800 	.word	0x40011800
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4aad      	ldr	r2, [pc, #692]	@ (800f6e0 <UART_SetConfig+0x900>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d176      	bne.n	800f51c <UART_SetConfig+0x73c>
 800f42e:	4bad      	ldr	r3, [pc, #692]	@ (800f6e4 <UART_SetConfig+0x904>)
 800f430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f436:	2b28      	cmp	r3, #40	@ 0x28
 800f438:	d86c      	bhi.n	800f514 <UART_SetConfig+0x734>
 800f43a:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <UART_SetConfig+0x660>)
 800f43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f440:	0800f4e5 	.word	0x0800f4e5
 800f444:	0800f515 	.word	0x0800f515
 800f448:	0800f515 	.word	0x0800f515
 800f44c:	0800f515 	.word	0x0800f515
 800f450:	0800f515 	.word	0x0800f515
 800f454:	0800f515 	.word	0x0800f515
 800f458:	0800f515 	.word	0x0800f515
 800f45c:	0800f515 	.word	0x0800f515
 800f460:	0800f4ed 	.word	0x0800f4ed
 800f464:	0800f515 	.word	0x0800f515
 800f468:	0800f515 	.word	0x0800f515
 800f46c:	0800f515 	.word	0x0800f515
 800f470:	0800f515 	.word	0x0800f515
 800f474:	0800f515 	.word	0x0800f515
 800f478:	0800f515 	.word	0x0800f515
 800f47c:	0800f515 	.word	0x0800f515
 800f480:	0800f4f5 	.word	0x0800f4f5
 800f484:	0800f515 	.word	0x0800f515
 800f488:	0800f515 	.word	0x0800f515
 800f48c:	0800f515 	.word	0x0800f515
 800f490:	0800f515 	.word	0x0800f515
 800f494:	0800f515 	.word	0x0800f515
 800f498:	0800f515 	.word	0x0800f515
 800f49c:	0800f515 	.word	0x0800f515
 800f4a0:	0800f4fd 	.word	0x0800f4fd
 800f4a4:	0800f515 	.word	0x0800f515
 800f4a8:	0800f515 	.word	0x0800f515
 800f4ac:	0800f515 	.word	0x0800f515
 800f4b0:	0800f515 	.word	0x0800f515
 800f4b4:	0800f515 	.word	0x0800f515
 800f4b8:	0800f515 	.word	0x0800f515
 800f4bc:	0800f515 	.word	0x0800f515
 800f4c0:	0800f505 	.word	0x0800f505
 800f4c4:	0800f515 	.word	0x0800f515
 800f4c8:	0800f515 	.word	0x0800f515
 800f4cc:	0800f515 	.word	0x0800f515
 800f4d0:	0800f515 	.word	0x0800f515
 800f4d4:	0800f515 	.word	0x0800f515
 800f4d8:	0800f515 	.word	0x0800f515
 800f4dc:	0800f515 	.word	0x0800f515
 800f4e0:	0800f50d 	.word	0x0800f50d
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ea:	e050      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f4ec:	2304      	movs	r3, #4
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f2:	e04c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f4f4:	2308      	movs	r3, #8
 800f4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4fa:	e048      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f4fc:	2310      	movs	r3, #16
 800f4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f502:	e044      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f504:	2320      	movs	r3, #32
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e040      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f50c:	2340      	movs	r3, #64	@ 0x40
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e03c      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f514:	2380      	movs	r3, #128	@ 0x80
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e038      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a71      	ldr	r2, [pc, #452]	@ (800f6e8 <UART_SetConfig+0x908>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d130      	bne.n	800f588 <UART_SetConfig+0x7a8>
 800f526:	4b6f      	ldr	r3, [pc, #444]	@ (800f6e4 <UART_SetConfig+0x904>)
 800f528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f52a:	f003 0307 	and.w	r3, r3, #7
 800f52e:	2b05      	cmp	r3, #5
 800f530:	d826      	bhi.n	800f580 <UART_SetConfig+0x7a0>
 800f532:	a201      	add	r2, pc, #4	@ (adr r2, 800f538 <UART_SetConfig+0x758>)
 800f534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f538:	0800f551 	.word	0x0800f551
 800f53c:	0800f559 	.word	0x0800f559
 800f540:	0800f561 	.word	0x0800f561
 800f544:	0800f569 	.word	0x0800f569
 800f548:	0800f571 	.word	0x0800f571
 800f54c:	0800f579 	.word	0x0800f579
 800f550:	2302      	movs	r3, #2
 800f552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f556:	e01a      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f558:	2304      	movs	r3, #4
 800f55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55e:	e016      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f560:	2308      	movs	r3, #8
 800f562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f566:	e012      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f568:	2310      	movs	r3, #16
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56e:	e00e      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f570:	2320      	movs	r3, #32
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f576:	e00a      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f578:	2340      	movs	r3, #64	@ 0x40
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e006      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f580:	2380      	movs	r3, #128	@ 0x80
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e002      	b.n	800f58e <UART_SetConfig+0x7ae>
 800f588:	2380      	movs	r3, #128	@ 0x80
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4a55      	ldr	r2, [pc, #340]	@ (800f6e8 <UART_SetConfig+0x908>)
 800f594:	4293      	cmp	r3, r2
 800f596:	f040 80f8 	bne.w	800f78a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f59a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f59e:	2b20      	cmp	r3, #32
 800f5a0:	dc46      	bgt.n	800f630 <UART_SetConfig+0x850>
 800f5a2:	2b02      	cmp	r3, #2
 800f5a4:	db75      	blt.n	800f692 <UART_SetConfig+0x8b2>
 800f5a6:	3b02      	subs	r3, #2
 800f5a8:	2b1e      	cmp	r3, #30
 800f5aa:	d872      	bhi.n	800f692 <UART_SetConfig+0x8b2>
 800f5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b4 <UART_SetConfig+0x7d4>)
 800f5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b2:	bf00      	nop
 800f5b4:	0800f637 	.word	0x0800f637
 800f5b8:	0800f693 	.word	0x0800f693
 800f5bc:	0800f63f 	.word	0x0800f63f
 800f5c0:	0800f693 	.word	0x0800f693
 800f5c4:	0800f693 	.word	0x0800f693
 800f5c8:	0800f693 	.word	0x0800f693
 800f5cc:	0800f64f 	.word	0x0800f64f
 800f5d0:	0800f693 	.word	0x0800f693
 800f5d4:	0800f693 	.word	0x0800f693
 800f5d8:	0800f693 	.word	0x0800f693
 800f5dc:	0800f693 	.word	0x0800f693
 800f5e0:	0800f693 	.word	0x0800f693
 800f5e4:	0800f693 	.word	0x0800f693
 800f5e8:	0800f693 	.word	0x0800f693
 800f5ec:	0800f65f 	.word	0x0800f65f
 800f5f0:	0800f693 	.word	0x0800f693
 800f5f4:	0800f693 	.word	0x0800f693
 800f5f8:	0800f693 	.word	0x0800f693
 800f5fc:	0800f693 	.word	0x0800f693
 800f600:	0800f693 	.word	0x0800f693
 800f604:	0800f693 	.word	0x0800f693
 800f608:	0800f693 	.word	0x0800f693
 800f60c:	0800f693 	.word	0x0800f693
 800f610:	0800f693 	.word	0x0800f693
 800f614:	0800f693 	.word	0x0800f693
 800f618:	0800f693 	.word	0x0800f693
 800f61c:	0800f693 	.word	0x0800f693
 800f620:	0800f693 	.word	0x0800f693
 800f624:	0800f693 	.word	0x0800f693
 800f628:	0800f693 	.word	0x0800f693
 800f62c:	0800f685 	.word	0x0800f685
 800f630:	2b40      	cmp	r3, #64	@ 0x40
 800f632:	d02a      	beq.n	800f68a <UART_SetConfig+0x8aa>
 800f634:	e02d      	b.n	800f692 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f636:	f7fb ff37 	bl	800b4a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f63a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f63c:	e02f      	b.n	800f69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f63e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f642:	4618      	mov	r0, r3
 800f644:	f7fb ff46 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f64c:	e027      	b.n	800f69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f64e:	f107 0318 	add.w	r3, r7, #24
 800f652:	4618      	mov	r0, r3
 800f654:	f7fc f892 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f65c:	e01f      	b.n	800f69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f65e:	4b21      	ldr	r3, [pc, #132]	@ (800f6e4 <UART_SetConfig+0x904>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 0320 	and.w	r3, r3, #32
 800f666:	2b00      	cmp	r3, #0
 800f668:	d009      	beq.n	800f67e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f66a:	4b1e      	ldr	r3, [pc, #120]	@ (800f6e4 <UART_SetConfig+0x904>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	08db      	lsrs	r3, r3, #3
 800f670:	f003 0303 	and.w	r3, r3, #3
 800f674:	4a1d      	ldr	r2, [pc, #116]	@ (800f6ec <UART_SetConfig+0x90c>)
 800f676:	fa22 f303 	lsr.w	r3, r2, r3
 800f67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f67c:	e00f      	b.n	800f69e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f67e:	4b1b      	ldr	r3, [pc, #108]	@ (800f6ec <UART_SetConfig+0x90c>)
 800f680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f682:	e00c      	b.n	800f69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f684:	4b1a      	ldr	r3, [pc, #104]	@ (800f6f0 <UART_SetConfig+0x910>)
 800f686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f688:	e009      	b.n	800f69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f68a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f690:	e005      	b.n	800f69e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f692:	2300      	movs	r3, #0
 800f694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f696:	2301      	movs	r3, #1
 800f698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f69c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	f000 81ee 	beq.w	800fa82 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6aa:	4a12      	ldr	r2, [pc, #72]	@ (800f6f4 <UART_SetConfig+0x914>)
 800f6ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6b8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	005b      	lsls	r3, r3, #1
 800f6c2:	4413      	add	r3, r2
 800f6c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d305      	bcc.n	800f6d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d910      	bls.n	800f6f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f6dc:	e1d1      	b.n	800fa82 <UART_SetConfig+0xca2>
 800f6de:	bf00      	nop
 800f6e0:	40011c00 	.word	0x40011c00
 800f6e4:	58024400 	.word	0x58024400
 800f6e8:	58000c00 	.word	0x58000c00
 800f6ec:	03d09000 	.word	0x03d09000
 800f6f0:	003d0900 	.word	0x003d0900
 800f6f4:	08011e60 	.word	0x08011e60
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	60bb      	str	r3, [r7, #8]
 800f6fe:	60fa      	str	r2, [r7, #12]
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f704:	4ac0      	ldr	r2, [pc, #768]	@ (800fa08 <UART_SetConfig+0xc28>)
 800f706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	2200      	movs	r2, #0
 800f70e:	603b      	str	r3, [r7, #0]
 800f710:	607a      	str	r2, [r7, #4]
 800f712:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f71a:	f7f0 fe51 	bl	80003c0 <__aeabi_uldivmod>
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	4610      	mov	r0, r2
 800f724:	4619      	mov	r1, r3
 800f726:	f04f 0200 	mov.w	r2, #0
 800f72a:	f04f 0300 	mov.w	r3, #0
 800f72e:	020b      	lsls	r3, r1, #8
 800f730:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f734:	0202      	lsls	r2, r0, #8
 800f736:	6979      	ldr	r1, [r7, #20]
 800f738:	6849      	ldr	r1, [r1, #4]
 800f73a:	0849      	lsrs	r1, r1, #1
 800f73c:	2000      	movs	r0, #0
 800f73e:	460c      	mov	r4, r1
 800f740:	4605      	mov	r5, r0
 800f742:	eb12 0804 	adds.w	r8, r2, r4
 800f746:	eb43 0905 	adc.w	r9, r3, r5
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	469a      	mov	sl, r3
 800f752:	4693      	mov	fp, r2
 800f754:	4652      	mov	r2, sl
 800f756:	465b      	mov	r3, fp
 800f758:	4640      	mov	r0, r8
 800f75a:	4649      	mov	r1, r9
 800f75c:	f7f0 fe30 	bl	80003c0 <__aeabi_uldivmod>
 800f760:	4602      	mov	r2, r0
 800f762:	460b      	mov	r3, r1
 800f764:	4613      	mov	r3, r2
 800f766:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f76a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f76e:	d308      	bcc.n	800f782 <UART_SetConfig+0x9a2>
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f776:	d204      	bcs.n	800f782 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f77e:	60da      	str	r2, [r3, #12]
 800f780:	e17f      	b.n	800fa82 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f788:	e17b      	b.n	800fa82 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	69db      	ldr	r3, [r3, #28]
 800f78e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f792:	f040 80bd 	bne.w	800f910 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f796:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f79a:	2b20      	cmp	r3, #32
 800f79c:	dc48      	bgt.n	800f830 <UART_SetConfig+0xa50>
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	db7b      	blt.n	800f89a <UART_SetConfig+0xaba>
 800f7a2:	2b20      	cmp	r3, #32
 800f7a4:	d879      	bhi.n	800f89a <UART_SetConfig+0xaba>
 800f7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7ac <UART_SetConfig+0x9cc>)
 800f7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ac:	0800f837 	.word	0x0800f837
 800f7b0:	0800f83f 	.word	0x0800f83f
 800f7b4:	0800f89b 	.word	0x0800f89b
 800f7b8:	0800f89b 	.word	0x0800f89b
 800f7bc:	0800f847 	.word	0x0800f847
 800f7c0:	0800f89b 	.word	0x0800f89b
 800f7c4:	0800f89b 	.word	0x0800f89b
 800f7c8:	0800f89b 	.word	0x0800f89b
 800f7cc:	0800f857 	.word	0x0800f857
 800f7d0:	0800f89b 	.word	0x0800f89b
 800f7d4:	0800f89b 	.word	0x0800f89b
 800f7d8:	0800f89b 	.word	0x0800f89b
 800f7dc:	0800f89b 	.word	0x0800f89b
 800f7e0:	0800f89b 	.word	0x0800f89b
 800f7e4:	0800f89b 	.word	0x0800f89b
 800f7e8:	0800f89b 	.word	0x0800f89b
 800f7ec:	0800f867 	.word	0x0800f867
 800f7f0:	0800f89b 	.word	0x0800f89b
 800f7f4:	0800f89b 	.word	0x0800f89b
 800f7f8:	0800f89b 	.word	0x0800f89b
 800f7fc:	0800f89b 	.word	0x0800f89b
 800f800:	0800f89b 	.word	0x0800f89b
 800f804:	0800f89b 	.word	0x0800f89b
 800f808:	0800f89b 	.word	0x0800f89b
 800f80c:	0800f89b 	.word	0x0800f89b
 800f810:	0800f89b 	.word	0x0800f89b
 800f814:	0800f89b 	.word	0x0800f89b
 800f818:	0800f89b 	.word	0x0800f89b
 800f81c:	0800f89b 	.word	0x0800f89b
 800f820:	0800f89b 	.word	0x0800f89b
 800f824:	0800f89b 	.word	0x0800f89b
 800f828:	0800f89b 	.word	0x0800f89b
 800f82c:	0800f88d 	.word	0x0800f88d
 800f830:	2b40      	cmp	r3, #64	@ 0x40
 800f832:	d02e      	beq.n	800f892 <UART_SetConfig+0xab2>
 800f834:	e031      	b.n	800f89a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f836:	f7f9 ff99 	bl	800976c <HAL_RCC_GetPCLK1Freq>
 800f83a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f83c:	e033      	b.n	800f8a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f83e:	f7f9 ffab 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800f842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f844:	e02f      	b.n	800f8a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fb fe42 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f854:	e027      	b.n	800f8a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f856:	f107 0318 	add.w	r3, r7, #24
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fb ff8e 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f864:	e01f      	b.n	800f8a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f866:	4b69      	ldr	r3, [pc, #420]	@ (800fa0c <UART_SetConfig+0xc2c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 0320 	and.w	r3, r3, #32
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d009      	beq.n	800f886 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f872:	4b66      	ldr	r3, [pc, #408]	@ (800fa0c <UART_SetConfig+0xc2c>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	08db      	lsrs	r3, r3, #3
 800f878:	f003 0303 	and.w	r3, r3, #3
 800f87c:	4a64      	ldr	r2, [pc, #400]	@ (800fa10 <UART_SetConfig+0xc30>)
 800f87e:	fa22 f303 	lsr.w	r3, r2, r3
 800f882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f884:	e00f      	b.n	800f8a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f886:	4b62      	ldr	r3, [pc, #392]	@ (800fa10 <UART_SetConfig+0xc30>)
 800f888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f88a:	e00c      	b.n	800f8a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f88c:	4b61      	ldr	r3, [pc, #388]	@ (800fa14 <UART_SetConfig+0xc34>)
 800f88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f890:	e009      	b.n	800f8a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f898:	e005      	b.n	800f8a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f89a:	2300      	movs	r3, #0
 800f89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 80ea 	beq.w	800fa82 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b2:	4a55      	ldr	r2, [pc, #340]	@ (800fa08 <UART_SetConfig+0xc28>)
 800f8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8c0:	005a      	lsls	r2, r3, #1
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	085b      	lsrs	r3, r3, #1
 800f8c8:	441a      	add	r2, r3
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d6:	2b0f      	cmp	r3, #15
 800f8d8:	d916      	bls.n	800f908 <UART_SetConfig+0xb28>
 800f8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8e0:	d212      	bcs.n	800f908 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	f023 030f 	bic.w	r3, r3, #15
 800f8ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ee:	085b      	lsrs	r3, r3, #1
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	f003 0307 	and.w	r3, r3, #7
 800f8f6:	b29a      	uxth	r2, r3
 800f8f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f904:	60da      	str	r2, [r3, #12]
 800f906:	e0bc      	b.n	800fa82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f908:	2301      	movs	r3, #1
 800f90a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f90e:	e0b8      	b.n	800fa82 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f910:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f914:	2b20      	cmp	r3, #32
 800f916:	dc4b      	bgt.n	800f9b0 <UART_SetConfig+0xbd0>
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f2c0 8087 	blt.w	800fa2c <UART_SetConfig+0xc4c>
 800f91e:	2b20      	cmp	r3, #32
 800f920:	f200 8084 	bhi.w	800fa2c <UART_SetConfig+0xc4c>
 800f924:	a201      	add	r2, pc, #4	@ (adr r2, 800f92c <UART_SetConfig+0xb4c>)
 800f926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92a:	bf00      	nop
 800f92c:	0800f9b7 	.word	0x0800f9b7
 800f930:	0800f9bf 	.word	0x0800f9bf
 800f934:	0800fa2d 	.word	0x0800fa2d
 800f938:	0800fa2d 	.word	0x0800fa2d
 800f93c:	0800f9c7 	.word	0x0800f9c7
 800f940:	0800fa2d 	.word	0x0800fa2d
 800f944:	0800fa2d 	.word	0x0800fa2d
 800f948:	0800fa2d 	.word	0x0800fa2d
 800f94c:	0800f9d7 	.word	0x0800f9d7
 800f950:	0800fa2d 	.word	0x0800fa2d
 800f954:	0800fa2d 	.word	0x0800fa2d
 800f958:	0800fa2d 	.word	0x0800fa2d
 800f95c:	0800fa2d 	.word	0x0800fa2d
 800f960:	0800fa2d 	.word	0x0800fa2d
 800f964:	0800fa2d 	.word	0x0800fa2d
 800f968:	0800fa2d 	.word	0x0800fa2d
 800f96c:	0800f9e7 	.word	0x0800f9e7
 800f970:	0800fa2d 	.word	0x0800fa2d
 800f974:	0800fa2d 	.word	0x0800fa2d
 800f978:	0800fa2d 	.word	0x0800fa2d
 800f97c:	0800fa2d 	.word	0x0800fa2d
 800f980:	0800fa2d 	.word	0x0800fa2d
 800f984:	0800fa2d 	.word	0x0800fa2d
 800f988:	0800fa2d 	.word	0x0800fa2d
 800f98c:	0800fa2d 	.word	0x0800fa2d
 800f990:	0800fa2d 	.word	0x0800fa2d
 800f994:	0800fa2d 	.word	0x0800fa2d
 800f998:	0800fa2d 	.word	0x0800fa2d
 800f99c:	0800fa2d 	.word	0x0800fa2d
 800f9a0:	0800fa2d 	.word	0x0800fa2d
 800f9a4:	0800fa2d 	.word	0x0800fa2d
 800f9a8:	0800fa2d 	.word	0x0800fa2d
 800f9ac:	0800fa1f 	.word	0x0800fa1f
 800f9b0:	2b40      	cmp	r3, #64	@ 0x40
 800f9b2:	d037      	beq.n	800fa24 <UART_SetConfig+0xc44>
 800f9b4:	e03a      	b.n	800fa2c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9b6:	f7f9 fed9 	bl	800976c <HAL_RCC_GetPCLK1Freq>
 800f9ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9bc:	e03c      	b.n	800fa38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9be:	f7f9 feeb 	bl	8009798 <HAL_RCC_GetPCLK2Freq>
 800f9c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f9c4:	e038      	b.n	800fa38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fb fd82 	bl	800b4d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9d4:	e030      	b.n	800fa38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9d6:	f107 0318 	add.w	r3, r7, #24
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fb fece 	bl	800b77c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f9e4:	e028      	b.n	800fa38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9e6:	4b09      	ldr	r3, [pc, #36]	@ (800fa0c <UART_SetConfig+0xc2c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f003 0320 	and.w	r3, r3, #32
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d012      	beq.n	800fa18 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9f2:	4b06      	ldr	r3, [pc, #24]	@ (800fa0c <UART_SetConfig+0xc2c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	08db      	lsrs	r3, r3, #3
 800f9f8:	f003 0303 	and.w	r3, r3, #3
 800f9fc:	4a04      	ldr	r2, [pc, #16]	@ (800fa10 <UART_SetConfig+0xc30>)
 800f9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800fa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa04:	e018      	b.n	800fa38 <UART_SetConfig+0xc58>
 800fa06:	bf00      	nop
 800fa08:	08011e60 	.word	0x08011e60
 800fa0c:	58024400 	.word	0x58024400
 800fa10:	03d09000 	.word	0x03d09000
 800fa14:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800fa18:	4b24      	ldr	r3, [pc, #144]	@ (800faac <UART_SetConfig+0xccc>)
 800fa1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa1c:	e00c      	b.n	800fa38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa1e:	4b24      	ldr	r3, [pc, #144]	@ (800fab0 <UART_SetConfig+0xcd0>)
 800fa20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa22:	e009      	b.n	800fa38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fa2a:	e005      	b.n	800fa38 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fa30:	2301      	movs	r3, #1
 800fa32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fa36:	bf00      	nop
    }

    if (pclk != 0U)
 800fa38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d021      	beq.n	800fa82 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa42:	4a1c      	ldr	r2, [pc, #112]	@ (800fab4 <UART_SetConfig+0xcd4>)
 800fa44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa4c:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	085b      	lsrs	r3, r3, #1
 800fa56:	441a      	add	r2, r3
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa60:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa64:	2b0f      	cmp	r3, #15
 800fa66:	d909      	bls.n	800fa7c <UART_SetConfig+0xc9c>
 800fa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa6e:	d205      	bcs.n	800fa7c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	60da      	str	r2, [r3, #12]
 800fa7a:	e002      	b.n	800fa82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	2200      	movs	r2, #0
 800fa96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fa9e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3748      	adds	r7, #72	@ 0x48
 800faa6:	46bd      	mov	sp, r7
 800faa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800faac:	03d09000 	.word	0x03d09000
 800fab0:	003d0900 	.word	0x003d0900
 800fab4:	08011e60 	.word	0x08011e60

0800fab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fac4:	f003 0308 	and.w	r3, r3, #8
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00a      	beq.n	800fae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	430a      	orrs	r2, r1
 800fae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00a      	beq.n	800fb04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	430a      	orrs	r2, r1
 800fb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb08:	f003 0302 	and.w	r3, r3, #2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00a      	beq.n	800fb26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	430a      	orrs	r2, r1
 800fb24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb2a:	f003 0304 	and.w	r3, r3, #4
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00a      	beq.n	800fb48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	430a      	orrs	r2, r1
 800fb46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb4c:	f003 0310 	and.w	r3, r3, #16
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00a      	beq.n	800fb6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	430a      	orrs	r2, r1
 800fb68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb6e:	f003 0320 	and.w	r3, r3, #32
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d00a      	beq.n	800fb8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	430a      	orrs	r2, r1
 800fb8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d01a      	beq.n	800fbce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	430a      	orrs	r2, r1
 800fbac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fbb6:	d10a      	bne.n	800fbce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	430a      	orrs	r2, r1
 800fbcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00a      	beq.n	800fbf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	430a      	orrs	r2, r1
 800fbee:	605a      	str	r2, [r3, #4]
  }
}
 800fbf0:	bf00      	nop
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b098      	sub	sp, #96	@ 0x60
 800fc00:	af02      	add	r7, sp, #8
 800fc02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc0c:	f7f2 ffec 	bl	8002be8 <HAL_GetTick>
 800fc10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f003 0308 	and.w	r3, r3, #8
 800fc1c:	2b08      	cmp	r3, #8
 800fc1e:	d12f      	bne.n	800fc80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 f88e 	bl	800fd50 <UART_WaitOnFlagUntilTimeout>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d022      	beq.n	800fc80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc42:	e853 3f00 	ldrex	r3, [r3]
 800fc46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc4e:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	461a      	mov	r2, r3
 800fc56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc58:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc60:	e841 2300 	strex	r3, r2, [r1]
 800fc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1e6      	bne.n	800fc3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2220      	movs	r2, #32
 800fc70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc7c:	2303      	movs	r3, #3
 800fc7e:	e063      	b.n	800fd48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 0304 	and.w	r3, r3, #4
 800fc8a:	2b04      	cmp	r3, #4
 800fc8c:	d149      	bne.n	800fd22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc8e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc96:	2200      	movs	r2, #0
 800fc98:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 f857 	bl	800fd50 <UART_WaitOnFlagUntilTimeout>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d03c      	beq.n	800fd22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb0:	e853 3f00 	ldrex	r3, [r3]
 800fcb4:	623b      	str	r3, [r7, #32]
   return(result);
 800fcb6:	6a3b      	ldr	r3, [r7, #32]
 800fcb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fcc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcce:	e841 2300 	strex	r3, r2, [r1]
 800fcd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e6      	bne.n	800fca8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	3308      	adds	r3, #8
 800fce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	e853 3f00 	ldrex	r3, [r3]
 800fce8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f023 0301 	bic.w	r3, r3, #1
 800fcf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcfa:	61fa      	str	r2, [r7, #28]
 800fcfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfe:	69b9      	ldr	r1, [r7, #24]
 800fd00:	69fa      	ldr	r2, [r7, #28]
 800fd02:	e841 2300 	strex	r3, r2, [r1]
 800fd06:	617b      	str	r3, [r7, #20]
   return(result);
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e5      	bne.n	800fcda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2220      	movs	r2, #32
 800fd12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fd1e:	2303      	movs	r3, #3
 800fd20:	e012      	b.n	800fd48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2220      	movs	r2, #32
 800fd26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2220      	movs	r2, #32
 800fd2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3758      	adds	r7, #88	@ 0x58
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	603b      	str	r3, [r7, #0]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd60:	e04f      	b.n	800fe02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd68:	d04b      	beq.n	800fe02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd6a:	f7f2 ff3d 	bl	8002be8 <HAL_GetTick>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	69ba      	ldr	r2, [r7, #24]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d302      	bcc.n	800fd80 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d101      	bne.n	800fd84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fd80:	2303      	movs	r3, #3
 800fd82:	e04e      	b.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f003 0304 	and.w	r3, r3, #4
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d037      	beq.n	800fe02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	2b80      	cmp	r3, #128	@ 0x80
 800fd96:	d034      	beq.n	800fe02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	2b40      	cmp	r3, #64	@ 0x40
 800fd9c:	d031      	beq.n	800fe02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	69db      	ldr	r3, [r3, #28]
 800fda4:	f003 0308 	and.w	r3, r3, #8
 800fda8:	2b08      	cmp	r3, #8
 800fdaa:	d110      	bne.n	800fdce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2208      	movs	r2, #8
 800fdb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f000 f839 	bl	800fe2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2208      	movs	r2, #8
 800fdbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e029      	b.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	69db      	ldr	r3, [r3, #28]
 800fdd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fdd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fddc:	d111      	bne.n	800fe02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fde6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fde8:	68f8      	ldr	r0, [r7, #12]
 800fdea:	f000 f81f 	bl	800fe2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2220      	movs	r2, #32
 800fdf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fdfe:	2303      	movs	r3, #3
 800fe00:	e00f      	b.n	800fe22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	69da      	ldr	r2, [r3, #28]
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	4013      	ands	r3, r2
 800fe0c:	68ba      	ldr	r2, [r7, #8]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	bf0c      	ite	eq
 800fe12:	2301      	moveq	r3, #1
 800fe14:	2300      	movne	r3, #0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	461a      	mov	r2, r3
 800fe1a:	79fb      	ldrb	r3, [r7, #7]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d0a0      	beq.n	800fd62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
	...

0800fe2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b095      	sub	sp, #84	@ 0x54
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe3c:	e853 3f00 	ldrex	r3, [r3]
 800fe40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe52:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe5a:	e841 2300 	strex	r3, r2, [r1]
 800fe5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1e6      	bne.n	800fe34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	3308      	adds	r3, #8
 800fe6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6e:	6a3b      	ldr	r3, [r7, #32]
 800fe70:	e853 3f00 	ldrex	r3, [r3]
 800fe74:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe76:	69fa      	ldr	r2, [r7, #28]
 800fe78:	4b1e      	ldr	r3, [pc, #120]	@ (800fef4 <UART_EndRxTransfer+0xc8>)
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	3308      	adds	r3, #8
 800fe84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe8e:	e841 2300 	strex	r3, r2, [r1]
 800fe92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1e5      	bne.n	800fe66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d118      	bne.n	800fed4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	e853 3f00 	ldrex	r3, [r3]
 800feae:	60bb      	str	r3, [r7, #8]
   return(result);
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	f023 0310 	bic.w	r3, r3, #16
 800feb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	461a      	mov	r2, r3
 800febe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fec0:	61bb      	str	r3, [r7, #24]
 800fec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fec4:	6979      	ldr	r1, [r7, #20]
 800fec6:	69ba      	ldr	r2, [r7, #24]
 800fec8:	e841 2300 	strex	r3, r2, [r1]
 800fecc:	613b      	str	r3, [r7, #16]
   return(result);
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d1e6      	bne.n	800fea2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2220      	movs	r2, #32
 800fed8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fee8:	bf00      	nop
 800feea:	3754      	adds	r7, #84	@ 0x54
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr
 800fef4:	effffffe 	.word	0xeffffffe

0800fef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d101      	bne.n	800ff0e <HAL_UARTEx_DisableFifoMode+0x16>
 800ff0a:	2302      	movs	r3, #2
 800ff0c:	e027      	b.n	800ff5e <HAL_UARTEx_DisableFifoMode+0x66>
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2201      	movs	r2, #1
 800ff12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2224      	movs	r2, #36	@ 0x24
 800ff1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	f022 0201 	bic.w	r2, r2, #1
 800ff34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ff3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2220      	movs	r2, #32
 800ff50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff5c:	2300      	movs	r3, #0
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3714      	adds	r7, #20
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr

0800ff6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b084      	sub	sp, #16
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
 800ff72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d101      	bne.n	800ff82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff7e:	2302      	movs	r3, #2
 800ff80:	e02d      	b.n	800ffde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2224      	movs	r2, #36	@ 0x24
 800ff8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	f022 0201 	bic.w	r2, r2, #1
 800ffa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	689b      	ldr	r3, [r3, #8]
 800ffb0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 f850 	bl	8010064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b084      	sub	sp, #16
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d101      	bne.n	800fffe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fffa:	2302      	movs	r3, #2
 800fffc:	e02d      	b.n	801005a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2201      	movs	r2, #1
 8010002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2224      	movs	r2, #36	@ 0x24
 801000a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f022 0201 	bic.w	r2, r2, #1
 8010024:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	689b      	ldr	r3, [r3, #8]
 801002c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	683a      	ldr	r2, [r7, #0]
 8010036:	430a      	orrs	r2, r1
 8010038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f812 	bl	8010064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2220      	movs	r2, #32
 801004c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010058:	2300      	movs	r3, #0
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}
	...

08010064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010070:	2b00      	cmp	r3, #0
 8010072:	d108      	bne.n	8010086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010084:	e031      	b.n	80100ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010086:	2310      	movs	r3, #16
 8010088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801008a:	2310      	movs	r3, #16
 801008c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	689b      	ldr	r3, [r3, #8]
 8010094:	0e5b      	lsrs	r3, r3, #25
 8010096:	b2db      	uxtb	r3, r3
 8010098:	f003 0307 	and.w	r3, r3, #7
 801009c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	0f5b      	lsrs	r3, r3, #29
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	f003 0307 	and.w	r3, r3, #7
 80100ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100ae:	7bbb      	ldrb	r3, [r7, #14]
 80100b0:	7b3a      	ldrb	r2, [r7, #12]
 80100b2:	4911      	ldr	r1, [pc, #68]	@ (80100f8 <UARTEx_SetNbDataToProcess+0x94>)
 80100b4:	5c8a      	ldrb	r2, [r1, r2]
 80100b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100ba:	7b3a      	ldrb	r2, [r7, #12]
 80100bc:	490f      	ldr	r1, [pc, #60]	@ (80100fc <UARTEx_SetNbDataToProcess+0x98>)
 80100be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100cc:	7bfb      	ldrb	r3, [r7, #15]
 80100ce:	7b7a      	ldrb	r2, [r7, #13]
 80100d0:	4909      	ldr	r1, [pc, #36]	@ (80100f8 <UARTEx_SetNbDataToProcess+0x94>)
 80100d2:	5c8a      	ldrb	r2, [r1, r2]
 80100d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100d8:	7b7a      	ldrb	r2, [r7, #13]
 80100da:	4908      	ldr	r1, [pc, #32]	@ (80100fc <UARTEx_SetNbDataToProcess+0x98>)
 80100dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100de:	fb93 f3f2 	sdiv	r3, r3, r2
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80100ea:	bf00      	nop
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	08011e78 	.word	0x08011e78
 80100fc:	08011e80 	.word	0x08011e80

08010100 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010100:	b084      	sub	sp, #16
 8010102:	b480      	push	{r7}
 8010104:	b085      	sub	sp, #20
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	f107 001c 	add.w	r0, r7, #28
 801010e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010116:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010118:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801011a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801011c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801011e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8010122:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8010126:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	4313      	orrs	r3, r2
 801012c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	4b07      	ldr	r3, [pc, #28]	@ (8010150 <SDMMC_Init+0x50>)
 8010134:	4013      	ands	r3, r2
 8010136:	68fa      	ldr	r2, [r7, #12]
 8010138:	431a      	orrs	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3714      	adds	r7, #20
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	b004      	add	sp, #16
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	ffc02c00 	.word	0xffc02c00

08010154 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010162:	4618      	mov	r0, r3
 8010164:	370c      	adds	r7, #12
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr

0801016e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801016e:	b480      	push	{r7}
 8010170:	b083      	sub	sp, #12
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
 8010176:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010182:	2300      	movs	r3, #0
}
 8010184:	4618      	mov	r0, r3
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f043 0203 	orr.w	r2, r3, #3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	370c      	adds	r7, #12
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f003 0303 	and.w	r3, r3, #3
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	370c      	adds	r7, #12
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr
	...

080101d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101da:	2300      	movs	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80101f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80101fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4313      	orrs	r3, r2
 8010200:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68da      	ldr	r2, [r3, #12]
 8010206:	4b06      	ldr	r3, [pc, #24]	@ (8010220 <SDMMC_SendCommand+0x50>)
 8010208:	4013      	ands	r3, r2
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	431a      	orrs	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	fffee0c0 	.word	0xfffee0c0

08010224 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	b2db      	uxtb	r3, r3
}
 8010232:	4618      	mov	r0, r3
 8010234:	370c      	adds	r7, #12
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr

0801023e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801023e:	b480      	push	{r7}
 8010240:	b085      	sub	sp, #20
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
 8010246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3314      	adds	r3, #20
 801024c:	461a      	mov	r2, r3
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	4413      	add	r3, r2
 8010252:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3714      	adds	r7, #20
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	685a      	ldr	r2, [r3, #4]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801028a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010290:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010296:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	4313      	orrs	r3, r2
 801029c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	431a      	orrs	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80102ae:	2300      	movs	r3, #0

}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3714      	adds	r7, #20
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr

080102bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b088      	sub	sp, #32
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102ca:	2310      	movs	r3, #16
 80102cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102d4:	2300      	movs	r3, #0
 80102d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102de:	f107 0308 	add.w	r3, r7, #8
 80102e2:	4619      	mov	r1, r3
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f7ff ff73 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80102ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102ee:	2110      	movs	r1, #16
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 fa5f 	bl	80107b4 <SDMMC_GetCmdResp1>
 80102f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102f8:	69fb      	ldr	r3, [r7, #28]
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3720      	adds	r7, #32
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}

08010302 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010302:	b580      	push	{r7, lr}
 8010304:	b088      	sub	sp, #32
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
 801030a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010310:	2311      	movs	r3, #17
 8010312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801031a:	2300      	movs	r3, #0
 801031c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801031e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010324:	f107 0308 	add.w	r3, r7, #8
 8010328:	4619      	mov	r1, r3
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7ff ff50 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010334:	2111      	movs	r1, #17
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fa3c 	bl	80107b4 <SDMMC_GetCmdResp1>
 801033c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801033e:	69fb      	ldr	r3, [r7, #28]
}
 8010340:	4618      	mov	r0, r3
 8010342:	3720      	adds	r7, #32
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b088      	sub	sp, #32
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010356:	2312      	movs	r3, #18
 8010358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801035a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801035e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010360:	2300      	movs	r3, #0
 8010362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010368:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801036a:	f107 0308 	add.w	r3, r7, #8
 801036e:	4619      	mov	r1, r3
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7ff ff2d 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010376:	f241 3288 	movw	r2, #5000	@ 0x1388
 801037a:	2112      	movs	r1, #18
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fa19 	bl	80107b4 <SDMMC_GetCmdResp1>
 8010382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010384:	69fb      	ldr	r3, [r7, #28]
}
 8010386:	4618      	mov	r0, r3
 8010388:	3720      	adds	r7, #32
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b088      	sub	sp, #32
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801039c:	2318      	movs	r3, #24
 801039e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103a6:	2300      	movs	r3, #0
 80103a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103b0:	f107 0308 	add.w	r3, r7, #8
 80103b4:	4619      	mov	r1, r3
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f7ff ff0a 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80103bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103c0:	2118      	movs	r1, #24
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f9f6 	bl	80107b4 <SDMMC_GetCmdResp1>
 80103c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ca:	69fb      	ldr	r3, [r7, #28]
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3720      	adds	r7, #32
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b088      	sub	sp, #32
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80103e2:	2319      	movs	r3, #25
 80103e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ec:	2300      	movs	r3, #0
 80103ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103f6:	f107 0308 	add.w	r3, r7, #8
 80103fa:	4619      	mov	r1, r3
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7ff fee7 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010406:	2119      	movs	r1, #25
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f000 f9d3 	bl	80107b4 <SDMMC_GetCmdResp1>
 801040e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010410:	69fb      	ldr	r3, [r7, #28]
}
 8010412:	4618      	mov	r0, r3
 8010414:	3720      	adds	r7, #32
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
	...

0801041c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b088      	sub	sp, #32
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010424:	2300      	movs	r3, #0
 8010426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010428:	230c      	movs	r3, #12
 801042a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801042c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010432:	2300      	movs	r3, #0
 8010434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801043a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010454:	f107 0308 	add.w	r3, r7, #8
 8010458:	4619      	mov	r1, r3
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff feb8 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010460:	4a0b      	ldr	r2, [pc, #44]	@ (8010490 <SDMMC_CmdStopTransfer+0x74>)
 8010462:	210c      	movs	r1, #12
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 f9a5 	bl	80107b4 <SDMMC_GetCmdResp1>
 801046a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801047e:	d101      	bne.n	8010484 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010480:	2300      	movs	r3, #0
 8010482:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010484:	69fb      	ldr	r3, [r7, #28]
}
 8010486:	4618      	mov	r0, r3
 8010488:	3720      	adds	r7, #32
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	05f5e100 	.word	0x05f5e100

08010494 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104a2:	2307      	movs	r3, #7
 80104a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104ac:	2300      	movs	r3, #0
 80104ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104b6:	f107 0308 	add.w	r3, r7, #8
 80104ba:	4619      	mov	r1, r3
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f7ff fe87 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80104c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104c6:	2107      	movs	r1, #7
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 f973 	bl	80107b4 <SDMMC_GetCmdResp1>
 80104ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104d0:	69fb      	ldr	r3, [r7, #28]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3720      	adds	r7, #32
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}

080104da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80104da:	b580      	push	{r7, lr}
 80104dc:	b088      	sub	sp, #32
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80104e2:	2300      	movs	r3, #0
 80104e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104e6:	2300      	movs	r3, #0
 80104e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80104ea:	2300      	movs	r3, #0
 80104ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104ee:	2300      	movs	r3, #0
 80104f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104f8:	f107 0308 	add.w	r3, r7, #8
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7ff fe66 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fb97 	bl	8010c38 <SDMMC_GetCmdError>
 801050a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801050c:	69fb      	ldr	r3, [r7, #28]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3720      	adds	r7, #32
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b088      	sub	sp, #32
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801051e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010524:	2308      	movs	r3, #8
 8010526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801052c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801052e:	2300      	movs	r3, #0
 8010530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010536:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010538:	f107 0308 	add.w	r3, r7, #8
 801053c:	4619      	mov	r1, r3
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f7ff fe46 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 fb29 	bl	8010b9c <SDMMC_GetCmdResp7>
 801054a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801054c:	69fb      	ldr	r3, [r7, #28]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3720      	adds	r7, #32
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}

08010556 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010556:	b580      	push	{r7, lr}
 8010558:	b088      	sub	sp, #32
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
 801055e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010564:	2337      	movs	r3, #55	@ 0x37
 8010566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801056c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801056e:	2300      	movs	r3, #0
 8010570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010578:	f107 0308 	add.w	r3, r7, #8
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff fe26 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010588:	2137      	movs	r1, #55	@ 0x37
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f912 	bl	80107b4 <SDMMC_GetCmdResp1>
 8010590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010592:	69fb      	ldr	r3, [r7, #28]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3720      	adds	r7, #32
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b088      	sub	sp, #32
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105aa:	2329      	movs	r3, #41	@ 0x29
 80105ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105b4:	2300      	movs	r3, #0
 80105b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105be:	f107 0308 	add.w	r3, r7, #8
 80105c2:	4619      	mov	r1, r3
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f7ff fe03 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fa2e 	bl	8010a2c <SDMMC_GetCmdResp3>
 80105d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105d2:	69fb      	ldr	r3, [r7, #28]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80105ea:	2306      	movs	r3, #6
 80105ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105f4:	2300      	movs	r3, #0
 80105f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105fe:	f107 0308 	add.w	r3, r7, #8
 8010602:	4619      	mov	r1, r3
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7ff fde3 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801060a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801060e:	2106      	movs	r1, #6
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 f8cf 	bl	80107b4 <SDMMC_GetCmdResp1>
 8010616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010618:	69fb      	ldr	r3, [r7, #28]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3720      	adds	r7, #32
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b088      	sub	sp, #32
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801062a:	2300      	movs	r3, #0
 801062c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801062e:	2333      	movs	r3, #51	@ 0x33
 8010630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010638:	2300      	movs	r3, #0
 801063a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801063c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010640:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010642:	f107 0308 	add.w	r3, r7, #8
 8010646:	4619      	mov	r1, r3
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff fdc1 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801064e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010652:	2133      	movs	r1, #51	@ 0x33
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f8ad 	bl	80107b4 <SDMMC_GetCmdResp1>
 801065a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801065c:	69fb      	ldr	r3, [r7, #28]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3720      	adds	r7, #32
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b088      	sub	sp, #32
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801066e:	2300      	movs	r3, #0
 8010670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010672:	2302      	movs	r3, #2
 8010674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010676:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801067a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801067c:	2300      	movs	r3, #0
 801067e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010684:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010686:	f107 0308 	add.w	r3, r7, #8
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff fd9f 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 f980 	bl	8010998 <SDMMC_GetCmdResp2>
 8010698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801069a:	69fb      	ldr	r3, [r7, #28]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3720      	adds	r7, #32
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b088      	sub	sp, #32
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106b2:	2309      	movs	r3, #9
 80106b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80106b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80106ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106bc:	2300      	movs	r3, #0
 80106be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80106c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80106c6:	f107 0308 	add.w	r3, r7, #8
 80106ca:	4619      	mov	r1, r3
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff fd7f 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f960 	bl	8010998 <SDMMC_GetCmdResp2>
 80106d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106da:	69fb      	ldr	r3, [r7, #28]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80106ee:	2300      	movs	r3, #0
 80106f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80106f2:	2303      	movs	r3, #3
 80106f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80106f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80106fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80106fc:	2300      	movs	r3, #0
 80106fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010704:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	4619      	mov	r1, r3
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7ff fd5f 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010712:	683a      	ldr	r2, [r7, #0]
 8010714:	2103      	movs	r1, #3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f9c8 	bl	8010aac <SDMMC_GetCmdResp6>
 801071c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071e:	69fb      	ldr	r3, [r7, #28]
}
 8010720:	4618      	mov	r0, r3
 8010722:	3720      	adds	r7, #32
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b088      	sub	sp, #32
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010736:	230d      	movs	r3, #13
 8010738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801073a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801073e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010740:	2300      	movs	r3, #0
 8010742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801074a:	f107 0308 	add.w	r3, r7, #8
 801074e:	4619      	mov	r1, r3
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f7ff fd3d 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010756:	f241 3288 	movw	r2, #5000	@ 0x1388
 801075a:	210d      	movs	r1, #13
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 f829 	bl	80107b4 <SDMMC_GetCmdResp1>
 8010762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010764:	69fb      	ldr	r3, [r7, #28]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3720      	adds	r7, #32
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b088      	sub	sp, #32
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010776:	2300      	movs	r3, #0
 8010778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801077a:	230d      	movs	r3, #13
 801077c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801077e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010784:	2300      	movs	r3, #0
 8010786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801078c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801078e:	f107 0308 	add.w	r3, r7, #8
 8010792:	4619      	mov	r1, r3
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7ff fd1b 	bl	80101d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801079a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801079e:	210d      	movs	r1, #13
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 f807 	bl	80107b4 <SDMMC_GetCmdResp1>
 80107a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107a8:	69fb      	ldr	r3, [r7, #28]
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3720      	adds	r7, #32
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
	...

080107b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b088      	sub	sp, #32
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	460b      	mov	r3, r1
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80107c2:	4b70      	ldr	r3, [pc, #448]	@ (8010984 <SDMMC_GetCmdResp1+0x1d0>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	4a70      	ldr	r2, [pc, #448]	@ (8010988 <SDMMC_GetCmdResp1+0x1d4>)
 80107c8:	fba2 2303 	umull	r2, r3, r2, r3
 80107cc:	0a5a      	lsrs	r2, r3, #9
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	fb02 f303 	mul.w	r3, r2, r3
 80107d4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	1e5a      	subs	r2, r3, #1
 80107da:	61fa      	str	r2, [r7, #28]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d102      	bne.n	80107e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107e4:	e0c9      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107ea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80107ec:	69ba      	ldr	r2, [r7, #24]
 80107ee:	4b67      	ldr	r3, [pc, #412]	@ (801098c <SDMMC_GetCmdResp1+0x1d8>)
 80107f0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d0ef      	beq.n	80107d6 <SDMMC_GetCmdResp1+0x22>
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1ea      	bne.n	80107d6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010804:	f003 0304 	and.w	r3, r3, #4
 8010808:	2b00      	cmp	r3, #0
 801080a:	d004      	beq.n	8010816 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2204      	movs	r2, #4
 8010810:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010812:	2304      	movs	r3, #4
 8010814:	e0b1      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801081a:	f003 0301 	and.w	r3, r3, #1
 801081e:	2b00      	cmp	r3, #0
 8010820:	d004      	beq.n	801082c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2201      	movs	r2, #1
 8010826:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010828:	2301      	movs	r3, #1
 801082a:	e0a6      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	4a58      	ldr	r2, [pc, #352]	@ (8010990 <SDMMC_GetCmdResp1+0x1dc>)
 8010830:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7ff fcf6 	bl	8010224 <SDMMC_GetCommandResponse>
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	7afb      	ldrb	r3, [r7, #11]
 801083e:	4293      	cmp	r3, r2
 8010840:	d001      	beq.n	8010846 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010842:	2301      	movs	r3, #1
 8010844:	e099      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010846:	2100      	movs	r1, #0
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f7ff fcf8 	bl	801023e <SDMMC_GetResponse>
 801084e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010850:	697a      	ldr	r2, [r7, #20]
 8010852:	4b50      	ldr	r3, [pc, #320]	@ (8010994 <SDMMC_GetCmdResp1+0x1e0>)
 8010854:	4013      	ands	r3, r2
 8010856:	2b00      	cmp	r3, #0
 8010858:	d101      	bne.n	801085e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801085a:	2300      	movs	r3, #0
 801085c:	e08d      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	2b00      	cmp	r3, #0
 8010862:	da02      	bge.n	801086a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010868:	e087      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010870:	2b00      	cmp	r3, #0
 8010872:	d001      	beq.n	8010878 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010874:	2340      	movs	r3, #64	@ 0x40
 8010876:	e080      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801087e:	2b00      	cmp	r3, #0
 8010880:	d001      	beq.n	8010886 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010882:	2380      	movs	r3, #128	@ 0x80
 8010884:	e079      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801088c:	2b00      	cmp	r3, #0
 801088e:	d002      	beq.n	8010896 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010894:	e071      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801089c:	2b00      	cmp	r3, #0
 801089e:	d002      	beq.n	80108a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108a4:	e069      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d002      	beq.n	80108b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108b4:	e061      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80108c4:	e059      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108d4:	e051      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80108e4:	e049      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80108f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80108f4:	e041      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010904:	e039      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010914:	e031      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010920:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010924:	e029      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010930:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010934:	e021      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010940:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010944:	e019      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010950:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010954:	e011      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010960:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010964:	e009      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f003 0308 	and.w	r3, r3, #8
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010970:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010974:	e001      	b.n	801097a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801097a:	4618      	mov	r0, r3
 801097c:	3720      	adds	r7, #32
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	2400000c 	.word	0x2400000c
 8010988:	10624dd3 	.word	0x10624dd3
 801098c:	00200045 	.word	0x00200045
 8010990:	002000c5 	.word	0x002000c5
 8010994:	fdffe008 	.word	0xfdffe008

08010998 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109a0:	4b1f      	ldr	r3, [pc, #124]	@ (8010a20 <SDMMC_GetCmdResp2+0x88>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4a1f      	ldr	r2, [pc, #124]	@ (8010a24 <SDMMC_GetCmdResp2+0x8c>)
 80109a6:	fba2 2303 	umull	r2, r3, r2, r3
 80109aa:	0a5b      	lsrs	r3, r3, #9
 80109ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109b0:	fb02 f303 	mul.w	r3, r2, r3
 80109b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	1e5a      	subs	r2, r3, #1
 80109ba:	60fa      	str	r2, [r7, #12]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d102      	bne.n	80109c6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80109c4:	e026      	b.n	8010a14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0ef      	beq.n	80109b6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1ea      	bne.n	80109b6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109e4:	f003 0304 	and.w	r3, r3, #4
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d004      	beq.n	80109f6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2204      	movs	r2, #4
 80109f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109f2:	2304      	movs	r3, #4
 80109f4:	e00e      	b.n	8010a14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109fa:	f003 0301 	and.w	r3, r3, #1
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d004      	beq.n	8010a0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e003      	b.n	8010a14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	4a06      	ldr	r2, [pc, #24]	@ (8010a28 <SDMMC_GetCmdResp2+0x90>)
 8010a10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3714      	adds	r7, #20
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	2400000c 	.word	0x2400000c
 8010a24:	10624dd3 	.word	0x10624dd3
 8010a28:	002000c5 	.word	0x002000c5

08010a2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a34:	4b1a      	ldr	r3, [pc, #104]	@ (8010aa0 <SDMMC_GetCmdResp3+0x74>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	4a1a      	ldr	r2, [pc, #104]	@ (8010aa4 <SDMMC_GetCmdResp3+0x78>)
 8010a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a3e:	0a5b      	lsrs	r3, r3, #9
 8010a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a44:	fb02 f303 	mul.w	r3, r2, r3
 8010a48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	1e5a      	subs	r2, r3, #1
 8010a4e:	60fa      	str	r2, [r7, #12]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d102      	bne.n	8010a5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a54:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a58:	e01b      	b.n	8010a92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d0ef      	beq.n	8010a4a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1ea      	bne.n	8010a4a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d004      	beq.n	8010a8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2204      	movs	r2, #4
 8010a84:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a86:	2304      	movs	r3, #4
 8010a88:	e003      	b.n	8010a92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a06      	ldr	r2, [pc, #24]	@ (8010aa8 <SDMMC_GetCmdResp3+0x7c>)
 8010a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a90:	2300      	movs	r3, #0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	2400000c 	.word	0x2400000c
 8010aa4:	10624dd3 	.word	0x10624dd3
 8010aa8:	002000c5 	.word	0x002000c5

08010aac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	607a      	str	r2, [r7, #4]
 8010ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010aba:	4b35      	ldr	r3, [pc, #212]	@ (8010b90 <SDMMC_GetCmdResp6+0xe4>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a35      	ldr	r2, [pc, #212]	@ (8010b94 <SDMMC_GetCmdResp6+0xe8>)
 8010ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ac4:	0a5b      	lsrs	r3, r3, #9
 8010ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aca:	fb02 f303 	mul.w	r3, r2, r3
 8010ace:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	1e5a      	subs	r2, r3, #1
 8010ad4:	61fa      	str	r2, [r7, #28]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d102      	bne.n	8010ae0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ada:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ade:	e052      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ae4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d0ef      	beq.n	8010ad0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1ea      	bne.n	8010ad0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010afe:	f003 0304 	and.w	r3, r3, #4
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d004      	beq.n	8010b10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2204      	movs	r2, #4
 8010b0a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b0c:	2304      	movs	r3, #4
 8010b0e:	e03a      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b14:	f003 0301 	and.w	r3, r3, #1
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d004      	beq.n	8010b26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b22:	2301      	movs	r3, #1
 8010b24:	e02f      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f7ff fb7c 	bl	8010224 <SDMMC_GetCommandResponse>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	7afb      	ldrb	r3, [r7, #11]
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d001      	beq.n	8010b3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b36:	2301      	movs	r3, #1
 8010b38:	e025      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	4a16      	ldr	r2, [pc, #88]	@ (8010b98 <SDMMC_GetCmdResp6+0xec>)
 8010b3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010b40:	2100      	movs	r1, #0
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f7ff fb7b 	bl	801023e <SDMMC_GetResponse>
 8010b48:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	0c1b      	lsrs	r3, r3, #16
 8010b58:	b29a      	uxth	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e011      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d002      	beq.n	8010b72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010b70:	e009      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d002      	beq.n	8010b82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b80:	e001      	b.n	8010b86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3720      	adds	r7, #32
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	2400000c 	.word	0x2400000c
 8010b94:	10624dd3 	.word	0x10624dd3
 8010b98:	002000c5 	.word	0x002000c5

08010b9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ba4:	4b22      	ldr	r3, [pc, #136]	@ (8010c30 <SDMMC_GetCmdResp7+0x94>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a22      	ldr	r2, [pc, #136]	@ (8010c34 <SDMMC_GetCmdResp7+0x98>)
 8010baa:	fba2 2303 	umull	r2, r3, r2, r3
 8010bae:	0a5b      	lsrs	r3, r3, #9
 8010bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bb4:	fb02 f303 	mul.w	r3, r2, r3
 8010bb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	1e5a      	subs	r2, r3, #1
 8010bbe:	60fa      	str	r2, [r7, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d102      	bne.n	8010bca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010bc8:	e02c      	b.n	8010c24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d0ef      	beq.n	8010bba <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1ea      	bne.n	8010bba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010be8:	f003 0304 	and.w	r3, r3, #4
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d004      	beq.n	8010bfa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2204      	movs	r2, #4
 8010bf4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bf6:	2304      	movs	r3, #4
 8010bf8:	e014      	b.n	8010c24 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d004      	beq.n	8010c10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2201      	movs	r2, #1
 8010c0a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e009      	b.n	8010c24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d002      	beq.n	8010c22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2240      	movs	r2, #64	@ 0x40
 8010c20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c22:	2300      	movs	r3, #0

}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr
 8010c30:	2400000c 	.word	0x2400000c
 8010c34:	10624dd3 	.word	0x10624dd3

08010c38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010c40:	4b11      	ldr	r3, [pc, #68]	@ (8010c88 <SDMMC_GetCmdError+0x50>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4a11      	ldr	r2, [pc, #68]	@ (8010c8c <SDMMC_GetCmdError+0x54>)
 8010c46:	fba2 2303 	umull	r2, r3, r2, r3
 8010c4a:	0a5b      	lsrs	r3, r3, #9
 8010c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c50:	fb02 f303 	mul.w	r3, r2, r3
 8010c54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	1e5a      	subs	r2, r3, #1
 8010c5a:	60fa      	str	r2, [r7, #12]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d102      	bne.n	8010c66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010c64:	e009      	b.n	8010c7a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0f1      	beq.n	8010c56 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4a06      	ldr	r2, [pc, #24]	@ (8010c90 <SDMMC_GetCmdError+0x58>)
 8010c76:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3714      	adds	r7, #20
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	2400000c 	.word	0x2400000c
 8010c8c:	10624dd3 	.word	0x10624dd3
 8010c90:	002000c5 	.word	0x002000c5

08010c94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c98:	4904      	ldr	r1, [pc, #16]	@ (8010cac <MX_FATFS_Init+0x18>)
 8010c9a:	4805      	ldr	r0, [pc, #20]	@ (8010cb0 <MX_FATFS_Init+0x1c>)
 8010c9c:	f000 fa8e 	bl	80111bc <FATFS_LinkDriver>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	4b03      	ldr	r3, [pc, #12]	@ (8010cb4 <MX_FATFS_Init+0x20>)
 8010ca6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ca8:	bf00      	nop
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	240008a4 	.word	0x240008a4
 8010cb0:	08011e88 	.word	0x08011e88
 8010cb4:	240008a0 	.word	0x240008a0

08010cb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cc2:	f000 f885 	bl	8010dd0 <BSP_SD_IsDetected>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	d001      	beq.n	8010cd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010ccc:	2302      	movs	r3, #2
 8010cce:	e012      	b.n	8010cf6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010cd0:	480b      	ldr	r0, [pc, #44]	@ (8010d00 <BSP_SD_Init+0x48>)
 8010cd2:	f7fb f95d 	bl	800bf90 <HAL_SD_Init>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010cda:	79fb      	ldrb	r3, [r7, #7]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d109      	bne.n	8010cf4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010ce0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010ce4:	4806      	ldr	r0, [pc, #24]	@ (8010d00 <BSP_SD_Init+0x48>)
 8010ce6:	f7fc f813 	bl	800cd10 <HAL_SD_ConfigWideBusOperation>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	240003cc 	.word	0x240003cc

08010d04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d10:	2300      	movs	r3, #0
 8010d12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	68ba      	ldr	r2, [r7, #8]
 8010d18:	68f9      	ldr	r1, [r7, #12]
 8010d1a:	4806      	ldr	r0, [pc, #24]	@ (8010d34 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010d1c:	f7fb fa58 	bl	800c1d0 <HAL_SD_ReadBlocks_DMA>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d001      	beq.n	8010d2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d26:	2301      	movs	r3, #1
 8010d28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3718      	adds	r7, #24
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	240003cc 	.word	0x240003cc

08010d38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d44:	2300      	movs	r3, #0
 8010d46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	68f9      	ldr	r1, [r7, #12]
 8010d4e:	4806      	ldr	r0, [pc, #24]	@ (8010d68 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d50:	f7fb fae6 	bl	800c320 <HAL_SD_WriteBlocks_DMA>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3718      	adds	r7, #24
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	240003cc 	.word	0x240003cc

08010d6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d70:	4805      	ldr	r0, [pc, #20]	@ (8010d88 <BSP_SD_GetCardState+0x1c>)
 8010d72:	f7fc f8df 	bl	800cf34 <HAL_SD_GetCardState>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b04      	cmp	r3, #4
 8010d7a:	bf14      	ite	ne
 8010d7c:	2301      	movne	r3, #1
 8010d7e:	2300      	moveq	r3, #0
 8010d80:	b2db      	uxtb	r3, r3
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	240003cc 	.word	0x240003cc

08010d8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010d94:	6879      	ldr	r1, [r7, #4]
 8010d96:	4803      	ldr	r0, [pc, #12]	@ (8010da4 <BSP_SD_GetCardInfo+0x18>)
 8010d98:	f7fb ff8e 	bl	800ccb8 <HAL_SD_GetCardInfo>
}
 8010d9c:	bf00      	nop
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	240003cc 	.word	0x240003cc

08010da8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010db0:	f000 f9a0 	bl	80110f4 <BSP_SD_WriteCpltCallback>
}
 8010db4:	bf00      	nop
 8010db6:	3708      	adds	r7, #8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010dc4:	f000 f9a2 	bl	801110c <BSP_SD_ReadCpltCallback>
}
 8010dc8:	bf00      	nop
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010dda:	f000 f80b 	bl	8010df4 <BSP_PlatformIsDetected>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010de4:	2300      	movs	r3, #0
 8010de6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010de8:	79fb      	ldrb	r3, [r7, #7]
 8010dea:	b2db      	uxtb	r3, r3
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010e02:	4806      	ldr	r0, [pc, #24]	@ (8010e1c <BSP_PlatformIsDetected+0x28>)
 8010e04:	f7f7 fd0c 	bl	8008820 <HAL_GPIO_ReadPin>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d001      	beq.n	8010e12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010e12:	79fb      	ldrb	r3, [r7, #7]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	58021400 	.word	0x58021400

08010e20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e28:	f7f1 fede 	bl	8002be8 <HAL_GetTick>
 8010e2c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e2e:	e006      	b.n	8010e3e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e30:	f7ff ff9c 	bl	8010d6c <BSP_SD_GetCardState>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d101      	bne.n	8010e3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	e009      	b.n	8010e52 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e3e:	f7f1 fed3 	bl	8002be8 <HAL_GetTick>
 8010e42:	4602      	mov	r2, r0
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d8f0      	bhi.n	8010e30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
	...

08010e5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	4603      	mov	r3, r0
 8010e64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e66:	4b0b      	ldr	r3, [pc, #44]	@ (8010e94 <SD_CheckStatus+0x38>)
 8010e68:	2201      	movs	r2, #1
 8010e6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e6c:	f7ff ff7e 	bl	8010d6c <BSP_SD_GetCardState>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d107      	bne.n	8010e86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e76:	4b07      	ldr	r3, [pc, #28]	@ (8010e94 <SD_CheckStatus+0x38>)
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	f023 0301 	bic.w	r3, r3, #1
 8010e80:	b2da      	uxtb	r2, r3
 8010e82:	4b04      	ldr	r3, [pc, #16]	@ (8010e94 <SD_CheckStatus+0x38>)
 8010e84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e86:	4b03      	ldr	r3, [pc, #12]	@ (8010e94 <SD_CheckStatus+0x38>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b2db      	uxtb	r3, r3
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	24000019 	.word	0x24000019

08010e98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b082      	sub	sp, #8
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010ea2:	f7ff ff09 	bl	8010cb8 <BSP_SD_Init>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d107      	bne.n	8010ebc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010eac:	79fb      	ldrb	r3, [r7, #7]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7ff ffd4 	bl	8010e5c <SD_CheckStatus>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4b04      	ldr	r3, [pc, #16]	@ (8010ecc <SD_initialize+0x34>)
 8010eba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010ebc:	4b03      	ldr	r3, [pc, #12]	@ (8010ecc <SD_initialize+0x34>)
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	b2db      	uxtb	r3, r3
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	24000019 	.word	0x24000019

08010ed0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010eda:	79fb      	ldrb	r3, [r7, #7]
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff ffbd 	bl	8010e5c <SD_CheckStatus>
 8010ee2:	4603      	mov	r3, r0
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60b9      	str	r1, [r7, #8]
 8010ef4:	607a      	str	r2, [r7, #4]
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	4603      	mov	r3, r0
 8010efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010efc:	2301      	movs	r3, #1
 8010efe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f00:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010f04:	f7ff ff8c 	bl	8010e20 <SD_CheckStatusWithTimeout>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	da01      	bge.n	8010f12 <SD_read+0x26>
  {
    return res;
 8010f0e:	7dfb      	ldrb	r3, [r7, #23]
 8010f10:	e03b      	b.n	8010f8a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	6879      	ldr	r1, [r7, #4]
 8010f16:	68b8      	ldr	r0, [r7, #8]
 8010f18:	f7ff fef4 	bl	8010d04 <BSP_SD_ReadBlocks_DMA>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d132      	bne.n	8010f88 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f22:	4b1c      	ldr	r3, [pc, #112]	@ (8010f94 <SD_read+0xa8>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f28:	f7f1 fe5e 	bl	8002be8 <HAL_GetTick>
 8010f2c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f2e:	bf00      	nop
 8010f30:	4b18      	ldr	r3, [pc, #96]	@ (8010f94 <SD_read+0xa8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d108      	bne.n	8010f4a <SD_read+0x5e>
 8010f38:	f7f1 fe56 	bl	8002be8 <HAL_GetTick>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	1ad3      	subs	r3, r2, r3
 8010f42:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d9f2      	bls.n	8010f30 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010f4a:	4b12      	ldr	r3, [pc, #72]	@ (8010f94 <SD_read+0xa8>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d102      	bne.n	8010f58 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f52:	2301      	movs	r3, #1
 8010f54:	75fb      	strb	r3, [r7, #23]
 8010f56:	e017      	b.n	8010f88 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f58:	4b0e      	ldr	r3, [pc, #56]	@ (8010f94 <SD_read+0xa8>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f5e:	f7f1 fe43 	bl	8002be8 <HAL_GetTick>
 8010f62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f64:	e007      	b.n	8010f76 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f66:	f7ff ff01 	bl	8010d6c <BSP_SD_GetCardState>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d102      	bne.n	8010f76 <SD_read+0x8a>
          {
            res = RES_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f74:	e008      	b.n	8010f88 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f76:	f7f1 fe37 	bl	8002be8 <HAL_GetTick>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d9ee      	bls.n	8010f66 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3718      	adds	r7, #24
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	240008ac 	.word	0x240008ac

08010f98 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60b9      	str	r1, [r7, #8]
 8010fa0:	607a      	str	r2, [r7, #4]
 8010fa2:	603b      	str	r3, [r7, #0]
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010fac:	4b24      	ldr	r3, [pc, #144]	@ (8011040 <SD_write+0xa8>)
 8010fae:	2200      	movs	r2, #0
 8010fb0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010fb2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010fb6:	f7ff ff33 	bl	8010e20 <SD_CheckStatusWithTimeout>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	da01      	bge.n	8010fc4 <SD_write+0x2c>
  {
    return res;
 8010fc0:	7dfb      	ldrb	r3, [r7, #23]
 8010fc2:	e038      	b.n	8011036 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fc4:	683a      	ldr	r2, [r7, #0]
 8010fc6:	6879      	ldr	r1, [r7, #4]
 8010fc8:	68b8      	ldr	r0, [r7, #8]
 8010fca:	f7ff feb5 	bl	8010d38 <BSP_SD_WriteBlocks_DMA>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d12f      	bne.n	8011034 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010fd4:	f7f1 fe08 	bl	8002be8 <HAL_GetTick>
 8010fd8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fda:	bf00      	nop
 8010fdc:	4b18      	ldr	r3, [pc, #96]	@ (8011040 <SD_write+0xa8>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d108      	bne.n	8010ff6 <SD_write+0x5e>
 8010fe4:	f7f1 fe00 	bl	8002be8 <HAL_GetTick>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d9f2      	bls.n	8010fdc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010ff6:	4b12      	ldr	r3, [pc, #72]	@ (8011040 <SD_write+0xa8>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d102      	bne.n	8011004 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010ffe:	2301      	movs	r3, #1
 8011000:	75fb      	strb	r3, [r7, #23]
 8011002:	e017      	b.n	8011034 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011004:	4b0e      	ldr	r3, [pc, #56]	@ (8011040 <SD_write+0xa8>)
 8011006:	2200      	movs	r2, #0
 8011008:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801100a:	f7f1 fded 	bl	8002be8 <HAL_GetTick>
 801100e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011010:	e007      	b.n	8011022 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011012:	f7ff feab 	bl	8010d6c <BSP_SD_GetCardState>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d102      	bne.n	8011022 <SD_write+0x8a>
          {
            res = RES_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	75fb      	strb	r3, [r7, #23]
            break;
 8011020:	e008      	b.n	8011034 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011022:	f7f1 fde1 	bl	8002be8 <HAL_GetTick>
 8011026:	4602      	mov	r2, r0
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011030:	4293      	cmp	r3, r2
 8011032:	d9ee      	bls.n	8011012 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011034:	7dfb      	ldrb	r3, [r7, #23]
}
 8011036:	4618      	mov	r0, r3
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	240008a8 	.word	0x240008a8

08011044 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b08c      	sub	sp, #48	@ 0x30
 8011048:	af00      	add	r7, sp, #0
 801104a:	4603      	mov	r3, r0
 801104c:	603a      	str	r2, [r7, #0]
 801104e:	71fb      	strb	r3, [r7, #7]
 8011050:	460b      	mov	r3, r1
 8011052:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011054:	2301      	movs	r3, #1
 8011056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801105a:	4b25      	ldr	r3, [pc, #148]	@ (80110f0 <SD_ioctl+0xac>)
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	b2db      	uxtb	r3, r3
 8011060:	f003 0301 	and.w	r3, r3, #1
 8011064:	2b00      	cmp	r3, #0
 8011066:	d001      	beq.n	801106c <SD_ioctl+0x28>
 8011068:	2303      	movs	r3, #3
 801106a:	e03c      	b.n	80110e6 <SD_ioctl+0xa2>

  switch (cmd)
 801106c:	79bb      	ldrb	r3, [r7, #6]
 801106e:	2b03      	cmp	r3, #3
 8011070:	d834      	bhi.n	80110dc <SD_ioctl+0x98>
 8011072:	a201      	add	r2, pc, #4	@ (adr r2, 8011078 <SD_ioctl+0x34>)
 8011074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011078:	08011089 	.word	0x08011089
 801107c:	08011091 	.word	0x08011091
 8011080:	080110a9 	.word	0x080110a9
 8011084:	080110c3 	.word	0x080110c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011088:	2300      	movs	r3, #0
 801108a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801108e:	e028      	b.n	80110e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011090:	f107 0308 	add.w	r3, r7, #8
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fe79 	bl	8010d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801109a:	6a3a      	ldr	r2, [r7, #32]
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110a0:	2300      	movs	r3, #0
 80110a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110a6:	e01c      	b.n	80110e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110a8:	f107 0308 	add.w	r3, r7, #8
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff fe6d 	bl	8010d8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80110b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80110ba:	2300      	movs	r3, #0
 80110bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110c0:	e00f      	b.n	80110e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110c2:	f107 0308 	add.w	r3, r7, #8
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7ff fe60 	bl	8010d8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ce:	0a5a      	lsrs	r2, r3, #9
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80110da:	e002      	b.n	80110e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110dc:	2304      	movs	r3, #4
 80110de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80110e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3730      	adds	r7, #48	@ 0x30
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	24000019 	.word	0x24000019

080110f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80110f4:	b480      	push	{r7}
 80110f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80110f8:	4b03      	ldr	r3, [pc, #12]	@ (8011108 <BSP_SD_WriteCpltCallback+0x14>)
 80110fa:	2201      	movs	r2, #1
 80110fc:	601a      	str	r2, [r3, #0]
}
 80110fe:	bf00      	nop
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	240008a8 	.word	0x240008a8

0801110c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801110c:	b480      	push	{r7}
 801110e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011110:	4b03      	ldr	r3, [pc, #12]	@ (8011120 <BSP_SD_ReadCpltCallback+0x14>)
 8011112:	2201      	movs	r2, #1
 8011114:	601a      	str	r2, [r3, #0]
}
 8011116:	bf00      	nop
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	240008ac 	.word	0x240008ac

08011124 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011124:	b480      	push	{r7}
 8011126:	b087      	sub	sp, #28
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	4613      	mov	r3, r2
 8011130:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011132:	2301      	movs	r3, #1
 8011134:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801113a:	4b1f      	ldr	r3, [pc, #124]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 801113c:	7a5b      	ldrb	r3, [r3, #9]
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b00      	cmp	r3, #0
 8011142:	d131      	bne.n	80111a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011144:	4b1c      	ldr	r3, [pc, #112]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 8011146:	7a5b      	ldrb	r3, [r3, #9]
 8011148:	b2db      	uxtb	r3, r3
 801114a:	461a      	mov	r2, r3
 801114c:	4b1a      	ldr	r3, [pc, #104]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 801114e:	2100      	movs	r1, #0
 8011150:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011152:	4b19      	ldr	r3, [pc, #100]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 8011154:	7a5b      	ldrb	r3, [r3, #9]
 8011156:	b2db      	uxtb	r3, r3
 8011158:	4a17      	ldr	r2, [pc, #92]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 801115a:	009b      	lsls	r3, r3, #2
 801115c:	4413      	add	r3, r2
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011162:	4b15      	ldr	r3, [pc, #84]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 8011164:	7a5b      	ldrb	r3, [r3, #9]
 8011166:	b2db      	uxtb	r3, r3
 8011168:	461a      	mov	r2, r3
 801116a:	4b13      	ldr	r3, [pc, #76]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 801116c:	4413      	add	r3, r2
 801116e:	79fa      	ldrb	r2, [r7, #7]
 8011170:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011172:	4b11      	ldr	r3, [pc, #68]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 8011174:	7a5b      	ldrb	r3, [r3, #9]
 8011176:	b2db      	uxtb	r3, r3
 8011178:	1c5a      	adds	r2, r3, #1
 801117a:	b2d1      	uxtb	r1, r2
 801117c:	4a0e      	ldr	r2, [pc, #56]	@ (80111b8 <FATFS_LinkDriverEx+0x94>)
 801117e:	7251      	strb	r1, [r2, #9]
 8011180:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011182:	7dbb      	ldrb	r3, [r7, #22]
 8011184:	3330      	adds	r3, #48	@ 0x30
 8011186:	b2da      	uxtb	r2, r3
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	3301      	adds	r3, #1
 8011190:	223a      	movs	r2, #58	@ 0x3a
 8011192:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	3302      	adds	r3, #2
 8011198:	222f      	movs	r2, #47	@ 0x2f
 801119a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	3303      	adds	r3, #3
 80111a0:	2200      	movs	r2, #0
 80111a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80111a4:	2300      	movs	r3, #0
 80111a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80111a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	371c      	adds	r7, #28
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	240008b0 	.word	0x240008b0

080111bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80111c6:	2200      	movs	r2, #0
 80111c8:	6839      	ldr	r1, [r7, #0]
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7ff ffaa 	bl	8011124 <FATFS_LinkDriverEx>
 80111d0:	4603      	mov	r3, r0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
	...

080111dc <siprintf>:
 80111dc:	b40e      	push	{r1, r2, r3}
 80111de:	b510      	push	{r4, lr}
 80111e0:	b09d      	sub	sp, #116	@ 0x74
 80111e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80111e4:	9002      	str	r0, [sp, #8]
 80111e6:	9006      	str	r0, [sp, #24]
 80111e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80111ec:	480a      	ldr	r0, [pc, #40]	@ (8011218 <siprintf+0x3c>)
 80111ee:	9107      	str	r1, [sp, #28]
 80111f0:	9104      	str	r1, [sp, #16]
 80111f2:	490a      	ldr	r1, [pc, #40]	@ (801121c <siprintf+0x40>)
 80111f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80111f8:	9105      	str	r1, [sp, #20]
 80111fa:	2400      	movs	r4, #0
 80111fc:	a902      	add	r1, sp, #8
 80111fe:	6800      	ldr	r0, [r0, #0]
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011204:	f000 f9a2 	bl	801154c <_svfiprintf_r>
 8011208:	9b02      	ldr	r3, [sp, #8]
 801120a:	701c      	strb	r4, [r3, #0]
 801120c:	b01d      	add	sp, #116	@ 0x74
 801120e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011212:	b003      	add	sp, #12
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	2400001c 	.word	0x2400001c
 801121c:	ffff0208 	.word	0xffff0208

08011220 <memset>:
 8011220:	4402      	add	r2, r0
 8011222:	4603      	mov	r3, r0
 8011224:	4293      	cmp	r3, r2
 8011226:	d100      	bne.n	801122a <memset+0xa>
 8011228:	4770      	bx	lr
 801122a:	f803 1b01 	strb.w	r1, [r3], #1
 801122e:	e7f9      	b.n	8011224 <memset+0x4>

08011230 <__errno>:
 8011230:	4b01      	ldr	r3, [pc, #4]	@ (8011238 <__errno+0x8>)
 8011232:	6818      	ldr	r0, [r3, #0]
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop
 8011238:	2400001c 	.word	0x2400001c

0801123c <__libc_init_array>:
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	4d0d      	ldr	r5, [pc, #52]	@ (8011274 <__libc_init_array+0x38>)
 8011240:	4c0d      	ldr	r4, [pc, #52]	@ (8011278 <__libc_init_array+0x3c>)
 8011242:	1b64      	subs	r4, r4, r5
 8011244:	10a4      	asrs	r4, r4, #2
 8011246:	2600      	movs	r6, #0
 8011248:	42a6      	cmp	r6, r4
 801124a:	d109      	bne.n	8011260 <__libc_init_array+0x24>
 801124c:	4d0b      	ldr	r5, [pc, #44]	@ (801127c <__libc_init_array+0x40>)
 801124e:	4c0c      	ldr	r4, [pc, #48]	@ (8011280 <__libc_init_array+0x44>)
 8011250:	f000 fc64 	bl	8011b1c <_init>
 8011254:	1b64      	subs	r4, r4, r5
 8011256:	10a4      	asrs	r4, r4, #2
 8011258:	2600      	movs	r6, #0
 801125a:	42a6      	cmp	r6, r4
 801125c:	d105      	bne.n	801126a <__libc_init_array+0x2e>
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	f855 3b04 	ldr.w	r3, [r5], #4
 8011264:	4798      	blx	r3
 8011266:	3601      	adds	r6, #1
 8011268:	e7ee      	b.n	8011248 <__libc_init_array+0xc>
 801126a:	f855 3b04 	ldr.w	r3, [r5], #4
 801126e:	4798      	blx	r3
 8011270:	3601      	adds	r6, #1
 8011272:	e7f2      	b.n	801125a <__libc_init_array+0x1e>
 8011274:	08011ed8 	.word	0x08011ed8
 8011278:	08011ed8 	.word	0x08011ed8
 801127c:	08011ed8 	.word	0x08011ed8
 8011280:	08011edc 	.word	0x08011edc

08011284 <__retarget_lock_acquire_recursive>:
 8011284:	4770      	bx	lr

08011286 <__retarget_lock_release_recursive>:
 8011286:	4770      	bx	lr

08011288 <memcpy>:
 8011288:	440a      	add	r2, r1
 801128a:	4291      	cmp	r1, r2
 801128c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011290:	d100      	bne.n	8011294 <memcpy+0xc>
 8011292:	4770      	bx	lr
 8011294:	b510      	push	{r4, lr}
 8011296:	f811 4b01 	ldrb.w	r4, [r1], #1
 801129a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801129e:	4291      	cmp	r1, r2
 80112a0:	d1f9      	bne.n	8011296 <memcpy+0xe>
 80112a2:	bd10      	pop	{r4, pc}

080112a4 <_free_r>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	4605      	mov	r5, r0
 80112a8:	2900      	cmp	r1, #0
 80112aa:	d041      	beq.n	8011330 <_free_r+0x8c>
 80112ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112b0:	1f0c      	subs	r4, r1, #4
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	bfb8      	it	lt
 80112b6:	18e4      	addlt	r4, r4, r3
 80112b8:	f000 f8e0 	bl	801147c <__malloc_lock>
 80112bc:	4a1d      	ldr	r2, [pc, #116]	@ (8011334 <_free_r+0x90>)
 80112be:	6813      	ldr	r3, [r2, #0]
 80112c0:	b933      	cbnz	r3, 80112d0 <_free_r+0x2c>
 80112c2:	6063      	str	r3, [r4, #4]
 80112c4:	6014      	str	r4, [r2, #0]
 80112c6:	4628      	mov	r0, r5
 80112c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112cc:	f000 b8dc 	b.w	8011488 <__malloc_unlock>
 80112d0:	42a3      	cmp	r3, r4
 80112d2:	d908      	bls.n	80112e6 <_free_r+0x42>
 80112d4:	6820      	ldr	r0, [r4, #0]
 80112d6:	1821      	adds	r1, r4, r0
 80112d8:	428b      	cmp	r3, r1
 80112da:	bf01      	itttt	eq
 80112dc:	6819      	ldreq	r1, [r3, #0]
 80112de:	685b      	ldreq	r3, [r3, #4]
 80112e0:	1809      	addeq	r1, r1, r0
 80112e2:	6021      	streq	r1, [r4, #0]
 80112e4:	e7ed      	b.n	80112c2 <_free_r+0x1e>
 80112e6:	461a      	mov	r2, r3
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	b10b      	cbz	r3, 80112f0 <_free_r+0x4c>
 80112ec:	42a3      	cmp	r3, r4
 80112ee:	d9fa      	bls.n	80112e6 <_free_r+0x42>
 80112f0:	6811      	ldr	r1, [r2, #0]
 80112f2:	1850      	adds	r0, r2, r1
 80112f4:	42a0      	cmp	r0, r4
 80112f6:	d10b      	bne.n	8011310 <_free_r+0x6c>
 80112f8:	6820      	ldr	r0, [r4, #0]
 80112fa:	4401      	add	r1, r0
 80112fc:	1850      	adds	r0, r2, r1
 80112fe:	4283      	cmp	r3, r0
 8011300:	6011      	str	r1, [r2, #0]
 8011302:	d1e0      	bne.n	80112c6 <_free_r+0x22>
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	6053      	str	r3, [r2, #4]
 801130a:	4408      	add	r0, r1
 801130c:	6010      	str	r0, [r2, #0]
 801130e:	e7da      	b.n	80112c6 <_free_r+0x22>
 8011310:	d902      	bls.n	8011318 <_free_r+0x74>
 8011312:	230c      	movs	r3, #12
 8011314:	602b      	str	r3, [r5, #0]
 8011316:	e7d6      	b.n	80112c6 <_free_r+0x22>
 8011318:	6820      	ldr	r0, [r4, #0]
 801131a:	1821      	adds	r1, r4, r0
 801131c:	428b      	cmp	r3, r1
 801131e:	bf04      	itt	eq
 8011320:	6819      	ldreq	r1, [r3, #0]
 8011322:	685b      	ldreq	r3, [r3, #4]
 8011324:	6063      	str	r3, [r4, #4]
 8011326:	bf04      	itt	eq
 8011328:	1809      	addeq	r1, r1, r0
 801132a:	6021      	streq	r1, [r4, #0]
 801132c:	6054      	str	r4, [r2, #4]
 801132e:	e7ca      	b.n	80112c6 <_free_r+0x22>
 8011330:	bd38      	pop	{r3, r4, r5, pc}
 8011332:	bf00      	nop
 8011334:	24000a00 	.word	0x24000a00

08011338 <sbrk_aligned>:
 8011338:	b570      	push	{r4, r5, r6, lr}
 801133a:	4e0f      	ldr	r6, [pc, #60]	@ (8011378 <sbrk_aligned+0x40>)
 801133c:	460c      	mov	r4, r1
 801133e:	6831      	ldr	r1, [r6, #0]
 8011340:	4605      	mov	r5, r0
 8011342:	b911      	cbnz	r1, 801134a <sbrk_aligned+0x12>
 8011344:	f000 fba4 	bl	8011a90 <_sbrk_r>
 8011348:	6030      	str	r0, [r6, #0]
 801134a:	4621      	mov	r1, r4
 801134c:	4628      	mov	r0, r5
 801134e:	f000 fb9f 	bl	8011a90 <_sbrk_r>
 8011352:	1c43      	adds	r3, r0, #1
 8011354:	d103      	bne.n	801135e <sbrk_aligned+0x26>
 8011356:	f04f 34ff 	mov.w	r4, #4294967295
 801135a:	4620      	mov	r0, r4
 801135c:	bd70      	pop	{r4, r5, r6, pc}
 801135e:	1cc4      	adds	r4, r0, #3
 8011360:	f024 0403 	bic.w	r4, r4, #3
 8011364:	42a0      	cmp	r0, r4
 8011366:	d0f8      	beq.n	801135a <sbrk_aligned+0x22>
 8011368:	1a21      	subs	r1, r4, r0
 801136a:	4628      	mov	r0, r5
 801136c:	f000 fb90 	bl	8011a90 <_sbrk_r>
 8011370:	3001      	adds	r0, #1
 8011372:	d1f2      	bne.n	801135a <sbrk_aligned+0x22>
 8011374:	e7ef      	b.n	8011356 <sbrk_aligned+0x1e>
 8011376:	bf00      	nop
 8011378:	240009fc 	.word	0x240009fc

0801137c <_malloc_r>:
 801137c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011380:	1ccd      	adds	r5, r1, #3
 8011382:	f025 0503 	bic.w	r5, r5, #3
 8011386:	3508      	adds	r5, #8
 8011388:	2d0c      	cmp	r5, #12
 801138a:	bf38      	it	cc
 801138c:	250c      	movcc	r5, #12
 801138e:	2d00      	cmp	r5, #0
 8011390:	4606      	mov	r6, r0
 8011392:	db01      	blt.n	8011398 <_malloc_r+0x1c>
 8011394:	42a9      	cmp	r1, r5
 8011396:	d904      	bls.n	80113a2 <_malloc_r+0x26>
 8011398:	230c      	movs	r3, #12
 801139a:	6033      	str	r3, [r6, #0]
 801139c:	2000      	movs	r0, #0
 801139e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011478 <_malloc_r+0xfc>
 80113a6:	f000 f869 	bl	801147c <__malloc_lock>
 80113aa:	f8d8 3000 	ldr.w	r3, [r8]
 80113ae:	461c      	mov	r4, r3
 80113b0:	bb44      	cbnz	r4, 8011404 <_malloc_r+0x88>
 80113b2:	4629      	mov	r1, r5
 80113b4:	4630      	mov	r0, r6
 80113b6:	f7ff ffbf 	bl	8011338 <sbrk_aligned>
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	4604      	mov	r4, r0
 80113be:	d158      	bne.n	8011472 <_malloc_r+0xf6>
 80113c0:	f8d8 4000 	ldr.w	r4, [r8]
 80113c4:	4627      	mov	r7, r4
 80113c6:	2f00      	cmp	r7, #0
 80113c8:	d143      	bne.n	8011452 <_malloc_r+0xd6>
 80113ca:	2c00      	cmp	r4, #0
 80113cc:	d04b      	beq.n	8011466 <_malloc_r+0xea>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	4639      	mov	r1, r7
 80113d2:	4630      	mov	r0, r6
 80113d4:	eb04 0903 	add.w	r9, r4, r3
 80113d8:	f000 fb5a 	bl	8011a90 <_sbrk_r>
 80113dc:	4581      	cmp	r9, r0
 80113de:	d142      	bne.n	8011466 <_malloc_r+0xea>
 80113e0:	6821      	ldr	r1, [r4, #0]
 80113e2:	1a6d      	subs	r5, r5, r1
 80113e4:	4629      	mov	r1, r5
 80113e6:	4630      	mov	r0, r6
 80113e8:	f7ff ffa6 	bl	8011338 <sbrk_aligned>
 80113ec:	3001      	adds	r0, #1
 80113ee:	d03a      	beq.n	8011466 <_malloc_r+0xea>
 80113f0:	6823      	ldr	r3, [r4, #0]
 80113f2:	442b      	add	r3, r5
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	f8d8 3000 	ldr.w	r3, [r8]
 80113fa:	685a      	ldr	r2, [r3, #4]
 80113fc:	bb62      	cbnz	r2, 8011458 <_malloc_r+0xdc>
 80113fe:	f8c8 7000 	str.w	r7, [r8]
 8011402:	e00f      	b.n	8011424 <_malloc_r+0xa8>
 8011404:	6822      	ldr	r2, [r4, #0]
 8011406:	1b52      	subs	r2, r2, r5
 8011408:	d420      	bmi.n	801144c <_malloc_r+0xd0>
 801140a:	2a0b      	cmp	r2, #11
 801140c:	d917      	bls.n	801143e <_malloc_r+0xc2>
 801140e:	1961      	adds	r1, r4, r5
 8011410:	42a3      	cmp	r3, r4
 8011412:	6025      	str	r5, [r4, #0]
 8011414:	bf18      	it	ne
 8011416:	6059      	strne	r1, [r3, #4]
 8011418:	6863      	ldr	r3, [r4, #4]
 801141a:	bf08      	it	eq
 801141c:	f8c8 1000 	streq.w	r1, [r8]
 8011420:	5162      	str	r2, [r4, r5]
 8011422:	604b      	str	r3, [r1, #4]
 8011424:	4630      	mov	r0, r6
 8011426:	f000 f82f 	bl	8011488 <__malloc_unlock>
 801142a:	f104 000b 	add.w	r0, r4, #11
 801142e:	1d23      	adds	r3, r4, #4
 8011430:	f020 0007 	bic.w	r0, r0, #7
 8011434:	1ac2      	subs	r2, r0, r3
 8011436:	bf1c      	itt	ne
 8011438:	1a1b      	subne	r3, r3, r0
 801143a:	50a3      	strne	r3, [r4, r2]
 801143c:	e7af      	b.n	801139e <_malloc_r+0x22>
 801143e:	6862      	ldr	r2, [r4, #4]
 8011440:	42a3      	cmp	r3, r4
 8011442:	bf0c      	ite	eq
 8011444:	f8c8 2000 	streq.w	r2, [r8]
 8011448:	605a      	strne	r2, [r3, #4]
 801144a:	e7eb      	b.n	8011424 <_malloc_r+0xa8>
 801144c:	4623      	mov	r3, r4
 801144e:	6864      	ldr	r4, [r4, #4]
 8011450:	e7ae      	b.n	80113b0 <_malloc_r+0x34>
 8011452:	463c      	mov	r4, r7
 8011454:	687f      	ldr	r7, [r7, #4]
 8011456:	e7b6      	b.n	80113c6 <_malloc_r+0x4a>
 8011458:	461a      	mov	r2, r3
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	42a3      	cmp	r3, r4
 801145e:	d1fb      	bne.n	8011458 <_malloc_r+0xdc>
 8011460:	2300      	movs	r3, #0
 8011462:	6053      	str	r3, [r2, #4]
 8011464:	e7de      	b.n	8011424 <_malloc_r+0xa8>
 8011466:	230c      	movs	r3, #12
 8011468:	6033      	str	r3, [r6, #0]
 801146a:	4630      	mov	r0, r6
 801146c:	f000 f80c 	bl	8011488 <__malloc_unlock>
 8011470:	e794      	b.n	801139c <_malloc_r+0x20>
 8011472:	6005      	str	r5, [r0, #0]
 8011474:	e7d6      	b.n	8011424 <_malloc_r+0xa8>
 8011476:	bf00      	nop
 8011478:	24000a00 	.word	0x24000a00

0801147c <__malloc_lock>:
 801147c:	4801      	ldr	r0, [pc, #4]	@ (8011484 <__malloc_lock+0x8>)
 801147e:	f7ff bf01 	b.w	8011284 <__retarget_lock_acquire_recursive>
 8011482:	bf00      	nop
 8011484:	240009f8 	.word	0x240009f8

08011488 <__malloc_unlock>:
 8011488:	4801      	ldr	r0, [pc, #4]	@ (8011490 <__malloc_unlock+0x8>)
 801148a:	f7ff befc 	b.w	8011286 <__retarget_lock_release_recursive>
 801148e:	bf00      	nop
 8011490:	240009f8 	.word	0x240009f8

08011494 <__ssputs_r>:
 8011494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011498:	688e      	ldr	r6, [r1, #8]
 801149a:	461f      	mov	r7, r3
 801149c:	42be      	cmp	r6, r7
 801149e:	680b      	ldr	r3, [r1, #0]
 80114a0:	4682      	mov	sl, r0
 80114a2:	460c      	mov	r4, r1
 80114a4:	4690      	mov	r8, r2
 80114a6:	d82d      	bhi.n	8011504 <__ssputs_r+0x70>
 80114a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80114b0:	d026      	beq.n	8011500 <__ssputs_r+0x6c>
 80114b2:	6965      	ldr	r5, [r4, #20]
 80114b4:	6909      	ldr	r1, [r1, #16]
 80114b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114ba:	eba3 0901 	sub.w	r9, r3, r1
 80114be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114c2:	1c7b      	adds	r3, r7, #1
 80114c4:	444b      	add	r3, r9
 80114c6:	106d      	asrs	r5, r5, #1
 80114c8:	429d      	cmp	r5, r3
 80114ca:	bf38      	it	cc
 80114cc:	461d      	movcc	r5, r3
 80114ce:	0553      	lsls	r3, r2, #21
 80114d0:	d527      	bpl.n	8011522 <__ssputs_r+0x8e>
 80114d2:	4629      	mov	r1, r5
 80114d4:	f7ff ff52 	bl	801137c <_malloc_r>
 80114d8:	4606      	mov	r6, r0
 80114da:	b360      	cbz	r0, 8011536 <__ssputs_r+0xa2>
 80114dc:	6921      	ldr	r1, [r4, #16]
 80114de:	464a      	mov	r2, r9
 80114e0:	f7ff fed2 	bl	8011288 <memcpy>
 80114e4:	89a3      	ldrh	r3, [r4, #12]
 80114e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80114ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ee:	81a3      	strh	r3, [r4, #12]
 80114f0:	6126      	str	r6, [r4, #16]
 80114f2:	6165      	str	r5, [r4, #20]
 80114f4:	444e      	add	r6, r9
 80114f6:	eba5 0509 	sub.w	r5, r5, r9
 80114fa:	6026      	str	r6, [r4, #0]
 80114fc:	60a5      	str	r5, [r4, #8]
 80114fe:	463e      	mov	r6, r7
 8011500:	42be      	cmp	r6, r7
 8011502:	d900      	bls.n	8011506 <__ssputs_r+0x72>
 8011504:	463e      	mov	r6, r7
 8011506:	6820      	ldr	r0, [r4, #0]
 8011508:	4632      	mov	r2, r6
 801150a:	4641      	mov	r1, r8
 801150c:	f000 faa6 	bl	8011a5c <memmove>
 8011510:	68a3      	ldr	r3, [r4, #8]
 8011512:	1b9b      	subs	r3, r3, r6
 8011514:	60a3      	str	r3, [r4, #8]
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	4433      	add	r3, r6
 801151a:	6023      	str	r3, [r4, #0]
 801151c:	2000      	movs	r0, #0
 801151e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011522:	462a      	mov	r2, r5
 8011524:	f000 fac4 	bl	8011ab0 <_realloc_r>
 8011528:	4606      	mov	r6, r0
 801152a:	2800      	cmp	r0, #0
 801152c:	d1e0      	bne.n	80114f0 <__ssputs_r+0x5c>
 801152e:	6921      	ldr	r1, [r4, #16]
 8011530:	4650      	mov	r0, sl
 8011532:	f7ff feb7 	bl	80112a4 <_free_r>
 8011536:	230c      	movs	r3, #12
 8011538:	f8ca 3000 	str.w	r3, [sl]
 801153c:	89a3      	ldrh	r3, [r4, #12]
 801153e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011542:	81a3      	strh	r3, [r4, #12]
 8011544:	f04f 30ff 	mov.w	r0, #4294967295
 8011548:	e7e9      	b.n	801151e <__ssputs_r+0x8a>
	...

0801154c <_svfiprintf_r>:
 801154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011550:	4698      	mov	r8, r3
 8011552:	898b      	ldrh	r3, [r1, #12]
 8011554:	061b      	lsls	r3, r3, #24
 8011556:	b09d      	sub	sp, #116	@ 0x74
 8011558:	4607      	mov	r7, r0
 801155a:	460d      	mov	r5, r1
 801155c:	4614      	mov	r4, r2
 801155e:	d510      	bpl.n	8011582 <_svfiprintf_r+0x36>
 8011560:	690b      	ldr	r3, [r1, #16]
 8011562:	b973      	cbnz	r3, 8011582 <_svfiprintf_r+0x36>
 8011564:	2140      	movs	r1, #64	@ 0x40
 8011566:	f7ff ff09 	bl	801137c <_malloc_r>
 801156a:	6028      	str	r0, [r5, #0]
 801156c:	6128      	str	r0, [r5, #16]
 801156e:	b930      	cbnz	r0, 801157e <_svfiprintf_r+0x32>
 8011570:	230c      	movs	r3, #12
 8011572:	603b      	str	r3, [r7, #0]
 8011574:	f04f 30ff 	mov.w	r0, #4294967295
 8011578:	b01d      	add	sp, #116	@ 0x74
 801157a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157e:	2340      	movs	r3, #64	@ 0x40
 8011580:	616b      	str	r3, [r5, #20]
 8011582:	2300      	movs	r3, #0
 8011584:	9309      	str	r3, [sp, #36]	@ 0x24
 8011586:	2320      	movs	r3, #32
 8011588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801158c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011590:	2330      	movs	r3, #48	@ 0x30
 8011592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011730 <_svfiprintf_r+0x1e4>
 8011596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801159a:	f04f 0901 	mov.w	r9, #1
 801159e:	4623      	mov	r3, r4
 80115a0:	469a      	mov	sl, r3
 80115a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115a6:	b10a      	cbz	r2, 80115ac <_svfiprintf_r+0x60>
 80115a8:	2a25      	cmp	r2, #37	@ 0x25
 80115aa:	d1f9      	bne.n	80115a0 <_svfiprintf_r+0x54>
 80115ac:	ebba 0b04 	subs.w	fp, sl, r4
 80115b0:	d00b      	beq.n	80115ca <_svfiprintf_r+0x7e>
 80115b2:	465b      	mov	r3, fp
 80115b4:	4622      	mov	r2, r4
 80115b6:	4629      	mov	r1, r5
 80115b8:	4638      	mov	r0, r7
 80115ba:	f7ff ff6b 	bl	8011494 <__ssputs_r>
 80115be:	3001      	adds	r0, #1
 80115c0:	f000 80a7 	beq.w	8011712 <_svfiprintf_r+0x1c6>
 80115c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115c6:	445a      	add	r2, fp
 80115c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80115ca:	f89a 3000 	ldrb.w	r3, [sl]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f000 809f 	beq.w	8011712 <_svfiprintf_r+0x1c6>
 80115d4:	2300      	movs	r3, #0
 80115d6:	f04f 32ff 	mov.w	r2, #4294967295
 80115da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115de:	f10a 0a01 	add.w	sl, sl, #1
 80115e2:	9304      	str	r3, [sp, #16]
 80115e4:	9307      	str	r3, [sp, #28]
 80115e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80115ec:	4654      	mov	r4, sl
 80115ee:	2205      	movs	r2, #5
 80115f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f4:	484e      	ldr	r0, [pc, #312]	@ (8011730 <_svfiprintf_r+0x1e4>)
 80115f6:	f7ee fe93 	bl	8000320 <memchr>
 80115fa:	9a04      	ldr	r2, [sp, #16]
 80115fc:	b9d8      	cbnz	r0, 8011636 <_svfiprintf_r+0xea>
 80115fe:	06d0      	lsls	r0, r2, #27
 8011600:	bf44      	itt	mi
 8011602:	2320      	movmi	r3, #32
 8011604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011608:	0711      	lsls	r1, r2, #28
 801160a:	bf44      	itt	mi
 801160c:	232b      	movmi	r3, #43	@ 0x2b
 801160e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011612:	f89a 3000 	ldrb.w	r3, [sl]
 8011616:	2b2a      	cmp	r3, #42	@ 0x2a
 8011618:	d015      	beq.n	8011646 <_svfiprintf_r+0xfa>
 801161a:	9a07      	ldr	r2, [sp, #28]
 801161c:	4654      	mov	r4, sl
 801161e:	2000      	movs	r0, #0
 8011620:	f04f 0c0a 	mov.w	ip, #10
 8011624:	4621      	mov	r1, r4
 8011626:	f811 3b01 	ldrb.w	r3, [r1], #1
 801162a:	3b30      	subs	r3, #48	@ 0x30
 801162c:	2b09      	cmp	r3, #9
 801162e:	d94b      	bls.n	80116c8 <_svfiprintf_r+0x17c>
 8011630:	b1b0      	cbz	r0, 8011660 <_svfiprintf_r+0x114>
 8011632:	9207      	str	r2, [sp, #28]
 8011634:	e014      	b.n	8011660 <_svfiprintf_r+0x114>
 8011636:	eba0 0308 	sub.w	r3, r0, r8
 801163a:	fa09 f303 	lsl.w	r3, r9, r3
 801163e:	4313      	orrs	r3, r2
 8011640:	9304      	str	r3, [sp, #16]
 8011642:	46a2      	mov	sl, r4
 8011644:	e7d2      	b.n	80115ec <_svfiprintf_r+0xa0>
 8011646:	9b03      	ldr	r3, [sp, #12]
 8011648:	1d19      	adds	r1, r3, #4
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	9103      	str	r1, [sp, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	bfbb      	ittet	lt
 8011652:	425b      	neglt	r3, r3
 8011654:	f042 0202 	orrlt.w	r2, r2, #2
 8011658:	9307      	strge	r3, [sp, #28]
 801165a:	9307      	strlt	r3, [sp, #28]
 801165c:	bfb8      	it	lt
 801165e:	9204      	strlt	r2, [sp, #16]
 8011660:	7823      	ldrb	r3, [r4, #0]
 8011662:	2b2e      	cmp	r3, #46	@ 0x2e
 8011664:	d10a      	bne.n	801167c <_svfiprintf_r+0x130>
 8011666:	7863      	ldrb	r3, [r4, #1]
 8011668:	2b2a      	cmp	r3, #42	@ 0x2a
 801166a:	d132      	bne.n	80116d2 <_svfiprintf_r+0x186>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	1d1a      	adds	r2, r3, #4
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	9203      	str	r2, [sp, #12]
 8011674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011678:	3402      	adds	r4, #2
 801167a:	9305      	str	r3, [sp, #20]
 801167c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011740 <_svfiprintf_r+0x1f4>
 8011680:	7821      	ldrb	r1, [r4, #0]
 8011682:	2203      	movs	r2, #3
 8011684:	4650      	mov	r0, sl
 8011686:	f7ee fe4b 	bl	8000320 <memchr>
 801168a:	b138      	cbz	r0, 801169c <_svfiprintf_r+0x150>
 801168c:	9b04      	ldr	r3, [sp, #16]
 801168e:	eba0 000a 	sub.w	r0, r0, sl
 8011692:	2240      	movs	r2, #64	@ 0x40
 8011694:	4082      	lsls	r2, r0
 8011696:	4313      	orrs	r3, r2
 8011698:	3401      	adds	r4, #1
 801169a:	9304      	str	r3, [sp, #16]
 801169c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116a0:	4824      	ldr	r0, [pc, #144]	@ (8011734 <_svfiprintf_r+0x1e8>)
 80116a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116a6:	2206      	movs	r2, #6
 80116a8:	f7ee fe3a 	bl	8000320 <memchr>
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d036      	beq.n	801171e <_svfiprintf_r+0x1d2>
 80116b0:	4b21      	ldr	r3, [pc, #132]	@ (8011738 <_svfiprintf_r+0x1ec>)
 80116b2:	bb1b      	cbnz	r3, 80116fc <_svfiprintf_r+0x1b0>
 80116b4:	9b03      	ldr	r3, [sp, #12]
 80116b6:	3307      	adds	r3, #7
 80116b8:	f023 0307 	bic.w	r3, r3, #7
 80116bc:	3308      	adds	r3, #8
 80116be:	9303      	str	r3, [sp, #12]
 80116c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116c2:	4433      	add	r3, r6
 80116c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80116c6:	e76a      	b.n	801159e <_svfiprintf_r+0x52>
 80116c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80116cc:	460c      	mov	r4, r1
 80116ce:	2001      	movs	r0, #1
 80116d0:	e7a8      	b.n	8011624 <_svfiprintf_r+0xd8>
 80116d2:	2300      	movs	r3, #0
 80116d4:	3401      	adds	r4, #1
 80116d6:	9305      	str	r3, [sp, #20]
 80116d8:	4619      	mov	r1, r3
 80116da:	f04f 0c0a 	mov.w	ip, #10
 80116de:	4620      	mov	r0, r4
 80116e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116e4:	3a30      	subs	r2, #48	@ 0x30
 80116e6:	2a09      	cmp	r2, #9
 80116e8:	d903      	bls.n	80116f2 <_svfiprintf_r+0x1a6>
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d0c6      	beq.n	801167c <_svfiprintf_r+0x130>
 80116ee:	9105      	str	r1, [sp, #20]
 80116f0:	e7c4      	b.n	801167c <_svfiprintf_r+0x130>
 80116f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80116f6:	4604      	mov	r4, r0
 80116f8:	2301      	movs	r3, #1
 80116fa:	e7f0      	b.n	80116de <_svfiprintf_r+0x192>
 80116fc:	ab03      	add	r3, sp, #12
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	462a      	mov	r2, r5
 8011702:	4b0e      	ldr	r3, [pc, #56]	@ (801173c <_svfiprintf_r+0x1f0>)
 8011704:	a904      	add	r1, sp, #16
 8011706:	4638      	mov	r0, r7
 8011708:	f3af 8000 	nop.w
 801170c:	1c42      	adds	r2, r0, #1
 801170e:	4606      	mov	r6, r0
 8011710:	d1d6      	bne.n	80116c0 <_svfiprintf_r+0x174>
 8011712:	89ab      	ldrh	r3, [r5, #12]
 8011714:	065b      	lsls	r3, r3, #25
 8011716:	f53f af2d 	bmi.w	8011574 <_svfiprintf_r+0x28>
 801171a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801171c:	e72c      	b.n	8011578 <_svfiprintf_r+0x2c>
 801171e:	ab03      	add	r3, sp, #12
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	462a      	mov	r2, r5
 8011724:	4b05      	ldr	r3, [pc, #20]	@ (801173c <_svfiprintf_r+0x1f0>)
 8011726:	a904      	add	r1, sp, #16
 8011728:	4638      	mov	r0, r7
 801172a:	f000 f879 	bl	8011820 <_printf_i>
 801172e:	e7ed      	b.n	801170c <_svfiprintf_r+0x1c0>
 8011730:	08011e9c 	.word	0x08011e9c
 8011734:	08011ea6 	.word	0x08011ea6
 8011738:	00000000 	.word	0x00000000
 801173c:	08011495 	.word	0x08011495
 8011740:	08011ea2 	.word	0x08011ea2

08011744 <_printf_common>:
 8011744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011748:	4616      	mov	r6, r2
 801174a:	4698      	mov	r8, r3
 801174c:	688a      	ldr	r2, [r1, #8]
 801174e:	690b      	ldr	r3, [r1, #16]
 8011750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011754:	4293      	cmp	r3, r2
 8011756:	bfb8      	it	lt
 8011758:	4613      	movlt	r3, r2
 801175a:	6033      	str	r3, [r6, #0]
 801175c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011760:	4607      	mov	r7, r0
 8011762:	460c      	mov	r4, r1
 8011764:	b10a      	cbz	r2, 801176a <_printf_common+0x26>
 8011766:	3301      	adds	r3, #1
 8011768:	6033      	str	r3, [r6, #0]
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	0699      	lsls	r1, r3, #26
 801176e:	bf42      	ittt	mi
 8011770:	6833      	ldrmi	r3, [r6, #0]
 8011772:	3302      	addmi	r3, #2
 8011774:	6033      	strmi	r3, [r6, #0]
 8011776:	6825      	ldr	r5, [r4, #0]
 8011778:	f015 0506 	ands.w	r5, r5, #6
 801177c:	d106      	bne.n	801178c <_printf_common+0x48>
 801177e:	f104 0a19 	add.w	sl, r4, #25
 8011782:	68e3      	ldr	r3, [r4, #12]
 8011784:	6832      	ldr	r2, [r6, #0]
 8011786:	1a9b      	subs	r3, r3, r2
 8011788:	42ab      	cmp	r3, r5
 801178a:	dc26      	bgt.n	80117da <_printf_common+0x96>
 801178c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011790:	6822      	ldr	r2, [r4, #0]
 8011792:	3b00      	subs	r3, #0
 8011794:	bf18      	it	ne
 8011796:	2301      	movne	r3, #1
 8011798:	0692      	lsls	r2, r2, #26
 801179a:	d42b      	bmi.n	80117f4 <_printf_common+0xb0>
 801179c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80117a0:	4641      	mov	r1, r8
 80117a2:	4638      	mov	r0, r7
 80117a4:	47c8      	blx	r9
 80117a6:	3001      	adds	r0, #1
 80117a8:	d01e      	beq.n	80117e8 <_printf_common+0xa4>
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	6922      	ldr	r2, [r4, #16]
 80117ae:	f003 0306 	and.w	r3, r3, #6
 80117b2:	2b04      	cmp	r3, #4
 80117b4:	bf02      	ittt	eq
 80117b6:	68e5      	ldreq	r5, [r4, #12]
 80117b8:	6833      	ldreq	r3, [r6, #0]
 80117ba:	1aed      	subeq	r5, r5, r3
 80117bc:	68a3      	ldr	r3, [r4, #8]
 80117be:	bf0c      	ite	eq
 80117c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117c4:	2500      	movne	r5, #0
 80117c6:	4293      	cmp	r3, r2
 80117c8:	bfc4      	itt	gt
 80117ca:	1a9b      	subgt	r3, r3, r2
 80117cc:	18ed      	addgt	r5, r5, r3
 80117ce:	2600      	movs	r6, #0
 80117d0:	341a      	adds	r4, #26
 80117d2:	42b5      	cmp	r5, r6
 80117d4:	d11a      	bne.n	801180c <_printf_common+0xc8>
 80117d6:	2000      	movs	r0, #0
 80117d8:	e008      	b.n	80117ec <_printf_common+0xa8>
 80117da:	2301      	movs	r3, #1
 80117dc:	4652      	mov	r2, sl
 80117de:	4641      	mov	r1, r8
 80117e0:	4638      	mov	r0, r7
 80117e2:	47c8      	blx	r9
 80117e4:	3001      	adds	r0, #1
 80117e6:	d103      	bne.n	80117f0 <_printf_common+0xac>
 80117e8:	f04f 30ff 	mov.w	r0, #4294967295
 80117ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117f0:	3501      	adds	r5, #1
 80117f2:	e7c6      	b.n	8011782 <_printf_common+0x3e>
 80117f4:	18e1      	adds	r1, r4, r3
 80117f6:	1c5a      	adds	r2, r3, #1
 80117f8:	2030      	movs	r0, #48	@ 0x30
 80117fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80117fe:	4422      	add	r2, r4
 8011800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011808:	3302      	adds	r3, #2
 801180a:	e7c7      	b.n	801179c <_printf_common+0x58>
 801180c:	2301      	movs	r3, #1
 801180e:	4622      	mov	r2, r4
 8011810:	4641      	mov	r1, r8
 8011812:	4638      	mov	r0, r7
 8011814:	47c8      	blx	r9
 8011816:	3001      	adds	r0, #1
 8011818:	d0e6      	beq.n	80117e8 <_printf_common+0xa4>
 801181a:	3601      	adds	r6, #1
 801181c:	e7d9      	b.n	80117d2 <_printf_common+0x8e>
	...

08011820 <_printf_i>:
 8011820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011824:	7e0f      	ldrb	r7, [r1, #24]
 8011826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011828:	2f78      	cmp	r7, #120	@ 0x78
 801182a:	4691      	mov	r9, r2
 801182c:	4680      	mov	r8, r0
 801182e:	460c      	mov	r4, r1
 8011830:	469a      	mov	sl, r3
 8011832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011836:	d807      	bhi.n	8011848 <_printf_i+0x28>
 8011838:	2f62      	cmp	r7, #98	@ 0x62
 801183a:	d80a      	bhi.n	8011852 <_printf_i+0x32>
 801183c:	2f00      	cmp	r7, #0
 801183e:	f000 80d1 	beq.w	80119e4 <_printf_i+0x1c4>
 8011842:	2f58      	cmp	r7, #88	@ 0x58
 8011844:	f000 80b8 	beq.w	80119b8 <_printf_i+0x198>
 8011848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801184c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011850:	e03a      	b.n	80118c8 <_printf_i+0xa8>
 8011852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011856:	2b15      	cmp	r3, #21
 8011858:	d8f6      	bhi.n	8011848 <_printf_i+0x28>
 801185a:	a101      	add	r1, pc, #4	@ (adr r1, 8011860 <_printf_i+0x40>)
 801185c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011860:	080118b9 	.word	0x080118b9
 8011864:	080118cd 	.word	0x080118cd
 8011868:	08011849 	.word	0x08011849
 801186c:	08011849 	.word	0x08011849
 8011870:	08011849 	.word	0x08011849
 8011874:	08011849 	.word	0x08011849
 8011878:	080118cd 	.word	0x080118cd
 801187c:	08011849 	.word	0x08011849
 8011880:	08011849 	.word	0x08011849
 8011884:	08011849 	.word	0x08011849
 8011888:	08011849 	.word	0x08011849
 801188c:	080119cb 	.word	0x080119cb
 8011890:	080118f7 	.word	0x080118f7
 8011894:	08011985 	.word	0x08011985
 8011898:	08011849 	.word	0x08011849
 801189c:	08011849 	.word	0x08011849
 80118a0:	080119ed 	.word	0x080119ed
 80118a4:	08011849 	.word	0x08011849
 80118a8:	080118f7 	.word	0x080118f7
 80118ac:	08011849 	.word	0x08011849
 80118b0:	08011849 	.word	0x08011849
 80118b4:	0801198d 	.word	0x0801198d
 80118b8:	6833      	ldr	r3, [r6, #0]
 80118ba:	1d1a      	adds	r2, r3, #4
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	6032      	str	r2, [r6, #0]
 80118c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80118c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80118c8:	2301      	movs	r3, #1
 80118ca:	e09c      	b.n	8011a06 <_printf_i+0x1e6>
 80118cc:	6833      	ldr	r3, [r6, #0]
 80118ce:	6820      	ldr	r0, [r4, #0]
 80118d0:	1d19      	adds	r1, r3, #4
 80118d2:	6031      	str	r1, [r6, #0]
 80118d4:	0606      	lsls	r6, r0, #24
 80118d6:	d501      	bpl.n	80118dc <_printf_i+0xbc>
 80118d8:	681d      	ldr	r5, [r3, #0]
 80118da:	e003      	b.n	80118e4 <_printf_i+0xc4>
 80118dc:	0645      	lsls	r5, r0, #25
 80118de:	d5fb      	bpl.n	80118d8 <_printf_i+0xb8>
 80118e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80118e4:	2d00      	cmp	r5, #0
 80118e6:	da03      	bge.n	80118f0 <_printf_i+0xd0>
 80118e8:	232d      	movs	r3, #45	@ 0x2d
 80118ea:	426d      	negs	r5, r5
 80118ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118f0:	4858      	ldr	r0, [pc, #352]	@ (8011a54 <_printf_i+0x234>)
 80118f2:	230a      	movs	r3, #10
 80118f4:	e011      	b.n	801191a <_printf_i+0xfa>
 80118f6:	6821      	ldr	r1, [r4, #0]
 80118f8:	6833      	ldr	r3, [r6, #0]
 80118fa:	0608      	lsls	r0, r1, #24
 80118fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8011900:	d402      	bmi.n	8011908 <_printf_i+0xe8>
 8011902:	0649      	lsls	r1, r1, #25
 8011904:	bf48      	it	mi
 8011906:	b2ad      	uxthmi	r5, r5
 8011908:	2f6f      	cmp	r7, #111	@ 0x6f
 801190a:	4852      	ldr	r0, [pc, #328]	@ (8011a54 <_printf_i+0x234>)
 801190c:	6033      	str	r3, [r6, #0]
 801190e:	bf14      	ite	ne
 8011910:	230a      	movne	r3, #10
 8011912:	2308      	moveq	r3, #8
 8011914:	2100      	movs	r1, #0
 8011916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801191a:	6866      	ldr	r6, [r4, #4]
 801191c:	60a6      	str	r6, [r4, #8]
 801191e:	2e00      	cmp	r6, #0
 8011920:	db05      	blt.n	801192e <_printf_i+0x10e>
 8011922:	6821      	ldr	r1, [r4, #0]
 8011924:	432e      	orrs	r6, r5
 8011926:	f021 0104 	bic.w	r1, r1, #4
 801192a:	6021      	str	r1, [r4, #0]
 801192c:	d04b      	beq.n	80119c6 <_printf_i+0x1a6>
 801192e:	4616      	mov	r6, r2
 8011930:	fbb5 f1f3 	udiv	r1, r5, r3
 8011934:	fb03 5711 	mls	r7, r3, r1, r5
 8011938:	5dc7      	ldrb	r7, [r0, r7]
 801193a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801193e:	462f      	mov	r7, r5
 8011940:	42bb      	cmp	r3, r7
 8011942:	460d      	mov	r5, r1
 8011944:	d9f4      	bls.n	8011930 <_printf_i+0x110>
 8011946:	2b08      	cmp	r3, #8
 8011948:	d10b      	bne.n	8011962 <_printf_i+0x142>
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	07df      	lsls	r7, r3, #31
 801194e:	d508      	bpl.n	8011962 <_printf_i+0x142>
 8011950:	6923      	ldr	r3, [r4, #16]
 8011952:	6861      	ldr	r1, [r4, #4]
 8011954:	4299      	cmp	r1, r3
 8011956:	bfde      	ittt	le
 8011958:	2330      	movle	r3, #48	@ 0x30
 801195a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801195e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011962:	1b92      	subs	r2, r2, r6
 8011964:	6122      	str	r2, [r4, #16]
 8011966:	f8cd a000 	str.w	sl, [sp]
 801196a:	464b      	mov	r3, r9
 801196c:	aa03      	add	r2, sp, #12
 801196e:	4621      	mov	r1, r4
 8011970:	4640      	mov	r0, r8
 8011972:	f7ff fee7 	bl	8011744 <_printf_common>
 8011976:	3001      	adds	r0, #1
 8011978:	d14a      	bne.n	8011a10 <_printf_i+0x1f0>
 801197a:	f04f 30ff 	mov.w	r0, #4294967295
 801197e:	b004      	add	sp, #16
 8011980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	f043 0320 	orr.w	r3, r3, #32
 801198a:	6023      	str	r3, [r4, #0]
 801198c:	4832      	ldr	r0, [pc, #200]	@ (8011a58 <_printf_i+0x238>)
 801198e:	2778      	movs	r7, #120	@ 0x78
 8011990:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011994:	6823      	ldr	r3, [r4, #0]
 8011996:	6831      	ldr	r1, [r6, #0]
 8011998:	061f      	lsls	r7, r3, #24
 801199a:	f851 5b04 	ldr.w	r5, [r1], #4
 801199e:	d402      	bmi.n	80119a6 <_printf_i+0x186>
 80119a0:	065f      	lsls	r7, r3, #25
 80119a2:	bf48      	it	mi
 80119a4:	b2ad      	uxthmi	r5, r5
 80119a6:	6031      	str	r1, [r6, #0]
 80119a8:	07d9      	lsls	r1, r3, #31
 80119aa:	bf44      	itt	mi
 80119ac:	f043 0320 	orrmi.w	r3, r3, #32
 80119b0:	6023      	strmi	r3, [r4, #0]
 80119b2:	b11d      	cbz	r5, 80119bc <_printf_i+0x19c>
 80119b4:	2310      	movs	r3, #16
 80119b6:	e7ad      	b.n	8011914 <_printf_i+0xf4>
 80119b8:	4826      	ldr	r0, [pc, #152]	@ (8011a54 <_printf_i+0x234>)
 80119ba:	e7e9      	b.n	8011990 <_printf_i+0x170>
 80119bc:	6823      	ldr	r3, [r4, #0]
 80119be:	f023 0320 	bic.w	r3, r3, #32
 80119c2:	6023      	str	r3, [r4, #0]
 80119c4:	e7f6      	b.n	80119b4 <_printf_i+0x194>
 80119c6:	4616      	mov	r6, r2
 80119c8:	e7bd      	b.n	8011946 <_printf_i+0x126>
 80119ca:	6833      	ldr	r3, [r6, #0]
 80119cc:	6825      	ldr	r5, [r4, #0]
 80119ce:	6961      	ldr	r1, [r4, #20]
 80119d0:	1d18      	adds	r0, r3, #4
 80119d2:	6030      	str	r0, [r6, #0]
 80119d4:	062e      	lsls	r6, r5, #24
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	d501      	bpl.n	80119de <_printf_i+0x1be>
 80119da:	6019      	str	r1, [r3, #0]
 80119dc:	e002      	b.n	80119e4 <_printf_i+0x1c4>
 80119de:	0668      	lsls	r0, r5, #25
 80119e0:	d5fb      	bpl.n	80119da <_printf_i+0x1ba>
 80119e2:	8019      	strh	r1, [r3, #0]
 80119e4:	2300      	movs	r3, #0
 80119e6:	6123      	str	r3, [r4, #16]
 80119e8:	4616      	mov	r6, r2
 80119ea:	e7bc      	b.n	8011966 <_printf_i+0x146>
 80119ec:	6833      	ldr	r3, [r6, #0]
 80119ee:	1d1a      	adds	r2, r3, #4
 80119f0:	6032      	str	r2, [r6, #0]
 80119f2:	681e      	ldr	r6, [r3, #0]
 80119f4:	6862      	ldr	r2, [r4, #4]
 80119f6:	2100      	movs	r1, #0
 80119f8:	4630      	mov	r0, r6
 80119fa:	f7ee fc91 	bl	8000320 <memchr>
 80119fe:	b108      	cbz	r0, 8011a04 <_printf_i+0x1e4>
 8011a00:	1b80      	subs	r0, r0, r6
 8011a02:	6060      	str	r0, [r4, #4]
 8011a04:	6863      	ldr	r3, [r4, #4]
 8011a06:	6123      	str	r3, [r4, #16]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a0e:	e7aa      	b.n	8011966 <_printf_i+0x146>
 8011a10:	6923      	ldr	r3, [r4, #16]
 8011a12:	4632      	mov	r2, r6
 8011a14:	4649      	mov	r1, r9
 8011a16:	4640      	mov	r0, r8
 8011a18:	47d0      	blx	sl
 8011a1a:	3001      	adds	r0, #1
 8011a1c:	d0ad      	beq.n	801197a <_printf_i+0x15a>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	079b      	lsls	r3, r3, #30
 8011a22:	d413      	bmi.n	8011a4c <_printf_i+0x22c>
 8011a24:	68e0      	ldr	r0, [r4, #12]
 8011a26:	9b03      	ldr	r3, [sp, #12]
 8011a28:	4298      	cmp	r0, r3
 8011a2a:	bfb8      	it	lt
 8011a2c:	4618      	movlt	r0, r3
 8011a2e:	e7a6      	b.n	801197e <_printf_i+0x15e>
 8011a30:	2301      	movs	r3, #1
 8011a32:	4632      	mov	r2, r6
 8011a34:	4649      	mov	r1, r9
 8011a36:	4640      	mov	r0, r8
 8011a38:	47d0      	blx	sl
 8011a3a:	3001      	adds	r0, #1
 8011a3c:	d09d      	beq.n	801197a <_printf_i+0x15a>
 8011a3e:	3501      	adds	r5, #1
 8011a40:	68e3      	ldr	r3, [r4, #12]
 8011a42:	9903      	ldr	r1, [sp, #12]
 8011a44:	1a5b      	subs	r3, r3, r1
 8011a46:	42ab      	cmp	r3, r5
 8011a48:	dcf2      	bgt.n	8011a30 <_printf_i+0x210>
 8011a4a:	e7eb      	b.n	8011a24 <_printf_i+0x204>
 8011a4c:	2500      	movs	r5, #0
 8011a4e:	f104 0619 	add.w	r6, r4, #25
 8011a52:	e7f5      	b.n	8011a40 <_printf_i+0x220>
 8011a54:	08011ead 	.word	0x08011ead
 8011a58:	08011ebe 	.word	0x08011ebe

08011a5c <memmove>:
 8011a5c:	4288      	cmp	r0, r1
 8011a5e:	b510      	push	{r4, lr}
 8011a60:	eb01 0402 	add.w	r4, r1, r2
 8011a64:	d902      	bls.n	8011a6c <memmove+0x10>
 8011a66:	4284      	cmp	r4, r0
 8011a68:	4623      	mov	r3, r4
 8011a6a:	d807      	bhi.n	8011a7c <memmove+0x20>
 8011a6c:	1e43      	subs	r3, r0, #1
 8011a6e:	42a1      	cmp	r1, r4
 8011a70:	d008      	beq.n	8011a84 <memmove+0x28>
 8011a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a7a:	e7f8      	b.n	8011a6e <memmove+0x12>
 8011a7c:	4402      	add	r2, r0
 8011a7e:	4601      	mov	r1, r0
 8011a80:	428a      	cmp	r2, r1
 8011a82:	d100      	bne.n	8011a86 <memmove+0x2a>
 8011a84:	bd10      	pop	{r4, pc}
 8011a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a8e:	e7f7      	b.n	8011a80 <memmove+0x24>

08011a90 <_sbrk_r>:
 8011a90:	b538      	push	{r3, r4, r5, lr}
 8011a92:	4d06      	ldr	r5, [pc, #24]	@ (8011aac <_sbrk_r+0x1c>)
 8011a94:	2300      	movs	r3, #0
 8011a96:	4604      	mov	r4, r0
 8011a98:	4608      	mov	r0, r1
 8011a9a:	602b      	str	r3, [r5, #0]
 8011a9c:	f7f0 ff46 	bl	800292c <_sbrk>
 8011aa0:	1c43      	adds	r3, r0, #1
 8011aa2:	d102      	bne.n	8011aaa <_sbrk_r+0x1a>
 8011aa4:	682b      	ldr	r3, [r5, #0]
 8011aa6:	b103      	cbz	r3, 8011aaa <_sbrk_r+0x1a>
 8011aa8:	6023      	str	r3, [r4, #0]
 8011aaa:	bd38      	pop	{r3, r4, r5, pc}
 8011aac:	240009f4 	.word	0x240009f4

08011ab0 <_realloc_r>:
 8011ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ab4:	4607      	mov	r7, r0
 8011ab6:	4614      	mov	r4, r2
 8011ab8:	460d      	mov	r5, r1
 8011aba:	b921      	cbnz	r1, 8011ac6 <_realloc_r+0x16>
 8011abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	f7ff bc5b 	b.w	801137c <_malloc_r>
 8011ac6:	b92a      	cbnz	r2, 8011ad4 <_realloc_r+0x24>
 8011ac8:	f7ff fbec 	bl	80112a4 <_free_r>
 8011acc:	4625      	mov	r5, r4
 8011ace:	4628      	mov	r0, r5
 8011ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad4:	f000 f81a 	bl	8011b0c <_malloc_usable_size_r>
 8011ad8:	4284      	cmp	r4, r0
 8011ada:	4606      	mov	r6, r0
 8011adc:	d802      	bhi.n	8011ae4 <_realloc_r+0x34>
 8011ade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ae2:	d8f4      	bhi.n	8011ace <_realloc_r+0x1e>
 8011ae4:	4621      	mov	r1, r4
 8011ae6:	4638      	mov	r0, r7
 8011ae8:	f7ff fc48 	bl	801137c <_malloc_r>
 8011aec:	4680      	mov	r8, r0
 8011aee:	b908      	cbnz	r0, 8011af4 <_realloc_r+0x44>
 8011af0:	4645      	mov	r5, r8
 8011af2:	e7ec      	b.n	8011ace <_realloc_r+0x1e>
 8011af4:	42b4      	cmp	r4, r6
 8011af6:	4622      	mov	r2, r4
 8011af8:	4629      	mov	r1, r5
 8011afa:	bf28      	it	cs
 8011afc:	4632      	movcs	r2, r6
 8011afe:	f7ff fbc3 	bl	8011288 <memcpy>
 8011b02:	4629      	mov	r1, r5
 8011b04:	4638      	mov	r0, r7
 8011b06:	f7ff fbcd 	bl	80112a4 <_free_r>
 8011b0a:	e7f1      	b.n	8011af0 <_realloc_r+0x40>

08011b0c <_malloc_usable_size_r>:
 8011b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b10:	1f18      	subs	r0, r3, #4
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	bfbc      	itt	lt
 8011b16:	580b      	ldrlt	r3, [r1, r0]
 8011b18:	18c0      	addlt	r0, r0, r3
 8011b1a:	4770      	bx	lr

08011b1c <_init>:
 8011b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b1e:	bf00      	nop
 8011b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b22:	bc08      	pop	{r3}
 8011b24:	469e      	mov	lr, r3
 8011b26:	4770      	bx	lr

08011b28 <_fini>:
 8011b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2a:	bf00      	nop
 8011b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b2e:	bc08      	pop	{r3}
 8011b30:	469e      	mov	lr, r3
 8011b32:	4770      	bx	lr
