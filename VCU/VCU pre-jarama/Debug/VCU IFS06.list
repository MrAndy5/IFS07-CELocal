
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011030  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08011300  08011300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011578  08011578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011580  08011580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011584  08011584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  08011588  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000838  24000064  080115ec  00013064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400089c  080115ec  0001389c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025735  00000000  00000000  00013092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  000387c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003c468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001726  00000000  00000000  0003e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  0003f946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026544  00000000  00000000  00078c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179299  00000000  00000000  0009f169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218402  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086b8  00000000  00000000  00218448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00220b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080112e8 	.word	0x080112e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	080112e8 	.word	0x080112e8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 feb2 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f8b0 	bl	8000858 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 f91c 	bl	8000934 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fd80 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fd5e 	bl	80011c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 f948 	bl	8000998 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 f9e2 	bl	8000ad0 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fa48 	bl	8000ba0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fac4 	bl	8000c9c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fbdc 	bl	8000ed0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fd06 	bl	8001128 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fc90 	bl	8001040 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fcb6 	bl	8001090 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fbb6 	bl	8000e94 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f00f fe9a 	bl	8010460 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fb34 	bl	8000d98 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	4937      	ldr	r1, [pc, #220]	@ (8000810 <main+0x124>)
 8000734:	4837      	ldr	r0, [pc, #220]	@ (8000814 <main+0x128>)
 8000736:	f002 fc39 	bl	8002fac <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	4835      	ldr	r0, [pc, #212]	@ (8000818 <main+0x12c>)
 8000742:	f000 fe2f 	bl	80013a4 <print>
#endif
		Error_Handler();
 8000746:	f001 f8c9 	bl	80018dc <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	4834      	ldr	r0, [pc, #208]	@ (800081c <main+0x130>)
 800074c:	f006 fc10 	bl	8006f70 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	4832      	ldr	r0, [pc, #200]	@ (8000820 <main+0x134>)
 8000758:	f000 fe24 	bl	80013a4 <print>
#endif
		Error_Handler();
 800075c:	f001 f8be 	bl	80018dc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	482d      	ldr	r0, [pc, #180]	@ (800081c <main+0x130>)
 8000766:	f006 fd9b 	bl	80072a0 <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	482c      	ldr	r0, [pc, #176]	@ (8000824 <main+0x138>)
 8000772:	f000 fe17 	bl	80013a4 <print>
#endif
		Error_Handler();
 8000776:	f001 f8b1 	bl	80018dc <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	482b      	ldr	r0, [pc, #172]	@ (8000828 <main+0x13c>)
 800077c:	f006 fbf8 	bl	8006f70 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	4829      	ldr	r0, [pc, #164]	@ (800082c <main+0x140>)
 8000788:	f000 fe0c 	bl	80013a4 <print>

#endif
		Error_Handler();
 800078c:	f001 f8a6 	bl	80018dc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4824      	ldr	r0, [pc, #144]	@ (8000828 <main+0x13c>)
 8000796:	f006 fd83 	bl	80072a0 <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	4823      	ldr	r0, [pc, #140]	@ (8000830 <main+0x144>)
 80007a2:	f000 fdff 	bl	80013a4 <print>
#endif
		Error_Handler();
 80007a6:	f001 f899 	bl	80018dc <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	4822      	ldr	r0, [pc, #136]	@ (8000834 <main+0x148>)
 80007ac:	f006 fbe0 	bl	8006f70 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	4820      	ldr	r0, [pc, #128]	@ (8000838 <main+0x14c>)
 80007b8:	f000 fdf4 	bl	80013a4 <print>

#endif
		Error_Handler();
 80007bc:	f001 f88e 	bl	80018dc <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	481b      	ldr	r0, [pc, #108]	@ (8000834 <main+0x148>)
 80007c6:	f006 fd6b 	bl	80072a0 <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	481a      	ldr	r0, [pc, #104]	@ (800083c <main+0x150>)
 80007d2:	f000 fde7 	bl	80013a4 <print>
#endif
		Error_Handler();
 80007d6:	f001 f881 	bl	80018dc <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	4819      	ldr	r0, [pc, #100]	@ (8000840 <main+0x154>)
 80007dc:	f000 fde2 	bl	80013a4 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80007e0:	4818      	ldr	r0, [pc, #96]	@ (8000844 <main+0x158>)
 80007e2:	f00c fc77 	bl	800d0d4 <HAL_TIM_Base_Start_IT>


	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e6:	e006      	b.n	80007f6 <main+0x10a>
	{
		//print("Solicitar tensión inversor");
		if (config_inv_lectura_v == 1)
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <main+0x15c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4816      	ldr	r0, [pc, #88]	@ (800084c <main+0x160>)
 80007f2:	f000 fdd7 	bl	80013a4 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <main+0x15c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f4      	beq.n	80007e8 <main+0xfc>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <main+0x164>)
 8000800:	f000 fdd0 	bl	80013a4 <print>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS

#endif

#if DEBUG
	print("RTDS apagado");
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <main+0x168>)
 8000806:	f000 fdcd 	bl	80013a4 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800080a:	bf00      	nop
 800080c:	e7fd      	b.n	800080a <main+0x11e>
 800080e:	bf00      	nop
 8000810:	24000694 	.word	0x24000694
 8000814:	24000088 	.word	0x24000088
 8000818:	08011300 	.word	0x08011300
 800081c:	240001e0 	.word	0x240001e0
 8000820:	08011320 	.word	0x08011320
 8000824:	08011340 	.word	0x08011340
 8000828:	24000280 	.word	0x24000280
 800082c:	08011368 	.word	0x08011368
 8000830:	08011388 	.word	0x08011388
 8000834:	24000320 	.word	0x24000320
 8000838:	080113b0 	.word	0x080113b0
 800083c:	080113d0 	.word	0x080113d0
 8000840:	080113f8 	.word	0x080113f8
 8000844:	24000488 	.word	0x24000488
 8000848:	24000084 	.word	0x24000084
 800084c:	08011414 	.word	0x08011414
 8000850:	08011448 	.word	0x08011448
 8000854:	08011458 	.word	0x08011458

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09c      	sub	sp, #112	@ 0x70
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	224c      	movs	r2, #76	@ 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f010 f8c0 	bl	80109ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f010 f8ba 	bl	80109ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000878:	2002      	movs	r0, #2
 800087a:	f007 fbe9 	bl	8008050 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <SystemClock_Config+0xd8>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <SystemClock_Config+0xd8>)
 8000888:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <SystemClock_Config+0xd8>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089a:	bf00      	nop
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <SystemClock_Config+0xd8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a8:	d1f8      	bne.n	800089c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008aa:	2301      	movs	r3, #1
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008bc:	2302      	movs	r3, #2
 80008be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80008c0:	232c      	movs	r3, #44	@ 0x2c
 80008c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d0:	230c      	movs	r3, #12
 80008d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e0:	4618      	mov	r0, r3
 80008e2:	f007 fbef 	bl	80080c4 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ec:	f000 fff6 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	233f      	movs	r3, #63	@ 0x3f
 80008f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2303      	movs	r3, #3
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008fc:	2308      	movs	r3, #8
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2103      	movs	r1, #3
 8000916:	4618      	mov	r0, r3
 8000918:	f007 ffae 	bl	8008878 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000922:	f000 ffdb 	bl	80018dc <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3770      	adds	r7, #112	@ 0x70
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	58024800 	.word	0x58024800

08000934 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0ae      	sub	sp, #184	@ 0xb8
 8000938:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	22b8      	movs	r2, #184	@ 0xb8
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f010 f853 	bl	80109ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000946:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000956:	2310      	movs	r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000966:	23c0      	movs	r3, #192	@ 0xc0
 8000968:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000972:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000976:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4618      	mov	r0, r3
 8000982:	f008 fb05 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800098c:	f000 ffa6 	bl	80018dc <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	37b8      	adds	r7, #184	@ 0xb8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	@ 0x30
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2224      	movs	r2, #36	@ 0x24
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f010 f81b 	bl	80109ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b6:	4b41      	ldr	r3, [pc, #260]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009b8:	4a41      	ldr	r2, [pc, #260]	@ (8000ac0 <MX_ADC1_Init+0x128>)
 80009ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009bc:	4b3f      	ldr	r3, [pc, #252]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c4:	4b3d      	ldr	r3, [pc, #244]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009ca:	4b3c      	ldr	r3, [pc, #240]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009d0:	4b3a      	ldr	r3, [pc, #232]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009d6:	4b39      	ldr	r3, [pc, #228]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009d8:	2200      	movs	r2, #0
 80009da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009dc:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009de:	2201      	movs	r2, #1
 80009e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80009e2:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e8:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f0:	4b32      	ldr	r3, [pc, #200]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f6:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <MX_ADC1_Init+0x124>)
 80009fe:	2203      	movs	r2, #3
 8000a00:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000a16:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1c:	4827      	ldr	r0, [pc, #156]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a1e:	f002 f8bd 	bl	8002b9c <HAL_ADC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a28:	f000 ff58 	bl	80018dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4821      	ldr	r0, [pc, #132]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a38:	f003 fd80 	bl	800453c <HAL_ADCEx_MultiModeConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a42:	f000 ff4b 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_ADC1_Init+0x12c>)
 8000a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a52:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a6c:	f002 fdd2 	bl	8003614 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a76:	f000 ff31 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <MX_ADC1_Init+0x130>)
 8000a7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000a88:	f002 fdc4 	bl	8003614 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a92:	f000 ff23 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_ADC1_Init+0x134>)
 8000a98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0x124>)
 8000aa4:	f002 fdb6 	bl	8003614 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000aae:	f000 ff15 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	@ 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000088 	.word	0x24000088
 8000ac0:	40022000 	.word	0x40022000
 8000ac4:	10c00010 	.word	0x10c00010
 8000ac8:	14f00020 	.word	0x14f00020
 8000acc:	08600004 	.word	0x08600004

08000ad0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2224      	movs	r2, #36	@ 0x24
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00f ff85 	bl	80109ec <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b98 <MX_ADC2_Init+0xc8>)
 8000ae6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000aea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af6:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b4a:	f002 f827 	bl	8002b9c <HAL_ADC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000b54:	f000 fec2 	bl	80018dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_ADC2_Init+0xcc>)
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b64:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b68:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_ADC2_Init+0xc4>)
 8000b7e:	f002 fd49 	bl	8003614 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000b88:	f000 fea8 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	240000f8 	.word	0x240000f8
 8000b98:	40022100 	.word	0x40022100
 8000b9c:	25b00200 	.word	0x25b00200

08000ba0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8000c98 <MX_FDCAN1_Init+0xf8>)
 8000baa:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bac:	4b39      	ldr	r3, [pc, #228]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bb2:	4b38      	ldr	r3, [pc, #224]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000bb8:	4b36      	ldr	r3, [pc, #216]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bbe:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bc4:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000bca:	4b32      	ldr	r3, [pc, #200]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bcc:	2206      	movs	r2, #6
 8000bce:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bde:	2205      	movs	r2, #5
 8000be0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bee:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000c06:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c0e:	2220      	movs	r2, #32
 8000c10:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c3e:	2220      	movs	r2, #32
 8000c40:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c4e:	4811      	ldr	r0, [pc, #68]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c50:	f005 ff3a 	bl	8006ac8 <HAL_FDCAN_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000c5a:	f000 fe3f 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_FDCAN1_Init+0xf4>)
 8000c7c:	f006 f902 	bl	8006e84 <HAL_FDCAN_ConfigFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000c86:	f000 fe29 	bl	80018dc <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3720      	adds	r7, #32
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	240001e0 	.word	0x240001e0
 8000c98:	4000a000 	.word	0x4000a000

08000c9c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8000d94 <MX_FDCAN2_Init+0xf8>)
 8000ca6:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ca8:	4b39      	ldr	r3, [pc, #228]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000cae:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000cb4:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000cba:	4b35      	ldr	r3, [pc, #212]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000cc0:	4b33      	ldr	r3, [pc, #204]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000cc6:	4b32      	ldr	r3, [pc, #200]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cc8:	2206      	movs	r2, #6
 8000cca:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000ccc:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cda:	2205      	movs	r2, #5
 8000cdc:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000cea:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000d02:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d28:	2204      	movs	r2, #4
 8000d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d32:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d4a:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d4c:	f005 febc 	bl	8006ac8 <HAL_FDCAN_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000d56:	f000 fdc1 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000d5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d5e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000d64:	2302      	movs	r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_FDCAN2_Init+0xf4>)
 8000d7a:	f006 f883 	bl	8006e84 <HAL_FDCAN_ConfigFilter>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000d84:	f000 fdaa 	bl	80018dc <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24000280 	.word	0x24000280
 8000d94:	4000a400 	.word	0x4000a400

08000d98 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000da0:	4a3b      	ldr	r2, [pc, #236]	@ (8000e90 <MX_FDCAN3_Init+0xf8>)
 8000da2:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000da4:	4b39      	ldr	r3, [pc, #228]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000daa:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000db0:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000db6:	4b35      	ldr	r3, [pc, #212]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000dbc:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000dc8:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000de6:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000df2:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e06:	2210      	movs	r2, #16
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8000e10:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e12:	2210      	movs	r2, #16
 8000e14:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e36:	2210      	movs	r2, #16
 8000e38:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000e46:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e48:	f005 fe3e 	bl	8006ac8 <HAL_FDCAN_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8000e52:	f000 fd43 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000e56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e5a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_FDCAN3_Init+0xf4>)
 8000e76:	f006 f805 	bl	8006e84 <HAL_FDCAN_ConfigFilter>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8000e80:	f000 fd2c 	bl	80018dc <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24000320 	.word	0x24000320
 8000e90:	4000d400 	.word	0x4000d400

08000e94 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_SDMMC1_SD_Init+0x34>)
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000ecc <MX_SDMMC1_SD_Init+0x38>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <MX_SDMMC1_SD_Init+0x34>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_SDMMC1_SD_Init+0x34>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <MX_SDMMC1_SD_Init+0x34>)
 8000eac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eb0:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <MX_SDMMC1_SD_Init+0x34>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <MX_SDMMC1_SD_Init+0x34>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	240003c0 	.word	0x240003c0
 8000ecc:	52007000 	.word	0x52007000

08000ed0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09c      	sub	sp, #112	@ 0x70
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2234      	movs	r2, #52	@ 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00f fd6e 	bl	80109ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f10:	4b49      	ldr	r3, [pc, #292]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f12:	4a4a      	ldr	r2, [pc, #296]	@ (800103c <MX_TIM1_Init+0x16c>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f16:	4b48      	ldr	r3, [pc, #288]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b43      	ldr	r3, [pc, #268]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f30:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f36:	4b40      	ldr	r3, [pc, #256]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f3c:	483e      	ldr	r0, [pc, #248]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f3e:	f00c f871 	bl	800d024 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f48:	f000 fcc8 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f56:	4619      	mov	r1, r3
 8000f58:	4837      	ldr	r0, [pc, #220]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f5a:	f00c fbbd 	bl	800d6d8 <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f64:	f000 fcba 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f68:	4833      	ldr	r0, [pc, #204]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f6a:	f00c f939 	bl	800d1e0 <HAL_TIM_PWM_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f74:	f000 fcb2 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f88:	4619      	mov	r1, r3
 8000f8a:	482b      	ldr	r0, [pc, #172]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000f8c:	f00d f8ea 	bl	800e164 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f96:	f000 fca1 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9a:	2360      	movs	r3, #96	@ 0x60
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481e      	ldr	r0, [pc, #120]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000fc0:	f00c fa76 	bl	800d4b0 <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fca:	f000 fc87 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	@ (8001038 <MX_TIM1_Init+0x168>)
 8000fd8:	f00c fa6a 	bl	800d4b0 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000fe2:	f000 fc7b 	bl	80018dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001008:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <MX_TIM1_Init+0x168>)
 800101c:	f00d f93e 	bl	800e29c <HAL_TIMEx_ConfigBreakDeadTime>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001026:	f000 fc59 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <MX_TIM1_Init+0x168>)
 800102c:	f000 ffce 	bl	8001fcc <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3770      	adds	r7, #112	@ 0x70
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2400043c 	.word	0x2400043c
 800103c:	40010000 	.word	0x40010000

08001040 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_TIM16_Init+0x48>)
 8001046:	4a11      	ldr	r2, [pc, #68]	@ (800108c <MX_TIM16_Init+0x4c>)
 8001048:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_TIM16_Init+0x48>)
 800104c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001050:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_TIM16_Init+0x48>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_TIM16_Init+0x48>)
 800105a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800105e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_TIM16_Init+0x48>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_TIM16_Init+0x48>)
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_TIM16_Init+0x48>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_TIM16_Init+0x48>)
 8001074:	f00b ffd6 	bl	800d024 <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800107e:	f000 fc2d 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	24000488 	.word	0x24000488
 800108c:	40014400 	.word	0x40014400

08001090 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 8001096:	4a23      	ldr	r2, [pc, #140]	@ (8001124 <MX_USART1_UART_Init+0x94>)
 8001098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d8:	4811      	ldr	r0, [pc, #68]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010da:	f00d f989 	bl	800e3f0 <HAL_UART_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010e4:	f000 fbfa 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010ec:	f00e fb23 	bl	800f736 <HAL_UARTEx_SetTxFifoThreshold>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010f6:	f000 fbf1 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4808      	ldr	r0, [pc, #32]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 80010fe:	f00e fb58 	bl	800f7b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001108:	f000 fbe8 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_USART1_UART_Init+0x90>)
 800110e:	f00e fad9 	bl	800f6c4 <HAL_UARTEx_DisableFifoMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001118:	f000 fbe0 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	240004d4 	.word	0x240004d4
 8001124:	40011000 	.word	0x40011000

08001128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 800112e:	4a23      	ldr	r2, [pc, #140]	@ (80011bc <MX_USART2_UART_Init+0x94>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 800114e:	220c      	movs	r2, #12
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001164:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001170:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001172:	f00d f93d 	bl	800e3f0 <HAL_UART_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800117c:	f000 fbae 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001184:	f00e fad7 	bl	800f736 <HAL_UARTEx_SetTxFifoThreshold>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800118e:	f000 fba5 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 8001196:	f00e fb0c 	bl	800f7b2 <HAL_UARTEx_SetRxFifoThreshold>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 fb9c 	bl	80018dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <MX_USART2_UART_Init+0x90>)
 80011a6:	f00e fa8d 	bl	800f6c4 <HAL_UARTEx_DisableFifoMode>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011b0:	f000 fb94 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000568 	.word	0x24000568
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <MX_DMA_Init+0x3c>)
 80011c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011cc:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <MX_DMA_Init+0x3c>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_DMA_Init+0x3c>)
 80011d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	200b      	movs	r0, #11
 80011ea:	f003 fb64 	bl	80048b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011ee:	200b      	movs	r0, #11
 80011f0:	f003 fb7b 	bl	80048ea <HAL_NVIC_EnableIRQ>

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	58024400 	.word	0x58024400

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	@ 0x38
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	4a5c      	ldr	r2, [pc, #368]	@ (8001390 <MX_GPIO_Init+0x190>)
 800121e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001226:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b56      	ldr	r3, [pc, #344]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a55      	ldr	r2, [pc, #340]	@ (8001390 <MX_GPIO_Init+0x190>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b4f      	ldr	r3, [pc, #316]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	4a4d      	ldr	r2, [pc, #308]	@ (8001390 <MX_GPIO_Init+0x190>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001262:	4b4b      	ldr	r3, [pc, #300]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001276:	4a46      	ldr	r2, [pc, #280]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001280:	4b43      	ldr	r3, [pc, #268]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001294:	4a3e      	ldr	r2, [pc, #248]	@ (8001390 <MX_GPIO_Init+0x190>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ac:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	4a37      	ldr	r2, [pc, #220]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012bc:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ca:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012da:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	4a28      	ldr	r2, [pc, #160]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <MX_GPIO_Init+0x190>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2103      	movs	r1, #3
 800130a:	4822      	ldr	r0, [pc, #136]	@ (8001394 <MX_GPIO_Init+0x194>)
 800130c:	f006 fe86 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	4820      	ldr	r0, [pc, #128]	@ (8001398 <MX_GPIO_Init+0x198>)
 8001318:	f006 fe80 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 800131c:	2303      	movs	r3, #3
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4818      	ldr	r0, [pc, #96]	@ (8001394 <MX_GPIO_Init+0x194>)
 8001334:	f006 fcb2 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4813      	ldr	r0, [pc, #76]	@ (800139c <MX_GPIO_Init+0x19c>)
 800134e:	f006 fca5 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 8001352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <MX_GPIO_Init+0x198>)
 800136c:	f006 fc96 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <MX_GPIO_Init+0x1a0>)
 8001384:	f006 fc8a 	bl	8007c9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001388:	bf00      	nop
 800138a:	3738      	adds	r7, #56	@ 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	58024400 	.word	0x58024400
 8001394:	58020800 	.word	0x58020800
 8001398:	58021000 	.word	0x58021000
 800139c:	58021400 	.word	0x58021400
 80013a0:	58021800 	.word	0x58021800

080013a4 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4909      	ldr	r1, [pc, #36]	@ (80013d4 <print+0x30>)
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <print+0x34>)
 80013b2:	f00f faf9 	bl	80109a8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80013b6:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <print+0x34>)
 80013b8:	f7fe ffaa 	bl	8000310 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	4904      	ldr	r1, [pc, #16]	@ (80013d8 <print+0x34>)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <print+0x38>)
 80013c8:	f00d f862 	bl	800e490 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08011468 	.word	0x08011468
 80013d8:	240006c0 	.word	0x240006c0
 80013dc:	24000568 	.word	0x24000568

080013e0 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80ca 	beq.w	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a66      	ldr	r2, [pc, #408]	@ (80015a8 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d162      	bne.n	80014da <HAL_FDCAN_RxFifo0Callback+0xe6>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 8001414:	4b65      	ldr	r3, [pc, #404]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001416:	4a66      	ldr	r2, [pc, #408]	@ (80015b0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001418:	2140      	movs	r1, #64	@ 0x40
 800141a:	4866      	ldr	r0, [pc, #408]	@ (80015b4 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800141c:	f005 fdd4 	bl	8006fc8 <HAL_FDCAN_GetRxMessage>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	f040 80bb 	bne.w	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001428:	4b61      	ldr	r3, [pc, #388]	@ (80015b0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f240 4266 	movw	r2, #1126	@ 0x466
 8001430:	4293      	cmp	r3, r2
 8001432:	d03c      	beq.n	80014ae <HAL_FDCAN_RxFifo0Callback+0xba>
 8001434:	f240 4266 	movw	r2, #1126	@ 0x466
 8001438:	4293      	cmp	r3, r2
 800143a:	f200 80b0 	bhi.w	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
 800143e:	f240 4261 	movw	r2, #1121	@ 0x461
 8001442:	4293      	cmp	r3, r2
 8001444:	d004      	beq.n	8001450 <HAL_FDCAN_RxFifo0Callback+0x5c>
 8001446:	f240 4263 	movw	r2, #1123	@ 0x463
 800144a:	4293      	cmp	r3, r2
 800144c:	d015      	beq.n	800147a <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 800144e:	e0a6      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					state = RxData_Inv[4] & 0xF;
 8001450:	4b56      	ldr	r3, [pc, #344]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001452:	791b      	ldrb	r3, [r3, #4]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b57      	ldr	r3, [pc, #348]	@ (80015b8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 800145c:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 800145e:	4b56      	ldr	r3, [pc, #344]	@ (80015b8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d004      	beq.n	8001470 <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001466:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b0b      	cmp	r3, #11
 800146c:	f040 8090 	bne.w	8001590 <HAL_FDCAN_RxFifo0Callback+0x19c>
						error = RxData_Inv[2];
 8001470:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001472:	789a      	ldrb	r2, [r3, #2]
 8001474:	4b51      	ldr	r3, [pc, #324]	@ (80015bc <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001476:	701a      	strb	r2, [r3, #0]
					break;
 8001478:	e08a      	b.n	8001590 <HAL_FDCAN_RxFifo0Callback+0x19c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 800147a:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800147c:	79db      	ldrb	r3, [r3, #7]
 800147e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001482:	4b4a      	ldr	r3, [pc, #296]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001484:	7a1b      	ldrb	r3, [r3, #8]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	4313      	orrs	r3, r2
 800148a:	4a48      	ldr	r2, [pc, #288]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800148c:	7952      	ldrb	r2, [r2, #5]
 800148e:	4313      	orrs	r3, r2
 8001490:	4a4b      	ldr	r2, [pc, #300]	@ (80015c0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001492:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001494:	4b4a      	ldr	r3, [pc, #296]	@ (80015c0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d079      	beq.n	8001594 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						e_machine_rpm |= 0xFFF0000;
 80014a0:	4b47      	ldr	r3, [pc, #284]	@ (80015c0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b47      	ldr	r3, [pc, #284]	@ (80015c4 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	4a45      	ldr	r2, [pc, #276]	@ (80015c0 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80014aa:	6013      	str	r3, [r2, #0]
					break;
 80014ac:	e072      	b.n	8001594 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					if (RxHeader_Inv.DataLength == 6)
 80014ae:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d170      	bne.n	8001598 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						if (config_inv_lectura_v == 0)
 80014b6:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <HAL_FDCAN_RxFifo0Callback+0xd2>
							config_inv_lectura_v = 1;
 80014be:	4b42      	ldr	r3, [pc, #264]	@ (80015c8 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
					break;
 80014c4:	e068      	b.n	8001598 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						else if (config_inv_lectura_v == 1)
 80014c6:	4b40      	ldr	r3, [pc, #256]	@ (80015c8 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d164      	bne.n	8001598 <HAL_FDCAN_RxFifo0Callback+0x1a4>
							inv_dc_bus_voltage = RxData_Inv[2];
 80014ce:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80014d6:	601a      	str	r2, [r3, #0]
					break;
 80014d8:	e05e      	b.n	8001598 <HAL_FDCAN_RxFifo0Callback+0x1a4>
		else if (hfdcan->Instance == FDCAN2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a3c      	ldr	r2, [pc, #240]	@ (80015d0 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d126      	bne.n	8001532 <HAL_FDCAN_RxFifo0Callback+0x13e>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80014e4:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80014e6:	4a3c      	ldr	r2, [pc, #240]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80014e8:	2140      	movs	r1, #64	@ 0x40
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f005 fd6c 	bl	8006fc8 <HAL_FDCAN_GetRxMessage>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d153      	bne.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
				switch (RxHeader_Acu.Identifier)
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b20      	cmp	r3, #32
 80014fc:	d003      	beq.n	8001506 <HAL_FDCAN_RxFifo0Callback+0x112>
 80014fe:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001502:	d008      	beq.n	8001516 <HAL_FDCAN_RxFifo0Callback+0x122>
}
 8001504:	e04b      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					if (RxData_Acu[0] == 0)
 8001506:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d146      	bne.n	800159c <HAL_FDCAN_RxFifo0Callback+0x1a8>
						precarga_inv = 1;
 800150e:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
					break;
 8001514:	e042      	b.n	800159c <HAL_FDCAN_RxFifo0Callback+0x1a8>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001516:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 800151e:	7852      	ldrb	r2, [r2, #1]
 8001520:	4313      	orrs	r3, r2
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800152c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001530:	e035      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
		else if (hfdcan->Instance == FDCAN3)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a2b      	ldr	r2, [pc, #172]	@ (80015e4 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d130      	bne.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 800153c:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800153e:	4a2b      	ldr	r2, [pc, #172]	@ (80015ec <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001540:	2140      	movs	r1, #64	@ 0x40
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f005 fd40 	bl	8006fc8 <HAL_FDCAN_GetRxMessage>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d127      	bne.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
				switch (RxHeader_Dash.Identifier)
 800154e:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f240 1233 	movw	r2, #307	@ 0x133
 8001556:	4293      	cmp	r3, r2
 8001558:	d121      	bne.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b21b      	sxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21b      	sxth	r3, r3
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001572:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001574:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001576:	789b      	ldrb	r3, [r3, #2]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001580:	78db      	ldrb	r3, [r3, #3]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21b      	sxth	r3, r3
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_FDCAN_RxFifo0Callback+0x200>)
 800158c:	801a      	strh	r2, [r3, #0]
}
 800158e:	e006      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001590:	bf00      	nop
 8001592:	e004      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001594:	bf00      	nop
 8001596:	e002      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001598:	bf00      	nop
 800159a:	e000      	b.n	800159e <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 800159c:	bf00      	nop
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	4000a000 	.word	0x4000a000
 80015ac:	24000674 	.word	0x24000674
 80015b0:	240005fc 	.word	0x240005fc
 80015b4:	240001e0 	.word	0x240001e0
 80015b8:	240006b2 	.word	0x240006b2
 80015bc:	24000724 	.word	0x24000724
 80015c0:	24000690 	.word	0x24000690
 80015c4:	0fff0000 	.word	0x0fff0000
 80015c8:	24000084 	.word	0x24000084
 80015cc:	2400068c 	.word	0x2400068c
 80015d0:	4000a400 	.word	0x4000a400
 80015d4:	2400067c 	.word	0x2400067c
 80015d8:	24000624 	.word	0x24000624
 80015dc:	24000080 	.word	0x24000080
 80015e0:	24000000 	.word	0x24000000
 80015e4:	4000d400 	.word	0x4000d400
 80015e8:	24000684 	.word	0x24000684
 80015ec:	2400064c 	.word	0x2400064c
 80015f0:	2400069a 	.word	0x2400069a
 80015f4:	2400069c 	.word	0x2400069c

080015f8 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a03      	ldr	r2, [pc, #12]	@ (8001614 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001606:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	24000280 	.word	0x24000280

08001618 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 800161e:	4b8c      	ldr	r3, [pc, #560]	@ (8001850 <setTorque+0x238>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800162e:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001632:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001636:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800163a:	ee17 3a90 	vmov	r3, s15
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b84      	ldr	r3, [pc, #528]	@ (8001854 <setTorque+0x23c>)
 8001642:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001644:	4b83      	ldr	r3, [pc, #524]	@ (8001854 <setTorque+0x23c>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b64      	cmp	r3, #100	@ 0x64
 800164a:	d902      	bls.n	8001652 <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 800164c:	4b81      	ldr	r3, [pc, #516]	@ (8001854 <setTorque+0x23c>)
 800164e:	2264      	movs	r2, #100	@ 0x64
 8001650:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001652:	4b81      	ldr	r3, [pc, #516]	@ (8001858 <setTorque+0x240>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001662:	ed9f 5b71 	vldr	d5, [pc, #452]	@ 8001828 <setTorque+0x210>
 8001666:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800166a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800166e:	ee17 3a90 	vmov	r3, s15
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b79      	ldr	r3, [pc, #484]	@ (800185c <setTorque+0x244>)
 8001676:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001678:	4b78      	ldr	r3, [pc, #480]	@ (800185c <setTorque+0x244>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	2b64      	cmp	r3, #100	@ 0x64
 800167e:	d902      	bls.n	8001686 <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001680:	4b76      	ldr	r3, [pc, #472]	@ (800185c <setTorque+0x244>)
 8001682:	2264      	movs	r2, #100	@ 0x64
 8001684:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001686:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <setTorque+0x23c>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d911      	bls.n	80016b2 <setTorque+0x9a>
 800168e:	4b73      	ldr	r3, [pc, #460]	@ (800185c <setTorque+0x244>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d90d      	bls.n	80016b2 <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 8001696:	4b6f      	ldr	r3, [pc, #444]	@ (8001854 <setTorque+0x23c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <setTorque+0x244>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da00      	bge.n	80016a8 <setTorque+0x90>
 80016a6:	3301      	adds	r3, #1
 80016a8:	105b      	asrs	r3, r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001860 <setTorque+0x248>)
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	e002      	b.n	80016b8 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 80016b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001860 <setTorque+0x248>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 80016b8:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <setTorque+0x248>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d803      	bhi.n	80016c8 <setTorque+0xb0>
	{
		torque_total = 0;
 80016c0:	4b67      	ldr	r3, [pc, #412]	@ (8001860 <setTorque+0x248>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	e006      	b.n	80016d6 <setTorque+0xbe>
	}
	else if (torque_total > 90)
 80016c8:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <setTorque+0x248>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	2b5a      	cmp	r3, #90	@ 0x5a
 80016ce:	d902      	bls.n	80016d6 <setTorque+0xbe>
	{
		torque_total = 100;
 80016d0:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <setTorque+0x248>)
 80016d2:	2264      	movs	r2, #100	@ 0x64
 80016d4:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80016d6:	4b63      	ldr	r3, [pc, #396]	@ (8001864 <setTorque+0x24c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016de:	4293      	cmp	r3, r2
 80016e0:	dd0a      	ble.n	80016f8 <setTorque+0xe0>
 80016e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001860 <setTorque+0x248>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2b19      	cmp	r3, #25
 80016e8:	d906      	bls.n	80016f8 <setTorque+0xe0>
	{
		print("EV_2_3");
 80016ea:	485f      	ldr	r0, [pc, #380]	@ (8001868 <setTorque+0x250>)
 80016ec:	f7ff fe5a 	bl	80013a4 <print>
		flag_EV_2_3 = 1;
 80016f0:	4b5e      	ldr	r3, [pc, #376]	@ (800186c <setTorque+0x254>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e00c      	b.n	8001712 <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80016f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001864 <setTorque+0x24c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001700:	4293      	cmp	r3, r2
 8001702:	dc06      	bgt.n	8001712 <setTorque+0xfa>
 8001704:	4b56      	ldr	r3, [pc, #344]	@ (8001860 <setTorque+0x248>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d802      	bhi.n	8001712 <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 800170c:	4b57      	ldr	r3, [pc, #348]	@ (800186c <setTorque+0x254>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001712:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <setTorque+0x23c>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b50      	ldr	r3, [pc, #320]	@ (800185c <setTorque+0x244>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	bfb8      	it	lt
 8001722:	425b      	neglt	r3, r3
 8001724:	2b0a      	cmp	r3, #10
 8001726:	dd06      	ble.n	8001736 <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001728:	4851      	ldr	r0, [pc, #324]	@ (8001870 <setTorque+0x258>)
 800172a:	f7ff fe3b 	bl	80013a4 <print>
		flag_T11_8_9 = 1;
 800172e:	4b51      	ldr	r3, [pc, #324]	@ (8001874 <setTorque+0x25c>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e007      	b.n	8001746 <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001736:	f000 ff15 	bl	8002564 <HAL_GetTick>
 800173a:	4603      	mov	r3, r0
 800173c:	4a4e      	ldr	r2, [pc, #312]	@ (8001878 <setTorque+0x260>)
 800173e:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001740:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <setTorque+0x25c>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <setTorque+0x254>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 800174c:	4b4b      	ldr	r3, [pc, #300]	@ (800187c <setTorque+0x264>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001880 <setTorque+0x268>
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d53a      	bpl.n	80017d6 <setTorque+0x1be>
	{
		if (v_celda_min > 2800)
 8001760:	4b46      	ldr	r3, [pc, #280]	@ (800187c <setTorque+0x264>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001884 <setTorque+0x26c>
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	dd1f      	ble.n	80017b4 <setTorque+0x19c>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001774:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <setTorque+0x248>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001780:	4b3e      	ldr	r3, [pc, #248]	@ (800187c <setTorque+0x264>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800178a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001830 <setTorque+0x218>
 800178e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001792:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001838 <setTorque+0x220>
 8001796:	ee37 7b45 	vsub.f64	d7, d7, d5
 800179a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800179e:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001840 <setTorque+0x228>
 80017a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017aa:	ee17 2a90 	vmov	r2, s15
 80017ae:	4b36      	ldr	r3, [pc, #216]	@ (8001888 <setTorque+0x270>)
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e015      	b.n	80017e0 <setTorque+0x1c8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <setTorque+0x248>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017c0:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001848 <setTorque+0x230>
 80017c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017c8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017cc:	ee17 2a90 	vmov	r2, s15
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <setTorque+0x270>)
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e004      	b.n	80017e0 <setTorque+0x1c8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <setTorque+0x248>)
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <setTorque+0x270>)
 80017de:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <setTorque+0x248>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d912      	bls.n	800180e <setTorque+0x1f6>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <setTorque+0x248>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4a25      	ldr	r2, [pc, #148]	@ (800188c <setTorque+0x274>)
 80017f8:	fb82 1203 	smull	r1, r2, r2, r3
 80017fc:	441a      	add	r2, r3
 80017fe:	1192      	asrs	r2, r2, #6
 8001800:	17db      	asrs	r3, r3, #31
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b1a      	subs	r3, #26
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <setTorque+0x248>)
 800180c:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 800180e:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <setTorque+0x248>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	43db      	mvns	r3, r3
 8001814:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	3301      	adds	r3, #1
 800181a:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 800181c:	88bb      	ldrh	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	33333334 	.word	0x33333334
 800182c:	401a3333 	.word	0x401a3333
 8001830:	a1cac083 	.word	0xa1cac083
 8001834:	3ff5b645 	.word	0x3ff5b645
 8001838:	00000000 	.word	0x00000000
 800183c:	40ad4c00 	.word	0x40ad4c00
 8001840:	00000000 	.word	0x00000000
 8001844:	408f4000 	.word	0x408f4000
 8001848:	9999999a 	.word	0x9999999a
 800184c:	3fa99999 	.word	0x3fa99999
 8001850:	2400069a 	.word	0x2400069a
 8001854:	2400069e 	.word	0x2400069e
 8001858:	2400069c 	.word	0x2400069c
 800185c:	240006a0 	.word	0x240006a0
 8001860:	240006a8 	.word	0x240006a8
 8001864:	240006a4 	.word	0x240006a4
 8001868:	08011484 	.word	0x08011484
 800186c:	240006b8 	.word	0x240006b8
 8001870:	0801148c 	.word	0x0801148c
 8001874:	240006bc 	.word	0x240006bc
 8001878:	240006b4 	.word	0x240006b4
 800187c:	24000000 	.word	0x24000000
 8001880:	455ac000 	.word	0x455ac000
 8001884:	452f0000 	.word	0x452f0000
 8001888:	240006ac 	.word	0x240006ac
 800188c:	b60b60b7 	.word	0xb60b60b7

08001890 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a0c      	ldr	r2, [pc, #48]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d111      	bne.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x34>
	{

#if CALIBRATION
		real_torque = setTorque();
 80018a0:	f7ff feba 	bl	8001618 <setTorque>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018aa:	801a      	strh	r2, [r3, #0]
		byte_torque_1 = real_torque & 0xFF;
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018b4:	701a      	strb	r2, [r3, #0]
		byte_torque_2 = (real_torque >> 8) & 0xFF;
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018c2:	701a      	strb	r2, [r3, #0]

			break;
		}
#endif
	}
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24000488 	.word	0x24000488
 80018d0:	240006b0 	.word	0x240006b0
 80018d4:	240006aa 	.word	0x240006aa
 80018d8:	240006ab 	.word	0x240006ab

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_MspInit+0x30>)
 80018f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018f4:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x30>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x30>)
 8001900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	58024400 	.word	0x58024400

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b090      	sub	sp, #64	@ 0x40
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a90      	ldr	r2, [pc, #576]	@ (8001b7c <HAL_ADC_MspInit+0x260>)
 800193a:	4293      	cmp	r3, r2
 800193c:	f040 80a3 	bne.w	8001a86 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001940:	4b8f      	ldr	r3, [pc, #572]	@ (8001b80 <HAL_ADC_MspInit+0x264>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a8e      	ldr	r2, [pc, #568]	@ (8001b80 <HAL_ADC_MspInit+0x264>)
 8001948:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800194a:	4b8d      	ldr	r3, [pc, #564]	@ (8001b80 <HAL_ADC_MspInit+0x264>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10e      	bne.n	8001970 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001952:	4b8c      	ldr	r3, [pc, #560]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001958:	4a8a      	ldr	r2, [pc, #552]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001962:	4b88      	ldr	r3, [pc, #544]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	4b84      	ldr	r3, [pc, #528]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001976:	4a83      	ldr	r2, [pc, #524]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001980:	4b80      	ldr	r3, [pc, #512]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001986:	f003 0304 	and.w	r3, r3, #4
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	4a7b      	ldr	r2, [pc, #492]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800199e:	4b79      	ldr	r3, [pc, #484]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 80019a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	623b      	str	r3, [r7, #32]
 80019aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ac:	4b75      	ldr	r3, [pc, #468]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	4a74      	ldr	r2, [pc, #464]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 80019b4:	f043 0320 	orr.w	r3, r3, #32
 80019b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019bc:	4b71      	ldr	r3, [pc, #452]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 80019ca:	2330      	movs	r3, #48	@ 0x30
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ce:	2303      	movs	r3, #3
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	486a      	ldr	r0, [pc, #424]	@ (8001b88 <HAL_ADC_MspInit+0x26c>)
 80019de:	f006 f95d 	bl	8007c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 80019e2:	2303      	movs	r3, #3
 80019e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	4865      	ldr	r0, [pc, #404]	@ (8001b8c <HAL_ADC_MspInit+0x270>)
 80019f6:	f006 f951 	bl	8007c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 80019fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a00:	2303      	movs	r3, #3
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4860      	ldr	r0, [pc, #384]	@ (8001b90 <HAL_ADC_MspInit+0x274>)
 8001a10:	f006 f944 	bl	8007c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a14:	4b5f      	ldr	r3, [pc, #380]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a16:	4a60      	ldr	r2, [pc, #384]	@ (8001b98 <HAL_ADC_MspInit+0x27c>)
 8001a18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a1c:	2209      	movs	r2, #9
 8001a1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a20:	4b5c      	ldr	r3, [pc, #368]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b59      	ldr	r3, [pc, #356]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a34:	4b57      	ldr	r3, [pc, #348]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a3c:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a44:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a4c:	4b51      	ldr	r3, [pc, #324]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a52:	4b50      	ldr	r3, [pc, #320]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a58:	484e      	ldr	r0, [pc, #312]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a5a:	f002 ff61 	bl	8004920 <HAL_DMA_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001a64:	f7ff ff3a 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a6e:	4a49      	ldr	r2, [pc, #292]	@ (8001b94 <HAL_ADC_MspInit+0x278>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2012      	movs	r0, #18
 8001a7a:	f002 ff1c 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a7e:	2012      	movs	r0, #18
 8001a80:	f002 ff33 	bl	80048ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a84:	e076      	b.n	8001b74 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a44      	ldr	r2, [pc, #272]	@ (8001b9c <HAL_ADC_MspInit+0x280>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d171      	bne.n	8001b74 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a90:	4b3b      	ldr	r3, [pc, #236]	@ (8001b80 <HAL_ADC_MspInit+0x264>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	4a3a      	ldr	r2, [pc, #232]	@ (8001b80 <HAL_ADC_MspInit+0x264>)
 8001a98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a9a:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <HAL_ADC_MspInit+0x264>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001aa8:	4a36      	ldr	r2, [pc, #216]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001aaa:	f043 0320 	orr.w	r3, r3, #32
 8001aae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ab2:	4b34      	ldr	r3, [pc, #208]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001ab4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac0:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b29      	ldr	r3, [pc, #164]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	4a27      	ldr	r2, [pc, #156]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aee:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001b04:	f043 0320 	orr.w	r3, r3, #32
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_ADC_MspInit+0x268>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4816      	ldr	r0, [pc, #88]	@ (8001b88 <HAL_ADC_MspInit+0x26c>)
 8001b2e:	f006 f8b5 	bl	8007c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8001b32:	2301      	movs	r3, #1
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b36:	2303      	movs	r3, #3
 8001b38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b42:	4619      	mov	r1, r3
 8001b44:	4811      	ldr	r0, [pc, #68]	@ (8001b8c <HAL_ADC_MspInit+0x270>)
 8001b46:	f006 f8a9 	bl	8007c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 8001b4a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b50:	2303      	movs	r3, #3
 8001b52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <HAL_ADC_MspInit+0x274>)
 8001b60:	f006 f89c 	bl	8007c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	2012      	movs	r0, #18
 8001b6a:	f002 fea4 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b6e:	2012      	movs	r0, #18
 8001b70:	f002 febb 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8001b74:	bf00      	nop
 8001b76:	3740      	adds	r7, #64	@ 0x40
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	24000728 	.word	0x24000728
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58020800 	.word	0x58020800
 8001b8c:	58020400 	.word	0x58020400
 8001b90:	58021400 	.word	0x58021400
 8001b94:	24000168 	.word	0x24000168
 8001b98:	40020010 	.word	0x40020010
 8001b9c:	40022100 	.word	0x40022100

08001ba0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0bc      	sub	sp, #240	@ 0xf0
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	22b8      	movs	r2, #184	@ 0xb8
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f00e ff13 	bl	80109ec <memset>
  if(hfdcan->Instance==FDCAN1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a8d      	ldr	r2, [pc, #564]	@ (8001e00 <HAL_FDCAN_MspInit+0x260>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d157      	bne.n	8001c80 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	4618      	mov	r0, r3
 8001be8:	f007 f9d2 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001bf2:	f7ff fe73 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bf6:	4b83      	ldr	r3, [pc, #524]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a81      	ldr	r2, [pc, #516]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001bfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c00:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10e      	bne.n	8001c26 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c08:	4b7f      	ldr	r3, [pc, #508]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001c0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c0e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001c18:	4b7b      	ldr	r3, [pc, #492]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001c1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	4b78      	ldr	r3, [pc, #480]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c2c:	4a76      	ldr	r2, [pc, #472]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c36:	4b74      	ldr	r3, [pc, #464]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c44:	2303      	movs	r3, #3
 8001c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c62:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c66:	4619      	mov	r1, r3
 8001c68:	4868      	ldr	r0, [pc, #416]	@ (8001e0c <HAL_FDCAN_MspInit+0x26c>)
 8001c6a:	f006 f817 	bl	8007c9c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2101      	movs	r1, #1
 8001c72:	2013      	movs	r0, #19
 8001c74:	f002 fe1f 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c78:	2013      	movs	r0, #19
 8001c7a:	f002 fe36 	bl	80048ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001c7e:	e0ba      	b.n	8001df6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a62      	ldr	r2, [pc, #392]	@ (8001e10 <HAL_FDCAN_MspInit+0x270>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d158      	bne.n	8001d3c <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 f975 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8001cac:	f7ff fe16 	bl	80018dc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001cb0:	4b54      	ldr	r3, [pc, #336]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a53      	ldr	r2, [pc, #332]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001cb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cba:	4b52      	ldr	r3, [pc, #328]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cc2:	4b51      	ldr	r3, [pc, #324]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001cc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001cd4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce6:	4a48      	ldr	r2, [pc, #288]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf0:	4b45      	ldr	r3, [pc, #276]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cfe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001d18:	2309      	movs	r3, #9
 8001d1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d22:	4619      	mov	r1, r3
 8001d24:	483b      	ldr	r0, [pc, #236]	@ (8001e14 <HAL_FDCAN_MspInit+0x274>)
 8001d26:	f005 ffb9 	bl	8007c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	2014      	movs	r0, #20
 8001d30:	f002 fdc1 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001d34:	2014      	movs	r0, #20
 8001d36:	f002 fdd8 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8001d3a:	e05c      	b.n	8001df6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a35      	ldr	r2, [pc, #212]	@ (8001e18 <HAL_FDCAN_MspInit+0x278>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d157      	bne.n	8001df6 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d46:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d58:	f107 0320 	add.w	r3, r7, #32
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f007 f917 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8001d68:	f7ff fdb8 	bl	80018dc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a24      	ldr	r2, [pc, #144]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001d74:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d76:	4b23      	ldr	r3, [pc, #140]	@ (8001e04 <HAL_FDCAN_MspInit+0x264>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10e      	bne.n	8001d9c <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001d80:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001d84:	4a20      	ldr	r2, [pc, #128]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001d90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da2:	4a19      	ldr	r2, [pc, #100]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <HAL_FDCAN_MspInit+0x268>)
 8001dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dda:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dde:	4619      	mov	r1, r3
 8001de0:	480e      	ldr	r0, [pc, #56]	@ (8001e1c <HAL_FDCAN_MspInit+0x27c>)
 8001de2:	f005 ff5b 	bl	8007c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	209f      	movs	r0, #159	@ 0x9f
 8001dec:	f002 fd63 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8001df0:	209f      	movs	r0, #159	@ 0x9f
 8001df2:	f002 fd7a 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	37f0      	adds	r7, #240	@ 0xf0
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	4000a000 	.word	0x4000a000
 8001e04:	2400072c 	.word	0x2400072c
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	58020c00 	.word	0x58020c00
 8001e10:	4000a400 	.word	0x4000a400
 8001e14:	58020400 	.word	0x58020400
 8001e18:	4000d400 	.word	0x4000d400
 8001e1c:	58021800 	.word	0x58021800

08001e20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	@ 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f38 <HAL_SD_MspInit+0x118>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d175      	bne.n	8001f2e <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e42:	4b3e      	ldr	r3, [pc, #248]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e48:	4a3c      	ldr	r2, [pc, #240]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e52:	4b3a      	ldr	r3, [pc, #232]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	4b36      	ldr	r3, [pc, #216]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e66:	4a35      	ldr	r2, [pc, #212]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e70:	4b32      	ldr	r3, [pc, #200]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e84:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea2:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_SD_MspInit+0x11c>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001eba:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ebe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ecc:	230c      	movs	r3, #12
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	481a      	ldr	r0, [pc, #104]	@ (8001f40 <HAL_SD_MspInit+0x120>)
 8001ed8:	f005 fee0 	bl	8007c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001edc:	2304      	movs	r3, #4
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eec:	230c      	movs	r3, #12
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4813      	ldr	r0, [pc, #76]	@ (8001f44 <HAL_SD_MspInit+0x124>)
 8001ef8:	f005 fed0 	bl	8007c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <HAL_SD_MspInit+0x128>)
 8001f1a:	f005 febf 	bl	8007c9c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2031      	movs	r0, #49	@ 0x31
 8001f24:	f002 fcc7 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001f28:	2031      	movs	r0, #49	@ 0x31
 8001f2a:	f002 fcde 	bl	80048ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001f2e:	bf00      	nop
 8001f30:	3730      	adds	r7, #48	@ 0x30
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	52007000 	.word	0x52007000
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	58020800 	.word	0x58020800
 8001f44:	58020c00 	.word	0x58020c00
 8001f48:	58020400 	.word	0x58020400

08001f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a19      	ldr	r2, [pc, #100]	@ (8001fc0 <HAL_TIM_Base_MspInit+0x74>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10f      	bne.n	8001f7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5e:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x78>)
 8001f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f64:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x78>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x78>)
 8001f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001f7c:	e01b      	b.n	8001fb6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a11      	ldr	r2, [pc, #68]	@ (8001fc8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d116      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x78>)
 8001f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x78>)
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x78>)
 8001f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2075      	movs	r0, #117	@ 0x75
 8001fac:	f002 fc83 	bl	80048b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001fb0:	2075      	movs	r0, #117	@ 0x75
 8001fb2:	f002 fc9a 	bl	80048ea <HAL_NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	40014400 	.word	0x40014400

08001fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a13      	ldr	r2, [pc, #76]	@ (8002038 <HAL_TIM_MspPostInit+0x6c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d11f      	bne.n	800202e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <HAL_TIM_MspPostInit+0x70>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff4:	4a11      	ldr	r2, [pc, #68]	@ (800203c <HAL_TIM_MspPostInit+0x70>)
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <HAL_TIM_MspPostInit+0x70>)
 8002000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 800200c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002010:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800201e:	2301      	movs	r3, #1
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	@ (8002040 <HAL_TIM_MspPostInit+0x74>)
 800202a:	f005 fe37 	bl	8007c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	58024400 	.word	0x58024400
 8002040:	58021000 	.word	0x58021000

08002044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0ba      	sub	sp, #232	@ 0xe8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	22b8      	movs	r2, #184	@ 0xb8
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f00e fcc1 	bl	80109ec <memset>
  if(huart->Instance==USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a4d      	ldr	r2, [pc, #308]	@ (80021a4 <HAL_UART_MspInit+0x160>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d147      	bne.n	8002104 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002074:	f04f 0201 	mov.w	r2, #1
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	4618      	mov	r0, r3
 800208c:	f006 ff80 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002096:	f7ff fc21 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800209a:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 800209c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020a0:	4a41      	ldr	r2, [pc, #260]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020aa:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 80020ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b3b      	ldr	r3, [pc, #236]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020be:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c8:	4b37      	ldr	r3, [pc, #220]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 80020d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f0:	2307      	movs	r3, #7
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020fa:	4619      	mov	r1, r3
 80020fc:	482b      	ldr	r0, [pc, #172]	@ (80021ac <HAL_UART_MspInit+0x168>)
 80020fe:	f005 fdcd 	bl	8007c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002102:	e04a      	b.n	800219a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a29      	ldr	r2, [pc, #164]	@ (80021b0 <HAL_UART_MspInit+0x16c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d145      	bne.n	800219a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800210e:	f04f 0202 	mov.w	r2, #2
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	4618      	mov	r0, r3
 8002126:	f006 ff33 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002130:	f7ff fbd4 	bl	80018dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 8002136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800213a:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002140:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002144:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 8002146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002162:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_UART_MspInit+0x164>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002170:	230c      	movs	r3, #12
 8002172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002188:	2307      	movs	r3, #7
 800218a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	@ (80021ac <HAL_UART_MspInit+0x168>)
 8002196:	f005 fd81 	bl	8007c9c <HAL_GPIO_Init>
}
 800219a:	bf00      	nop
 800219c:	37e8      	adds	r7, #232	@ 0xe8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40011000 	.word	0x40011000
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58020000 	.word	0x58020000
 80021b0:	40004400 	.word	0x40004400

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <NMI_Handler+0x4>

080021bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <MemManage_Handler+0x4>

080021cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <UsageFault_Handler+0x4>

080021dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220a:	f000 f997 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <DMA1_Stream0_IRQHandler+0x10>)
 800221a:	f003 f943 	bl	80054a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	24000168 	.word	0x24000168

08002228 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800222c:	4803      	ldr	r0, [pc, #12]	@ (800223c <ADC_IRQHandler+0x14>)
 800222e:	f000 ff99 	bl	8003164 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002232:	4803      	ldr	r0, [pc, #12]	@ (8002240 <ADC_IRQHandler+0x18>)
 8002234:	f000 ff96 	bl	8003164 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	24000088 	.word	0x24000088
 8002240:	240000f8 	.word	0x240000f8

08002244 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <FDCAN1_IT0_IRQHandler+0x10>)
 800224a:	f005 f8a3 	bl	8007394 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	240001e0 	.word	0x240001e0

08002258 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <FDCAN2_IT0_IRQHandler+0x10>)
 800225e:	f005 f899 	bl	8007394 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	24000280 	.word	0x24000280

0800226c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <SDMMC1_IRQHandler+0x10>)
 8002272:	f009 fce3 	bl	800bc3c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	240003c0 	.word	0x240003c0

08002280 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <TIM16_IRQHandler+0x10>)
 8002286:	f00b f80c 	bl	800d2a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	24000488 	.word	0x24000488

08002294 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <FDCAN3_IT0_IRQHandler+0x10>)
 800229a:	f005 f87b 	bl	8007394 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	24000320 	.word	0x24000320

080022a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b0:	4a14      	ldr	r2, [pc, #80]	@ (8002304 <_sbrk+0x5c>)
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <_sbrk+0x60>)
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <_sbrk+0x64>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <_sbrk+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <_sbrk+0x64>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d207      	bcs.n	80022e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d8:	f00e fb90 	bl	80109fc <__errno>
 80022dc:	4603      	mov	r3, r0
 80022de:	220c      	movs	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	e009      	b.n	80022fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ee:	4b07      	ldr	r3, [pc, #28]	@ (800230c <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	4a05      	ldr	r2, [pc, #20]	@ (800230c <_sbrk+0x64>)
 80022f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fa:	68fb      	ldr	r3, [r7, #12]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	24050000 	.word	0x24050000
 8002308:	00000400 	.word	0x00000400
 800230c:	24000730 	.word	0x24000730
 8002310:	240008a0 	.word	0x240008a0

08002314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002318:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <SystemInit+0xd0>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231e:	4a31      	ldr	r2, [pc, #196]	@ (80023e4 <SystemInit+0xd0>)
 8002320:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002324:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002328:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <SystemInit+0xd4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	2b06      	cmp	r3, #6
 8002332:	d807      	bhi.n	8002344 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002334:	4b2c      	ldr	r3, [pc, #176]	@ (80023e8 <SystemInit+0xd4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 030f 	bic.w	r3, r3, #15
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <SystemInit+0xd4>)
 800233e:	f043 0307 	orr.w	r3, r3, #7
 8002342:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002344:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <SystemInit+0xd8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a28      	ldr	r2, [pc, #160]	@ (80023ec <SystemInit+0xd8>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002350:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <SystemInit+0xd8>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002356:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <SystemInit+0xd8>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4924      	ldr	r1, [pc, #144]	@ (80023ec <SystemInit+0xd8>)
 800235c:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <SystemInit+0xdc>)
 800235e:	4013      	ands	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <SystemInit+0xd4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800236e:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <SystemInit+0xd4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 030f 	bic.w	r3, r3, #15
 8002376:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <SystemInit+0xd4>)
 8002378:	f043 0307 	orr.w	r3, r3, #7
 800237c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800237e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <SystemInit+0xd8>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <SystemInit+0xd8>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800238a:	4b18      	ldr	r3, [pc, #96]	@ (80023ec <SystemInit+0xd8>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002390:	4b16      	ldr	r3, [pc, #88]	@ (80023ec <SystemInit+0xd8>)
 8002392:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <SystemInit+0xe0>)
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002396:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <SystemInit+0xd8>)
 8002398:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <SystemInit+0xe4>)
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800239c:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <SystemInit+0xd8>)
 800239e:	4a17      	ldr	r2, [pc, #92]	@ (80023fc <SystemInit+0xe8>)
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <SystemInit+0xd8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023a8:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <SystemInit+0xd8>)
 80023aa:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <SystemInit+0xe8>)
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <SystemInit+0xd8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023b4:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <SystemInit+0xd8>)
 80023b6:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <SystemInit+0xe8>)
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <SystemInit+0xd8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <SystemInit+0xd8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a09      	ldr	r2, [pc, #36]	@ (80023ec <SystemInit+0xd8>)
 80023c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023cc:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <SystemInit+0xd8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <SystemInit+0xec>)
 80023d4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00
 80023e8:	52002000 	.word	0x52002000
 80023ec:	58024400 	.word	0x58024400
 80023f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80023f4:	02020200 	.word	0x02020200
 80023f8:	01ff0000 	.word	0x01ff0000
 80023fc:	01010280 	.word	0x01010280
 8002400:	52004000 	.word	0x52004000

08002404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800243c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002408:	f7ff ff84 	bl	8002314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480c      	ldr	r0, [pc, #48]	@ (8002440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800240e:	490d      	ldr	r1, [pc, #52]	@ (8002444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002410:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002424:	4c0a      	ldr	r4, [pc, #40]	@ (8002450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002432:	f00e fae9 	bl	8010a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002436:	f7fe f959 	bl	80006ec <main>
  bx  lr
 800243a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800243c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002444:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002448:	08011588 	.word	0x08011588
  ldr r2, =_sbss
 800244c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8002450:	2400089c 	.word	0x2400089c

08002454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC3_IRQHandler>
	...

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245e:	2003      	movs	r0, #3
 8002460:	f002 fa1e 	bl	80048a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002464:	f006 fbbe 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_Init+0x68>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	4913      	ldr	r1, [pc, #76]	@ (80024c4 <HAL_Init+0x6c>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_Init+0x68>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4a0e      	ldr	r2, [pc, #56]	@ (80024c4 <HAL_Init+0x6c>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	4a0b      	ldr	r2, [pc, #44]	@ (80024c8 <HAL_Init+0x70>)
 800249a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800249c:	4a0b      	ldr	r2, [pc, #44]	@ (80024cc <HAL_Init+0x74>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024a2:	200f      	movs	r0, #15
 80024a4:	f000 f814 	bl	80024d0 <HAL_InitTick>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e002      	b.n	80024b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024b2:	f7ff fa19 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	58024400 	.word	0x58024400
 80024c4:	080114e0 	.word	0x080114e0
 80024c8:	24000008 	.word	0x24000008
 80024cc:	24000004 	.word	0x24000004

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80024d8:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_InitTick+0x60>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e021      	b.n	8002528 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_InitTick+0x64>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_InitTick+0x60>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fa03 	bl	8004906 <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00e      	b.n	8002528 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d80a      	bhi.n	8002526 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f002 f9cd 	bl	80048b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4a06      	ldr	r2, [pc, #24]	@ (8002538 <HAL_InitTick+0x68>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	24000010 	.word	0x24000010
 8002534:	24000004 	.word	0x24000004
 8002538:	2400000c 	.word	0x2400000c

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	24000010 	.word	0x24000010
 8002560:	24000734 	.word	0x24000734

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	24000734 	.word	0x24000734

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff ffee 	bl	8002564 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffde 	bl	8002564 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000010 	.word	0x24000010

080025c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3360      	adds	r3, #96	@ 0x60
 800263e:	461a      	mov	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a10      	ldr	r2, [pc, #64]	@ (800268c <LL_ADC_SetOffset+0x60>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d10b      	bne.n	8002668 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	4313      	orrs	r3, r2
 800265e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002666:	e00b      	b.n	8002680 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	430b      	orrs	r3, r1
 800267a:	431a      	orrs	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	601a      	str	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	371c      	adds	r7, #28
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	58026000 	.word	0x58026000

08002690 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3360      	adds	r3, #96	@ 0x60
 800269e:	461a      	mov	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	611a      	str	r2, [r3, #16]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002730 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3360      	adds	r3, #96	@ 0x60
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	601a      	str	r2, [r3, #0]
  }
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	58026000 	.word	0x58026000

08002734 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <LL_ADC_SetOffsetSaturation+0x40>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d10e      	bne.n	8002766 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3360      	adds	r3, #96	@ 0x60
 800274c:	461a      	mov	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	431a      	orrs	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	58026000 	.word	0x58026000

08002778 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <LL_ADC_SetOffsetSign+0x40>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10e      	bne.n	80027aa <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3360      	adds	r3, #96	@ 0x60
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	58026000 	.word	0x58026000

080027bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3360      	adds	r3, #96	@ 0x60
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <LL_ADC_SetOffsetState+0x50>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d108      	bne.n	80027f0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80027ee:	e007      	b.n	8002800 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	58026000 	.word	0x58026000

08002810 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002836:	b480      	push	{r7}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3330      	adds	r3, #48	@ 0x30
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	211f      	movs	r1, #31
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	f003 011f 	and.w	r1, r3, #31
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f023 0203 	bic.w	r2, r3, #3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d107      	bne.n	80028f6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60da      	str	r2, [r3, #12]
  }
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	58026000 	.word	0x58026000

08002908 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002914:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800292e:	b480      	push	{r7}
 8002930:	b087      	sub	sp, #28
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3314      	adds	r3, #20
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	0e5b      	lsrs	r3, r3, #25
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	4413      	add	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	0d1b      	lsrs	r3, r3, #20
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2107      	movs	r1, #7
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	401a      	ands	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	0d1b      	lsrs	r3, r3, #20
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <LL_ADC_SetChannelSingleDiff+0x78>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d115      	bne.n	80029c4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0318 	and.w	r3, r3, #24
 80029ae:	4914      	ldr	r1, [pc, #80]	@ (8002a00 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80029b0:	40d9      	lsrs	r1, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	400b      	ands	r3, r1
 80029b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ba:	431a      	orrs	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80029c2:	e014      	b.n	80029ee <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d0:	43db      	mvns	r3, r3
 80029d2:	401a      	ands	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0318 	and.w	r3, r3, #24
 80029da:	4909      	ldr	r1, [pc, #36]	@ (8002a00 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80029dc:	40d9      	lsrs	r1, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	400b      	ands	r3, r1
 80029e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e6:	431a      	orrs	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	58026000 	.word	0x58026000
 8002a00:	000fffff 	.word	0x000fffff

08002a04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 031f 	and.w	r3, r3, #31
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6093      	str	r3, [r2, #8]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	5fffffc0 	.word	0x5fffffc0

08002a60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <LL_ADC_EnableInternalRegulator+0x24>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	6fffffc0 	.word	0x6fffffc0

08002ab0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <LL_ADC_Enable+0x24>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	7fffffc0 	.word	0x7fffffc0

08002b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <LL_ADC_IsEnabled+0x18>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <LL_ADC_IsEnabled+0x1a>
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <LL_ADC_REG_StartConversion+0x24>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	7fffffc0 	.word	0x7fffffc0

08002b50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1ee      	b.n	8002f94 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe fea9 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff3f 	bl	8002a60 <LL_ADC_IsDeepPowerDownEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff25 	bl	8002a3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff5a 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d114      	bne.n	8002c2c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff3e 	bl	8002a88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002e48 <HAL_ADC_Init+0x2ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	4a8e      	ldr	r2, [pc, #568]	@ (8002e4c <HAL_ADC_Init+0x2b0>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c1e:	e002      	b.n	8002c26 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f9      	bne.n	8002c20 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff3d 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c40:	f043 0210 	orr.w	r2, r3, #16
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff77 	bl	8002b50 <LL_ADC_REG_IsConversionOngoing>
 8002c62:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f040 8188 	bne.w	8002f82 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 8184 	bne.w	8002f82 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff36 	bl	8002b00 <LL_ADC_IsEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d136      	bne.n	8002d08 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e50 <HAL_ADC_Init+0x2b4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d004      	beq.n	8002cae <HAL_ADC_Init+0x112>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e54 <HAL_ADC_Init+0x2b8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10e      	bne.n	8002ccc <HAL_ADC_Init+0x130>
 8002cae:	4868      	ldr	r0, [pc, #416]	@ (8002e50 <HAL_ADC_Init+0x2b4>)
 8002cb0:	f7ff ff26 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	4867      	ldr	r0, [pc, #412]	@ (8002e54 <HAL_ADC_Init+0x2b8>)
 8002cb8:	f7ff ff22 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4323      	orrs	r3, r4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e008      	b.n	8002cde <HAL_ADC_Init+0x142>
 8002ccc:	4862      	ldr	r0, [pc, #392]	@ (8002e58 <HAL_ADC_Init+0x2bc>)
 8002cce:	f7ff ff17 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e50 <HAL_ADC_Init+0x2b4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_ADC_Init+0x15a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	@ (8002e54 <HAL_ADC_Init+0x2b8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_ADC_Init+0x15e>
 8002cf6:	4a59      	ldr	r2, [pc, #356]	@ (8002e5c <HAL_ADC_Init+0x2c0>)
 8002cf8:	e000      	b.n	8002cfc <HAL_ADC_Init+0x160>
 8002cfa:	4a59      	ldr	r2, [pc, #356]	@ (8002e60 <HAL_ADC_Init+0x2c4>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f7ff fc5e 	bl	80025c4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	@ (8002e58 <HAL_ADC_Init+0x2bc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d129      	bne.n	8002d66 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7e5b      	ldrb	r3, [r3, #25]
 8002d16:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002d1c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002d22:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d013      	beq.n	8002d54 <HAL_ADC_Init+0x1b8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d00d      	beq.n	8002d50 <HAL_ADC_Init+0x1b4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b1c      	cmp	r3, #28
 8002d3a:	d007      	beq.n	8002d4c <HAL_ADC_Init+0x1b0>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b18      	cmp	r3, #24
 8002d42:	d101      	bne.n	8002d48 <HAL_ADC_Init+0x1ac>
 8002d44:	2318      	movs	r3, #24
 8002d46:	e006      	b.n	8002d56 <HAL_ADC_Init+0x1ba>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e004      	b.n	8002d56 <HAL_ADC_Init+0x1ba>
 8002d4c:	2310      	movs	r3, #16
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_Init+0x1ba>
 8002d50:	2308      	movs	r3, #8
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_Init+0x1ba>
 8002d54:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002d56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e00e      	b.n	8002d84 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7e5b      	ldrb	r3, [r3, #25]
 8002d6a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d70:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002d76:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d106      	bne.n	8002d9c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	3b01      	subs	r3, #1
 8002d94:	045b      	lsls	r3, r3, #17
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a26      	ldr	r2, [pc, #152]	@ (8002e58 <HAL_ADC_Init+0x2bc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d115      	bne.n	8002dee <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <HAL_ADC_Init+0x2c8>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	69b9      	ldr	r1, [r7, #24]
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	611a      	str	r2, [r3, #16]
 8002dec:	e009      	b.n	8002e02 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <HAL_ADC_Init+0x2cc>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	69b9      	ldr	r1, [r7, #24]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fea2 	bl	8002b50 <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff feaf 	bl	8002b76 <LL_ADC_INJ_IsConversionOngoing>
 8002e18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 808e 	bne.w	8002f3e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 808a 	bne.w	8002f3e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_ADC_Init+0x2bc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d11b      	bne.n	8002e6c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7e1b      	ldrb	r3, [r3, #24]
 8002e38:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e40:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	e018      	b.n	8002e7a <HAL_ADC_Init+0x2de>
 8002e48:	24000004 	.word	0x24000004
 8002e4c:	053e2d63 	.word	0x053e2d63
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40022100 	.word	0x40022100
 8002e58:	58026000 	.word	0x58026000
 8002e5c:	40022300 	.word	0x40022300
 8002e60:	58026300 	.word	0x58026300
 8002e64:	fff04007 	.word	0xfff04007
 8002e68:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7e1b      	ldrb	r3, [r3, #24]
 8002e70:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4b46      	ldr	r3, [pc, #280]	@ (8002f9c <HAL_ADC_Init+0x400>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	69b9      	ldr	r1, [r7, #24]
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d137      	bne.n	8002f08 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa0 <HAL_ADC_Init+0x404>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d116      	bne.n	8002ed6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa4 <HAL_ADC_Init+0x408>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	e020      	b.n	8002f18 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	4b32      	ldr	r3, [pc, #200]	@ (8002fa8 <HAL_ADC_Init+0x40c>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	0411      	lsls	r1, r2, #16
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002eec:	4311      	orrs	r1, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	e007      	b.n	8002f18 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa0 <HAL_ADC_Init+0x404>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 f9b9 	bl	80042b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10c      	bne.n	8002f60 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	f023 010f 	bic.w	r1, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f5e:	e007      	b.n	8002f70 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020f 	bic.w	r2, r2, #15
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f74:	f023 0303 	bic.w	r3, r3, #3
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f80:	e007      	b.n	8002f92 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3724      	adds	r7, #36	@ 0x24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	ffffbffc 	.word	0xffffbffc
 8002fa0:	58026000 	.word	0x58026000
 8002fa4:	fc00f81f 	.word	0xfc00f81f
 8002fa8:	fc00f81e 	.word	0xfc00f81e

08002fac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a60      	ldr	r2, [pc, #384]	@ (8003140 <HAL_ADC_Start_DMA+0x194>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_ADC_Start_DMA+0x20>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003144 <HAL_ADC_Start_DMA+0x198>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_Start_DMA+0x24>
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8003148 <HAL_ADC_Start_DMA+0x19c>)
 8002fce:	e000      	b.n	8002fd2 <HAL_ADC_Start_DMA+0x26>
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	@ (800314c <HAL_ADC_Start_DMA+0x1a0>)
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fd16 	bl	8002a04 <LL_ADC_GetMultimode>
 8002fd8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fdb6 	bl	8002b50 <LL_ADC_REG_IsConversionOngoing>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 80a2 	bne.w	8003130 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Start_DMA+0x4e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e09d      	b.n	8003136 <HAL_ADC_Start_DMA+0x18a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d003      	beq.n	8003016 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b09      	cmp	r3, #9
 8003012:	f040 8086 	bne.w	8003122 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f001 f82c 	bl	8004074 <ADC_Enable>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d178      	bne.n	8003118 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800302a:	4b49      	ldr	r3, [pc, #292]	@ (8003150 <HAL_ADC_Start_DMA+0x1a4>)
 800302c:	4013      	ands	r3, r2
 800302e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a42      	ldr	r2, [pc, #264]	@ (8003144 <HAL_ADC_Start_DMA+0x198>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d002      	beq.n	8003046 <HAL_ADC_Start_DMA+0x9a>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	e000      	b.n	8003048 <HAL_ADC_Start_DMA+0x9c>
 8003046:	4b3e      	ldr	r3, [pc, #248]	@ (8003140 <HAL_ADC_Start_DMA+0x194>)
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	4293      	cmp	r3, r2
 800304e:	d002      	beq.n	8003056 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003072:	f023 0206 	bic.w	r2, r3, #6
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	665a      	str	r2, [r3, #100]	@ 0x64
 800307a:	e002      	b.n	8003082 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	4a33      	ldr	r2, [pc, #204]	@ (8003154 <HAL_ADC_Start_DMA+0x1a8>)
 8003088:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <HAL_ADC_Start_DMA+0x1ac>)
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	4a31      	ldr	r2, [pc, #196]	@ (800315c <HAL_ADC_Start_DMA+0x1b0>)
 8003098:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	221c      	movs	r2, #28
 80030a0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0210 	orr.w	r2, r2, #16
 80030b8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <HAL_ADC_Start_DMA+0x1b4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10f      	bne.n	80030e4 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7ff fbfe 	bl	80028d4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fbe9 	bl	80028b4 <LL_ADC_EnableDMAReq>
 80030e2:	e007      	b.n	80030f4 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7ff fbcd 	bl	800288e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3340      	adds	r3, #64	@ 0x40
 80030fe:	4619      	mov	r1, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f001 ff64 	bl	8004fd0 <HAL_DMA_Start_IT>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fd09 	bl	8002b28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003116:	e00d      	b.n	8003134 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003120:	e008      	b.n	8003134 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800312e:	e001      	b.n	8003134 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003130:	2302      	movs	r3, #2
 8003132:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40022000 	.word	0x40022000
 8003144:	40022100 	.word	0x40022100
 8003148:	40022300 	.word	0x40022300
 800314c:	58026300 	.word	0x58026300
 8003150:	fffff0fe 	.word	0xfffff0fe
 8003154:	08004189 	.word	0x08004189
 8003158:	08004261 	.word	0x08004261
 800315c:	0800427d 	.word	0x0800427d
 8003160:	58026000 	.word	0x58026000

08003164 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	@ 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a87      	ldr	r2, [pc, #540]	@ (80033a4 <HAL_ADC_IRQHandler+0x240>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_IRQHandler+0x30>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a86      	ldr	r2, [pc, #536]	@ (80033a8 <HAL_ADC_IRQHandler+0x244>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <HAL_ADC_IRQHandler+0x34>
 8003194:	4b85      	ldr	r3, [pc, #532]	@ (80033ac <HAL_ADC_IRQHandler+0x248>)
 8003196:	e000      	b.n	800319a <HAL_ADC_IRQHandler+0x36>
 8003198:	4b85      	ldr	r3, [pc, #532]	@ (80033b0 <HAL_ADC_IRQHandler+0x24c>)
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fc32 	bl	8002a04 <LL_ADC_GetMultimode>
 80031a0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <HAL_ADC_IRQHandler+0x78>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d012      	beq.n	80031dc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f001 f9aa 	bl	8004528 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2202      	movs	r2, #2
 80031da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_ADC_IRQHandler+0x8c>
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8083 	beq.w	8003302 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d07d      	beq.n	8003302 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003216:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff faf4 	bl	8002810 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d062      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5d      	ldr	r2, [pc, #372]	@ (80033a8 <HAL_ADC_IRQHandler+0x244>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d002      	beq.n	800323e <HAL_ADC_IRQHandler+0xda>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e000      	b.n	8003240 <HAL_ADC_IRQHandler+0xdc>
 800323e:	4b59      	ldr	r3, [pc, #356]	@ (80033a4 <HAL_ADC_IRQHandler+0x240>)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	4293      	cmp	r3, r2
 8003246:	d008      	beq.n	800325a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d002      	beq.n	800325a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b09      	cmp	r3, #9
 8003258:	d104      	bne.n	8003264 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	e00c      	b.n	800327e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_ADC_IRQHandler+0x244>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d002      	beq.n	8003274 <HAL_ADC_IRQHandler+0x110>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e000      	b.n	8003276 <HAL_ADC_IRQHandler+0x112>
 8003274:	4b4b      	ldr	r3, [pc, #300]	@ (80033a4 <HAL_ADC_IRQHandler+0x240>)
 8003276:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d135      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b08      	cmp	r3, #8
 8003294:	d12e      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc58 	bl	8002b50 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11a      	bne.n	80032dc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 020c 	bic.w	r2, r2, #12
 80032b4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d112      	bne.n	80032f4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80032da:	e00b      	b.n	80032f4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e0:	f043 0210 	orr.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fe f873 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	220c      	movs	r2, #12
 8003300:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_ADC_IRQHandler+0x1b2>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a0 	beq.w	8003462 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 809a 	beq.w	8003462 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fadc 	bl	8002908 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003350:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fa5a 	bl	8002810 <LL_ADC_REG_IsTriggerSourceSWStart>
 800335c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <HAL_ADC_IRQHandler+0x244>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d002      	beq.n	800336e <HAL_ADC_IRQHandler+0x20a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e000      	b.n	8003370 <HAL_ADC_IRQHandler+0x20c>
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <HAL_ADC_IRQHandler+0x240>)
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	4293      	cmp	r3, r2
 8003376:	d008      	beq.n	800338a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d002      	beq.n	800338a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b07      	cmp	r3, #7
 8003388:	d104      	bne.n	8003394 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	e014      	b.n	80033be <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a03      	ldr	r2, [pc, #12]	@ (80033a8 <HAL_ADC_IRQHandler+0x244>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00a      	beq.n	80033b4 <HAL_ADC_IRQHandler+0x250>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	e008      	b.n	80033b6 <HAL_ADC_IRQHandler+0x252>
 80033a4:	40022000 	.word	0x40022000
 80033a8:	40022100 	.word	0x40022100
 80033ac:	40022300 	.word	0x40022300
 80033b0:	58026300 	.word	0x58026300
 80033b4:	4b84      	ldr	r3, [pc, #528]	@ (80035c8 <HAL_ADC_IRQHandler+0x464>)
 80033b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d047      	beq.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_ADC_IRQHandler+0x27a>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03f      	beq.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d13a      	bne.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e8:	2b40      	cmp	r3, #64	@ 0x40
 80033ea:	d133      	bne.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d12e      	bne.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fbbb 	bl	8002b76 <LL_ADC_INJ_IsConversionOngoing>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003414:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d112      	bne.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	661a      	str	r2, [r3, #96]	@ 0x60
 800343a:	e00b      	b.n	8003454 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 f83f 	bl	80044d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2260      	movs	r2, #96	@ 0x60
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d011      	beq.n	8003490 <HAL_ADC_IRQHandler+0x32c>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00c      	beq.n	8003490 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8b2 	bl	80035ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d012      	beq.n	80034c0 <HAL_ADC_IRQHandler+0x35c>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f001 f825 	bl	8004500 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d012      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x38c>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f001 f817 	bl	8004514 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d043      	beq.n	8003582 <HAL_ADC_IRQHandler+0x41e>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d03e      	beq.n	8003582 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800350c:	2301      	movs	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003510:	e021      	b.n	8003556 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <HAL_ADC_IRQHandler+0x464>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_ADC_IRQHandler+0x3c8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <HAL_ADC_IRQHandler+0x468>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_ADC_IRQHandler+0x3cc>
 800352c:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <HAL_ADC_IRQHandler+0x46c>)
 800352e:	e000      	b.n	8003532 <HAL_ADC_IRQHandler+0x3ce>
 8003530:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <HAL_ADC_IRQHandler+0x470>)
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fa74 	bl	8002a20 <LL_ADC_GetMultiDMATransfer>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800353e:	2301      	movs	r3, #1
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
 8003542:	e008      	b.n	8003556 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003552:	2301      	movs	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10e      	bne.n	800357a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800356c:	f043 0202 	orr.w	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f843 	bl	8003600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2210      	movs	r2, #16
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <HAL_ADC_IRQHandler+0x45a>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a6:	f043 0208 	orr.w	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 ff97 	bl	80044ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80035be:	bf00      	nop
 80035c0:	3728      	adds	r7, #40	@ 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40022100 	.word	0x40022100
 80035d0:	40022300 	.word	0x40022300
 80035d4:	58026300 	.word	0x58026300

080035d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b0b9      	sub	sp, #228	@ 0xe4
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800362e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4aab      	ldr	r2, [pc, #684]	@ (80038e4 <HAL_ADC_ConfigChannel+0x2d0>)
 8003636:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x34>
 8003642:	2302      	movs	r3, #2
 8003644:	f000 bcfe 	b.w	8004044 <HAL_ADC_ConfigChannel+0xa30>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fa7b 	bl	8002b50 <LL_ADC_REG_IsConversionOngoing>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	f040 84e2 	bne.w	8004026 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db38      	blt.n	80036dc <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a9e      	ldr	r2, [pc, #632]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d033      	beq.n	80036dc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800367c:	2b00      	cmp	r3, #0
 800367e:	d108      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x7e>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2201      	movs	r2, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	e01d      	b.n	80036ce <HAL_ADC_ConfigChannel+0xba>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e004      	b.n	80036c4 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80036ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2201      	movs	r2, #1
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	69d1      	ldr	r1, [r2, #28]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	430b      	orrs	r3, r1
 80036da:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	f7ff f8a4 	bl	8002836 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fa2c 	bl	8002b50 <LL_ADC_REG_IsConversionOngoing>
 80036f8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fa38 	bl	8002b76 <LL_ADC_INJ_IsConversionOngoing>
 8003706:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800370a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 8270 	bne.w	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003714:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 826b 	bne.w	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6819      	ldr	r1, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	461a      	mov	r2, r3
 800372c:	f7ff f8ff 	bl	800292e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6c      	ldr	r2, [pc, #432]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2d4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10d      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003754:	e032      	b.n	80037bc <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003756:	4b65      	ldr	r3, [pc, #404]	@ (80038ec <HAL_ADC_ConfigChannel+0x2d8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800375e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003762:	d10b      	bne.n	800377c <HAL_ADC_ConfigChannel+0x168>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	e01d      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x1a4>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x18e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	089b      	lsrs	r3, r3, #2
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	e00a      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x1a4>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d048      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6919      	ldr	r1, [r3, #16]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d4:	f7fe ff2a 	bl	800262c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a42      	ldr	r2, [pc, #264]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2d4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d119      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6919      	ldr	r1, [r3, #16]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f7fe ffc2 	bl	8002778 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6919      	ldr	r1, [r3, #16]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_ADC_ConfigChannel+0x1f8>
 8003806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800380a:	e000      	b.n	800380e <HAL_ADC_ConfigChannel+0x1fa>
 800380c:	2300      	movs	r3, #0
 800380e:	461a      	mov	r2, r3
 8003810:	f7fe ff90 	bl	8002734 <LL_ADC_SetOffsetSaturation>
 8003814:	e1ee      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003824:	2b01      	cmp	r3, #1
 8003826:	d102      	bne.n	800382e <HAL_ADC_ConfigChannel+0x21a>
 8003828:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800382c:	e000      	b.n	8003830 <HAL_ADC_ConfigChannel+0x21c>
 800382e:	2300      	movs	r3, #0
 8003830:	461a      	mov	r2, r3
 8003832:	f7fe ff5d 	bl	80026f0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6919      	ldr	r1, [r3, #16]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	7e1b      	ldrb	r3, [r3, #24]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_ADC_ConfigChannel+0x238>
 8003846:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800384a:	e000      	b.n	800384e <HAL_ADC_ConfigChannel+0x23a>
 800384c:	2300      	movs	r3, #0
 800384e:	461a      	mov	r2, r3
 8003850:	f7fe ff34 	bl	80026bc <LL_ADC_SetDataRightShift>
 8003854:	e1ce      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a23      	ldr	r2, [pc, #140]	@ (80038e8 <HAL_ADC_ConfigChannel+0x2d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	f040 8181 	bne.w	8003b64 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe ff11 	bl	8002690 <LL_ADC_GetOffsetChannel>
 800386e:	4603      	mov	r3, r0
 8003870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <HAL_ADC_ConfigChannel+0x27a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe ff06 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003884:	4603      	mov	r3, r0
 8003886:	0e9b      	lsrs	r3, r3, #26
 8003888:	f003 021f 	and.w	r2, r3, #31
 800388c:	e01e      	b.n	80038cc <HAL_ADC_ConfigChannel+0x2b8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fefb 	bl	8002690 <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038a4:	fa93 f3a3 	rbit	r3, r3
 80038a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80038ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80038b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e004      	b.n	80038ca <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80038c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038c4:	fab3 f383 	clz	r3, r3
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x2dc>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0e9b      	lsrs	r3, r3, #26
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	e01e      	b.n	8003922 <HAL_ADC_ConfigChannel+0x30e>
 80038e4:	47ff0000 	.word	0x47ff0000
 80038e8:	58026000 	.word	0x58026000
 80038ec:	5c001000 	.word	0x5c001000
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800390c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003914:	2320      	movs	r3, #32
 8003916:	e004      	b.n	8003922 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	429a      	cmp	r2, r3
 8003924:	d106      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe ff44 	bl	80027bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fea8 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003940:	4603      	mov	r3, r0
 8003942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x34c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fe9d 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003956:	4603      	mov	r3, r0
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	f003 021f 	and.w	r2, r3, #31
 800395e:	e01e      	b.n	800399e <HAL_ADC_ConfigChannel+0x38a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fe92 	bl	8002690 <LL_ADC_GetOffsetChannel>
 800396c:	4603      	mov	r3, r0
 800396e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800397e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003982:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800398e:	2320      	movs	r3, #32
 8003990:	e004      	b.n	800399c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x3a2>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	e018      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x3d4>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80039ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80039d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	e004      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80039de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d106      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fee1 	bl	80027bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2102      	movs	r1, #2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe fe45 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x412>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fe3a 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	0e9b      	lsrs	r3, r3, #26
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	e01e      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x450>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fe2f 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003a54:	2320      	movs	r3, #32
 8003a56:	e004      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a5c:	fab3 f383 	clz	r3, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x468>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0e9b      	lsrs	r3, r3, #26
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	e014      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x492>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003a98:	2320      	movs	r3, #32
 8003a9a:	e004      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d106      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fe82 	bl	80027bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2103      	movs	r1, #3
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fde6 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x4d0>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2103      	movs	r1, #3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fddb 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	f003 021f 	and.w	r2, r3, #31
 8003ae2:	e017      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x500>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2103      	movs	r1, #3
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fdd0 	bl	8002690 <LL_ADC_GetOffsetChannel>
 8003af0:	4603      	mov	r3, r0
 8003af2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003afe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003b06:	2320      	movs	r3, #32
 8003b08:	e003      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x518>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	e011      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x53c>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003b44:	2320      	movs	r3, #32
 8003b46:	e003      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b4a:	fab3 f383 	clz	r3, r3
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d14f      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2103      	movs	r1, #3
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fe2d 	bl	80027bc <LL_ADC_SetOffsetState>
 8003b62:	e047      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	069b      	lsls	r3, r3, #26
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d107      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b86:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	069b      	lsls	r3, r3, #26
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d107      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003baa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	069b      	lsls	r3, r3, #26
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d107      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	069b      	lsls	r3, r3, #26
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d107      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bf2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe ff81 	bl	8002b00 <LL_ADC_IsEnabled>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f040 8219 	bne.w	8004038 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7fe feb6 	bl	8002984 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4aa1      	ldr	r2, [pc, #644]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x890>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	f040 812e 	bne.w	8003e80 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x638>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2b09      	cmp	r3, #9
 8003c42:	bf94      	ite	ls
 8003c44:	2301      	movls	r3, #1
 8003c46:	2300      	movhi	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e019      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x66c>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003c64:	2320      	movs	r3, #32
 8003c66:	e003      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003c68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	bf94      	ite	ls
 8003c7a:	2301      	movls	r3, #1
 8003c7c:	2300      	movhi	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d079      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x68c>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	3301      	adds	r3, #1
 8003c98:	069b      	lsls	r3, r3, #26
 8003c9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c9e:	e015      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x6b8>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e003      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	069b      	lsls	r3, r3, #26
 8003cc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x6d8>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0e9b      	lsrs	r3, r3, #26
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	e017      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x708>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003d04:	2320      	movs	r3, #32
 8003d06:	e003      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1c:	ea42 0103 	orr.w	r1, r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x72e>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	3301      	adds	r3, #1
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	051b      	lsls	r3, r3, #20
 8003d40:	e018      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x760>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e003      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d74:	430b      	orrs	r3, r1
 8003d76:	e07e      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x780>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	069b      	lsls	r3, r3, #26
 8003d8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d92:	e015      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x7ac>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	069b      	lsls	r3, r3, #26
 8003dbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x7cc>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	0e9b      	lsrs	r3, r3, #26
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	e017      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x7fc>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	61bb      	str	r3, [r7, #24]
  return result;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e003      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10d      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x828>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	0e9b      	lsrs	r3, r3, #26
 8003e26:	3301      	adds	r3, #1
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	3b1e      	subs	r3, #30
 8003e34:	051b      	lsls	r3, r3, #20
 8003e36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	e01b      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x860>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	60fb      	str	r3, [r7, #12]
  return result;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e003      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b1e      	subs	r3, #30
 8003e6e:	051b      	lsls	r3, r3, #20
 8003e70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e74:	430b      	orrs	r3, r1
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fe fd57 	bl	800292e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f280 80d7 	bge.w	8004038 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x894>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_ADC_ConfigChannel+0x88a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <HAL_ADC_ConfigChannel+0x898>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x8a0>
 8003e9e:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x89c>)
 8003ea0:	e009      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x8a2>
 8003ea2:	bf00      	nop
 8003ea4:	47ff0000 	.word	0x47ff0000
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40022100 	.word	0x40022100
 8003eb0:	40022300 	.word	0x40022300
 8003eb4:	4b65      	ldr	r3, [pc, #404]	@ (800404c <HAL_ADC_ConfigChannel+0xa38>)
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fbaa 	bl	8002610 <LL_ADC_GetCommonPathInternalCh>
 8003ebc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a62      	ldr	r2, [pc, #392]	@ (8004050 <HAL_ADC_ConfigChannel+0xa3c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_ADC_ConfigChannel+0x8c0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a61      	ldr	r2, [pc, #388]	@ (8004054 <HAL_ADC_ConfigChannel+0xa40>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x8de>
 8003ed4:	485e      	ldr	r0, [pc, #376]	@ (8004050 <HAL_ADC_ConfigChannel+0xa3c>)
 8003ed6:	f7fe fe13 	bl	8002b00 <LL_ADC_IsEnabled>
 8003eda:	4604      	mov	r4, r0
 8003edc:	485d      	ldr	r0, [pc, #372]	@ (8004054 <HAL_ADC_ConfigChannel+0xa40>)
 8003ede:	f7fe fe0f 	bl	8002b00 <LL_ADC_IsEnabled>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4323      	orrs	r3, r4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e008      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x8f0>
 8003ef2:	4859      	ldr	r0, [pc, #356]	@ (8004058 <HAL_ADC_ConfigChannel+0xa44>)
 8003ef4:	f7fe fe04 	bl	8002b00 <LL_ADC_IsEnabled>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8084 	beq.w	8004012 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a53      	ldr	r2, [pc, #332]	@ (800405c <HAL_ADC_ConfigChannel+0xa48>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d132      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x966>
 8003f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d12c      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4c      	ldr	r2, [pc, #304]	@ (8004058 <HAL_ADC_ConfigChannel+0xa44>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f040 8086 	bne.w	8004038 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a47      	ldr	r2, [pc, #284]	@ (8004050 <HAL_ADC_ConfigChannel+0xa3c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0x92c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a46      	ldr	r2, [pc, #280]	@ (8004054 <HAL_ADC_ConfigChannel+0xa40>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x930>
 8003f40:	4a47      	ldr	r2, [pc, #284]	@ (8004060 <HAL_ADC_ConfigChannel+0xa4c>)
 8003f42:	e000      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x932>
 8003f44:	4a41      	ldr	r2, [pc, #260]	@ (800404c <HAL_ADC_ConfigChannel+0xa38>)
 8003f46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f7fe fb4a 	bl	80025ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f56:	4b43      	ldr	r3, [pc, #268]	@ (8004064 <HAL_ADC_ConfigChannel+0xa50>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	4a42      	ldr	r2, [pc, #264]	@ (8004068 <HAL_ADC_ConfigChannel+0xa54>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	3301      	adds	r3, #1
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003f6a:	e002      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f9      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f78:	e05e      	b.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800406c <HAL_ADC_ConfigChannel+0xa58>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d120      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x9b2>
 8003f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11a      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a30      	ldr	r2, [pc, #192]	@ (8004058 <HAL_ADC_ConfigChannel+0xa44>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d14e      	bne.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <HAL_ADC_ConfigChannel+0xa3c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x99a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8004054 <HAL_ADC_ConfigChannel+0xa40>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x99e>
 8003fae:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <HAL_ADC_ConfigChannel+0xa4c>)
 8003fb0:	e000      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x9a0>
 8003fb2:	4a26      	ldr	r2, [pc, #152]	@ (800404c <HAL_ADC_ConfigChannel+0xa38>)
 8003fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f7fe fb13 	bl	80025ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fc4:	e038      	b.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a29      	ldr	r2, [pc, #164]	@ (8004070 <HAL_ADC_ConfigChannel+0xa5c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d133      	bne.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
 8003fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d12d      	bne.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8004058 <HAL_ADC_ConfigChannel+0xa44>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d128      	bne.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a19      	ldr	r2, [pc, #100]	@ (8004050 <HAL_ADC_ConfigChannel+0xa3c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_ConfigChannel+0x9e6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a17      	ldr	r2, [pc, #92]	@ (8004054 <HAL_ADC_ConfigChannel+0xa40>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x9ea>
 8003ffa:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <HAL_ADC_ConfigChannel+0xa4c>)
 8003ffc:	e000      	b.n	8004000 <HAL_ADC_ConfigChannel+0x9ec>
 8003ffe:	4a13      	ldr	r2, [pc, #76]	@ (800404c <HAL_ADC_ConfigChannel+0xa38>)
 8004000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fe faed 	bl	80025ea <LL_ADC_SetCommonPathInternalCh>
 8004010:	e012      	b.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004024:	e008      	b.n	8004038 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004040:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004044:	4618      	mov	r0, r3
 8004046:	37e4      	adds	r7, #228	@ 0xe4
 8004048:	46bd      	mov	sp, r7
 800404a:	bd90      	pop	{r4, r7, pc}
 800404c:	58026300 	.word	0x58026300
 8004050:	40022000 	.word	0x40022000
 8004054:	40022100 	.word	0x40022100
 8004058:	58026000 	.word	0x58026000
 800405c:	c7520000 	.word	0xc7520000
 8004060:	40022300 	.word	0x40022300
 8004064:	24000004 	.word	0x24000004
 8004068:	053e2d63 	.word	0x053e2d63
 800406c:	c3210000 	.word	0xc3210000
 8004070:	cb840000 	.word	0xcb840000

08004074 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fd3d 	bl	8002b00 <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d16e      	bne.n	800416a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	4b38      	ldr	r3, [pc, #224]	@ (8004174 <ADC_Enable+0x100>)
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409e:	f043 0210 	orr.w	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040aa:	f043 0201 	orr.w	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e05a      	b.n	800416c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fd0c 	bl	8002ad8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040c0:	f7fe fa50 	bl	8002564 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <ADC_Enable+0x104>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <ADC_Enable+0x66>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <ADC_Enable+0x108>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <ADC_Enable+0x6a>
 80040da:	4b29      	ldr	r3, [pc, #164]	@ (8004180 <ADC_Enable+0x10c>)
 80040dc:	e000      	b.n	80040e0 <ADC_Enable+0x6c>
 80040de:	4b29      	ldr	r3, [pc, #164]	@ (8004184 <ADC_Enable+0x110>)
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe fc8f 	bl	8002a04 <LL_ADC_GetMultimode>
 80040e6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a23      	ldr	r2, [pc, #140]	@ (800417c <ADC_Enable+0x108>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d002      	beq.n	80040f8 <ADC_Enable+0x84>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	e000      	b.n	80040fa <ADC_Enable+0x86>
 80040f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004178 <ADC_Enable+0x104>)
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d130      	bne.n	800416a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004108:	e028      	b.n	800415c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fcf6 	bl	8002b00 <LL_ADC_IsEnabled>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe fcda 	bl	8002ad8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004124:	f7fe fa1e 	bl	8002564 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d914      	bls.n	800415c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d00d      	beq.n	800415c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004144:	f043 0210 	orr.w	r2, r3, #16
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004150:	f043 0201 	orr.w	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e007      	b.n	800416c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d1cf      	bne.n	800410a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	8000003f 	.word	0x8000003f
 8004178:	40022000 	.word	0x40022000
 800417c:	40022100 	.word	0x40022100
 8004180:	40022300 	.word	0x40022300
 8004184:	58026300 	.word	0x58026300

08004188 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d14b      	bne.n	800423a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d021      	beq.n	8004200 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe fb25 	bl	8002810 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d032      	beq.n	8004232 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12b      	bne.n	8004232 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11f      	bne.n	8004232 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80041fe:	e018      	b.n	8004232 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d111      	bne.n	8004232 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004212:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422a:	f043 0201 	orr.w	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7fd f8d4 	bl	80013e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004238:	e00e      	b.n	8004258 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff f9da 	bl	8003600 <HAL_ADC_ErrorCallback>
}
 800424c:	e004      	b.n	8004258 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff f9b2 	bl	80035d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff f9ac 	bl	8003600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042a8:	bf00      	nop
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6c      	ldr	r2, [pc, #432]	@ (8004470 <ADC_ConfigureBoostMode+0x1c0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <ADC_ConfigureBoostMode+0x1c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004474 <ADC_ConfigureBoostMode+0x1c4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d109      	bne.n	80042e0 <ADC_ConfigureBoostMode+0x30>
 80042cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004478 <ADC_ConfigureBoostMode+0x1c8>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e008      	b.n	80042f2 <ADC_ConfigureBoostMode+0x42>
 80042e0:	4b66      	ldr	r3, [pc, #408]	@ (800447c <ADC_ConfigureBoostMode+0x1cc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01c      	beq.n	8004330 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80042f6:	f004 fdef 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 80042fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004304:	d010      	beq.n	8004328 <ADC_ConfigureBoostMode+0x78>
 8004306:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800430a:	d873      	bhi.n	80043f4 <ADC_ConfigureBoostMode+0x144>
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d002      	beq.n	8004318 <ADC_ConfigureBoostMode+0x68>
 8004312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004316:	d16d      	bne.n	80043f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	fbb2 f3f3 	udiv	r3, r2, r3
 8004324:	60fb      	str	r3, [r7, #12]
        break;
 8004326:	e068      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	60fb      	str	r3, [r7, #12]
        break;
 800432e:	e064      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004330:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	f005 ffca 	bl	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800433c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004346:	d051      	beq.n	80043ec <ADC_ConfigureBoostMode+0x13c>
 8004348:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800434c:	d854      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 800434e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004352:	d047      	beq.n	80043e4 <ADC_ConfigureBoostMode+0x134>
 8004354:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004358:	d84e      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 800435a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800435e:	d03d      	beq.n	80043dc <ADC_ConfigureBoostMode+0x12c>
 8004360:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004364:	d848      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 8004366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800436a:	d033      	beq.n	80043d4 <ADC_ConfigureBoostMode+0x124>
 800436c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004370:	d842      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 8004372:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004376:	d029      	beq.n	80043cc <ADC_ConfigureBoostMode+0x11c>
 8004378:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800437c:	d83c      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 800437e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004382:	d01a      	beq.n	80043ba <ADC_ConfigureBoostMode+0x10a>
 8004384:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004388:	d836      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 800438a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800438e:	d014      	beq.n	80043ba <ADC_ConfigureBoostMode+0x10a>
 8004390:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004394:	d830      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 8004396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800439a:	d00e      	beq.n	80043ba <ADC_ConfigureBoostMode+0x10a>
 800439c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a0:	d82a      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 80043a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043a6:	d008      	beq.n	80043ba <ADC_ConfigureBoostMode+0x10a>
 80043a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043ac:	d824      	bhi.n	80043f8 <ADC_ConfigureBoostMode+0x148>
 80043ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043b2:	d002      	beq.n	80043ba <ADC_ConfigureBoostMode+0x10a>
 80043b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80043b8:	d11e      	bne.n	80043f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	0c9b      	lsrs	r3, r3, #18
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	60fb      	str	r3, [r7, #12]
        break;
 80043ca:	e016      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
        break;
 80043d2:	e012      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	60fb      	str	r3, [r7, #12]
        break;
 80043da:	e00e      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	60fb      	str	r3, [r7, #12]
        break;
 80043e2:	e00a      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	09db      	lsrs	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
        break;
 80043ea:	e006      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	0a1b      	lsrs	r3, r3, #8
 80043f0:	60fb      	str	r3, [r7, #12]
        break;
 80043f2:	e002      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80043f8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a1f      	ldr	r2, [pc, #124]	@ (8004480 <ADC_ConfigureBoostMode+0x1d0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d808      	bhi.n	800441a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004416:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004418:	e025      	b.n	8004466 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a19      	ldr	r2, [pc, #100]	@ (8004484 <ADC_ConfigureBoostMode+0x1d4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d80a      	bhi.n	8004438 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004434:	609a      	str	r2, [r3, #8]
}
 8004436:	e016      	b.n	8004466 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a13      	ldr	r2, [pc, #76]	@ (8004488 <ADC_ConfigureBoostMode+0x1d8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d80a      	bhi.n	8004456 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	e007      	b.n	8004466 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004464:	609a      	str	r2, [r3, #8]
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40022000 	.word	0x40022000
 8004474:	40022100 	.word	0x40022100
 8004478:	40022300 	.word	0x40022300
 800447c:	58026300 	.word	0x58026300
 8004480:	005f5e10 	.word	0x005f5e10
 8004484:	00bebc20 	.word	0x00bebc20
 8004488:	017d7840 	.word	0x017d7840

0800448c <LL_ADC_IsEnabled>:
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <LL_ADC_IsEnabled+0x18>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <LL_ADC_IsEnabled+0x1a>
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d101      	bne.n	80044ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b0a3      	sub	sp, #140	@ 0x8c
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004556:	2302      	movs	r3, #2
 8004558:	e0c1      	b.n	80046de <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004566:	2300      	movs	r3, #0
 8004568:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5e      	ldr	r2, [pc, #376]	@ (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d102      	bne.n	800457a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004574:	4b5d      	ldr	r3, [pc, #372]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e001      	b.n	800457e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0a0      	b.n	80046de <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff ff87 	bl	80044b2 <LL_ADC_REG_IsConversionOngoing>
 80045a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff ff80 	bl	80044b2 <LL_ADC_REG_IsConversionOngoing>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f040 8081 	bne.w	80046bc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d17c      	bne.n	80046bc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a48      	ldr	r2, [pc, #288]	@ (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a46      	ldr	r2, [pc, #280]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80045d6:	4b46      	ldr	r3, [pc, #280]	@ (80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80045d8:	e000      	b.n	80045dc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80045da:	4b46      	ldr	r3, [pc, #280]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80045dc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d039      	beq.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80045e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a3a      	ldr	r2, [pc, #232]	@ (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a39      	ldr	r2, [pc, #228]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10e      	bne.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800460c:	4836      	ldr	r0, [pc, #216]	@ (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800460e:	f7ff ff3d 	bl	800448c <LL_ADC_IsEnabled>
 8004612:	4604      	mov	r4, r0
 8004614:	4835      	ldr	r0, [pc, #212]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004616:	f7ff ff39 	bl	800448c <LL_ADC_IsEnabled>
 800461a:	4603      	mov	r3, r0
 800461c:	4323      	orrs	r3, r4
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e008      	b.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800462a:	4833      	ldr	r0, [pc, #204]	@ (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800462c:	f7ff ff2e 	bl	800448c <LL_ADC_IsEnabled>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d047      	beq.n	80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	4b2d      	ldr	r3, [pc, #180]	@ (80046fc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004646:	4013      	ands	r3, r2
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	6811      	ldr	r1, [r2, #0]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	6892      	ldr	r2, [r2, #8]
 8004650:	430a      	orrs	r2, r1
 8004652:	431a      	orrs	r2, r3
 8004654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004656:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004658:	e03a      	b.n	80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800465a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004664:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1f      	ldr	r2, [pc, #124]	@ (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1d      	ldr	r2, [pc, #116]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10e      	bne.n	8004698 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800467a:	481b      	ldr	r0, [pc, #108]	@ (80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800467c:	f7ff ff06 	bl	800448c <LL_ADC_IsEnabled>
 8004680:	4604      	mov	r4, r0
 8004682:	481a      	ldr	r0, [pc, #104]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004684:	f7ff ff02 	bl	800448c <LL_ADC_IsEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	4323      	orrs	r3, r4
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e008      	b.n	80046aa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004698:	4817      	ldr	r0, [pc, #92]	@ (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800469a:	f7ff fef7 	bl	800448c <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046ba:	e009      	b.n	80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80046ce:	e000      	b.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80046de:	4618      	mov	r0, r3
 80046e0:	378c      	adds	r7, #140	@ 0x8c
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40022000 	.word	0x40022000
 80046ec:	40022100 	.word	0x40022100
 80046f0:	40022300 	.word	0x40022300
 80046f4:	58026300 	.word	0x58026300
 80046f8:	58026000 	.word	0x58026000
 80046fc:	fffff0e0 	.word	0xfffff0e0

08004700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <__NVIC_SetPriorityGrouping+0x40>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800471c:	4013      	ands	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004728:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <__NVIC_SetPriorityGrouping+0x44>)
 800472a:	4313      	orrs	r3, r2
 800472c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800472e:	4a04      	ldr	r2, [pc, #16]	@ (8004740 <__NVIC_SetPriorityGrouping+0x40>)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	60d3      	str	r3, [r2, #12]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000ed00 	.word	0xe000ed00
 8004744:	05fa0000 	.word	0x05fa0000

08004748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <__NVIC_GetPriorityGrouping+0x18>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	0a1b      	lsrs	r3, r3, #8
 8004752:	f003 0307 	and.w	r3, r3, #7
}
 8004756:	4618      	mov	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800476e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004772:	2b00      	cmp	r3, #0
 8004774:	db0b      	blt.n	800478e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	f003 021f 	and.w	r2, r3, #31
 800477c:	4907      	ldr	r1, [pc, #28]	@ (800479c <__NVIC_EnableIRQ+0x38>)
 800477e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2001      	movs	r0, #1
 8004786:	fa00 f202 	lsl.w	r2, r0, r2
 800478a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	e000e100 	.word	0xe000e100

080047a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	6039      	str	r1, [r7, #0]
 80047aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80047ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db0a      	blt.n	80047ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	490c      	ldr	r1, [pc, #48]	@ (80047ec <__NVIC_SetPriority+0x4c>)
 80047ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	440b      	add	r3, r1
 80047c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047c8:	e00a      	b.n	80047e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4908      	ldr	r1, [pc, #32]	@ (80047f0 <__NVIC_SetPriority+0x50>)
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3b04      	subs	r3, #4
 80047d8:	0112      	lsls	r2, r2, #4
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	440b      	add	r3, r1
 80047de:	761a      	strb	r2, [r3, #24]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000e100 	.word	0xe000e100
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	@ 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f1c3 0307 	rsb	r3, r3, #7
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf28      	it	cs
 8004812:	2304      	movcs	r3, #4
 8004814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3304      	adds	r3, #4
 800481a:	2b06      	cmp	r3, #6
 800481c:	d902      	bls.n	8004824 <NVIC_EncodePriority+0x30>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3b03      	subs	r3, #3
 8004822:	e000      	b.n	8004826 <NVIC_EncodePriority+0x32>
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004828:	f04f 32ff 	mov.w	r2, #4294967295
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	401a      	ands	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800483c:	f04f 31ff 	mov.w	r1, #4294967295
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	fa01 f303 	lsl.w	r3, r1, r3
 8004846:	43d9      	mvns	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800484c:	4313      	orrs	r3, r2
         );
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	@ 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800486c:	d301      	bcc.n	8004872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800486e:	2301      	movs	r3, #1
 8004870:	e00f      	b.n	8004892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004872:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <SysTick_Config+0x40>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800487a:	210f      	movs	r1, #15
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	f7ff ff8e 	bl	80047a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <SysTick_Config+0x40>)
 8004886:	2200      	movs	r2, #0
 8004888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488a:	4b04      	ldr	r3, [pc, #16]	@ (800489c <SysTick_Config+0x40>)
 800488c:	2207      	movs	r2, #7
 800488e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000e010 	.word	0xe000e010

080048a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ff29 	bl	8004700 <__NVIC_SetPriorityGrouping>
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b086      	sub	sp, #24
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	4603      	mov	r3, r0
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
 80048c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048c4:	f7ff ff40 	bl	8004748 <__NVIC_GetPriorityGrouping>
 80048c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	f7ff ff90 	bl	80047f4 <NVIC_EncodePriority>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff ff5f 	bl	80047a0 <__NVIC_SetPriority>
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff33 	bl	8004764 <__NVIC_EnableIRQ>
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ffa4 	bl	800485c <SysTick_Config>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004928:	f7fd fe1c 	bl	8002564 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e312      	b.n	8004f5e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a66      	ldr	r2, [pc, #408]	@ (8004ad8 <HAL_DMA_Init+0x1b8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d04a      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a65      	ldr	r2, [pc, #404]	@ (8004adc <HAL_DMA_Init+0x1bc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d045      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a63      	ldr	r2, [pc, #396]	@ (8004ae0 <HAL_DMA_Init+0x1c0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d040      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a62      	ldr	r2, [pc, #392]	@ (8004ae4 <HAL_DMA_Init+0x1c4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d03b      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a60      	ldr	r2, [pc, #384]	@ (8004ae8 <HAL_DMA_Init+0x1c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d036      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a5f      	ldr	r2, [pc, #380]	@ (8004aec <HAL_DMA_Init+0x1cc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d031      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5d      	ldr	r2, [pc, #372]	@ (8004af0 <HAL_DMA_Init+0x1d0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02c      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5c      	ldr	r2, [pc, #368]	@ (8004af4 <HAL_DMA_Init+0x1d4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d027      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5a      	ldr	r2, [pc, #360]	@ (8004af8 <HAL_DMA_Init+0x1d8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d022      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a59      	ldr	r2, [pc, #356]	@ (8004afc <HAL_DMA_Init+0x1dc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d01d      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a57      	ldr	r2, [pc, #348]	@ (8004b00 <HAL_DMA_Init+0x1e0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a56      	ldr	r2, [pc, #344]	@ (8004b04 <HAL_DMA_Init+0x1e4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a54      	ldr	r2, [pc, #336]	@ (8004b08 <HAL_DMA_Init+0x1e8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a53      	ldr	r2, [pc, #332]	@ (8004b0c <HAL_DMA_Init+0x1ec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a51      	ldr	r2, [pc, #324]	@ (8004b10 <HAL_DMA_Init+0x1f0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_DMA_Init+0xb8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a50      	ldr	r2, [pc, #320]	@ (8004b14 <HAL_DMA_Init+0x1f4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d101      	bne.n	80049dc <HAL_DMA_Init+0xbc>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <HAL_DMA_Init+0xbe>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 813c 	beq.w	8004c5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a37      	ldr	r2, [pc, #220]	@ (8004ad8 <HAL_DMA_Init+0x1b8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d04a      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a36      	ldr	r2, [pc, #216]	@ (8004adc <HAL_DMA_Init+0x1bc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d045      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a34      	ldr	r2, [pc, #208]	@ (8004ae0 <HAL_DMA_Init+0x1c0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d040      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a33      	ldr	r2, [pc, #204]	@ (8004ae4 <HAL_DMA_Init+0x1c4>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d03b      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a31      	ldr	r2, [pc, #196]	@ (8004ae8 <HAL_DMA_Init+0x1c8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d036      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a30      	ldr	r2, [pc, #192]	@ (8004aec <HAL_DMA_Init+0x1cc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d031      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2e      	ldr	r2, [pc, #184]	@ (8004af0 <HAL_DMA_Init+0x1d0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d02c      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004af4 <HAL_DMA_Init+0x1d4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d027      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2b      	ldr	r2, [pc, #172]	@ (8004af8 <HAL_DMA_Init+0x1d8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d022      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2a      	ldr	r2, [pc, #168]	@ (8004afc <HAL_DMA_Init+0x1dc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d01d      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a28      	ldr	r2, [pc, #160]	@ (8004b00 <HAL_DMA_Init+0x1e0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <HAL_DMA_Init+0x1e4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a25      	ldr	r2, [pc, #148]	@ (8004b08 <HAL_DMA_Init+0x1e8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a24      	ldr	r2, [pc, #144]	@ (8004b0c <HAL_DMA_Init+0x1ec>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a22      	ldr	r2, [pc, #136]	@ (8004b10 <HAL_DMA_Init+0x1f0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_DMA_Init+0x174>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a21      	ldr	r2, [pc, #132]	@ (8004b14 <HAL_DMA_Init+0x1f4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d108      	bne.n	8004aa6 <HAL_DMA_Init+0x186>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e007      	b.n	8004ab6 <HAL_DMA_Init+0x196>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ab6:	e02f      	b.n	8004b18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ab8:	f7fd fd54 	bl	8002564 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	d928      	bls.n	8004b18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e242      	b.n	8004f5e <HAL_DMA_Init+0x63e>
 8004ad8:	40020010 	.word	0x40020010
 8004adc:	40020028 	.word	0x40020028
 8004ae0:	40020040 	.word	0x40020040
 8004ae4:	40020058 	.word	0x40020058
 8004ae8:	40020070 	.word	0x40020070
 8004aec:	40020088 	.word	0x40020088
 8004af0:	400200a0 	.word	0x400200a0
 8004af4:	400200b8 	.word	0x400200b8
 8004af8:	40020410 	.word	0x40020410
 8004afc:	40020428 	.word	0x40020428
 8004b00:	40020440 	.word	0x40020440
 8004b04:	40020458 	.word	0x40020458
 8004b08:	40020470 	.word	0x40020470
 8004b0c:	40020488 	.word	0x40020488
 8004b10:	400204a0 	.word	0x400204a0
 8004b14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1c8      	bne.n	8004ab8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4b83      	ldr	r3, [pc, #524]	@ (8004d40 <HAL_DMA_Init+0x420>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d107      	bne.n	8004b7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b74:	4313      	orrs	r3, r2
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b28      	cmp	r3, #40	@ 0x28
 8004b82:	d903      	bls.n	8004b8c <HAL_DMA_Init+0x26c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b8a:	d91f      	bls.n	8004bcc <HAL_DMA_Init+0x2ac>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b92:	d903      	bls.n	8004b9c <HAL_DMA_Init+0x27c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b42      	cmp	r3, #66	@ 0x42
 8004b9a:	d917      	bls.n	8004bcc <HAL_DMA_Init+0x2ac>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b46      	cmp	r3, #70	@ 0x46
 8004ba2:	d903      	bls.n	8004bac <HAL_DMA_Init+0x28c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b48      	cmp	r3, #72	@ 0x48
 8004baa:	d90f      	bls.n	8004bcc <HAL_DMA_Init+0x2ac>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b4e      	cmp	r3, #78	@ 0x4e
 8004bb2:	d903      	bls.n	8004bbc <HAL_DMA_Init+0x29c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b52      	cmp	r3, #82	@ 0x52
 8004bba:	d907      	bls.n	8004bcc <HAL_DMA_Init+0x2ac>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b73      	cmp	r3, #115	@ 0x73
 8004bc2:	d905      	bls.n	8004bd0 <HAL_DMA_Init+0x2b0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b77      	cmp	r3, #119	@ 0x77
 8004bca:	d801      	bhi.n	8004bd0 <HAL_DMA_Init+0x2b0>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_Init+0x2b2>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bdc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 0307 	bic.w	r3, r3, #7
 8004bf4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d117      	bne.n	8004c38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00e      	beq.n	8004c38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 fdca 	bl	80067b4 <DMA_CheckFifoParam>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2240      	movs	r2, #64	@ 0x40
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e192      	b.n	8004f5e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fd05 	bl	8006650 <DMA_CalcBaseAndBitshift>
 8004c46:	4603      	mov	r3, r0
 8004c48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	223f      	movs	r2, #63	@ 0x3f
 8004c54:	409a      	lsls	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	e0c8      	b.n	8004dee <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a38      	ldr	r2, [pc, #224]	@ (8004d44 <HAL_DMA_Init+0x424>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a37      	ldr	r2, [pc, #220]	@ (8004d48 <HAL_DMA_Init+0x428>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a35      	ldr	r2, [pc, #212]	@ (8004d4c <HAL_DMA_Init+0x42c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a34      	ldr	r2, [pc, #208]	@ (8004d50 <HAL_DMA_Init+0x430>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a32      	ldr	r2, [pc, #200]	@ (8004d54 <HAL_DMA_Init+0x434>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a31      	ldr	r2, [pc, #196]	@ (8004d58 <HAL_DMA_Init+0x438>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d5c <HAL_DMA_Init+0x43c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_Init+0x38c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8004d60 <HAL_DMA_Init+0x440>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_DMA_Init+0x390>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_DMA_Init+0x392>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8092 	beq.w	8004ddc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a21      	ldr	r2, [pc, #132]	@ (8004d44 <HAL_DMA_Init+0x424>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d021      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a20      	ldr	r2, [pc, #128]	@ (8004d48 <HAL_DMA_Init+0x428>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d01c      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d4c <HAL_DMA_Init+0x42c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d017      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1d      	ldr	r2, [pc, #116]	@ (8004d50 <HAL_DMA_Init+0x430>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d012      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <HAL_DMA_Init+0x434>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1a      	ldr	r2, [pc, #104]	@ (8004d58 <HAL_DMA_Init+0x438>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d008      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	@ (8004d5c <HAL_DMA_Init+0x43c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <HAL_DMA_Init+0x3e6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <HAL_DMA_Init+0x440>)
 8004d04:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <HAL_DMA_Init+0x444>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d01c      	beq.n	8004d68 <HAL_DMA_Init+0x448>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b80      	cmp	r3, #128	@ 0x80
 8004d34:	d102      	bne.n	8004d3c <HAL_DMA_Init+0x41c>
 8004d36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d3a:	e016      	b.n	8004d6a <HAL_DMA_Init+0x44a>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e014      	b.n	8004d6a <HAL_DMA_Init+0x44a>
 8004d40:	fe10803f 	.word	0xfe10803f
 8004d44:	58025408 	.word	0x58025408
 8004d48:	5802541c 	.word	0x5802541c
 8004d4c:	58025430 	.word	0x58025430
 8004d50:	58025444 	.word	0x58025444
 8004d54:	58025458 	.word	0x58025458
 8004d58:	5802546c 	.word	0x5802546c
 8004d5c:	58025480 	.word	0x58025480
 8004d60:	58025494 	.word	0x58025494
 8004d64:	fffe000f 	.word	0xfffe000f
 8004d68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68d2      	ldr	r2, [r2, #12]
 8004d6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b6e      	ldr	r3, [pc, #440]	@ (8004f68 <HAL_DMA_Init+0x648>)
 8004db0:	4413      	add	r3, r2
 8004db2:	4a6e      	ldr	r2, [pc, #440]	@ (8004f6c <HAL_DMA_Init+0x64c>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	009a      	lsls	r2, r3, #2
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fc45 	bl	8006650 <DMA_CalcBaseAndBitshift>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e008      	b.n	8004dee <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2240      	movs	r2, #64	@ 0x40
 8004de0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2203      	movs	r2, #3
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e0b7      	b.n	8004f5e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a5f      	ldr	r2, [pc, #380]	@ (8004f70 <HAL_DMA_Init+0x650>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d072      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f74 <HAL_DMA_Init+0x654>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d06d      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a5c      	ldr	r2, [pc, #368]	@ (8004f78 <HAL_DMA_Init+0x658>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d068      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a5a      	ldr	r2, [pc, #360]	@ (8004f7c <HAL_DMA_Init+0x65c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d063      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a59      	ldr	r2, [pc, #356]	@ (8004f80 <HAL_DMA_Init+0x660>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d05e      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a57      	ldr	r2, [pc, #348]	@ (8004f84 <HAL_DMA_Init+0x664>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d059      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a56      	ldr	r2, [pc, #344]	@ (8004f88 <HAL_DMA_Init+0x668>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d054      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a54      	ldr	r2, [pc, #336]	@ (8004f8c <HAL_DMA_Init+0x66c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d04f      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a53      	ldr	r2, [pc, #332]	@ (8004f90 <HAL_DMA_Init+0x670>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a51      	ldr	r2, [pc, #324]	@ (8004f94 <HAL_DMA_Init+0x674>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a50      	ldr	r2, [pc, #320]	@ (8004f98 <HAL_DMA_Init+0x678>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a4e      	ldr	r2, [pc, #312]	@ (8004f9c <HAL_DMA_Init+0x67c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a4d      	ldr	r2, [pc, #308]	@ (8004fa0 <HAL_DMA_Init+0x680>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a4b      	ldr	r2, [pc, #300]	@ (8004fa4 <HAL_DMA_Init+0x684>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa8 <HAL_DMA_Init+0x688>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a48      	ldr	r2, [pc, #288]	@ (8004fac <HAL_DMA_Init+0x68c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a47      	ldr	r2, [pc, #284]	@ (8004fb0 <HAL_DMA_Init+0x690>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a45      	ldr	r2, [pc, #276]	@ (8004fb4 <HAL_DMA_Init+0x694>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a44      	ldr	r2, [pc, #272]	@ (8004fb8 <HAL_DMA_Init+0x698>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a42      	ldr	r2, [pc, #264]	@ (8004fbc <HAL_DMA_Init+0x69c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a41      	ldr	r2, [pc, #260]	@ (8004fc0 <HAL_DMA_Init+0x6a0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc4 <HAL_DMA_Init+0x6a4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3e      	ldr	r2, [pc, #248]	@ (8004fc8 <HAL_DMA_Init+0x6a8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_Init+0x5be>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8004fcc <HAL_DMA_Init+0x6ac>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_DMA_Init+0x5c2>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_DMA_Init+0x5c4>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d032      	beq.n	8004f4e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 fcdf 	bl	80068ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d102      	bne.n	8004efc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_DMA_Init+0x61c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d80c      	bhi.n	8004f3c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fd5c 	bl	80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	e008      	b.n	8004f4e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	a7fdabf8 	.word	0xa7fdabf8
 8004f6c:	cccccccd 	.word	0xcccccccd
 8004f70:	40020010 	.word	0x40020010
 8004f74:	40020028 	.word	0x40020028
 8004f78:	40020040 	.word	0x40020040
 8004f7c:	40020058 	.word	0x40020058
 8004f80:	40020070 	.word	0x40020070
 8004f84:	40020088 	.word	0x40020088
 8004f88:	400200a0 	.word	0x400200a0
 8004f8c:	400200b8 	.word	0x400200b8
 8004f90:	40020410 	.word	0x40020410
 8004f94:	40020428 	.word	0x40020428
 8004f98:	40020440 	.word	0x40020440
 8004f9c:	40020458 	.word	0x40020458
 8004fa0:	40020470 	.word	0x40020470
 8004fa4:	40020488 	.word	0x40020488
 8004fa8:	400204a0 	.word	0x400204a0
 8004fac:	400204b8 	.word	0x400204b8
 8004fb0:	58025408 	.word	0x58025408
 8004fb4:	5802541c 	.word	0x5802541c
 8004fb8:	58025430 	.word	0x58025430
 8004fbc:	58025444 	.word	0x58025444
 8004fc0:	58025458 	.word	0x58025458
 8004fc4:	5802546c 	.word	0x5802546c
 8004fc8:	58025480 	.word	0x58025480
 8004fcc:	58025494 	.word	0x58025494

08004fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e226      	b.n	800543a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_DMA_Start_IT+0x2a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e21f      	b.n	800543a <HAL_DMA_Start_IT+0x46a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	f040 820a 	bne.w	8005424 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a68      	ldr	r2, [pc, #416]	@ (80051c4 <HAL_DMA_Start_IT+0x1f4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d04a      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a66      	ldr	r2, [pc, #408]	@ (80051c8 <HAL_DMA_Start_IT+0x1f8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d045      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a65      	ldr	r2, [pc, #404]	@ (80051cc <HAL_DMA_Start_IT+0x1fc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d040      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a63      	ldr	r2, [pc, #396]	@ (80051d0 <HAL_DMA_Start_IT+0x200>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d03b      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a62      	ldr	r2, [pc, #392]	@ (80051d4 <HAL_DMA_Start_IT+0x204>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d036      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a60      	ldr	r2, [pc, #384]	@ (80051d8 <HAL_DMA_Start_IT+0x208>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d031      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5f      	ldr	r2, [pc, #380]	@ (80051dc <HAL_DMA_Start_IT+0x20c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d02c      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a5d      	ldr	r2, [pc, #372]	@ (80051e0 <HAL_DMA_Start_IT+0x210>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d027      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a5c      	ldr	r2, [pc, #368]	@ (80051e4 <HAL_DMA_Start_IT+0x214>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d022      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5a      	ldr	r2, [pc, #360]	@ (80051e8 <HAL_DMA_Start_IT+0x218>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01d      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a59      	ldr	r2, [pc, #356]	@ (80051ec <HAL_DMA_Start_IT+0x21c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d018      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a57      	ldr	r2, [pc, #348]	@ (80051f0 <HAL_DMA_Start_IT+0x220>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a56      	ldr	r2, [pc, #344]	@ (80051f4 <HAL_DMA_Start_IT+0x224>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a54      	ldr	r2, [pc, #336]	@ (80051f8 <HAL_DMA_Start_IT+0x228>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a53      	ldr	r2, [pc, #332]	@ (80051fc <HAL_DMA_Start_IT+0x22c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_DMA_Start_IT+0xee>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a51      	ldr	r2, [pc, #324]	@ (8005200 <HAL_DMA_Start_IT+0x230>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <HAL_DMA_Start_IT+0x100>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e007      	b.n	80050e0 <HAL_DMA_Start_IT+0x110>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f001 f906 	bl	80062f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a34      	ldr	r2, [pc, #208]	@ (80051c4 <HAL_DMA_Start_IT+0x1f4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d04a      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a33      	ldr	r2, [pc, #204]	@ (80051c8 <HAL_DMA_Start_IT+0x1f8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d045      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a31      	ldr	r2, [pc, #196]	@ (80051cc <HAL_DMA_Start_IT+0x1fc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d040      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a30      	ldr	r2, [pc, #192]	@ (80051d0 <HAL_DMA_Start_IT+0x200>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d03b      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2e      	ldr	r2, [pc, #184]	@ (80051d4 <HAL_DMA_Start_IT+0x204>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d036      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2d      	ldr	r2, [pc, #180]	@ (80051d8 <HAL_DMA_Start_IT+0x208>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d031      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2b      	ldr	r2, [pc, #172]	@ (80051dc <HAL_DMA_Start_IT+0x20c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02c      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2a      	ldr	r2, [pc, #168]	@ (80051e0 <HAL_DMA_Start_IT+0x210>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d027      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a28      	ldr	r2, [pc, #160]	@ (80051e4 <HAL_DMA_Start_IT+0x214>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a27      	ldr	r2, [pc, #156]	@ (80051e8 <HAL_DMA_Start_IT+0x218>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d01d      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a25      	ldr	r2, [pc, #148]	@ (80051ec <HAL_DMA_Start_IT+0x21c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a24      	ldr	r2, [pc, #144]	@ (80051f0 <HAL_DMA_Start_IT+0x220>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a22      	ldr	r2, [pc, #136]	@ (80051f4 <HAL_DMA_Start_IT+0x224>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a21      	ldr	r2, [pc, #132]	@ (80051f8 <HAL_DMA_Start_IT+0x228>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <HAL_DMA_Start_IT+0x22c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_DMA_Start_IT+0x1bc>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <HAL_DMA_Start_IT+0x230>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d101      	bne.n	8005190 <HAL_DMA_Start_IT+0x1c0>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <HAL_DMA_Start_IT+0x1c2>
 8005190:	2300      	movs	r3, #0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d036      	beq.n	8005204 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 021e 	bic.w	r2, r3, #30
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0216 	orr.w	r2, r2, #22
 80051a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03e      	beq.n	8005230 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0208 	orr.w	r2, r2, #8
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e035      	b.n	8005230 <HAL_DMA_Start_IT+0x260>
 80051c4:	40020010 	.word	0x40020010
 80051c8:	40020028 	.word	0x40020028
 80051cc:	40020040 	.word	0x40020040
 80051d0:	40020058 	.word	0x40020058
 80051d4:	40020070 	.word	0x40020070
 80051d8:	40020088 	.word	0x40020088
 80051dc:	400200a0 	.word	0x400200a0
 80051e0:	400200b8 	.word	0x400200b8
 80051e4:	40020410 	.word	0x40020410
 80051e8:	40020428 	.word	0x40020428
 80051ec:	40020440 	.word	0x40020440
 80051f0:	40020458 	.word	0x40020458
 80051f4:	40020470 	.word	0x40020470
 80051f8:	40020488 	.word	0x40020488
 80051fc:	400204a0 	.word	0x400204a0
 8005200:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 020e 	bic.w	r2, r3, #14
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 020a 	orr.w	r2, r2, #10
 8005216:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d007      	beq.n	8005230 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0204 	orr.w	r2, r2, #4
 800522e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a83      	ldr	r2, [pc, #524]	@ (8005444 <HAL_DMA_Start_IT+0x474>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d072      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a82      	ldr	r2, [pc, #520]	@ (8005448 <HAL_DMA_Start_IT+0x478>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d06d      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a80      	ldr	r2, [pc, #512]	@ (800544c <HAL_DMA_Start_IT+0x47c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d068      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a7f      	ldr	r2, [pc, #508]	@ (8005450 <HAL_DMA_Start_IT+0x480>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d063      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a7d      	ldr	r2, [pc, #500]	@ (8005454 <HAL_DMA_Start_IT+0x484>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d05e      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7c      	ldr	r2, [pc, #496]	@ (8005458 <HAL_DMA_Start_IT+0x488>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d059      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a7a      	ldr	r2, [pc, #488]	@ (800545c <HAL_DMA_Start_IT+0x48c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d054      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a79      	ldr	r2, [pc, #484]	@ (8005460 <HAL_DMA_Start_IT+0x490>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d04f      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a77      	ldr	r2, [pc, #476]	@ (8005464 <HAL_DMA_Start_IT+0x494>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a76      	ldr	r2, [pc, #472]	@ (8005468 <HAL_DMA_Start_IT+0x498>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a74      	ldr	r2, [pc, #464]	@ (800546c <HAL_DMA_Start_IT+0x49c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a73      	ldr	r2, [pc, #460]	@ (8005470 <HAL_DMA_Start_IT+0x4a0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a71      	ldr	r2, [pc, #452]	@ (8005474 <HAL_DMA_Start_IT+0x4a4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a70      	ldr	r2, [pc, #448]	@ (8005478 <HAL_DMA_Start_IT+0x4a8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6e      	ldr	r2, [pc, #440]	@ (800547c <HAL_DMA_Start_IT+0x4ac>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6d      	ldr	r2, [pc, #436]	@ (8005480 <HAL_DMA_Start_IT+0x4b0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a6b      	ldr	r2, [pc, #428]	@ (8005484 <HAL_DMA_Start_IT+0x4b4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6a      	ldr	r2, [pc, #424]	@ (8005488 <HAL_DMA_Start_IT+0x4b8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a68      	ldr	r2, [pc, #416]	@ (800548c <HAL_DMA_Start_IT+0x4bc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a67      	ldr	r2, [pc, #412]	@ (8005490 <HAL_DMA_Start_IT+0x4c0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a65      	ldr	r2, [pc, #404]	@ (8005494 <HAL_DMA_Start_IT+0x4c4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a64      	ldr	r2, [pc, #400]	@ (8005498 <HAL_DMA_Start_IT+0x4c8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a62      	ldr	r2, [pc, #392]	@ (800549c <HAL_DMA_Start_IT+0x4cc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_Start_IT+0x350>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a61      	ldr	r2, [pc, #388]	@ (80054a0 <HAL_DMA_Start_IT+0x4d0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d101      	bne.n	8005324 <HAL_DMA_Start_IT+0x354>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_DMA_Start_IT+0x356>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01a      	beq.n	8005360 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005346:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800535a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800535e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a37      	ldr	r2, [pc, #220]	@ (8005444 <HAL_DMA_Start_IT+0x474>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d04a      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a36      	ldr	r2, [pc, #216]	@ (8005448 <HAL_DMA_Start_IT+0x478>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d045      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a34      	ldr	r2, [pc, #208]	@ (800544c <HAL_DMA_Start_IT+0x47c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d040      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a33      	ldr	r2, [pc, #204]	@ (8005450 <HAL_DMA_Start_IT+0x480>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d03b      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a31      	ldr	r2, [pc, #196]	@ (8005454 <HAL_DMA_Start_IT+0x484>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d036      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <HAL_DMA_Start_IT+0x488>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d031      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2e      	ldr	r2, [pc, #184]	@ (800545c <HAL_DMA_Start_IT+0x48c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02c      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <HAL_DMA_Start_IT+0x490>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d027      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <HAL_DMA_Start_IT+0x494>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d022      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a2a      	ldr	r2, [pc, #168]	@ (8005468 <HAL_DMA_Start_IT+0x498>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01d      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a28      	ldr	r2, [pc, #160]	@ (800546c <HAL_DMA_Start_IT+0x49c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d018      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a27      	ldr	r2, [pc, #156]	@ (8005470 <HAL_DMA_Start_IT+0x4a0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a25      	ldr	r2, [pc, #148]	@ (8005474 <HAL_DMA_Start_IT+0x4a4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00e      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a24      	ldr	r2, [pc, #144]	@ (8005478 <HAL_DMA_Start_IT+0x4a8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a22      	ldr	r2, [pc, #136]	@ (800547c <HAL_DMA_Start_IT+0x4ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_DMA_Start_IT+0x430>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a21      	ldr	r2, [pc, #132]	@ (8005480 <HAL_DMA_Start_IT+0x4b0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <HAL_DMA_Start_IT+0x442>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e012      	b.n	8005438 <HAL_DMA_Start_IT+0x468>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e009      	b.n	8005438 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800542a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40020010 	.word	0x40020010
 8005448:	40020028 	.word	0x40020028
 800544c:	40020040 	.word	0x40020040
 8005450:	40020058 	.word	0x40020058
 8005454:	40020070 	.word	0x40020070
 8005458:	40020088 	.word	0x40020088
 800545c:	400200a0 	.word	0x400200a0
 8005460:	400200b8 	.word	0x400200b8
 8005464:	40020410 	.word	0x40020410
 8005468:	40020428 	.word	0x40020428
 800546c:	40020440 	.word	0x40020440
 8005470:	40020458 	.word	0x40020458
 8005474:	40020470 	.word	0x40020470
 8005478:	40020488 	.word	0x40020488
 800547c:	400204a0 	.word	0x400204a0
 8005480:	400204b8 	.word	0x400204b8
 8005484:	58025408 	.word	0x58025408
 8005488:	5802541c 	.word	0x5802541c
 800548c:	58025430 	.word	0x58025430
 8005490:	58025444 	.word	0x58025444
 8005494:	58025458 	.word	0x58025458
 8005498:	5802546c 	.word	0x5802546c
 800549c:	58025480 	.word	0x58025480
 80054a0:	58025494 	.word	0x58025494

080054a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	@ 0x28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054b0:	4b67      	ldr	r3, [pc, #412]	@ (8005650 <HAL_DMA_IRQHandler+0x1ac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a67      	ldr	r2, [pc, #412]	@ (8005654 <HAL_DMA_IRQHandler+0x1b0>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0a9b      	lsrs	r3, r3, #10
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5f      	ldr	r2, [pc, #380]	@ (8005658 <HAL_DMA_IRQHandler+0x1b4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04a      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5d      	ldr	r2, [pc, #372]	@ (800565c <HAL_DMA_IRQHandler+0x1b8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d045      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5c      	ldr	r2, [pc, #368]	@ (8005660 <HAL_DMA_IRQHandler+0x1bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005664 <HAL_DMA_IRQHandler+0x1c0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d03b      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a59      	ldr	r2, [pc, #356]	@ (8005668 <HAL_DMA_IRQHandler+0x1c4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d036      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a57      	ldr	r2, [pc, #348]	@ (800566c <HAL_DMA_IRQHandler+0x1c8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a56      	ldr	r2, [pc, #344]	@ (8005670 <HAL_DMA_IRQHandler+0x1cc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d02c      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a54      	ldr	r2, [pc, #336]	@ (8005674 <HAL_DMA_IRQHandler+0x1d0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d027      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a53      	ldr	r2, [pc, #332]	@ (8005678 <HAL_DMA_IRQHandler+0x1d4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a51      	ldr	r2, [pc, #324]	@ (800567c <HAL_DMA_IRQHandler+0x1d8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a50      	ldr	r2, [pc, #320]	@ (8005680 <HAL_DMA_IRQHandler+0x1dc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a4e      	ldr	r2, [pc, #312]	@ (8005684 <HAL_DMA_IRQHandler+0x1e0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4d      	ldr	r2, [pc, #308]	@ (8005688 <HAL_DMA_IRQHandler+0x1e4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4b      	ldr	r2, [pc, #300]	@ (800568c <HAL_DMA_IRQHandler+0x1e8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4a      	ldr	r2, [pc, #296]	@ (8005690 <HAL_DMA_IRQHandler+0x1ec>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_DMA_IRQHandler+0xd2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a48      	ldr	r2, [pc, #288]	@ (8005694 <HAL_DMA_IRQHandler+0x1f0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d101      	bne.n	800557a <HAL_DMA_IRQHandler+0xd6>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <HAL_DMA_IRQHandler+0xd8>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 842b 	beq.w	8005dd8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2208      	movs	r2, #8
 800558c:	409a      	lsls	r2, r3
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80a2 	beq.w	80056dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2e      	ldr	r2, [pc, #184]	@ (8005658 <HAL_DMA_IRQHandler+0x1b4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d04a      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2d      	ldr	r2, [pc, #180]	@ (800565c <HAL_DMA_IRQHandler+0x1b8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d045      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005660 <HAL_DMA_IRQHandler+0x1bc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d040      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <HAL_DMA_IRQHandler+0x1c0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d03b      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a28      	ldr	r2, [pc, #160]	@ (8005668 <HAL_DMA_IRQHandler+0x1c4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d036      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a27      	ldr	r2, [pc, #156]	@ (800566c <HAL_DMA_IRQHandler+0x1c8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d031      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a25      	ldr	r2, [pc, #148]	@ (8005670 <HAL_DMA_IRQHandler+0x1cc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02c      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a24      	ldr	r2, [pc, #144]	@ (8005674 <HAL_DMA_IRQHandler+0x1d0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d027      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a22      	ldr	r2, [pc, #136]	@ (8005678 <HAL_DMA_IRQHandler+0x1d4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d022      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a21      	ldr	r2, [pc, #132]	@ (800567c <HAL_DMA_IRQHandler+0x1d8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d01d      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1f      	ldr	r2, [pc, #124]	@ (8005680 <HAL_DMA_IRQHandler+0x1dc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d018      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1e      	ldr	r2, [pc, #120]	@ (8005684 <HAL_DMA_IRQHandler+0x1e0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <HAL_DMA_IRQHandler+0x1e4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00e      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <HAL_DMA_IRQHandler+0x1e8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d009      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a19      	ldr	r2, [pc, #100]	@ (8005690 <HAL_DMA_IRQHandler+0x1ec>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <HAL_DMA_IRQHandler+0x194>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <HAL_DMA_IRQHandler+0x1f0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d12f      	bne.n	8005698 <HAL_DMA_IRQHandler+0x1f4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	e02e      	b.n	80056ac <HAL_DMA_IRQHandler+0x208>
 800564e:	bf00      	nop
 8005650:	24000004 	.word	0x24000004
 8005654:	1b4e81b5 	.word	0x1b4e81b5
 8005658:	40020010 	.word	0x40020010
 800565c:	40020028 	.word	0x40020028
 8005660:	40020040 	.word	0x40020040
 8005664:	40020058 	.word	0x40020058
 8005668:	40020070 	.word	0x40020070
 800566c:	40020088 	.word	0x40020088
 8005670:	400200a0 	.word	0x400200a0
 8005674:	400200b8 	.word	0x400200b8
 8005678:	40020410 	.word	0x40020410
 800567c:	40020428 	.word	0x40020428
 8005680:	40020440 	.word	0x40020440
 8005684:	40020458 	.word	0x40020458
 8005688:	40020470 	.word	0x40020470
 800568c:	40020488 	.word	0x40020488
 8005690:	400204a0 	.word	0x400204a0
 8005694:	400204b8 	.word	0x400204b8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d015      	beq.n	80056dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 0204 	bic.w	r2, r2, #4
 80056be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2208      	movs	r2, #8
 80056ca:	409a      	lsls	r2, r3
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d4:	f043 0201 	orr.w	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d06e      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a69      	ldr	r2, [pc, #420]	@ (800589c <HAL_DMA_IRQHandler+0x3f8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d04a      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a67      	ldr	r2, [pc, #412]	@ (80058a0 <HAL_DMA_IRQHandler+0x3fc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d045      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a66      	ldr	r2, [pc, #408]	@ (80058a4 <HAL_DMA_IRQHandler+0x400>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d040      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a64      	ldr	r2, [pc, #400]	@ (80058a8 <HAL_DMA_IRQHandler+0x404>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d03b      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a63      	ldr	r2, [pc, #396]	@ (80058ac <HAL_DMA_IRQHandler+0x408>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d036      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a61      	ldr	r2, [pc, #388]	@ (80058b0 <HAL_DMA_IRQHandler+0x40c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d031      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a60      	ldr	r2, [pc, #384]	@ (80058b4 <HAL_DMA_IRQHandler+0x410>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d02c      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5e      	ldr	r2, [pc, #376]	@ (80058b8 <HAL_DMA_IRQHandler+0x414>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d027      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a5d      	ldr	r2, [pc, #372]	@ (80058bc <HAL_DMA_IRQHandler+0x418>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d022      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a5b      	ldr	r2, [pc, #364]	@ (80058c0 <HAL_DMA_IRQHandler+0x41c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01d      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a5a      	ldr	r2, [pc, #360]	@ (80058c4 <HAL_DMA_IRQHandler+0x420>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d018      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a58      	ldr	r2, [pc, #352]	@ (80058c8 <HAL_DMA_IRQHandler+0x424>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d013      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a57      	ldr	r2, [pc, #348]	@ (80058cc <HAL_DMA_IRQHandler+0x428>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00e      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a55      	ldr	r2, [pc, #340]	@ (80058d0 <HAL_DMA_IRQHandler+0x42c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a54      	ldr	r2, [pc, #336]	@ (80058d4 <HAL_DMA_IRQHandler+0x430>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_DMA_IRQHandler+0x2ee>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a52      	ldr	r2, [pc, #328]	@ (80058d8 <HAL_DMA_IRQHandler+0x434>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10a      	bne.n	80057a8 <HAL_DMA_IRQHandler+0x304>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	bf14      	ite	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	2300      	moveq	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	e003      	b.n	80057b0 <HAL_DMA_IRQHandler+0x30c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00d      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2201      	movs	r2, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c8:	f043 0202 	orr.w	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2204      	movs	r2, #4
 80057da:	409a      	lsls	r2, r3
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 808f 	beq.w	8005904 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2c      	ldr	r2, [pc, #176]	@ (800589c <HAL_DMA_IRQHandler+0x3f8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d04a      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	@ (80058a0 <HAL_DMA_IRQHandler+0x3fc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d045      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a29      	ldr	r2, [pc, #164]	@ (80058a4 <HAL_DMA_IRQHandler+0x400>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d040      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a27      	ldr	r2, [pc, #156]	@ (80058a8 <HAL_DMA_IRQHandler+0x404>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d03b      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a26      	ldr	r2, [pc, #152]	@ (80058ac <HAL_DMA_IRQHandler+0x408>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d036      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a24      	ldr	r2, [pc, #144]	@ (80058b0 <HAL_DMA_IRQHandler+0x40c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d031      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a23      	ldr	r2, [pc, #140]	@ (80058b4 <HAL_DMA_IRQHandler+0x410>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d02c      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <HAL_DMA_IRQHandler+0x414>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d027      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a20      	ldr	r2, [pc, #128]	@ (80058bc <HAL_DMA_IRQHandler+0x418>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1e      	ldr	r2, [pc, #120]	@ (80058c0 <HAL_DMA_IRQHandler+0x41c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <HAL_DMA_IRQHandler+0x420>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1b      	ldr	r2, [pc, #108]	@ (80058c8 <HAL_DMA_IRQHandler+0x424>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1a      	ldr	r2, [pc, #104]	@ (80058cc <HAL_DMA_IRQHandler+0x428>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	@ (80058d0 <HAL_DMA_IRQHandler+0x42c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a17      	ldr	r2, [pc, #92]	@ (80058d4 <HAL_DMA_IRQHandler+0x430>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_DMA_IRQHandler+0x3e2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a15      	ldr	r2, [pc, #84]	@ (80058d8 <HAL_DMA_IRQHandler+0x434>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d12a      	bne.n	80058dc <HAL_DMA_IRQHandler+0x438>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e023      	b.n	80058e4 <HAL_DMA_IRQHandler+0x440>
 800589c:	40020010 	.word	0x40020010
 80058a0:	40020028 	.word	0x40020028
 80058a4:	40020040 	.word	0x40020040
 80058a8:	40020058 	.word	0x40020058
 80058ac:	40020070 	.word	0x40020070
 80058b0:	40020088 	.word	0x40020088
 80058b4:	400200a0 	.word	0x400200a0
 80058b8:	400200b8 	.word	0x400200b8
 80058bc:	40020410 	.word	0x40020410
 80058c0:	40020428 	.word	0x40020428
 80058c4:	40020440 	.word	0x40020440
 80058c8:	40020458 	.word	0x40020458
 80058cc:	40020470 	.word	0x40020470
 80058d0:	40020488 	.word	0x40020488
 80058d4:	400204a0 	.word	0x400204a0
 80058d8:	400204b8 	.word	0x400204b8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2204      	movs	r2, #4
 80058f2:	409a      	lsls	r2, r3
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	2210      	movs	r2, #16
 800590e:	409a      	lsls	r2, r3
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80a6 	beq.w	8005a66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a85      	ldr	r2, [pc, #532]	@ (8005b34 <HAL_DMA_IRQHandler+0x690>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d04a      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a83      	ldr	r2, [pc, #524]	@ (8005b38 <HAL_DMA_IRQHandler+0x694>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d045      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a82      	ldr	r2, [pc, #520]	@ (8005b3c <HAL_DMA_IRQHandler+0x698>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d040      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a80      	ldr	r2, [pc, #512]	@ (8005b40 <HAL_DMA_IRQHandler+0x69c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d03b      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7f      	ldr	r2, [pc, #508]	@ (8005b44 <HAL_DMA_IRQHandler+0x6a0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d036      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a7d      	ldr	r2, [pc, #500]	@ (8005b48 <HAL_DMA_IRQHandler+0x6a4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d031      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a7c      	ldr	r2, [pc, #496]	@ (8005b4c <HAL_DMA_IRQHandler+0x6a8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d02c      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a7a      	ldr	r2, [pc, #488]	@ (8005b50 <HAL_DMA_IRQHandler+0x6ac>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d027      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a79      	ldr	r2, [pc, #484]	@ (8005b54 <HAL_DMA_IRQHandler+0x6b0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a77      	ldr	r2, [pc, #476]	@ (8005b58 <HAL_DMA_IRQHandler+0x6b4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a76      	ldr	r2, [pc, #472]	@ (8005b5c <HAL_DMA_IRQHandler+0x6b8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a74      	ldr	r2, [pc, #464]	@ (8005b60 <HAL_DMA_IRQHandler+0x6bc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a73      	ldr	r2, [pc, #460]	@ (8005b64 <HAL_DMA_IRQHandler+0x6c0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a71      	ldr	r2, [pc, #452]	@ (8005b68 <HAL_DMA_IRQHandler+0x6c4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a70      	ldr	r2, [pc, #448]	@ (8005b6c <HAL_DMA_IRQHandler+0x6c8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_DMA_IRQHandler+0x516>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b70 <HAL_DMA_IRQHandler+0x6cc>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d10a      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x52c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e009      	b.n	80059e4 <HAL_DMA_IRQHandler+0x540>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d03e      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2210      	movs	r2, #16
 80059f2:	409a      	lsls	r2, r3
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d024      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	4798      	blx	r3
 8005a24:	e01f      	b.n	8005a66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01b      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
 8005a36:	e016      	b.n	8005a66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0208 	bic.w	r2, r2, #8
 8005a54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2220      	movs	r2, #32
 8005a70:	409a      	lsls	r2, r3
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8110 	beq.w	8005c9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2c      	ldr	r2, [pc, #176]	@ (8005b34 <HAL_DMA_IRQHandler+0x690>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d04a      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b38 <HAL_DMA_IRQHandler+0x694>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d045      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a29      	ldr	r2, [pc, #164]	@ (8005b3c <HAL_DMA_IRQHandler+0x698>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d040      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a28      	ldr	r2, [pc, #160]	@ (8005b40 <HAL_DMA_IRQHandler+0x69c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d03b      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a26      	ldr	r2, [pc, #152]	@ (8005b44 <HAL_DMA_IRQHandler+0x6a0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d036      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a25      	ldr	r2, [pc, #148]	@ (8005b48 <HAL_DMA_IRQHandler+0x6a4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d031      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a23      	ldr	r2, [pc, #140]	@ (8005b4c <HAL_DMA_IRQHandler+0x6a8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d02c      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a22      	ldr	r2, [pc, #136]	@ (8005b50 <HAL_DMA_IRQHandler+0x6ac>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d027      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a20      	ldr	r2, [pc, #128]	@ (8005b54 <HAL_DMA_IRQHandler+0x6b0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d022      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1f      	ldr	r2, [pc, #124]	@ (8005b58 <HAL_DMA_IRQHandler+0x6b4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d01d      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b5c <HAL_DMA_IRQHandler+0x6b8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d018      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1c      	ldr	r2, [pc, #112]	@ (8005b60 <HAL_DMA_IRQHandler+0x6bc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b64 <HAL_DMA_IRQHandler+0x6c0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a19      	ldr	r2, [pc, #100]	@ (8005b68 <HAL_DMA_IRQHandler+0x6c4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d009      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a17      	ldr	r2, [pc, #92]	@ (8005b6c <HAL_DMA_IRQHandler+0x6c8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x678>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a16      	ldr	r2, [pc, #88]	@ (8005b70 <HAL_DMA_IRQHandler+0x6cc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d12b      	bne.n	8005b74 <HAL_DMA_IRQHandler+0x6d0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bf14      	ite	ne
 8005b2a:	2301      	movne	r3, #1
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	e02a      	b.n	8005b88 <HAL_DMA_IRQHandler+0x6e4>
 8005b32:	bf00      	nop
 8005b34:	40020010 	.word	0x40020010
 8005b38:	40020028 	.word	0x40020028
 8005b3c:	40020040 	.word	0x40020040
 8005b40:	40020058 	.word	0x40020058
 8005b44:	40020070 	.word	0x40020070
 8005b48:	40020088 	.word	0x40020088
 8005b4c:	400200a0 	.word	0x400200a0
 8005b50:	400200b8 	.word	0x400200b8
 8005b54:	40020410 	.word	0x40020410
 8005b58:	40020428 	.word	0x40020428
 8005b5c:	40020440 	.word	0x40020440
 8005b60:	40020458 	.word	0x40020458
 8005b64:	40020470 	.word	0x40020470
 8005b68:	40020488 	.word	0x40020488
 8005b6c:	400204a0 	.word	0x400204a0
 8005b70:	400204b8 	.word	0x400204b8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8087 	beq.w	8005c9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	2220      	movs	r2, #32
 8005b98:	409a      	lsls	r2, r3
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d139      	bne.n	8005c1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0216 	bic.w	r2, r2, #22
 8005bb8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695a      	ldr	r2, [r3, #20]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bc8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <HAL_DMA_IRQHandler+0x736>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0208 	bic.w	r2, r2, #8
 8005be8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bee:	f003 031f 	and.w	r3, r3, #31
 8005bf2:	223f      	movs	r2, #63	@ 0x3f
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 834a 	beq.w	80062a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	4798      	blx	r3
          }
          return;
 8005c1c:	e344      	b.n	80062a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d018      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d108      	bne.n	8005c4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02c      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
 8005c4a:	e027      	b.n	8005c9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d023      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	4798      	blx	r3
 8005c5c:	e01e      	b.n	8005c9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10f      	bne.n	8005c8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0210 	bic.w	r2, r2, #16
 8005c7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8306 	beq.w	80062b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8088 	beq.w	8005dc4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8005eac <HAL_DMA_IRQHandler+0xa08>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d04a      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a79      	ldr	r2, [pc, #484]	@ (8005eb0 <HAL_DMA_IRQHandler+0xa0c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d045      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a77      	ldr	r2, [pc, #476]	@ (8005eb4 <HAL_DMA_IRQHandler+0xa10>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d040      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a76      	ldr	r2, [pc, #472]	@ (8005eb8 <HAL_DMA_IRQHandler+0xa14>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d03b      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a74      	ldr	r2, [pc, #464]	@ (8005ebc <HAL_DMA_IRQHandler+0xa18>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d036      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a73      	ldr	r2, [pc, #460]	@ (8005ec0 <HAL_DMA_IRQHandler+0xa1c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d031      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a71      	ldr	r2, [pc, #452]	@ (8005ec4 <HAL_DMA_IRQHandler+0xa20>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a70      	ldr	r2, [pc, #448]	@ (8005ec8 <HAL_DMA_IRQHandler+0xa24>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d027      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6e      	ldr	r2, [pc, #440]	@ (8005ecc <HAL_DMA_IRQHandler+0xa28>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed0 <HAL_DMA_IRQHandler+0xa2c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed4 <HAL_DMA_IRQHandler+0xa30>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8005ed8 <HAL_DMA_IRQHandler+0xa34>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a68      	ldr	r2, [pc, #416]	@ (8005edc <HAL_DMA_IRQHandler+0xa38>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a67      	ldr	r2, [pc, #412]	@ (8005ee0 <HAL_DMA_IRQHandler+0xa3c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a65      	ldr	r2, [pc, #404]	@ (8005ee4 <HAL_DMA_IRQHandler+0xa40>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x8b8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a64      	ldr	r2, [pc, #400]	@ (8005ee8 <HAL_DMA_IRQHandler+0xa44>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d108      	bne.n	8005d6e <HAL_DMA_IRQHandler+0x8ca>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e007      	b.n	8005d7e <HAL_DMA_IRQHandler+0x8da>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d307      	bcc.n	8005d9a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f2      	bne.n	8005d7e <HAL_DMA_IRQHandler+0x8da>
 8005d98:	e000      	b.n	8005d9c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d9a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2203      	movs	r2, #3
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005db2:	e003      	b.n	8005dbc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8272 	beq.w	80062b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
 8005dd6:	e26c      	b.n	80062b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a43      	ldr	r2, [pc, #268]	@ (8005eec <HAL_DMA_IRQHandler+0xa48>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d022      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a42      	ldr	r2, [pc, #264]	@ (8005ef0 <HAL_DMA_IRQHandler+0xa4c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d01d      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a40      	ldr	r2, [pc, #256]	@ (8005ef4 <HAL_DMA_IRQHandler+0xa50>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d018      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8005ef8 <HAL_DMA_IRQHandler+0xa54>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3d      	ldr	r2, [pc, #244]	@ (8005efc <HAL_DMA_IRQHandler+0xa58>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00e      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8005f00 <HAL_DMA_IRQHandler+0xa5c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a3a      	ldr	r2, [pc, #232]	@ (8005f04 <HAL_DMA_IRQHandler+0xa60>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d004      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x984>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a39      	ldr	r2, [pc, #228]	@ (8005f08 <HAL_DMA_IRQHandler+0xa64>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d101      	bne.n	8005e2c <HAL_DMA_IRQHandler+0x988>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_DMA_IRQHandler+0x98a>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 823f 	beq.w	80062b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2204      	movs	r2, #4
 8005e46:	409a      	lsls	r2, r3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80cd 	beq.w	8005fec <HAL_DMA_IRQHandler+0xb48>
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 80c7 	beq.w	8005fec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	2204      	movs	r2, #4
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d049      	beq.n	8005f0c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8210 	beq.w	80062ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e94:	e20a      	b.n	80062ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8206 	beq.w	80062ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ea8:	e200      	b.n	80062ac <HAL_DMA_IRQHandler+0xe08>
 8005eaa:	bf00      	nop
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	58025408 	.word	0x58025408
 8005ef0:	5802541c 	.word	0x5802541c
 8005ef4:	58025430 	.word	0x58025430
 8005ef8:	58025444 	.word	0x58025444
 8005efc:	58025458 	.word	0x58025458
 8005f00:	5802546c 	.word	0x5802546c
 8005f04:	58025480 	.word	0x58025480
 8005f08:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d160      	bne.n	8005fd8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a7f      	ldr	r2, [pc, #508]	@ (8006118 <HAL_DMA_IRQHandler+0xc74>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a7d      	ldr	r2, [pc, #500]	@ (800611c <HAL_DMA_IRQHandler+0xc78>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8006120 <HAL_DMA_IRQHandler+0xc7c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a7a      	ldr	r2, [pc, #488]	@ (8006124 <HAL_DMA_IRQHandler+0xc80>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d03b      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a79      	ldr	r2, [pc, #484]	@ (8006128 <HAL_DMA_IRQHandler+0xc84>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d036      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a77      	ldr	r2, [pc, #476]	@ (800612c <HAL_DMA_IRQHandler+0xc88>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d031      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a76      	ldr	r2, [pc, #472]	@ (8006130 <HAL_DMA_IRQHandler+0xc8c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02c      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a74      	ldr	r2, [pc, #464]	@ (8006134 <HAL_DMA_IRQHandler+0xc90>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a73      	ldr	r2, [pc, #460]	@ (8006138 <HAL_DMA_IRQHandler+0xc94>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a71      	ldr	r2, [pc, #452]	@ (800613c <HAL_DMA_IRQHandler+0xc98>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a70      	ldr	r2, [pc, #448]	@ (8006140 <HAL_DMA_IRQHandler+0xc9c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a6e      	ldr	r2, [pc, #440]	@ (8006144 <HAL_DMA_IRQHandler+0xca0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a6d      	ldr	r2, [pc, #436]	@ (8006148 <HAL_DMA_IRQHandler+0xca4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800614c <HAL_DMA_IRQHandler+0xca8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6a      	ldr	r2, [pc, #424]	@ (8006150 <HAL_DMA_IRQHandler+0xcac>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xb12>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a68      	ldr	r2, [pc, #416]	@ (8006154 <HAL_DMA_IRQHandler+0xcb0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <HAL_DMA_IRQHandler+0xb24>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0208 	bic.w	r2, r2, #8
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e007      	b.n	8005fd8 <HAL_DMA_IRQHandler+0xb34>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0204 	bic.w	r2, r2, #4
 8005fd6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8165 	beq.w	80062ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fea:	e15f      	b.n	80062ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80c5 	beq.w	800618c <HAL_DMA_IRQHandler+0xce8>
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80bf 	beq.w	800618c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	2202      	movs	r2, #2
 8006018:	409a      	lsls	r2, r3
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d018      	beq.n	800605a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 813a 	beq.w	80062b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006044:	e134      	b.n	80062b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 8130 	beq.w	80062b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006058:	e12a      	b.n	80062b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 8089 	bne.w	8006178 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2b      	ldr	r2, [pc, #172]	@ (8006118 <HAL_DMA_IRQHandler+0xc74>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d04a      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a29      	ldr	r2, [pc, #164]	@ (800611c <HAL_DMA_IRQHandler+0xc78>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d045      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a28      	ldr	r2, [pc, #160]	@ (8006120 <HAL_DMA_IRQHandler+0xc7c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d040      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a26      	ldr	r2, [pc, #152]	@ (8006124 <HAL_DMA_IRQHandler+0xc80>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d03b      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a25      	ldr	r2, [pc, #148]	@ (8006128 <HAL_DMA_IRQHandler+0xc84>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d036      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a23      	ldr	r2, [pc, #140]	@ (800612c <HAL_DMA_IRQHandler+0xc88>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d031      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a22      	ldr	r2, [pc, #136]	@ (8006130 <HAL_DMA_IRQHandler+0xc8c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d02c      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a20      	ldr	r2, [pc, #128]	@ (8006134 <HAL_DMA_IRQHandler+0xc90>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d027      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <HAL_DMA_IRQHandler+0xc94>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d022      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1d      	ldr	r2, [pc, #116]	@ (800613c <HAL_DMA_IRQHandler+0xc98>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01d      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006140 <HAL_DMA_IRQHandler+0xc9c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_DMA_IRQHandler+0xca0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a19      	ldr	r2, [pc, #100]	@ (8006148 <HAL_DMA_IRQHandler+0xca4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a17      	ldr	r2, [pc, #92]	@ (800614c <HAL_DMA_IRQHandler+0xca8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <HAL_DMA_IRQHandler+0xcac>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_DMA_IRQHandler+0xc62>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a14      	ldr	r2, [pc, #80]	@ (8006154 <HAL_DMA_IRQHandler+0xcb0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d128      	bne.n	8006158 <HAL_DMA_IRQHandler+0xcb4>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0214 	bic.w	r2, r2, #20
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e027      	b.n	8006168 <HAL_DMA_IRQHandler+0xcc4>
 8006118:	40020010 	.word	0x40020010
 800611c:	40020028 	.word	0x40020028
 8006120:	40020040 	.word	0x40020040
 8006124:	40020058 	.word	0x40020058
 8006128:	40020070 	.word	0x40020070
 800612c:	40020088 	.word	0x40020088
 8006130:	400200a0 	.word	0x400200a0
 8006134:	400200b8 	.word	0x400200b8
 8006138:	40020410 	.word	0x40020410
 800613c:	40020428 	.word	0x40020428
 8006140:	40020440 	.word	0x40020440
 8006144:	40020458 	.word	0x40020458
 8006148:	40020470 	.word	0x40020470
 800614c:	40020488 	.word	0x40020488
 8006150:	400204a0 	.word	0x400204a0
 8006154:	400204b8 	.word	0x400204b8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 020a 	bic.w	r2, r2, #10
 8006166:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8097 	beq.w	80062b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618a:	e091      	b.n	80062b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2208      	movs	r2, #8
 8006196:	409a      	lsls	r2, r3
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8088 	beq.w	80062b2 <HAL_DMA_IRQHandler+0xe0e>
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 8082 	beq.w	80062b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a41      	ldr	r2, [pc, #260]	@ (80062b8 <HAL_DMA_IRQHandler+0xe14>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d04a      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a3f      	ldr	r2, [pc, #252]	@ (80062bc <HAL_DMA_IRQHandler+0xe18>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d045      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a3e      	ldr	r2, [pc, #248]	@ (80062c0 <HAL_DMA_IRQHandler+0xe1c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d040      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a3c      	ldr	r2, [pc, #240]	@ (80062c4 <HAL_DMA_IRQHandler+0xe20>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a3b      	ldr	r2, [pc, #236]	@ (80062c8 <HAL_DMA_IRQHandler+0xe24>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a39      	ldr	r2, [pc, #228]	@ (80062cc <HAL_DMA_IRQHandler+0xe28>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d031      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a38      	ldr	r2, [pc, #224]	@ (80062d0 <HAL_DMA_IRQHandler+0xe2c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d02c      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a36      	ldr	r2, [pc, #216]	@ (80062d4 <HAL_DMA_IRQHandler+0xe30>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d027      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a35      	ldr	r2, [pc, #212]	@ (80062d8 <HAL_DMA_IRQHandler+0xe34>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d022      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a33      	ldr	r2, [pc, #204]	@ (80062dc <HAL_DMA_IRQHandler+0xe38>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a32      	ldr	r2, [pc, #200]	@ (80062e0 <HAL_DMA_IRQHandler+0xe3c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a30      	ldr	r2, [pc, #192]	@ (80062e4 <HAL_DMA_IRQHandler+0xe40>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2f      	ldr	r2, [pc, #188]	@ (80062e8 <HAL_DMA_IRQHandler+0xe44>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2d      	ldr	r2, [pc, #180]	@ (80062ec <HAL_DMA_IRQHandler+0xe48>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2c      	ldr	r2, [pc, #176]	@ (80062f0 <HAL_DMA_IRQHandler+0xe4c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_DMA_IRQHandler+0xdaa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2a      	ldr	r2, [pc, #168]	@ (80062f4 <HAL_DMA_IRQHandler+0xe50>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <HAL_DMA_IRQHandler+0xdbc>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 021c 	bic.w	r2, r2, #28
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e007      	b.n	8006270 <HAL_DMA_IRQHandler+0xdcc>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 020e 	bic.w	r2, r2, #14
 800626e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2201      	movs	r2, #1
 800627a:	409a      	lsls	r2, r3
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	e004      	b.n	80062b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80062a8:	bf00      	nop
 80062aa:	e002      	b.n	80062b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ac:	bf00      	nop
 80062ae:	e000      	b.n	80062b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062b2:	3728      	adds	r7, #40	@ 0x28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40020010 	.word	0x40020010
 80062bc:	40020028 	.word	0x40020028
 80062c0:	40020040 	.word	0x40020040
 80062c4:	40020058 	.word	0x40020058
 80062c8:	40020070 	.word	0x40020070
 80062cc:	40020088 	.word	0x40020088
 80062d0:	400200a0 	.word	0x400200a0
 80062d4:	400200b8 	.word	0x400200b8
 80062d8:	40020410 	.word	0x40020410
 80062dc:	40020428 	.word	0x40020428
 80062e0:	40020440 	.word	0x40020440
 80062e4:	40020458 	.word	0x40020458
 80062e8:	40020470 	.word	0x40020470
 80062ec:	40020488 	.word	0x40020488
 80062f0:	400204a0 	.word	0x400204a0
 80062f4:	400204b8 	.word	0x400204b8

080062f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006310:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7f      	ldr	r2, [pc, #508]	@ (8006514 <DMA_SetConfig+0x21c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d072      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a7d      	ldr	r2, [pc, #500]	@ (8006518 <DMA_SetConfig+0x220>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d06d      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a7c      	ldr	r2, [pc, #496]	@ (800651c <DMA_SetConfig+0x224>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d068      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a7a      	ldr	r2, [pc, #488]	@ (8006520 <DMA_SetConfig+0x228>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d063      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a79      	ldr	r2, [pc, #484]	@ (8006524 <DMA_SetConfig+0x22c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d05e      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a77      	ldr	r2, [pc, #476]	@ (8006528 <DMA_SetConfig+0x230>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d059      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a76      	ldr	r2, [pc, #472]	@ (800652c <DMA_SetConfig+0x234>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d054      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a74      	ldr	r2, [pc, #464]	@ (8006530 <DMA_SetConfig+0x238>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04f      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a73      	ldr	r2, [pc, #460]	@ (8006534 <DMA_SetConfig+0x23c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d04a      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a71      	ldr	r2, [pc, #452]	@ (8006538 <DMA_SetConfig+0x240>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d045      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a70      	ldr	r2, [pc, #448]	@ (800653c <DMA_SetConfig+0x244>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d040      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6e      	ldr	r2, [pc, #440]	@ (8006540 <DMA_SetConfig+0x248>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d03b      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a6d      	ldr	r2, [pc, #436]	@ (8006544 <DMA_SetConfig+0x24c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d036      	beq.n	8006402 <DMA_SetConfig+0x10a>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a6b      	ldr	r2, [pc, #428]	@ (8006548 <DMA_SetConfig+0x250>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d031      	beq.n	8006402 <DMA_SetConfig+0x10a>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a6a      	ldr	r2, [pc, #424]	@ (800654c <DMA_SetConfig+0x254>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d02c      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a68      	ldr	r2, [pc, #416]	@ (8006550 <DMA_SetConfig+0x258>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d027      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a67      	ldr	r2, [pc, #412]	@ (8006554 <DMA_SetConfig+0x25c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d022      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a65      	ldr	r2, [pc, #404]	@ (8006558 <DMA_SetConfig+0x260>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01d      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a64      	ldr	r2, [pc, #400]	@ (800655c <DMA_SetConfig+0x264>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d018      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a62      	ldr	r2, [pc, #392]	@ (8006560 <DMA_SetConfig+0x268>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d013      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a61      	ldr	r2, [pc, #388]	@ (8006564 <DMA_SetConfig+0x26c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00e      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5f      	ldr	r2, [pc, #380]	@ (8006568 <DMA_SetConfig+0x270>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d009      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5e      	ldr	r2, [pc, #376]	@ (800656c <DMA_SetConfig+0x274>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <DMA_SetConfig+0x10a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a5c      	ldr	r2, [pc, #368]	@ (8006570 <DMA_SetConfig+0x278>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <DMA_SetConfig+0x10e>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <DMA_SetConfig+0x110>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00d      	beq.n	8006428 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006414:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006426:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a39      	ldr	r2, [pc, #228]	@ (8006514 <DMA_SetConfig+0x21c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04a      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a38      	ldr	r2, [pc, #224]	@ (8006518 <DMA_SetConfig+0x220>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d045      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a36      	ldr	r2, [pc, #216]	@ (800651c <DMA_SetConfig+0x224>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d040      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a35      	ldr	r2, [pc, #212]	@ (8006520 <DMA_SetConfig+0x228>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d03b      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a33      	ldr	r2, [pc, #204]	@ (8006524 <DMA_SetConfig+0x22c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d036      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a32      	ldr	r2, [pc, #200]	@ (8006528 <DMA_SetConfig+0x230>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d031      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	@ (800652c <DMA_SetConfig+0x234>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02c      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2f      	ldr	r2, [pc, #188]	@ (8006530 <DMA_SetConfig+0x238>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d027      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2d      	ldr	r2, [pc, #180]	@ (8006534 <DMA_SetConfig+0x23c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2c      	ldr	r2, [pc, #176]	@ (8006538 <DMA_SetConfig+0x240>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01d      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2a      	ldr	r2, [pc, #168]	@ (800653c <DMA_SetConfig+0x244>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a29      	ldr	r2, [pc, #164]	@ (8006540 <DMA_SetConfig+0x248>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a27      	ldr	r2, [pc, #156]	@ (8006544 <DMA_SetConfig+0x24c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a26      	ldr	r2, [pc, #152]	@ (8006548 <DMA_SetConfig+0x250>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a24      	ldr	r2, [pc, #144]	@ (800654c <DMA_SetConfig+0x254>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <DMA_SetConfig+0x1d0>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a23      	ldr	r2, [pc, #140]	@ (8006550 <DMA_SetConfig+0x258>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d101      	bne.n	80064cc <DMA_SetConfig+0x1d4>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e000      	b.n	80064ce <DMA_SetConfig+0x1d6>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d059      	beq.n	8006586 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	223f      	movs	r2, #63	@ 0x3f
 80064dc:	409a      	lsls	r2, r3
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d138      	bne.n	8006574 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006512:	e086      	b.n	8006622 <DMA_SetConfig+0x32a>
 8006514:	40020010 	.word	0x40020010
 8006518:	40020028 	.word	0x40020028
 800651c:	40020040 	.word	0x40020040
 8006520:	40020058 	.word	0x40020058
 8006524:	40020070 	.word	0x40020070
 8006528:	40020088 	.word	0x40020088
 800652c:	400200a0 	.word	0x400200a0
 8006530:	400200b8 	.word	0x400200b8
 8006534:	40020410 	.word	0x40020410
 8006538:	40020428 	.word	0x40020428
 800653c:	40020440 	.word	0x40020440
 8006540:	40020458 	.word	0x40020458
 8006544:	40020470 	.word	0x40020470
 8006548:	40020488 	.word	0x40020488
 800654c:	400204a0 	.word	0x400204a0
 8006550:	400204b8 	.word	0x400204b8
 8006554:	58025408 	.word	0x58025408
 8006558:	5802541c 	.word	0x5802541c
 800655c:	58025430 	.word	0x58025430
 8006560:	58025444 	.word	0x58025444
 8006564:	58025458 	.word	0x58025458
 8006568:	5802546c 	.word	0x5802546c
 800656c:	58025480 	.word	0x58025480
 8006570:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
}
 8006584:	e04d      	b.n	8006622 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <DMA_SetConfig+0x338>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a27      	ldr	r2, [pc, #156]	@ (8006634 <DMA_SetConfig+0x33c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a26      	ldr	r2, [pc, #152]	@ (8006638 <DMA_SetConfig+0x340>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a24      	ldr	r2, [pc, #144]	@ (800663c <DMA_SetConfig+0x344>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a23      	ldr	r2, [pc, #140]	@ (8006640 <DMA_SetConfig+0x348>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <DMA_SetConfig+0x34c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <DMA_SetConfig+0x350>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <DMA_SetConfig+0x2de>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1e      	ldr	r2, [pc, #120]	@ (800664c <DMA_SetConfig+0x354>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <DMA_SetConfig+0x2e2>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <DMA_SetConfig+0x2e4>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d020      	beq.n	8006622 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2201      	movs	r2, #1
 80065ea:	409a      	lsls	r2, r3
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d108      	bne.n	8006612 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	60da      	str	r2, [r3, #12]
}
 8006610:	e007      	b.n	8006622 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	60da      	str	r2, [r3, #12]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	58025408 	.word	0x58025408
 8006634:	5802541c 	.word	0x5802541c
 8006638:	58025430 	.word	0x58025430
 800663c:	58025444 	.word	0x58025444
 8006640:	58025458 	.word	0x58025458
 8006644:	5802546c 	.word	0x5802546c
 8006648:	58025480 	.word	0x58025480
 800664c:	58025494 	.word	0x58025494

08006650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a42      	ldr	r2, [pc, #264]	@ (8006768 <DMA_CalcBaseAndBitshift+0x118>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04a      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a41      	ldr	r2, [pc, #260]	@ (800676c <DMA_CalcBaseAndBitshift+0x11c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d045      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3f      	ldr	r2, [pc, #252]	@ (8006770 <DMA_CalcBaseAndBitshift+0x120>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d040      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3e      	ldr	r2, [pc, #248]	@ (8006774 <DMA_CalcBaseAndBitshift+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d03b      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3c      	ldr	r2, [pc, #240]	@ (8006778 <DMA_CalcBaseAndBitshift+0x128>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d036      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a3b      	ldr	r2, [pc, #236]	@ (800677c <DMA_CalcBaseAndBitshift+0x12c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d031      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a39      	ldr	r2, [pc, #228]	@ (8006780 <DMA_CalcBaseAndBitshift+0x130>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02c      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a38      	ldr	r2, [pc, #224]	@ (8006784 <DMA_CalcBaseAndBitshift+0x134>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d027      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a36      	ldr	r2, [pc, #216]	@ (8006788 <DMA_CalcBaseAndBitshift+0x138>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a35      	ldr	r2, [pc, #212]	@ (800678c <DMA_CalcBaseAndBitshift+0x13c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01d      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a33      	ldr	r2, [pc, #204]	@ (8006790 <DMA_CalcBaseAndBitshift+0x140>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a32      	ldr	r2, [pc, #200]	@ (8006794 <DMA_CalcBaseAndBitshift+0x144>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a30      	ldr	r2, [pc, #192]	@ (8006798 <DMA_CalcBaseAndBitshift+0x148>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2f      	ldr	r2, [pc, #188]	@ (800679c <DMA_CalcBaseAndBitshift+0x14c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2d      	ldr	r2, [pc, #180]	@ (80067a0 <DMA_CalcBaseAndBitshift+0x150>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <DMA_CalcBaseAndBitshift+0xa8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2c      	ldr	r2, [pc, #176]	@ (80067a4 <DMA_CalcBaseAndBitshift+0x154>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d101      	bne.n	80066fc <DMA_CalcBaseAndBitshift+0xac>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <DMA_CalcBaseAndBitshift+0xae>
 80066fc:	2300      	movs	r3, #0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d024      	beq.n	800674c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	3b10      	subs	r3, #16
 800670a:	4a27      	ldr	r2, [pc, #156]	@ (80067a8 <DMA_CalcBaseAndBitshift+0x158>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	4a24      	ldr	r2, [pc, #144]	@ (80067ac <DMA_CalcBaseAndBitshift+0x15c>)
 800671c:	5cd3      	ldrb	r3, [r2, r3]
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d908      	bls.n	800673c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	4b1f      	ldr	r3, [pc, #124]	@ (80067b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006732:	4013      	ands	r3, r2
 8006734:	1d1a      	adds	r2, r3, #4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	659a      	str	r2, [r3, #88]	@ 0x58
 800673a:	e00d      	b.n	8006758 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <DMA_CalcBaseAndBitshift+0x160>)
 8006744:	4013      	ands	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	6593      	str	r3, [r2, #88]	@ 0x58
 800674a:	e005      	b.n	8006758 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40020010 	.word	0x40020010
 800676c:	40020028 	.word	0x40020028
 8006770:	40020040 	.word	0x40020040
 8006774:	40020058 	.word	0x40020058
 8006778:	40020070 	.word	0x40020070
 800677c:	40020088 	.word	0x40020088
 8006780:	400200a0 	.word	0x400200a0
 8006784:	400200b8 	.word	0x400200b8
 8006788:	40020410 	.word	0x40020410
 800678c:	40020428 	.word	0x40020428
 8006790:	40020440 	.word	0x40020440
 8006794:	40020458 	.word	0x40020458
 8006798:	40020470 	.word	0x40020470
 800679c:	40020488 	.word	0x40020488
 80067a0:	400204a0 	.word	0x400204a0
 80067a4:	400204b8 	.word	0x400204b8
 80067a8:	aaaaaaab 	.word	0xaaaaaaab
 80067ac:	080114f0 	.word	0x080114f0
 80067b0:	fffffc00 	.word	0xfffffc00

080067b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d120      	bne.n	800680a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d858      	bhi.n	8006882 <DMA_CheckFifoParam+0xce>
 80067d0:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <DMA_CheckFifoParam+0x24>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067fb 	.word	0x080067fb
 80067e0:	080067e9 	.word	0x080067e9
 80067e4:	08006883 	.word	0x08006883
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d048      	beq.n	8006886 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067f8:	e045      	b.n	8006886 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006802:	d142      	bne.n	800688a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006808:	e03f      	b.n	800688a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006812:	d123      	bne.n	800685c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	2b03      	cmp	r3, #3
 800681a:	d838      	bhi.n	800688e <DMA_CheckFifoParam+0xda>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <DMA_CheckFifoParam+0x70>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006835 	.word	0x08006835
 8006828:	0800683b 	.word	0x0800683b
 800682c:	08006835 	.word	0x08006835
 8006830:	0800684d 	.word	0x0800684d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
        break;
 8006838:	e030      	b.n	800689c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d025      	beq.n	8006892 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800684a:	e022      	b.n	8006892 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006854:	d11f      	bne.n	8006896 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800685a:	e01c      	b.n	8006896 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006860:	2b02      	cmp	r3, #2
 8006862:	d902      	bls.n	800686a <DMA_CheckFifoParam+0xb6>
 8006864:	2b03      	cmp	r3, #3
 8006866:	d003      	beq.n	8006870 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006868:	e018      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
        break;
 800686e:	e015      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
    break;
 8006880:	e00b      	b.n	800689a <DMA_CheckFifoParam+0xe6>
        break;
 8006882:	bf00      	nop
 8006884:	e00a      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 8006886:	bf00      	nop
 8006888:	e008      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 800688a:	bf00      	nop
 800688c:	e006      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 800688e:	bf00      	nop
 8006890:	e004      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <DMA_CheckFifoParam+0xe8>
        break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <DMA_CheckFifoParam+0xe8>
    break;
 800689a:	bf00      	nop
    }
  }

  return status;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop

080068ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a38      	ldr	r2, [pc, #224]	@ (80069a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d022      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a36      	ldr	r2, [pc, #216]	@ (80069a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01d      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a35      	ldr	r2, [pc, #212]	@ (80069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a33      	ldr	r2, [pc, #204]	@ (80069ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a32      	ldr	r2, [pc, #200]	@ (80069b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a30      	ldr	r2, [pc, #192]	@ (80069b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2f      	ldr	r2, [pc, #188]	@ (80069b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2d      	ldr	r2, [pc, #180]	@ (80069bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d101      	bne.n	800690e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01a      	beq.n	800694a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	3b08      	subs	r3, #8
 800691c:	4a28      	ldr	r2, [pc, #160]	@ (80069c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	091b      	lsrs	r3, r3, #4
 8006924:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4b26      	ldr	r3, [pc, #152]	@ (80069c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a24      	ldr	r2, [pc, #144]	@ (80069c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006938:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	2201      	movs	r2, #1
 8006942:	409a      	lsls	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006948:	e024      	b.n	8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3b10      	subs	r3, #16
 8006952:	4a1e      	ldr	r2, [pc, #120]	@ (80069cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d806      	bhi.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d902      	bls.n	8006972 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3308      	adds	r3, #8
 8006970:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4b18      	ldr	r3, [pc, #96]	@ (80069d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006984:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	2201      	movs	r2, #1
 800698e:	409a      	lsls	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	58025408 	.word	0x58025408
 80069a4:	5802541c 	.word	0x5802541c
 80069a8:	58025430 	.word	0x58025430
 80069ac:	58025444 	.word	0x58025444
 80069b0:	58025458 	.word	0x58025458
 80069b4:	5802546c 	.word	0x5802546c
 80069b8:	58025480 	.word	0x58025480
 80069bc:	58025494 	.word	0x58025494
 80069c0:	cccccccd 	.word	0xcccccccd
 80069c4:	16009600 	.word	0x16009600
 80069c8:	58025880 	.word	0x58025880
 80069cc:	aaaaaaab 	.word	0xaaaaaaab
 80069d0:	400204b8 	.word	0x400204b8
 80069d4:	4002040f 	.word	0x4002040f
 80069d8:	10008200 	.word	0x10008200
 80069dc:	40020880 	.word	0x40020880

080069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04a      	beq.n	8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d847      	bhi.n	8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a25      	ldr	r2, [pc, #148]	@ (8006a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d022      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a24      	ldr	r2, [pc, #144]	@ (8006a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01d      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a22      	ldr	r2, [pc, #136]	@ (8006aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d018      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a21      	ldr	r2, [pc, #132]	@ (8006aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	@ (8006aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00e      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1e      	ldr	r2, [pc, #120]	@ (8006aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d009      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d004      	beq.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a15      	ldr	r2, [pc, #84]	@ (8006abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a68:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a6a:	e009      	b.n	8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	58025408 	.word	0x58025408
 8006a9c:	5802541c 	.word	0x5802541c
 8006aa0:	58025430 	.word	0x58025430
 8006aa4:	58025444 	.word	0x58025444
 8006aa8:	58025458 	.word	0x58025458
 8006aac:	5802546c 	.word	0x5802546c
 8006ab0:	58025480 	.word	0x58025480
 8006ab4:	58025494 	.word	0x58025494
 8006ab8:	1600963f 	.word	0x1600963f
 8006abc:	58025940 	.word	0x58025940
 8006ac0:	1000823f 	.word	0x1000823f
 8006ac4:	40020940 	.word	0x40020940

08006ac8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b098      	sub	sp, #96	@ 0x60
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006ad0:	4a84      	ldr	r2, [pc, #528]	@ (8006ce4 <HAL_FDCAN_Init+0x21c>)
 8006ad2:	f107 030c 	add.w	r3, r7, #12
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	224c      	movs	r2, #76	@ 0x4c
 8006ada:	4618      	mov	r0, r3
 8006adc:	f009 ffba 	bl	8010a54 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e1c6      	b.n	8006e78 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a7e      	ldr	r2, [pc, #504]	@ (8006ce8 <HAL_FDCAN_Init+0x220>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d106      	bne.n	8006b02 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb f842 	bl	8001ba0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0210 	bic.w	r2, r2, #16
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b2c:	f7fb fd1a 	bl	8002564 <HAL_GetTick>
 8006b30:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b32:	e014      	b.n	8006b5e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b34:	f7fb fd16 	bl	8002564 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b0a      	cmp	r3, #10
 8006b40:	d90d      	bls.n	8006b5e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b48:	f043 0201 	orr.w	r2, r3, #1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2203      	movs	r2, #3
 8006b56:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e18c      	b.n	8006e78 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d0e3      	beq.n	8006b34 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b7c:	f7fb fcf2 	bl	8002564 <HAL_GetTick>
 8006b80:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b82:	e014      	b.n	8006bae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b84:	f7fb fcee 	bl	8002564 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b0a      	cmp	r3, #10
 8006b90:	d90d      	bls.n	8006bae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b98:	f043 0201 	orr.w	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e164      	b.n	8006e78 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0e3      	beq.n	8006b84 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0202 	orr.w	r2, r2, #2
 8006bca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7c1b      	ldrb	r3, [r3, #16]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d108      	bne.n	8006be6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be2:	619a      	str	r2, [r3, #24]
 8006be4:	e007      	b.n	8006bf6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bf4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7c5b      	ldrb	r3, [r3, #17]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d108      	bne.n	8006c10 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699a      	ldr	r2, [r3, #24]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c0c:	619a      	str	r2, [r3, #24]
 8006c0e:	e007      	b.n	8006c20 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c1e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7c9b      	ldrb	r3, [r3, #18]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d108      	bne.n	8006c3a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c36:	619a      	str	r2, [r3, #24]
 8006c38:	e007      	b.n	8006c4a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	699a      	ldr	r2, [r3, #24]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c48:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006c6e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0210 	bic.w	r2, r2, #16
 8006c7e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d108      	bne.n	8006c9a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0204 	orr.w	r2, r2, #4
 8006c96:	619a      	str	r2, [r3, #24]
 8006c98:	e030      	b.n	8006cfc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02c      	beq.n	8006cfc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d020      	beq.n	8006cec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699a      	ldr	r2, [r3, #24]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006cb8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0210 	orr.w	r2, r2, #16
 8006cc8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d114      	bne.n	8006cfc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0220 	orr.w	r2, r2, #32
 8006ce0:	619a      	str	r2, [r3, #24]
 8006ce2:	e00b      	b.n	8006cfc <HAL_FDCAN_Init+0x234>
 8006ce4:	08011494 	.word	0x08011494
 8006ce8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0220 	orr.w	r2, r2, #32
 8006cfa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d0c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d14:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d24:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d26:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d30:	d115      	bne.n	8006d5e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d40:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	3b01      	subs	r3, #1
 8006d48:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d4a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d52:	3b01      	subs	r3, #1
 8006d54:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d5a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d5c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d84:	4413      	add	r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006d92:	f023 0107 	bic.w	r1, r3, #7
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	3360      	adds	r3, #96	@ 0x60
 8006d9e:	443b      	add	r3, r7
 8006da0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d011      	beq.n	8006dda <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006dbe:	f023 0107 	bic.w	r1, r3, #7
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	3360      	adds	r3, #96	@ 0x60
 8006dca:	443b      	add	r3, r7
 8006dcc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d012      	beq.n	8006e08 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006dea:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	3360      	adds	r3, #96	@ 0x60
 8006df6:	443b      	add	r3, r7
 8006df8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006dfc:	011a      	lsls	r2, r3, #4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d012      	beq.n	8006e36 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e18:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	3360      	adds	r3, #96	@ 0x60
 8006e24:	443b      	add	r3, r7
 8006e26:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e2a:	021a      	lsls	r2, r3, #8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a11      	ldr	r2, [pc, #68]	@ (8006e80 <HAL_FDCAN_Init+0x3b8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d107      	bne.n	8006e50 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f022 0203 	bic.w	r2, r2, #3
 8006e4e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fd91 	bl	8007990 <FDCAN_CalcultateRamBlockAddresses>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006e74:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3760      	adds	r7, #96	@ 0x60
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	4000a000 	.word	0x4000a000

08006e84 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006e94:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d002      	beq.n	8006ea2 <HAL_FDCAN_ConfigFilter+0x1e>
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d157      	bne.n	8006f52 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d12b      	bne.n	8006f02 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b07      	cmp	r3, #7
 8006eb0:	d10d      	bne.n	8006ece <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006ebe:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006ec4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006ec6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e00e      	b.n	8006eec <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006eda:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006ee2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e025      	b.n	8006f4e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	075a      	lsls	r2, r3, #29
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	d103      	bne.n	8006f20 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	e006      	b.n	8006f2e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	079a      	lsls	r2, r3, #30
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4413      	add	r3, r2
 8006f3a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3304      	adds	r3, #4
 8006f46:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e008      	b.n	8006f64 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f58:	f043 0202 	orr.w	r2, r3, #2
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
  }
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d111      	bne.n	8006fa8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e008      	b.n	8006fba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006fae:	f043 0204 	orr.w	r2, r3, #4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b08b      	sub	sp, #44	@ 0x2c
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006fe0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fe2:	7efb      	ldrb	r3, [r7, #27]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	f040 8149 	bne.w	800727c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b40      	cmp	r3, #64	@ 0x40
 8006fee:	d14c      	bne.n	800708a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ff8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e13c      	b.n	800728e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800701c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800702a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e12a      	b.n	800728e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007044:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007048:	d10a      	bne.n	8007060 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800705a:	d101      	bne.n	8007060 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800705c:	2301      	movs	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
 8007088:	e068      	b.n	800715c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b41      	cmp	r3, #65	@ 0x41
 800708e:	d14c      	bne.n	800712a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007098:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070a6:	f043 0220 	orr.w	r2, r3, #32
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0ec      	b.n	800728e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d109      	bne.n	80070d8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0da      	b.n	800728e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070e8:	d10a      	bne.n	8007100 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070fa:	d101      	bne.n	8007100 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80070fc:	2301      	movs	r3, #1
 80070fe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007108:	0a1b      	lsrs	r3, r3, #8
 800710a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711c:	69f9      	ldr	r1, [r7, #28]
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
 8007128:	e018      	b.n	800715c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	d309      	bcc.n	8007148 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e0a2      	b.n	800728e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d107      	bne.n	8007180 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	0c9b      	lsrs	r3, r3, #18
 8007176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e005      	b.n	800718c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	3304      	adds	r3, #4
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80071b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	f003 020f 	and.w	r2, r3, #15
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80071c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	0e1b      	lsrs	r3, r3, #24
 80071e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	0fda      	lsrs	r2, r3, #31
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	3304      	adds	r3, #4
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80071fc:	2300      	movs	r3, #0
 80071fe:	623b      	str	r3, [r7, #32]
 8007200:	e00a      	b.n	8007218 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	441a      	add	r2, r3
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	440b      	add	r3, r1
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	3301      	adds	r3, #1
 8007216:	623b      	str	r3, [r7, #32]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4a1f      	ldr	r2, [pc, #124]	@ (800729c <HAL_FDCAN_GetRxMessage+0x2d4>)
 800721e:	5cd3      	ldrb	r3, [r2, r3]
 8007220:	461a      	mov	r2, r3
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	4293      	cmp	r3, r2
 8007226:	d3ec      	bcc.n	8007202 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d105      	bne.n	800723a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007238:	e01e      	b.n	8007278 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b41      	cmp	r3, #65	@ 0x41
 800723e:	d105      	bne.n	800724c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800724a:	e015      	b.n	8007278 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b1f      	cmp	r3, #31
 8007250:	d808      	bhi.n	8007264 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2101      	movs	r1, #1
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	fa01 f202 	lsl.w	r2, r1, r2
 800725e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007262:	e009      	b.n	8007278 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f003 021f 	and.w	r2, r3, #31
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2101      	movs	r1, #1
 8007270:	fa01 f202 	lsl.w	r2, r1, r2
 8007274:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e008      	b.n	800728e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007282:	f043 0208 	orr.w	r2, r3, #8
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
  }
}
 800728e:	4618      	mov	r0, r3
 8007290:	372c      	adds	r7, #44	@ 0x2c
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	080114f8 	.word	0x080114f8

080072a0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80072b2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d002      	beq.n	80072c0 <HAL_FDCAN_ActivateNotification+0x20>
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d155      	bne.n	800736c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d108      	bne.n	80072e0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072de:	e014      	b.n	800730a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4013      	ands	r3, r2
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d108      	bne.n	8007302 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0202 	orr.w	r2, r2, #2
 80072fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007300:	e003      	b.n	800730a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2203      	movs	r2, #3
 8007308:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	430a      	orrs	r2, r1
 8007324:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	430a      	orrs	r2, r1
 8007342:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	4b0f      	ldr	r3, [pc, #60]	@ (800738c <HAL_FDCAN_ActivateNotification+0xec>)
 8007350:	4013      	ands	r3, r2
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	430b      	orrs	r3, r1
 8007358:	6553      	str	r3, [r2, #84]	@ 0x54
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <HAL_FDCAN_ActivateNotification+0xf0>)
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	0f9b      	lsrs	r3, r3, #30
 8007362:	490b      	ldr	r1, [pc, #44]	@ (8007390 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007364:	4313      	orrs	r3, r2
 8007366:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e008      	b.n	800737e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007372:	f043 0202 	orr.w	r2, r3, #2
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	3fcfffff 	.word	0x3fcfffff
 8007390:	4000a800 	.word	0x4000a800

08007394 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b096      	sub	sp, #88	@ 0x58
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800739c:	4b9a      	ldr	r3, [pc, #616]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	079b      	lsls	r3, r3, #30
 80073a2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80073a4:	4b98      	ldr	r3, [pc, #608]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	079b      	lsls	r3, r3, #30
 80073aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073ac:	4013      	ands	r3, r2
 80073ae:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80073ba:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073c4:	4013      	ands	r3, r2
 80073c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073dc:	4013      	ands	r3, r2
 80073de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073f4:	4013      	ands	r3, r2
 80073f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073fe:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8007402:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800740c:	4013      	ands	r3, r2
 800740e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007416:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800741a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007424:	4013      	ands	r3, r2
 8007426:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007436:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d010      	beq.n	8007466 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007458:	651a      	str	r2, [r3, #80]	@ 0x50
 800745a:	4b6b      	ldr	r3, [pc, #428]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 800745c:	2200      	movs	r2, #0
 800745e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa54 	bl	800790e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007468:	0a9b      	lsrs	r3, r3, #10
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	0a9b      	lsrs	r3, r3, #10
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d017      	beq.n	80074ae <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007492:	4013      	ands	r3, r2
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800749e:	651a      	str	r2, [r3, #80]	@ 0x50
 80074a0:	4b59      	ldr	r3, [pc, #356]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80074a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa07 	bl	80078bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80074ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ba:	4b54      	ldr	r3, [pc, #336]	@ (800760c <HAL_FDCAN_IRQHandler+0x278>)
 80074bc:	400b      	ands	r3, r1
 80074be:	6513      	str	r3, [r2, #80]	@ 0x50
 80074c0:	4a51      	ldr	r2, [pc, #324]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80074c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c4:	0f9b      	lsrs	r3, r3, #30
 80074c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80074c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f9c0 	bl	8007850 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80074d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074dc:	4b4b      	ldr	r3, [pc, #300]	@ (800760c <HAL_FDCAN_IRQHandler+0x278>)
 80074de:	400b      	ands	r3, r1
 80074e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80074e2:	4a49      	ldr	r2, [pc, #292]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80074e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e6:	0f9b      	lsrs	r3, r3, #30
 80074e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f9ba 	bl	8007866 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80074fe:	4b43      	ldr	r3, [pc, #268]	@ (800760c <HAL_FDCAN_IRQHandler+0x278>)
 8007500:	400b      	ands	r3, r1
 8007502:	6513      	str	r3, [r2, #80]	@ 0x50
 8007504:	4a40      	ldr	r2, [pc, #256]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 8007506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007508:	0f9b      	lsrs	r3, r3, #30
 800750a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800750c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7f9 ff70 	bl	80013f4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00d      	beq.n	8007536 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007520:	4b3a      	ldr	r3, [pc, #232]	@ (800760c <HAL_FDCAN_IRQHandler+0x278>)
 8007522:	400b      	ands	r3, r1
 8007524:	6513      	str	r3, [r2, #80]	@ 0x50
 8007526:	4a38      	ldr	r2, [pc, #224]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 8007528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800752a:	0f9b      	lsrs	r3, r3, #30
 800752c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800752e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f9a3 	bl	800787c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007538:	0adb      	lsrs	r3, r3, #11
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d010      	beq.n	8007564 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	0adb      	lsrs	r3, r3, #11
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007556:	651a      	str	r2, [r3, #80]	@ 0x50
 8007558:	4b2b      	ldr	r3, [pc, #172]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f997 	bl	8007892 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007566:	0a5b      	lsrs	r3, r3, #9
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01d      	beq.n	80075ac <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007572:	0a5b      	lsrs	r3, r3, #9
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d017      	beq.n	80075ac <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007584:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800758e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007590:	4013      	ands	r3, r2
 8007592:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800759c:	651a      	str	r2, [r3, #80]	@ 0x50
 800759e:	4b1a      	ldr	r3, [pc, #104]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80075a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f97d 	bl	80078a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80075ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ae:	0cdb      	lsrs	r3, r3, #19
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80075b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ba:	0cdb      	lsrs	r3, r3, #19
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80075ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f97c 	bl	80078d2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80075da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075dc:	0c1b      	lsrs	r3, r3, #16
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	0c1b      	lsrs	r3, r3, #16
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d010      	beq.n	8007614 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80075fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80075fc:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <HAL_FDCAN_IRQHandler+0x274>)
 80075fe:	2200      	movs	r2, #0
 8007600:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	e004      	b.n	8007610 <HAL_FDCAN_IRQHandler+0x27c>
 8007606:	bf00      	nop
 8007608:	4000a800 	.word	0x4000a800
 800760c:	3fcfffff 	.word	0x3fcfffff
 8007610:	f000 f969 	bl	80078e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007616:	0c9b      	lsrs	r3, r3, #18
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d010      	beq.n	8007642 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	0c9b      	lsrs	r3, r3, #18
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007634:	651a      	str	r2, [r3, #80]	@ 0x50
 8007636:	4b83      	ldr	r3, [pc, #524]	@ (8007844 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007638:	2200      	movs	r2, #0
 800763a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f95c 	bl	80078fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007644:	0c5b      	lsrs	r3, r3, #17
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d015      	beq.n	800767a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800764e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007650:	0c5b      	lsrs	r3, r3, #17
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00f      	beq.n	800767a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007662:	651a      	str	r2, [r3, #80]	@ 0x50
 8007664:	4b77      	ldr	r3, [pc, #476]	@ (8007844 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007666:	2200      	movs	r2, #0
 8007668:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007670:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800767a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007686:	4b70      	ldr	r3, [pc, #448]	@ (8007848 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007688:	400b      	ands	r3, r1
 800768a:	6513      	str	r3, [r2, #80]	@ 0x50
 800768c:	4a6d      	ldr	r2, [pc, #436]	@ (8007844 <HAL_FDCAN_IRQHandler+0x4b0>)
 800768e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007690:	0f9b      	lsrs	r3, r3, #30
 8007692:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7f9 ffae 	bl	80015f8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800769c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d011      	beq.n	80076c6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076a8:	4b67      	ldr	r3, [pc, #412]	@ (8007848 <HAL_FDCAN_IRQHandler+0x4b4>)
 80076aa:	400b      	ands	r3, r1
 80076ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80076ae:	4a65      	ldr	r2, [pc, #404]	@ (8007844 <HAL_FDCAN_IRQHandler+0x4b0>)
 80076b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b2:	0f9b      	lsrs	r3, r3, #30
 80076b4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80076bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a60      	ldr	r2, [pc, #384]	@ (800784c <HAL_FDCAN_IRQHandler+0x4b8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	f040 80ac 	bne.w	800782a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 80a4 	beq.w	800782a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f6:	4013      	ands	r3, r2
 80076f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007704:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800770e:	4013      	ands	r3, r2
 8007710:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007726:	4013      	ands	r3, r2
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8007734:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	6a3a      	ldr	r2, [r7, #32]
 800773e:	4013      	ands	r3, r2
 8007740:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800774c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	4013      	ands	r3, r2
 8007758:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800776a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007776:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8db 	bl	8007936 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007782:	2b00      	cmp	r3, #0
 8007784:	d007      	beq.n	8007796 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800778c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800778e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8db 	bl	800794c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	099b      	lsrs	r3, r3, #6
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01a      	beq.n	80077d8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	099b      	lsrs	r3, r3, #6
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d014      	beq.n	80077d8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077c4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2240      	movs	r2, #64	@ 0x40
 80077cc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	6939      	ldr	r1, [r7, #16]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8c5 	bl	8007962 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80077e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8c6 	bl	800797a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00b      	beq.n	800780c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	6a3a      	ldr	r2, [r7, #32]
 80077fa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f874 	bl	8007922 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800783a:	bf00      	nop
 800783c:	3758      	adds	r7, #88	@ 0x58
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	4000a800 	.word	0x4000a800
 8007848:	3fcfffff 	.word	0x3fcfffff
 800784c:	4000a000 	.word	0x4000a000

08007850 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007962:	b480      	push	{r7}
 8007964:	b085      	sub	sp, #20
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80079a6:	4ba7      	ldr	r3, [pc, #668]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	0091      	lsls	r1, r2, #2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	430b      	orrs	r3, r1
 80079b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c8:	041a      	lsls	r2, r3, #16
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	4413      	add	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80079e6:	4b97      	ldr	r3, [pc, #604]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	0091      	lsls	r1, r2, #2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a00:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a08:	041a      	lsls	r2, r3, #16
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007a28:	4b86      	ldr	r3, [pc, #536]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	0091      	lsls	r1, r2, #2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	430b      	orrs	r3, r1
 8007a36:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a42:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	041a      	lsls	r2, r3, #16
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	430a      	orrs	r2, r1
 8007a52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	4413      	add	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007a70:	4b74      	ldr	r3, [pc, #464]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	0091      	lsls	r1, r2, #2
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007a8a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a92:	041a      	lsls	r2, r3, #16
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007aa6:	fb02 f303 	mul.w	r3, r2, r3
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007ab8:	4b62      	ldr	r3, [pc, #392]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	0091      	lsls	r1, r2, #2
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007ae4:	4b57      	ldr	r3, [pc, #348]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	0091      	lsls	r1, r2, #2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	430b      	orrs	r3, r1
 8007af2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007afe:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b06:	041a      	lsls	r2, r3, #16
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007b26:	4b47      	ldr	r3, [pc, #284]	@ (8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	0091      	lsls	r1, r2, #2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	430b      	orrs	r3, r1
 8007b34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b40:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b48:	041a      	lsls	r2, r3, #16
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b5c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b64:	061a      	lsls	r2, r3, #24
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b74:	4b34      	ldr	r3, [pc, #208]	@ (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b76:	4413      	add	r3, r2
 8007b78:	009a      	lsls	r2, r3, #2
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	441a      	add	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007bc8:	441a      	add	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007bda:	fb01 f303 	mul.w	r3, r1, r3
 8007bde:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007c2c:	441a      	add	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3a:	4a04      	ldr	r2, [pc, #16]	@ (8007c4c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d915      	bls.n	8007c6c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c40:	e006      	b.n	8007c50 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c42:	bf00      	nop
 8007c44:	ffff0003 	.word	0xffff0003
 8007c48:	10002b00 	.word	0x10002b00
 8007c4c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c56:	f043 0220 	orr.w	r2, r3, #32
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2203      	movs	r2, #3
 8007c64:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e010      	b.n	8007c8e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e005      	b.n	8007c80 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d3f3      	bcc.n	8007c74 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop

08007c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b089      	sub	sp, #36	@ 0x24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007caa:	4b86      	ldr	r3, [pc, #536]	@ (8007ec4 <HAL_GPIO_Init+0x228>)
 8007cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cae:	e18c      	b.n	8007fca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 817e 	beq.w	8007fc4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d005      	beq.n	8007ce0 <HAL_GPIO_Init+0x44>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d130      	bne.n	8007d42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	2203      	movs	r2, #3
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d16:	2201      	movs	r2, #1
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4013      	ands	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	091b      	lsrs	r3, r3, #4
 8007d2c:	f003 0201 	and.w	r2, r3, #1
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d017      	beq.n	8007d7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	2203      	movs	r2, #3
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	4013      	ands	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d123      	bne.n	8007dd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	08da      	lsrs	r2, r3, #3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3208      	adds	r2, #8
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	220f      	movs	r2, #15
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	43db      	mvns	r3, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	4013      	ands	r3, r2
 8007dac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	08da      	lsrs	r2, r3, #3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3208      	adds	r2, #8
 8007dcc:	69b9      	ldr	r1, [r7, #24]
 8007dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	2203      	movs	r2, #3
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	43db      	mvns	r3, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4013      	ands	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f003 0203 	and.w	r2, r3, #3
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80d8 	beq.w	8007fc4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e14:	4b2c      	ldr	r3, [pc, #176]	@ (8007ec8 <HAL_GPIO_Init+0x22c>)
 8007e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ec8 <HAL_GPIO_Init+0x22c>)
 8007e1c:	f043 0302 	orr.w	r3, r3, #2
 8007e20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e24:	4b28      	ldr	r3, [pc, #160]	@ (8007ec8 <HAL_GPIO_Init+0x22c>)
 8007e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e32:	4a26      	ldr	r2, [pc, #152]	@ (8007ecc <HAL_GPIO_Init+0x230>)
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	3302      	adds	r3, #2
 8007e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	220f      	movs	r2, #15
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	43db      	mvns	r3, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4013      	ands	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a1d      	ldr	r2, [pc, #116]	@ (8007ed0 <HAL_GPIO_Init+0x234>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d04a      	beq.n	8007ef4 <HAL_GPIO_Init+0x258>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed4 <HAL_GPIO_Init+0x238>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d02b      	beq.n	8007ebe <HAL_GPIO_Init+0x222>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed8 <HAL_GPIO_Init+0x23c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d025      	beq.n	8007eba <HAL_GPIO_Init+0x21e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a1a      	ldr	r2, [pc, #104]	@ (8007edc <HAL_GPIO_Init+0x240>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01f      	beq.n	8007eb6 <HAL_GPIO_Init+0x21a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a19      	ldr	r2, [pc, #100]	@ (8007ee0 <HAL_GPIO_Init+0x244>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d019      	beq.n	8007eb2 <HAL_GPIO_Init+0x216>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a18      	ldr	r2, [pc, #96]	@ (8007ee4 <HAL_GPIO_Init+0x248>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <HAL_GPIO_Init+0x212>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a17      	ldr	r2, [pc, #92]	@ (8007ee8 <HAL_GPIO_Init+0x24c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00d      	beq.n	8007eaa <HAL_GPIO_Init+0x20e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a16      	ldr	r2, [pc, #88]	@ (8007eec <HAL_GPIO_Init+0x250>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d007      	beq.n	8007ea6 <HAL_GPIO_Init+0x20a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <HAL_GPIO_Init+0x254>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d101      	bne.n	8007ea2 <HAL_GPIO_Init+0x206>
 8007e9e:	2309      	movs	r3, #9
 8007ea0:	e029      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007ea2:	230a      	movs	r3, #10
 8007ea4:	e027      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007ea6:	2307      	movs	r3, #7
 8007ea8:	e025      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007eaa:	2306      	movs	r3, #6
 8007eac:	e023      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007eae:	2305      	movs	r3, #5
 8007eb0:	e021      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007eb2:	2304      	movs	r3, #4
 8007eb4:	e01f      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e01d      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e01b      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e019      	b.n	8007ef6 <HAL_GPIO_Init+0x25a>
 8007ec2:	bf00      	nop
 8007ec4:	58000080 	.word	0x58000080
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	58000400 	.word	0x58000400
 8007ed0:	58020000 	.word	0x58020000
 8007ed4:	58020400 	.word	0x58020400
 8007ed8:	58020800 	.word	0x58020800
 8007edc:	58020c00 	.word	0x58020c00
 8007ee0:	58021000 	.word	0x58021000
 8007ee4:	58021400 	.word	0x58021400
 8007ee8:	58021800 	.word	0x58021800
 8007eec:	58021c00 	.word	0x58021c00
 8007ef0:	58022400 	.word	0x58022400
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	f002 0203 	and.w	r2, r2, #3
 8007efc:	0092      	lsls	r2, r2, #2
 8007efe:	4093      	lsls	r3, r2
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f06:	4938      	ldr	r1, [pc, #224]	@ (8007fe8 <HAL_GPIO_Init+0x34c>)
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	089b      	lsrs	r3, r3, #2
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	4013      	ands	r3, r2
 8007f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4013      	ands	r3, r2
 8007f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f47f ae6b 	bne.w	8007cb0 <HAL_GPIO_Init+0x14>
  }
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	3724      	adds	r7, #36	@ 0x24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	58000400 	.word	0x58000400

08007fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008004:	2301      	movs	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
 8008008:	e001      	b.n	800800e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	807b      	strh	r3, [r7, #2]
 8008028:	4613      	mov	r3, r2
 800802a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800802c:	787b      	ldrb	r3, [r7, #1]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008032:	887a      	ldrh	r2, [r7, #2]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008038:	e003      	b.n	8008042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	041a      	lsls	r2, r3, #16
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	619a      	str	r2, [r3, #24]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008058:	4b19      	ldr	r3, [pc, #100]	@ (80080c0 <HAL_PWREx_ConfigSupply+0x70>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b04      	cmp	r3, #4
 8008062:	d00a      	beq.n	800807a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008064:	4b16      	ldr	r3, [pc, #88]	@ (80080c0 <HAL_PWREx_ConfigSupply+0x70>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d001      	beq.n	8008076 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e01f      	b.n	80080b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	e01d      	b.n	80080b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800807a:	4b11      	ldr	r3, [pc, #68]	@ (80080c0 <HAL_PWREx_ConfigSupply+0x70>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f023 0207 	bic.w	r2, r3, #7
 8008082:	490f      	ldr	r1, [pc, #60]	@ (80080c0 <HAL_PWREx_ConfigSupply+0x70>)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4313      	orrs	r3, r2
 8008088:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800808a:	f7fa fa6b 	bl	8002564 <HAL_GetTick>
 800808e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008090:	e009      	b.n	80080a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008092:	f7fa fa67 	bl	8002564 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080a0:	d901      	bls.n	80080a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e007      	b.n	80080b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80080a6:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <HAL_PWREx_ConfigSupply+0x70>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080b2:	d1ee      	bne.n	8008092 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	58024800 	.word	0x58024800

080080c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08c      	sub	sp, #48	@ 0x30
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e3c8      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8087 	beq.w	80081f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080e4:	4b88      	ldr	r3, [pc, #544]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080ee:	4b86      	ldr	r3, [pc, #536]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80080f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	2b10      	cmp	r3, #16
 80080f8:	d007      	beq.n	800810a <HAL_RCC_OscConfig+0x46>
 80080fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fc:	2b18      	cmp	r3, #24
 80080fe:	d110      	bne.n	8008122 <HAL_RCC_OscConfig+0x5e>
 8008100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d10b      	bne.n	8008122 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800810a:	4b7f      	ldr	r3, [pc, #508]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d06c      	beq.n	80081f0 <HAL_RCC_OscConfig+0x12c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d168      	bne.n	80081f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e3a2      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800812a:	d106      	bne.n	800813a <HAL_RCC_OscConfig+0x76>
 800812c:	4b76      	ldr	r3, [pc, #472]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a75      	ldr	r2, [pc, #468]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e02e      	b.n	8008198 <HAL_RCC_OscConfig+0xd4>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10c      	bne.n	800815c <HAL_RCC_OscConfig+0x98>
 8008142:	4b71      	ldr	r3, [pc, #452]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a70      	ldr	r2, [pc, #448]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	4b6e      	ldr	r3, [pc, #440]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a6d      	ldr	r2, [pc, #436]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e01d      	b.n	8008198 <HAL_RCC_OscConfig+0xd4>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008164:	d10c      	bne.n	8008180 <HAL_RCC_OscConfig+0xbc>
 8008166:	4b68      	ldr	r3, [pc, #416]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a67      	ldr	r2, [pc, #412]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800816c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	4b65      	ldr	r3, [pc, #404]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a64      	ldr	r2, [pc, #400]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	e00b      	b.n	8008198 <HAL_RCC_OscConfig+0xd4>
 8008180:	4b61      	ldr	r3, [pc, #388]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a60      	ldr	r2, [pc, #384]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	4b5e      	ldr	r3, [pc, #376]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a5d      	ldr	r2, [pc, #372]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d013      	beq.n	80081c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a0:	f7fa f9e0 	bl	8002564 <HAL_GetTick>
 80081a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081a8:	f7fa f9dc 	bl	8002564 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b64      	cmp	r3, #100	@ 0x64
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e356      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081ba:	4b53      	ldr	r3, [pc, #332]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0xe4>
 80081c6:	e014      	b.n	80081f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7fa f9cc 	bl	8002564 <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081d0:	f7fa f9c8 	bl	8002564 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b64      	cmp	r3, #100	@ 0x64
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e342      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081e2:	4b49      	ldr	r3, [pc, #292]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0x10c>
 80081ee:	e000      	b.n	80081f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 808c 	beq.w	8008318 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008200:	4b41      	ldr	r3, [pc, #260]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008208:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800820a:	4b3f      	ldr	r3, [pc, #252]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_RCC_OscConfig+0x162>
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	2b18      	cmp	r3, #24
 800821a:	d137      	bne.n	800828c <HAL_RCC_OscConfig+0x1c8>
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d132      	bne.n	800828c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008226:	4b38      	ldr	r3, [pc, #224]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d005      	beq.n	800823e <HAL_RCC_OscConfig+0x17a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e314      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800823e:	4b32      	ldr	r3, [pc, #200]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f023 0219 	bic.w	r2, r3, #25
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	492f      	ldr	r1, [pc, #188]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800824c:	4313      	orrs	r3, r2
 800824e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008250:	f7fa f988 	bl	8002564 <HAL_GetTick>
 8008254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008258:	f7fa f984 	bl	8002564 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e2fe      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800826a:	4b27      	ldr	r3, [pc, #156]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008276:	4b24      	ldr	r3, [pc, #144]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	061b      	lsls	r3, r3, #24
 8008284:	4920      	ldr	r1, [pc, #128]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008286:	4313      	orrs	r3, r2
 8008288:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800828a:	e045      	b.n	8008318 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d026      	beq.n	80082e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008294:	4b1c      	ldr	r3, [pc, #112]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f023 0219 	bic.w	r2, r3, #25
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	4919      	ldr	r1, [pc, #100]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a6:	f7fa f95d 	bl	8002564 <HAL_GetTick>
 80082aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082ac:	e008      	b.n	80082c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082ae:	f7fa f959 	bl	8002564 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e2d3      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082c0:	4b11      	ldr	r3, [pc, #68]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0f0      	beq.n	80082ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	061b      	lsls	r3, r3, #24
 80082da:	490b      	ldr	r1, [pc, #44]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80082dc:	4313      	orrs	r3, r2
 80082de:	604b      	str	r3, [r1, #4]
 80082e0:	e01a      	b.n	8008318 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082e2:	4b09      	ldr	r3, [pc, #36]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a08      	ldr	r2, [pc, #32]	@ (8008308 <HAL_RCC_OscConfig+0x244>)
 80082e8:	f023 0301 	bic.w	r3, r3, #1
 80082ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ee:	f7fa f939 	bl	8002564 <HAL_GetTick>
 80082f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082f4:	e00a      	b.n	800830c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082f6:	f7fa f935 	bl	8002564 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d903      	bls.n	800830c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e2af      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
 8008308:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800830c:	4b96      	ldr	r3, [pc, #600]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ee      	bne.n	80082f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0310 	and.w	r3, r3, #16
 8008320:	2b00      	cmp	r3, #0
 8008322:	d06a      	beq.n	80083fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008324:	4b90      	ldr	r3, [pc, #576]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800832c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800832e:	4b8e      	ldr	r3, [pc, #568]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008332:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2b08      	cmp	r3, #8
 8008338:	d007      	beq.n	800834a <HAL_RCC_OscConfig+0x286>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b18      	cmp	r3, #24
 800833e:	d11b      	bne.n	8008378 <HAL_RCC_OscConfig+0x2b4>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	2b01      	cmp	r3, #1
 8008348:	d116      	bne.n	8008378 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800834a:	4b87      	ldr	r3, [pc, #540]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <HAL_RCC_OscConfig+0x29e>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	2b80      	cmp	r3, #128	@ 0x80
 800835c:	d001      	beq.n	8008362 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e282      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008362:	4b81      	ldr	r3, [pc, #516]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	061b      	lsls	r3, r3, #24
 8008370:	497d      	ldr	r1, [pc, #500]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008372:	4313      	orrs	r3, r2
 8008374:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008376:	e040      	b.n	80083fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d023      	beq.n	80083c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008380:	4b79      	ldr	r3, [pc, #484]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a78      	ldr	r2, [pc, #480]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7fa f8ea 	bl	8002564 <HAL_GetTick>
 8008390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008394:	f7fa f8e6 	bl	8002564 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e260      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083a6:	4b70      	ldr	r3, [pc, #448]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083b2:	4b6d      	ldr	r3, [pc, #436]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	061b      	lsls	r3, r3, #24
 80083c0:	4969      	ldr	r1, [pc, #420]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60cb      	str	r3, [r1, #12]
 80083c6:	e018      	b.n	80083fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083c8:	4b67      	ldr	r3, [pc, #412]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a66      	ldr	r2, [pc, #408]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80083ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d4:	f7fa f8c6 	bl	8002564 <HAL_GetTick>
 80083d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083dc:	f7fa f8c2 	bl	8002564 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e23c      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ee:	4b5e      	ldr	r3, [pc, #376]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f0      	bne.n	80083dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0308 	and.w	r3, r3, #8
 8008402:	2b00      	cmp	r3, #0
 8008404:	d036      	beq.n	8008474 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d019      	beq.n	8008442 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800840e:	4b56      	ldr	r3, [pc, #344]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008412:	4a55      	ldr	r2, [pc, #340]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800841a:	f7fa f8a3 	bl	8002564 <HAL_GetTick>
 800841e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008420:	e008      	b.n	8008434 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008422:	f7fa f89f 	bl	8002564 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e219      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008434:	4b4c      	ldr	r3, [pc, #304]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <HAL_RCC_OscConfig+0x35e>
 8008440:	e018      	b.n	8008474 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008442:	4b49      	ldr	r3, [pc, #292]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008446:	4a48      	ldr	r2, [pc, #288]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008448:	f023 0301 	bic.w	r3, r3, #1
 800844c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800844e:	f7fa f889 	bl	8002564 <HAL_GetTick>
 8008452:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008456:	f7fa f885 	bl	8002564 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e1ff      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008468:	4b3f      	ldr	r3, [pc, #252]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800846a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b00      	cmp	r3, #0
 800847e:	d036      	beq.n	80084ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d019      	beq.n	80084bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008488:	4b37      	ldr	r3, [pc, #220]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a36      	ldr	r2, [pc, #216]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800848e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008492:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008494:	f7fa f866 	bl	8002564 <HAL_GetTick>
 8008498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800849a:	e008      	b.n	80084ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800849c:	f7fa f862 	bl	8002564 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e1dc      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084ae:	4b2e      	ldr	r3, [pc, #184]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f0      	beq.n	800849c <HAL_RCC_OscConfig+0x3d8>
 80084ba:	e018      	b.n	80084ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084bc:	4b2a      	ldr	r3, [pc, #168]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a29      	ldr	r2, [pc, #164]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80084c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084c8:	f7fa f84c 	bl	8002564 <HAL_GetTick>
 80084cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084d0:	f7fa f848 	bl	8002564 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e1c2      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084e2:	4b21      	ldr	r3, [pc, #132]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8086 	beq.w	8008608 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084fc:	4b1b      	ldr	r3, [pc, #108]	@ (800856c <HAL_RCC_OscConfig+0x4a8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1a      	ldr	r2, [pc, #104]	@ (800856c <HAL_RCC_OscConfig+0x4a8>)
 8008502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008506:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008508:	f7fa f82c 	bl	8002564 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008510:	f7fa f828 	bl	8002564 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	@ 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e1a2      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008522:	4b12      	ldr	r3, [pc, #72]	@ (800856c <HAL_RCC_OscConfig+0x4a8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d106      	bne.n	8008544 <HAL_RCC_OscConfig+0x480>
 8008536:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853a:	4a0b      	ldr	r2, [pc, #44]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800853c:	f043 0301 	orr.w	r3, r3, #1
 8008540:	6713      	str	r3, [r2, #112]	@ 0x70
 8008542:	e032      	b.n	80085aa <HAL_RCC_OscConfig+0x4e6>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d111      	bne.n	8008570 <HAL_RCC_OscConfig+0x4ac>
 800854c:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800854e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008550:	4a05      	ldr	r2, [pc, #20]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	6713      	str	r3, [r2, #112]	@ 0x70
 8008558:	4b03      	ldr	r3, [pc, #12]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800855c:	4a02      	ldr	r2, [pc, #8]	@ (8008568 <HAL_RCC_OscConfig+0x4a4>)
 800855e:	f023 0304 	bic.w	r3, r3, #4
 8008562:	6713      	str	r3, [r2, #112]	@ 0x70
 8008564:	e021      	b.n	80085aa <HAL_RCC_OscConfig+0x4e6>
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	58024800 	.word	0x58024800
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2b05      	cmp	r3, #5
 8008576:	d10c      	bne.n	8008592 <HAL_RCC_OscConfig+0x4ce>
 8008578:	4b83      	ldr	r3, [pc, #524]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800857a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857c:	4a82      	ldr	r2, [pc, #520]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800857e:	f043 0304 	orr.w	r3, r3, #4
 8008582:	6713      	str	r3, [r2, #112]	@ 0x70
 8008584:	4b80      	ldr	r3, [pc, #512]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008588:	4a7f      	ldr	r2, [pc, #508]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008590:	e00b      	b.n	80085aa <HAL_RCC_OscConfig+0x4e6>
 8008592:	4b7d      	ldr	r3, [pc, #500]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008596:	4a7c      	ldr	r2, [pc, #496]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	6713      	str	r3, [r2, #112]	@ 0x70
 800859e:	4b7a      	ldr	r3, [pc, #488]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80085a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a2:	4a79      	ldr	r2, [pc, #484]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80085a4:	f023 0304 	bic.w	r3, r3, #4
 80085a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d015      	beq.n	80085de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b2:	f7f9 ffd7 	bl	8002564 <HAL_GetTick>
 80085b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085b8:	e00a      	b.n	80085d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ba:	f7f9 ffd3 	bl	8002564 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d901      	bls.n	80085d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e14b      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d0:	4b6d      	ldr	r3, [pc, #436]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0ee      	beq.n	80085ba <HAL_RCC_OscConfig+0x4f6>
 80085dc:	e014      	b.n	8008608 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085de:	f7f9 ffc1 	bl	8002564 <HAL_GetTick>
 80085e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085e4:	e00a      	b.n	80085fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085e6:	f7f9 ffbd 	bl	8002564 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e135      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085fc:	4b62      	ldr	r3, [pc, #392]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80085fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1ee      	bne.n	80085e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 812a 	beq.w	8008866 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008612:	4b5d      	ldr	r3, [pc, #372]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800861a:	2b18      	cmp	r3, #24
 800861c:	f000 80ba 	beq.w	8008794 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	2b02      	cmp	r3, #2
 8008626:	f040 8095 	bne.w	8008754 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800862a:	4b57      	ldr	r3, [pc, #348]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a56      	ldr	r2, [pc, #344]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008636:	f7f9 ff95 	bl	8002564 <HAL_GetTick>
 800863a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800863c:	e008      	b.n	8008650 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800863e:	f7f9 ff91 	bl	8002564 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e10b      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008650:	4b4d      	ldr	r3, [pc, #308]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f0      	bne.n	800863e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800865c:	4b4a      	ldr	r3, [pc, #296]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800865e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008660:	4b4a      	ldr	r3, [pc, #296]	@ (800878c <HAL_RCC_OscConfig+0x6c8>)
 8008662:	4013      	ands	r3, r2
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800866c:	0112      	lsls	r2, r2, #4
 800866e:	430a      	orrs	r2, r1
 8008670:	4945      	ldr	r1, [pc, #276]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008672:	4313      	orrs	r3, r2
 8008674:	628b      	str	r3, [r1, #40]	@ 0x28
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	3b01      	subs	r3, #1
 800867c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008684:	3b01      	subs	r3, #1
 8008686:	025b      	lsls	r3, r3, #9
 8008688:	b29b      	uxth	r3, r3
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	3b01      	subs	r3, #1
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869e:	3b01      	subs	r3, #1
 80086a0:	061b      	lsls	r3, r3, #24
 80086a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086a6:	4938      	ldr	r1, [pc, #224]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80086ac:	4b36      	ldr	r3, [pc, #216]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	4a35      	ldr	r2, [pc, #212]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086b8:	4b33      	ldr	r3, [pc, #204]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086bc:	4b34      	ldr	r3, [pc, #208]	@ (8008790 <HAL_RCC_OscConfig+0x6cc>)
 80086be:	4013      	ands	r3, r2
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80086c4:	00d2      	lsls	r2, r2, #3
 80086c6:	4930      	ldr	r1, [pc, #192]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d0:	f023 020c 	bic.w	r2, r3, #12
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d8:	492b      	ldr	r1, [pc, #172]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086de:	4b2a      	ldr	r3, [pc, #168]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e2:	f023 0202 	bic.w	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ea:	4927      	ldr	r1, [pc, #156]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086f0:	4b25      	ldr	r3, [pc, #148]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	4a24      	ldr	r2, [pc, #144]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fc:	4b22      	ldr	r3, [pc, #136]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008700:	4a21      	ldr	r2, [pc, #132]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008708:	4b1f      	ldr	r3, [pc, #124]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800870a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870c:	4a1e      	ldr	r2, [pc, #120]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800870e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008714:	4b1c      	ldr	r3, [pc, #112]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	4a1b      	ldr	r2, [pc, #108]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008720:	4b19      	ldr	r3, [pc, #100]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a18      	ldr	r2, [pc, #96]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800872a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872c:	f7f9 ff1a 	bl	8002564 <HAL_GetTick>
 8008730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008734:	f7f9 ff16 	bl	8002564 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e090      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008746:	4b10      	ldr	r3, [pc, #64]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0x670>
 8008752:	e088      	b.n	8008866 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008754:	4b0c      	ldr	r3, [pc, #48]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a0b      	ldr	r2, [pc, #44]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800875a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800875e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7f9 ff00 	bl	8002564 <HAL_GetTick>
 8008764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008768:	f7f9 fefc 	bl	8002564 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e076      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800877a:	4b03      	ldr	r3, [pc, #12]	@ (8008788 <HAL_RCC_OscConfig+0x6c4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <HAL_RCC_OscConfig+0x6a4>
 8008786:	e06e      	b.n	8008866 <HAL_RCC_OscConfig+0x7a2>
 8008788:	58024400 	.word	0x58024400
 800878c:	fffffc0c 	.word	0xfffffc0c
 8008790:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008794:	4b36      	ldr	r3, [pc, #216]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 8008796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008798:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800879a:	4b35      	ldr	r3, [pc, #212]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d031      	beq.n	800880c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	f003 0203 	and.w	r2, r3, #3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d12a      	bne.n	800880c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	091b      	lsrs	r3, r3, #4
 80087ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d122      	bne.n	800880c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d11a      	bne.n	800880c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	0a5b      	lsrs	r3, r3, #9
 80087da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d111      	bne.n	800880c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d108      	bne.n	800880c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	0e1b      	lsrs	r3, r3, #24
 80087fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008806:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008808:	429a      	cmp	r2, r3
 800880a:	d001      	beq.n	8008810 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e02b      	b.n	8008868 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008810:	4b17      	ldr	r3, [pc, #92]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 8008812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800881a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	429a      	cmp	r2, r3
 8008824:	d01f      	beq.n	8008866 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008826:	4b12      	ldr	r3, [pc, #72]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 8008828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882a:	4a11      	ldr	r2, [pc, #68]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008832:	f7f9 fe97 	bl	8002564 <HAL_GetTick>
 8008836:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008838:	bf00      	nop
 800883a:	f7f9 fe93 	bl	8002564 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	4293      	cmp	r3, r2
 8008844:	d0f9      	beq.n	800883a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008846:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 8008848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800884a:	4b0a      	ldr	r3, [pc, #40]	@ (8008874 <HAL_RCC_OscConfig+0x7b0>)
 800884c:	4013      	ands	r3, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008852:	00d2      	lsls	r2, r2, #3
 8008854:	4906      	ldr	r1, [pc, #24]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 8008856:	4313      	orrs	r3, r2
 8008858:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800885a:	4b05      	ldr	r3, [pc, #20]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 800885c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885e:	4a04      	ldr	r2, [pc, #16]	@ (8008870 <HAL_RCC_OscConfig+0x7ac>)
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3730      	adds	r7, #48	@ 0x30
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	58024400 	.word	0x58024400
 8008874:	ffff0007 	.word	0xffff0007

08008878 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e19c      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800888c:	4b8a      	ldr	r3, [pc, #552]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 030f 	and.w	r3, r3, #15
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d910      	bls.n	80088bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800889a:	4b87      	ldr	r3, [pc, #540]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 020f 	bic.w	r2, r3, #15
 80088a2:	4985      	ldr	r1, [pc, #532]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088aa:	4b83      	ldr	r3, [pc, #524]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d001      	beq.n	80088bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e184      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	4b7b      	ldr	r3, [pc, #492]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d908      	bls.n	80088ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088d8:	4b78      	ldr	r3, [pc, #480]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	4975      	ldr	r1, [pc, #468]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d010      	beq.n	8008918 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	4b70      	ldr	r3, [pc, #448]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008902:	429a      	cmp	r2, r3
 8008904:	d908      	bls.n	8008918 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008906:	4b6d      	ldr	r3, [pc, #436]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	496a      	ldr	r1, [pc, #424]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008914:	4313      	orrs	r3, r2
 8008916:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0310 	and.w	r3, r3, #16
 8008920:	2b00      	cmp	r3, #0
 8008922:	d010      	beq.n	8008946 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	4b64      	ldr	r3, [pc, #400]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008930:	429a      	cmp	r2, r3
 8008932:	d908      	bls.n	8008946 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008934:	4b61      	ldr	r3, [pc, #388]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	495e      	ldr	r1, [pc, #376]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008942:	4313      	orrs	r3, r2
 8008944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d010      	beq.n	8008974 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69da      	ldr	r2, [r3, #28]
 8008956:	4b59      	ldr	r3, [pc, #356]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800895e:	429a      	cmp	r2, r3
 8008960:	d908      	bls.n	8008974 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008962:	4b56      	ldr	r3, [pc, #344]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	4953      	ldr	r1, [pc, #332]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008970:	4313      	orrs	r3, r2
 8008972:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d010      	beq.n	80089a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	4b4d      	ldr	r3, [pc, #308]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	429a      	cmp	r2, r3
 800898e:	d908      	bls.n	80089a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008990:	4b4a      	ldr	r3, [pc, #296]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	f023 020f 	bic.w	r2, r3, #15
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4947      	ldr	r1, [pc, #284]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d055      	beq.n	8008a5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089ae:	4b43      	ldr	r3, [pc, #268]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	4940      	ldr	r1, [pc, #256]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d107      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089c8:	4b3c      	ldr	r3, [pc, #240]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d121      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0f6      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d107      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089e0:	4b36      	ldr	r3, [pc, #216]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d115      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0ea      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d107      	bne.n	8008a08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089f8:	4b30      	ldr	r3, [pc, #192]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0de      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a08:	4b2c      	ldr	r3, [pc, #176]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e0d6      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a18:	4b28      	ldr	r3, [pc, #160]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f023 0207 	bic.w	r2, r3, #7
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4925      	ldr	r1, [pc, #148]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a2a:	f7f9 fd9b 	bl	8002564 <HAL_GetTick>
 8008a2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a30:	e00a      	b.n	8008a48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a32:	f7f9 fd97 	bl	8002564 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d901      	bls.n	8008a48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e0be      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a48:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d1eb      	bne.n	8008a32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d010      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	4b14      	ldr	r3, [pc, #80]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d208      	bcs.n	8008a88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a76:	4b11      	ldr	r3, [pc, #68]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	f023 020f 	bic.w	r2, r3, #15
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	490e      	ldr	r1, [pc, #56]	@ (8008abc <HAL_RCC_ClockConfig+0x244>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a88:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 030f 	and.w	r3, r3, #15
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d214      	bcs.n	8008ac0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a96:	4b08      	ldr	r3, [pc, #32]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 020f 	bic.w	r2, r3, #15
 8008a9e:	4906      	ldr	r1, [pc, #24]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aa6:	4b04      	ldr	r3, [pc, #16]	@ (8008ab8 <HAL_RCC_ClockConfig+0x240>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d005      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e086      	b.n	8008bc6 <HAL_RCC_ClockConfig+0x34e>
 8008ab8:	52002000 	.word	0x52002000
 8008abc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d010      	beq.n	8008aee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691a      	ldr	r2, [r3, #16]
 8008ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d208      	bcs.n	8008aee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008adc:	4b3c      	ldr	r3, [pc, #240]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	4939      	ldr	r1, [pc, #228]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	4b34      	ldr	r3, [pc, #208]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d208      	bcs.n	8008b1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b0a:	4b31      	ldr	r3, [pc, #196]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	492e      	ldr	r1, [pc, #184]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d010      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	4b28      	ldr	r3, [pc, #160]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d208      	bcs.n	8008b4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b38:	4b25      	ldr	r3, [pc, #148]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	4922      	ldr	r1, [pc, #136]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d010      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d208      	bcs.n	8008b78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b66:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	4917      	ldr	r1, [pc, #92]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b74:	4313      	orrs	r3, r2
 8008b76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b78:	f000 f834 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	4b14      	ldr	r3, [pc, #80]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	4912      	ldr	r1, [pc, #72]	@ (8008bd4 <HAL_RCC_ClockConfig+0x35c>)
 8008b8a:	5ccb      	ldrb	r3, [r1, r3]
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b96:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd0 <HAL_RCC_ClockConfig+0x358>)
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd4 <HAL_RCC_ClockConfig+0x35c>)
 8008ba0:	5cd3      	ldrb	r3, [r2, r3]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd8 <HAL_RCC_ClockConfig+0x360>)
 8008bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8008bdc <HAL_RCC_ClockConfig+0x364>)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008be0 <HAL_RCC_ClockConfig+0x368>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f9 fc88 	bl	80024d0 <HAL_InitTick>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	080114e0 	.word	0x080114e0
 8008bd8:	24000008 	.word	0x24000008
 8008bdc:	24000004 	.word	0x24000004
 8008be0:	2400000c 	.word	0x2400000c

08008be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	@ 0x24
 8008be8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bea:	4bb3      	ldr	r3, [pc, #716]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bf2:	2b18      	cmp	r3, #24
 8008bf4:	f200 8155 	bhi.w	8008ea2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c65 	.word	0x08008c65
 8008c04:	08008ea3 	.word	0x08008ea3
 8008c08:	08008ea3 	.word	0x08008ea3
 8008c0c:	08008ea3 	.word	0x08008ea3
 8008c10:	08008ea3 	.word	0x08008ea3
 8008c14:	08008ea3 	.word	0x08008ea3
 8008c18:	08008ea3 	.word	0x08008ea3
 8008c1c:	08008ea3 	.word	0x08008ea3
 8008c20:	08008c8b 	.word	0x08008c8b
 8008c24:	08008ea3 	.word	0x08008ea3
 8008c28:	08008ea3 	.word	0x08008ea3
 8008c2c:	08008ea3 	.word	0x08008ea3
 8008c30:	08008ea3 	.word	0x08008ea3
 8008c34:	08008ea3 	.word	0x08008ea3
 8008c38:	08008ea3 	.word	0x08008ea3
 8008c3c:	08008ea3 	.word	0x08008ea3
 8008c40:	08008c91 	.word	0x08008c91
 8008c44:	08008ea3 	.word	0x08008ea3
 8008c48:	08008ea3 	.word	0x08008ea3
 8008c4c:	08008ea3 	.word	0x08008ea3
 8008c50:	08008ea3 	.word	0x08008ea3
 8008c54:	08008ea3 	.word	0x08008ea3
 8008c58:	08008ea3 	.word	0x08008ea3
 8008c5c:	08008ea3 	.word	0x08008ea3
 8008c60:	08008c97 	.word	0x08008c97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c64:	4b94      	ldr	r3, [pc, #592]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d009      	beq.n	8008c84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c70:	4b91      	ldr	r3, [pc, #580]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	08db      	lsrs	r3, r3, #3
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	4a90      	ldr	r2, [pc, #576]	@ (8008ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008c82:	e111      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c84:	4b8d      	ldr	r3, [pc, #564]	@ (8008ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c86:	61bb      	str	r3, [r7, #24]
      break;
 8008c88:	e10e      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c8c:	61bb      	str	r3, [r7, #24]
      break;
 8008c8e:	e10b      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008c90:	4b8c      	ldr	r3, [pc, #560]	@ (8008ec4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c92:	61bb      	str	r3, [r7, #24]
      break;
 8008c94:	e108      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c96:	4b88      	ldr	r3, [pc, #544]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9a:	f003 0303 	and.w	r3, r3, #3
 8008c9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ca0:	4b85      	ldr	r3, [pc, #532]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008caa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cac:	4b82      	ldr	r3, [pc, #520]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cb6:	4b80      	ldr	r3, [pc, #512]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cba:	08db      	lsrs	r3, r3, #3
 8008cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80e1 	beq.w	8008e9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	f000 8083 	beq.w	8008de8 <HAL_RCC_GetSysClockFreq+0x204>
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	f200 80a1 	bhi.w	8008e2c <HAL_RCC_GetSysClockFreq+0x248>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x114>
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d056      	beq.n	8008da4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008cf6:	e099      	b.n	8008e2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02d      	beq.n	8008d60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d04:	4b6c      	ldr	r3, [pc, #432]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	08db      	lsrs	r3, r3, #3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	4a6b      	ldr	r2, [pc, #428]	@ (8008ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
 8008d14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	ee07 3a90 	vmov	s15, r3
 8008d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b62      	ldr	r3, [pc, #392]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008d5e:	e087      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ecc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b51      	ldr	r3, [pc, #324]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008da2:	e065      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b40      	ldr	r3, [pc, #256]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008de6:	e043      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008ed4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e2a:	e021      	b.n	8008e70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e70:	4b11      	ldr	r3, [pc, #68]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e74:	0a5b      	lsrs	r3, r3, #9
 8008e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e94:	ee17 3a90 	vmov	r3, s15
 8008e98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008e9a:	e005      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61bb      	str	r3, [r7, #24]
      break;
 8008ea0:	e002      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008ea2:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ea4:	61bb      	str	r3, [r7, #24]
      break;
 8008ea6:	bf00      	nop
  }

  return sysclockfreq;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3724      	adds	r7, #36	@ 0x24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	003d0900 	.word	0x003d0900
 8008ec4:	016e3600 	.word	0x016e3600
 8008ec8:	46000000 	.word	0x46000000
 8008ecc:	4c742400 	.word	0x4c742400
 8008ed0:	4a742400 	.word	0x4a742400
 8008ed4:	4bb71b00 	.word	0x4bb71b00

08008ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ede:	f7ff fe81 	bl	8008be4 <HAL_RCC_GetSysClockFreq>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b10      	ldr	r3, [pc, #64]	@ (8008f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	0a1b      	lsrs	r3, r3, #8
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	490f      	ldr	r1, [pc, #60]	@ (8008f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008ef0:	5ccb      	ldrb	r3, [r1, r3]
 8008ef2:	f003 031f 	and.w	r3, r3, #31
 8008ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8008efa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008efc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	4a09      	ldr	r2, [pc, #36]	@ (8008f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008f06:	5cd3      	ldrb	r3, [r2, r3]
 8008f08:	f003 031f 	and.w	r3, r3, #31
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f12:	4a07      	ldr	r2, [pc, #28]	@ (8008f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f16:	4a07      	ldr	r2, [pc, #28]	@ (8008f34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f1c:	4b04      	ldr	r3, [pc, #16]	@ (8008f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	58024400 	.word	0x58024400
 8008f2c:	080114e0 	.word	0x080114e0
 8008f30:	24000008 	.word	0x24000008
 8008f34:	24000004 	.word	0x24000004

08008f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f3c:	f7ff ffcc 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 8008f40:	4602      	mov	r2, r0
 8008f42:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	091b      	lsrs	r3, r3, #4
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	4904      	ldr	r1, [pc, #16]	@ (8008f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f4e:	5ccb      	ldrb	r3, [r1, r3]
 8008f50:	f003 031f 	and.w	r3, r3, #31
 8008f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	080114e0 	.word	0x080114e0

08008f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f68:	f7ff ffb6 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	4904      	ldr	r1, [pc, #16]	@ (8008f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f7a:	5ccb      	ldrb	r3, [r1, r3]
 8008f7c:	f003 031f 	and.w	r3, r3, #31
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	080114e0 	.word	0x080114e0

08008f90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f94:	b0c6      	sub	sp, #280	@ 0x118
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	ea54 0305 	orrs.w	r3, r4, r5
 8008fba:	d049      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fc6:	d02f      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fcc:	d828      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fd2:	d01a      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fd8:	d822      	bhi.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fe2:	d007      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fe4:	e01c      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe6:	4bab      	ldr	r3, [pc, #684]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fea:	4aaa      	ldr	r2, [pc, #680]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ff2:	e01a      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 fa49 	bl	800b494 <RCCEx_PLL2_Config>
 8009002:	4603      	mov	r3, r0
 8009004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009008:	e00f      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900e:	3328      	adds	r3, #40	@ 0x28
 8009010:	2102      	movs	r1, #2
 8009012:	4618      	mov	r0, r3
 8009014:	f002 faf0 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800901e:	e004      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009026:	e000      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800902a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009032:	4b98      	ldr	r3, [pc, #608]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009036:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800903a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009040:	4a94      	ldr	r2, [pc, #592]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009042:	430b      	orrs	r3, r1
 8009044:	6513      	str	r3, [r2, #80]	@ 0x50
 8009046:	e003      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800904c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800905c:	f04f 0900 	mov.w	r9, #0
 8009060:	ea58 0309 	orrs.w	r3, r8, r9
 8009064:	d047      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906c:	2b04      	cmp	r3, #4
 800906e:	d82a      	bhi.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009070:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	0800908d 	.word	0x0800908d
 800907c:	0800909b 	.word	0x0800909b
 8009080:	080090b1 	.word	0x080090b1
 8009084:	080090cf 	.word	0x080090cf
 8009088:	080090cf 	.word	0x080090cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800908c:	4b81      	ldr	r3, [pc, #516]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4a80      	ldr	r2, [pc, #512]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009098:	e01a      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800909a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909e:	3308      	adds	r3, #8
 80090a0:	2100      	movs	r1, #0
 80090a2:	4618      	mov	r0, r3
 80090a4:	f002 f9f6 	bl	800b494 <RCCEx_PLL2_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090ae:	e00f      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b4:	3328      	adds	r3, #40	@ 0x28
 80090b6:	2100      	movs	r1, #0
 80090b8:	4618      	mov	r0, r3
 80090ba:	f002 fa9d 	bl	800b5f8 <RCCEx_PLL3_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090c4:	e004      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090cc:	e000      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80090ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090d8:	4b6e      	ldr	r3, [pc, #440]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090dc:	f023 0107 	bic.w	r1, r3, #7
 80090e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e6:	4a6b      	ldr	r2, [pc, #428]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090e8:	430b      	orrs	r3, r1
 80090ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80090ec:	e003      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80090f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009102:	f04f 0b00 	mov.w	fp, #0
 8009106:	ea5a 030b 	orrs.w	r3, sl, fp
 800910a:	d05b      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800910c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009114:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009118:	d03b      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800911a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800911e:	d834      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009120:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009124:	d037      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009126:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800912a:	d82e      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800912c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009130:	d033      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009132:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009136:	d828      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800913c:	d01a      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800913e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009142:	d822      	bhi.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009148:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800914c:	d007      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800914e:	e01c      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009150:	4b50      	ldr	r3, [pc, #320]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	4a4f      	ldr	r2, [pc, #316]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800915a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800915c:	e01e      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800915e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009162:	3308      	adds	r3, #8
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f002 f994 	bl	800b494 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009172:	e013      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009178:	3328      	adds	r3, #40	@ 0x28
 800917a:	2100      	movs	r1, #0
 800917c:	4618      	mov	r0, r3
 800917e:	f002 fa3b 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009188:	e008      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009190:	e004      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009192:	bf00      	nop
 8009194:	e002      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009196:	bf00      	nop
 8009198:	e000      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800919a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10b      	bne.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80091a4:	4b3b      	ldr	r3, [pc, #236]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80091ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80091b4:	4a37      	ldr	r2, [pc, #220]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091b6:	430b      	orrs	r3, r1
 80091b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80091ba:	e003      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80091d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091d4:	2300      	movs	r3, #0
 80091d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80091da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d05d      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80091e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80091f0:	d03b      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80091f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80091f6:	d834      	bhi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80091f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091fc:	d037      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80091fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009202:	d82e      	bhi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009208:	d033      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800920a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800920e:	d828      	bhi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009210:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009214:	d01a      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800921a:	d822      	bhi.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009224:	d007      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009226:	e01c      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009228:	4b1a      	ldr	r3, [pc, #104]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4a19      	ldr	r2, [pc, #100]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800922e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009234:	e01e      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923a:	3308      	adds	r3, #8
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f002 f928 	bl	800b494 <RCCEx_PLL2_Config>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800924a:	e013      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009250:	3328      	adds	r3, #40	@ 0x28
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f002 f9cf 	bl	800b5f8 <RCCEx_PLL3_Config>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009260:	e008      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009268:	e004      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800926a:	bf00      	nop
 800926c:	e002      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10d      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800927c:	4b05      	ldr	r3, [pc, #20]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800927e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009280:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800928c:	4a01      	ldr	r2, [pc, #4]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800928e:	430b      	orrs	r3, r1
 8009290:	6593      	str	r3, [r2, #88]	@ 0x58
 8009292:	e005      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800929c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80092a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80092ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4313      	orrs	r3, r2
 80092be:	d03a      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092c6:	2b30      	cmp	r3, #48	@ 0x30
 80092c8:	d01f      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80092ca:	2b30      	cmp	r3, #48	@ 0x30
 80092cc:	d819      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	d00c      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d815      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d019      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80092da:	2b10      	cmp	r3, #16
 80092dc:	d111      	bne.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092de:	4baa      	ldr	r3, [pc, #680]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	4aa9      	ldr	r2, [pc, #676]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80092ea:	e011      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f0:	3308      	adds	r3, #8
 80092f2:	2102      	movs	r1, #2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f002 f8cd 	bl	800b494 <RCCEx_PLL2_Config>
 80092fa:	4603      	mov	r3, r0
 80092fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009300:	e006      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009308:	e002      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800930e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009318:	4b9b      	ldr	r3, [pc, #620]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800931a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800931c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009326:	4a98      	ldr	r2, [pc, #608]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009328:	430b      	orrs	r3, r1
 800932a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800932c:	e003      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009346:	2300      	movs	r3, #0
 8009348:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800934c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d051      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800935c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009360:	d035      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009366:	d82e      	bhi.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009368:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800936c:	d031      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800936e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009372:	d828      	bhi.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009378:	d01a      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800937e:	d822      	bhi.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009388:	d007      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800938a:	e01c      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938c:	4b7e      	ldr	r3, [pc, #504]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800938e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009390:	4a7d      	ldr	r2, [pc, #500]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009398:	e01c      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939e:	3308      	adds	r3, #8
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f002 f876 	bl	800b494 <RCCEx_PLL2_Config>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093ae:	e011      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b4:	3328      	adds	r3, #40	@ 0x28
 80093b6:	2100      	movs	r1, #0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f002 f91d 	bl	800b5f8 <RCCEx_PLL3_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093c4:	e006      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093cc:	e002      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80093ce:	bf00      	nop
 80093d0:	e000      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80093d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093dc:	4b6a      	ldr	r3, [pc, #424]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80093e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093ea:	4a67      	ldr	r2, [pc, #412]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093ec:	430b      	orrs	r3, r1
 80093ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80093f0:	e003      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009406:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800940a:	2300      	movs	r3, #0
 800940c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009410:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009414:	460b      	mov	r3, r1
 8009416:	4313      	orrs	r3, r2
 8009418:	d053      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800941a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009424:	d033      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800942a:	d82c      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800942c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009430:	d02f      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009432:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009436:	d826      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009438:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800943c:	d02b      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800943e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009442:	d820      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009448:	d012      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800944a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800944e:	d81a      	bhi.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009450:	2b00      	cmp	r3, #0
 8009452:	d022      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009458:	d115      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800945a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800945e:	3308      	adds	r3, #8
 8009460:	2101      	movs	r1, #1
 8009462:	4618      	mov	r0, r3
 8009464:	f002 f816 	bl	800b494 <RCCEx_PLL2_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800946e:	e015      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009474:	3328      	adds	r3, #40	@ 0x28
 8009476:	2101      	movs	r1, #1
 8009478:	4618      	mov	r0, r3
 800947a:	f002 f8bd 	bl	800b5f8 <RCCEx_PLL3_Config>
 800947e:	4603      	mov	r3, r0
 8009480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009484:	e00a      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800948c:	e006      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800948e:	bf00      	nop
 8009490:	e004      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009492:	bf00      	nop
 8009494:	e002      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009496:	bf00      	nop
 8009498:	e000      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800949a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800949c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094a4:	4b38      	ldr	r3, [pc, #224]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094b2:	4a35      	ldr	r2, [pc, #212]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094b4:	430b      	orrs	r3, r1
 80094b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80094b8:	e003      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80094ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094d2:	2300      	movs	r3, #0
 80094d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094d8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094dc:	460b      	mov	r3, r1
 80094de:	4313      	orrs	r3, r2
 80094e0:	d058      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80094e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094ee:	d033      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80094f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094f4:	d82c      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094fa:	d02f      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80094fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009500:	d826      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009502:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009506:	d02b      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009508:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800950c:	d820      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800950e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009512:	d012      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009518:	d81a      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d022      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800951e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009522:	d115      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009528:	3308      	adds	r3, #8
 800952a:	2101      	movs	r1, #1
 800952c:	4618      	mov	r0, r3
 800952e:	f001 ffb1 	bl	800b494 <RCCEx_PLL2_Config>
 8009532:	4603      	mov	r3, r0
 8009534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009538:	e015      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800953a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800953e:	3328      	adds	r3, #40	@ 0x28
 8009540:	2101      	movs	r1, #1
 8009542:	4618      	mov	r0, r3
 8009544:	f002 f858 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800954e:	e00a      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009556:	e006      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009558:	bf00      	nop
 800955a:	e004      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800955c:	bf00      	nop
 800955e:	e002      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009566:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10e      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800956e:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009572:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800957e:	4a02      	ldr	r2, [pc, #8]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009580:	430b      	orrs	r3, r1
 8009582:	6593      	str	r3, [r2, #88]	@ 0x58
 8009584:	e006      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009586:	bf00      	nop
 8009588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80095a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095a4:	2300      	movs	r3, #0
 80095a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80095aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4313      	orrs	r3, r2
 80095b2:	d037      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095be:	d00e      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095c4:	d816      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d018      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80095ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095ce:	d111      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095d0:	4bc4      	ldr	r3, [pc, #784]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	4ac3      	ldr	r2, [pc, #780]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095dc:	e00f      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e2:	3308      	adds	r3, #8
 80095e4:	2101      	movs	r1, #1
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 ff54 	bl	800b494 <RCCEx_PLL2_Config>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095f2:	e004      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095fa:	e000      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80095fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009606:	4bb7      	ldr	r3, [pc, #732]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800960a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800960e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009614:	4ab3      	ldr	r2, [pc, #716]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009616:	430b      	orrs	r3, r1
 8009618:	6513      	str	r3, [r2, #80]	@ 0x50
 800961a:	e003      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009630:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009634:	2300      	movs	r3, #0
 8009636:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800963a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800963e:	460b      	mov	r3, r1
 8009640:	4313      	orrs	r3, r2
 8009642:	d039      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800964a:	2b03      	cmp	r3, #3
 800964c:	d81c      	bhi.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009691 	.word	0x08009691
 8009658:	08009665 	.word	0x08009665
 800965c:	08009673 	.word	0x08009673
 8009660:	08009691 	.word	0x08009691
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009664:	4b9f      	ldr	r3, [pc, #636]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	4a9e      	ldr	r2, [pc, #632]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800966a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800966e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009670:	e00f      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009676:	3308      	adds	r3, #8
 8009678:	2102      	movs	r1, #2
 800967a:	4618      	mov	r0, r3
 800967c:	f001 ff0a 	bl	800b494 <RCCEx_PLL2_Config>
 8009680:	4603      	mov	r3, r0
 8009682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009686:	e004      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800968e:	e000      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10a      	bne.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800969a:	4b92      	ldr	r3, [pc, #584]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800969c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969e:	f023 0103 	bic.w	r1, r3, #3
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096a8:	4a8e      	ldr	r2, [pc, #568]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096aa:	430b      	orrs	r3, r1
 80096ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096ae:	e003      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80096c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096c8:	2300      	movs	r3, #0
 80096ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4313      	orrs	r3, r2
 80096d6:	f000 8099 	beq.w	800980c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096da:	4b83      	ldr	r3, [pc, #524]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a82      	ldr	r2, [pc, #520]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80096e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096e6:	f7f8 ff3d 	bl	8002564 <HAL_GetTick>
 80096ea:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096ee:	e00b      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f0:	f7f8 ff38 	bl	8002564 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b64      	cmp	r3, #100	@ 0x64
 80096fe:	d903      	bls.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009706:	e005      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009708:	4b77      	ldr	r3, [pc, #476]	@ (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0ed      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009718:	2b00      	cmp	r3, #0
 800971a:	d173      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800971c:	4b71      	ldr	r3, [pc, #452]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800971e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009728:	4053      	eors	r3, r2
 800972a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800972e:	2b00      	cmp	r3, #0
 8009730:	d015      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009732:	4b6c      	ldr	r3, [pc, #432]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800973a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800973e:	4b69      	ldr	r3, [pc, #420]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009742:	4a68      	ldr	r2, [pc, #416]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009748:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800974a:	4b66      	ldr	r3, [pc, #408]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800974c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800974e:	4a65      	ldr	r2, [pc, #404]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009754:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009756:	4a63      	ldr	r2, [pc, #396]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800975c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800975e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800976a:	d118      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800976c:	f7f8 fefa 	bl	8002564 <HAL_GetTick>
 8009770:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009774:	e00d      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009776:	f7f8 fef5 	bl	8002564 <HAL_GetTick>
 800977a:	4602      	mov	r2, r0
 800977c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009780:	1ad2      	subs	r2, r2, r3
 8009782:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009786:	429a      	cmp	r2, r3
 8009788:	d903      	bls.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009790:	e005      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009792:	4b54      	ldr	r3, [pc, #336]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0eb      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800979e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d129      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097b6:	d10e      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80097b8:	4b4a      	ldr	r3, [pc, #296]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097c8:	091a      	lsrs	r2, r3, #4
 80097ca:	4b48      	ldr	r3, [pc, #288]	@ (80098ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80097cc:	4013      	ands	r3, r2
 80097ce:	4a45      	ldr	r2, [pc, #276]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097d0:	430b      	orrs	r3, r1
 80097d2:	6113      	str	r3, [r2, #16]
 80097d4:	e005      	b.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80097d6:	4b43      	ldr	r3, [pc, #268]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	4a42      	ldr	r2, [pc, #264]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80097e0:	6113      	str	r3, [r2, #16]
 80097e2:	4b40      	ldr	r3, [pc, #256]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80097e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097f2:	4a3c      	ldr	r2, [pc, #240]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097f4:	430b      	orrs	r3, r1
 80097f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097f8:	e008      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009802:	e003      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f002 0301 	and.w	r3, r2, #1
 8009818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800981c:	2300      	movs	r3, #0
 800981e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009822:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009826:	460b      	mov	r3, r1
 8009828:	4313      	orrs	r3, r2
 800982a:	f000 808f 	beq.w	800994c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800982e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009834:	2b28      	cmp	r3, #40	@ 0x28
 8009836:	d871      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009838:	a201      	add	r2, pc, #4	@ (adr r2, 8009840 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800983a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983e:	bf00      	nop
 8009840:	08009925 	.word	0x08009925
 8009844:	0800991d 	.word	0x0800991d
 8009848:	0800991d 	.word	0x0800991d
 800984c:	0800991d 	.word	0x0800991d
 8009850:	0800991d 	.word	0x0800991d
 8009854:	0800991d 	.word	0x0800991d
 8009858:	0800991d 	.word	0x0800991d
 800985c:	0800991d 	.word	0x0800991d
 8009860:	080098f1 	.word	0x080098f1
 8009864:	0800991d 	.word	0x0800991d
 8009868:	0800991d 	.word	0x0800991d
 800986c:	0800991d 	.word	0x0800991d
 8009870:	0800991d 	.word	0x0800991d
 8009874:	0800991d 	.word	0x0800991d
 8009878:	0800991d 	.word	0x0800991d
 800987c:	0800991d 	.word	0x0800991d
 8009880:	08009907 	.word	0x08009907
 8009884:	0800991d 	.word	0x0800991d
 8009888:	0800991d 	.word	0x0800991d
 800988c:	0800991d 	.word	0x0800991d
 8009890:	0800991d 	.word	0x0800991d
 8009894:	0800991d 	.word	0x0800991d
 8009898:	0800991d 	.word	0x0800991d
 800989c:	0800991d 	.word	0x0800991d
 80098a0:	08009925 	.word	0x08009925
 80098a4:	0800991d 	.word	0x0800991d
 80098a8:	0800991d 	.word	0x0800991d
 80098ac:	0800991d 	.word	0x0800991d
 80098b0:	0800991d 	.word	0x0800991d
 80098b4:	0800991d 	.word	0x0800991d
 80098b8:	0800991d 	.word	0x0800991d
 80098bc:	0800991d 	.word	0x0800991d
 80098c0:	08009925 	.word	0x08009925
 80098c4:	0800991d 	.word	0x0800991d
 80098c8:	0800991d 	.word	0x0800991d
 80098cc:	0800991d 	.word	0x0800991d
 80098d0:	0800991d 	.word	0x0800991d
 80098d4:	0800991d 	.word	0x0800991d
 80098d8:	0800991d 	.word	0x0800991d
 80098dc:	0800991d 	.word	0x0800991d
 80098e0:	08009925 	.word	0x08009925
 80098e4:	58024400 	.word	0x58024400
 80098e8:	58024800 	.word	0x58024800
 80098ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f4:	3308      	adds	r3, #8
 80098f6:	2101      	movs	r1, #1
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 fdcb 	bl	800b494 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009904:	e00f      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990a:	3328      	adds	r3, #40	@ 0x28
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f001 fe72 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10a      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800992e:	4bbf      	ldr	r3, [pc, #764]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009932:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800993c:	4abb      	ldr	r2, [pc, #748]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800993e:	430b      	orrs	r3, r1
 8009940:	6553      	str	r3, [r2, #84]	@ 0x54
 8009942:	e003      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f002 0302 	and.w	r3, r2, #2
 8009958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800995c:	2300      	movs	r3, #0
 800995e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d041      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009972:	2b05      	cmp	r3, #5
 8009974:	d824      	bhi.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	080099c9 	.word	0x080099c9
 8009980:	08009995 	.word	0x08009995
 8009984:	080099ab 	.word	0x080099ab
 8009988:	080099c9 	.word	0x080099c9
 800998c:	080099c9 	.word	0x080099c9
 8009990:	080099c9 	.word	0x080099c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009998:	3308      	adds	r3, #8
 800999a:	2101      	movs	r1, #1
 800999c:	4618      	mov	r0, r3
 800999e:	f001 fd79 	bl	800b494 <RCCEx_PLL2_Config>
 80099a2:	4603      	mov	r3, r0
 80099a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80099a8:	e00f      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	3328      	adds	r3, #40	@ 0x28
 80099b0:	2101      	movs	r1, #1
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 fe20 	bl	800b5f8 <RCCEx_PLL3_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80099be:	e004      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099c6:	e000      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80099c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80099d2:	4b96      	ldr	r3, [pc, #600]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d6:	f023 0107 	bic.w	r1, r3, #7
 80099da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099e0:	4a92      	ldr	r2, [pc, #584]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099e2:	430b      	orrs	r3, r1
 80099e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80099e6:	e003      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f002 0304 	and.w	r3, r2, #4
 80099fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a00:	2300      	movs	r3, #0
 8009a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a06:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	d044      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a18:	2b05      	cmp	r3, #5
 8009a1a:	d825      	bhi.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a71 	.word	0x08009a71
 8009a28:	08009a3d 	.word	0x08009a3d
 8009a2c:	08009a53 	.word	0x08009a53
 8009a30:	08009a71 	.word	0x08009a71
 8009a34:	08009a71 	.word	0x08009a71
 8009a38:	08009a71 	.word	0x08009a71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a40:	3308      	adds	r3, #8
 8009a42:	2101      	movs	r1, #1
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 fd25 	bl	800b494 <RCCEx_PLL2_Config>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a50:	e00f      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a56:	3328      	adds	r3, #40	@ 0x28
 8009a58:	2101      	movs	r1, #1
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fdcc 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a66:	e004      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a6e:	e000      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7e:	f023 0107 	bic.w	r1, r3, #7
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8a:	4a68      	ldr	r2, [pc, #416]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a90:	e003      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f002 0320 	and.w	r3, r2, #32
 8009aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ab0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	d055      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ac6:	d033      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009acc:	d82c      	bhi.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad2:	d02f      	beq.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad8:	d826      	bhi.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ade:	d02b      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009ae0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ae4:	d820      	bhi.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aea:	d012      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009af0:	d81a      	bhi.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d022      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009afa:	d115      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b00:	3308      	adds	r3, #8
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fcc5 	bl	800b494 <RCCEx_PLL2_Config>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009b10:	e015      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b16:	3328      	adds	r3, #40	@ 0x28
 8009b18:	2102      	movs	r1, #2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 fd6c 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009b26:	e00a      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b2e:	e006      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009b30:	bf00      	nop
 8009b32:	e004      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009b34:	bf00      	nop
 8009b36:	e002      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009b38:	bf00      	nop
 8009b3a:	e000      	b.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10b      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b46:	4b39      	ldr	r3, [pc, #228]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b56:	4a35      	ldr	r2, [pc, #212]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b5c:	e003      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009b72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b7c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009b80:	460b      	mov	r3, r1
 8009b82:	4313      	orrs	r3, r2
 8009b84:	d058      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b92:	d033      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009b94:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009b98:	d82c      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b9e:	d02f      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ba4:	d826      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009baa:	d02b      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009bac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bb0:	d820      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb6:	d012      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bbc:	d81a      	bhi.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d022      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc6:	d115      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bcc:	3308      	adds	r3, #8
 8009bce:	2100      	movs	r1, #0
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 fc5f 	bl	800b494 <RCCEx_PLL2_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009bdc:	e015      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be2:	3328      	adds	r3, #40	@ 0x28
 8009be4:	2102      	movs	r1, #2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f001 fd06 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009bec:	4603      	mov	r3, r0
 8009bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009bf2:	e00a      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bfa:	e006      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009bfc:	bf00      	nop
 8009bfe:	e004      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009c00:	bf00      	nop
 8009c02:	e002      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009c04:	bf00      	nop
 8009c06:	e000      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10e      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c22:	4a02      	ldr	r2, [pc, #8]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c24:	430b      	orrs	r3, r1
 8009c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c28:	e006      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009c2a:	bf00      	nop
 8009c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c52:	460b      	mov	r3, r1
 8009c54:	4313      	orrs	r3, r2
 8009c56:	d055      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c64:	d033      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009c66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c6a:	d82c      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c70:	d02f      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c76:	d826      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c7c:	d02b      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009c7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c82:	d820      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c88:	d012      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c8e:	d81a      	bhi.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d022      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c98:	d115      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9e:	3308      	adds	r3, #8
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f001 fbf6 	bl	800b494 <RCCEx_PLL2_Config>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009cae:	e015      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb4:	3328      	adds	r3, #40	@ 0x28
 8009cb6:	2102      	movs	r1, #2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fc9d 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009cc4:	e00a      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ccc:	e006      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009cce:	bf00      	nop
 8009cd0:	e004      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009cd2:	bf00      	nop
 8009cd4:	e002      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cf4:	4a9c      	ldr	r2, [pc, #624]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cfa:	e003      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f002 0308 	and.w	r3, r2, #8
 8009d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d14:	2300      	movs	r3, #0
 8009d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4313      	orrs	r3, r2
 8009d22:	d01e      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d30:	d10c      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d36:	3328      	adds	r3, #40	@ 0x28
 8009d38:	2102      	movs	r1, #2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 fc5c 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009d4c:	4b86      	ldr	r3, [pc, #536]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d5c:	4a82      	ldr	r2, [pc, #520]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f002 0310 	and.w	r3, r2, #16
 8009d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d72:	2300      	movs	r3, #0
 8009d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d78:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	d01e      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d8e:	d10c      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d94:	3328      	adds	r3, #40	@ 0x28
 8009d96:	2102      	movs	r1, #2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 fc2d 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009daa:	4b6f      	ldr	r3, [pc, #444]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dba:	4a6b      	ldr	r2, [pc, #428]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dce:	2300      	movs	r3, #0
 8009dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dd2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	d03e      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009de8:	d022      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dee:	d81b      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009df8:	d00b      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009dfa:	e015      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e00:	3308      	adds	r3, #8
 8009e02:	2100      	movs	r1, #0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 fb45 	bl	800b494 <RCCEx_PLL2_Config>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009e10:	e00f      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e16:	3328      	adds	r3, #40	@ 0x28
 8009e18:	2102      	movs	r1, #2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fbec 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009e26:	e004      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e2e:	e000      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e4a:	4a47      	ldr	r2, [pc, #284]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009e66:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e68:	2300      	movs	r3, #0
 8009e6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e70:	460b      	mov	r3, r1
 8009e72:	4313      	orrs	r3, r2
 8009e74:	d03b      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e82:	d01f      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e88:	d818      	bhi.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e8e:	d003      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e94:	d007      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009e96:	e011      	b.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e98:	4b33      	ldr	r3, [pc, #204]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9c:	4a32      	ldr	r2, [pc, #200]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ea4:	e00f      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eaa:	3328      	adds	r3, #40	@ 0x28
 8009eac:	2101      	movs	r1, #1
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 fba2 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009eba:	e004      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10b      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ece:	4b26      	ldr	r3, [pc, #152]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ede:	4a22      	ldr	r2, [pc, #136]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ee4:	e003      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009efc:	2300      	movs	r3, #0
 8009efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f00:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f04:	460b      	mov	r3, r1
 8009f06:	4313      	orrs	r3, r2
 8009f08:	d034      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d003      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f18:	d007      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009f1a:	e011      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1c:	4b12      	ldr	r3, [pc, #72]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f20:	4a11      	ldr	r2, [pc, #68]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f28:	e00e      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2e:	3308      	adds	r3, #8
 8009f30:	2102      	movs	r1, #2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 faae 	bl	800b494 <RCCEx_PLL2_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f3e:	e003      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10d      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f50:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f5e:	4a02      	ldr	r2, [pc, #8]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f60:	430b      	orrs	r3, r1
 8009f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f64:	e006      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f82:	2300      	movs	r3, #0
 8009f84:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f86:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	d00c      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f94:	3328      	adds	r3, #40	@ 0x28
 8009f96:	2102      	movs	r1, #2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f001 fb2d 	bl	800b5f8 <RCCEx_PLL3_Config>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fb8:	2300      	movs	r3, #0
 8009fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fbc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	d036      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd0:	d018      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd6:	d811      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fdc:	d014      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fe2:	d80b      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d011      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fec:	d106      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fee:	4bb7      	ldr	r3, [pc, #732]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff2:	4ab6      	ldr	r2, [pc, #728]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009ffa:	e008      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a002:	e004      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a004:	bf00      	nop
 800a006:	e002      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a008:	bf00      	nop
 800a00a:	e000      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a00e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a016:	4bad      	ldr	r3, [pc, #692]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a024:	4aa9      	ldr	r2, [pc, #676]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a026:	430b      	orrs	r3, r1
 800a028:	6553      	str	r3, [r2, #84]	@ 0x54
 800a02a:	e003      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a030:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a040:	653b      	str	r3, [r7, #80]	@ 0x50
 800a042:	2300      	movs	r3, #0
 800a044:	657b      	str	r3, [r7, #84]	@ 0x54
 800a046:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a04a:	460b      	mov	r3, r1
 800a04c:	4313      	orrs	r3, r2
 800a04e:	d009      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a050:	4b9e      	ldr	r3, [pc, #632]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a05e:	4a9b      	ldr	r2, [pc, #620]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a060:	430b      	orrs	r3, r1
 800a062:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a070:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a072:	2300      	movs	r3, #0
 800a074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a076:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a07a:	460b      	mov	r3, r1
 800a07c:	4313      	orrs	r3, r2
 800a07e:	d009      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a080:	4b92      	ldr	r3, [pc, #584]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a084:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a08e:	4a8f      	ldr	r2, [pc, #572]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a090:	430b      	orrs	r3, r1
 800a092:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a0a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	d00e      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0b0:	4b86      	ldr	r3, [pc, #536]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	4a85      	ldr	r2, [pc, #532]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a0ba:	6113      	str	r3, [r2, #16]
 800a0bc:	4b83      	ldr	r3, [pc, #524]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0be:	6919      	ldr	r1, [r3, #16]
 800a0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a0c8:	4a80      	ldr	r2, [pc, #512]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0ca:	430b      	orrs	r3, r1
 800a0cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a0da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0dc:	2300      	movs	r3, #0
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	d009      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0ea:	4b78      	ldr	r3, [pc, #480]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f8:	4a74      	ldr	r2, [pc, #464]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a0fa:	430b      	orrs	r3, r1
 800a0fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a10a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a10c:	2300      	movs	r3, #0
 800a10e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a110:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a114:	460b      	mov	r3, r1
 800a116:	4313      	orrs	r3, r2
 800a118:	d00a      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a11a:	4b6c      	ldr	r3, [pc, #432]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a11e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a12a:	4a68      	ldr	r2, [pc, #416]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a12c:	430b      	orrs	r3, r1
 800a12e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	2100      	movs	r1, #0
 800a13a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a142:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a146:	460b      	mov	r3, r1
 800a148:	4313      	orrs	r3, r2
 800a14a:	d011      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a150:	3308      	adds	r3, #8
 800a152:	2100      	movs	r1, #0
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f99d 	bl	800b494 <RCCEx_PLL2_Config>
 800a15a:	4603      	mov	r3, r0
 800a15c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a16c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	2100      	movs	r1, #0
 800a17a:	6239      	str	r1, [r7, #32]
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	627b      	str	r3, [r7, #36]	@ 0x24
 800a182:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a186:	460b      	mov	r3, r1
 800a188:	4313      	orrs	r3, r2
 800a18a:	d011      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a190:	3308      	adds	r3, #8
 800a192:	2101      	movs	r1, #1
 800a194:	4618      	mov	r0, r3
 800a196:	f001 f97d 	bl	800b494 <RCCEx_PLL2_Config>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a1a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	61b9      	str	r1, [r7, #24]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	61fb      	str	r3, [r7, #28]
 800a1c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	d011      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	2102      	movs	r1, #2
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f001 f95d 	bl	800b494 <RCCEx_PLL2_Config>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d003      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	6139      	str	r1, [r7, #16]
 800a1fc:	f003 0308 	and.w	r3, r3, #8
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a206:	460b      	mov	r3, r1
 800a208:	4313      	orrs	r3, r2
 800a20a:	d011      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a210:	3328      	adds	r3, #40	@ 0x28
 800a212:	2100      	movs	r1, #0
 800a214:	4618      	mov	r0, r3
 800a216:	f001 f9ef 	bl	800b5f8 <RCCEx_PLL3_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a22c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	2100      	movs	r1, #0
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a246:	460b      	mov	r3, r1
 800a248:	4313      	orrs	r3, r2
 800a24a:	d011      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a250:	3328      	adds	r3, #40	@ 0x28
 800a252:	2101      	movs	r1, #1
 800a254:	4618      	mov	r0, r3
 800a256:	f001 f9cf 	bl	800b5f8 <RCCEx_PLL3_Config>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a26c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	2100      	movs	r1, #0
 800a27a:	6039      	str	r1, [r7, #0]
 800a27c:	f003 0320 	and.w	r3, r3, #32
 800a280:	607b      	str	r3, [r7, #4]
 800a282:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a286:	460b      	mov	r3, r1
 800a288:	4313      	orrs	r3, r2
 800a28a:	d011      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a290:	3328      	adds	r3, #40	@ 0x28
 800a292:	2102      	movs	r1, #2
 800a294:	4618      	mov	r0, r3
 800a296:	f001 f9af 	bl	800b5f8 <RCCEx_PLL3_Config>
 800a29a:	4603      	mov	r3, r0
 800a29c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a2a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a2b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d101      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e000      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ca:	bf00      	nop
 800a2cc:	58024400 	.word	0x58024400

0800a2d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b090      	sub	sp, #64	@ 0x40
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	f040 8094 	bne.w	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a2e8:	4b9b      	ldr	r3, [pc, #620]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	f200 8087 	bhi.w	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a315 	.word	0x0800a315
 800a304:	0800a33d 	.word	0x0800a33d
 800a308:	0800a365 	.word	0x0800a365
 800a30c:	0800a401 	.word	0x0800a401
 800a310:	0800a38d 	.word	0x0800a38d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a314:	4b90      	ldr	r3, [pc, #576]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a31c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a320:	d108      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a326:	4618      	mov	r0, r3
 800a328:	f000 ff62 	bl	800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a330:	f000 bc93 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a338:	f000 bc8f 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a33c:	4b86      	ldr	r3, [pc, #536]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a348:	d108      	bne.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34a:	f107 0318 	add.w	r3, r7, #24
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fca6 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a358:	f000 bc7f 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a360:	f000 bc7b 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a364:	4b7c      	ldr	r3, [pc, #496]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a36c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a370:	d108      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a372:	f107 030c 	add.w	r3, r7, #12
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fde6 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a380:	f000 bc6b 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a388:	f000 bc67 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a38c:	4b72      	ldr	r3, [pc, #456]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a38e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a390:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a396:	4b70      	ldr	r3, [pc, #448]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d10c      	bne.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d109      	bne.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3a8:	4b6b      	ldr	r3, [pc, #428]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	08db      	lsrs	r3, r3, #3
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	4a6a      	ldr	r2, [pc, #424]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a3b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ba:	e01f      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3bc:	4b66      	ldr	r3, [pc, #408]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c8:	d106      	bne.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3d0:	d102      	bne.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3d2:	4b63      	ldr	r3, [pc, #396]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d6:	e011      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3d8:	4b5f      	ldr	r3, [pc, #380]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3e4:	d106      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ec:	d102      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3ee:	4b5d      	ldr	r3, [pc, #372]	@ (800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f2:	e003      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3f8:	f000 bc2f 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3fc:	f000 bc2d 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a400:	4b59      	ldr	r3, [pc, #356]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a404:	f000 bc29 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a40c:	f000 bc25 	b.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a414:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a418:	430b      	orrs	r3, r1
 800a41a:	f040 80a7 	bne.w	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a41e:	4b4e      	ldr	r3, [pc, #312]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a422:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a426:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a42e:	d054      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a432:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a436:	f200 808b 	bhi.w	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a440:	f000 8083 	beq.w	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a44a:	f200 8081 	bhi.w	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a454:	d02f      	beq.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a45c:	d878      	bhi.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	2b00      	cmp	r3, #0
 800a462:	d004      	beq.n	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a46a:	d012      	beq.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a46c:	e070      	b.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a46e:	4b3a      	ldr	r3, [pc, #232]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a47a:	d107      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a47c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a480:	4618      	mov	r0, r3
 800a482:	f000 feb5 	bl	800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48a:	e3e6      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a490:	e3e3      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a492:	4b31      	ldr	r3, [pc, #196]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a49e:	d107      	bne.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a0:	f107 0318 	add.w	r3, r7, #24
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 fbfb 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ae:	e3d4      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b4:	e3d1      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b6:	4b28      	ldr	r3, [pc, #160]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4c2:	d107      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c4:	f107 030c 	add.w	r3, r7, #12
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 fd3d 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d2:	e3c2      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d8:	e3bf      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4da:	4b1f      	ldr	r3, [pc, #124]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e4:	4b1c      	ldr	r3, [pc, #112]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d10c      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d109      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f6:	4b18      	ldr	r3, [pc, #96]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	08db      	lsrs	r3, r3, #3
 800a4fc:	f003 0303 	and.w	r3, r3, #3
 800a500:	4a16      	ldr	r2, [pc, #88]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a502:	fa22 f303 	lsr.w	r3, r2, r3
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a508:	e01e      	b.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a50a:	4b13      	ldr	r3, [pc, #76]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a516:	d106      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a51e:	d102      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a520:	4b0f      	ldr	r3, [pc, #60]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a524:	e010      	b.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a526:	4b0c      	ldr	r3, [pc, #48]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a52e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a532:	d106      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a53a:	d102      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a53c:	4b09      	ldr	r3, [pc, #36]	@ (800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a540:	e002      	b.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a546:	e388      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a548:	e387      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a54a:	4b07      	ldr	r3, [pc, #28]	@ (800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54e:	e384      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a554:	e381      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
 800a55c:	03d09000 	.word	0x03d09000
 800a560:	003d0900 	.word	0x003d0900
 800a564:	016e3600 	.word	0x016e3600
 800a568:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a56c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a570:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a574:	430b      	orrs	r3, r1
 800a576:	f040 809c 	bne.w	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a57a:	4b9e      	ldr	r3, [pc, #632]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a57c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a57e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a582:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a58a:	d054      	beq.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a592:	f200 808b 	bhi.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a59c:	f000 8083 	beq.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a5a6:	f200 8081 	bhi.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5b0:	d02f      	beq.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5b8:	d878      	bhi.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5c6:	d012      	beq.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a5c8:	e070      	b.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5ca:	4b8a      	ldr	r3, [pc, #552]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5d6:	d107      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fe07 	bl	800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e6:	e338      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ec:	e335      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5ee:	4b81      	ldr	r3, [pc, #516]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5fa:	d107      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5fc:	f107 0318 	add.w	r3, r7, #24
 800a600:	4618      	mov	r0, r3
 800a602:	f000 fb4d 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a60a:	e326      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a610:	e323      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a612:	4b78      	ldr	r3, [pc, #480]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a61a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a61e:	d107      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a620:	f107 030c 	add.w	r3, r7, #12
 800a624:	4618      	mov	r0, r3
 800a626:	f000 fc8f 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a62e:	e314      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a634:	e311      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a636:	4b6f      	ldr	r3, [pc, #444]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a63a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a63e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a640:	4b6c      	ldr	r3, [pc, #432]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d10c      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d109      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a652:	4b68      	ldr	r3, [pc, #416]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	08db      	lsrs	r3, r3, #3
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	4a66      	ldr	r2, [pc, #408]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a65e:	fa22 f303 	lsr.w	r3, r2, r3
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a664:	e01e      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a666:	4b63      	ldr	r3, [pc, #396]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a672:	d106      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a67a:	d102      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a67c:	4b5f      	ldr	r3, [pc, #380]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a680:	e010      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a682:	4b5c      	ldr	r3, [pc, #368]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a68a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a68e:	d106      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a696:	d102      	bne.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a698:	4b59      	ldr	r3, [pc, #356]	@ (800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a69c:	e002      	b.n	800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6a2:	e2da      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6a4:	e2d9      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6a6:	4b57      	ldr	r3, [pc, #348]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6aa:	e2d6      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b0:	e2d3      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a6ba:	430b      	orrs	r3, r1
 800a6bc:	f040 80a7 	bne.w	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a6c0:	4b4c      	ldr	r3, [pc, #304]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a6c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6d0:	d055      	beq.n	800a77e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6d8:	f200 8096 	bhi.w	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6e2:	f000 8084 	beq.w	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a6ec:	f200 808c 	bhi.w	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6f6:	d030      	beq.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6fe:	f200 8083 	bhi.w	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a704:	2b00      	cmp	r3, #0
 800a706:	d004      	beq.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a70e:	d012      	beq.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a710:	e07a      	b.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a712:	4b38      	ldr	r3, [pc, #224]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a71a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a71e:	d107      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fd63 	bl	800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a72e:	e294      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a734:	e291      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a736:	4b2f      	ldr	r3, [pc, #188]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a73e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a742:	d107      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a744:	f107 0318 	add.w	r3, r7, #24
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 faa9 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a752:	e282      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a758:	e27f      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a75a:	4b26      	ldr	r3, [pc, #152]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a766:	d107      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a768:	f107 030c 	add.w	r3, r7, #12
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 fbeb 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a776:	e270      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77c:	e26d      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a77e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a782:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a786:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a788:	4b1a      	ldr	r3, [pc, #104]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b04      	cmp	r3, #4
 800a792:	d10c      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a796:	2b00      	cmp	r3, #0
 800a798:	d109      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a79a:	4b16      	ldr	r3, [pc, #88]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	08db      	lsrs	r3, r3, #3
 800a7a0:	f003 0303 	and.w	r3, r3, #3
 800a7a4:	4a14      	ldr	r2, [pc, #80]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7ac:	e01e      	b.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7ae:	4b11      	ldr	r3, [pc, #68]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7ba:	d106      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7c2:	d102      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7c8:	e010      	b.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7d6:	d106      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7de:	d102      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7e0:	4b07      	ldr	r3, [pc, #28]	@ (800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7e4:	e002      	b.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7ea:	e236      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7ec:	e235      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7ee:	4b05      	ldr	r3, [pc, #20]	@ (800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f2:	e232      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7f4:	58024400 	.word	0x58024400
 800a7f8:	03d09000 	.word	0x03d09000
 800a7fc:	003d0900 	.word	0x003d0900
 800a800:	016e3600 	.word	0x016e3600
 800a804:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80c:	e225      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a812:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a816:	430b      	orrs	r3, r1
 800a818:	f040 8085 	bne.w	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a81c:	4b9c      	ldr	r3, [pc, #624]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a81e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a820:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a824:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a82c:	d06b      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a834:	d874      	bhi.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a838:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a83c:	d056      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a844:	d86c      	bhi.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a848:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a84c:	d03b      	beq.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a850:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a854:	d864      	bhi.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a85c:	d021      	beq.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a864:	d85c      	bhi.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d004      	beq.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a872:	d004      	beq.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a874:	e054      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a876:	f7fe fb5f 	bl	8008f38 <HAL_RCC_GetPCLK1Freq>
 800a87a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a87c:	e1ed      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a87e:	4b84      	ldr	r3, [pc, #528]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a88a:	d107      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a88c:	f107 0318 	add.w	r3, r7, #24
 800a890:	4618      	mov	r0, r3
 800a892:	f000 fa05 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89a:	e1de      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a0:	e1db      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8a2:	4b7b      	ldr	r3, [pc, #492]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ae:	d107      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b0:	f107 030c 	add.w	r3, r7, #12
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fb47 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8be:	e1cc      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c4:	e1c9      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8c6:	4b72      	ldr	r3, [pc, #456]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d109      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8d2:	4b6f      	ldr	r3, [pc, #444]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	4a6d      	ldr	r2, [pc, #436]	@ (800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a8de:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e4:	e1b9      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ea:	e1b6      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8ec:	4b68      	ldr	r3, [pc, #416]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8f8:	d102      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a8fa:	4b67      	ldr	r3, [pc, #412]	@ (800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fe:	e1ac      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a904:	e1a9      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a906:	4b62      	ldr	r3, [pc, #392]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a90e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a914:	4b61      	ldr	r3, [pc, #388]	@ (800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a918:	e19f      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91e:	e19c      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e199      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a92a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a92e:	430b      	orrs	r3, r1
 800a930:	d173      	bne.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a932:	4b57      	ldr	r3, [pc, #348]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a93a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a942:	d02f      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a94a:	d863      	bhi.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a958:	d012      	beq.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a95a:	e05b      	b.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a95c:	4b4c      	ldr	r3, [pc, #304]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a968:	d107      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a96a:	f107 0318 	add.w	r3, r7, #24
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 f996 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a978:	e16f      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a97e:	e16c      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a980:	4b43      	ldr	r3, [pc, #268]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a98c:	d107      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a98e:	f107 030c 	add.w	r3, r7, #12
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fad8 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a99c:	e15d      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a2:	e15a      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9a4:	4b3a      	ldr	r3, [pc, #232]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9ae:	4b38      	ldr	r3, [pc, #224]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0304 	and.w	r3, r3, #4
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	d10c      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d109      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9c0:	4b33      	ldr	r3, [pc, #204]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	08db      	lsrs	r3, r3, #3
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	4a32      	ldr	r2, [pc, #200]	@ (800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d2:	e01e      	b.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9d4:	4b2e      	ldr	r3, [pc, #184]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9e0:	d106      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9e8:	d102      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9ea:	4b2b      	ldr	r3, [pc, #172]	@ (800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ee:	e010      	b.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9f0:	4b27      	ldr	r3, [pc, #156]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9fc:	d106      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa04:	d102      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa06:	4b25      	ldr	r3, [pc, #148]	@ (800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa0a:	e002      	b.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa10:	e123      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa12:	e122      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa18:	e11f      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aa1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800aa22:	430b      	orrs	r3, r1
 800aa24:	d13c      	bne.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aa26:	4b1a      	ldr	r3, [pc, #104]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa2e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa3c:	d012      	beq.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800aa3e:	e023      	b.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa40:	4b13      	ldr	r3, [pc, #76]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa4c:	d107      	bne.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 fbcc 	bl	800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa5c:	e0fd      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa62:	e0fa      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa64:	4b0a      	ldr	r3, [pc, #40]	@ (800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa70:	d107      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa72:	f107 0318 	add.w	r3, r7, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f912 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa80:	e0eb      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa86:	e0e8      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e0e5      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa8e:	bf00      	nop
 800aa90:	58024400 	.word	0x58024400
 800aa94:	03d09000 	.word	0x03d09000
 800aa98:	003d0900 	.word	0x003d0900
 800aa9c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aaa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	f040 8085 	bne.w	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aaae:	4b6d      	ldr	r3, [pc, #436]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aab6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aabe:	d06b      	beq.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800aac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aac6:	d874      	bhi.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aace:	d056      	beq.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800aad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aad6:	d86c      	bhi.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aade:	d03b      	beq.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aae6:	d864      	bhi.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaee:	d021      	beq.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf6:	d85c      	bhi.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800aafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab04:	d004      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ab06:	e054      	b.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ab08:	f000 f8b4 	bl	800ac74 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab0e:	e0a4      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab10:	4b54      	ldr	r3, [pc, #336]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab1c:	d107      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab1e:	f107 0318 	add.w	r3, r7, #24
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 f8bc 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2c:	e095      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab32:	e092      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab34:	4b4b      	ldr	r3, [pc, #300]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab40:	d107      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab42:	f107 030c 	add.w	r3, r7, #12
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f9fe 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab50:	e083      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab56:	e080      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab58:	4b42      	ldr	r3, [pc, #264]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0304 	and.w	r3, r3, #4
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d109      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab64:	4b3f      	ldr	r3, [pc, #252]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	08db      	lsrs	r3, r3, #3
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	4a3e      	ldr	r2, [pc, #248]	@ (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ab70:	fa22 f303 	lsr.w	r3, r2, r3
 800ab74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab76:	e070      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab7c:	e06d      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab7e:	4b39      	ldr	r3, [pc, #228]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab8a:	d102      	bne.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ab8c:	4b37      	ldr	r3, [pc, #220]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ab8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab90:	e063      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab96:	e060      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab98:	4b32      	ldr	r3, [pc, #200]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aba4:	d102      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aba6:	4b32      	ldr	r3, [pc, #200]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abaa:	e056      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb0:	e053      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb6:	e050      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800abb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abbc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800abc0:	430b      	orrs	r3, r1
 800abc2:	d148      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800abc4:	4b27      	ldr	r3, [pc, #156]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abcc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abd4:	d02a      	beq.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abdc:	d838      	bhi.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800abde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abea:	d00d      	beq.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800abec:	e030      	b.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abee:	4b1d      	ldr	r3, [pc, #116]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abfa:	d102      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800abfc:	4b1c      	ldr	r3, [pc, #112]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac00:	e02b      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac06:	e028      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac08:	4b16      	ldr	r3, [pc, #88]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac14:	d107      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fae8 	bl	800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac24:	e019      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac2a:	e016      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac38:	d107      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac3a:	f107 0318 	add.w	r3, r7, #24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f82e 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac48:	e007      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4e:	e004      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac54:	e001      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3740      	adds	r7, #64	@ 0x40
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	58024400 	.word	0x58024400
 800ac68:	03d09000 	.word	0x03d09000
 800ac6c:	003d0900 	.word	0x003d0900
 800ac70:	016e3600 	.word	0x016e3600

0800ac74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac78:	f7fe f92e 	bl	8008ed8 <HAL_RCC_GetHCLKFreq>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	4b06      	ldr	r3, [pc, #24]	@ (800ac98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	091b      	lsrs	r3, r3, #4
 800ac84:	f003 0307 	and.w	r3, r3, #7
 800ac88:	4904      	ldr	r1, [pc, #16]	@ (800ac9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac8a:	5ccb      	ldrb	r3, [r1, r3]
 800ac8c:	f003 031f 	and.w	r3, r3, #31
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	58024400 	.word	0x58024400
 800ac9c:	080114e0 	.word	0x080114e0

0800aca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b089      	sub	sp, #36	@ 0x24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aca8:	4ba1      	ldr	r3, [pc, #644]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acac:	f003 0303 	and.w	r3, r3, #3
 800acb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800acb2:	4b9f      	ldr	r3, [pc, #636]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb6:	0b1b      	lsrs	r3, r3, #12
 800acb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800acbe:	4b9c      	ldr	r3, [pc, #624]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc2:	091b      	lsrs	r3, r3, #4
 800acc4:	f003 0301 	and.w	r3, r3, #1
 800acc8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800acca:	4b99      	ldr	r3, [pc, #612]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800accc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acce:	08db      	lsrs	r3, r3, #3
 800acd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	fb02 f303 	mul.w	r3, r2, r3
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 8111 	beq.w	800af10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	f000 8083 	beq.w	800adfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	f200 80a1 	bhi.w	800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d056      	beq.n	800adb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ad0a:	e099      	b.n	800ae40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad0c:	4b88      	ldr	r3, [pc, #544]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0320 	and.w	r3, r3, #32
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d02d      	beq.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad18:	4b85      	ldr	r3, [pc, #532]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	08db      	lsrs	r3, r3, #3
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	4a84      	ldr	r2, [pc, #528]	@ (800af34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
 800ad28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b7b      	ldr	r3, [pc, #492]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad72:	e087      	b.n	800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b6a      	ldr	r3, [pc, #424]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb6:	e065      	b.n	800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800adc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adca:	4b59      	ldr	r3, [pc, #356]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adda:	ed97 6a03 	vldr	s12, [r7, #12]
 800adde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ade2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfa:	e043      	b.n	800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ae0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0e:	4b48      	ldr	r3, [pc, #288]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae3e:	e021      	b.n	800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae52:	4b37      	ldr	r3, [pc, #220]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae84:	4b2a      	ldr	r3, [pc, #168]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	0a5b      	lsrs	r3, r3, #9
 800ae8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800aea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeaa:	ee17 2a90 	vmov	r2, s15
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aeb2:	4b1f      	ldr	r3, [pc, #124]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb6:	0c1b      	lsrs	r3, r3, #16
 800aeb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aebc:	ee07 3a90 	vmov	s15, r3
 800aec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aecc:	edd7 6a07 	vldr	s13, [r7, #28]
 800aed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed8:	ee17 2a90 	vmov	r2, s15
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aee0:	4b13      	ldr	r3, [pc, #76]	@ (800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	0e1b      	lsrs	r3, r3, #24
 800aee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeea:	ee07 3a90 	vmov	s15, r3
 800aeee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aefa:	edd7 6a07 	vldr	s13, [r7, #28]
 800aefe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af06:	ee17 2a90 	vmov	r2, s15
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af0e:	e008      	b.n	800af22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	609a      	str	r2, [r3, #8]
}
 800af22:	bf00      	nop
 800af24:	3724      	adds	r7, #36	@ 0x24
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	58024400 	.word	0x58024400
 800af34:	03d09000 	.word	0x03d09000
 800af38:	46000000 	.word	0x46000000
 800af3c:	4c742400 	.word	0x4c742400
 800af40:	4a742400 	.word	0x4a742400
 800af44:	4bb71b00 	.word	0x4bb71b00

0800af48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800af48:	b480      	push	{r7}
 800af4a:	b089      	sub	sp, #36	@ 0x24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af50:	4ba1      	ldr	r3, [pc, #644]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800af5a:	4b9f      	ldr	r3, [pc, #636]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5e:	0d1b      	lsrs	r3, r3, #20
 800af60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af66:	4b9c      	ldr	r3, [pc, #624]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af6a:	0a1b      	lsrs	r3, r3, #8
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af72:	4b99      	ldr	r3, [pc, #612]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8111 	beq.w	800b1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	f000 8083 	beq.w	800b0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	f200 80a1 	bhi.w	800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d056      	beq.n	800b060 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800afb2:	e099      	b.n	800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afb4:	4b88      	ldr	r3, [pc, #544]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d02d      	beq.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc0:	4b85      	ldr	r3, [pc, #532]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	08db      	lsrs	r3, r3, #3
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	4a84      	ldr	r2, [pc, #528]	@ (800b1dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800afcc:	fa22 f303 	lsr.w	r3, r2, r3
 800afd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afea:	4b7b      	ldr	r3, [pc, #492]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affa:	ed97 6a03 	vldr	s12, [r7, #12]
 800affe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b016:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b01a:	e087      	b.n	800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b026:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02e:	4b6a      	ldr	r3, [pc, #424]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b042:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b05e:	e065      	b.n	800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b072:	4b59      	ldr	r3, [pc, #356]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b082:	ed97 6a03 	vldr	s12, [r7, #12]
 800b086:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a2:	e043      	b.n	800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b1ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b6:	4b48      	ldr	r3, [pc, #288]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0e6:	e021      	b.n	800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fa:	4b37      	ldr	r3, [pc, #220]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b10e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b12c:	4b2a      	ldr	r3, [pc, #168]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b130:	0a5b      	lsrs	r3, r3, #9
 800b132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b142:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b146:	edd7 6a07 	vldr	s13, [r7, #28]
 800b14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b152:	ee17 2a90 	vmov	r2, s15
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b15a:	4b1f      	ldr	r3, [pc, #124]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b15e:	0c1b      	lsrs	r3, r3, #16
 800b160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b164:	ee07 3a90 	vmov	s15, r3
 800b168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b170:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b174:	edd7 6a07 	vldr	s13, [r7, #28]
 800b178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b180:	ee17 2a90 	vmov	r2, s15
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b188:	4b13      	ldr	r3, [pc, #76]	@ (800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b18c:	0e1b      	lsrs	r3, r3, #24
 800b18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b19e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ae:	ee17 2a90 	vmov	r2, s15
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b1b6:	e008      	b.n	800b1ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	609a      	str	r2, [r3, #8]
}
 800b1ca:	bf00      	nop
 800b1cc:	3724      	adds	r7, #36	@ 0x24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	58024400 	.word	0x58024400
 800b1dc:	03d09000 	.word	0x03d09000
 800b1e0:	46000000 	.word	0x46000000
 800b1e4:	4c742400 	.word	0x4c742400
 800b1e8:	4a742400 	.word	0x4a742400
 800b1ec:	4bb71b00 	.word	0x4bb71b00

0800b1f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b089      	sub	sp, #36	@ 0x24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1f8:	4ba0      	ldr	r3, [pc, #640]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b202:	4b9e      	ldr	r3, [pc, #632]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b206:	091b      	lsrs	r3, r3, #4
 800b208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b20c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b20e:	4b9b      	ldr	r3, [pc, #620]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b218:	4b98      	ldr	r3, [pc, #608]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	fb02 f303 	mul.w	r3, r2, r3
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b230:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 8111 	beq.w	800b45e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	f000 8083 	beq.w	800b34a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	2b02      	cmp	r3, #2
 800b248:	f200 80a1 	bhi.w	800b38e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d056      	beq.n	800b306 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b258:	e099      	b.n	800b38e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b25a:	4b88      	ldr	r3, [pc, #544]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0320 	and.w	r3, r3, #32
 800b262:	2b00      	cmp	r3, #0
 800b264:	d02d      	beq.n	800b2c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b266:	4b85      	ldr	r3, [pc, #532]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	08db      	lsrs	r3, r3, #3
 800b26c:	f003 0303 	and.w	r3, r3, #3
 800b270:	4a83      	ldr	r2, [pc, #524]	@ (800b480 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b272:	fa22 f303 	lsr.w	r3, r2, r3
 800b276:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b290:	4b7a      	ldr	r3, [pc, #488]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b484 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b2c0:	e087      	b.n	800b3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	ee07 3a90 	vmov	s15, r3
 800b2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b488 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d4:	4b69      	ldr	r3, [pc, #420]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2dc:	ee07 3a90 	vmov	s15, r3
 800b2e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b484 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b300:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b304:	e065      	b.n	800b3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b310:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b48c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b318:	4b58      	ldr	r3, [pc, #352]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b328:	ed97 6a03 	vldr	s12, [r7, #12]
 800b32c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b484 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b33c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b340:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b344:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b348:	e043      	b.n	800b3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b354:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b490 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35c:	4b47      	ldr	r3, [pc, #284]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b364:	ee07 3a90 	vmov	s15, r3
 800b368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b370:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b484 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b384:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b38c:	e021      	b.n	800b3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	ee07 3a90 	vmov	s15, r3
 800b394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b398:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b488 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b39c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a0:	4b36      	ldr	r3, [pc, #216]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b484 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b3d2:	4b2a      	ldr	r3, [pc, #168]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d6:	0a5b      	lsrs	r3, r3, #9
 800b3d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3f8:	ee17 2a90 	vmov	r2, s15
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b400:	4b1e      	ldr	r3, [pc, #120]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b404:	0c1b      	lsrs	r3, r3, #16
 800b406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b40a:	ee07 3a90 	vmov	s15, r3
 800b40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b416:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b41a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b41e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b426:	ee17 2a90 	vmov	r2, s15
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b42e:	4b13      	ldr	r3, [pc, #76]	@ (800b47c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b432:	0e1b      	lsrs	r3, r3, #24
 800b434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b438:	ee07 3a90 	vmov	s15, r3
 800b43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b440:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b444:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b448:	edd7 6a07 	vldr	s13, [r7, #28]
 800b44c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b454:	ee17 2a90 	vmov	r2, s15
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b45c:	e008      	b.n	800b470 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	609a      	str	r2, [r3, #8]
}
 800b470:	bf00      	nop
 800b472:	3724      	adds	r7, #36	@ 0x24
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	58024400 	.word	0x58024400
 800b480:	03d09000 	.word	0x03d09000
 800b484:	46000000 	.word	0x46000000
 800b488:	4c742400 	.word	0x4c742400
 800b48c:	4a742400 	.word	0x4a742400
 800b490:	4bb71b00 	.word	0x4bb71b00

0800b494 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4a2:	4b53      	ldr	r3, [pc, #332]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d101      	bne.n	800b4b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e099      	b.n	800b5e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b4b2:	4b4f      	ldr	r3, [pc, #316]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a4e      	ldr	r2, [pc, #312]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b4b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b4bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4be:	f7f7 f851 	bl	8002564 <HAL_GetTick>
 800b4c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4c4:	e008      	b.n	800b4d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4c6:	f7f7 f84d 	bl	8002564 <HAL_GetTick>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d901      	bls.n	800b4d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e086      	b.n	800b5e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b4d8:	4b45      	ldr	r3, [pc, #276]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f0      	bne.n	800b4c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b4e4:	4b42      	ldr	r3, [pc, #264]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	031b      	lsls	r3, r3, #12
 800b4f2:	493f      	ldr	r1, [pc, #252]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	3b01      	subs	r3, #1
 800b508:	025b      	lsls	r3, r3, #9
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	3b01      	subs	r3, #1
 800b514:	041b      	lsls	r3, r3, #16
 800b516:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b51a:	431a      	orrs	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	3b01      	subs	r3, #1
 800b522:	061b      	lsls	r3, r3, #24
 800b524:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b528:	4931      	ldr	r1, [pc, #196]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b52e:	4b30      	ldr	r3, [pc, #192]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b532:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	492d      	ldr	r1, [pc, #180]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b540:	4b2b      	ldr	r3, [pc, #172]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b544:	f023 0220 	bic.w	r2, r3, #32
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	4928      	ldr	r1, [pc, #160]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b54e:	4313      	orrs	r3, r2
 800b550:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b552:	4b27      	ldr	r3, [pc, #156]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	4a26      	ldr	r2, [pc, #152]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b558:	f023 0310 	bic.w	r3, r3, #16
 800b55c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b55e:	4b24      	ldr	r3, [pc, #144]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b562:	4b24      	ldr	r3, [pc, #144]	@ (800b5f4 <RCCEx_PLL2_Config+0x160>)
 800b564:	4013      	ands	r3, r2
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	69d2      	ldr	r2, [r2, #28]
 800b56a:	00d2      	lsls	r2, r2, #3
 800b56c:	4920      	ldr	r1, [pc, #128]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b572:	4b1f      	ldr	r3, [pc, #124]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b576:	4a1e      	ldr	r2, [pc, #120]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b578:	f043 0310 	orr.w	r3, r3, #16
 800b57c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b584:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b588:	4a19      	ldr	r2, [pc, #100]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b58a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b58e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b590:	e00f      	b.n	800b5b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d106      	bne.n	800b5a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b598:	4b15      	ldr	r3, [pc, #84]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b59c:	4a14      	ldr	r2, [pc, #80]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b59e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b5a4:	e005      	b.n	800b5b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b5a6:	4b12      	ldr	r3, [pc, #72]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5aa:	4a11      	ldr	r2, [pc, #68]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b5ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b5b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a0e      	ldr	r2, [pc, #56]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b5b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b5bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5be:	f7f6 ffd1 	bl	8002564 <HAL_GetTick>
 800b5c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b5c4:	e008      	b.n	800b5d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b5c6:	f7f6 ffcd 	bl	8002564 <HAL_GetTick>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d901      	bls.n	800b5d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e006      	b.n	800b5e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b5d8:	4b05      	ldr	r3, [pc, #20]	@ (800b5f0 <RCCEx_PLL2_Config+0x15c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0f0      	beq.n	800b5c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	58024400 	.word	0x58024400
 800b5f4:	ffff0007 	.word	0xffff0007

0800b5f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b606:	4b53      	ldr	r3, [pc, #332]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60a:	f003 0303 	and.w	r3, r3, #3
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d101      	bne.n	800b616 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e099      	b.n	800b74a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b616:	4b4f      	ldr	r3, [pc, #316]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a4e      	ldr	r2, [pc, #312]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b61c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b622:	f7f6 ff9f 	bl	8002564 <HAL_GetTick>
 800b626:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b628:	e008      	b.n	800b63c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b62a:	f7f6 ff9b 	bl	8002564 <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	2b02      	cmp	r3, #2
 800b636:	d901      	bls.n	800b63c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b638:	2303      	movs	r3, #3
 800b63a:	e086      	b.n	800b74a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b63c:	4b45      	ldr	r3, [pc, #276]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1f0      	bne.n	800b62a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b648:	4b42      	ldr	r3, [pc, #264]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	051b      	lsls	r3, r3, #20
 800b656:	493f      	ldr	r1, [pc, #252]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b658:	4313      	orrs	r3, r2
 800b65a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	3b01      	subs	r3, #1
 800b662:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	025b      	lsls	r3, r3, #9
 800b66e:	b29b      	uxth	r3, r3
 800b670:	431a      	orrs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	3b01      	subs	r3, #1
 800b678:	041b      	lsls	r3, r3, #16
 800b67a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	3b01      	subs	r3, #1
 800b686:	061b      	lsls	r3, r3, #24
 800b688:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b68c:	4931      	ldr	r1, [pc, #196]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b692:	4b30      	ldr	r3, [pc, #192]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	492d      	ldr	r1, [pc, #180]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b6a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	4928      	ldr	r1, [pc, #160]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b6b6:	4b27      	ldr	r3, [pc, #156]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ba:	4a26      	ldr	r2, [pc, #152]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b6c2:	4b24      	ldr	r3, [pc, #144]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6c6:	4b24      	ldr	r3, [pc, #144]	@ (800b758 <RCCEx_PLL3_Config+0x160>)
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	69d2      	ldr	r2, [r2, #28]
 800b6ce:	00d2      	lsls	r2, r2, #3
 800b6d0:	4920      	ldr	r1, [pc, #128]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b6d6:	4b1f      	ldr	r3, [pc, #124]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6da:	4a1e      	ldr	r2, [pc, #120]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d106      	bne.n	800b6f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b6e8:	4b1a      	ldr	r3, [pc, #104]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ec:	4a19      	ldr	r2, [pc, #100]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b6f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6f4:	e00f      	b.n	800b716 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d106      	bne.n	800b70a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b6fc:	4b15      	ldr	r3, [pc, #84]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b700:	4a14      	ldr	r2, [pc, #80]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b706:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b708:	e005      	b.n	800b716 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b70a:	4b12      	ldr	r3, [pc, #72]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70e:	4a11      	ldr	r2, [pc, #68]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b714:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b716:	4b0f      	ldr	r3, [pc, #60]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a0e      	ldr	r2, [pc, #56]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b71c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b722:	f7f6 ff1f 	bl	8002564 <HAL_GetTick>
 800b726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b728:	e008      	b.n	800b73c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b72a:	f7f6 ff1b 	bl	8002564 <HAL_GetTick>
 800b72e:	4602      	mov	r2, r0
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	2b02      	cmp	r3, #2
 800b736:	d901      	bls.n	800b73c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e006      	b.n	800b74a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b73c:	4b05      	ldr	r3, [pc, #20]	@ (800b754 <RCCEx_PLL3_Config+0x15c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d0f0      	beq.n	800b72a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	58024400 	.word	0x58024400
 800b758:	ffff0007 	.word	0xffff0007

0800b75c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08a      	sub	sp, #40	@ 0x28
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e075      	b.n	800b85a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d105      	bne.n	800b786 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f7f6 fb4d 	bl	8001e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2204      	movs	r2, #4
 800b78a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f868 	bl	800b864 <HAL_SD_InitCard>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e05d      	b.n	800b85a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b79e:	f107 0308 	add.w	r3, r7, #8
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fdaf 	bl	800c308 <HAL_SD_GetCardStatus>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e052      	b.n	800b85a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b7b4:	7e3b      	ldrb	r3, [r7, #24]
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b7ba:	7e7b      	ldrb	r3, [r7, #25]
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10a      	bne.n	800b7de <HAL_SD_Init+0x82>
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d102      	bne.n	800b7d4 <HAL_SD_Init+0x78>
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d004      	beq.n	800b7de <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7da:	659a      	str	r2, [r3, #88]	@ 0x58
 800b7dc:	e00b      	b.n	800b7f6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d104      	bne.n	800b7f0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b7ec:	659a      	str	r2, [r3, #88]	@ 0x58
 800b7ee:	e002      	b.n	800b7f6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fe6d 	bl	800c4dc <HAL_SD_ConfigWideBusOperation>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e026      	b.n	800b85a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b80c:	f7f6 feaa 	bl	8002564 <HAL_GetTick>
 800b810:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b812:	e011      	b.n	800b838 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b814:	f7f6 fea6 	bl	8002564 <HAL_GetTick>
 800b818:	4602      	mov	r2, r0
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	d109      	bne.n	800b838 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b82a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e010      	b.n	800b85a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 ff61 	bl	800c700 <HAL_SD_GetCardState>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b04      	cmp	r3, #4
 800b842:	d1e7      	bne.n	800b814 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3728      	adds	r7, #40	@ 0x28
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
	...

0800b864 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b08d      	sub	sp, #52	@ 0x34
 800b868:	af02      	add	r7, sp, #8
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b870:	2300      	movs	r3, #0
 800b872:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b874:	2300      	movs	r3, #0
 800b876:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b878:	2300      	movs	r3, #0
 800b87a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b87c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b880:	f04f 0100 	mov.w	r1, #0
 800b884:	f7fe fd24 	bl	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b888:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d109      	bne.n	800b8a4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b89e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e070      	b.n	800b986 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	4a39      	ldr	r2, [pc, #228]	@ (800b990 <HAL_SD_InitCard+0x12c>)
 800b8aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ae:	091b      	lsrs	r3, r3, #4
 800b8b0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681c      	ldr	r4, [r3, #0]
 800b8b6:	466a      	mov	r2, sp
 800b8b8:	f107 0318 	add.w	r3, r7, #24
 800b8bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b8c0:	e882 0003 	stmia.w	r2, {r0, r1}
 800b8c4:	f107 030c 	add.w	r3, r7, #12
 800b8c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f003 fffe 	bl	800f8cc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f004 f841 	bl	800f95c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d005      	beq.n	800b8ec <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	005b      	lsls	r3, r3, #1
 800b8e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d007      	beq.n	800b902 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b8f2:	4a28      	ldr	r2, [pc, #160]	@ (800b994 <HAL_SD_InitCard+0x130>)
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7f6 fe3d 	bl	800257c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 ffea 	bl	800c8dc <SD_PowerON>
 800b908:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b90a:	6a3b      	ldr	r3, [r7, #32]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00b      	beq.n	800b928 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e02e      	b.n	800b986 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 ff09 	bl	800c740 <SD_InitCard>
 800b92e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b930:	6a3b      	ldr	r3, [r7, #32]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00b      	beq.n	800b94e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	431a      	orrs	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e01b      	b.n	800b986 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b956:	4618      	mov	r0, r3
 800b958:	f004 f896 	bl	800fa88 <SDMMC_CmdBlockLength>
 800b95c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00f      	beq.n	800b984 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a0b      	ldr	r2, [pc, #44]	@ (800b998 <HAL_SD_InitCard+0x134>)
 800b96a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	431a      	orrs	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e000      	b.n	800b986 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	372c      	adds	r7, #44	@ 0x2c
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd90      	pop	{r4, r7, pc}
 800b98e:	bf00      	nop
 800b990:	014f8b59 	.word	0x014f8b59
 800b994:	00012110 	.word	0x00012110
 800b998:	1fe00fff 	.word	0x1fe00fff

0800b99c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08c      	sub	sp, #48	@ 0x30
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d107      	bne.n	800b9c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e08d      	b.n	800bae0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	f040 8086 	bne.w	800bade <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b9d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d907      	bls.n	800b9f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e074      	b.n	800bae0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	025a      	lsls	r2, r3, #9
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d002      	beq.n	800ba22 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	025b      	lsls	r3, r3, #9
 800ba20:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295
 800ba26:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	025b      	lsls	r3, r3, #9
 800ba2c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ba2e:	2390      	movs	r3, #144	@ 0x90
 800ba30:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ba32:	2302      	movs	r3, #2
 800ba34:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f107 0210 	add.w	r2, r7, #16
 800ba46:	4611      	mov	r1, r2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f003 fff1 	bl	800fa30 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba5c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d90a      	bls.n	800ba8a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2282      	movs	r2, #130	@ 0x82
 800ba78:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba80:	4618      	mov	r0, r3
 800ba82:	f004 f847 	bl	800fb14 <SDMMC_CmdReadMultiBlock>
 800ba86:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ba88:	e009      	b.n	800ba9e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2281      	movs	r2, #129	@ 0x81
 800ba8e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba96:	4618      	mov	r0, r3
 800ba98:	f004 f819 	bl	800face <SDMMC_CmdReadSingleBlock>
 800ba9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d012      	beq.n	800baca <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a0f      	ldr	r2, [pc, #60]	@ (800bae8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800baaa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab2:	431a      	orrs	r2, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e00a      	b.n	800bae0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800bad8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	e000      	b.n	800bae0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bade:	2302      	movs	r3, #2
  }
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3730      	adds	r7, #48	@ 0x30
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	1fe00fff 	.word	0x1fe00fff

0800baec <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08c      	sub	sp, #48	@ 0x30
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d107      	bne.n	800bb14 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb08:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e08d      	b.n	800bc30 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	f040 8086 	bne.w	800bc2e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d907      	bls.n	800bb46 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb3a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e074      	b.n	800bc30 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2203      	movs	r2, #3
 800bb4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2200      	movs	r2, #0
 800bb54:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	025a      	lsls	r2, r3, #9
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d002      	beq.n	800bb72 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800bb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6e:	025b      	lsls	r3, r3, #9
 800bb70:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295
 800bb76:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	025b      	lsls	r3, r3, #9
 800bb7c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bb7e:	2390      	movs	r3, #144	@ 0x90
 800bb80:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bb82:	2300      	movs	r3, #0
 800bb84:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f107 0210 	add.w	r2, r7, #16
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f003 ff49 	bl	800fa30 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbac:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d90a      	bls.n	800bbda <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	22a0      	movs	r2, #160	@ 0xa0
 800bbc8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f003 ffe5 	bl	800fba0 <SDMMC_CmdWriteMultiBlock>
 800bbd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bbd8:	e009      	b.n	800bbee <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2290      	movs	r2, #144	@ 0x90
 800bbde:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f003 ffb7 	bl	800fb5a <SDMMC_CmdWriteSingleBlock>
 800bbec:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d012      	beq.n	800bc1a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a0f      	ldr	r2, [pc, #60]	@ (800bc38 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800bbfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc02:	431a      	orrs	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e00a      	b.n	800bc30 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800bc28:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e000      	b.n	800bc30 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800bc2e:	2302      	movs	r3, #2
  }
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3730      	adds	r7, #48	@ 0x30
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	1fe00fff 	.word	0x1fe00fff

0800bc3c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc48:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d008      	beq.n	800bc6a <HAL_SD_IRQHandler+0x2e>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f003 0308 	and.w	r3, r3, #8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f001 f926 	bl	800ceb4 <SD_Read_IT>
 800bc68:	e19a      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 80ac 	beq.w	800bdd2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc82:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	4b59      	ldr	r3, [pc, #356]	@ (800bdf4 <HAL_SD_IRQHandler+0x1b8>)
 800bc90:	400b      	ands	r3, r1
 800bc92:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800bca2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bcb2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f003 0308 	and.w	r3, r3, #8
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d038      	beq.n	800bd30 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f003 0302 	and.w	r3, r3, #2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d104      	bne.n	800bcd2 <HAL_SD_IRQHandler+0x96>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d011      	beq.n	800bcf6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f003 ff86 	bl	800fbe8 <SDMMC_CmdStopTransfer>
 800bcdc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d008      	beq.n	800bcf6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f95b 	bl	800bfac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a3f      	ldr	r2, [pc, #252]	@ (800bdf8 <HAL_SD_IRQHandler+0x1bc>)
 800bcfc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d104      	bne.n	800bd20 <HAL_SD_IRQHandler+0xe4>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f003 0302 	and.w	r3, r3, #2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f004 fc31 	bl	8010588 <HAL_SD_RxCpltCallback>
 800bd26:	e13b      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f004 fc23 	bl	8010574 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bd2e:	e137      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 8132 	beq.w	800bfa0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2200      	movs	r2, #0
 800bd42:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2200      	movs	r2, #0
 800bd52:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d104      	bne.n	800bd68 <HAL_SD_IRQHandler+0x12c>
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f003 0320 	and.w	r3, r3, #32
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d011      	beq.n	800bd8c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f003 ff3b 	bl	800fbe8 <SDMMC_CmdStopTransfer>
 800bd72:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d008      	beq.n	800bd8c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	431a      	orrs	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f910 	bl	800bfac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f003 0310 	and.w	r3, r3, #16
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d104      	bne.n	800bdae <HAL_SD_IRQHandler+0x172>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f003 0320 	and.w	r3, r3, #32
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f004 fbe0 	bl	8010574 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d105      	bne.n	800bdca <HAL_SD_IRQHandler+0x18e>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f003 0302 	and.w	r3, r3, #2
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 80eb 	beq.w	800bfa0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f004 fbdc 	bl	8010588 <HAL_SD_RxCpltCallback>
}
 800bdd0:	e0e6      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00d      	beq.n	800bdfc <HAL_SD_IRQHandler+0x1c0>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f003 0308 	and.w	r3, r3, #8
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d008      	beq.n	800bdfc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f001 f8a8 	bl	800cf40 <SD_Write_IT>
 800bdf0:	e0d6      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
 800bdf2:	bf00      	nop
 800bdf4:	ffff3ec5 	.word	0xffff3ec5
 800bdf8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be02:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 809d 	beq.w	800bf46 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be12:	f003 0302 	and.w	r3, r3, #2
 800be16:	2b00      	cmp	r3, #0
 800be18:	d005      	beq.n	800be26 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be1e:	f043 0202 	orr.w	r2, r3, #2
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be2c:	f003 0308 	and.w	r3, r3, #8
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be38:	f043 0208 	orr.w	r2, r3, #8
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be46:	f003 0320 	and.w	r3, r3, #32
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be52:	f043 0220 	orr.w	r2, r3, #32
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be60:	f003 0310 	and.w	r3, r3, #16
 800be64:	2b00      	cmp	r3, #0
 800be66:	d005      	beq.n	800be74 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be6c:	f043 0210 	orr.w	r2, r3, #16
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a4b      	ldr	r2, [pc, #300]	@ (800bfa8 <HAL_SD_IRQHandler+0x36c>)
 800be7a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800be8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68da      	ldr	r2, [r3, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be9a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800beaa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68da      	ldr	r2, [r3, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800beba:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f003 fe91 	bl	800fbe8 <SDMMC_CmdStopTransfer>
 800bec6:	4602      	mov	r2, r0
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bee0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800beea:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f003 0308 	and.w	r3, r3, #8
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f851 	bl	800bfac <HAL_SD_ErrorCallback>
}
 800bf0a:	e049      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d044      	beq.n	800bfa0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d040      	beq.n	800bfa0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800bf2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2200      	movs	r2, #0
 800bf34:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f834 	bl	800bfac <HAL_SD_ErrorCallback>
}
 800bf44:	e02c      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d025      	beq.n	800bfa0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf5c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf64:	f003 0304 	and.w	r3, r3, #4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10c      	bne.n	800bf86 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f003 0320 	and.w	r3, r3, #32
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 f84a 	bl	800d010 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800bf7c:	e010      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f001 f832 	bl	800cfe8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800bf84:	e00c      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f003 0320 	and.w	r3, r3, #32
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 f833 	bl	800cffc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800bf96:	e003      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 f81b 	bl	800cfd4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800bf9e:	e7ff      	b.n	800bfa0 <HAL_SD_IRQHandler+0x364>
 800bfa0:	bf00      	nop
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	18000f3a 	.word	0x18000f3a

0800bfac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfce:	0f9b      	lsrs	r3, r3, #30
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfda:	0e9b      	lsrs	r3, r3, #26
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfec:	0e1b      	lsrs	r3, r3, #24
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	f003 0303 	and.w	r3, r3, #3
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bffe:	0c1b      	lsrs	r3, r3, #16
 800c000:	b2da      	uxtb	r2, r3
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c00a:	0a1b      	lsrs	r3, r3, #8
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c016:	b2da      	uxtb	r2, r3
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c020:	0d1b      	lsrs	r3, r3, #20
 800c022:	b29a      	uxth	r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c02c:	0c1b      	lsrs	r3, r3, #16
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 030f 	and.w	r3, r3, #15
 800c034:	b2da      	uxtb	r2, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c03e:	0bdb      	lsrs	r3, r3, #15
 800c040:	b2db      	uxtb	r3, r3
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	b2da      	uxtb	r2, r3
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c050:	0b9b      	lsrs	r3, r3, #14
 800c052:	b2db      	uxtb	r3, r3
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c062:	0b5b      	lsrs	r3, r3, #13
 800c064:	b2db      	uxtb	r3, r3
 800c066:	f003 0301 	and.w	r3, r3, #1
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c074:	0b1b      	lsrs	r3, r3, #12
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2200      	movs	r2, #0
 800c086:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d163      	bne.n	800c158 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c094:	009a      	lsls	r2, r3, #2
 800c096:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c09a:	4013      	ands	r3, r2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c0a0:	0f92      	lsrs	r2, r2, #30
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0ac:	0edb      	lsrs	r3, r3, #27
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	f003 0307 	and.w	r3, r3, #7
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0be:	0e1b      	lsrs	r3, r3, #24
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0307 	and.w	r3, r3, #7
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0d0:	0d5b      	lsrs	r3, r3, #21
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	f003 0307 	and.w	r3, r3, #7
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0e2:	0c9b      	lsrs	r3, r3, #18
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0f4:	0bdb      	lsrs	r3, r3, #15
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	f003 0307 	and.w	r3, r3, #7
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	7e1b      	ldrb	r3, [r3, #24]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	f003 0307 	and.w	r3, r3, #7
 800c116:	3302      	adds	r3, #2
 800c118:	2201      	movs	r2, #1
 800c11a:	fa02 f303 	lsl.w	r3, r2, r3
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c122:	fb03 f202 	mul.w	r2, r3, r2
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	7a1b      	ldrb	r3, [r3, #8]
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	f003 030f 	and.w	r3, r3, #15
 800c134:	2201      	movs	r2, #1
 800c136:	409a      	lsls	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c144:	0a52      	lsrs	r2, r2, #9
 800c146:	fb03 f202 	mul.w	r2, r3, r2
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c154:	655a      	str	r2, [r3, #84]	@ 0x54
 800c156:	e031      	b.n	800c1bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d11d      	bne.n	800c19c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c164:	041b      	lsls	r3, r3, #16
 800c166:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c16e:	0c1b      	lsrs	r3, r3, #16
 800c170:	431a      	orrs	r2, r3
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	3301      	adds	r3, #1
 800c17c:	029a      	lsls	r2, r3, #10
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c190:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	655a      	str	r2, [r3, #84]	@ 0x54
 800c19a:	e00f      	b.n	800c1bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a58      	ldr	r2, [pc, #352]	@ (800c304 <HAL_SD_GetCardCSD+0x344>)
 800c1a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e09d      	b.n	800c2f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1c0:	0b9b      	lsrs	r3, r3, #14
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0301 	and.w	r3, r3, #1
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1d2:	09db      	lsrs	r3, r3, #7
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c1f4:	0fdb      	lsrs	r3, r3, #31
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c200:	0f5b      	lsrs	r3, r3, #29
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 0303 	and.w	r3, r3, #3
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c212:	0e9b      	lsrs	r3, r3, #26
 800c214:	b2db      	uxtb	r3, r3
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c224:	0d9b      	lsrs	r3, r3, #22
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 030f 	and.w	r3, r3, #15
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c236:	0d5b      	lsrs	r3, r3, #21
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	b2da      	uxtb	r2, r3
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c252:	0c1b      	lsrs	r3, r3, #16
 800c254:	b2db      	uxtb	r3, r3
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c266:	0bdb      	lsrs	r3, r3, #15
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	f003 0301 	and.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c27a:	0b9b      	lsrs	r3, r3, #14
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	b2da      	uxtb	r2, r3
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c28e:	0b5b      	lsrs	r3, r3, #13
 800c290:	b2db      	uxtb	r3, r3
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	b2da      	uxtb	r2, r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2a2:	0b1b      	lsrs	r3, r3, #12
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2b6:	0a9b      	lsrs	r3, r3, #10
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	f003 0303 	and.w	r3, r3, #3
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2ca:	0a1b      	lsrs	r3, r3, #8
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr
 800c304:	1fe00fff 	.word	0x1fe00fff

0800c308 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b094      	sub	sp, #80	@ 0x50
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b03      	cmp	r3, #3
 800c322:	d101      	bne.n	800c328 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	e0a7      	b.n	800c478 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c328:	f107 0308 	add.w	r3, r7, #8
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fb62 	bl	800c9f8 <SD_SendSDStatus>
 800c334:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d011      	beq.n	800c360 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a4f      	ldr	r2, [pc, #316]	@ (800c480 <HAL_SD_GetCardStatus+0x178>)
 800c342:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c35e:	e070      	b.n	800c442 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	099b      	lsrs	r3, r3, #6
 800c364:	b2db      	uxtb	r3, r3
 800c366:	f003 0303 	and.w	r3, r3, #3
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	095b      	lsrs	r3, r3, #5
 800c374:	b2db      	uxtb	r3, r3
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	0a1b      	lsrs	r3, r3, #8
 800c384:	b29b      	uxth	r3, r3
 800c386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	0e1b      	lsrs	r3, r3, #24
 800c390:	b29b      	uxth	r3, r3
 800c392:	4313      	orrs	r3, r2
 800c394:	b29a      	uxth	r2, r3
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	061a      	lsls	r2, r3, #24
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	021b      	lsls	r3, r3, #8
 800c3a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c3a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	0a1b      	lsrs	r3, r3, #8
 800c3ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c3b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	0e1b      	lsrs	r3, r3, #24
 800c3b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	0a1b      	lsrs	r3, r3, #8
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	0d1b      	lsrs	r3, r3, #20
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 030f 	and.w	r3, r3, #15
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	0c1b      	lsrs	r3, r3, #16
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	0a9b      	lsrs	r3, r3, #10
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c404:	b2da      	uxtb	r2, r3
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	0a1b      	lsrs	r3, r3, #8
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 0303 	and.w	r3, r3, #3
 800c414:	b2da      	uxtb	r2, r3
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	091b      	lsrs	r3, r3, #4
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f003 030f 	and.w	r3, r3, #15
 800c424:	b2da      	uxtb	r2, r3
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	f003 030f 	and.w	r3, r3, #15
 800c432:	b2da      	uxtb	r2, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	0e1b      	lsrs	r3, r3, #24
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c44a:	4618      	mov	r0, r3
 800c44c:	f003 fb1c 	bl	800fa88 <SDMMC_CmdBlockLength>
 800c450:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00d      	beq.n	800c474 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a08      	ldr	r2, [pc, #32]	@ (800c480 <HAL_SD_GetCardStatus+0x178>)
 800c45e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c464:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800c474:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3750      	adds	r7, #80	@ 0x50
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	1fe00fff 	.word	0x1fe00fff

0800c484 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b08d      	sub	sp, #52	@ 0x34
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2203      	movs	r2, #3
 800c4f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d02e      	beq.n	800c55a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c502:	d106      	bne.n	800c512 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c508:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	635a      	str	r2, [r3, #52]	@ 0x34
 800c510:	e029      	b.n	800c566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c518:	d10a      	bne.n	800c530 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fb64 	bl	800cbe8 <SD_WideBus_Enable>
 800c520:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	431a      	orrs	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	635a      	str	r2, [r3, #52]	@ 0x34
 800c52e:	e01a      	b.n	800c566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10a      	bne.n	800c54c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fba1 	bl	800cc7e <SD_WideBus_Disable>
 800c53c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	431a      	orrs	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	635a      	str	r2, [r3, #52]	@ 0x34
 800c54a:	e00c      	b.n	800c566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c550:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	635a      	str	r2, [r3, #52]	@ 0x34
 800c558:	e005      	b.n	800c566 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c55e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d007      	beq.n	800c57e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a5f      	ldr	r2, [pc, #380]	@ (800c6f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c574:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c57c:	e096      	b.n	800c6ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c57e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c582:	f04f 0100 	mov.w	r1, #0
 800c586:	f7fd fea3 	bl	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c58a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 8083 	beq.w	800c69a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	695a      	ldr	r2, [r3, #20]
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	4950      	ldr	r1, [pc, #320]	@ (800c6f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c5b2:	fba1 1303 	umull	r1, r3, r1, r3
 800c5b6:	0e1b      	lsrs	r3, r3, #24
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d303      	bcc.n	800c5c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	61bb      	str	r3, [r7, #24]
 800c5c2:	e05a      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5cc:	d103      	bne.n	800c5d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	61bb      	str	r3, [r7, #24]
 800c5d4:	e051      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5de:	d126      	bne.n	800c62e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10e      	bne.n	800c606 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	4a43      	ldr	r2, [pc, #268]	@ (800c6f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d906      	bls.n	800c5fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	4a40      	ldr	r2, [pc, #256]	@ (800c6f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c5f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5f8:	0e5b      	lsrs	r3, r3, #25
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	e03d      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	61bb      	str	r3, [r7, #24]
 800c604:	e039      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	69fa      	ldr	r2, [r7, #28]
 800c60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c612:	4a39      	ldr	r2, [pc, #228]	@ (800c6f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d906      	bls.n	800c626 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	4a36      	ldr	r2, [pc, #216]	@ (800c6f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c61c:	fba2 2303 	umull	r2, r3, r2, r3
 800c620:	0e5b      	lsrs	r3, r3, #25
 800c622:	61bb      	str	r3, [r7, #24]
 800c624:	e029      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	61bb      	str	r3, [r7, #24]
 800c62c:	e025      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	695b      	ldr	r3, [r3, #20]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10e      	bne.n	800c654 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	4a30      	ldr	r2, [pc, #192]	@ (800c6fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d906      	bls.n	800c64c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4a2c      	ldr	r2, [pc, #176]	@ (800c6f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c642:	fba2 2303 	umull	r2, r3, r2, r3
 800c646:	0e1b      	lsrs	r3, r3, #24
 800c648:	61bb      	str	r3, [r7, #24]
 800c64a:	e016      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	695b      	ldr	r3, [r3, #20]
 800c650:	61bb      	str	r3, [r7, #24]
 800c652:	e012      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	69fa      	ldr	r2, [r7, #28]
 800c65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c660:	4a26      	ldr	r2, [pc, #152]	@ (800c6fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d906      	bls.n	800c674 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	4a22      	ldr	r2, [pc, #136]	@ (800c6f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c66a:	fba2 2303 	umull	r2, r3, r2, r3
 800c66e:	0e1b      	lsrs	r3, r3, #24
 800c670:	61bb      	str	r3, [r7, #24]
 800c672:	e002      	b.n	800c67a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681c      	ldr	r4, [r3, #0]
 800c67e:	466a      	mov	r2, sp
 800c680:	f107 0314 	add.w	r3, r7, #20
 800c684:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c688:	e882 0003 	stmia.w	r2, {r0, r1}
 800c68c:	f107 0308 	add.w	r3, r7, #8
 800c690:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c692:	4620      	mov	r0, r4
 800c694:	f003 f91a 	bl	800f8cc <SDMMC_Init>
 800c698:	e008      	b.n	800c6ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c69e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f003 f9e7 	bl	800fa88 <SDMMC_CmdBlockLength>
 800c6ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00c      	beq.n	800c6dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a0a      	ldr	r2, [pc, #40]	@ (800c6f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c6c8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	372c      	adds	r7, #44	@ 0x2c
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd90      	pop	{r4, r7, pc}
 800c6f0:	1fe00fff 	.word	0x1fe00fff
 800c6f4:	55e63b89 	.word	0x55e63b89
 800c6f8:	02faf080 	.word	0x02faf080
 800c6fc:	017d7840 	.word	0x017d7840

0800c700 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c70c:	f107 030c 	add.w	r3, r7, #12
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa40 	bl	800cb98 <SD_SendStatus>
 800c718:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	431a      	orrs	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	0a5b      	lsrs	r3, r3, #9
 800c730:	f003 030f 	and.w	r3, r3, #15
 800c734:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c736:	693b      	ldr	r3, [r7, #16]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b090      	sub	sp, #64	@ 0x40
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c748:	2300      	movs	r3, #0
 800c74a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c74c:	f7f5 ff0a 	bl	8002564 <HAL_GetTick>
 800c750:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f003 f911 	bl	800f97e <SDMMC_GetPowerState>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d102      	bne.n	800c768 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c762:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c766:	e0b5      	b.n	800c8d4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d02e      	beq.n	800c7ce <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4618      	mov	r0, r3
 800c776:	f003 fb5c 	bl	800fe32 <SDMMC_CmdSendCID>
 800c77a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <SD_InitCard+0x46>
    {
      return errorstate;
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	e0a6      	b.n	800c8d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2100      	movs	r1, #0
 800c78c:	4618      	mov	r0, r3
 800c78e:	f003 f93c 	bl	800fa0a <SDMMC_GetResponse>
 800c792:	4602      	mov	r2, r0
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2104      	movs	r1, #4
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f003 f933 	bl	800fa0a <SDMMC_GetResponse>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2108      	movs	r1, #8
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f003 f92a 	bl	800fa0a <SDMMC_GetResponse>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	210c      	movs	r1, #12
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f003 f921 	bl	800fa0a <SDMMC_GetResponse>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d01d      	beq.n	800c812 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c7d6:	e019      	b.n	800c80c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f107 020a 	add.w	r2, r7, #10
 800c7e0:	4611      	mov	r1, r2
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f003 fb64 	bl	800feb0 <SDMMC_CmdSetRelAdd>
 800c7e8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f2:	e06f      	b.n	800c8d4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c7f4:	f7f5 feb6 	bl	8002564 <HAL_GetTick>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c802:	4293      	cmp	r3, r2
 800c804:	d902      	bls.n	800c80c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c806:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c80a:	e063      	b.n	800c8d4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c80c:	897b      	ldrh	r3, [r7, #10]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d0e2      	beq.n	800c7d8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c816:	2b03      	cmp	r3, #3
 800c818:	d036      	beq.n	800c888 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c81a:	897b      	ldrh	r3, [r7, #10]
 800c81c:	461a      	mov	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c82a:	041b      	lsls	r3, r3, #16
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f003 fb1e 	bl	800fe70 <SDMMC_CmdSendCSD>
 800c834:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <SD_InitCard+0x100>
    {
      return errorstate;
 800c83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83e:	e049      	b.n	800c8d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f003 f8df 	bl	800fa0a <SDMMC_GetResponse>
 800c84c:	4602      	mov	r2, r0
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2104      	movs	r1, #4
 800c858:	4618      	mov	r0, r3
 800c85a:	f003 f8d6 	bl	800fa0a <SDMMC_GetResponse>
 800c85e:	4602      	mov	r2, r0
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2108      	movs	r1, #8
 800c86a:	4618      	mov	r0, r3
 800c86c:	f003 f8cd 	bl	800fa0a <SDMMC_GetResponse>
 800c870:	4602      	mov	r2, r0
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	210c      	movs	r1, #12
 800c87c:	4618      	mov	r0, r3
 800c87e:	f003 f8c4 	bl	800fa0a <SDMMC_GetResponse>
 800c882:	4602      	mov	r2, r0
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2104      	movs	r1, #4
 800c88e:	4618      	mov	r0, r3
 800c890:	f003 f8bb 	bl	800fa0a <SDMMC_GetResponse>
 800c894:	4603      	mov	r3, r0
 800c896:	0d1a      	lsrs	r2, r3, #20
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c89c:	f107 030c 	add.w	r3, r7, #12
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff fb8c 	bl	800bfc0 <HAL_SD_GetCardCSD>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c8b2:	e00f      	b.n	800c8d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8bc:	041b      	lsls	r3, r3, #16
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	f003 f9cd 	bl	800fc60 <SDMMC_CmdSelDesel>
 800c8c6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <SD_InitCard+0x192>
  {
    return errorstate;
 800c8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d0:	e000      	b.n	800c8d4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3740      	adds	r7, #64	@ 0x40
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f003 f9d6 	bl	800fca6 <SDMMC_CmdGoIdleState>
 800c8fa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	e072      	b.n	800c9ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f003 f9e9 	bl	800fce2 <SDMMC_CmdOperCond>
 800c910:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c918:	d10d      	bne.n	800c936 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2200      	movs	r2, #0
 800c91e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	4618      	mov	r0, r3
 800c926:	f003 f9be 	bl	800fca6 <SDMMC_CmdGoIdleState>
 800c92a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d004      	beq.n	800c93c <SD_PowerON+0x60>
    {
      return errorstate;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	e05a      	b.n	800c9ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c940:	2b01      	cmp	r3, #1
 800c942:	d137      	bne.n	800c9b4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f003 f9e9 	bl	800fd22 <SDMMC_CmdAppCommand>
 800c950:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d02d      	beq.n	800c9b4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c958:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c95c:	e046      	b.n	800c9ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f003 f9dc 	bl	800fd22 <SDMMC_CmdAppCommand>
 800c96a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <SD_PowerON+0x9a>
    {
      return errorstate;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	e03a      	b.n	800c9ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	491e      	ldr	r1, [pc, #120]	@ (800c9f4 <SD_PowerON+0x118>)
 800c97c:	4618      	mov	r0, r3
 800c97e:	f003 f9f3 	bl	800fd68 <SDMMC_CmdAppOperCommand>
 800c982:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c98a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c98e:	e02d      	b.n	800c9ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2100      	movs	r1, #0
 800c996:	4618      	mov	r0, r3
 800c998:	f003 f837 	bl	800fa0a <SDMMC_GetResponse>
 800c99c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	0fdb      	lsrs	r3, r3, #31
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d101      	bne.n	800c9aa <SD_PowerON+0xce>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e000      	b.n	800c9ac <SD_PowerON+0xd0>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	613b      	str	r3, [r7, #16]

    count++;
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d802      	bhi.n	800c9c4 <SD_PowerON+0xe8>
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d0cc      	beq.n	800c95e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d902      	bls.n	800c9d4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c9ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c9d2:	e00b      	b.n	800c9ec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	c1100000 	.word	0xc1100000

0800c9f8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08c      	sub	sp, #48	@ 0x30
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca02:	f7f5 fdaf 	bl	8002564 <HAL_GetTick>
 800ca06:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2100      	movs	r1, #0
 800ca12:	4618      	mov	r0, r3
 800ca14:	f002 fff9 	bl	800fa0a <SDMMC_GetResponse>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca22:	d102      	bne.n	800ca2a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca28:	e0b0      	b.n	800cb8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2140      	movs	r1, #64	@ 0x40
 800ca30:	4618      	mov	r0, r3
 800ca32:	f003 f829 	bl	800fa88 <SDMMC_CmdBlockLength>
 800ca36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d005      	beq.n	800ca4a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	e0a0      	b.n	800cb8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca52:	041b      	lsls	r3, r3, #16
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f003 f963 	bl	800fd22 <SDMMC_CmdAppCommand>
 800ca5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d005      	beq.n	800ca70 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	e08d      	b.n	800cb8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca70:	f04f 33ff 	mov.w	r3, #4294967295
 800ca74:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ca76:	2340      	movs	r3, #64	@ 0x40
 800ca78:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ca7a:	2360      	movs	r3, #96	@ 0x60
 800ca7c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ca7e:	2302      	movs	r3, #2
 800ca80:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ca86:	2301      	movs	r3, #1
 800ca88:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f107 0208 	add.w	r2, r7, #8
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f002 ffcb 	bl	800fa30 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f003 fa4b 	bl	800ff3a <SDMMC_CmdStatusRegister>
 800caa4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800caa6:	6a3b      	ldr	r3, [r7, #32]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d02b      	beq.n	800cb04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cab4:	6a3b      	ldr	r3, [r7, #32]
 800cab6:	e069      	b.n	800cb8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cabe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d013      	beq.n	800caee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800cac6:	2300      	movs	r3, #0
 800cac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800caca:	e00d      	b.n	800cae8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f002 ff25 	bl	800f920 <SDMMC_ReadFIFO>
 800cad6:	4602      	mov	r2, r0
 800cad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cada:	601a      	str	r2, [r3, #0]
        pData++;
 800cadc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cade:	3304      	adds	r3, #4
 800cae0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800cae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae4:	3301      	adds	r3, #1
 800cae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caea:	2b07      	cmp	r3, #7
 800caec:	d9ee      	bls.n	800cacc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800caee:	f7f5 fd39 	bl	8002564 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafc:	d102      	bne.n	800cb04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cafe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb02:	e043      	b.n	800cb8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb0a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0d2      	beq.n	800cab8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb18:	f003 0308 	and.w	r3, r3, #8
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cb20:	2308      	movs	r3, #8
 800cb22:	e033      	b.n	800cb8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb2a:	f003 0302 	and.w	r3, r3, #2
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb32:	2302      	movs	r3, #2
 800cb34:	e02a      	b.n	800cb8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb3c:	f003 0320 	and.w	r3, r3, #32
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d017      	beq.n	800cb74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cb44:	2320      	movs	r3, #32
 800cb46:	e021      	b.n	800cb8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f002 fee7 	bl	800f920 <SDMMC_ReadFIFO>
 800cb52:	4602      	mov	r2, r0
 800cb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb56:	601a      	str	r2, [r3, #0]
    pData++;
 800cb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb5e:	f7f5 fd01 	bl	8002564 <HAL_GetTick>
 800cb62:	4602      	mov	r2, r0
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6c:	d102      	bne.n	800cb74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cb6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb72:	e00b      	b.n	800cb8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1e2      	bne.n	800cb48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a03      	ldr	r2, [pc, #12]	@ (800cb94 <SD_SendSDStatus+0x19c>)
 800cb88:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3730      	adds	r7, #48	@ 0x30
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	18000f3a 	.word	0x18000f3a

0800cb98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d102      	bne.n	800cbae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cba8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cbac:	e018      	b.n	800cbe0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbb6:	041b      	lsls	r3, r3, #16
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f003 f99a 	bl	800fef4 <SDMMC_CmdSendStatus>
 800cbc0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <SD_SendStatus+0x34>
  {
    return errorstate;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	e009      	b.n	800cbe0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f002 ff19 	bl	800fa0a <SDMMC_GetResponse>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	60fb      	str	r3, [r7, #12]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f002 ff03 	bl	800fa0a <SDMMC_GetResponse>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc0e:	d102      	bne.n	800cc16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cc10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cc14:	e02f      	b.n	800cc76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f879 	bl	800cd14 <SD_FindSCR>
 800cc22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	e023      	b.n	800cc76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01c      	beq.n	800cc72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc40:	041b      	lsls	r3, r3, #16
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f003 f86c 	bl	800fd22 <SDMMC_CmdAppCommand>
 800cc4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	e00f      	b.n	800cc76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2102      	movs	r1, #2
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f003 f8a3 	bl	800fda8 <SDMMC_CmdBusWidth>
 800cc62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	e003      	b.n	800cc76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e001      	b.n	800cc76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3718      	adds	r7, #24
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b086      	sub	sp, #24
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cc86:	2300      	movs	r3, #0
 800cc88:	60fb      	str	r3, [r7, #12]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2100      	movs	r1, #0
 800cc94:	4618      	mov	r0, r3
 800cc96:	f002 feb8 	bl	800fa0a <SDMMC_GetResponse>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cca4:	d102      	bne.n	800ccac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cca6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ccaa:	e02f      	b.n	800cd0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ccac:	f107 030c 	add.w	r3, r7, #12
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f82e 	bl	800cd14 <SD_FindSCR>
 800ccb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	e023      	b.n	800cd0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d01c      	beq.n	800cd08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd6:	041b      	lsls	r3, r3, #16
 800ccd8:	4619      	mov	r1, r3
 800ccda:	4610      	mov	r0, r2
 800ccdc:	f003 f821 	bl	800fd22 <SDMMC_CmdAppCommand>
 800cce0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	e00f      	b.n	800cd0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f003 f858 	bl	800fda8 <SDMMC_CmdBusWidth>
 800ccf8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	e003      	b.n	800cd0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cd04:	2300      	movs	r3, #0
 800cd06:	e001      	b.n	800cd0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08e      	sub	sp, #56	@ 0x38
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cd1e:	f7f5 fc21 	bl	8002564 <HAL_GetTick>
 800cd22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cd28:	2300      	movs	r3, #0
 800cd2a:	60bb      	str	r3, [r7, #8]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2108      	movs	r1, #8
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f002 fea4 	bl	800fa88 <SDMMC_CmdBlockLength>
 800cd40:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <SD_FindSCR+0x38>
  {
    return errorstate;
 800cd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4a:	e0ad      	b.n	800cea8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd54:	041b      	lsls	r3, r3, #16
 800cd56:	4619      	mov	r1, r3
 800cd58:	4610      	mov	r0, r2
 800cd5a:	f002 ffe2 	bl	800fd22 <SDMMC_CmdAppCommand>
 800cd5e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <SD_FindSCR+0x56>
  {
    return errorstate;
 800cd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd68:	e09e      	b.n	800cea8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cd70:	2308      	movs	r3, #8
 800cd72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cd74:	2330      	movs	r3, #48	@ 0x30
 800cd76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cd80:	2301      	movs	r3, #1
 800cd82:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f107 0210 	add.w	r2, r7, #16
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f002 fe4e 	bl	800fa30 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f003 f828 	bl	800fdee <SDMMC_CmdSendSCR>
 800cd9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d027      	beq.n	800cdf6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda8:	e07e      	b.n	800cea8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d113      	bne.n	800cde0 <SD_FindSCR+0xcc>
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d110      	bne.n	800cde0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f002 fdac 	bl	800f920 <SDMMC_ReadFIFO>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f002 fda5 	bl	800f920 <SDMMC_ReadFIFO>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	60fb      	str	r3, [r7, #12]
      index++;
 800cdda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cddc:	3301      	adds	r3, #1
 800cdde:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cde0:	f7f5 fbc0 	bl	8002564 <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdee:	d102      	bne.n	800cdf6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cdf0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cdf4:	e058      	b.n	800cea8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdfc:	f240 532a 	movw	r3, #1322	@ 0x52a
 800ce00:	4013      	ands	r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0d1      	beq.n	800cdaa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce0c:	f003 0308 	and.w	r3, r3, #8
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d005      	beq.n	800ce20 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2208      	movs	r2, #8
 800ce1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ce1c:	2308      	movs	r3, #8
 800ce1e:	e043      	b.n	800cea8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce26:	f003 0302 	and.w	r3, r3, #2
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d005      	beq.n	800ce3a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2202      	movs	r2, #2
 800ce34:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce36:	2302      	movs	r3, #2
 800ce38:	e036      	b.n	800cea8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce40:	f003 0320 	and.w	r3, r3, #32
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2220      	movs	r2, #32
 800ce4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ce50:	2320      	movs	r3, #32
 800ce52:	e029      	b.n	800cea8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a15      	ldr	r2, [pc, #84]	@ (800ceb0 <SD_FindSCR+0x19c>)
 800ce5a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	061a      	lsls	r2, r3, #24
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	0a1b      	lsrs	r3, r3, #8
 800ce6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ce72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	0e1b      	lsrs	r3, r3, #24
 800ce78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ce7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7c:	601a      	str	r2, [r3, #0]
    scr++;
 800ce7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce80:	3304      	adds	r3, #4
 800ce82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	061a      	lsls	r2, r3, #24
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	0a1b      	lsrs	r3, r3, #8
 800ce96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ce9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	0e1b      	lsrs	r3, r3, #24
 800cea0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3738      	adds	r7, #56	@ 0x38
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	18000f3a 	.word	0x18000f3a

0800ceb4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec6:	2b1f      	cmp	r3, #31
 800cec8:	d936      	bls.n	800cf38 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]
 800cece:	e027      	b.n	800cf20 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f002 fd23 	bl	800f920 <SDMMC_ReadFIFO>
 800ceda:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	3301      	adds	r3, #1
 800cee8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	0a1b      	lsrs	r3, r3, #8
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	3301      	adds	r3, #1
 800cef8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	0c1b      	lsrs	r3, r3, #16
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	3301      	adds	r3, #1
 800cf08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	0e1b      	lsrs	r3, r3, #24
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	3301      	adds	r3, #1
 800cf18:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	2b07      	cmp	r3, #7
 800cf24:	d9d4      	bls.n	800ced0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	693a      	ldr	r2, [r7, #16]
 800cf2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf30:	f1a3 0220 	sub.w	r2, r3, #32
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800cf38:	bf00      	nop
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	2b1f      	cmp	r3, #31
 800cf54:	d93a      	bls.n	800cfcc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800cf56:	2300      	movs	r3, #0
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	e02b      	b.n	800cfb4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
      tmp++;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	3301      	adds	r3, #1
 800cf66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	021a      	lsls	r2, r3, #8
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
      tmp++;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	3301      	adds	r3, #1
 800cf78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	041a      	lsls	r2, r3, #16
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60fb      	str	r3, [r7, #12]
      tmp++;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	061a      	lsls	r2, r3, #24
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
      tmp++;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f107 020c 	add.w	r2, r7, #12
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f002 fcc6 	bl	800f93a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2b07      	cmp	r3, #7
 800cfb8:	d9d0      	bls.n	800cf5c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	f1a3 0220 	sub.w	r2, r3, #32
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	621a      	str	r2, [r3, #32]
  }
}
 800cfcc:	bf00      	nop
 800cfce:	3718      	adds	r7, #24
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e049      	b.n	800d0ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7f4 ff7e 	bl	8001f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2202      	movs	r2, #2
 800d054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3304      	adds	r3, #4
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f000 fc58 	bl	800d918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d001      	beq.n	800d0ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e05e      	b.n	800d1aa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	68da      	ldr	r2, [r3, #12]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f042 0201 	orr.w	r2, r2, #1
 800d102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a2b      	ldr	r2, [pc, #172]	@ (800d1b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d02c      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d116:	d027      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a27      	ldr	r2, [pc, #156]	@ (800d1bc <HAL_TIM_Base_Start_IT+0xe8>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d022      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a26      	ldr	r2, [pc, #152]	@ (800d1c0 <HAL_TIM_Base_Start_IT+0xec>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d01d      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a24      	ldr	r2, [pc, #144]	@ (800d1c4 <HAL_TIM_Base_Start_IT+0xf0>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d018      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a23      	ldr	r2, [pc, #140]	@ (800d1c8 <HAL_TIM_Base_Start_IT+0xf4>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d013      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a21      	ldr	r2, [pc, #132]	@ (800d1cc <HAL_TIM_Base_Start_IT+0xf8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d00e      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a20      	ldr	r2, [pc, #128]	@ (800d1d0 <HAL_TIM_Base_Start_IT+0xfc>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d009      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a1e      	ldr	r2, [pc, #120]	@ (800d1d4 <HAL_TIM_Base_Start_IT+0x100>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d004      	beq.n	800d168 <HAL_TIM_Base_Start_IT+0x94>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a1d      	ldr	r2, [pc, #116]	@ (800d1d8 <HAL_TIM_Base_Start_IT+0x104>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d115      	bne.n	800d194 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	689a      	ldr	r2, [r3, #8]
 800d16e:	4b1b      	ldr	r3, [pc, #108]	@ (800d1dc <HAL_TIM_Base_Start_IT+0x108>)
 800d170:	4013      	ands	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b06      	cmp	r3, #6
 800d178:	d015      	beq.n	800d1a6 <HAL_TIM_Base_Start_IT+0xd2>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d180:	d011      	beq.n	800d1a6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f042 0201 	orr.w	r2, r2, #1
 800d190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d192:	e008      	b.n	800d1a6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0201 	orr.w	r2, r2, #1
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	e000      	b.n	800d1a8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	bf00      	nop
 800d1b8:	40010000 	.word	0x40010000
 800d1bc:	40000400 	.word	0x40000400
 800d1c0:	40000800 	.word	0x40000800
 800d1c4:	40000c00 	.word	0x40000c00
 800d1c8:	40010400 	.word	0x40010400
 800d1cc:	40001800 	.word	0x40001800
 800d1d0:	40014000 	.word	0x40014000
 800d1d4:	4000e000 	.word	0x4000e000
 800d1d8:	4000e400 	.word	0x4000e400
 800d1dc:	00010007 	.word	0x00010007

0800d1e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e049      	b.n	800d286 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2200      	movs	r2, #0
 800d202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f841 	bl	800d28e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2202      	movs	r2, #2
 800d210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4619      	mov	r1, r3
 800d21e:	4610      	mov	r0, r2
 800d220:	f000 fb7a 	bl	800d918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2201      	movs	r2, #1
 800d258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d296:	bf00      	nop
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	691b      	ldr	r3, [r3, #16]
 800d2b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d020      	beq.n	800d306 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f003 0302 	and.w	r3, r3, #2
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d01b      	beq.n	800d306 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f06f 0202 	mvn.w	r2, #2
 800d2d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	f003 0303 	and.w	r3, r3, #3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 faf5 	bl	800d8dc <HAL_TIM_IC_CaptureCallback>
 800d2f2:	e005      	b.n	800d300 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fae7 	bl	800d8c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 faf8 	bl	800d8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	f003 0304 	and.w	r3, r3, #4
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d020      	beq.n	800d352 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f003 0304 	and.w	r3, r3, #4
 800d316:	2b00      	cmp	r3, #0
 800d318:	d01b      	beq.n	800d352 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f06f 0204 	mvn.w	r2, #4
 800d322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2202      	movs	r2, #2
 800d328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	699b      	ldr	r3, [r3, #24]
 800d330:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d334:	2b00      	cmp	r3, #0
 800d336:	d003      	beq.n	800d340 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 facf 	bl	800d8dc <HAL_TIM_IC_CaptureCallback>
 800d33e:	e005      	b.n	800d34c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fac1 	bl	800d8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 fad2 	bl	800d8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	f003 0308 	and.w	r3, r3, #8
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d020      	beq.n	800d39e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f003 0308 	and.w	r3, r3, #8
 800d362:	2b00      	cmp	r3, #0
 800d364:	d01b      	beq.n	800d39e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f06f 0208 	mvn.w	r2, #8
 800d36e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2204      	movs	r2, #4
 800d374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	69db      	ldr	r3, [r3, #28]
 800d37c:	f003 0303 	and.w	r3, r3, #3
 800d380:	2b00      	cmp	r3, #0
 800d382:	d003      	beq.n	800d38c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 faa9 	bl	800d8dc <HAL_TIM_IC_CaptureCallback>
 800d38a:	e005      	b.n	800d398 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 fa9b 	bl	800d8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 faac 	bl	800d8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	f003 0310 	and.w	r3, r3, #16
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d020      	beq.n	800d3ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f003 0310 	and.w	r3, r3, #16
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d01b      	beq.n	800d3ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f06f 0210 	mvn.w	r2, #16
 800d3ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2208      	movs	r2, #8
 800d3c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69db      	ldr	r3, [r3, #28]
 800d3c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d003      	beq.n	800d3d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fa83 	bl	800d8dc <HAL_TIM_IC_CaptureCallback>
 800d3d6:	e005      	b.n	800d3e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fa75 	bl	800d8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 fa86 	bl	800d8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	f003 0301 	and.w	r3, r3, #1
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00c      	beq.n	800d40e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f003 0301 	and.w	r3, r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d007      	beq.n	800d40e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f06f 0201 	mvn.w	r2, #1
 800d406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7f4 fa41 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d414:	2b00      	cmp	r3, #0
 800d416:	d104      	bne.n	800d422 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00c      	beq.n	800d43c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d007      	beq.n	800d43c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 ffc6 	bl	800e3c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00c      	beq.n	800d460 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d007      	beq.n	800d460 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 ffbe 	bl	800e3dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00c      	beq.n	800d484 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d470:	2b00      	cmp	r3, #0
 800d472:	d007      	beq.n	800d484 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fa40 	bl	800d904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	f003 0320 	and.w	r3, r3, #32
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00c      	beq.n	800d4a8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b00      	cmp	r3, #0
 800d496:	d007      	beq.n	800d4a8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f06f 0220 	mvn.w	r2, #32
 800d4a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 ff86 	bl	800e3b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d101      	bne.n	800d4ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4ca:	2302      	movs	r3, #2
 800d4cc:	e0ff      	b.n	800d6ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b14      	cmp	r3, #20
 800d4da:	f200 80f0 	bhi.w	800d6be <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d4de:	a201      	add	r2, pc, #4	@ (adr r2, 800d4e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d539 	.word	0x0800d539
 800d4e8:	0800d6bf 	.word	0x0800d6bf
 800d4ec:	0800d6bf 	.word	0x0800d6bf
 800d4f0:	0800d6bf 	.word	0x0800d6bf
 800d4f4:	0800d579 	.word	0x0800d579
 800d4f8:	0800d6bf 	.word	0x0800d6bf
 800d4fc:	0800d6bf 	.word	0x0800d6bf
 800d500:	0800d6bf 	.word	0x0800d6bf
 800d504:	0800d5bb 	.word	0x0800d5bb
 800d508:	0800d6bf 	.word	0x0800d6bf
 800d50c:	0800d6bf 	.word	0x0800d6bf
 800d510:	0800d6bf 	.word	0x0800d6bf
 800d514:	0800d5fb 	.word	0x0800d5fb
 800d518:	0800d6bf 	.word	0x0800d6bf
 800d51c:	0800d6bf 	.word	0x0800d6bf
 800d520:	0800d6bf 	.word	0x0800d6bf
 800d524:	0800d63d 	.word	0x0800d63d
 800d528:	0800d6bf 	.word	0x0800d6bf
 800d52c:	0800d6bf 	.word	0x0800d6bf
 800d530:	0800d6bf 	.word	0x0800d6bf
 800d534:	0800d67d 	.word	0x0800d67d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68b9      	ldr	r1, [r7, #8]
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 fa9c 	bl	800da7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f042 0208 	orr.w	r2, r2, #8
 800d552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	699a      	ldr	r2, [r3, #24]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f022 0204 	bic.w	r2, r2, #4
 800d562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6999      	ldr	r1, [r3, #24]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	691a      	ldr	r2, [r3, #16]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	430a      	orrs	r2, r1
 800d574:	619a      	str	r2, [r3, #24]
      break;
 800d576:	e0a5      	b.n	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68b9      	ldr	r1, [r7, #8]
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fb0c 	bl	800db9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	699a      	ldr	r2, [r3, #24]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	699a      	ldr	r2, [r3, #24]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	6999      	ldr	r1, [r3, #24]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	021a      	lsls	r2, r3, #8
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	619a      	str	r2, [r3, #24]
      break;
 800d5b8:	e084      	b.n	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68b9      	ldr	r1, [r7, #8]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 fb75 	bl	800dcb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	69da      	ldr	r2, [r3, #28]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f042 0208 	orr.w	r2, r2, #8
 800d5d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	69da      	ldr	r2, [r3, #28]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f022 0204 	bic.w	r2, r2, #4
 800d5e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	69d9      	ldr	r1, [r3, #28]
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	691a      	ldr	r2, [r3, #16]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	430a      	orrs	r2, r1
 800d5f6:	61da      	str	r2, [r3, #28]
      break;
 800d5f8:	e064      	b.n	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68b9      	ldr	r1, [r7, #8]
 800d600:	4618      	mov	r0, r3
 800d602:	f000 fbdd 	bl	800ddc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	69da      	ldr	r2, [r3, #28]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	69da      	ldr	r2, [r3, #28]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	69d9      	ldr	r1, [r3, #28]
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	021a      	lsls	r2, r3, #8
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	61da      	str	r2, [r3, #28]
      break;
 800d63a:	e043      	b.n	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68b9      	ldr	r1, [r7, #8]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 fc26 	bl	800de94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f042 0208 	orr.w	r2, r2, #8
 800d656:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f022 0204 	bic.w	r2, r2, #4
 800d666:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	691a      	ldr	r2, [r3, #16]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	430a      	orrs	r2, r1
 800d678:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d67a:	e023      	b.n	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68b9      	ldr	r1, [r7, #8]
 800d682:	4618      	mov	r0, r3
 800d684:	f000 fc6a 	bl	800df5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d696:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	021a      	lsls	r2, r3, #8
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	430a      	orrs	r2, r1
 800d6ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d6bc:	e002      	b.n	800d6c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	75fb      	strb	r3, [r7, #23]
      break;
 800d6c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3718      	adds	r7, #24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop

0800d6d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d101      	bne.n	800d6f4 <HAL_TIM_ConfigClockSource+0x1c>
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	e0dc      	b.n	800d8ae <HAL_TIM_ConfigClockSource+0x1d6>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2202      	movs	r2, #2
 800d700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	4b6a      	ldr	r3, [pc, #424]	@ (800d8b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d710:	4013      	ands	r3, r2
 800d712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d71a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a64      	ldr	r2, [pc, #400]	@ (800d8bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	f000 80a9 	beq.w	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d730:	4a62      	ldr	r2, [pc, #392]	@ (800d8bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d732:	4293      	cmp	r3, r2
 800d734:	f200 80ae 	bhi.w	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d738:	4a61      	ldr	r2, [pc, #388]	@ (800d8c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	f000 80a1 	beq.w	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d740:	4a5f      	ldr	r2, [pc, #380]	@ (800d8c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d742:	4293      	cmp	r3, r2
 800d744:	f200 80a6 	bhi.w	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d748:	4a5e      	ldr	r2, [pc, #376]	@ (800d8c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	f000 8099 	beq.w	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d750:	4a5c      	ldr	r2, [pc, #368]	@ (800d8c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d752:	4293      	cmp	r3, r2
 800d754:	f200 809e 	bhi.w	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d758:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d75c:	f000 8091 	beq.w	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d760:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d764:	f200 8096 	bhi.w	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d76c:	f000 8089 	beq.w	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d774:	f200 808e 	bhi.w	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d77c:	d03e      	beq.n	800d7fc <HAL_TIM_ConfigClockSource+0x124>
 800d77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d782:	f200 8087 	bhi.w	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d78a:	f000 8086 	beq.w	800d89a <HAL_TIM_ConfigClockSource+0x1c2>
 800d78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d792:	d87f      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d794:	2b70      	cmp	r3, #112	@ 0x70
 800d796:	d01a      	beq.n	800d7ce <HAL_TIM_ConfigClockSource+0xf6>
 800d798:	2b70      	cmp	r3, #112	@ 0x70
 800d79a:	d87b      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d79c:	2b60      	cmp	r3, #96	@ 0x60
 800d79e:	d050      	beq.n	800d842 <HAL_TIM_ConfigClockSource+0x16a>
 800d7a0:	2b60      	cmp	r3, #96	@ 0x60
 800d7a2:	d877      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7a4:	2b50      	cmp	r3, #80	@ 0x50
 800d7a6:	d03c      	beq.n	800d822 <HAL_TIM_ConfigClockSource+0x14a>
 800d7a8:	2b50      	cmp	r3, #80	@ 0x50
 800d7aa:	d873      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7ac:	2b40      	cmp	r3, #64	@ 0x40
 800d7ae:	d058      	beq.n	800d862 <HAL_TIM_ConfigClockSource+0x18a>
 800d7b0:	2b40      	cmp	r3, #64	@ 0x40
 800d7b2:	d86f      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b4:	2b30      	cmp	r3, #48	@ 0x30
 800d7b6:	d064      	beq.n	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7b8:	2b30      	cmp	r3, #48	@ 0x30
 800d7ba:	d86b      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7bc:	2b20      	cmp	r3, #32
 800d7be:	d060      	beq.n	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c0:	2b20      	cmp	r3, #32
 800d7c2:	d867      	bhi.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d05c      	beq.n	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c8:	2b10      	cmp	r3, #16
 800d7ca:	d05a      	beq.n	800d882 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7cc:	e062      	b.n	800d894 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d7de:	f000 fca1 	bl	800e124 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d7f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	609a      	str	r2, [r3, #8]
      break;
 800d7fa:	e04f      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d80c:	f000 fc8a 	bl	800e124 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689a      	ldr	r2, [r3, #8]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d81e:	609a      	str	r2, [r3, #8]
      break;
 800d820:	e03c      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d82e:	461a      	mov	r2, r3
 800d830:	f000 fbfa 	bl	800e028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2150      	movs	r1, #80	@ 0x50
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fc54 	bl	800e0e8 <TIM_ITRx_SetConfig>
      break;
 800d840:	e02c      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d84e:	461a      	mov	r2, r3
 800d850:	f000 fc19 	bl	800e086 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2160      	movs	r1, #96	@ 0x60
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 fc44 	bl	800e0e8 <TIM_ITRx_SetConfig>
      break;
 800d860:	e01c      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d86e:	461a      	mov	r2, r3
 800d870:	f000 fbda 	bl	800e028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2140      	movs	r1, #64	@ 0x40
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 fc34 	bl	800e0e8 <TIM_ITRx_SetConfig>
      break;
 800d880:	e00c      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4619      	mov	r1, r3
 800d88c:	4610      	mov	r0, r2
 800d88e:	f000 fc2b 	bl	800e0e8 <TIM_ITRx_SetConfig>
      break;
 800d892:	e003      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	73fb      	strb	r3, [r7, #15]
      break;
 800d898:	e000      	b.n	800d89c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d89a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	ffceff88 	.word	0xffceff88
 800d8bc:	00100040 	.word	0x00100040
 800d8c0:	00100030 	.word	0x00100030
 800d8c4:	00100020 	.word	0x00100020

0800d8c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d90c:	bf00      	nop
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a4a      	ldr	r2, [pc, #296]	@ (800da54 <TIM_Base_SetConfig+0x13c>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d013      	beq.n	800d958 <TIM_Base_SetConfig+0x40>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d936:	d00f      	beq.n	800d958 <TIM_Base_SetConfig+0x40>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a47      	ldr	r2, [pc, #284]	@ (800da58 <TIM_Base_SetConfig+0x140>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d00b      	beq.n	800d958 <TIM_Base_SetConfig+0x40>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a46      	ldr	r2, [pc, #280]	@ (800da5c <TIM_Base_SetConfig+0x144>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d007      	beq.n	800d958 <TIM_Base_SetConfig+0x40>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a45      	ldr	r2, [pc, #276]	@ (800da60 <TIM_Base_SetConfig+0x148>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d003      	beq.n	800d958 <TIM_Base_SetConfig+0x40>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a44      	ldr	r2, [pc, #272]	@ (800da64 <TIM_Base_SetConfig+0x14c>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d108      	bne.n	800d96a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d95e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4313      	orrs	r3, r2
 800d968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a39      	ldr	r2, [pc, #228]	@ (800da54 <TIM_Base_SetConfig+0x13c>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d027      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d978:	d023      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	4a36      	ldr	r2, [pc, #216]	@ (800da58 <TIM_Base_SetConfig+0x140>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d01f      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4a35      	ldr	r2, [pc, #212]	@ (800da5c <TIM_Base_SetConfig+0x144>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d01b      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a34      	ldr	r2, [pc, #208]	@ (800da60 <TIM_Base_SetConfig+0x148>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d017      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a33      	ldr	r2, [pc, #204]	@ (800da64 <TIM_Base_SetConfig+0x14c>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d013      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4a32      	ldr	r2, [pc, #200]	@ (800da68 <TIM_Base_SetConfig+0x150>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d00f      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4a31      	ldr	r2, [pc, #196]	@ (800da6c <TIM_Base_SetConfig+0x154>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d00b      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4a30      	ldr	r2, [pc, #192]	@ (800da70 <TIM_Base_SetConfig+0x158>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d007      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4a2f      	ldr	r2, [pc, #188]	@ (800da74 <TIM_Base_SetConfig+0x15c>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d003      	beq.n	800d9c2 <TIM_Base_SetConfig+0xaa>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4a2e      	ldr	r2, [pc, #184]	@ (800da78 <TIM_Base_SetConfig+0x160>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d108      	bne.n	800d9d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	689a      	ldr	r2, [r3, #8]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a16      	ldr	r2, [pc, #88]	@ (800da54 <TIM_Base_SetConfig+0x13c>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d00f      	beq.n	800da20 <TIM_Base_SetConfig+0x108>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a18      	ldr	r2, [pc, #96]	@ (800da64 <TIM_Base_SetConfig+0x14c>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d00b      	beq.n	800da20 <TIM_Base_SetConfig+0x108>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a17      	ldr	r2, [pc, #92]	@ (800da68 <TIM_Base_SetConfig+0x150>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d007      	beq.n	800da20 <TIM_Base_SetConfig+0x108>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a16      	ldr	r2, [pc, #88]	@ (800da6c <TIM_Base_SetConfig+0x154>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d003      	beq.n	800da20 <TIM_Base_SetConfig+0x108>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a15      	ldr	r2, [pc, #84]	@ (800da70 <TIM_Base_SetConfig+0x158>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d103      	bne.n	800da28 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	691a      	ldr	r2, [r3, #16]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b01      	cmp	r3, #1
 800da38:	d105      	bne.n	800da46 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	f023 0201 	bic.w	r2, r3, #1
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	611a      	str	r2, [r3, #16]
  }
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	40010000 	.word	0x40010000
 800da58:	40000400 	.word	0x40000400
 800da5c:	40000800 	.word	0x40000800
 800da60:	40000c00 	.word	0x40000c00
 800da64:	40010400 	.word	0x40010400
 800da68:	40014000 	.word	0x40014000
 800da6c:	40014400 	.word	0x40014400
 800da70:	40014800 	.word	0x40014800
 800da74:	4000e000 	.word	0x4000e000
 800da78:	4000e400 	.word	0x4000e400

0800da7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b087      	sub	sp, #28
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	f023 0201 	bic.w	r2, r3, #1
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	4b37      	ldr	r3, [pc, #220]	@ (800db84 <TIM_OC1_SetConfig+0x108>)
 800daa8:	4013      	ands	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f023 0303 	bic.w	r3, r3, #3
 800dab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4313      	orrs	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f023 0302 	bic.w	r3, r3, #2
 800dac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	4313      	orrs	r3, r2
 800dace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	4a2d      	ldr	r2, [pc, #180]	@ (800db88 <TIM_OC1_SetConfig+0x10c>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d00f      	beq.n	800daf8 <TIM_OC1_SetConfig+0x7c>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a2c      	ldr	r2, [pc, #176]	@ (800db8c <TIM_OC1_SetConfig+0x110>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d00b      	beq.n	800daf8 <TIM_OC1_SetConfig+0x7c>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4a2b      	ldr	r2, [pc, #172]	@ (800db90 <TIM_OC1_SetConfig+0x114>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d007      	beq.n	800daf8 <TIM_OC1_SetConfig+0x7c>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a2a      	ldr	r2, [pc, #168]	@ (800db94 <TIM_OC1_SetConfig+0x118>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d003      	beq.n	800daf8 <TIM_OC1_SetConfig+0x7c>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a29      	ldr	r2, [pc, #164]	@ (800db98 <TIM_OC1_SetConfig+0x11c>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d10c      	bne.n	800db12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	f023 0308 	bic.w	r3, r3, #8
 800dafe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	697a      	ldr	r2, [r7, #20]
 800db06:	4313      	orrs	r3, r2
 800db08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f023 0304 	bic.w	r3, r3, #4
 800db10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a1c      	ldr	r2, [pc, #112]	@ (800db88 <TIM_OC1_SetConfig+0x10c>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d00f      	beq.n	800db3a <TIM_OC1_SetConfig+0xbe>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a1b      	ldr	r2, [pc, #108]	@ (800db8c <TIM_OC1_SetConfig+0x110>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d00b      	beq.n	800db3a <TIM_OC1_SetConfig+0xbe>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a1a      	ldr	r2, [pc, #104]	@ (800db90 <TIM_OC1_SetConfig+0x114>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d007      	beq.n	800db3a <TIM_OC1_SetConfig+0xbe>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a19      	ldr	r2, [pc, #100]	@ (800db94 <TIM_OC1_SetConfig+0x118>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d003      	beq.n	800db3a <TIM_OC1_SetConfig+0xbe>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a18      	ldr	r2, [pc, #96]	@ (800db98 <TIM_OC1_SetConfig+0x11c>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d111      	bne.n	800db5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800db48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	4313      	orrs	r3, r2
 800db52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	685a      	ldr	r2, [r3, #4]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	697a      	ldr	r2, [r7, #20]
 800db76:	621a      	str	r2, [r3, #32]
}
 800db78:	bf00      	nop
 800db7a:	371c      	adds	r7, #28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	fffeff8f 	.word	0xfffeff8f
 800db88:	40010000 	.word	0x40010000
 800db8c:	40010400 	.word	0x40010400
 800db90:	40014000 	.word	0x40014000
 800db94:	40014400 	.word	0x40014400
 800db98:	40014800 	.word	0x40014800

0800db9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b087      	sub	sp, #28
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	f023 0210 	bic.w	r2, r3, #16
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	4b34      	ldr	r3, [pc, #208]	@ (800dc98 <TIM_OC2_SetConfig+0xfc>)
 800dbc8:	4013      	ands	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dbd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	021b      	lsls	r3, r3, #8
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f023 0320 	bic.w	r3, r3, #32
 800dbe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	011b      	lsls	r3, r3, #4
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a29      	ldr	r2, [pc, #164]	@ (800dc9c <TIM_OC2_SetConfig+0x100>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d003      	beq.n	800dc04 <TIM_OC2_SetConfig+0x68>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a28      	ldr	r2, [pc, #160]	@ (800dca0 <TIM_OC2_SetConfig+0x104>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d10d      	bne.n	800dc20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	011b      	lsls	r3, r3, #4
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4a1e      	ldr	r2, [pc, #120]	@ (800dc9c <TIM_OC2_SetConfig+0x100>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d00f      	beq.n	800dc48 <TIM_OC2_SetConfig+0xac>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a1d      	ldr	r2, [pc, #116]	@ (800dca0 <TIM_OC2_SetConfig+0x104>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d00b      	beq.n	800dc48 <TIM_OC2_SetConfig+0xac>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a1c      	ldr	r2, [pc, #112]	@ (800dca4 <TIM_OC2_SetConfig+0x108>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d007      	beq.n	800dc48 <TIM_OC2_SetConfig+0xac>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a1b      	ldr	r2, [pc, #108]	@ (800dca8 <TIM_OC2_SetConfig+0x10c>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d003      	beq.n	800dc48 <TIM_OC2_SetConfig+0xac>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4a1a      	ldr	r2, [pc, #104]	@ (800dcac <TIM_OC2_SetConfig+0x110>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d113      	bne.n	800dc70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dc4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	693a      	ldr	r2, [r7, #16]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	699b      	ldr	r3, [r3, #24]
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	4313      	orrs	r3, r2
 800dc6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	693a      	ldr	r2, [r7, #16]
 800dc74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	621a      	str	r2, [r3, #32]
}
 800dc8a:	bf00      	nop
 800dc8c:	371c      	adds	r7, #28
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	feff8fff 	.word	0xfeff8fff
 800dc9c:	40010000 	.word	0x40010000
 800dca0:	40010400 	.word	0x40010400
 800dca4:	40014000 	.word	0x40014000
 800dca8:	40014400 	.word	0x40014400
 800dcac:	40014800 	.word	0x40014800

0800dcb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b087      	sub	sp, #28
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6a1b      	ldr	r3, [r3, #32]
 800dcc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	69db      	ldr	r3, [r3, #28]
 800dcd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	4b33      	ldr	r3, [pc, #204]	@ (800dda8 <TIM_OC3_SetConfig+0xf8>)
 800dcdc:	4013      	ands	r3, r2
 800dcde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f023 0303 	bic.w	r3, r3, #3
 800dce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dcf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	021b      	lsls	r3, r3, #8
 800dd00:	697a      	ldr	r2, [r7, #20]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4a28      	ldr	r2, [pc, #160]	@ (800ddac <TIM_OC3_SetConfig+0xfc>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d003      	beq.n	800dd16 <TIM_OC3_SetConfig+0x66>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a27      	ldr	r2, [pc, #156]	@ (800ddb0 <TIM_OC3_SetConfig+0x100>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d10d      	bne.n	800dd32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	021b      	lsls	r3, r3, #8
 800dd24:	697a      	ldr	r2, [r7, #20]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a1d      	ldr	r2, [pc, #116]	@ (800ddac <TIM_OC3_SetConfig+0xfc>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d00f      	beq.n	800dd5a <TIM_OC3_SetConfig+0xaa>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a1c      	ldr	r2, [pc, #112]	@ (800ddb0 <TIM_OC3_SetConfig+0x100>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d00b      	beq.n	800dd5a <TIM_OC3_SetConfig+0xaa>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a1b      	ldr	r2, [pc, #108]	@ (800ddb4 <TIM_OC3_SetConfig+0x104>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d007      	beq.n	800dd5a <TIM_OC3_SetConfig+0xaa>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a1a      	ldr	r2, [pc, #104]	@ (800ddb8 <TIM_OC3_SetConfig+0x108>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d003      	beq.n	800dd5a <TIM_OC3_SetConfig+0xaa>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a19      	ldr	r2, [pc, #100]	@ (800ddbc <TIM_OC3_SetConfig+0x10c>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d113      	bne.n	800dd82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	695b      	ldr	r3, [r3, #20]
 800dd6e:	011b      	lsls	r3, r3, #4
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	011b      	lsls	r3, r3, #4
 800dd7c:	693a      	ldr	r2, [r7, #16]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	685a      	ldr	r2, [r3, #4]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	621a      	str	r2, [r3, #32]
}
 800dd9c:	bf00      	nop
 800dd9e:	371c      	adds	r7, #28
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	fffeff8f 	.word	0xfffeff8f
 800ddac:	40010000 	.word	0x40010000
 800ddb0:	40010400 	.word	0x40010400
 800ddb4:	40014000 	.word	0x40014000
 800ddb8:	40014400 	.word	0x40014400
 800ddbc:	40014800 	.word	0x40014800

0800ddc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a1b      	ldr	r3, [r3, #32]
 800ddd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	69db      	ldr	r3, [r3, #28]
 800dde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	4b24      	ldr	r3, [pc, #144]	@ (800de7c <TIM_OC4_SetConfig+0xbc>)
 800ddec:	4013      	ands	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ddf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	021b      	lsls	r3, r3, #8
 800ddfe:	68fa      	ldr	r2, [r7, #12]
 800de00:	4313      	orrs	r3, r2
 800de02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	031b      	lsls	r3, r3, #12
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	4313      	orrs	r3, r2
 800de16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a19      	ldr	r2, [pc, #100]	@ (800de80 <TIM_OC4_SetConfig+0xc0>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d00f      	beq.n	800de40 <TIM_OC4_SetConfig+0x80>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	4a18      	ldr	r2, [pc, #96]	@ (800de84 <TIM_OC4_SetConfig+0xc4>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d00b      	beq.n	800de40 <TIM_OC4_SetConfig+0x80>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a17      	ldr	r2, [pc, #92]	@ (800de88 <TIM_OC4_SetConfig+0xc8>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d007      	beq.n	800de40 <TIM_OC4_SetConfig+0x80>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4a16      	ldr	r2, [pc, #88]	@ (800de8c <TIM_OC4_SetConfig+0xcc>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d003      	beq.n	800de40 <TIM_OC4_SetConfig+0x80>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4a15      	ldr	r2, [pc, #84]	@ (800de90 <TIM_OC4_SetConfig+0xd0>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d109      	bne.n	800de54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800de46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	019b      	lsls	r3, r3, #6
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	4313      	orrs	r3, r2
 800de52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	693a      	ldr	r2, [r7, #16]
 800de6c:	621a      	str	r2, [r3, #32]
}
 800de6e:	bf00      	nop
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	feff8fff 	.word	0xfeff8fff
 800de80:	40010000 	.word	0x40010000
 800de84:	40010400 	.word	0x40010400
 800de88:	40014000 	.word	0x40014000
 800de8c:	40014400 	.word	0x40014400
 800de90:	40014800 	.word	0x40014800

0800de94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de94:	b480      	push	{r7}
 800de96:	b087      	sub	sp, #28
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a1b      	ldr	r3, [r3, #32]
 800dea8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	4b21      	ldr	r3, [pc, #132]	@ (800df44 <TIM_OC5_SetConfig+0xb0>)
 800dec0:	4013      	ands	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	4313      	orrs	r3, r2
 800decc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ded4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	041b      	lsls	r3, r3, #16
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	4313      	orrs	r3, r2
 800dee0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4a18      	ldr	r2, [pc, #96]	@ (800df48 <TIM_OC5_SetConfig+0xb4>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d00f      	beq.n	800df0a <TIM_OC5_SetConfig+0x76>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4a17      	ldr	r2, [pc, #92]	@ (800df4c <TIM_OC5_SetConfig+0xb8>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d00b      	beq.n	800df0a <TIM_OC5_SetConfig+0x76>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	4a16      	ldr	r2, [pc, #88]	@ (800df50 <TIM_OC5_SetConfig+0xbc>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d007      	beq.n	800df0a <TIM_OC5_SetConfig+0x76>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a15      	ldr	r2, [pc, #84]	@ (800df54 <TIM_OC5_SetConfig+0xc0>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d003      	beq.n	800df0a <TIM_OC5_SetConfig+0x76>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a14      	ldr	r2, [pc, #80]	@ (800df58 <TIM_OC5_SetConfig+0xc4>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d109      	bne.n	800df1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	021b      	lsls	r3, r3, #8
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	697a      	ldr	r2, [r7, #20]
 800df22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	685a      	ldr	r2, [r3, #4]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	621a      	str	r2, [r3, #32]
}
 800df38:	bf00      	nop
 800df3a:	371c      	adds	r7, #28
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	fffeff8f 	.word	0xfffeff8f
 800df48:	40010000 	.word	0x40010000
 800df4c:	40010400 	.word	0x40010400
 800df50:	40014000 	.word	0x40014000
 800df54:	40014400 	.word	0x40014400
 800df58:	40014800 	.word	0x40014800

0800df5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b087      	sub	sp, #28
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a1b      	ldr	r3, [r3, #32]
 800df70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	4b22      	ldr	r3, [pc, #136]	@ (800e010 <TIM_OC6_SetConfig+0xb4>)
 800df88:	4013      	ands	r3, r2
 800df8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	021b      	lsls	r3, r3, #8
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	4313      	orrs	r3, r2
 800df96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800df9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	051b      	lsls	r3, r3, #20
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4a19      	ldr	r2, [pc, #100]	@ (800e014 <TIM_OC6_SetConfig+0xb8>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d00f      	beq.n	800dfd4 <TIM_OC6_SetConfig+0x78>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a18      	ldr	r2, [pc, #96]	@ (800e018 <TIM_OC6_SetConfig+0xbc>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d00b      	beq.n	800dfd4 <TIM_OC6_SetConfig+0x78>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a17      	ldr	r2, [pc, #92]	@ (800e01c <TIM_OC6_SetConfig+0xc0>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d007      	beq.n	800dfd4 <TIM_OC6_SetConfig+0x78>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a16      	ldr	r2, [pc, #88]	@ (800e020 <TIM_OC6_SetConfig+0xc4>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d003      	beq.n	800dfd4 <TIM_OC6_SetConfig+0x78>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4a15      	ldr	r2, [pc, #84]	@ (800e024 <TIM_OC6_SetConfig+0xc8>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d109      	bne.n	800dfe8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dfda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	029b      	lsls	r3, r3, #10
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	697a      	ldr	r2, [r7, #20]
 800dfec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	621a      	str	r2, [r3, #32]
}
 800e002:	bf00      	nop
 800e004:	371c      	adds	r7, #28
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	feff8fff 	.word	0xfeff8fff
 800e014:	40010000 	.word	0x40010000
 800e018:	40010400 	.word	0x40010400
 800e01c:	40014000 	.word	0x40014000
 800e020:	40014400 	.word	0x40014400
 800e024:	40014800 	.word	0x40014800

0800e028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e028:	b480      	push	{r7}
 800e02a:	b087      	sub	sp, #28
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6a1b      	ldr	r3, [r3, #32]
 800e038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	f023 0201 	bic.w	r2, r3, #1
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	011b      	lsls	r3, r3, #4
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f023 030a 	bic.w	r3, r3, #10
 800e064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e066:	697a      	ldr	r2, [r7, #20]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	4313      	orrs	r3, r2
 800e06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	693a      	ldr	r2, [r7, #16]
 800e072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	621a      	str	r2, [r3, #32]
}
 800e07a:	bf00      	nop
 800e07c:	371c      	adds	r7, #28
 800e07e:	46bd      	mov	sp, r7
 800e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e084:	4770      	bx	lr

0800e086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e086:	b480      	push	{r7}
 800e088:	b087      	sub	sp, #28
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	60f8      	str	r0, [r7, #12]
 800e08e:	60b9      	str	r1, [r7, #8]
 800e090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6a1b      	ldr	r3, [r3, #32]
 800e09c:	f023 0210 	bic.w	r2, r3, #16
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e0b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	031b      	lsls	r3, r3, #12
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e0c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	011b      	lsls	r3, r3, #4
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	693a      	ldr	r2, [r7, #16]
 800e0d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	621a      	str	r2, [r3, #32]
}
 800e0da:	bf00      	nop
 800e0dc:	371c      	adds	r7, #28
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr
	...

0800e0e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	689b      	ldr	r3, [r3, #8]
 800e0f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	4b09      	ldr	r3, [pc, #36]	@ (800e120 <TIM_ITRx_SetConfig+0x38>)
 800e0fc:	4013      	ands	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e100:	683a      	ldr	r2, [r7, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	4313      	orrs	r3, r2
 800e106:	f043 0307 	orr.w	r3, r3, #7
 800e10a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	609a      	str	r2, [r3, #8]
}
 800e112:	bf00      	nop
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	ffcfff8f 	.word	0xffcfff8f

0800e124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e124:	b480      	push	{r7}
 800e126:	b087      	sub	sp, #28
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
 800e130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e13e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	021a      	lsls	r2, r3, #8
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	431a      	orrs	r2, r3
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	697a      	ldr	r2, [r7, #20]
 800e14e:	4313      	orrs	r3, r2
 800e150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	697a      	ldr	r2, [r7, #20]
 800e156:	609a      	str	r2, [r3, #8]
}
 800e158:	bf00      	nop
 800e15a:	371c      	adds	r7, #28
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e174:	2b01      	cmp	r3, #1
 800e176:	d101      	bne.n	800e17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e178:	2302      	movs	r3, #2
 800e17a:	e077      	b.n	800e26c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2202      	movs	r2, #2
 800e188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a35      	ldr	r2, [pc, #212]	@ (800e278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d004      	beq.n	800e1b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a34      	ldr	r2, [pc, #208]	@ (800e27c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d108      	bne.n	800e1c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e1b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a25      	ldr	r2, [pc, #148]	@ (800e278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d02c      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1ee:	d027      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a22      	ldr	r2, [pc, #136]	@ (800e280 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d022      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a21      	ldr	r2, [pc, #132]	@ (800e284 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d01d      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a1f      	ldr	r2, [pc, #124]	@ (800e288 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d018      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a1a      	ldr	r2, [pc, #104]	@ (800e27c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d013      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a1b      	ldr	r2, [pc, #108]	@ (800e28c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d00e      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a1a      	ldr	r2, [pc, #104]	@ (800e290 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d009      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a18      	ldr	r2, [pc, #96]	@ (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d004      	beq.n	800e240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	4a17      	ldr	r2, [pc, #92]	@ (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d10c      	bne.n	800e25a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	4313      	orrs	r3, r2
 800e250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68ba      	ldr	r2, [r7, #8]
 800e258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2201      	movs	r2, #1
 800e25e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3714      	adds	r7, #20
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	40010000 	.word	0x40010000
 800e27c:	40010400 	.word	0x40010400
 800e280:	40000400 	.word	0x40000400
 800e284:	40000800 	.word	0x40000800
 800e288:	40000c00 	.word	0x40000c00
 800e28c:	40001800 	.word	0x40001800
 800e290:	40014000 	.word	0x40014000
 800e294:	4000e000 	.word	0x4000e000
 800e298:	4000e400 	.word	0x4000e400

0800e29c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d101      	bne.n	800e2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	e073      	b.n	800e3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	4313      	orrs	r3, r2
 800e304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	695b      	ldr	r3, [r3, #20]
 800e310:	4313      	orrs	r3, r2
 800e312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e31e:	4313      	orrs	r3, r2
 800e320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	041b      	lsls	r3, r3, #16
 800e32e:	4313      	orrs	r3, r2
 800e330:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	69db      	ldr	r3, [r3, #28]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a19      	ldr	r2, [pc, #100]	@ (800e3ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d004      	beq.n	800e354 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a18      	ldr	r2, [pc, #96]	@ (800e3b0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d11c      	bne.n	800e38e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e35e:	051b      	lsls	r3, r3, #20
 800e360:	4313      	orrs	r3, r2
 800e362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38a:	4313      	orrs	r3, r2
 800e38c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3714      	adds	r7, #20
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3aa:	4770      	bx	lr
 800e3ac:	40010000 	.word	0x40010000
 800e3b0:	40010400 	.word	0x40010400

0800e3b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3d0:	bf00      	nop
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d101      	bne.n	800e402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e042      	b.n	800e488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d106      	bne.n	800e41a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f3 fe15 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2224      	movs	r2, #36	@ 0x24
 800e41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f022 0201 	bic.w	r2, r2, #1
 800e430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 ff22 	bl	800f284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f8b3 	bl	800e5ac <UART_SetConfig>
 800e446:	4603      	mov	r3, r0
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d101      	bne.n	800e450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e01b      	b.n	800e488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	685a      	ldr	r2, [r3, #4]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e45e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689a      	ldr	r2, [r3, #8]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e46e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f042 0201 	orr.w	r2, r2, #1
 800e47e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 ffa1 	bl	800f3c8 <UART_CheckIdleState>
 800e486:	4603      	mov	r3, r0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08a      	sub	sp, #40	@ 0x28
 800e494:	af02      	add	r7, sp, #8
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	4613      	mov	r3, r2
 800e49e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4a6:	2b20      	cmp	r3, #32
 800e4a8:	d17b      	bne.n	800e5a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <HAL_UART_Transmit+0x26>
 800e4b0:	88fb      	ldrh	r3, [r7, #6]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d101      	bne.n	800e4ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e074      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2221      	movs	r2, #33	@ 0x21
 800e4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e4ca:	f7f4 f84b 	bl	8002564 <HAL_GetTick>
 800e4ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	88fa      	ldrh	r2, [r7, #6]
 800e4d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	88fa      	ldrh	r2, [r7, #6]
 800e4dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4e8:	d108      	bne.n	800e4fc <HAL_UART_Transmit+0x6c>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d104      	bne.n	800e4fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	61bb      	str	r3, [r7, #24]
 800e4fa:	e003      	b.n	800e504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e500:	2300      	movs	r3, #0
 800e502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e504:	e030      	b.n	800e568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	2200      	movs	r2, #0
 800e50e:	2180      	movs	r1, #128	@ 0x80
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f001 f803 	bl	800f51c <UART_WaitOnFlagUntilTimeout>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d005      	beq.n	800e528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2220      	movs	r2, #32
 800e520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e524:	2303      	movs	r3, #3
 800e526:	e03d      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10b      	bne.n	800e546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	461a      	mov	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e53c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	3302      	adds	r3, #2
 800e542:	61bb      	str	r3, [r7, #24]
 800e544:	e007      	b.n	800e556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	781a      	ldrb	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	3301      	adds	r3, #1
 800e554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	3b01      	subs	r3, #1
 800e560:	b29a      	uxth	r2, r3
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e56e:	b29b      	uxth	r3, r3
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1c8      	bne.n	800e506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2200      	movs	r2, #0
 800e57c:	2140      	movs	r1, #64	@ 0x40
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f000 ffcc 	bl	800f51c <UART_WaitOnFlagUntilTimeout>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d005      	beq.n	800e596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e592:	2303      	movs	r3, #3
 800e594:	e006      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2220      	movs	r2, #32
 800e59a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e000      	b.n	800e5a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e5a2:	2302      	movs	r3, #2
  }
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3720      	adds	r7, #32
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5b0:	b092      	sub	sp, #72	@ 0x48
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	689a      	ldr	r2, [r3, #8]
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	431a      	orrs	r2, r3
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	431a      	orrs	r2, r3
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	69db      	ldr	r3, [r3, #28]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	4bbe      	ldr	r3, [pc, #760]	@ (800e8d4 <UART_SetConfig+0x328>)
 800e5dc:	4013      	ands	r3, r2
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	6812      	ldr	r2, [r2, #0]
 800e5e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e5e4:	430b      	orrs	r3, r1
 800e5e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	68da      	ldr	r2, [r3, #12]
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4ab3      	ldr	r2, [pc, #716]	@ (800e8d8 <UART_SetConfig+0x32c>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d004      	beq.n	800e618 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e614:	4313      	orrs	r3, r2
 800e616:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	689a      	ldr	r2, [r3, #8]
 800e61e:	4baf      	ldr	r3, [pc, #700]	@ (800e8dc <UART_SetConfig+0x330>)
 800e620:	4013      	ands	r3, r2
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	6812      	ldr	r2, [r2, #0]
 800e626:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e628:	430b      	orrs	r3, r1
 800e62a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e632:	f023 010f 	bic.w	r1, r3, #15
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	430a      	orrs	r2, r1
 800e640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4aa6      	ldr	r2, [pc, #664]	@ (800e8e0 <UART_SetConfig+0x334>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d177      	bne.n	800e73c <UART_SetConfig+0x190>
 800e64c:	4ba5      	ldr	r3, [pc, #660]	@ (800e8e4 <UART_SetConfig+0x338>)
 800e64e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e650:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e654:	2b28      	cmp	r3, #40	@ 0x28
 800e656:	d86d      	bhi.n	800e734 <UART_SetConfig+0x188>
 800e658:	a201      	add	r2, pc, #4	@ (adr r2, 800e660 <UART_SetConfig+0xb4>)
 800e65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65e:	bf00      	nop
 800e660:	0800e705 	.word	0x0800e705
 800e664:	0800e735 	.word	0x0800e735
 800e668:	0800e735 	.word	0x0800e735
 800e66c:	0800e735 	.word	0x0800e735
 800e670:	0800e735 	.word	0x0800e735
 800e674:	0800e735 	.word	0x0800e735
 800e678:	0800e735 	.word	0x0800e735
 800e67c:	0800e735 	.word	0x0800e735
 800e680:	0800e70d 	.word	0x0800e70d
 800e684:	0800e735 	.word	0x0800e735
 800e688:	0800e735 	.word	0x0800e735
 800e68c:	0800e735 	.word	0x0800e735
 800e690:	0800e735 	.word	0x0800e735
 800e694:	0800e735 	.word	0x0800e735
 800e698:	0800e735 	.word	0x0800e735
 800e69c:	0800e735 	.word	0x0800e735
 800e6a0:	0800e715 	.word	0x0800e715
 800e6a4:	0800e735 	.word	0x0800e735
 800e6a8:	0800e735 	.word	0x0800e735
 800e6ac:	0800e735 	.word	0x0800e735
 800e6b0:	0800e735 	.word	0x0800e735
 800e6b4:	0800e735 	.word	0x0800e735
 800e6b8:	0800e735 	.word	0x0800e735
 800e6bc:	0800e735 	.word	0x0800e735
 800e6c0:	0800e71d 	.word	0x0800e71d
 800e6c4:	0800e735 	.word	0x0800e735
 800e6c8:	0800e735 	.word	0x0800e735
 800e6cc:	0800e735 	.word	0x0800e735
 800e6d0:	0800e735 	.word	0x0800e735
 800e6d4:	0800e735 	.word	0x0800e735
 800e6d8:	0800e735 	.word	0x0800e735
 800e6dc:	0800e735 	.word	0x0800e735
 800e6e0:	0800e725 	.word	0x0800e725
 800e6e4:	0800e735 	.word	0x0800e735
 800e6e8:	0800e735 	.word	0x0800e735
 800e6ec:	0800e735 	.word	0x0800e735
 800e6f0:	0800e735 	.word	0x0800e735
 800e6f4:	0800e735 	.word	0x0800e735
 800e6f8:	0800e735 	.word	0x0800e735
 800e6fc:	0800e735 	.word	0x0800e735
 800e700:	0800e72d 	.word	0x0800e72d
 800e704:	2301      	movs	r3, #1
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e70a:	e326      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e70c:	2304      	movs	r3, #4
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e712:	e322      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e714:	2308      	movs	r3, #8
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e71a:	e31e      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e71c:	2310      	movs	r3, #16
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e722:	e31a      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e724:	2320      	movs	r3, #32
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e72a:	e316      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e72c:	2340      	movs	r3, #64	@ 0x40
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e732:	e312      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e734:	2380      	movs	r3, #128	@ 0x80
 800e736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e73a:	e30e      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	4a69      	ldr	r2, [pc, #420]	@ (800e8e8 <UART_SetConfig+0x33c>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d130      	bne.n	800e7a8 <UART_SetConfig+0x1fc>
 800e746:	4b67      	ldr	r3, [pc, #412]	@ (800e8e4 <UART_SetConfig+0x338>)
 800e748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e74a:	f003 0307 	and.w	r3, r3, #7
 800e74e:	2b05      	cmp	r3, #5
 800e750:	d826      	bhi.n	800e7a0 <UART_SetConfig+0x1f4>
 800e752:	a201      	add	r2, pc, #4	@ (adr r2, 800e758 <UART_SetConfig+0x1ac>)
 800e754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e758:	0800e771 	.word	0x0800e771
 800e75c:	0800e779 	.word	0x0800e779
 800e760:	0800e781 	.word	0x0800e781
 800e764:	0800e789 	.word	0x0800e789
 800e768:	0800e791 	.word	0x0800e791
 800e76c:	0800e799 	.word	0x0800e799
 800e770:	2300      	movs	r3, #0
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e776:	e2f0      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e778:	2304      	movs	r3, #4
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e77e:	e2ec      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e780:	2308      	movs	r3, #8
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e786:	e2e8      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e788:	2310      	movs	r3, #16
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e78e:	e2e4      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e790:	2320      	movs	r3, #32
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e796:	e2e0      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e798:	2340      	movs	r3, #64	@ 0x40
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e79e:	e2dc      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e7a0:	2380      	movs	r3, #128	@ 0x80
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7a6:	e2d8      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a4f      	ldr	r2, [pc, #316]	@ (800e8ec <UART_SetConfig+0x340>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d130      	bne.n	800e814 <UART_SetConfig+0x268>
 800e7b2:	4b4c      	ldr	r3, [pc, #304]	@ (800e8e4 <UART_SetConfig+0x338>)
 800e7b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7b6:	f003 0307 	and.w	r3, r3, #7
 800e7ba:	2b05      	cmp	r3, #5
 800e7bc:	d826      	bhi.n	800e80c <UART_SetConfig+0x260>
 800e7be:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c4 <UART_SetConfig+0x218>)
 800e7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c4:	0800e7dd 	.word	0x0800e7dd
 800e7c8:	0800e7e5 	.word	0x0800e7e5
 800e7cc:	0800e7ed 	.word	0x0800e7ed
 800e7d0:	0800e7f5 	.word	0x0800e7f5
 800e7d4:	0800e7fd 	.word	0x0800e7fd
 800e7d8:	0800e805 	.word	0x0800e805
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7e2:	e2ba      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e7e4:	2304      	movs	r3, #4
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ea:	e2b6      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7f2:	e2b2      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e7f4:	2310      	movs	r3, #16
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7fa:	e2ae      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e7fc:	2320      	movs	r3, #32
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e802:	e2aa      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e804:	2340      	movs	r3, #64	@ 0x40
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e80a:	e2a6      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e80c:	2380      	movs	r3, #128	@ 0x80
 800e80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e812:	e2a2      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a35      	ldr	r2, [pc, #212]	@ (800e8f0 <UART_SetConfig+0x344>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d130      	bne.n	800e880 <UART_SetConfig+0x2d4>
 800e81e:	4b31      	ldr	r3, [pc, #196]	@ (800e8e4 <UART_SetConfig+0x338>)
 800e820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e822:	f003 0307 	and.w	r3, r3, #7
 800e826:	2b05      	cmp	r3, #5
 800e828:	d826      	bhi.n	800e878 <UART_SetConfig+0x2cc>
 800e82a:	a201      	add	r2, pc, #4	@ (adr r2, 800e830 <UART_SetConfig+0x284>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e849 	.word	0x0800e849
 800e834:	0800e851 	.word	0x0800e851
 800e838:	0800e859 	.word	0x0800e859
 800e83c:	0800e861 	.word	0x0800e861
 800e840:	0800e869 	.word	0x0800e869
 800e844:	0800e871 	.word	0x0800e871
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e84e:	e284      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e850:	2304      	movs	r3, #4
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e856:	e280      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e858:	2308      	movs	r3, #8
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e85e:	e27c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e860:	2310      	movs	r3, #16
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e866:	e278      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e868:	2320      	movs	r3, #32
 800e86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e86e:	e274      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e870:	2340      	movs	r3, #64	@ 0x40
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e876:	e270      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e878:	2380      	movs	r3, #128	@ 0x80
 800e87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e87e:	e26c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a1b      	ldr	r2, [pc, #108]	@ (800e8f4 <UART_SetConfig+0x348>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d142      	bne.n	800e910 <UART_SetConfig+0x364>
 800e88a:	4b16      	ldr	r3, [pc, #88]	@ (800e8e4 <UART_SetConfig+0x338>)
 800e88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e88e:	f003 0307 	and.w	r3, r3, #7
 800e892:	2b05      	cmp	r3, #5
 800e894:	d838      	bhi.n	800e908 <UART_SetConfig+0x35c>
 800e896:	a201      	add	r2, pc, #4	@ (adr r2, 800e89c <UART_SetConfig+0x2f0>)
 800e898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89c:	0800e8b5 	.word	0x0800e8b5
 800e8a0:	0800e8bd 	.word	0x0800e8bd
 800e8a4:	0800e8c5 	.word	0x0800e8c5
 800e8a8:	0800e8cd 	.word	0x0800e8cd
 800e8ac:	0800e8f9 	.word	0x0800e8f9
 800e8b0:	0800e901 	.word	0x0800e901
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ba:	e24e      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e8bc:	2304      	movs	r3, #4
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8c2:	e24a      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ca:	e246      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e8cc:	2310      	movs	r3, #16
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8d2:	e242      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e8d4:	cfff69f3 	.word	0xcfff69f3
 800e8d8:	58000c00 	.word	0x58000c00
 800e8dc:	11fff4ff 	.word	0x11fff4ff
 800e8e0:	40011000 	.word	0x40011000
 800e8e4:	58024400 	.word	0x58024400
 800e8e8:	40004400 	.word	0x40004400
 800e8ec:	40004800 	.word	0x40004800
 800e8f0:	40004c00 	.word	0x40004c00
 800e8f4:	40005000 	.word	0x40005000
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8fe:	e22c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e900:	2340      	movs	r3, #64	@ 0x40
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e906:	e228      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e908:	2380      	movs	r3, #128	@ 0x80
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90e:	e224      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4ab1      	ldr	r2, [pc, #708]	@ (800ebdc <UART_SetConfig+0x630>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d176      	bne.n	800ea08 <UART_SetConfig+0x45c>
 800e91a:	4bb1      	ldr	r3, [pc, #708]	@ (800ebe0 <UART_SetConfig+0x634>)
 800e91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e91e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e922:	2b28      	cmp	r3, #40	@ 0x28
 800e924:	d86c      	bhi.n	800ea00 <UART_SetConfig+0x454>
 800e926:	a201      	add	r2, pc, #4	@ (adr r2, 800e92c <UART_SetConfig+0x380>)
 800e928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92c:	0800e9d1 	.word	0x0800e9d1
 800e930:	0800ea01 	.word	0x0800ea01
 800e934:	0800ea01 	.word	0x0800ea01
 800e938:	0800ea01 	.word	0x0800ea01
 800e93c:	0800ea01 	.word	0x0800ea01
 800e940:	0800ea01 	.word	0x0800ea01
 800e944:	0800ea01 	.word	0x0800ea01
 800e948:	0800ea01 	.word	0x0800ea01
 800e94c:	0800e9d9 	.word	0x0800e9d9
 800e950:	0800ea01 	.word	0x0800ea01
 800e954:	0800ea01 	.word	0x0800ea01
 800e958:	0800ea01 	.word	0x0800ea01
 800e95c:	0800ea01 	.word	0x0800ea01
 800e960:	0800ea01 	.word	0x0800ea01
 800e964:	0800ea01 	.word	0x0800ea01
 800e968:	0800ea01 	.word	0x0800ea01
 800e96c:	0800e9e1 	.word	0x0800e9e1
 800e970:	0800ea01 	.word	0x0800ea01
 800e974:	0800ea01 	.word	0x0800ea01
 800e978:	0800ea01 	.word	0x0800ea01
 800e97c:	0800ea01 	.word	0x0800ea01
 800e980:	0800ea01 	.word	0x0800ea01
 800e984:	0800ea01 	.word	0x0800ea01
 800e988:	0800ea01 	.word	0x0800ea01
 800e98c:	0800e9e9 	.word	0x0800e9e9
 800e990:	0800ea01 	.word	0x0800ea01
 800e994:	0800ea01 	.word	0x0800ea01
 800e998:	0800ea01 	.word	0x0800ea01
 800e99c:	0800ea01 	.word	0x0800ea01
 800e9a0:	0800ea01 	.word	0x0800ea01
 800e9a4:	0800ea01 	.word	0x0800ea01
 800e9a8:	0800ea01 	.word	0x0800ea01
 800e9ac:	0800e9f1 	.word	0x0800e9f1
 800e9b0:	0800ea01 	.word	0x0800ea01
 800e9b4:	0800ea01 	.word	0x0800ea01
 800e9b8:	0800ea01 	.word	0x0800ea01
 800e9bc:	0800ea01 	.word	0x0800ea01
 800e9c0:	0800ea01 	.word	0x0800ea01
 800e9c4:	0800ea01 	.word	0x0800ea01
 800e9c8:	0800ea01 	.word	0x0800ea01
 800e9cc:	0800e9f9 	.word	0x0800e9f9
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d6:	e1c0      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e9d8:	2304      	movs	r3, #4
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9de:	e1bc      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e9e0:	2308      	movs	r3, #8
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	e1b8      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e9e8:	2310      	movs	r3, #16
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ee:	e1b4      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e9f0:	2320      	movs	r3, #32
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f6:	e1b0      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800e9f8:	2340      	movs	r3, #64	@ 0x40
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e1ac      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea00:	2380      	movs	r3, #128	@ 0x80
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e1a8      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a75      	ldr	r2, [pc, #468]	@ (800ebe4 <UART_SetConfig+0x638>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d130      	bne.n	800ea74 <UART_SetConfig+0x4c8>
 800ea12:	4b73      	ldr	r3, [pc, #460]	@ (800ebe0 <UART_SetConfig+0x634>)
 800ea14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b05      	cmp	r3, #5
 800ea1c:	d826      	bhi.n	800ea6c <UART_SetConfig+0x4c0>
 800ea1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea24 <UART_SetConfig+0x478>)
 800ea20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea24:	0800ea3d 	.word	0x0800ea3d
 800ea28:	0800ea45 	.word	0x0800ea45
 800ea2c:	0800ea4d 	.word	0x0800ea4d
 800ea30:	0800ea55 	.word	0x0800ea55
 800ea34:	0800ea5d 	.word	0x0800ea5d
 800ea38:	0800ea65 	.word	0x0800ea65
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea42:	e18a      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea44:	2304      	movs	r3, #4
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4a:	e186      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea4c:	2308      	movs	r3, #8
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea52:	e182      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea54:	2310      	movs	r3, #16
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5a:	e17e      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea5c:	2320      	movs	r3, #32
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea62:	e17a      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea64:	2340      	movs	r3, #64	@ 0x40
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea6a:	e176      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea6c:	2380      	movs	r3, #128	@ 0x80
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea72:	e172      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a5b      	ldr	r2, [pc, #364]	@ (800ebe8 <UART_SetConfig+0x63c>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d130      	bne.n	800eae0 <UART_SetConfig+0x534>
 800ea7e:	4b58      	ldr	r3, [pc, #352]	@ (800ebe0 <UART_SetConfig+0x634>)
 800ea80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea82:	f003 0307 	and.w	r3, r3, #7
 800ea86:	2b05      	cmp	r3, #5
 800ea88:	d826      	bhi.n	800ead8 <UART_SetConfig+0x52c>
 800ea8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea90 <UART_SetConfig+0x4e4>)
 800ea8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea90:	0800eaa9 	.word	0x0800eaa9
 800ea94:	0800eab1 	.word	0x0800eab1
 800ea98:	0800eab9 	.word	0x0800eab9
 800ea9c:	0800eac1 	.word	0x0800eac1
 800eaa0:	0800eac9 	.word	0x0800eac9
 800eaa4:	0800ead1 	.word	0x0800ead1
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaae:	e154      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800eab0:	2304      	movs	r3, #4
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab6:	e150      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800eab8:	2308      	movs	r3, #8
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eabe:	e14c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800eac0:	2310      	movs	r3, #16
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eac6:	e148      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800eac8:	2320      	movs	r3, #32
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eace:	e144      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ead0:	2340      	movs	r3, #64	@ 0x40
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead6:	e140      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ead8:	2380      	movs	r3, #128	@ 0x80
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eade:	e13c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a41      	ldr	r2, [pc, #260]	@ (800ebec <UART_SetConfig+0x640>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	f040 8082 	bne.w	800ebf0 <UART_SetConfig+0x644>
 800eaec:	4b3c      	ldr	r3, [pc, #240]	@ (800ebe0 <UART_SetConfig+0x634>)
 800eaee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eaf4:	2b28      	cmp	r3, #40	@ 0x28
 800eaf6:	d86d      	bhi.n	800ebd4 <UART_SetConfig+0x628>
 800eaf8:	a201      	add	r2, pc, #4	@ (adr r2, 800eb00 <UART_SetConfig+0x554>)
 800eafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafe:	bf00      	nop
 800eb00:	0800eba5 	.word	0x0800eba5
 800eb04:	0800ebd5 	.word	0x0800ebd5
 800eb08:	0800ebd5 	.word	0x0800ebd5
 800eb0c:	0800ebd5 	.word	0x0800ebd5
 800eb10:	0800ebd5 	.word	0x0800ebd5
 800eb14:	0800ebd5 	.word	0x0800ebd5
 800eb18:	0800ebd5 	.word	0x0800ebd5
 800eb1c:	0800ebd5 	.word	0x0800ebd5
 800eb20:	0800ebad 	.word	0x0800ebad
 800eb24:	0800ebd5 	.word	0x0800ebd5
 800eb28:	0800ebd5 	.word	0x0800ebd5
 800eb2c:	0800ebd5 	.word	0x0800ebd5
 800eb30:	0800ebd5 	.word	0x0800ebd5
 800eb34:	0800ebd5 	.word	0x0800ebd5
 800eb38:	0800ebd5 	.word	0x0800ebd5
 800eb3c:	0800ebd5 	.word	0x0800ebd5
 800eb40:	0800ebb5 	.word	0x0800ebb5
 800eb44:	0800ebd5 	.word	0x0800ebd5
 800eb48:	0800ebd5 	.word	0x0800ebd5
 800eb4c:	0800ebd5 	.word	0x0800ebd5
 800eb50:	0800ebd5 	.word	0x0800ebd5
 800eb54:	0800ebd5 	.word	0x0800ebd5
 800eb58:	0800ebd5 	.word	0x0800ebd5
 800eb5c:	0800ebd5 	.word	0x0800ebd5
 800eb60:	0800ebbd 	.word	0x0800ebbd
 800eb64:	0800ebd5 	.word	0x0800ebd5
 800eb68:	0800ebd5 	.word	0x0800ebd5
 800eb6c:	0800ebd5 	.word	0x0800ebd5
 800eb70:	0800ebd5 	.word	0x0800ebd5
 800eb74:	0800ebd5 	.word	0x0800ebd5
 800eb78:	0800ebd5 	.word	0x0800ebd5
 800eb7c:	0800ebd5 	.word	0x0800ebd5
 800eb80:	0800ebc5 	.word	0x0800ebc5
 800eb84:	0800ebd5 	.word	0x0800ebd5
 800eb88:	0800ebd5 	.word	0x0800ebd5
 800eb8c:	0800ebd5 	.word	0x0800ebd5
 800eb90:	0800ebd5 	.word	0x0800ebd5
 800eb94:	0800ebd5 	.word	0x0800ebd5
 800eb98:	0800ebd5 	.word	0x0800ebd5
 800eb9c:	0800ebd5 	.word	0x0800ebd5
 800eba0:	0800ebcd 	.word	0x0800ebcd
 800eba4:	2301      	movs	r3, #1
 800eba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebaa:	e0d6      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebac:	2304      	movs	r3, #4
 800ebae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb2:	e0d2      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebb4:	2308      	movs	r3, #8
 800ebb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebba:	e0ce      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebbc:	2310      	movs	r3, #16
 800ebbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebc2:	e0ca      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebca:	e0c6      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebcc:	2340      	movs	r3, #64	@ 0x40
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebd2:	e0c2      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebd4:	2380      	movs	r3, #128	@ 0x80
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebda:	e0be      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ebdc:	40011400 	.word	0x40011400
 800ebe0:	58024400 	.word	0x58024400
 800ebe4:	40007800 	.word	0x40007800
 800ebe8:	40007c00 	.word	0x40007c00
 800ebec:	40011800 	.word	0x40011800
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4aad      	ldr	r2, [pc, #692]	@ (800eeac <UART_SetConfig+0x900>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d176      	bne.n	800ece8 <UART_SetConfig+0x73c>
 800ebfa:	4bad      	ldr	r3, [pc, #692]	@ (800eeb0 <UART_SetConfig+0x904>)
 800ebfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec02:	2b28      	cmp	r3, #40	@ 0x28
 800ec04:	d86c      	bhi.n	800ece0 <UART_SetConfig+0x734>
 800ec06:	a201      	add	r2, pc, #4	@ (adr r2, 800ec0c <UART_SetConfig+0x660>)
 800ec08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0c:	0800ecb1 	.word	0x0800ecb1
 800ec10:	0800ece1 	.word	0x0800ece1
 800ec14:	0800ece1 	.word	0x0800ece1
 800ec18:	0800ece1 	.word	0x0800ece1
 800ec1c:	0800ece1 	.word	0x0800ece1
 800ec20:	0800ece1 	.word	0x0800ece1
 800ec24:	0800ece1 	.word	0x0800ece1
 800ec28:	0800ece1 	.word	0x0800ece1
 800ec2c:	0800ecb9 	.word	0x0800ecb9
 800ec30:	0800ece1 	.word	0x0800ece1
 800ec34:	0800ece1 	.word	0x0800ece1
 800ec38:	0800ece1 	.word	0x0800ece1
 800ec3c:	0800ece1 	.word	0x0800ece1
 800ec40:	0800ece1 	.word	0x0800ece1
 800ec44:	0800ece1 	.word	0x0800ece1
 800ec48:	0800ece1 	.word	0x0800ece1
 800ec4c:	0800ecc1 	.word	0x0800ecc1
 800ec50:	0800ece1 	.word	0x0800ece1
 800ec54:	0800ece1 	.word	0x0800ece1
 800ec58:	0800ece1 	.word	0x0800ece1
 800ec5c:	0800ece1 	.word	0x0800ece1
 800ec60:	0800ece1 	.word	0x0800ece1
 800ec64:	0800ece1 	.word	0x0800ece1
 800ec68:	0800ece1 	.word	0x0800ece1
 800ec6c:	0800ecc9 	.word	0x0800ecc9
 800ec70:	0800ece1 	.word	0x0800ece1
 800ec74:	0800ece1 	.word	0x0800ece1
 800ec78:	0800ece1 	.word	0x0800ece1
 800ec7c:	0800ece1 	.word	0x0800ece1
 800ec80:	0800ece1 	.word	0x0800ece1
 800ec84:	0800ece1 	.word	0x0800ece1
 800ec88:	0800ece1 	.word	0x0800ece1
 800ec8c:	0800ecd1 	.word	0x0800ecd1
 800ec90:	0800ece1 	.word	0x0800ece1
 800ec94:	0800ece1 	.word	0x0800ece1
 800ec98:	0800ece1 	.word	0x0800ece1
 800ec9c:	0800ece1 	.word	0x0800ece1
 800eca0:	0800ece1 	.word	0x0800ece1
 800eca4:	0800ece1 	.word	0x0800ece1
 800eca8:	0800ece1 	.word	0x0800ece1
 800ecac:	0800ecd9 	.word	0x0800ecd9
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb6:	e050      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ecb8:	2304      	movs	r3, #4
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecbe:	e04c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ecc0:	2308      	movs	r3, #8
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc6:	e048      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ecc8:	2310      	movs	r3, #16
 800ecca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecce:	e044      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ecd0:	2320      	movs	r3, #32
 800ecd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd6:	e040      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ecd8:	2340      	movs	r3, #64	@ 0x40
 800ecda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecde:	e03c      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ece0:	2380      	movs	r3, #128	@ 0x80
 800ece2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ece6:	e038      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a71      	ldr	r2, [pc, #452]	@ (800eeb4 <UART_SetConfig+0x908>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d130      	bne.n	800ed54 <UART_SetConfig+0x7a8>
 800ecf2:	4b6f      	ldr	r3, [pc, #444]	@ (800eeb0 <UART_SetConfig+0x904>)
 800ecf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecf6:	f003 0307 	and.w	r3, r3, #7
 800ecfa:	2b05      	cmp	r3, #5
 800ecfc:	d826      	bhi.n	800ed4c <UART_SetConfig+0x7a0>
 800ecfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ed04 <UART_SetConfig+0x758>)
 800ed00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed04:	0800ed1d 	.word	0x0800ed1d
 800ed08:	0800ed25 	.word	0x0800ed25
 800ed0c:	0800ed2d 	.word	0x0800ed2d
 800ed10:	0800ed35 	.word	0x0800ed35
 800ed14:	0800ed3d 	.word	0x0800ed3d
 800ed18:	0800ed45 	.word	0x0800ed45
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed22:	e01a      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed24:	2304      	movs	r3, #4
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2a:	e016      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed2c:	2308      	movs	r3, #8
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed32:	e012      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed34:	2310      	movs	r3, #16
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3a:	e00e      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed42:	e00a      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed44:	2340      	movs	r3, #64	@ 0x40
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4a:	e006      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed4c:	2380      	movs	r3, #128	@ 0x80
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed52:	e002      	b.n	800ed5a <UART_SetConfig+0x7ae>
 800ed54:	2380      	movs	r3, #128	@ 0x80
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4a55      	ldr	r2, [pc, #340]	@ (800eeb4 <UART_SetConfig+0x908>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	f040 80f8 	bne.w	800ef56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed6a:	2b20      	cmp	r3, #32
 800ed6c:	dc46      	bgt.n	800edfc <UART_SetConfig+0x850>
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	db75      	blt.n	800ee5e <UART_SetConfig+0x8b2>
 800ed72:	3b02      	subs	r3, #2
 800ed74:	2b1e      	cmp	r3, #30
 800ed76:	d872      	bhi.n	800ee5e <UART_SetConfig+0x8b2>
 800ed78:	a201      	add	r2, pc, #4	@ (adr r2, 800ed80 <UART_SetConfig+0x7d4>)
 800ed7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7e:	bf00      	nop
 800ed80:	0800ee03 	.word	0x0800ee03
 800ed84:	0800ee5f 	.word	0x0800ee5f
 800ed88:	0800ee0b 	.word	0x0800ee0b
 800ed8c:	0800ee5f 	.word	0x0800ee5f
 800ed90:	0800ee5f 	.word	0x0800ee5f
 800ed94:	0800ee5f 	.word	0x0800ee5f
 800ed98:	0800ee1b 	.word	0x0800ee1b
 800ed9c:	0800ee5f 	.word	0x0800ee5f
 800eda0:	0800ee5f 	.word	0x0800ee5f
 800eda4:	0800ee5f 	.word	0x0800ee5f
 800eda8:	0800ee5f 	.word	0x0800ee5f
 800edac:	0800ee5f 	.word	0x0800ee5f
 800edb0:	0800ee5f 	.word	0x0800ee5f
 800edb4:	0800ee5f 	.word	0x0800ee5f
 800edb8:	0800ee2b 	.word	0x0800ee2b
 800edbc:	0800ee5f 	.word	0x0800ee5f
 800edc0:	0800ee5f 	.word	0x0800ee5f
 800edc4:	0800ee5f 	.word	0x0800ee5f
 800edc8:	0800ee5f 	.word	0x0800ee5f
 800edcc:	0800ee5f 	.word	0x0800ee5f
 800edd0:	0800ee5f 	.word	0x0800ee5f
 800edd4:	0800ee5f 	.word	0x0800ee5f
 800edd8:	0800ee5f 	.word	0x0800ee5f
 800eddc:	0800ee5f 	.word	0x0800ee5f
 800ede0:	0800ee5f 	.word	0x0800ee5f
 800ede4:	0800ee5f 	.word	0x0800ee5f
 800ede8:	0800ee5f 	.word	0x0800ee5f
 800edec:	0800ee5f 	.word	0x0800ee5f
 800edf0:	0800ee5f 	.word	0x0800ee5f
 800edf4:	0800ee5f 	.word	0x0800ee5f
 800edf8:	0800ee51 	.word	0x0800ee51
 800edfc:	2b40      	cmp	r3, #64	@ 0x40
 800edfe:	d02a      	beq.n	800ee56 <UART_SetConfig+0x8aa>
 800ee00:	e02d      	b.n	800ee5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee02:	f7fb ff37 	bl	800ac74 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ee08:	e02f      	b.n	800ee6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fb ff46 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee18:	e027      	b.n	800ee6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee1a:	f107 0318 	add.w	r3, r7, #24
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fc f892 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee28:	e01f      	b.n	800ee6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee2a:	4b21      	ldr	r3, [pc, #132]	@ (800eeb0 <UART_SetConfig+0x904>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f003 0320 	and.w	r3, r3, #32
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d009      	beq.n	800ee4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee36:	4b1e      	ldr	r3, [pc, #120]	@ (800eeb0 <UART_SetConfig+0x904>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	08db      	lsrs	r3, r3, #3
 800ee3c:	f003 0303 	and.w	r3, r3, #3
 800ee40:	4a1d      	ldr	r2, [pc, #116]	@ (800eeb8 <UART_SetConfig+0x90c>)
 800ee42:	fa22 f303 	lsr.w	r3, r2, r3
 800ee46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee48:	e00f      	b.n	800ee6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ee4a:	4b1b      	ldr	r3, [pc, #108]	@ (800eeb8 <UART_SetConfig+0x90c>)
 800ee4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee4e:	e00c      	b.n	800ee6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee50:	4b1a      	ldr	r3, [pc, #104]	@ (800eebc <UART_SetConfig+0x910>)
 800ee52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee54:	e009      	b.n	800ee6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee5c:	e005      	b.n	800ee6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f000 81ee 	beq.w	800f24e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee76:	4a12      	ldr	r2, [pc, #72]	@ (800eec0 <UART_SetConfig+0x914>)
 800ee78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee80:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee84:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	005b      	lsls	r3, r3, #1
 800ee8e:	4413      	add	r3, r2
 800ee90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d305      	bcc.n	800eea2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d910      	bls.n	800eec4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eea8:	e1d1      	b.n	800f24e <UART_SetConfig+0xca2>
 800eeaa:	bf00      	nop
 800eeac:	40011c00 	.word	0x40011c00
 800eeb0:	58024400 	.word	0x58024400
 800eeb4:	58000c00 	.word	0x58000c00
 800eeb8:	03d09000 	.word	0x03d09000
 800eebc:	003d0900 	.word	0x003d0900
 800eec0:	08011508 	.word	0x08011508
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eec6:	2200      	movs	r2, #0
 800eec8:	60bb      	str	r3, [r7, #8]
 800eeca:	60fa      	str	r2, [r7, #12]
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed0:	4ac0      	ldr	r2, [pc, #768]	@ (800f1d4 <UART_SetConfig+0xc28>)
 800eed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	2200      	movs	r2, #0
 800eeda:	603b      	str	r3, [r7, #0]
 800eedc:	607a      	str	r2, [r7, #4]
 800eede:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eee6:	f7f1 fa6b 	bl	80003c0 <__aeabi_uldivmod>
 800eeea:	4602      	mov	r2, r0
 800eeec:	460b      	mov	r3, r1
 800eeee:	4610      	mov	r0, r2
 800eef0:	4619      	mov	r1, r3
 800eef2:	f04f 0200 	mov.w	r2, #0
 800eef6:	f04f 0300 	mov.w	r3, #0
 800eefa:	020b      	lsls	r3, r1, #8
 800eefc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef00:	0202      	lsls	r2, r0, #8
 800ef02:	6979      	ldr	r1, [r7, #20]
 800ef04:	6849      	ldr	r1, [r1, #4]
 800ef06:	0849      	lsrs	r1, r1, #1
 800ef08:	2000      	movs	r0, #0
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	eb12 0804 	adds.w	r8, r2, r4
 800ef12:	eb43 0905 	adc.w	r9, r3, r5
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	469a      	mov	sl, r3
 800ef1e:	4693      	mov	fp, r2
 800ef20:	4652      	mov	r2, sl
 800ef22:	465b      	mov	r3, fp
 800ef24:	4640      	mov	r0, r8
 800ef26:	4649      	mov	r1, r9
 800ef28:	f7f1 fa4a 	bl	80003c0 <__aeabi_uldivmod>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4613      	mov	r3, r2
 800ef32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ef34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef3a:	d308      	bcc.n	800ef4e <UART_SetConfig+0x9a2>
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ef42:	d204      	bcs.n	800ef4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef4a:	60da      	str	r2, [r3, #12]
 800ef4c:	e17f      	b.n	800f24e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ef54:	e17b      	b.n	800f24e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	69db      	ldr	r3, [r3, #28]
 800ef5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef5e:	f040 80bd 	bne.w	800f0dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ef62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ef66:	2b20      	cmp	r3, #32
 800ef68:	dc48      	bgt.n	800effc <UART_SetConfig+0xa50>
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	db7b      	blt.n	800f066 <UART_SetConfig+0xaba>
 800ef6e:	2b20      	cmp	r3, #32
 800ef70:	d879      	bhi.n	800f066 <UART_SetConfig+0xaba>
 800ef72:	a201      	add	r2, pc, #4	@ (adr r2, 800ef78 <UART_SetConfig+0x9cc>)
 800ef74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef78:	0800f003 	.word	0x0800f003
 800ef7c:	0800f00b 	.word	0x0800f00b
 800ef80:	0800f067 	.word	0x0800f067
 800ef84:	0800f067 	.word	0x0800f067
 800ef88:	0800f013 	.word	0x0800f013
 800ef8c:	0800f067 	.word	0x0800f067
 800ef90:	0800f067 	.word	0x0800f067
 800ef94:	0800f067 	.word	0x0800f067
 800ef98:	0800f023 	.word	0x0800f023
 800ef9c:	0800f067 	.word	0x0800f067
 800efa0:	0800f067 	.word	0x0800f067
 800efa4:	0800f067 	.word	0x0800f067
 800efa8:	0800f067 	.word	0x0800f067
 800efac:	0800f067 	.word	0x0800f067
 800efb0:	0800f067 	.word	0x0800f067
 800efb4:	0800f067 	.word	0x0800f067
 800efb8:	0800f033 	.word	0x0800f033
 800efbc:	0800f067 	.word	0x0800f067
 800efc0:	0800f067 	.word	0x0800f067
 800efc4:	0800f067 	.word	0x0800f067
 800efc8:	0800f067 	.word	0x0800f067
 800efcc:	0800f067 	.word	0x0800f067
 800efd0:	0800f067 	.word	0x0800f067
 800efd4:	0800f067 	.word	0x0800f067
 800efd8:	0800f067 	.word	0x0800f067
 800efdc:	0800f067 	.word	0x0800f067
 800efe0:	0800f067 	.word	0x0800f067
 800efe4:	0800f067 	.word	0x0800f067
 800efe8:	0800f067 	.word	0x0800f067
 800efec:	0800f067 	.word	0x0800f067
 800eff0:	0800f067 	.word	0x0800f067
 800eff4:	0800f067 	.word	0x0800f067
 800eff8:	0800f059 	.word	0x0800f059
 800effc:	2b40      	cmp	r3, #64	@ 0x40
 800effe:	d02e      	beq.n	800f05e <UART_SetConfig+0xab2>
 800f000:	e031      	b.n	800f066 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f002:	f7f9 ff99 	bl	8008f38 <HAL_RCC_GetPCLK1Freq>
 800f006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f008:	e033      	b.n	800f072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f00a:	f7f9 ffab 	bl	8008f64 <HAL_RCC_GetPCLK2Freq>
 800f00e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f010:	e02f      	b.n	800f072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f016:	4618      	mov	r0, r3
 800f018:	f7fb fe42 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f020:	e027      	b.n	800f072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f022:	f107 0318 	add.w	r3, r7, #24
 800f026:	4618      	mov	r0, r3
 800f028:	f7fb ff8e 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f030:	e01f      	b.n	800f072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f032:	4b69      	ldr	r3, [pc, #420]	@ (800f1d8 <UART_SetConfig+0xc2c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f003 0320 	and.w	r3, r3, #32
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d009      	beq.n	800f052 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f03e:	4b66      	ldr	r3, [pc, #408]	@ (800f1d8 <UART_SetConfig+0xc2c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	08db      	lsrs	r3, r3, #3
 800f044:	f003 0303 	and.w	r3, r3, #3
 800f048:	4a64      	ldr	r2, [pc, #400]	@ (800f1dc <UART_SetConfig+0xc30>)
 800f04a:	fa22 f303 	lsr.w	r3, r2, r3
 800f04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f050:	e00f      	b.n	800f072 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f052:	4b62      	ldr	r3, [pc, #392]	@ (800f1dc <UART_SetConfig+0xc30>)
 800f054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f056:	e00c      	b.n	800f072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f058:	4b61      	ldr	r3, [pc, #388]	@ (800f1e0 <UART_SetConfig+0xc34>)
 800f05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f05c:	e009      	b.n	800f072 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f064:	e005      	b.n	800f072 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f066:	2300      	movs	r3, #0
 800f068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 80ea 	beq.w	800f24e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f07e:	4a55      	ldr	r2, [pc, #340]	@ (800f1d4 <UART_SetConfig+0xc28>)
 800f080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f084:	461a      	mov	r2, r3
 800f086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f088:	fbb3 f3f2 	udiv	r3, r3, r2
 800f08c:	005a      	lsls	r2, r3, #1
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	085b      	lsrs	r3, r3, #1
 800f094:	441a      	add	r2, r3
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f09e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a2:	2b0f      	cmp	r3, #15
 800f0a4:	d916      	bls.n	800f0d4 <UART_SetConfig+0xb28>
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ac:	d212      	bcs.n	800f0d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	f023 030f 	bic.w	r3, r3, #15
 800f0b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ba:	085b      	lsrs	r3, r3, #1
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	f003 0307 	and.w	r3, r3, #7
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f0d0:	60da      	str	r2, [r3, #12]
 800f0d2:	e0bc      	b.n	800f24e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f0da:	e0b8      	b.n	800f24e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f0dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f0e0:	2b20      	cmp	r3, #32
 800f0e2:	dc4b      	bgt.n	800f17c <UART_SetConfig+0xbd0>
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f2c0 8087 	blt.w	800f1f8 <UART_SetConfig+0xc4c>
 800f0ea:	2b20      	cmp	r3, #32
 800f0ec:	f200 8084 	bhi.w	800f1f8 <UART_SetConfig+0xc4c>
 800f0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800f0f8 <UART_SetConfig+0xb4c>)
 800f0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f6:	bf00      	nop
 800f0f8:	0800f183 	.word	0x0800f183
 800f0fc:	0800f18b 	.word	0x0800f18b
 800f100:	0800f1f9 	.word	0x0800f1f9
 800f104:	0800f1f9 	.word	0x0800f1f9
 800f108:	0800f193 	.word	0x0800f193
 800f10c:	0800f1f9 	.word	0x0800f1f9
 800f110:	0800f1f9 	.word	0x0800f1f9
 800f114:	0800f1f9 	.word	0x0800f1f9
 800f118:	0800f1a3 	.word	0x0800f1a3
 800f11c:	0800f1f9 	.word	0x0800f1f9
 800f120:	0800f1f9 	.word	0x0800f1f9
 800f124:	0800f1f9 	.word	0x0800f1f9
 800f128:	0800f1f9 	.word	0x0800f1f9
 800f12c:	0800f1f9 	.word	0x0800f1f9
 800f130:	0800f1f9 	.word	0x0800f1f9
 800f134:	0800f1f9 	.word	0x0800f1f9
 800f138:	0800f1b3 	.word	0x0800f1b3
 800f13c:	0800f1f9 	.word	0x0800f1f9
 800f140:	0800f1f9 	.word	0x0800f1f9
 800f144:	0800f1f9 	.word	0x0800f1f9
 800f148:	0800f1f9 	.word	0x0800f1f9
 800f14c:	0800f1f9 	.word	0x0800f1f9
 800f150:	0800f1f9 	.word	0x0800f1f9
 800f154:	0800f1f9 	.word	0x0800f1f9
 800f158:	0800f1f9 	.word	0x0800f1f9
 800f15c:	0800f1f9 	.word	0x0800f1f9
 800f160:	0800f1f9 	.word	0x0800f1f9
 800f164:	0800f1f9 	.word	0x0800f1f9
 800f168:	0800f1f9 	.word	0x0800f1f9
 800f16c:	0800f1f9 	.word	0x0800f1f9
 800f170:	0800f1f9 	.word	0x0800f1f9
 800f174:	0800f1f9 	.word	0x0800f1f9
 800f178:	0800f1eb 	.word	0x0800f1eb
 800f17c:	2b40      	cmp	r3, #64	@ 0x40
 800f17e:	d037      	beq.n	800f1f0 <UART_SetConfig+0xc44>
 800f180:	e03a      	b.n	800f1f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f182:	f7f9 fed9 	bl	8008f38 <HAL_RCC_GetPCLK1Freq>
 800f186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f188:	e03c      	b.n	800f204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f18a:	f7f9 feeb 	bl	8008f64 <HAL_RCC_GetPCLK2Freq>
 800f18e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f190:	e038      	b.n	800f204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f196:	4618      	mov	r0, r3
 800f198:	f7fb fd82 	bl	800aca0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1a0:	e030      	b.n	800f204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1a2:	f107 0318 	add.w	r3, r7, #24
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fb fece 	bl	800af48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1b0:	e028      	b.n	800f204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1b2:	4b09      	ldr	r3, [pc, #36]	@ (800f1d8 <UART_SetConfig+0xc2c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f003 0320 	and.w	r3, r3, #32
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d012      	beq.n	800f1e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1be:	4b06      	ldr	r3, [pc, #24]	@ (800f1d8 <UART_SetConfig+0xc2c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	08db      	lsrs	r3, r3, #3
 800f1c4:	f003 0303 	and.w	r3, r3, #3
 800f1c8:	4a04      	ldr	r2, [pc, #16]	@ (800f1dc <UART_SetConfig+0xc30>)
 800f1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1d0:	e018      	b.n	800f204 <UART_SetConfig+0xc58>
 800f1d2:	bf00      	nop
 800f1d4:	08011508 	.word	0x08011508
 800f1d8:	58024400 	.word	0x58024400
 800f1dc:	03d09000 	.word	0x03d09000
 800f1e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f1e4:	4b24      	ldr	r3, [pc, #144]	@ (800f278 <UART_SetConfig+0xccc>)
 800f1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1e8:	e00c      	b.n	800f204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1ea:	4b24      	ldr	r3, [pc, #144]	@ (800f27c <UART_SetConfig+0xcd0>)
 800f1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1ee:	e009      	b.n	800f204 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1f6:	e005      	b.n	800f204 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f202:	bf00      	nop
    }

    if (pclk != 0U)
 800f204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f206:	2b00      	cmp	r3, #0
 800f208:	d021      	beq.n	800f24e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f20e:	4a1c      	ldr	r2, [pc, #112]	@ (800f280 <UART_SetConfig+0xcd4>)
 800f210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f214:	461a      	mov	r2, r3
 800f216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f218:	fbb3 f2f2 	udiv	r2, r3, r2
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	085b      	lsrs	r3, r3, #1
 800f222:	441a      	add	r2, r3
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	fbb2 f3f3 	udiv	r3, r2, r3
 800f22c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f230:	2b0f      	cmp	r3, #15
 800f232:	d909      	bls.n	800f248 <UART_SetConfig+0xc9c>
 800f234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f23a:	d205      	bcs.n	800f248 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23e:	b29a      	uxth	r2, r3
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	60da      	str	r2, [r3, #12]
 800f246:	e002      	b.n	800f24e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f248:	2301      	movs	r3, #1
 800f24a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	2201      	movs	r2, #1
 800f252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	2201      	movs	r2, #1
 800f25a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	2200      	movs	r2, #0
 800f262:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	2200      	movs	r2, #0
 800f268:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f26a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3748      	adds	r7, #72	@ 0x48
 800f272:	46bd      	mov	sp, r7
 800f274:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f278:	03d09000 	.word	0x03d09000
 800f27c:	003d0900 	.word	0x003d0900
 800f280:	08011508 	.word	0x08011508

0800f284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f290:	f003 0308 	and.w	r3, r3, #8
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00a      	beq.n	800f2ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	430a      	orrs	r2, r1
 800f2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2b2:	f003 0301 	and.w	r3, r3, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00a      	beq.n	800f2d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2d4:	f003 0302 	and.w	r3, r3, #2
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d00a      	beq.n	800f2f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	430a      	orrs	r2, r1
 800f2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2f6:	f003 0304 	and.w	r3, r3, #4
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00a      	beq.n	800f314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	430a      	orrs	r2, r1
 800f312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f318:	f003 0310 	and.w	r3, r3, #16
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00a      	beq.n	800f336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	430a      	orrs	r2, r1
 800f334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f33a:	f003 0320 	and.w	r3, r3, #32
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00a      	beq.n	800f358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	430a      	orrs	r2, r1
 800f356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01a      	beq.n	800f39a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f37e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f382:	d10a      	bne.n	800f39a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	430a      	orrs	r2, r1
 800f398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f39e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00a      	beq.n	800f3bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	605a      	str	r2, [r3, #4]
  }
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b098      	sub	sp, #96	@ 0x60
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3d8:	f7f3 f8c4 	bl	8002564 <HAL_GetTick>
 800f3dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f003 0308 	and.w	r3, r3, #8
 800f3e8:	2b08      	cmp	r3, #8
 800f3ea:	d12f      	bne.n	800f44c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f88e 	bl	800f51c <UART_WaitOnFlagUntilTimeout>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d022      	beq.n	800f44c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f40e:	e853 3f00 	ldrex	r3, [r3]
 800f412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f41a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	461a      	mov	r2, r3
 800f422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f424:	647b      	str	r3, [r7, #68]	@ 0x44
 800f426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f42a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f42c:	e841 2300 	strex	r3, r2, [r1]
 800f430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d1e6      	bne.n	800f406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2220      	movs	r2, #32
 800f43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f448:	2303      	movs	r3, #3
 800f44a:	e063      	b.n	800f514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f003 0304 	and.w	r3, r3, #4
 800f456:	2b04      	cmp	r3, #4
 800f458:	d149      	bne.n	800f4ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f45a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f462:	2200      	movs	r2, #0
 800f464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f857 	bl	800f51c <UART_WaitOnFlagUntilTimeout>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d03c      	beq.n	800f4ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f47c:	e853 3f00 	ldrex	r3, [r3]
 800f480:	623b      	str	r3, [r7, #32]
   return(result);
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	461a      	mov	r2, r3
 800f490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f492:	633b      	str	r3, [r7, #48]	@ 0x30
 800f494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f49a:	e841 2300 	strex	r3, r2, [r1]
 800f49e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1e6      	bne.n	800f474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	e853 3f00 	ldrex	r3, [r3]
 800f4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f023 0301 	bic.w	r3, r3, #1
 800f4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	3308      	adds	r3, #8
 800f4c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f4c6:	61fa      	str	r2, [r7, #28]
 800f4c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ca:	69b9      	ldr	r1, [r7, #24]
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	e841 2300 	strex	r3, r2, [r1]
 800f4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1e5      	bne.n	800f4a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2220      	movs	r2, #32
 800f4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e012      	b.n	800f514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2220      	movs	r2, #32
 800f4f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2220      	movs	r2, #32
 800f4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	3758      	adds	r7, #88	@ 0x58
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	603b      	str	r3, [r7, #0]
 800f528:	4613      	mov	r3, r2
 800f52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f52c:	e04f      	b.n	800f5ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f534:	d04b      	beq.n	800f5ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f536:	f7f3 f815 	bl	8002564 <HAL_GetTick>
 800f53a:	4602      	mov	r2, r0
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	69ba      	ldr	r2, [r7, #24]
 800f542:	429a      	cmp	r2, r3
 800f544:	d302      	bcc.n	800f54c <UART_WaitOnFlagUntilTimeout+0x30>
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d101      	bne.n	800f550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f54c:	2303      	movs	r3, #3
 800f54e:	e04e      	b.n	800f5ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 0304 	and.w	r3, r3, #4
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d037      	beq.n	800f5ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b80      	cmp	r3, #128	@ 0x80
 800f562:	d034      	beq.n	800f5ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2b40      	cmp	r3, #64	@ 0x40
 800f568:	d031      	beq.n	800f5ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	f003 0308 	and.w	r3, r3, #8
 800f574:	2b08      	cmp	r3, #8
 800f576:	d110      	bne.n	800f59a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2208      	movs	r2, #8
 800f57e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 f839 	bl	800f5f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2208      	movs	r2, #8
 800f58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f596:	2301      	movs	r3, #1
 800f598:	e029      	b.n	800f5ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	69db      	ldr	r3, [r3, #28]
 800f5a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f5a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5a8:	d111      	bne.n	800f5ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f5b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	f000 f81f 	bl	800f5f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2220      	movs	r2, #32
 800f5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	e00f      	b.n	800f5ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	69da      	ldr	r2, [r3, #28]
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	4013      	ands	r3, r2
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	bf0c      	ite	eq
 800f5de:	2301      	moveq	r3, #1
 800f5e0:	2300      	movne	r3, #0
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d0a0      	beq.n	800f52e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b095      	sub	sp, #84	@ 0x54
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f608:	e853 3f00 	ldrex	r3, [r3]
 800f60c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	461a      	mov	r2, r3
 800f61c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f61e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f620:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f626:	e841 2300 	strex	r3, r2, [r1]
 800f62a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d1e6      	bne.n	800f600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	3308      	adds	r3, #8
 800f638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f63a:	6a3b      	ldr	r3, [r7, #32]
 800f63c:	e853 3f00 	ldrex	r3, [r3]
 800f640:	61fb      	str	r3, [r7, #28]
   return(result);
 800f642:	69fa      	ldr	r2, [r7, #28]
 800f644:	4b1e      	ldr	r3, [pc, #120]	@ (800f6c0 <UART_EndRxTransfer+0xc8>)
 800f646:	4013      	ands	r3, r2
 800f648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3308      	adds	r3, #8
 800f650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f65a:	e841 2300 	strex	r3, r2, [r1]
 800f65e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1e5      	bne.n	800f632 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d118      	bne.n	800f6a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	e853 3f00 	ldrex	r3, [r3]
 800f67a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	f023 0310 	bic.w	r3, r3, #16
 800f682:	647b      	str	r3, [r7, #68]	@ 0x44
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	461a      	mov	r2, r3
 800f68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f68c:	61bb      	str	r3, [r7, #24]
 800f68e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f690:	6979      	ldr	r1, [r7, #20]
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	e841 2300 	strex	r3, r2, [r1]
 800f698:	613b      	str	r3, [r7, #16]
   return(result);
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1e6      	bne.n	800f66e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2220      	movs	r2, #32
 800f6a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f6b4:	bf00      	nop
 800f6b6:	3754      	adds	r7, #84	@ 0x54
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr
 800f6c0:	effffffe 	.word	0xeffffffe

0800f6c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d101      	bne.n	800f6da <HAL_UARTEx_DisableFifoMode+0x16>
 800f6d6:	2302      	movs	r3, #2
 800f6d8:	e027      	b.n	800f72a <HAL_UARTEx_DisableFifoMode+0x66>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2201      	movs	r2, #1
 800f6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2224      	movs	r2, #36	@ 0x24
 800f6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f022 0201 	bic.w	r2, r2, #1
 800f700:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2220      	movs	r2, #32
 800f71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3714      	adds	r7, #20
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr

0800f736 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b084      	sub	sp, #16
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
 800f73e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f746:	2b01      	cmp	r3, #1
 800f748:	d101      	bne.n	800f74e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f74a:	2302      	movs	r3, #2
 800f74c:	e02d      	b.n	800f7aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2201      	movs	r2, #1
 800f752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2224      	movs	r2, #36	@ 0x24
 800f75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f022 0201 	bic.w	r2, r2, #1
 800f774:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 f850 	bl	800f830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2220      	movs	r2, #32
 800f79c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d101      	bne.n	800f7ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	e02d      	b.n	800f826 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2224      	movs	r2, #36	@ 0x24
 800f7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f022 0201 	bic.w	r2, r2, #1
 800f7f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	689b      	ldr	r3, [r3, #8]
 800f7f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	683a      	ldr	r2, [r7, #0]
 800f802:	430a      	orrs	r2, r1
 800f804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 f812 	bl	800f830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2220      	movs	r2, #32
 800f818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d108      	bne.n	800f852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f850:	e031      	b.n	800f8b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f852:	2310      	movs	r3, #16
 800f854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f856:	2310      	movs	r3, #16
 800f858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	0e5b      	lsrs	r3, r3, #25
 800f862:	b2db      	uxtb	r3, r3
 800f864:	f003 0307 	and.w	r3, r3, #7
 800f868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	0f5b      	lsrs	r3, r3, #29
 800f872:	b2db      	uxtb	r3, r3
 800f874:	f003 0307 	and.w	r3, r3, #7
 800f878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f87a:	7bbb      	ldrb	r3, [r7, #14]
 800f87c:	7b3a      	ldrb	r2, [r7, #12]
 800f87e:	4911      	ldr	r1, [pc, #68]	@ (800f8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800f880:	5c8a      	ldrb	r2, [r1, r2]
 800f882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f886:	7b3a      	ldrb	r2, [r7, #12]
 800f888:	490f      	ldr	r1, [pc, #60]	@ (800f8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800f88a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f88c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f898:	7bfb      	ldrb	r3, [r7, #15]
 800f89a:	7b7a      	ldrb	r2, [r7, #13]
 800f89c:	4909      	ldr	r1, [pc, #36]	@ (800f8c4 <UARTEx_SetNbDataToProcess+0x94>)
 800f89e:	5c8a      	ldrb	r2, [r1, r2]
 800f8a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8a4:	7b7a      	ldrb	r2, [r7, #13]
 800f8a6:	4908      	ldr	r1, [pc, #32]	@ (800f8c8 <UARTEx_SetNbDataToProcess+0x98>)
 800f8a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f8b6:	bf00      	nop
 800f8b8:	3714      	adds	r7, #20
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	08011520 	.word	0x08011520
 800f8c8:	08011528 	.word	0x08011528

0800f8cc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f8cc:	b084      	sub	sp, #16
 800f8ce:	b480      	push	{r7}
 800f8d0:	b085      	sub	sp, #20
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	f107 001c 	add.w	r0, r7, #28
 800f8da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f8e2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800f8e6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800f8ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800f8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800f8ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800f8f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	4b07      	ldr	r3, [pc, #28]	@ (800f91c <SDMMC_Init+0x50>)
 800f900:	4013      	ands	r3, r2
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	431a      	orrs	r2, r3
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3714      	adds	r7, #20
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	b004      	add	sp, #16
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	ffc02c00 	.word	0xffc02c00

0800f920 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f920:	b480      	push	{r7}
 800f922:	b083      	sub	sp, #12
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f92e:	4618      	mov	r0, r3
 800f930:	370c      	adds	r7, #12
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f93a:	b480      	push	{r7}
 800f93c:	b083      	sub	sp, #12
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f043 0203 	orr.w	r2, r3, #3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f970:	2300      	movs	r3, #0
}
 800f972:	4618      	mov	r0, r3
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f97e:	b480      	push	{r7}
 800f980:	b083      	sub	sp, #12
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f003 0303 	and.w	r3, r3, #3
}
 800f98e:	4618      	mov	r0, r3
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
	...

0800f99c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f9ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f9c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f9c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f9c8:	68fa      	ldr	r2, [r7, #12]
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	68da      	ldr	r2, [r3, #12]
 800f9d2:	4b06      	ldr	r3, [pc, #24]	@ (800f9ec <SDMMC_SendCommand+0x50>)
 800f9d4:	4013      	ands	r3, r2
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	431a      	orrs	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3714      	adds	r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	fffee0c0 	.word	0xfffee0c0

0800f9f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	691b      	ldr	r3, [r3, #16]
 800f9fc:	b2db      	uxtb	r3, r3
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	370c      	adds	r7, #12
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b085      	sub	sp, #20
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
 800fa12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	3314      	adds	r3, #20
 800fa18:	461a      	mov	r2, r3
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3714      	adds	r7, #20
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	685a      	ldr	r2, [r3, #4]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fa56:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fa5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fa62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	431a      	orrs	r2, r3
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fa7a:	2300      	movs	r3, #0

}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3714      	adds	r7, #20
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b088      	sub	sp, #32
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fa96:	2310      	movs	r3, #16
 800fa98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800faa0:	2300      	movs	r3, #0
 800faa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800faa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800faa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800faaa:	f107 0308 	add.w	r3, r7, #8
 800faae:	4619      	mov	r1, r3
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f7ff ff73 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800faba:	2110      	movs	r1, #16
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 fa5f 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fac4:	69fb      	ldr	r3, [r7, #28]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3720      	adds	r7, #32
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b088      	sub	sp, #32
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fadc:	2311      	movs	r3, #17
 800fade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800faea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800faee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800faf0:	f107 0308 	add.w	r3, r7, #8
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7ff ff50 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fafc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb00:	2111      	movs	r1, #17
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 fa3c 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fb08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb0a:	69fb      	ldr	r3, [r7, #28]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3720      	adds	r7, #32
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b088      	sub	sp, #32
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fb22:	2312      	movs	r3, #18
 800fb24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb36:	f107 0308 	add.w	r3, r7, #8
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7ff ff2d 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fb42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb46:	2112      	movs	r1, #18
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fa19 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fb4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb50:	69fb      	ldr	r3, [r7, #28]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3720      	adds	r7, #32
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b088      	sub	sp, #32
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
 800fb62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fb68:	2318      	movs	r3, #24
 800fb6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb72:	2300      	movs	r3, #0
 800fb74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb7c:	f107 0308 	add.w	r3, r7, #8
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7ff ff0a 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fb88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb8c:	2118      	movs	r1, #24
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 f9f6 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fb94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb96:	69fb      	ldr	r3, [r7, #28]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3720      	adds	r7, #32
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fbae:	2319      	movs	r3, #25
 800fbb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fbb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fbc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbc2:	f107 0308 	add.w	r3, r7, #8
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f7ff fee7 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fbce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbd2:	2119      	movs	r1, #25
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f9d3 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fbda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbdc:	69fb      	ldr	r3, [r7, #28]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3720      	adds	r7, #32
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
	...

0800fbe8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b088      	sub	sp, #32
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fbf4:	230c      	movs	r3, #12
 800fbf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fbfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc06:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc20:	f107 0308 	add.w	r3, r7, #8
 800fc24:	4619      	mov	r1, r3
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7ff feb8 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fc2c:	4a0b      	ldr	r2, [pc, #44]	@ (800fc5c <SDMMC_CmdStopTransfer+0x74>)
 800fc2e:	210c      	movs	r1, #12
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f9a5 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fc36:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc4a:	d101      	bne.n	800fc50 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fc50:	69fb      	ldr	r3, [r7, #28]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3720      	adds	r7, #32
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	05f5e100 	.word	0x05f5e100

0800fc60 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fc6e:	2307      	movs	r3, #7
 800fc70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc82:	f107 0308 	add.w	r3, r7, #8
 800fc86:	4619      	mov	r1, r3
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff fe87 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fc8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc92:	2107      	movs	r1, #7
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 f973 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fc9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc9c:	69fb      	ldr	r3, [r7, #28]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3720      	adds	r7, #32
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b088      	sub	sp, #32
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcc4:	f107 0308 	add.w	r3, r7, #8
 800fcc8:	4619      	mov	r1, r3
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7ff fe66 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 fb97 	bl	8010404 <SDMMC_GetCmdError>
 800fcd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcd8:	69fb      	ldr	r3, [r7, #28]
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3720      	adds	r7, #32
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b088      	sub	sp, #32
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fcea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fcee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fcf0:	2308      	movs	r3, #8
 800fcf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd04:	f107 0308 	add.w	r3, r7, #8
 800fd08:	4619      	mov	r1, r3
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f7ff fe46 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fb29 	bl	8010368 <SDMMC_GetCmdResp7>
 800fd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd18:	69fb      	ldr	r3, [r7, #28]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3720      	adds	r7, #32
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b088      	sub	sp, #32
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fd30:	2337      	movs	r3, #55	@ 0x37
 800fd32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd44:	f107 0308 	add.w	r3, r7, #8
 800fd48:	4619      	mov	r1, r3
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7ff fe26 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fd50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd54:	2137      	movs	r1, #55	@ 0x37
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f912 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fd5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd5e:	69fb      	ldr	r3, [r7, #28]
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3720      	adds	r7, #32
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b088      	sub	sp, #32
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fd76:	2329      	movs	r3, #41	@ 0x29
 800fd78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd80:	2300      	movs	r3, #0
 800fd82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd8a:	f107 0308 	add.w	r3, r7, #8
 800fd8e:	4619      	mov	r1, r3
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f7ff fe03 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fa2e 	bl	80101f8 <SDMMC_GetCmdResp3>
 800fd9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd9e:	69fb      	ldr	r3, [r7, #28]
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3720      	adds	r7, #32
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b088      	sub	sp, #32
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fdb6:	2306      	movs	r3, #6
 800fdb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdca:	f107 0308 	add.w	r3, r7, #8
 800fdce:	4619      	mov	r1, r3
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7ff fde3 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800fdd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdda:	2106      	movs	r1, #6
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 f8cf 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fde2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fde4:	69fb      	ldr	r3, [r7, #28]
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3720      	adds	r7, #32
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b088      	sub	sp, #32
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fdfa:	2333      	movs	r3, #51	@ 0x33
 800fdfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe04:	2300      	movs	r3, #0
 800fe06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe0e:	f107 0308 	add.w	r3, r7, #8
 800fe12:	4619      	mov	r1, r3
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7ff fdc1 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fe1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe1e:	2133      	movs	r1, #51	@ 0x33
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 f8ad 	bl	800ff80 <SDMMC_GetCmdResp1>
 800fe26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe28:	69fb      	ldr	r3, [r7, #28]
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3720      	adds	r7, #32
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b088      	sub	sp, #32
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fe3e:	2302      	movs	r3, #2
 800fe40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fe46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe52:	f107 0308 	add.w	r3, r7, #8
 800fe56:	4619      	mov	r1, r3
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff fd9f 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 f980 	bl	8010164 <SDMMC_GetCmdResp2>
 800fe64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe66:	69fb      	ldr	r3, [r7, #28]
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3720      	adds	r7, #32
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b088      	sub	sp, #32
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fe7e:	2309      	movs	r3, #9
 800fe80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fe86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe92:	f107 0308 	add.w	r3, r7, #8
 800fe96:	4619      	mov	r1, r3
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7ff fd7f 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 f960 	bl	8010164 <SDMMC_GetCmdResp2>
 800fea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fea6:	69fb      	ldr	r3, [r7, #28]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3720      	adds	r7, #32
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800feba:	2300      	movs	r3, #0
 800febc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800febe:	2303      	movs	r3, #3
 800fec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fec8:	2300      	movs	r3, #0
 800feca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fed2:	f107 0308 	add.w	r3, r7, #8
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f7ff fd5f 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fede:	683a      	ldr	r2, [r7, #0]
 800fee0:	2103      	movs	r1, #3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f9c8 	bl	8010278 <SDMMC_GetCmdResp6>
 800fee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feea:	69fb      	ldr	r3, [r7, #28]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3720      	adds	r7, #32
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b088      	sub	sp, #32
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ff02:	230d      	movs	r3, #13
 800ff04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff16:	f107 0308 	add.w	r3, r7, #8
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f7ff fd3d 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ff22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff26:	210d      	movs	r1, #13
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 f829 	bl	800ff80 <SDMMC_GetCmdResp1>
 800ff2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff30:	69fb      	ldr	r3, [r7, #28]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3720      	adds	r7, #32
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b088      	sub	sp, #32
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ff42:	2300      	movs	r3, #0
 800ff44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ff46:	230d      	movs	r3, #13
 800ff48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff50:	2300      	movs	r3, #0
 800ff52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff5a:	f107 0308 	add.w	r3, r7, #8
 800ff5e:	4619      	mov	r1, r3
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f7ff fd1b 	bl	800f99c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ff66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff6a:	210d      	movs	r1, #13
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 f807 	bl	800ff80 <SDMMC_GetCmdResp1>
 800ff72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff74:	69fb      	ldr	r3, [r7, #28]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3720      	adds	r7, #32
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
	...

0800ff80 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b088      	sub	sp, #32
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	460b      	mov	r3, r1
 800ff8a:	607a      	str	r2, [r7, #4]
 800ff8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ff8e:	4b70      	ldr	r3, [pc, #448]	@ (8010150 <SDMMC_GetCmdResp1+0x1d0>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a70      	ldr	r2, [pc, #448]	@ (8010154 <SDMMC_GetCmdResp1+0x1d4>)
 800ff94:	fba2 2303 	umull	r2, r3, r2, r3
 800ff98:	0a5a      	lsrs	r2, r3, #9
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	fb02 f303 	mul.w	r3, r2, r3
 800ffa0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	1e5a      	subs	r2, r3, #1
 800ffa6:	61fa      	str	r2, [r7, #28]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d102      	bne.n	800ffb2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ffb0:	e0c9      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffb6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ffb8:	69ba      	ldr	r2, [r7, #24]
 800ffba:	4b67      	ldr	r3, [pc, #412]	@ (8010158 <SDMMC_GetCmdResp1+0x1d8>)
 800ffbc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d0ef      	beq.n	800ffa2 <SDMMC_GetCmdResp1+0x22>
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1ea      	bne.n	800ffa2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffd0:	f003 0304 	and.w	r3, r3, #4
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d004      	beq.n	800ffe2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2204      	movs	r2, #4
 800ffdc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ffde:	2304      	movs	r3, #4
 800ffe0:	e0b1      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffe6:	f003 0301 	and.w	r3, r3, #1
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d004      	beq.n	800fff8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2201      	movs	r2, #1
 800fff2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fff4:	2301      	movs	r3, #1
 800fff6:	e0a6      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	4a58      	ldr	r2, [pc, #352]	@ (801015c <SDMMC_GetCmdResp1+0x1dc>)
 800fffc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f7ff fcf6 	bl	800f9f0 <SDMMC_GetCommandResponse>
 8010004:	4603      	mov	r3, r0
 8010006:	461a      	mov	r2, r3
 8010008:	7afb      	ldrb	r3, [r7, #11]
 801000a:	4293      	cmp	r3, r2
 801000c:	d001      	beq.n	8010012 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801000e:	2301      	movs	r3, #1
 8010010:	e099      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010012:	2100      	movs	r1, #0
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f7ff fcf8 	bl	800fa0a <SDMMC_GetResponse>
 801001a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	4b50      	ldr	r3, [pc, #320]	@ (8010160 <SDMMC_GetCmdResp1+0x1e0>)
 8010020:	4013      	ands	r3, r2
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010026:	2300      	movs	r3, #0
 8010028:	e08d      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b00      	cmp	r3, #0
 801002e:	da02      	bge.n	8010036 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010030:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010034:	e087      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801003c:	2b00      	cmp	r3, #0
 801003e:	d001      	beq.n	8010044 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010040:	2340      	movs	r3, #64	@ 0x40
 8010042:	e080      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801004e:	2380      	movs	r3, #128	@ 0x80
 8010050:	e079      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801005c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010060:	e071      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801006c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010070:	e069      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801007c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010080:	e061      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801008c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010090:	e059      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801009c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100a0:	e051      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100b0:	e049      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80100bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80100c0:	e041      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d002      	beq.n	80100d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80100cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80100d0:	e039      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d002      	beq.n	80100e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80100dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80100e0:	e031      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d002      	beq.n	80100f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80100ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80100f0:	e029      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d002      	beq.n	8010102 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80100fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010100:	e021      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801010c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010110:	e019      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010118:	2b00      	cmp	r3, #0
 801011a:	d002      	beq.n	8010122 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801011c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010120:	e011      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010128:	2b00      	cmp	r3, #0
 801012a:	d002      	beq.n	8010132 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801012c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010130:	e009      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	f003 0308 	and.w	r3, r3, #8
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801013c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010140:	e001      	b.n	8010146 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010146:	4618      	mov	r0, r3
 8010148:	3720      	adds	r7, #32
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	24000004 	.word	0x24000004
 8010154:	10624dd3 	.word	0x10624dd3
 8010158:	00200045 	.word	0x00200045
 801015c:	002000c5 	.word	0x002000c5
 8010160:	fdffe008 	.word	0xfdffe008

08010164 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010164:	b480      	push	{r7}
 8010166:	b085      	sub	sp, #20
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801016c:	4b1f      	ldr	r3, [pc, #124]	@ (80101ec <SDMMC_GetCmdResp2+0x88>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a1f      	ldr	r2, [pc, #124]	@ (80101f0 <SDMMC_GetCmdResp2+0x8c>)
 8010172:	fba2 2303 	umull	r2, r3, r2, r3
 8010176:	0a5b      	lsrs	r3, r3, #9
 8010178:	f241 3288 	movw	r2, #5000	@ 0x1388
 801017c:	fb02 f303 	mul.w	r3, r2, r3
 8010180:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	1e5a      	subs	r2, r3, #1
 8010186:	60fa      	str	r2, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d102      	bne.n	8010192 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801018c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010190:	e026      	b.n	80101e0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010196:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d0ef      	beq.n	8010182 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1ea      	bne.n	8010182 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101b0:	f003 0304 	and.w	r3, r3, #4
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d004      	beq.n	80101c2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2204      	movs	r2, #4
 80101bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101be:	2304      	movs	r3, #4
 80101c0:	e00e      	b.n	80101e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101c6:	f003 0301 	and.w	r3, r3, #1
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d004      	beq.n	80101d8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2201      	movs	r2, #1
 80101d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101d4:	2301      	movs	r3, #1
 80101d6:	e003      	b.n	80101e0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4a06      	ldr	r2, [pc, #24]	@ (80101f4 <SDMMC_GetCmdResp2+0x90>)
 80101dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	24000004 	.word	0x24000004
 80101f0:	10624dd3 	.word	0x10624dd3
 80101f4:	002000c5 	.word	0x002000c5

080101f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010200:	4b1a      	ldr	r3, [pc, #104]	@ (801026c <SDMMC_GetCmdResp3+0x74>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a1a      	ldr	r2, [pc, #104]	@ (8010270 <SDMMC_GetCmdResp3+0x78>)
 8010206:	fba2 2303 	umull	r2, r3, r2, r3
 801020a:	0a5b      	lsrs	r3, r3, #9
 801020c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010210:	fb02 f303 	mul.w	r3, r2, r3
 8010214:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	1e5a      	subs	r2, r3, #1
 801021a:	60fa      	str	r2, [r7, #12]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d102      	bne.n	8010226 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010220:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010224:	e01b      	b.n	801025e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801022a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010232:	2b00      	cmp	r3, #0
 8010234:	d0ef      	beq.n	8010216 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801023c:	2b00      	cmp	r3, #0
 801023e:	d1ea      	bne.n	8010216 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010244:	f003 0304 	and.w	r3, r3, #4
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2204      	movs	r2, #4
 8010250:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010252:	2304      	movs	r3, #4
 8010254:	e003      	b.n	801025e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a06      	ldr	r2, [pc, #24]	@ (8010274 <SDMMC_GetCmdResp3+0x7c>)
 801025a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801025c:	2300      	movs	r3, #0
}
 801025e:	4618      	mov	r0, r3
 8010260:	3714      	adds	r7, #20
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	24000004 	.word	0x24000004
 8010270:	10624dd3 	.word	0x10624dd3
 8010274:	002000c5 	.word	0x002000c5

08010278 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b088      	sub	sp, #32
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	460b      	mov	r3, r1
 8010282:	607a      	str	r2, [r7, #4]
 8010284:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010286:	4b35      	ldr	r3, [pc, #212]	@ (801035c <SDMMC_GetCmdResp6+0xe4>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a35      	ldr	r2, [pc, #212]	@ (8010360 <SDMMC_GetCmdResp6+0xe8>)
 801028c:	fba2 2303 	umull	r2, r3, r2, r3
 8010290:	0a5b      	lsrs	r3, r3, #9
 8010292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010296:	fb02 f303 	mul.w	r3, r2, r3
 801029a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	1e5a      	subs	r2, r3, #1
 80102a0:	61fa      	str	r2, [r7, #28]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d102      	bne.n	80102ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80102aa:	e052      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102b0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d0ef      	beq.n	801029c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1ea      	bne.n	801029c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102ca:	f003 0304 	and.w	r3, r3, #4
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d004      	beq.n	80102dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2204      	movs	r2, #4
 80102d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80102d8:	2304      	movs	r3, #4
 80102da:	e03a      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d004      	beq.n	80102f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2201      	movs	r2, #1
 80102ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102ee:	2301      	movs	r3, #1
 80102f0:	e02f      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f7ff fb7c 	bl	800f9f0 <SDMMC_GetCommandResponse>
 80102f8:	4603      	mov	r3, r0
 80102fa:	461a      	mov	r2, r3
 80102fc:	7afb      	ldrb	r3, [r7, #11]
 80102fe:	4293      	cmp	r3, r2
 8010300:	d001      	beq.n	8010306 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010302:	2301      	movs	r3, #1
 8010304:	e025      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	4a16      	ldr	r2, [pc, #88]	@ (8010364 <SDMMC_GetCmdResp6+0xec>)
 801030a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801030c:	2100      	movs	r1, #0
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f7ff fb7b 	bl	800fa0a <SDMMC_GetResponse>
 8010314:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801031c:	2b00      	cmp	r3, #0
 801031e:	d106      	bne.n	801032e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	0c1b      	lsrs	r3, r3, #16
 8010324:	b29a      	uxth	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801032a:	2300      	movs	r3, #0
 801032c:	e011      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010338:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801033c:	e009      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801034c:	e001      	b.n	8010352 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801034e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010352:	4618      	mov	r0, r3
 8010354:	3720      	adds	r7, #32
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	24000004 	.word	0x24000004
 8010360:	10624dd3 	.word	0x10624dd3
 8010364:	002000c5 	.word	0x002000c5

08010368 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010370:	4b22      	ldr	r3, [pc, #136]	@ (80103fc <SDMMC_GetCmdResp7+0x94>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a22      	ldr	r2, [pc, #136]	@ (8010400 <SDMMC_GetCmdResp7+0x98>)
 8010376:	fba2 2303 	umull	r2, r3, r2, r3
 801037a:	0a5b      	lsrs	r3, r3, #9
 801037c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010380:	fb02 f303 	mul.w	r3, r2, r3
 8010384:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	1e5a      	subs	r2, r3, #1
 801038a:	60fa      	str	r2, [r7, #12]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d102      	bne.n	8010396 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010390:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010394:	e02c      	b.n	80103f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801039a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0ef      	beq.n	8010386 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1ea      	bne.n	8010386 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103b4:	f003 0304 	and.w	r3, r3, #4
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d004      	beq.n	80103c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2204      	movs	r2, #4
 80103c0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103c2:	2304      	movs	r3, #4
 80103c4:	e014      	b.n	80103f0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103ca:	f003 0301 	and.w	r3, r3, #1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d004      	beq.n	80103dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2201      	movs	r2, #1
 80103d6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103d8:	2301      	movs	r3, #1
 80103da:	e009      	b.n	80103f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2240      	movs	r2, #64	@ 0x40
 80103ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80103ee:	2300      	movs	r3, #0

}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3714      	adds	r7, #20
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr
 80103fc:	24000004 	.word	0x24000004
 8010400:	10624dd3 	.word	0x10624dd3

08010404 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801040c:	4b11      	ldr	r3, [pc, #68]	@ (8010454 <SDMMC_GetCmdError+0x50>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a11      	ldr	r2, [pc, #68]	@ (8010458 <SDMMC_GetCmdError+0x54>)
 8010412:	fba2 2303 	umull	r2, r3, r2, r3
 8010416:	0a5b      	lsrs	r3, r3, #9
 8010418:	f241 3288 	movw	r2, #5000	@ 0x1388
 801041c:	fb02 f303 	mul.w	r3, r2, r3
 8010420:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	1e5a      	subs	r2, r3, #1
 8010426:	60fa      	str	r2, [r7, #12]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d102      	bne.n	8010432 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801042c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010430:	e009      	b.n	8010446 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801043a:	2b00      	cmp	r3, #0
 801043c:	d0f1      	beq.n	8010422 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4a06      	ldr	r2, [pc, #24]	@ (801045c <SDMMC_GetCmdError+0x58>)
 8010442:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010444:	2300      	movs	r3, #0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	24000004 	.word	0x24000004
 8010458:	10624dd3 	.word	0x10624dd3
 801045c:	002000c5 	.word	0x002000c5

08010460 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010464:	4904      	ldr	r1, [pc, #16]	@ (8010478 <MX_FATFS_Init+0x18>)
 8010466:	4805      	ldr	r0, [pc, #20]	@ (801047c <MX_FATFS_Init+0x1c>)
 8010468:	f000 fa8e 	bl	8010988 <FATFS_LinkDriver>
 801046c:	4603      	mov	r3, r0
 801046e:	461a      	mov	r2, r3
 8010470:	4b03      	ldr	r3, [pc, #12]	@ (8010480 <MX_FATFS_Init+0x20>)
 8010472:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010474:	bf00      	nop
 8010476:	bd80      	pop	{r7, pc}
 8010478:	2400073c 	.word	0x2400073c
 801047c:	08011530 	.word	0x08011530
 8010480:	24000738 	.word	0x24000738

08010484 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801048a:	2300      	movs	r3, #0
 801048c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801048e:	f000 f885 	bl	801059c <BSP_SD_IsDetected>
 8010492:	4603      	mov	r3, r0
 8010494:	2b01      	cmp	r3, #1
 8010496:	d001      	beq.n	801049c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010498:	2302      	movs	r3, #2
 801049a:	e012      	b.n	80104c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801049c:	480b      	ldr	r0, [pc, #44]	@ (80104cc <BSP_SD_Init+0x48>)
 801049e:	f7fb f95d 	bl	800b75c <HAL_SD_Init>
 80104a2:	4603      	mov	r3, r0
 80104a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d109      	bne.n	80104c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80104ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80104b0:	4806      	ldr	r0, [pc, #24]	@ (80104cc <BSP_SD_Init+0x48>)
 80104b2:	f7fc f813 	bl	800c4dc <HAL_SD_ConfigWideBusOperation>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80104bc:	2301      	movs	r3, #1
 80104be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80104c0:	79fb      	ldrb	r3, [r7, #7]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	240003c0 	.word	0x240003c0

080104d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b086      	sub	sp, #24
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80104dc:	2300      	movs	r3, #0
 80104de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68ba      	ldr	r2, [r7, #8]
 80104e4:	68f9      	ldr	r1, [r7, #12]
 80104e6:	4806      	ldr	r0, [pc, #24]	@ (8010500 <BSP_SD_ReadBlocks_DMA+0x30>)
 80104e8:	f7fb fa58 	bl	800b99c <HAL_SD_ReadBlocks_DMA>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80104f2:	2301      	movs	r3, #1
 80104f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80104f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3718      	adds	r7, #24
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	240003c0 	.word	0x240003c0

08010504 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b086      	sub	sp, #24
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010510:	2300      	movs	r3, #0
 8010512:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68ba      	ldr	r2, [r7, #8]
 8010518:	68f9      	ldr	r1, [r7, #12]
 801051a:	4806      	ldr	r0, [pc, #24]	@ (8010534 <BSP_SD_WriteBlocks_DMA+0x30>)
 801051c:	f7fb fae6 	bl	800baec <HAL_SD_WriteBlocks_DMA>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d001      	beq.n	801052a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010526:	2301      	movs	r3, #1
 8010528:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801052a:	7dfb      	ldrb	r3, [r7, #23]
}
 801052c:	4618      	mov	r0, r3
 801052e:	3718      	adds	r7, #24
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	240003c0 	.word	0x240003c0

08010538 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801053c:	4805      	ldr	r0, [pc, #20]	@ (8010554 <BSP_SD_GetCardState+0x1c>)
 801053e:	f7fc f8df 	bl	800c700 <HAL_SD_GetCardState>
 8010542:	4603      	mov	r3, r0
 8010544:	2b04      	cmp	r3, #4
 8010546:	bf14      	ite	ne
 8010548:	2301      	movne	r3, #1
 801054a:	2300      	moveq	r3, #0
 801054c:	b2db      	uxtb	r3, r3
}
 801054e:	4618      	mov	r0, r3
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	240003c0 	.word	0x240003c0

08010558 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010560:	6879      	ldr	r1, [r7, #4]
 8010562:	4803      	ldr	r0, [pc, #12]	@ (8010570 <BSP_SD_GetCardInfo+0x18>)
 8010564:	f7fb ff8e 	bl	800c484 <HAL_SD_GetCardInfo>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	240003c0 	.word	0x240003c0

08010574 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801057c:	f000 f9a0 	bl	80108c0 <BSP_SD_WriteCpltCallback>
}
 8010580:	bf00      	nop
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010590:	f000 f9a2 	bl	80108d8 <BSP_SD_ReadCpltCallback>
}
 8010594:	bf00      	nop
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80105a2:	2301      	movs	r3, #1
 80105a4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80105a6:	f000 f80b 	bl	80105c0 <BSP_PlatformIsDetected>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d101      	bne.n	80105b4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80105b0:	2300      	movs	r3, #0
 80105b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80105b4:	79fb      	ldrb	r3, [r7, #7]
 80105b6:	b2db      	uxtb	r3, r3
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3708      	adds	r7, #8
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80105c6:	2301      	movs	r3, #1
 80105c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80105ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80105ce:	4806      	ldr	r0, [pc, #24]	@ (80105e8 <BSP_PlatformIsDetected+0x28>)
 80105d0:	f7f7 fd0c 	bl	8007fec <HAL_GPIO_ReadPin>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d001      	beq.n	80105de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80105da:	2300      	movs	r3, #0
 80105dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80105de:	79fb      	ldrb	r3, [r7, #7]
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	58021400 	.word	0x58021400

080105ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80105f4:	f7f1 ffb6 	bl	8002564 <HAL_GetTick>
 80105f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80105fa:	e006      	b.n	801060a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80105fc:	f7ff ff9c 	bl	8010538 <BSP_SD_GetCardState>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d101      	bne.n	801060a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010606:	2300      	movs	r3, #0
 8010608:	e009      	b.n	801061e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801060a:	f7f1 ffab 	bl	8002564 <HAL_GetTick>
 801060e:	4602      	mov	r2, r0
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	1ad3      	subs	r3, r2, r3
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	429a      	cmp	r2, r3
 8010618:	d8f0      	bhi.n	80105fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801061e:	4618      	mov	r0, r3
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010632:	4b0b      	ldr	r3, [pc, #44]	@ (8010660 <SD_CheckStatus+0x38>)
 8010634:	2201      	movs	r2, #1
 8010636:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010638:	f7ff ff7e 	bl	8010538 <BSP_SD_GetCardState>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d107      	bne.n	8010652 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010642:	4b07      	ldr	r3, [pc, #28]	@ (8010660 <SD_CheckStatus+0x38>)
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	b2db      	uxtb	r3, r3
 8010648:	f023 0301 	bic.w	r3, r3, #1
 801064c:	b2da      	uxtb	r2, r3
 801064e:	4b04      	ldr	r3, [pc, #16]	@ (8010660 <SD_CheckStatus+0x38>)
 8010650:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010652:	4b03      	ldr	r3, [pc, #12]	@ (8010660 <SD_CheckStatus+0x38>)
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	b2db      	uxtb	r3, r3
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	24000011 	.word	0x24000011

08010664 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801066e:	f7ff ff09 	bl	8010484 <BSP_SD_Init>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d107      	bne.n	8010688 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010678:	79fb      	ldrb	r3, [r7, #7]
 801067a:	4618      	mov	r0, r3
 801067c:	f7ff ffd4 	bl	8010628 <SD_CheckStatus>
 8010680:	4603      	mov	r3, r0
 8010682:	461a      	mov	r2, r3
 8010684:	4b04      	ldr	r3, [pc, #16]	@ (8010698 <SD_initialize+0x34>)
 8010686:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010688:	4b03      	ldr	r3, [pc, #12]	@ (8010698 <SD_initialize+0x34>)
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	b2db      	uxtb	r3, r3
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	24000011 	.word	0x24000011

0801069c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	4603      	mov	r3, r0
 80106a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80106a6:	79fb      	ldrb	r3, [r7, #7]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff ffbd 	bl	8010628 <SD_CheckStatus>
 80106ae:	4603      	mov	r3, r0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60b9      	str	r1, [r7, #8]
 80106c0:	607a      	str	r2, [r7, #4]
 80106c2:	603b      	str	r3, [r7, #0]
 80106c4:	4603      	mov	r3, r0
 80106c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80106c8:	2301      	movs	r3, #1
 80106ca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80106cc:	f247 5030 	movw	r0, #30000	@ 0x7530
 80106d0:	f7ff ff8c 	bl	80105ec <SD_CheckStatusWithTimeout>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	da01      	bge.n	80106de <SD_read+0x26>
  {
    return res;
 80106da:	7dfb      	ldrb	r3, [r7, #23]
 80106dc:	e03b      	b.n	8010756 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	6879      	ldr	r1, [r7, #4]
 80106e2:	68b8      	ldr	r0, [r7, #8]
 80106e4:	f7ff fef4 	bl	80104d0 <BSP_SD_ReadBlocks_DMA>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d132      	bne.n	8010754 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80106ee:	4b1c      	ldr	r3, [pc, #112]	@ (8010760 <SD_read+0xa8>)
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80106f4:	f7f1 ff36 	bl	8002564 <HAL_GetTick>
 80106f8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80106fa:	bf00      	nop
 80106fc:	4b18      	ldr	r3, [pc, #96]	@ (8010760 <SD_read+0xa8>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d108      	bne.n	8010716 <SD_read+0x5e>
 8010704:	f7f1 ff2e 	bl	8002564 <HAL_GetTick>
 8010708:	4602      	mov	r2, r0
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010712:	4293      	cmp	r3, r2
 8010714:	d9f2      	bls.n	80106fc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010716:	4b12      	ldr	r3, [pc, #72]	@ (8010760 <SD_read+0xa8>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d102      	bne.n	8010724 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	75fb      	strb	r3, [r7, #23]
 8010722:	e017      	b.n	8010754 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010724:	4b0e      	ldr	r3, [pc, #56]	@ (8010760 <SD_read+0xa8>)
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801072a:	f7f1 ff1b 	bl	8002564 <HAL_GetTick>
 801072e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010730:	e007      	b.n	8010742 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010732:	f7ff ff01 	bl	8010538 <BSP_SD_GetCardState>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d102      	bne.n	8010742 <SD_read+0x8a>
          {
            res = RES_OK;
 801073c:	2300      	movs	r3, #0
 801073e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010740:	e008      	b.n	8010754 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010742:	f7f1 ff0f 	bl	8002564 <HAL_GetTick>
 8010746:	4602      	mov	r2, r0
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010750:	4293      	cmp	r3, r2
 8010752:	d9ee      	bls.n	8010732 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010754:	7dfb      	ldrb	r3, [r7, #23]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3718      	adds	r7, #24
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	24000744 	.word	0x24000744

08010764 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	60b9      	str	r1, [r7, #8]
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	603b      	str	r3, [r7, #0]
 8010770:	4603      	mov	r3, r0
 8010772:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010774:	2301      	movs	r3, #1
 8010776:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010778:	4b24      	ldr	r3, [pc, #144]	@ (801080c <SD_write+0xa8>)
 801077a:	2200      	movs	r2, #0
 801077c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801077e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010782:	f7ff ff33 	bl	80105ec <SD_CheckStatusWithTimeout>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	da01      	bge.n	8010790 <SD_write+0x2c>
  {
    return res;
 801078c:	7dfb      	ldrb	r3, [r7, #23]
 801078e:	e038      	b.n	8010802 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010790:	683a      	ldr	r2, [r7, #0]
 8010792:	6879      	ldr	r1, [r7, #4]
 8010794:	68b8      	ldr	r0, [r7, #8]
 8010796:	f7ff feb5 	bl	8010504 <BSP_SD_WriteBlocks_DMA>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d12f      	bne.n	8010800 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80107a0:	f7f1 fee0 	bl	8002564 <HAL_GetTick>
 80107a4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80107a6:	bf00      	nop
 80107a8:	4b18      	ldr	r3, [pc, #96]	@ (801080c <SD_write+0xa8>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d108      	bne.n	80107c2 <SD_write+0x5e>
 80107b0:	f7f1 fed8 	bl	8002564 <HAL_GetTick>
 80107b4:	4602      	mov	r2, r0
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	1ad3      	subs	r3, r2, r3
 80107ba:	f247 522f 	movw	r2, #29999	@ 0x752f
 80107be:	4293      	cmp	r3, r2
 80107c0:	d9f2      	bls.n	80107a8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80107c2:	4b12      	ldr	r3, [pc, #72]	@ (801080c <SD_write+0xa8>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d102      	bne.n	80107d0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80107ca:	2301      	movs	r3, #1
 80107cc:	75fb      	strb	r3, [r7, #23]
 80107ce:	e017      	b.n	8010800 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80107d0:	4b0e      	ldr	r3, [pc, #56]	@ (801080c <SD_write+0xa8>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80107d6:	f7f1 fec5 	bl	8002564 <HAL_GetTick>
 80107da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80107dc:	e007      	b.n	80107ee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80107de:	f7ff feab 	bl	8010538 <BSP_SD_GetCardState>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d102      	bne.n	80107ee <SD_write+0x8a>
          {
            res = RES_OK;
 80107e8:	2300      	movs	r3, #0
 80107ea:	75fb      	strb	r3, [r7, #23]
            break;
 80107ec:	e008      	b.n	8010800 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80107ee:	f7f1 feb9 	bl	8002564 <HAL_GetTick>
 80107f2:	4602      	mov	r2, r0
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d9ee      	bls.n	80107de <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010800:	7dfb      	ldrb	r3, [r7, #23]
}
 8010802:	4618      	mov	r0, r3
 8010804:	3718      	adds	r7, #24
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	24000740 	.word	0x24000740

08010810 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b08c      	sub	sp, #48	@ 0x30
 8010814:	af00      	add	r7, sp, #0
 8010816:	4603      	mov	r3, r0
 8010818:	603a      	str	r2, [r7, #0]
 801081a:	71fb      	strb	r3, [r7, #7]
 801081c:	460b      	mov	r3, r1
 801081e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010820:	2301      	movs	r3, #1
 8010822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010826:	4b25      	ldr	r3, [pc, #148]	@ (80108bc <SD_ioctl+0xac>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	b2db      	uxtb	r3, r3
 801082c:	f003 0301 	and.w	r3, r3, #1
 8010830:	2b00      	cmp	r3, #0
 8010832:	d001      	beq.n	8010838 <SD_ioctl+0x28>
 8010834:	2303      	movs	r3, #3
 8010836:	e03c      	b.n	80108b2 <SD_ioctl+0xa2>

  switch (cmd)
 8010838:	79bb      	ldrb	r3, [r7, #6]
 801083a:	2b03      	cmp	r3, #3
 801083c:	d834      	bhi.n	80108a8 <SD_ioctl+0x98>
 801083e:	a201      	add	r2, pc, #4	@ (adr r2, 8010844 <SD_ioctl+0x34>)
 8010840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010844:	08010855 	.word	0x08010855
 8010848:	0801085d 	.word	0x0801085d
 801084c:	08010875 	.word	0x08010875
 8010850:	0801088f 	.word	0x0801088f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010854:	2300      	movs	r3, #0
 8010856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801085a:	e028      	b.n	80108ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801085c:	f107 0308 	add.w	r3, r7, #8
 8010860:	4618      	mov	r0, r3
 8010862:	f7ff fe79 	bl	8010558 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010866:	6a3a      	ldr	r2, [r7, #32]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010872:	e01c      	b.n	80108ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010874:	f107 0308 	add.w	r3, r7, #8
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff fe6d 	bl	8010558 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010880:	b29a      	uxth	r2, r3
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010886:	2300      	movs	r3, #0
 8010888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801088c:	e00f      	b.n	80108ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801088e:	f107 0308 	add.w	r3, r7, #8
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff fe60 	bl	8010558 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089a:	0a5a      	lsrs	r2, r3, #9
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80108a0:	2300      	movs	r3, #0
 80108a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80108a6:	e002      	b.n	80108ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80108a8:	2304      	movs	r3, #4
 80108aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80108ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3730      	adds	r7, #48	@ 0x30
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	24000011 	.word	0x24000011

080108c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80108c0:	b480      	push	{r7}
 80108c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80108c4:	4b03      	ldr	r3, [pc, #12]	@ (80108d4 <BSP_SD_WriteCpltCallback+0x14>)
 80108c6:	2201      	movs	r2, #1
 80108c8:	601a      	str	r2, [r3, #0]
}
 80108ca:	bf00      	nop
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr
 80108d4:	24000740 	.word	0x24000740

080108d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80108d8:	b480      	push	{r7}
 80108da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80108dc:	4b03      	ldr	r3, [pc, #12]	@ (80108ec <BSP_SD_ReadCpltCallback+0x14>)
 80108de:	2201      	movs	r2, #1
 80108e0:	601a      	str	r2, [r3, #0]
}
 80108e2:	bf00      	nop
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	24000744 	.word	0x24000744

080108f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b087      	sub	sp, #28
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	4613      	mov	r3, r2
 80108fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80108fe:	2301      	movs	r3, #1
 8010900:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010902:	2300      	movs	r3, #0
 8010904:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010906:	4b1f      	ldr	r3, [pc, #124]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010908:	7a5b      	ldrb	r3, [r3, #9]
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	d131      	bne.n	8010974 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010910:	4b1c      	ldr	r3, [pc, #112]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010912:	7a5b      	ldrb	r3, [r3, #9]
 8010914:	b2db      	uxtb	r3, r3
 8010916:	461a      	mov	r2, r3
 8010918:	4b1a      	ldr	r3, [pc, #104]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 801091a:	2100      	movs	r1, #0
 801091c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801091e:	4b19      	ldr	r3, [pc, #100]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010920:	7a5b      	ldrb	r3, [r3, #9]
 8010922:	b2db      	uxtb	r3, r3
 8010924:	4a17      	ldr	r2, [pc, #92]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	4413      	add	r3, r2
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801092e:	4b15      	ldr	r3, [pc, #84]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010930:	7a5b      	ldrb	r3, [r3, #9]
 8010932:	b2db      	uxtb	r3, r3
 8010934:	461a      	mov	r2, r3
 8010936:	4b13      	ldr	r3, [pc, #76]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010938:	4413      	add	r3, r2
 801093a:	79fa      	ldrb	r2, [r7, #7]
 801093c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801093e:	4b11      	ldr	r3, [pc, #68]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 8010940:	7a5b      	ldrb	r3, [r3, #9]
 8010942:	b2db      	uxtb	r3, r3
 8010944:	1c5a      	adds	r2, r3, #1
 8010946:	b2d1      	uxtb	r1, r2
 8010948:	4a0e      	ldr	r2, [pc, #56]	@ (8010984 <FATFS_LinkDriverEx+0x94>)
 801094a:	7251      	strb	r1, [r2, #9]
 801094c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801094e:	7dbb      	ldrb	r3, [r7, #22]
 8010950:	3330      	adds	r3, #48	@ 0x30
 8010952:	b2da      	uxtb	r2, r3
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	3301      	adds	r3, #1
 801095c:	223a      	movs	r2, #58	@ 0x3a
 801095e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	3302      	adds	r3, #2
 8010964:	222f      	movs	r2, #47	@ 0x2f
 8010966:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	3303      	adds	r3, #3
 801096c:	2200      	movs	r2, #0
 801096e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010970:	2300      	movs	r3, #0
 8010972:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010974:	7dfb      	ldrb	r3, [r7, #23]
}
 8010976:	4618      	mov	r0, r3
 8010978:	371c      	adds	r7, #28
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	24000748 	.word	0x24000748

08010988 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010992:	2200      	movs	r2, #0
 8010994:	6839      	ldr	r1, [r7, #0]
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ff ffaa 	bl	80108f0 <FATFS_LinkDriverEx>
 801099c:	4603      	mov	r3, r0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3708      	adds	r7, #8
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
	...

080109a8 <siprintf>:
 80109a8:	b40e      	push	{r1, r2, r3}
 80109aa:	b510      	push	{r4, lr}
 80109ac:	b09d      	sub	sp, #116	@ 0x74
 80109ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80109b0:	9002      	str	r0, [sp, #8]
 80109b2:	9006      	str	r0, [sp, #24]
 80109b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80109b8:	480a      	ldr	r0, [pc, #40]	@ (80109e4 <siprintf+0x3c>)
 80109ba:	9107      	str	r1, [sp, #28]
 80109bc:	9104      	str	r1, [sp, #16]
 80109be:	490a      	ldr	r1, [pc, #40]	@ (80109e8 <siprintf+0x40>)
 80109c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80109c4:	9105      	str	r1, [sp, #20]
 80109c6:	2400      	movs	r4, #0
 80109c8:	a902      	add	r1, sp, #8
 80109ca:	6800      	ldr	r0, [r0, #0]
 80109cc:	9301      	str	r3, [sp, #4]
 80109ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80109d0:	f000 f9a2 	bl	8010d18 <_svfiprintf_r>
 80109d4:	9b02      	ldr	r3, [sp, #8]
 80109d6:	701c      	strb	r4, [r3, #0]
 80109d8:	b01d      	add	sp, #116	@ 0x74
 80109da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109de:	b003      	add	sp, #12
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	24000014 	.word	0x24000014
 80109e8:	ffff0208 	.word	0xffff0208

080109ec <memset>:
 80109ec:	4402      	add	r2, r0
 80109ee:	4603      	mov	r3, r0
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d100      	bne.n	80109f6 <memset+0xa>
 80109f4:	4770      	bx	lr
 80109f6:	f803 1b01 	strb.w	r1, [r3], #1
 80109fa:	e7f9      	b.n	80109f0 <memset+0x4>

080109fc <__errno>:
 80109fc:	4b01      	ldr	r3, [pc, #4]	@ (8010a04 <__errno+0x8>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	24000014 	.word	0x24000014

08010a08 <__libc_init_array>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8010a40 <__libc_init_array+0x38>)
 8010a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8010a44 <__libc_init_array+0x3c>)
 8010a0e:	1b64      	subs	r4, r4, r5
 8010a10:	10a4      	asrs	r4, r4, #2
 8010a12:	2600      	movs	r6, #0
 8010a14:	42a6      	cmp	r6, r4
 8010a16:	d109      	bne.n	8010a2c <__libc_init_array+0x24>
 8010a18:	4d0b      	ldr	r5, [pc, #44]	@ (8010a48 <__libc_init_array+0x40>)
 8010a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8010a4c <__libc_init_array+0x44>)
 8010a1c:	f000 fc64 	bl	80112e8 <_init>
 8010a20:	1b64      	subs	r4, r4, r5
 8010a22:	10a4      	asrs	r4, r4, #2
 8010a24:	2600      	movs	r6, #0
 8010a26:	42a6      	cmp	r6, r4
 8010a28:	d105      	bne.n	8010a36 <__libc_init_array+0x2e>
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
 8010a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a30:	4798      	blx	r3
 8010a32:	3601      	adds	r6, #1
 8010a34:	e7ee      	b.n	8010a14 <__libc_init_array+0xc>
 8010a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a3a:	4798      	blx	r3
 8010a3c:	3601      	adds	r6, #1
 8010a3e:	e7f2      	b.n	8010a26 <__libc_init_array+0x1e>
 8010a40:	08011580 	.word	0x08011580
 8010a44:	08011580 	.word	0x08011580
 8010a48:	08011580 	.word	0x08011580
 8010a4c:	08011584 	.word	0x08011584

08010a50 <__retarget_lock_acquire_recursive>:
 8010a50:	4770      	bx	lr

08010a52 <__retarget_lock_release_recursive>:
 8010a52:	4770      	bx	lr

08010a54 <memcpy>:
 8010a54:	440a      	add	r2, r1
 8010a56:	4291      	cmp	r1, r2
 8010a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a5c:	d100      	bne.n	8010a60 <memcpy+0xc>
 8010a5e:	4770      	bx	lr
 8010a60:	b510      	push	{r4, lr}
 8010a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a6a:	4291      	cmp	r1, r2
 8010a6c:	d1f9      	bne.n	8010a62 <memcpy+0xe>
 8010a6e:	bd10      	pop	{r4, pc}

08010a70 <_free_r>:
 8010a70:	b538      	push	{r3, r4, r5, lr}
 8010a72:	4605      	mov	r5, r0
 8010a74:	2900      	cmp	r1, #0
 8010a76:	d041      	beq.n	8010afc <_free_r+0x8c>
 8010a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a7c:	1f0c      	subs	r4, r1, #4
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	bfb8      	it	lt
 8010a82:	18e4      	addlt	r4, r4, r3
 8010a84:	f000 f8e0 	bl	8010c48 <__malloc_lock>
 8010a88:	4a1d      	ldr	r2, [pc, #116]	@ (8010b00 <_free_r+0x90>)
 8010a8a:	6813      	ldr	r3, [r2, #0]
 8010a8c:	b933      	cbnz	r3, 8010a9c <_free_r+0x2c>
 8010a8e:	6063      	str	r3, [r4, #4]
 8010a90:	6014      	str	r4, [r2, #0]
 8010a92:	4628      	mov	r0, r5
 8010a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a98:	f000 b8dc 	b.w	8010c54 <__malloc_unlock>
 8010a9c:	42a3      	cmp	r3, r4
 8010a9e:	d908      	bls.n	8010ab2 <_free_r+0x42>
 8010aa0:	6820      	ldr	r0, [r4, #0]
 8010aa2:	1821      	adds	r1, r4, r0
 8010aa4:	428b      	cmp	r3, r1
 8010aa6:	bf01      	itttt	eq
 8010aa8:	6819      	ldreq	r1, [r3, #0]
 8010aaa:	685b      	ldreq	r3, [r3, #4]
 8010aac:	1809      	addeq	r1, r1, r0
 8010aae:	6021      	streq	r1, [r4, #0]
 8010ab0:	e7ed      	b.n	8010a8e <_free_r+0x1e>
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	b10b      	cbz	r3, 8010abc <_free_r+0x4c>
 8010ab8:	42a3      	cmp	r3, r4
 8010aba:	d9fa      	bls.n	8010ab2 <_free_r+0x42>
 8010abc:	6811      	ldr	r1, [r2, #0]
 8010abe:	1850      	adds	r0, r2, r1
 8010ac0:	42a0      	cmp	r0, r4
 8010ac2:	d10b      	bne.n	8010adc <_free_r+0x6c>
 8010ac4:	6820      	ldr	r0, [r4, #0]
 8010ac6:	4401      	add	r1, r0
 8010ac8:	1850      	adds	r0, r2, r1
 8010aca:	4283      	cmp	r3, r0
 8010acc:	6011      	str	r1, [r2, #0]
 8010ace:	d1e0      	bne.n	8010a92 <_free_r+0x22>
 8010ad0:	6818      	ldr	r0, [r3, #0]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	6053      	str	r3, [r2, #4]
 8010ad6:	4408      	add	r0, r1
 8010ad8:	6010      	str	r0, [r2, #0]
 8010ada:	e7da      	b.n	8010a92 <_free_r+0x22>
 8010adc:	d902      	bls.n	8010ae4 <_free_r+0x74>
 8010ade:	230c      	movs	r3, #12
 8010ae0:	602b      	str	r3, [r5, #0]
 8010ae2:	e7d6      	b.n	8010a92 <_free_r+0x22>
 8010ae4:	6820      	ldr	r0, [r4, #0]
 8010ae6:	1821      	adds	r1, r4, r0
 8010ae8:	428b      	cmp	r3, r1
 8010aea:	bf04      	itt	eq
 8010aec:	6819      	ldreq	r1, [r3, #0]
 8010aee:	685b      	ldreq	r3, [r3, #4]
 8010af0:	6063      	str	r3, [r4, #4]
 8010af2:	bf04      	itt	eq
 8010af4:	1809      	addeq	r1, r1, r0
 8010af6:	6021      	streq	r1, [r4, #0]
 8010af8:	6054      	str	r4, [r2, #4]
 8010afa:	e7ca      	b.n	8010a92 <_free_r+0x22>
 8010afc:	bd38      	pop	{r3, r4, r5, pc}
 8010afe:	bf00      	nop
 8010b00:	24000898 	.word	0x24000898

08010b04 <sbrk_aligned>:
 8010b04:	b570      	push	{r4, r5, r6, lr}
 8010b06:	4e0f      	ldr	r6, [pc, #60]	@ (8010b44 <sbrk_aligned+0x40>)
 8010b08:	460c      	mov	r4, r1
 8010b0a:	6831      	ldr	r1, [r6, #0]
 8010b0c:	4605      	mov	r5, r0
 8010b0e:	b911      	cbnz	r1, 8010b16 <sbrk_aligned+0x12>
 8010b10:	f000 fba4 	bl	801125c <_sbrk_r>
 8010b14:	6030      	str	r0, [r6, #0]
 8010b16:	4621      	mov	r1, r4
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f000 fb9f 	bl	801125c <_sbrk_r>
 8010b1e:	1c43      	adds	r3, r0, #1
 8010b20:	d103      	bne.n	8010b2a <sbrk_aligned+0x26>
 8010b22:	f04f 34ff 	mov.w	r4, #4294967295
 8010b26:	4620      	mov	r0, r4
 8010b28:	bd70      	pop	{r4, r5, r6, pc}
 8010b2a:	1cc4      	adds	r4, r0, #3
 8010b2c:	f024 0403 	bic.w	r4, r4, #3
 8010b30:	42a0      	cmp	r0, r4
 8010b32:	d0f8      	beq.n	8010b26 <sbrk_aligned+0x22>
 8010b34:	1a21      	subs	r1, r4, r0
 8010b36:	4628      	mov	r0, r5
 8010b38:	f000 fb90 	bl	801125c <_sbrk_r>
 8010b3c:	3001      	adds	r0, #1
 8010b3e:	d1f2      	bne.n	8010b26 <sbrk_aligned+0x22>
 8010b40:	e7ef      	b.n	8010b22 <sbrk_aligned+0x1e>
 8010b42:	bf00      	nop
 8010b44:	24000894 	.word	0x24000894

08010b48 <_malloc_r>:
 8010b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b4c:	1ccd      	adds	r5, r1, #3
 8010b4e:	f025 0503 	bic.w	r5, r5, #3
 8010b52:	3508      	adds	r5, #8
 8010b54:	2d0c      	cmp	r5, #12
 8010b56:	bf38      	it	cc
 8010b58:	250c      	movcc	r5, #12
 8010b5a:	2d00      	cmp	r5, #0
 8010b5c:	4606      	mov	r6, r0
 8010b5e:	db01      	blt.n	8010b64 <_malloc_r+0x1c>
 8010b60:	42a9      	cmp	r1, r5
 8010b62:	d904      	bls.n	8010b6e <_malloc_r+0x26>
 8010b64:	230c      	movs	r3, #12
 8010b66:	6033      	str	r3, [r6, #0]
 8010b68:	2000      	movs	r0, #0
 8010b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c44 <_malloc_r+0xfc>
 8010b72:	f000 f869 	bl	8010c48 <__malloc_lock>
 8010b76:	f8d8 3000 	ldr.w	r3, [r8]
 8010b7a:	461c      	mov	r4, r3
 8010b7c:	bb44      	cbnz	r4, 8010bd0 <_malloc_r+0x88>
 8010b7e:	4629      	mov	r1, r5
 8010b80:	4630      	mov	r0, r6
 8010b82:	f7ff ffbf 	bl	8010b04 <sbrk_aligned>
 8010b86:	1c43      	adds	r3, r0, #1
 8010b88:	4604      	mov	r4, r0
 8010b8a:	d158      	bne.n	8010c3e <_malloc_r+0xf6>
 8010b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8010b90:	4627      	mov	r7, r4
 8010b92:	2f00      	cmp	r7, #0
 8010b94:	d143      	bne.n	8010c1e <_malloc_r+0xd6>
 8010b96:	2c00      	cmp	r4, #0
 8010b98:	d04b      	beq.n	8010c32 <_malloc_r+0xea>
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	eb04 0903 	add.w	r9, r4, r3
 8010ba4:	f000 fb5a 	bl	801125c <_sbrk_r>
 8010ba8:	4581      	cmp	r9, r0
 8010baa:	d142      	bne.n	8010c32 <_malloc_r+0xea>
 8010bac:	6821      	ldr	r1, [r4, #0]
 8010bae:	1a6d      	subs	r5, r5, r1
 8010bb0:	4629      	mov	r1, r5
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f7ff ffa6 	bl	8010b04 <sbrk_aligned>
 8010bb8:	3001      	adds	r0, #1
 8010bba:	d03a      	beq.n	8010c32 <_malloc_r+0xea>
 8010bbc:	6823      	ldr	r3, [r4, #0]
 8010bbe:	442b      	add	r3, r5
 8010bc0:	6023      	str	r3, [r4, #0]
 8010bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8010bc6:	685a      	ldr	r2, [r3, #4]
 8010bc8:	bb62      	cbnz	r2, 8010c24 <_malloc_r+0xdc>
 8010bca:	f8c8 7000 	str.w	r7, [r8]
 8010bce:	e00f      	b.n	8010bf0 <_malloc_r+0xa8>
 8010bd0:	6822      	ldr	r2, [r4, #0]
 8010bd2:	1b52      	subs	r2, r2, r5
 8010bd4:	d420      	bmi.n	8010c18 <_malloc_r+0xd0>
 8010bd6:	2a0b      	cmp	r2, #11
 8010bd8:	d917      	bls.n	8010c0a <_malloc_r+0xc2>
 8010bda:	1961      	adds	r1, r4, r5
 8010bdc:	42a3      	cmp	r3, r4
 8010bde:	6025      	str	r5, [r4, #0]
 8010be0:	bf18      	it	ne
 8010be2:	6059      	strne	r1, [r3, #4]
 8010be4:	6863      	ldr	r3, [r4, #4]
 8010be6:	bf08      	it	eq
 8010be8:	f8c8 1000 	streq.w	r1, [r8]
 8010bec:	5162      	str	r2, [r4, r5]
 8010bee:	604b      	str	r3, [r1, #4]
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f000 f82f 	bl	8010c54 <__malloc_unlock>
 8010bf6:	f104 000b 	add.w	r0, r4, #11
 8010bfa:	1d23      	adds	r3, r4, #4
 8010bfc:	f020 0007 	bic.w	r0, r0, #7
 8010c00:	1ac2      	subs	r2, r0, r3
 8010c02:	bf1c      	itt	ne
 8010c04:	1a1b      	subne	r3, r3, r0
 8010c06:	50a3      	strne	r3, [r4, r2]
 8010c08:	e7af      	b.n	8010b6a <_malloc_r+0x22>
 8010c0a:	6862      	ldr	r2, [r4, #4]
 8010c0c:	42a3      	cmp	r3, r4
 8010c0e:	bf0c      	ite	eq
 8010c10:	f8c8 2000 	streq.w	r2, [r8]
 8010c14:	605a      	strne	r2, [r3, #4]
 8010c16:	e7eb      	b.n	8010bf0 <_malloc_r+0xa8>
 8010c18:	4623      	mov	r3, r4
 8010c1a:	6864      	ldr	r4, [r4, #4]
 8010c1c:	e7ae      	b.n	8010b7c <_malloc_r+0x34>
 8010c1e:	463c      	mov	r4, r7
 8010c20:	687f      	ldr	r7, [r7, #4]
 8010c22:	e7b6      	b.n	8010b92 <_malloc_r+0x4a>
 8010c24:	461a      	mov	r2, r3
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	42a3      	cmp	r3, r4
 8010c2a:	d1fb      	bne.n	8010c24 <_malloc_r+0xdc>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	6053      	str	r3, [r2, #4]
 8010c30:	e7de      	b.n	8010bf0 <_malloc_r+0xa8>
 8010c32:	230c      	movs	r3, #12
 8010c34:	6033      	str	r3, [r6, #0]
 8010c36:	4630      	mov	r0, r6
 8010c38:	f000 f80c 	bl	8010c54 <__malloc_unlock>
 8010c3c:	e794      	b.n	8010b68 <_malloc_r+0x20>
 8010c3e:	6005      	str	r5, [r0, #0]
 8010c40:	e7d6      	b.n	8010bf0 <_malloc_r+0xa8>
 8010c42:	bf00      	nop
 8010c44:	24000898 	.word	0x24000898

08010c48 <__malloc_lock>:
 8010c48:	4801      	ldr	r0, [pc, #4]	@ (8010c50 <__malloc_lock+0x8>)
 8010c4a:	f7ff bf01 	b.w	8010a50 <__retarget_lock_acquire_recursive>
 8010c4e:	bf00      	nop
 8010c50:	24000890 	.word	0x24000890

08010c54 <__malloc_unlock>:
 8010c54:	4801      	ldr	r0, [pc, #4]	@ (8010c5c <__malloc_unlock+0x8>)
 8010c56:	f7ff befc 	b.w	8010a52 <__retarget_lock_release_recursive>
 8010c5a:	bf00      	nop
 8010c5c:	24000890 	.word	0x24000890

08010c60 <__ssputs_r>:
 8010c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c64:	688e      	ldr	r6, [r1, #8]
 8010c66:	461f      	mov	r7, r3
 8010c68:	42be      	cmp	r6, r7
 8010c6a:	680b      	ldr	r3, [r1, #0]
 8010c6c:	4682      	mov	sl, r0
 8010c6e:	460c      	mov	r4, r1
 8010c70:	4690      	mov	r8, r2
 8010c72:	d82d      	bhi.n	8010cd0 <__ssputs_r+0x70>
 8010c74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010c7c:	d026      	beq.n	8010ccc <__ssputs_r+0x6c>
 8010c7e:	6965      	ldr	r5, [r4, #20]
 8010c80:	6909      	ldr	r1, [r1, #16]
 8010c82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c86:	eba3 0901 	sub.w	r9, r3, r1
 8010c8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c8e:	1c7b      	adds	r3, r7, #1
 8010c90:	444b      	add	r3, r9
 8010c92:	106d      	asrs	r5, r5, #1
 8010c94:	429d      	cmp	r5, r3
 8010c96:	bf38      	it	cc
 8010c98:	461d      	movcc	r5, r3
 8010c9a:	0553      	lsls	r3, r2, #21
 8010c9c:	d527      	bpl.n	8010cee <__ssputs_r+0x8e>
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ff ff52 	bl	8010b48 <_malloc_r>
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	b360      	cbz	r0, 8010d02 <__ssputs_r+0xa2>
 8010ca8:	6921      	ldr	r1, [r4, #16]
 8010caa:	464a      	mov	r2, r9
 8010cac:	f7ff fed2 	bl	8010a54 <memcpy>
 8010cb0:	89a3      	ldrh	r3, [r4, #12]
 8010cb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	6126      	str	r6, [r4, #16]
 8010cbe:	6165      	str	r5, [r4, #20]
 8010cc0:	444e      	add	r6, r9
 8010cc2:	eba5 0509 	sub.w	r5, r5, r9
 8010cc6:	6026      	str	r6, [r4, #0]
 8010cc8:	60a5      	str	r5, [r4, #8]
 8010cca:	463e      	mov	r6, r7
 8010ccc:	42be      	cmp	r6, r7
 8010cce:	d900      	bls.n	8010cd2 <__ssputs_r+0x72>
 8010cd0:	463e      	mov	r6, r7
 8010cd2:	6820      	ldr	r0, [r4, #0]
 8010cd4:	4632      	mov	r2, r6
 8010cd6:	4641      	mov	r1, r8
 8010cd8:	f000 faa6 	bl	8011228 <memmove>
 8010cdc:	68a3      	ldr	r3, [r4, #8]
 8010cde:	1b9b      	subs	r3, r3, r6
 8010ce0:	60a3      	str	r3, [r4, #8]
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	4433      	add	r3, r6
 8010ce6:	6023      	str	r3, [r4, #0]
 8010ce8:	2000      	movs	r0, #0
 8010cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cee:	462a      	mov	r2, r5
 8010cf0:	f000 fac4 	bl	801127c <_realloc_r>
 8010cf4:	4606      	mov	r6, r0
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d1e0      	bne.n	8010cbc <__ssputs_r+0x5c>
 8010cfa:	6921      	ldr	r1, [r4, #16]
 8010cfc:	4650      	mov	r0, sl
 8010cfe:	f7ff feb7 	bl	8010a70 <_free_r>
 8010d02:	230c      	movs	r3, #12
 8010d04:	f8ca 3000 	str.w	r3, [sl]
 8010d08:	89a3      	ldrh	r3, [r4, #12]
 8010d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d0e:	81a3      	strh	r3, [r4, #12]
 8010d10:	f04f 30ff 	mov.w	r0, #4294967295
 8010d14:	e7e9      	b.n	8010cea <__ssputs_r+0x8a>
	...

08010d18 <_svfiprintf_r>:
 8010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	4698      	mov	r8, r3
 8010d1e:	898b      	ldrh	r3, [r1, #12]
 8010d20:	061b      	lsls	r3, r3, #24
 8010d22:	b09d      	sub	sp, #116	@ 0x74
 8010d24:	4607      	mov	r7, r0
 8010d26:	460d      	mov	r5, r1
 8010d28:	4614      	mov	r4, r2
 8010d2a:	d510      	bpl.n	8010d4e <_svfiprintf_r+0x36>
 8010d2c:	690b      	ldr	r3, [r1, #16]
 8010d2e:	b973      	cbnz	r3, 8010d4e <_svfiprintf_r+0x36>
 8010d30:	2140      	movs	r1, #64	@ 0x40
 8010d32:	f7ff ff09 	bl	8010b48 <_malloc_r>
 8010d36:	6028      	str	r0, [r5, #0]
 8010d38:	6128      	str	r0, [r5, #16]
 8010d3a:	b930      	cbnz	r0, 8010d4a <_svfiprintf_r+0x32>
 8010d3c:	230c      	movs	r3, #12
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	f04f 30ff 	mov.w	r0, #4294967295
 8010d44:	b01d      	add	sp, #116	@ 0x74
 8010d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4a:	2340      	movs	r3, #64	@ 0x40
 8010d4c:	616b      	str	r3, [r5, #20]
 8010d4e:	2300      	movs	r3, #0
 8010d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d52:	2320      	movs	r3, #32
 8010d54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d5c:	2330      	movs	r3, #48	@ 0x30
 8010d5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010efc <_svfiprintf_r+0x1e4>
 8010d62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d66:	f04f 0901 	mov.w	r9, #1
 8010d6a:	4623      	mov	r3, r4
 8010d6c:	469a      	mov	sl, r3
 8010d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d72:	b10a      	cbz	r2, 8010d78 <_svfiprintf_r+0x60>
 8010d74:	2a25      	cmp	r2, #37	@ 0x25
 8010d76:	d1f9      	bne.n	8010d6c <_svfiprintf_r+0x54>
 8010d78:	ebba 0b04 	subs.w	fp, sl, r4
 8010d7c:	d00b      	beq.n	8010d96 <_svfiprintf_r+0x7e>
 8010d7e:	465b      	mov	r3, fp
 8010d80:	4622      	mov	r2, r4
 8010d82:	4629      	mov	r1, r5
 8010d84:	4638      	mov	r0, r7
 8010d86:	f7ff ff6b 	bl	8010c60 <__ssputs_r>
 8010d8a:	3001      	adds	r0, #1
 8010d8c:	f000 80a7 	beq.w	8010ede <_svfiprintf_r+0x1c6>
 8010d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d92:	445a      	add	r2, fp
 8010d94:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d96:	f89a 3000 	ldrb.w	r3, [sl]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f000 809f 	beq.w	8010ede <_svfiprintf_r+0x1c6>
 8010da0:	2300      	movs	r3, #0
 8010da2:	f04f 32ff 	mov.w	r2, #4294967295
 8010da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010daa:	f10a 0a01 	add.w	sl, sl, #1
 8010dae:	9304      	str	r3, [sp, #16]
 8010db0:	9307      	str	r3, [sp, #28]
 8010db2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010db6:	931a      	str	r3, [sp, #104]	@ 0x68
 8010db8:	4654      	mov	r4, sl
 8010dba:	2205      	movs	r2, #5
 8010dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc0:	484e      	ldr	r0, [pc, #312]	@ (8010efc <_svfiprintf_r+0x1e4>)
 8010dc2:	f7ef faad 	bl	8000320 <memchr>
 8010dc6:	9a04      	ldr	r2, [sp, #16]
 8010dc8:	b9d8      	cbnz	r0, 8010e02 <_svfiprintf_r+0xea>
 8010dca:	06d0      	lsls	r0, r2, #27
 8010dcc:	bf44      	itt	mi
 8010dce:	2320      	movmi	r3, #32
 8010dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dd4:	0711      	lsls	r1, r2, #28
 8010dd6:	bf44      	itt	mi
 8010dd8:	232b      	movmi	r3, #43	@ 0x2b
 8010dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dde:	f89a 3000 	ldrb.w	r3, [sl]
 8010de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010de4:	d015      	beq.n	8010e12 <_svfiprintf_r+0xfa>
 8010de6:	9a07      	ldr	r2, [sp, #28]
 8010de8:	4654      	mov	r4, sl
 8010dea:	2000      	movs	r0, #0
 8010dec:	f04f 0c0a 	mov.w	ip, #10
 8010df0:	4621      	mov	r1, r4
 8010df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010df6:	3b30      	subs	r3, #48	@ 0x30
 8010df8:	2b09      	cmp	r3, #9
 8010dfa:	d94b      	bls.n	8010e94 <_svfiprintf_r+0x17c>
 8010dfc:	b1b0      	cbz	r0, 8010e2c <_svfiprintf_r+0x114>
 8010dfe:	9207      	str	r2, [sp, #28]
 8010e00:	e014      	b.n	8010e2c <_svfiprintf_r+0x114>
 8010e02:	eba0 0308 	sub.w	r3, r0, r8
 8010e06:	fa09 f303 	lsl.w	r3, r9, r3
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	9304      	str	r3, [sp, #16]
 8010e0e:	46a2      	mov	sl, r4
 8010e10:	e7d2      	b.n	8010db8 <_svfiprintf_r+0xa0>
 8010e12:	9b03      	ldr	r3, [sp, #12]
 8010e14:	1d19      	adds	r1, r3, #4
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	9103      	str	r1, [sp, #12]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	bfbb      	ittet	lt
 8010e1e:	425b      	neglt	r3, r3
 8010e20:	f042 0202 	orrlt.w	r2, r2, #2
 8010e24:	9307      	strge	r3, [sp, #28]
 8010e26:	9307      	strlt	r3, [sp, #28]
 8010e28:	bfb8      	it	lt
 8010e2a:	9204      	strlt	r2, [sp, #16]
 8010e2c:	7823      	ldrb	r3, [r4, #0]
 8010e2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e30:	d10a      	bne.n	8010e48 <_svfiprintf_r+0x130>
 8010e32:	7863      	ldrb	r3, [r4, #1]
 8010e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e36:	d132      	bne.n	8010e9e <_svfiprintf_r+0x186>
 8010e38:	9b03      	ldr	r3, [sp, #12]
 8010e3a:	1d1a      	adds	r2, r3, #4
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	9203      	str	r2, [sp, #12]
 8010e40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e44:	3402      	adds	r4, #2
 8010e46:	9305      	str	r3, [sp, #20]
 8010e48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f0c <_svfiprintf_r+0x1f4>
 8010e4c:	7821      	ldrb	r1, [r4, #0]
 8010e4e:	2203      	movs	r2, #3
 8010e50:	4650      	mov	r0, sl
 8010e52:	f7ef fa65 	bl	8000320 <memchr>
 8010e56:	b138      	cbz	r0, 8010e68 <_svfiprintf_r+0x150>
 8010e58:	9b04      	ldr	r3, [sp, #16]
 8010e5a:	eba0 000a 	sub.w	r0, r0, sl
 8010e5e:	2240      	movs	r2, #64	@ 0x40
 8010e60:	4082      	lsls	r2, r0
 8010e62:	4313      	orrs	r3, r2
 8010e64:	3401      	adds	r4, #1
 8010e66:	9304      	str	r3, [sp, #16]
 8010e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e6c:	4824      	ldr	r0, [pc, #144]	@ (8010f00 <_svfiprintf_r+0x1e8>)
 8010e6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e72:	2206      	movs	r2, #6
 8010e74:	f7ef fa54 	bl	8000320 <memchr>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d036      	beq.n	8010eea <_svfiprintf_r+0x1d2>
 8010e7c:	4b21      	ldr	r3, [pc, #132]	@ (8010f04 <_svfiprintf_r+0x1ec>)
 8010e7e:	bb1b      	cbnz	r3, 8010ec8 <_svfiprintf_r+0x1b0>
 8010e80:	9b03      	ldr	r3, [sp, #12]
 8010e82:	3307      	adds	r3, #7
 8010e84:	f023 0307 	bic.w	r3, r3, #7
 8010e88:	3308      	adds	r3, #8
 8010e8a:	9303      	str	r3, [sp, #12]
 8010e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e8e:	4433      	add	r3, r6
 8010e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e92:	e76a      	b.n	8010d6a <_svfiprintf_r+0x52>
 8010e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e98:	460c      	mov	r4, r1
 8010e9a:	2001      	movs	r0, #1
 8010e9c:	e7a8      	b.n	8010df0 <_svfiprintf_r+0xd8>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	3401      	adds	r4, #1
 8010ea2:	9305      	str	r3, [sp, #20]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	f04f 0c0a 	mov.w	ip, #10
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eb0:	3a30      	subs	r2, #48	@ 0x30
 8010eb2:	2a09      	cmp	r2, #9
 8010eb4:	d903      	bls.n	8010ebe <_svfiprintf_r+0x1a6>
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d0c6      	beq.n	8010e48 <_svfiprintf_r+0x130>
 8010eba:	9105      	str	r1, [sp, #20]
 8010ebc:	e7c4      	b.n	8010e48 <_svfiprintf_r+0x130>
 8010ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	e7f0      	b.n	8010eaa <_svfiprintf_r+0x192>
 8010ec8:	ab03      	add	r3, sp, #12
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	462a      	mov	r2, r5
 8010ece:	4b0e      	ldr	r3, [pc, #56]	@ (8010f08 <_svfiprintf_r+0x1f0>)
 8010ed0:	a904      	add	r1, sp, #16
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	f3af 8000 	nop.w
 8010ed8:	1c42      	adds	r2, r0, #1
 8010eda:	4606      	mov	r6, r0
 8010edc:	d1d6      	bne.n	8010e8c <_svfiprintf_r+0x174>
 8010ede:	89ab      	ldrh	r3, [r5, #12]
 8010ee0:	065b      	lsls	r3, r3, #25
 8010ee2:	f53f af2d 	bmi.w	8010d40 <_svfiprintf_r+0x28>
 8010ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ee8:	e72c      	b.n	8010d44 <_svfiprintf_r+0x2c>
 8010eea:	ab03      	add	r3, sp, #12
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	462a      	mov	r2, r5
 8010ef0:	4b05      	ldr	r3, [pc, #20]	@ (8010f08 <_svfiprintf_r+0x1f0>)
 8010ef2:	a904      	add	r1, sp, #16
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	f000 f879 	bl	8010fec <_printf_i>
 8010efa:	e7ed      	b.n	8010ed8 <_svfiprintf_r+0x1c0>
 8010efc:	08011544 	.word	0x08011544
 8010f00:	0801154e 	.word	0x0801154e
 8010f04:	00000000 	.word	0x00000000
 8010f08:	08010c61 	.word	0x08010c61
 8010f0c:	0801154a 	.word	0x0801154a

08010f10 <_printf_common>:
 8010f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f14:	4616      	mov	r6, r2
 8010f16:	4698      	mov	r8, r3
 8010f18:	688a      	ldr	r2, [r1, #8]
 8010f1a:	690b      	ldr	r3, [r1, #16]
 8010f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f20:	4293      	cmp	r3, r2
 8010f22:	bfb8      	it	lt
 8010f24:	4613      	movlt	r3, r2
 8010f26:	6033      	str	r3, [r6, #0]
 8010f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	460c      	mov	r4, r1
 8010f30:	b10a      	cbz	r2, 8010f36 <_printf_common+0x26>
 8010f32:	3301      	adds	r3, #1
 8010f34:	6033      	str	r3, [r6, #0]
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	0699      	lsls	r1, r3, #26
 8010f3a:	bf42      	ittt	mi
 8010f3c:	6833      	ldrmi	r3, [r6, #0]
 8010f3e:	3302      	addmi	r3, #2
 8010f40:	6033      	strmi	r3, [r6, #0]
 8010f42:	6825      	ldr	r5, [r4, #0]
 8010f44:	f015 0506 	ands.w	r5, r5, #6
 8010f48:	d106      	bne.n	8010f58 <_printf_common+0x48>
 8010f4a:	f104 0a19 	add.w	sl, r4, #25
 8010f4e:	68e3      	ldr	r3, [r4, #12]
 8010f50:	6832      	ldr	r2, [r6, #0]
 8010f52:	1a9b      	subs	r3, r3, r2
 8010f54:	42ab      	cmp	r3, r5
 8010f56:	dc26      	bgt.n	8010fa6 <_printf_common+0x96>
 8010f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f5c:	6822      	ldr	r2, [r4, #0]
 8010f5e:	3b00      	subs	r3, #0
 8010f60:	bf18      	it	ne
 8010f62:	2301      	movne	r3, #1
 8010f64:	0692      	lsls	r2, r2, #26
 8010f66:	d42b      	bmi.n	8010fc0 <_printf_common+0xb0>
 8010f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f6c:	4641      	mov	r1, r8
 8010f6e:	4638      	mov	r0, r7
 8010f70:	47c8      	blx	r9
 8010f72:	3001      	adds	r0, #1
 8010f74:	d01e      	beq.n	8010fb4 <_printf_common+0xa4>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	6922      	ldr	r2, [r4, #16]
 8010f7a:	f003 0306 	and.w	r3, r3, #6
 8010f7e:	2b04      	cmp	r3, #4
 8010f80:	bf02      	ittt	eq
 8010f82:	68e5      	ldreq	r5, [r4, #12]
 8010f84:	6833      	ldreq	r3, [r6, #0]
 8010f86:	1aed      	subeq	r5, r5, r3
 8010f88:	68a3      	ldr	r3, [r4, #8]
 8010f8a:	bf0c      	ite	eq
 8010f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f90:	2500      	movne	r5, #0
 8010f92:	4293      	cmp	r3, r2
 8010f94:	bfc4      	itt	gt
 8010f96:	1a9b      	subgt	r3, r3, r2
 8010f98:	18ed      	addgt	r5, r5, r3
 8010f9a:	2600      	movs	r6, #0
 8010f9c:	341a      	adds	r4, #26
 8010f9e:	42b5      	cmp	r5, r6
 8010fa0:	d11a      	bne.n	8010fd8 <_printf_common+0xc8>
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	e008      	b.n	8010fb8 <_printf_common+0xa8>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	4652      	mov	r2, sl
 8010faa:	4641      	mov	r1, r8
 8010fac:	4638      	mov	r0, r7
 8010fae:	47c8      	blx	r9
 8010fb0:	3001      	adds	r0, #1
 8010fb2:	d103      	bne.n	8010fbc <_printf_common+0xac>
 8010fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fbc:	3501      	adds	r5, #1
 8010fbe:	e7c6      	b.n	8010f4e <_printf_common+0x3e>
 8010fc0:	18e1      	adds	r1, r4, r3
 8010fc2:	1c5a      	adds	r2, r3, #1
 8010fc4:	2030      	movs	r0, #48	@ 0x30
 8010fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fca:	4422      	add	r2, r4
 8010fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fd4:	3302      	adds	r3, #2
 8010fd6:	e7c7      	b.n	8010f68 <_printf_common+0x58>
 8010fd8:	2301      	movs	r3, #1
 8010fda:	4622      	mov	r2, r4
 8010fdc:	4641      	mov	r1, r8
 8010fde:	4638      	mov	r0, r7
 8010fe0:	47c8      	blx	r9
 8010fe2:	3001      	adds	r0, #1
 8010fe4:	d0e6      	beq.n	8010fb4 <_printf_common+0xa4>
 8010fe6:	3601      	adds	r6, #1
 8010fe8:	e7d9      	b.n	8010f9e <_printf_common+0x8e>
	...

08010fec <_printf_i>:
 8010fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff0:	7e0f      	ldrb	r7, [r1, #24]
 8010ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ff4:	2f78      	cmp	r7, #120	@ 0x78
 8010ff6:	4691      	mov	r9, r2
 8010ff8:	4680      	mov	r8, r0
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	469a      	mov	sl, r3
 8010ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011002:	d807      	bhi.n	8011014 <_printf_i+0x28>
 8011004:	2f62      	cmp	r7, #98	@ 0x62
 8011006:	d80a      	bhi.n	801101e <_printf_i+0x32>
 8011008:	2f00      	cmp	r7, #0
 801100a:	f000 80d1 	beq.w	80111b0 <_printf_i+0x1c4>
 801100e:	2f58      	cmp	r7, #88	@ 0x58
 8011010:	f000 80b8 	beq.w	8011184 <_printf_i+0x198>
 8011014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801101c:	e03a      	b.n	8011094 <_printf_i+0xa8>
 801101e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011022:	2b15      	cmp	r3, #21
 8011024:	d8f6      	bhi.n	8011014 <_printf_i+0x28>
 8011026:	a101      	add	r1, pc, #4	@ (adr r1, 801102c <_printf_i+0x40>)
 8011028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801102c:	08011085 	.word	0x08011085
 8011030:	08011099 	.word	0x08011099
 8011034:	08011015 	.word	0x08011015
 8011038:	08011015 	.word	0x08011015
 801103c:	08011015 	.word	0x08011015
 8011040:	08011015 	.word	0x08011015
 8011044:	08011099 	.word	0x08011099
 8011048:	08011015 	.word	0x08011015
 801104c:	08011015 	.word	0x08011015
 8011050:	08011015 	.word	0x08011015
 8011054:	08011015 	.word	0x08011015
 8011058:	08011197 	.word	0x08011197
 801105c:	080110c3 	.word	0x080110c3
 8011060:	08011151 	.word	0x08011151
 8011064:	08011015 	.word	0x08011015
 8011068:	08011015 	.word	0x08011015
 801106c:	080111b9 	.word	0x080111b9
 8011070:	08011015 	.word	0x08011015
 8011074:	080110c3 	.word	0x080110c3
 8011078:	08011015 	.word	0x08011015
 801107c:	08011015 	.word	0x08011015
 8011080:	08011159 	.word	0x08011159
 8011084:	6833      	ldr	r3, [r6, #0]
 8011086:	1d1a      	adds	r2, r3, #4
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	6032      	str	r2, [r6, #0]
 801108c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011094:	2301      	movs	r3, #1
 8011096:	e09c      	b.n	80111d2 <_printf_i+0x1e6>
 8011098:	6833      	ldr	r3, [r6, #0]
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	1d19      	adds	r1, r3, #4
 801109e:	6031      	str	r1, [r6, #0]
 80110a0:	0606      	lsls	r6, r0, #24
 80110a2:	d501      	bpl.n	80110a8 <_printf_i+0xbc>
 80110a4:	681d      	ldr	r5, [r3, #0]
 80110a6:	e003      	b.n	80110b0 <_printf_i+0xc4>
 80110a8:	0645      	lsls	r5, r0, #25
 80110aa:	d5fb      	bpl.n	80110a4 <_printf_i+0xb8>
 80110ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80110b0:	2d00      	cmp	r5, #0
 80110b2:	da03      	bge.n	80110bc <_printf_i+0xd0>
 80110b4:	232d      	movs	r3, #45	@ 0x2d
 80110b6:	426d      	negs	r5, r5
 80110b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110bc:	4858      	ldr	r0, [pc, #352]	@ (8011220 <_printf_i+0x234>)
 80110be:	230a      	movs	r3, #10
 80110c0:	e011      	b.n	80110e6 <_printf_i+0xfa>
 80110c2:	6821      	ldr	r1, [r4, #0]
 80110c4:	6833      	ldr	r3, [r6, #0]
 80110c6:	0608      	lsls	r0, r1, #24
 80110c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80110cc:	d402      	bmi.n	80110d4 <_printf_i+0xe8>
 80110ce:	0649      	lsls	r1, r1, #25
 80110d0:	bf48      	it	mi
 80110d2:	b2ad      	uxthmi	r5, r5
 80110d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80110d6:	4852      	ldr	r0, [pc, #328]	@ (8011220 <_printf_i+0x234>)
 80110d8:	6033      	str	r3, [r6, #0]
 80110da:	bf14      	ite	ne
 80110dc:	230a      	movne	r3, #10
 80110de:	2308      	moveq	r3, #8
 80110e0:	2100      	movs	r1, #0
 80110e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110e6:	6866      	ldr	r6, [r4, #4]
 80110e8:	60a6      	str	r6, [r4, #8]
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	db05      	blt.n	80110fa <_printf_i+0x10e>
 80110ee:	6821      	ldr	r1, [r4, #0]
 80110f0:	432e      	orrs	r6, r5
 80110f2:	f021 0104 	bic.w	r1, r1, #4
 80110f6:	6021      	str	r1, [r4, #0]
 80110f8:	d04b      	beq.n	8011192 <_printf_i+0x1a6>
 80110fa:	4616      	mov	r6, r2
 80110fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8011100:	fb03 5711 	mls	r7, r3, r1, r5
 8011104:	5dc7      	ldrb	r7, [r0, r7]
 8011106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801110a:	462f      	mov	r7, r5
 801110c:	42bb      	cmp	r3, r7
 801110e:	460d      	mov	r5, r1
 8011110:	d9f4      	bls.n	80110fc <_printf_i+0x110>
 8011112:	2b08      	cmp	r3, #8
 8011114:	d10b      	bne.n	801112e <_printf_i+0x142>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	07df      	lsls	r7, r3, #31
 801111a:	d508      	bpl.n	801112e <_printf_i+0x142>
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	6861      	ldr	r1, [r4, #4]
 8011120:	4299      	cmp	r1, r3
 8011122:	bfde      	ittt	le
 8011124:	2330      	movle	r3, #48	@ 0x30
 8011126:	f806 3c01 	strble.w	r3, [r6, #-1]
 801112a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801112e:	1b92      	subs	r2, r2, r6
 8011130:	6122      	str	r2, [r4, #16]
 8011132:	f8cd a000 	str.w	sl, [sp]
 8011136:	464b      	mov	r3, r9
 8011138:	aa03      	add	r2, sp, #12
 801113a:	4621      	mov	r1, r4
 801113c:	4640      	mov	r0, r8
 801113e:	f7ff fee7 	bl	8010f10 <_printf_common>
 8011142:	3001      	adds	r0, #1
 8011144:	d14a      	bne.n	80111dc <_printf_i+0x1f0>
 8011146:	f04f 30ff 	mov.w	r0, #4294967295
 801114a:	b004      	add	sp, #16
 801114c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011150:	6823      	ldr	r3, [r4, #0]
 8011152:	f043 0320 	orr.w	r3, r3, #32
 8011156:	6023      	str	r3, [r4, #0]
 8011158:	4832      	ldr	r0, [pc, #200]	@ (8011224 <_printf_i+0x238>)
 801115a:	2778      	movs	r7, #120	@ 0x78
 801115c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011160:	6823      	ldr	r3, [r4, #0]
 8011162:	6831      	ldr	r1, [r6, #0]
 8011164:	061f      	lsls	r7, r3, #24
 8011166:	f851 5b04 	ldr.w	r5, [r1], #4
 801116a:	d402      	bmi.n	8011172 <_printf_i+0x186>
 801116c:	065f      	lsls	r7, r3, #25
 801116e:	bf48      	it	mi
 8011170:	b2ad      	uxthmi	r5, r5
 8011172:	6031      	str	r1, [r6, #0]
 8011174:	07d9      	lsls	r1, r3, #31
 8011176:	bf44      	itt	mi
 8011178:	f043 0320 	orrmi.w	r3, r3, #32
 801117c:	6023      	strmi	r3, [r4, #0]
 801117e:	b11d      	cbz	r5, 8011188 <_printf_i+0x19c>
 8011180:	2310      	movs	r3, #16
 8011182:	e7ad      	b.n	80110e0 <_printf_i+0xf4>
 8011184:	4826      	ldr	r0, [pc, #152]	@ (8011220 <_printf_i+0x234>)
 8011186:	e7e9      	b.n	801115c <_printf_i+0x170>
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	f023 0320 	bic.w	r3, r3, #32
 801118e:	6023      	str	r3, [r4, #0]
 8011190:	e7f6      	b.n	8011180 <_printf_i+0x194>
 8011192:	4616      	mov	r6, r2
 8011194:	e7bd      	b.n	8011112 <_printf_i+0x126>
 8011196:	6833      	ldr	r3, [r6, #0]
 8011198:	6825      	ldr	r5, [r4, #0]
 801119a:	6961      	ldr	r1, [r4, #20]
 801119c:	1d18      	adds	r0, r3, #4
 801119e:	6030      	str	r0, [r6, #0]
 80111a0:	062e      	lsls	r6, r5, #24
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	d501      	bpl.n	80111aa <_printf_i+0x1be>
 80111a6:	6019      	str	r1, [r3, #0]
 80111a8:	e002      	b.n	80111b0 <_printf_i+0x1c4>
 80111aa:	0668      	lsls	r0, r5, #25
 80111ac:	d5fb      	bpl.n	80111a6 <_printf_i+0x1ba>
 80111ae:	8019      	strh	r1, [r3, #0]
 80111b0:	2300      	movs	r3, #0
 80111b2:	6123      	str	r3, [r4, #16]
 80111b4:	4616      	mov	r6, r2
 80111b6:	e7bc      	b.n	8011132 <_printf_i+0x146>
 80111b8:	6833      	ldr	r3, [r6, #0]
 80111ba:	1d1a      	adds	r2, r3, #4
 80111bc:	6032      	str	r2, [r6, #0]
 80111be:	681e      	ldr	r6, [r3, #0]
 80111c0:	6862      	ldr	r2, [r4, #4]
 80111c2:	2100      	movs	r1, #0
 80111c4:	4630      	mov	r0, r6
 80111c6:	f7ef f8ab 	bl	8000320 <memchr>
 80111ca:	b108      	cbz	r0, 80111d0 <_printf_i+0x1e4>
 80111cc:	1b80      	subs	r0, r0, r6
 80111ce:	6060      	str	r0, [r4, #4]
 80111d0:	6863      	ldr	r3, [r4, #4]
 80111d2:	6123      	str	r3, [r4, #16]
 80111d4:	2300      	movs	r3, #0
 80111d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111da:	e7aa      	b.n	8011132 <_printf_i+0x146>
 80111dc:	6923      	ldr	r3, [r4, #16]
 80111de:	4632      	mov	r2, r6
 80111e0:	4649      	mov	r1, r9
 80111e2:	4640      	mov	r0, r8
 80111e4:	47d0      	blx	sl
 80111e6:	3001      	adds	r0, #1
 80111e8:	d0ad      	beq.n	8011146 <_printf_i+0x15a>
 80111ea:	6823      	ldr	r3, [r4, #0]
 80111ec:	079b      	lsls	r3, r3, #30
 80111ee:	d413      	bmi.n	8011218 <_printf_i+0x22c>
 80111f0:	68e0      	ldr	r0, [r4, #12]
 80111f2:	9b03      	ldr	r3, [sp, #12]
 80111f4:	4298      	cmp	r0, r3
 80111f6:	bfb8      	it	lt
 80111f8:	4618      	movlt	r0, r3
 80111fa:	e7a6      	b.n	801114a <_printf_i+0x15e>
 80111fc:	2301      	movs	r3, #1
 80111fe:	4632      	mov	r2, r6
 8011200:	4649      	mov	r1, r9
 8011202:	4640      	mov	r0, r8
 8011204:	47d0      	blx	sl
 8011206:	3001      	adds	r0, #1
 8011208:	d09d      	beq.n	8011146 <_printf_i+0x15a>
 801120a:	3501      	adds	r5, #1
 801120c:	68e3      	ldr	r3, [r4, #12]
 801120e:	9903      	ldr	r1, [sp, #12]
 8011210:	1a5b      	subs	r3, r3, r1
 8011212:	42ab      	cmp	r3, r5
 8011214:	dcf2      	bgt.n	80111fc <_printf_i+0x210>
 8011216:	e7eb      	b.n	80111f0 <_printf_i+0x204>
 8011218:	2500      	movs	r5, #0
 801121a:	f104 0619 	add.w	r6, r4, #25
 801121e:	e7f5      	b.n	801120c <_printf_i+0x220>
 8011220:	08011555 	.word	0x08011555
 8011224:	08011566 	.word	0x08011566

08011228 <memmove>:
 8011228:	4288      	cmp	r0, r1
 801122a:	b510      	push	{r4, lr}
 801122c:	eb01 0402 	add.w	r4, r1, r2
 8011230:	d902      	bls.n	8011238 <memmove+0x10>
 8011232:	4284      	cmp	r4, r0
 8011234:	4623      	mov	r3, r4
 8011236:	d807      	bhi.n	8011248 <memmove+0x20>
 8011238:	1e43      	subs	r3, r0, #1
 801123a:	42a1      	cmp	r1, r4
 801123c:	d008      	beq.n	8011250 <memmove+0x28>
 801123e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011242:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011246:	e7f8      	b.n	801123a <memmove+0x12>
 8011248:	4402      	add	r2, r0
 801124a:	4601      	mov	r1, r0
 801124c:	428a      	cmp	r2, r1
 801124e:	d100      	bne.n	8011252 <memmove+0x2a>
 8011250:	bd10      	pop	{r4, pc}
 8011252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801125a:	e7f7      	b.n	801124c <memmove+0x24>

0801125c <_sbrk_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4d06      	ldr	r5, [pc, #24]	@ (8011278 <_sbrk_r+0x1c>)
 8011260:	2300      	movs	r3, #0
 8011262:	4604      	mov	r4, r0
 8011264:	4608      	mov	r0, r1
 8011266:	602b      	str	r3, [r5, #0]
 8011268:	f7f1 f81e 	bl	80022a8 <_sbrk>
 801126c:	1c43      	adds	r3, r0, #1
 801126e:	d102      	bne.n	8011276 <_sbrk_r+0x1a>
 8011270:	682b      	ldr	r3, [r5, #0]
 8011272:	b103      	cbz	r3, 8011276 <_sbrk_r+0x1a>
 8011274:	6023      	str	r3, [r4, #0]
 8011276:	bd38      	pop	{r3, r4, r5, pc}
 8011278:	2400088c 	.word	0x2400088c

0801127c <_realloc_r>:
 801127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011280:	4607      	mov	r7, r0
 8011282:	4614      	mov	r4, r2
 8011284:	460d      	mov	r5, r1
 8011286:	b921      	cbnz	r1, 8011292 <_realloc_r+0x16>
 8011288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801128c:	4611      	mov	r1, r2
 801128e:	f7ff bc5b 	b.w	8010b48 <_malloc_r>
 8011292:	b92a      	cbnz	r2, 80112a0 <_realloc_r+0x24>
 8011294:	f7ff fbec 	bl	8010a70 <_free_r>
 8011298:	4625      	mov	r5, r4
 801129a:	4628      	mov	r0, r5
 801129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a0:	f000 f81a 	bl	80112d8 <_malloc_usable_size_r>
 80112a4:	4284      	cmp	r4, r0
 80112a6:	4606      	mov	r6, r0
 80112a8:	d802      	bhi.n	80112b0 <_realloc_r+0x34>
 80112aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112ae:	d8f4      	bhi.n	801129a <_realloc_r+0x1e>
 80112b0:	4621      	mov	r1, r4
 80112b2:	4638      	mov	r0, r7
 80112b4:	f7ff fc48 	bl	8010b48 <_malloc_r>
 80112b8:	4680      	mov	r8, r0
 80112ba:	b908      	cbnz	r0, 80112c0 <_realloc_r+0x44>
 80112bc:	4645      	mov	r5, r8
 80112be:	e7ec      	b.n	801129a <_realloc_r+0x1e>
 80112c0:	42b4      	cmp	r4, r6
 80112c2:	4622      	mov	r2, r4
 80112c4:	4629      	mov	r1, r5
 80112c6:	bf28      	it	cs
 80112c8:	4632      	movcs	r2, r6
 80112ca:	f7ff fbc3 	bl	8010a54 <memcpy>
 80112ce:	4629      	mov	r1, r5
 80112d0:	4638      	mov	r0, r7
 80112d2:	f7ff fbcd 	bl	8010a70 <_free_r>
 80112d6:	e7f1      	b.n	80112bc <_realloc_r+0x40>

080112d8 <_malloc_usable_size_r>:
 80112d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112dc:	1f18      	subs	r0, r3, #4
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bfbc      	itt	lt
 80112e2:	580b      	ldrlt	r3, [r1, r0]
 80112e4:	18c0      	addlt	r0, r0, r3
 80112e6:	4770      	bx	lr

080112e8 <_init>:
 80112e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ea:	bf00      	nop
 80112ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ee:	bc08      	pop	{r3}
 80112f0:	469e      	mov	lr, r3
 80112f2:	4770      	bx	lr

080112f4 <_fini>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	bf00      	nop
 80112f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112fa:	bc08      	pop	{r3}
 80112fc:	469e      	mov	lr, r3
 80112fe:	4770      	bx	lr
