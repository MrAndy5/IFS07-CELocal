
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f68  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08012238  08012238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080125bc  080125bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080125c4  080125c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080125c8  080125c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  080125cc  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000998  2400006c  08012638  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a04  08012638  00014a04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025813  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  000398ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  00040a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026794  00000000  00000000  00079d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001792b4  00000000  00000000  000a049a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021974e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  00219794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00221e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012220 	.word	0x08012220

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08012220 	.word	0x08012220

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 fa0a 	bl	8002b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 fa04 	bl	8000b00 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa70 	bl	8000bdc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fed4 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 feb2 	bl	8001468 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa9c 	bl	8000c40 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb36 	bl	8000d78 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb9c 	bl	8000e48 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fc18 	bl	8000f44 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd30 	bl	8001178 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe5a 	bl	80013d0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fde4 	bl	80012e8 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fe0a 	bl	8001338 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fd0a 	bl	800113c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 fe36 	bl	8011398 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc88 	bl	8001040 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	499f      	ldr	r1, [pc, #636]	@ (80009b0 <main+0x2c4>)
 8000734:	489f      	ldr	r0, [pc, #636]	@ (80009b4 <main+0x2c8>)
 8000736:	f003 f9d3 	bl	8003ae0 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	489d      	ldr	r0, [pc, #628]	@ (80009b8 <main+0x2cc>)
 8000742:	f000 ff83 	bl	800164c <print>
#endif
		Error_Handler();
 8000746:	f001 fc21 	bl	8001f8c <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	489c      	ldr	r0, [pc, #624]	@ (80009bc <main+0x2d0>)
 800074c:	f007 fad4 	bl	8007cf8 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	489a      	ldr	r0, [pc, #616]	@ (80009c0 <main+0x2d4>)
 8000758:	f000 ff78 	bl	800164c <print>
#endif
		Error_Handler();
 800075c:	f001 fc16 	bl	8001f8c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	4895      	ldr	r0, [pc, #596]	@ (80009bc <main+0x2d0>)
 8000766:	f007 fcb9 	bl	80080dc <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	4894      	ldr	r0, [pc, #592]	@ (80009c4 <main+0x2d8>)
 8000772:	f000 ff6b 	bl	800164c <print>
#endif
		Error_Handler();
 8000776:	f001 fc09 	bl	8001f8c <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	4893      	ldr	r0, [pc, #588]	@ (80009c8 <main+0x2dc>)
 800077c:	f007 fabc 	bl	8007cf8 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	4891      	ldr	r0, [pc, #580]	@ (80009cc <main+0x2e0>)
 8000788:	f000 ff60 	bl	800164c <print>

#endif
		Error_Handler();
 800078c:	f001 fbfe 	bl	8001f8c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	488c      	ldr	r0, [pc, #560]	@ (80009c8 <main+0x2dc>)
 8000796:	f007 fca1 	bl	80080dc <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	488b      	ldr	r0, [pc, #556]	@ (80009d0 <main+0x2e4>)
 80007a2:	f000 ff53 	bl	800164c <print>
#endif
		Error_Handler();
 80007a6:	f001 fbf1 	bl	8001f8c <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	488a      	ldr	r0, [pc, #552]	@ (80009d4 <main+0x2e8>)
 80007ac:	f007 faa4 	bl	8007cf8 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	4888      	ldr	r0, [pc, #544]	@ (80009d8 <main+0x2ec>)
 80007b8:	f000 ff48 	bl	800164c <print>

#endif
		Error_Handler();
 80007bc:	f001 fbe6 	bl	8001f8c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4883      	ldr	r0, [pc, #524]	@ (80009d4 <main+0x2e8>)
 80007c6:	f007 fc89 	bl	80080dc <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	4882      	ldr	r0, [pc, #520]	@ (80009dc <main+0x2f0>)
 80007d2:	f000 ff3b 	bl	800164c <print>
#endif
		Error_Handler();
 80007d6:	f001 fbd9 	bl	8001f8c <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	4881      	ldr	r0, [pc, #516]	@ (80009e0 <main+0x2f4>)
 80007dc:	f000 ff36 	bl	800164c <print>
#if (CALIBRATION)
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e0:	e009      	b.n	80007f6 <main+0x10a>
	{
		print("Solicitar tensión inversor");
 80007e2:	487f      	ldr	r0, [pc, #508]	@ (80009e0 <main+0x2f4>)
 80007e4:	f000 ff32 	bl	800164c <print>
		if (config_inv_lectura_v == 1)
 80007e8:	4b7e      	ldr	r3, [pc, #504]	@ (80009e4 <main+0x2f8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	487d      	ldr	r0, [pc, #500]	@ (80009e8 <main+0x2fc>)
 80007f2:	f000 ff2b 	bl	800164c <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b7b      	ldr	r3, [pc, #492]	@ (80009e4 <main+0x2f8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f1      	beq.n	80007e2 <main+0xf6>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80007fe:	e055      	b.n	80008ac <main+0x1c0>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000800:	4b7a      	ldr	r3, [pc, #488]	@ (80009ec <main+0x300>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	497a      	ldr	r1, [pc, #488]	@ (80009f0 <main+0x304>)
 8000808:	487a      	ldr	r0, [pc, #488]	@ (80009f4 <main+0x308>)
 800080a:	f011 f869 	bl	80118e0 <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800080e:	4b7a      	ldr	r3, [pc, #488]	@ (80009f8 <main+0x30c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a7a      	ldr	r2, [pc, #488]	@ (80009fc <main+0x310>)
 8000814:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000816:	4b79      	ldr	r3, [pc, #484]	@ (80009fc <main+0x310>)
 8000818:	2202      	movs	r2, #2
 800081a:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800081c:	4b77      	ldr	r3, [pc, #476]	@ (80009fc <main+0x310>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000822:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000824:	4b75      	ldr	r3, [pc, #468]	@ (80009fc <main+0x310>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800082a:	4b74      	ldr	r3, [pc, #464]	@ (80009fc <main+0x310>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000830:	4b6e      	ldr	r3, [pc, #440]	@ (80009ec <main+0x300>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b72      	ldr	r3, [pc, #456]	@ (8000a00 <main+0x314>)
 8000838:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 800083a:	4b6c      	ldr	r3, [pc, #432]	@ (80009ec <main+0x300>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	121b      	asrs	r3, r3, #8
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b6f      	ldr	r3, [pc, #444]	@ (8000a00 <main+0x314>)
 8000844:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000846:	4a6e      	ldr	r2, [pc, #440]	@ (8000a00 <main+0x314>)
 8000848:	496c      	ldr	r1, [pc, #432]	@ (80009fc <main+0x310>)
 800084a:	485f      	ldr	r0, [pc, #380]	@ (80009c8 <main+0x2dc>)
 800084c:	f007 fa7f 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	486c      	ldr	r0, [pc, #432]	@ (8000a04 <main+0x318>)
 8000854:	f008 fb66 	bl	8008f24 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	4b6a      	ldr	r3, [pc, #424]	@ (8000a08 <main+0x31c>)
 800085e:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000860:	4b69      	ldr	r3, [pc, #420]	@ (8000a08 <main+0x31c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d11a      	bne.n	800089e <main+0x1b2>
			TxHeader_Acu.Identifier = 0x600;
 8000868:	4b64      	ldr	r3, [pc, #400]	@ (80009fc <main+0x310>)
 800086a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800086e:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000870:	4b62      	ldr	r3, [pc, #392]	@ (80009fc <main+0x310>)
 8000872:	2202      	movs	r2, #2
 8000874:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000876:	4b61      	ldr	r3, [pc, #388]	@ (80009fc <main+0x310>)
 8000878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800087c:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800087e:	4b5f      	ldr	r3, [pc, #380]	@ (80009fc <main+0x310>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000884:	4b5d      	ldr	r3, [pc, #372]	@ (80009fc <main+0x310>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 800088a:	4b5f      	ldr	r3, [pc, #380]	@ (8000a08 <main+0x31c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b5b      	ldr	r3, [pc, #364]	@ (8000a00 <main+0x314>)
 8000892:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000894:	4a5a      	ldr	r2, [pc, #360]	@ (8000a00 <main+0x314>)
 8000896:	4959      	ldr	r1, [pc, #356]	@ (80009fc <main+0x310>)
 8000898:	484b      	ldr	r0, [pc, #300]	@ (80009c8 <main+0x2dc>)
 800089a:	f007 fa58 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 800089e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a0c <main+0x320>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d102      	bne.n	80008ac <main+0x1c0>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008a6:	485a      	ldr	r0, [pc, #360]	@ (8000a10 <main+0x324>)
 80008a8:	f000 fed0 	bl	800164c <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80008ac:	4b57      	ldr	r3, [pc, #348]	@ (8000a0c <main+0x320>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <main+0x1d2>
 80008b4:	4b4d      	ldr	r3, [pc, #308]	@ (80009ec <main+0x300>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80008bc:	dba0      	blt.n	8000800 <main+0x114>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80008be:	4b4e      	ldr	r3, [pc, #312]	@ (80009f8 <main+0x30c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a4e      	ldr	r2, [pc, #312]	@ (80009fc <main+0x310>)
 80008c4:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 80008c6:	4b4d      	ldr	r3, [pc, #308]	@ (80009fc <main+0x310>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008cc:	4b4b      	ldr	r3, [pc, #300]	@ (80009fc <main+0x310>)
 80008ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d2:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008d4:	4b49      	ldr	r3, [pc, #292]	@ (80009fc <main+0x310>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008da:	4b48      	ldr	r3, [pc, #288]	@ (80009fc <main+0x310>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008e0:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <main+0x300>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b46      	ldr	r3, [pc, #280]	@ (8000a00 <main+0x314>)
 80008e8:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008ea:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <main+0x300>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	121b      	asrs	r3, r3, #8
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b43      	ldr	r3, [pc, #268]	@ (8000a00 <main+0x314>)
 80008f4:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008f6:	4a42      	ldr	r2, [pc, #264]	@ (8000a00 <main+0x314>)
 80008f8:	4940      	ldr	r1, [pc, #256]	@ (80009fc <main+0x310>)
 80008fa:	4833      	ldr	r0, [pc, #204]	@ (80009c8 <main+0x2dc>)
 80008fc:	f007 fa27 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
#if !CALIBRATION
	HAL_TIM_Base_Start_IT(&htim16);
 8000900:	4844      	ldr	r0, [pc, #272]	@ (8000a14 <main+0x328>)
 8000902:	f00d fb83 	bl	800e00c <HAL_TIM_Base_Start_IT>
#endif

#if 1
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000906:	e036      	b.n	8000976 <main+0x28a>
	{

		HAL_ADC_Start(&hadc1);
 8000908:	482a      	ldr	r0, [pc, #168]	@ (80009b4 <main+0x2c8>)
 800090a:	f002 fef7 	bl	80036fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800090e:	f04f 31ff 	mov.w	r1, #4294967295
 8000912:	4828      	ldr	r0, [pc, #160]	@ (80009b4 <main+0x2c8>)
 8000914:	f002 fff0 	bl	80038f8 <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000918:	4826      	ldr	r0, [pc, #152]	@ (80009b4 <main+0x2c8>)
 800091a:	f003 f9bd 	bl	8003c98 <HAL_ADC_GetValue>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <main+0x32c>)
 8000924:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000926:	4823      	ldr	r0, [pc, #140]	@ (80009b4 <main+0x2c8>)
 8000928:	f002 ffb2 	bl	8003890 <HAL_ADC_Stop>

		printValue(s_freno);
 800092c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a18 <main+0x32c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fea9 	bl	8001688 <printValue>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	4832      	ldr	r0, [pc, #200]	@ (8000a04 <main+0x318>)
 800093a:	f008 faf3 	bl	8008f24 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <main+0x330>)
 8000944:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		if (start_button_act == 1)
 8000946:	4b35      	ldr	r3, [pc, #212]	@ (8000a1c <main+0x330>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d113      	bne.n	8000976 <main+0x28a>
		{

#if DEBUG
			printValue(s_freno);
 800094e:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <main+0x32c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fe98 	bl	8001688 <printValue>
#endif
			if (s_freno > 900)
 8000958:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <main+0x32c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000960:	dd06      	ble.n	8000970 <main+0x284>
			{
				boton_arranque = 1;
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <main+0x334>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000968:	482e      	ldr	r0, [pc, #184]	@ (8000a24 <main+0x338>)
 800096a:	f000 fe6f 	bl	800164c <print>
 800096e:	e002      	b.n	8000976 <main+0x28a>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000970:	482d      	ldr	r0, [pc, #180]	@ (8000a28 <main+0x33c>)
 8000972:	f000 fe6b 	bl	800164c <print>
	while (boton_arranque == 0)
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <main+0x334>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0c4      	beq.n	8000908 <main+0x21c>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800097e:	482b      	ldr	r0, [pc, #172]	@ (8000a2c <main+0x340>)
 8000980:	f000 fe64 	bl	800164c <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000984:	4b2a      	ldr	r3, [pc, #168]	@ (8000a30 <main+0x344>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 800098a:	2201      	movs	r2, #1
 800098c:	2102      	movs	r1, #2
 800098e:	4829      	ldr	r0, [pc, #164]	@ (8000a34 <main+0x348>)
 8000990:	f008 fae0 	bl	8008f54 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000998:	f002 f948 	bl	8002c2c <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	4824      	ldr	r0, [pc, #144]	@ (8000a34 <main+0x348>)
 80009a2:	f008 fad7 	bl	8008f54 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 80009a6:	4824      	ldr	r0, [pc, #144]	@ (8000a38 <main+0x34c>)
 80009a8:	f000 fe50 	bl	800164c <print>
#endif

	// Estado STAND BY inversor
	while (state != 3)
 80009ac:	e04d      	b.n	8000a4a <main+0x35e>
 80009ae:	bf00      	nop
 80009b0:	240006fc 	.word	0x240006fc
 80009b4:	24000094 	.word	0x24000094
 80009b8:	08012238 	.word	0x08012238
 80009bc:	240001ec 	.word	0x240001ec
 80009c0:	08012258 	.word	0x08012258
 80009c4:	08012278 	.word	0x08012278
 80009c8:	2400028c 	.word	0x2400028c
 80009cc:	080122a0 	.word	0x080122a0
 80009d0:	080122c0 	.word	0x080122c0
 80009d4:	2400032c 	.word	0x2400032c
 80009d8:	080122e8 	.word	0x080122e8
 80009dc:	08012308 	.word	0x08012308
 80009e0:	08012330 	.word	0x08012330
 80009e4:	2400008c 	.word	0x2400008c
 80009e8:	0801234c 	.word	0x0801234c
 80009ec:	240006f4 	.word	0x240006f4
 80009f0:	08012380 	.word	0x08012380
 80009f4:	24000790 	.word	0x24000790
 80009f8:	24000004 	.word	0x24000004
 80009fc:	24000654 	.word	0x24000654
 8000a00:	240006d8 	.word	0x240006d8
 8000a04:	58021800 	.word	0x58021800
 8000a08:	24000728 	.word	0x24000728
 8000a0c:	24000088 	.word	0x24000088
 8000a10:	08012398 	.word	0x08012398
 8000a14:	24000494 	.word	0x24000494
 8000a18:	2400070c 	.word	0x2400070c
 8000a1c:	240006f0 	.word	0x240006f0
 8000a20:	24000090 	.word	0x24000090
 8000a24:	080123b4 	.word	0x080123b4
 8000a28:	080123d4 	.word	0x080123d4
 8000a2c:	080123f0 	.word	0x080123f0
 8000a30:	2400088c 	.word	0x2400088c
 8000a34:	58020800 	.word	0x58020800
 8000a38:	08012400 	.word	0x08012400
	{
		if (state == 3)
 8000a3c:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <main+0x3f0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d102      	bne.n	8000a4a <main+0x35e>
		{
#if DEBUG
			print("Precarga");
 8000a44:	4826      	ldr	r0, [pc, #152]	@ (8000ae0 <main+0x3f4>)
 8000a46:	f000 fe01 	bl	800164c <print>
	while (state != 3)
 8000a4a:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <main+0x3f0>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d1f4      	bne.n	8000a3c <main+0x350>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 8000a52:	4824      	ldr	r0, [pc, #144]	@ (8000ae4 <main+0x3f8>)
 8000a54:	f000 fdfa 	bl	800164c <print>
#endif

	while (state != 4)
 8000a58:	e037      	b.n	8000aca <main+0x3de>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <main+0x3fc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a23      	ldr	r2, [pc, #140]	@ (8000aec <main+0x400>)
 8000a60:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <main+0x400>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <main+0x400>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <main+0x404>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <main+0x404>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <main+0x404>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a80:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <main+0x404>)
 8000a82:	491a      	ldr	r1, [pc, #104]	@ (8000aec <main+0x400>)
 8000a84:	481b      	ldr	r0, [pc, #108]	@ (8000af4 <main+0x408>)
 8000a86:	f007 f962 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <main+0x400>)
 8000a8c:	f240 3262 	movw	r2, #866	@ 0x362
 8000a90:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <main+0x400>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <main+0x40c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <main+0x404>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <main+0x404>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <main+0x40c>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <main+0x404>)
 8000ab2:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <main+0x404>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <main+0x404>)
 8000abc:	490b      	ldr	r1, [pc, #44]	@ (8000aec <main+0x400>)
 8000abe:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <main+0x408>)
 8000ac0:	f007 f945 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f002 f8b1 	bl	8002c2c <HAL_Delay>
	while (state != 4)
 8000aca:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <main+0x3f0>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d1c3      	bne.n	8000a5a <main+0x36e>

	}

#if DEBUG
	print("state: ready");
 8000ad2:	480a      	ldr	r0, [pc, #40]	@ (8000afc <main+0x410>)
 8000ad4:	f000 fdba 	bl	800164c <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <main+0x3ec>
 8000adc:	2400071a 	.word	0x2400071a
 8000ae0:	08012410 	.word	0x08012410
 8000ae4:	0801241c 	.word	0x0801241c
 8000ae8:	24000000 	.word	0x24000000
 8000aec:	24000608 	.word	0x24000608
 8000af0:	240006c8 	.word	0x240006c8
 8000af4:	240001ec 	.word	0x240001ec
 8000af8:	24000718 	.word	0x24000718
 8000afc:	08012430 	.word	0x08012430

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09c      	sub	sp, #112	@ 0x70
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	224c      	movs	r2, #76	@ 0x4c
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f010 ff08 	bl	8011924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f010 ff02 	bl	8011924 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f008 fa31 	bl	8008f88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd8 <SystemClock_Config+0xd8>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd8 <SystemClock_Config+0xd8>)
 8000b30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <SystemClock_Config+0xd8>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b42:	bf00      	nop
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemClock_Config+0xd8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b50:	d1f8      	bne.n	8000b44 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b68:	232c      	movs	r3, #44	@ 0x2c
 8000b6a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b78:	230c      	movs	r3, #12
 8000b7a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 fa37 	bl	8008ffc <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b94:	f001 f9fa 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	233f      	movs	r3, #63	@ 0x3f
 8000b9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ba8:	2340      	movs	r3, #64	@ 0x40
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bac:	2340      	movs	r3, #64	@ 0x40
 8000bae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bb6:	2340      	movs	r3, #64	@ 0x40
 8000bb8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fdf6 	bl	80097b0 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bca:	f001 f9df 	bl	8001f8c <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3770      	adds	r7, #112	@ 0x70
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58024800 	.word	0x58024800

08000bdc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0ae      	sub	sp, #184	@ 0xb8
 8000be0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	22b8      	movs	r2, #184	@ 0xb8
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f010 fe9b 	bl	8011924 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000bee:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bfe:	2310      	movs	r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1e:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f009 f94d 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000c34:	f001 f9aa 	bl	8001f8c <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	37b8      	adds	r7, #184	@ 0xb8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2224      	movs	r2, #36	@ 0x24
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f010 fe63 	bl	8011924 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c60:	4a41      	ldr	r2, [pc, #260]	@ (8000d68 <MX_ADC1_Init+0x128>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c64:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c66:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c6e:	2208      	movs	r2, #8
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c72:	4b3c      	ldr	r3, [pc, #240]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c78:	4b3a      	ldr	r3, [pc, #232]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c7e:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c84:	4b37      	ldr	r3, [pc, #220]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c8a:	4b36      	ldr	r3, [pc, #216]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c90:	4b34      	ldr	r3, [pc, #208]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c98:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000caa:	4b2e      	ldr	r3, [pc, #184]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	4827      	ldr	r0, [pc, #156]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000cc6:	f002 fb11 	bl	80032ec <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f001 f95c 	bl	8001f8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4821      	ldr	r0, [pc, #132]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000ce0:	f004 faf0 	bl	80052c4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000cea:	f001 f94f 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cee:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_ADC1_Init+0x12c>)
 8000cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cfa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d00:	2304      	movs	r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4814      	ldr	r0, [pc, #80]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000d14:	f003 fa26 	bl	8004164 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d1e:	f001 f935 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <MX_ADC1_Init+0x130>)
 8000d24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d26:	230c      	movs	r3, #12
 8000d28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000d30:	f003 fa18 	bl	8004164 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d3a:	f001 f927 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <MX_ADC1_Init+0x134>)
 8000d40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d42:	2312      	movs	r3, #18
 8000d44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MX_ADC1_Init+0x124>)
 8000d4c:	f003 fa0a 	bl	8004164 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d56:	f001 f919 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	@ 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000094 	.word	0x24000094
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	10c00010 	.word	0x10c00010
 8000d70:	14f00020 	.word	0x14f00020
 8000d74:	08600004 	.word	0x08600004

08000d78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2224      	movs	r2, #36	@ 0x24
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f010 fdcd 	bl	8011924 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e40 <MX_ADC2_Init+0xc8>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d92:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d98:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9e:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da4:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000daa:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	4812      	ldr	r0, [pc, #72]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000df2:	f002 fa7b 	bl	80032ec <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dfc:	f001 f8c6 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_ADC2_Init+0xcc>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e10:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e12:	2304      	movs	r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_ADC2_Init+0xc4>)
 8000e26:	f003 f99d 	bl	8004164 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000e30:	f001 f8ac 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	@ 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	24000104 	.word	0x24000104
 8000e40:	40022100 	.word	0x40022100
 8000e44:	25b00200 	.word	0x25b00200

08000e48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e50:	4a3b      	ldr	r2, [pc, #236]	@ (8000f40 <MX_FDCAN1_Init+0xf8>)
 8000e52:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e54:	4b39      	ldr	r3, [pc, #228]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e5a:	4b38      	ldr	r3, [pc, #224]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e66:	4b35      	ldr	r3, [pc, #212]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e6c:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e72:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e74:	2206      	movs	r2, #6
 8000e76:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e78:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e86:	2205      	movs	r2, #5
 8000e88:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e96:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000eae:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ec8:	2204      	movs	r2, #4
 8000eca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ede:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ef6:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000ef8:	f006 fcaa 	bl	8007850 <HAL_FDCAN_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000f02:	f001 f843 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <MX_FDCAN1_Init+0xf4>)
 8000f24:	f006 fe72 	bl	8007c0c <HAL_FDCAN_ConfigFilter>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000f2e:	f001 f82d 	bl	8001f8c <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	240001ec 	.word	0x240001ec
 8000f40:	4000a000 	.word	0x4000a000

08000f44 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800103c <MX_FDCAN2_Init+0xf8>)
 8000f4e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f50:	4b39      	ldr	r3, [pc, #228]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f56:	4b38      	ldr	r3, [pc, #224]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f5c:	4b36      	ldr	r3, [pc, #216]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f62:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f68:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f6e:	4b32      	ldr	r3, [pc, #200]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f70:	2206      	movs	r2, #6
 8000f72:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f74:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f82:	2205      	movs	r2, #5
 8000f84:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f86:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f92:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000faa:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fb8:	2204      	movs	r2, #4
 8000fba:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ff2:	4811      	ldr	r0, [pc, #68]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8000ff4:	f006 fc2c 	bl	8007850 <HAL_FDCAN_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000ffe:	f000 ffc5 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001002:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001006:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800100c:	2302      	movs	r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001010:	2301      	movs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_FDCAN2_Init+0xf4>)
 8001022:	f006 fdf3 	bl	8007c0c <HAL_FDCAN_ConfigFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 800102c:	f000 ffae 	bl	8001f8c <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2400028c 	.word	0x2400028c
 800103c:	4000a400 	.word	0x4000a400

08001040 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001046:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001048:	4a3b      	ldr	r2, [pc, #236]	@ (8001138 <MX_FDCAN3_Init+0xf8>)
 800104a:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800104c:	4b39      	ldr	r3, [pc, #228]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001052:	4b38      	ldr	r3, [pc, #224]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800105a:	2200      	movs	r2, #0
 800105c:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800105e:	4b35      	ldr	r3, [pc, #212]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001060:	2200      	movs	r2, #0
 8001062:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001066:	2200      	movs	r2, #0
 8001068:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 800106a:	4b32      	ldr	r3, [pc, #200]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800106c:	2206      	movs	r2, #6
 800106e:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001070:	4b30      	ldr	r3, [pc, #192]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001072:	2201      	movs	r2, #1
 8001074:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001076:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001078:	2202      	movs	r2, #2
 800107a:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800107e:	2205      	movs	r2, #5
 8001080:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001082:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001084:	2201      	movs	r2, #1
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800108a:	2201      	movs	r2, #1
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800108e:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001090:	2201      	movs	r2, #1
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 8001096:	2201      	movs	r2, #1
 8001098:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800109c:	2200      	movs	r2, #0
 800109e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010ae:	2210      	movs	r2, #16
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010ba:	2210      	movs	r2, #16
 80010bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010de:	2210      	movs	r2, #16
 80010e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80010ee:	4811      	ldr	r0, [pc, #68]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 80010f0:	f006 fbae 	bl	8007850 <HAL_FDCAN_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80010fa:	f000 ff47 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80010fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001102:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001108:	2302      	movs	r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800110c:	2301      	movs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_FDCAN3_Init+0xf4>)
 800111e:	f006 fd75 	bl	8007c0c <HAL_FDCAN_ConfigFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8001128:	f000 ff30 	bl	8001f8c <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2400032c 	.word	0x2400032c
 8001138:	4000d400 	.word	0x4000d400

0800113c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_SDMMC1_SD_Init+0x34>)
 8001142:	4a0c      	ldr	r2, [pc, #48]	@ (8001174 <MX_SDMMC1_SD_Init+0x38>)
 8001144:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_SDMMC1_SD_Init+0x34>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_SDMMC1_SD_Init+0x34>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_SDMMC1_SD_Init+0x34>)
 8001154:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001158:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <MX_SDMMC1_SD_Init+0x34>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <MX_SDMMC1_SD_Init+0x34>)
 8001162:	2202      	movs	r2, #2
 8001164:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	240003cc 	.word	0x240003cc
 8001174:	52007000 	.word	0x52007000

08001178 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09c      	sub	sp, #112	@ 0x70
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	615a      	str	r2, [r3, #20]
 80011aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2234      	movs	r2, #52	@ 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f010 fbb6 	bl	8011924 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b8:	4b49      	ldr	r3, [pc, #292]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011ba:	4a4a      	ldr	r2, [pc, #296]	@ (80012e4 <MX_TIM1_Init+0x16c>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011be:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b46      	ldr	r3, [pc, #280]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011ca:	4b45      	ldr	r3, [pc, #276]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b43      	ldr	r3, [pc, #268]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d8:	4b41      	ldr	r3, [pc, #260]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011de:	4b40      	ldr	r3, [pc, #256]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e4:	483e      	ldr	r0, [pc, #248]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80011e6:	f00c feb9 	bl	800df5c <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f000 fecc 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011fe:	4619      	mov	r1, r3
 8001200:	4837      	ldr	r0, [pc, #220]	@ (80012e0 <MX_TIM1_Init+0x168>)
 8001202:	f00d fa05 	bl	800e610 <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800120c:	f000 febe 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001210:	4833      	ldr	r0, [pc, #204]	@ (80012e0 <MX_TIM1_Init+0x168>)
 8001212:	f00c ff81 	bl	800e118 <HAL_TIM_PWM_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800121c:	f000 feb6 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	482b      	ldr	r0, [pc, #172]	@ (80012e0 <MX_TIM1_Init+0x168>)
 8001234:	f00d ff32 	bl	800f09c <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800123e:	f000 fea5 	bl	8001f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001242:	2360      	movs	r3, #96	@ 0x60
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124a:	2300      	movs	r3, #0
 800124c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001262:	2200      	movs	r2, #0
 8001264:	4619      	mov	r1, r3
 8001266:	481e      	ldr	r0, [pc, #120]	@ (80012e0 <MX_TIM1_Init+0x168>)
 8001268:	f00d f8be 	bl	800e3e8 <HAL_TIM_PWM_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001272:	f000 fe8b 	bl	8001f8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001276:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800127a:	2204      	movs	r2, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4818      	ldr	r0, [pc, #96]	@ (80012e0 <MX_TIM1_Init+0x168>)
 8001280:	f00d f8b2 	bl	800e3e8 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800128a:	f000 fe7f 	bl	8001f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80012c4:	f00d ff86 	bl	800f1d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012ce:	f000 fe5d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012d2:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <MX_TIM1_Init+0x168>)
 80012d4:	f001 f9d2 	bl	800267c <HAL_TIM_MspPostInit>

}
 80012d8:	bf00      	nop
 80012da:	3770      	adds	r7, #112	@ 0x70
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	24000448 	.word	0x24000448
 80012e4:	40010000 	.word	0x40010000

080012e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <MX_TIM16_Init+0x48>)
 80012ee:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <MX_TIM16_Init+0x4c>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <MX_TIM16_Init+0x48>)
 80012f4:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80012f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <MX_TIM16_Init+0x48>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <MX_TIM16_Init+0x48>)
 8001302:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001306:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <MX_TIM16_Init+0x48>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <MX_TIM16_Init+0x48>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <MX_TIM16_Init+0x48>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_TIM16_Init+0x48>)
 800131c:	f00c fe1e 	bl	800df5c <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001326:	f000 fe31 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	24000494 	.word	0x24000494
 8001334:	40014400 	.word	0x40014400

08001338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 800133e:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <MX_USART1_UART_Init+0x94>)
 8001340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001342:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	4b1c      	ldr	r3, [pc, #112]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137a:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001380:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001382:	f00d ffd1 	bl	800f328 <HAL_UART_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800138c:	f000 fdfe 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001390:	2100      	movs	r1, #0
 8001392:	480d      	ldr	r0, [pc, #52]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 8001394:	f00f f96b 	bl	801066e <HAL_UARTEx_SetTxFifoThreshold>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800139e:	f000 fdf5 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 80013a6:	f00f f9a0 	bl	80106ea <HAL_UARTEx_SetRxFifoThreshold>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b0:	f000 fdec 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <MX_USART1_UART_Init+0x90>)
 80013b6:	f00f f921 	bl	80105fc <HAL_UARTEx_DisableFifoMode>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f000 fde4 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	240004e0 	.word	0x240004e0
 80013cc:	40011000 	.word	0x40011000

080013d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d4:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013d6:	4a23      	ldr	r2, [pc, #140]	@ (8001464 <MX_USART2_UART_Init+0x94>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001412:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001418:	4811      	ldr	r0, [pc, #68]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 800141a:	f00d ff85 	bl	800f328 <HAL_UART_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001424:	f000 fdb2 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 800142c:	f00f f91f 	bl	801066e <HAL_UARTEx_SetTxFifoThreshold>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001436:	f000 fda9 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143a:	2100      	movs	r1, #0
 800143c:	4808      	ldr	r0, [pc, #32]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 800143e:	f00f f954 	bl	80106ea <HAL_UARTEx_SetRxFifoThreshold>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001448:	f000 fda0 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	@ (8001460 <MX_USART2_UART_Init+0x90>)
 800144e:	f00f f8d5 	bl	80105fc <HAL_UARTEx_DisableFifoMode>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001458:	f000 fd98 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	24000574 	.word	0x24000574
 8001464:	40004400 	.word	0x40004400

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <MX_DMA_Init+0x3c>)
 8001470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001474:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <MX_DMA_Init+0x3c>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_DMA_Init+0x3c>)
 8001480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	200b      	movs	r0, #11
 8001492:	f004 f8d4 	bl	800563e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001496:	200b      	movs	r0, #11
 8001498:	f004 f8eb 	bl	8005672 <HAL_NVIC_EnableIRQ>

}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58024400 	.word	0x58024400

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	@ 0x38
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c4:	4a5c      	ldr	r2, [pc, #368]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	4b56      	ldr	r3, [pc, #344]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e2:	4a55      	ldr	r2, [pc, #340]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ec:	4b52      	ldr	r3, [pc, #328]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001638 <MX_GPIO_Init+0x190>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001500:	4a4d      	ldr	r2, [pc, #308]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150a:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <MX_GPIO_Init+0x190>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001518:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <MX_GPIO_Init+0x190>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151e:	4a46      	ldr	r2, [pc, #280]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001528:	4b43      	ldr	r3, [pc, #268]	@ (8001638 <MX_GPIO_Init+0x190>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001536:	4b40      	ldr	r3, [pc, #256]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153c:	4a3e      	ldr	r2, [pc, #248]	@ (8001638 <MX_GPIO_Init+0x190>)
 800153e:	f043 0320 	orr.w	r3, r3, #32
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155a:	4a37      	ldr	r2, [pc, #220]	@ (8001638 <MX_GPIO_Init+0x190>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001564:	4b34      	ldr	r3, [pc, #208]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001578:	4a2f      	ldr	r2, [pc, #188]	@ (8001638 <MX_GPIO_Init+0x190>)
 800157a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001582:	4b2d      	ldr	r3, [pc, #180]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001590:	4b29      	ldr	r3, [pc, #164]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001596:	4a28      	ldr	r2, [pc, #160]	@ (8001638 <MX_GPIO_Init+0x190>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a0:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <MX_GPIO_Init+0x190>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2103      	movs	r1, #3
 80015b2:	4822      	ldr	r0, [pc, #136]	@ (800163c <MX_GPIO_Init+0x194>)
 80015b4:	f007 fcce 	bl	8008f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015be:	4820      	ldr	r0, [pc, #128]	@ (8001640 <MX_GPIO_Init+0x198>)
 80015c0:	f007 fcc8 	bl	8008f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 80015c4:	2303      	movs	r3, #3
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4818      	ldr	r0, [pc, #96]	@ (800163c <MX_GPIO_Init+0x194>)
 80015dc:	f007 fafa 	bl	8008bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80015e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4813      	ldr	r0, [pc, #76]	@ (8001644 <MX_GPIO_Init+0x19c>)
 80015f6:	f007 faed 	bl	8008bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80015fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	@ (8001640 <MX_GPIO_Init+0x198>)
 8001614:	f007 fade 	bl	8008bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001618:	2380      	movs	r3, #128	@ 0x80
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001620:	2302      	movs	r3, #2
 8001622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4807      	ldr	r0, [pc, #28]	@ (8001648 <MX_GPIO_Init+0x1a0>)
 800162c:	f007 fad2 	bl	8008bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	@ 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58024400 	.word	0x58024400
 800163c:	58020800 	.word	0x58020800
 8001640:	58021000 	.word	0x58021000
 8001644:	58021400 	.word	0x58021400
 8001648:	58021800 	.word	0x58021800

0800164c <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4909      	ldr	r1, [pc, #36]	@ (800167c <print+0x30>)
 8001658:	4809      	ldr	r0, [pc, #36]	@ (8001680 <print+0x34>)
 800165a:	f010 f941 	bl	80118e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800165e:	4808      	ldr	r0, [pc, #32]	@ (8001680 <print+0x34>)
 8001660:	f7fe fe56 	bl	8000310 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	b29a      	uxth	r2, r3
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	4904      	ldr	r1, [pc, #16]	@ (8001680 <print+0x34>)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <print+0x38>)
 8001670:	f00d feaa 	bl	800f3c8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	08012440 	.word	0x08012440
 8001680:	2400072c 	.word	0x2400072c
 8001684:	24000574 	.word	0x24000574

08001688 <printValue>:

void printValue(int value)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4909      	ldr	r1, [pc, #36]	@ (80016b8 <printValue+0x30>)
 8001694:	4809      	ldr	r0, [pc, #36]	@ (80016bc <printValue+0x34>)
 8001696:	f010 f923 	bl	80118e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800169a:	4808      	ldr	r0, [pc, #32]	@ (80016bc <printValue+0x34>)
 800169c:	f7fe fe38 	bl	8000310 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	4904      	ldr	r1, [pc, #16]	@ (80016bc <printValue+0x34>)
 80016aa:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <printValue+0x38>)
 80016ac:	f00d fe8c 	bl	800f3c8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	08012448 	.word	0x08012448
 80016bc:	2400072c 	.word	0x2400072c
 80016c0:	24000574 	.word	0x24000574

080016c4 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80cc 	beq.w	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a67      	ldr	r2, [pc, #412]	@ (8001890 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d164      	bne.n	80017c2 <HAL_FDCAN_RxFifo0Callback+0xea>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80016f8:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016fa:	4a67      	ldr	r2, [pc, #412]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016fc:	2140      	movs	r1, #64	@ 0x40
 80016fe:	4867      	ldr	r0, [pc, #412]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001700:	f006 fb80 	bl	8007e04 <HAL_FDCAN_GetRxMessage>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 80bd 	bne.w	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 800170c:	4b62      	ldr	r3, [pc, #392]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f240 4266 	movw	r2, #1126	@ 0x466
 8001714:	4293      	cmp	r3, r2
 8001716:	d03c      	beq.n	8001792 <HAL_FDCAN_RxFifo0Callback+0xba>
 8001718:	f240 4266 	movw	r2, #1126	@ 0x466
 800171c:	4293      	cmp	r3, r2
 800171e:	f200 80b2 	bhi.w	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
 8001722:	f240 4261 	movw	r2, #1121	@ 0x461
 8001726:	4293      	cmp	r3, r2
 8001728:	d004      	beq.n	8001734 <HAL_FDCAN_RxFifo0Callback+0x5c>
 800172a:	f240 4263 	movw	r2, #1123	@ 0x463
 800172e:	4293      	cmp	r3, r2
 8001730:	d015      	beq.n	800175e <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 8001732:	e0a8      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					state = RxData_Inv[4] & 0xF;
 8001734:	4b57      	ldr	r3, [pc, #348]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001736:	791b      	ldrb	r3, [r3, #4]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b58      	ldr	r3, [pc, #352]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001740:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 8001742:	4b57      	ldr	r3, [pc, #348]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b0a      	cmp	r3, #10
 8001748:	d004      	beq.n	8001754 <HAL_FDCAN_RxFifo0Callback+0x7c>
 800174a:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b0b      	cmp	r3, #11
 8001750:	f040 8092 	bne.w	8001878 <HAL_FDCAN_RxFifo0Callback+0x1a0>
						error = RxData_Inv[2];
 8001754:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001756:	789a      	ldrb	r2, [r3, #2]
 8001758:	4b52      	ldr	r3, [pc, #328]	@ (80018a4 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800175a:	701a      	strb	r2, [r3, #0]
					break;
 800175c:	e08c      	b.n	8001878 <HAL_FDCAN_RxFifo0Callback+0x1a0>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 800175e:	4b4d      	ldr	r3, [pc, #308]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001760:	79db      	ldrb	r3, [r3, #7]
 8001762:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001766:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001768:	7a1b      	ldrb	r3, [r3, #8]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	4313      	orrs	r3, r2
 800176e:	4a49      	ldr	r2, [pc, #292]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001770:	7952      	ldrb	r2, [r2, #5]
 8001772:	4313      	orrs	r3, r2
 8001774:	4a4c      	ldr	r2, [pc, #304]	@ (80018a8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001776:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001778:	4b4b      	ldr	r3, [pc, #300]	@ (80018a8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d07b      	beq.n	800187c <HAL_FDCAN_RxFifo0Callback+0x1a4>
						e_machine_rpm |= 0xFFF0000;
 8001784:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 800178a:	4313      	orrs	r3, r2
 800178c:	4a46      	ldr	r2, [pc, #280]	@ (80018a8 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800178e:	6013      	str	r3, [r2, #0]
					break;
 8001790:	e074      	b.n	800187c <HAL_FDCAN_RxFifo0Callback+0x1a4>
					if (RxHeader_Inv.DataLength == 6)
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b06      	cmp	r3, #6
 8001798:	d172      	bne.n	8001880 <HAL_FDCAN_RxFifo0Callback+0x1a8>
						if (config_inv_lectura_v == 0)
 800179a:	4b45      	ldr	r3, [pc, #276]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_FDCAN_RxFifo0Callback+0xd0>
							config_inv_lectura_v = 1;
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
						if (config_inv_lectura_v == 1)
 80017a8:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d167      	bne.n	8001880 <HAL_FDCAN_RxFifo0Callback+0x1a8>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80017b2:	78db      	ldrb	r3, [r3, #3]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	4a37      	ldr	r2, [pc, #220]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80017b8:	7892      	ldrb	r2, [r2, #2]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	4a3d      	ldr	r2, [pc, #244]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80017be:	6013      	str	r3, [r2, #0]
					break;
 80017c0:	e05e      	b.n	8001880 <HAL_FDCAN_RxFifo0Callback+0x1a8>
		else if (hfdcan->Instance == FDCAN2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a3c      	ldr	r2, [pc, #240]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d126      	bne.n	800181a <HAL_FDCAN_RxFifo0Callback+0x142>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80017cc:	4b3b      	ldr	r3, [pc, #236]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017ce:	4a3c      	ldr	r2, [pc, #240]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017d0:	2140      	movs	r1, #64	@ 0x40
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f006 fb16 	bl	8007e04 <HAL_FDCAN_GetRxMessage>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d153      	bne.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Acu.Identifier)
 80017de:	4b38      	ldr	r3, [pc, #224]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d003      	beq.n	80017ee <HAL_FDCAN_RxFifo0Callback+0x116>
 80017e6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017ea:	d008      	beq.n	80017fe <HAL_FDCAN_RxFifo0Callback+0x126>
}
 80017ec:	e04b      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					if (RxData_Acu[0] == 0)
 80017ee:	4b33      	ldr	r3, [pc, #204]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d146      	bne.n	8001884 <HAL_FDCAN_RxFifo0Callback+0x1ac>
						precarga_inv = 1;
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
					break;
 80017fc:	e042      	b.n	8001884 <HAL_FDCAN_RxFifo0Callback+0x1ac>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 80017fe:	4b2f      	ldr	r3, [pc, #188]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4a2d      	ldr	r2, [pc, #180]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001806:	7852      	ldrb	r2, [r2, #1]
 8001808:	4313      	orrs	r3, r2
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
					break;
 8001818:	e035      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2b      	ldr	r2, [pc, #172]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d130      	bne.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001826:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001828:	2140      	movs	r1, #64	@ 0x40
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f006 faea 	bl	8007e04 <HAL_FDCAN_GetRxMessage>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d127      	bne.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Dash.Identifier)
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f240 1233 	movw	r2, #307	@ 0x133
 800183e:	4293      	cmp	r3, r2
 8001840:	d121      	bne.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b21b      	sxth	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_FDCAN_RxFifo0Callback+0x200>)
 800185a:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800185e:	789b      	ldrb	r3, [r3, #2]
 8001860:	b21b      	sxth	r3, r3
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21b      	sxth	r3, r3
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001874:	801a      	strh	r2, [r3, #0]
}
 8001876:	e006      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001878:	bf00      	nop
 800187a:	e004      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 800187c:	bf00      	nop
 800187e:	e002      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 8001884:	bf00      	nop
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	4000a000 	.word	0x4000a000
 8001894:	240006d0 	.word	0x240006d0
 8001898:	2400062c 	.word	0x2400062c
 800189c:	240001ec 	.word	0x240001ec
 80018a0:	2400071a 	.word	0x2400071a
 80018a4:	2400088a 	.word	0x2400088a
 80018a8:	240006f8 	.word	0x240006f8
 80018ac:	0fff0000 	.word	0x0fff0000
 80018b0:	2400008c 	.word	0x2400008c
 80018b4:	240006f4 	.word	0x240006f4
 80018b8:	4000a400 	.word	0x4000a400
 80018bc:	240006e0 	.word	0x240006e0
 80018c0:	24000678 	.word	0x24000678
 80018c4:	24000088 	.word	0x24000088
 80018c8:	24000008 	.word	0x24000008
 80018cc:	4000d400 	.word	0x4000d400
 80018d0:	240006e8 	.word	0x240006e8
 80018d4:	240006a0 	.word	0x240006a0
 80018d8:	24000702 	.word	0x24000702
 80018dc:	24000704 	.word	0x24000704

080018e0 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a03      	ldr	r2, [pc, #12]	@ (80018fc <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 80018ee:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	2400028c 	.word	0x2400028c

08001900 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 8001906:	4b9c      	ldr	r3, [pc, #624]	@ (8001b78 <setTorque+0x278>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 800190e:	ee07 3a90 	vmov	s15, r3
 8001912:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001916:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 800191a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800191e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b94      	ldr	r3, [pc, #592]	@ (8001b7c <setTorque+0x27c>)
 800192a:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 800192c:	4b93      	ldr	r3, [pc, #588]	@ (8001b7c <setTorque+0x27c>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	2b64      	cmp	r3, #100	@ 0x64
 8001932:	d902      	bls.n	800193a <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 8001934:	4b91      	ldr	r3, [pc, #580]	@ (8001b7c <setTorque+0x27c>)
 8001936:	2264      	movs	r2, #100	@ 0x64
 8001938:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 800193a:	4b91      	ldr	r3, [pc, #580]	@ (8001b80 <setTorque+0x280>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800194a:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001b50 <setTorque+0x250>
 800194e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001952:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001956:	ee17 3a90 	vmov	r3, s15
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b89      	ldr	r3, [pc, #548]	@ (8001b84 <setTorque+0x284>)
 800195e:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001960:	4b88      	ldr	r3, [pc, #544]	@ (8001b84 <setTorque+0x284>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2b64      	cmp	r3, #100	@ 0x64
 8001966:	d902      	bls.n	800196e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001968:	4b86      	ldr	r3, [pc, #536]	@ (8001b84 <setTorque+0x284>)
 800196a:	2264      	movs	r2, #100	@ 0x64
 800196c:	801a      	strh	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 800196e:	4886      	ldr	r0, [pc, #536]	@ (8001b88 <setTorque+0x288>)
 8001970:	f7ff fe6c 	bl	800164c <print>
	printValue(s1_aceleracion_aux);
 8001974:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <setTorque+0x27c>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe85 	bl	8001688 <printValue>
	print("");
 800197e:	4883      	ldr	r0, [pc, #524]	@ (8001b8c <setTorque+0x28c>)
 8001980:	f7ff fe64 	bl	800164c <print>
	print("Sensor % 2: ");
 8001984:	4882      	ldr	r0, [pc, #520]	@ (8001b90 <setTorque+0x290>)
 8001986:	f7ff fe61 	bl	800164c <print>
	printValue(s2_aceleracion_aux);
 800198a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b84 <setTorque+0x284>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe7a 	bl	8001688 <printValue>
	print("");
 8001994:	487d      	ldr	r0, [pc, #500]	@ (8001b8c <setTorque+0x28c>)
 8001996:	f7ff fe59 	bl	800164c <print>
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 800199a:	4b78      	ldr	r3, [pc, #480]	@ (8001b7c <setTorque+0x27c>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d911      	bls.n	80019c6 <setTorque+0xc6>
 80019a2:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <setTorque+0x284>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d90d      	bls.n	80019c6 <setTorque+0xc6>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80019aa:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <setTorque+0x27c>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b74      	ldr	r3, [pc, #464]	@ (8001b84 <setTorque+0x284>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da00      	bge.n	80019bc <setTorque+0xbc>
 80019ba:	3301      	adds	r3, #1
 80019bc:	105b      	asrs	r3, r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b74      	ldr	r3, [pc, #464]	@ (8001b94 <setTorque+0x294>)
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	e002      	b.n	80019cc <setTorque+0xcc>
	}
	else
	{
		torque_total = 0;
 80019c6:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <setTorque+0x294>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 80019cc:	4b71      	ldr	r3, [pc, #452]	@ (8001b94 <setTorque+0x294>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d803      	bhi.n	80019dc <setTorque+0xdc>
	{
		torque_total = 0;
 80019d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b94 <setTorque+0x294>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	e006      	b.n	80019ea <setTorque+0xea>
	}
	else if (torque_total > 90)
 80019dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001b94 <setTorque+0x294>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	2b5a      	cmp	r3, #90	@ 0x5a
 80019e2:	d902      	bls.n	80019ea <setTorque+0xea>
	{
		torque_total = 100;
 80019e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b94 <setTorque+0x294>)
 80019e6:	2264      	movs	r2, #100	@ 0x64
 80019e8:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80019ea:	4b6b      	ldr	r3, [pc, #428]	@ (8001b98 <setTorque+0x298>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019f2:	4293      	cmp	r3, r2
 80019f4:	dd0a      	ble.n	8001a0c <setTorque+0x10c>
 80019f6:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <setTorque+0x294>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	2b19      	cmp	r3, #25
 80019fc:	d906      	bls.n	8001a0c <setTorque+0x10c>
	{
		print("EV_2_3");
 80019fe:	4867      	ldr	r0, [pc, #412]	@ (8001b9c <setTorque+0x29c>)
 8001a00:	f7ff fe24 	bl	800164c <print>
		flag_EV_2_3 = 1;
 8001a04:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <setTorque+0x2a0>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e00c      	b.n	8001a26 <setTorque+0x126>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001a0c:	4b62      	ldr	r3, [pc, #392]	@ (8001b98 <setTorque+0x298>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a14:	4293      	cmp	r3, r2
 8001a16:	dc06      	bgt.n	8001a26 <setTorque+0x126>
 8001a18:	4b5e      	ldr	r3, [pc, #376]	@ (8001b94 <setTorque+0x294>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d802      	bhi.n	8001a26 <setTorque+0x126>
	{
		flag_EV_2_3 = 0;
 8001a20:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba0 <setTorque+0x2a0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001a26:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <setTorque+0x27c>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b55      	ldr	r3, [pc, #340]	@ (8001b84 <setTorque+0x284>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bfb8      	it	lt
 8001a36:	425b      	neglt	r3, r3
 8001a38:	2b0a      	cmp	r3, #10
 8001a3a:	dd06      	ble.n	8001a4a <setTorque+0x14a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001a3c:	4859      	ldr	r0, [pc, #356]	@ (8001ba4 <setTorque+0x2a4>)
 8001a3e:	f7ff fe05 	bl	800164c <print>
		flag_T11_8_9 = 1;
 8001a42:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <setTorque+0x2a8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e007      	b.n	8001a5a <setTorque+0x15a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001a4a:	f001 f8e3 	bl	8002c14 <HAL_GetTick>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a56      	ldr	r2, [pc, #344]	@ (8001bac <setTorque+0x2ac>)
 8001a52:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001a54:	4b54      	ldr	r3, [pc, #336]	@ (8001ba8 <setTorque+0x2a8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001a5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ba0 <setTorque+0x2a0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <setTorque+0x16a>
 8001a62:	4b51      	ldr	r3, [pc, #324]	@ (8001ba8 <setTorque+0x2a8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <setTorque+0x170>
	{
		torque_total = 0;
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b94 <setTorque+0x294>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a70:	4b4f      	ldr	r3, [pc, #316]	@ (8001bb0 <setTorque+0x2b0>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001bb4 <setTorque+0x2b4>
 8001a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	d53a      	bpl.n	8001afa <setTorque+0x1fa>
	{
		if (v_celda_min > 2800)
 8001a84:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <setTorque+0x2b0>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001bb8 <setTorque+0x2b8>
 8001a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	dd1f      	ble.n	8001ad8 <setTorque+0x1d8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a98:	4b3e      	ldr	r3, [pc, #248]	@ (8001b94 <setTorque+0x294>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aa4:	4b42      	ldr	r3, [pc, #264]	@ (8001bb0 <setTorque+0x2b0>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aae:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b58 <setTorque+0x258>
 8001ab2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ab6:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b60 <setTorque+0x260>
 8001aba:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001abe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ac2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b68 <setTorque+0x268>
 8001ac6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ace:	ee17 2a90 	vmov	r2, s15
 8001ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bbc <setTorque+0x2bc>)
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e015      	b.n	8001b04 <setTorque+0x204>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <setTorque+0x294>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ae4:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001b70 <setTorque+0x270>
 8001ae8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001af0:	ee17 2a90 	vmov	r2, s15
 8001af4:	4b31      	ldr	r3, [pc, #196]	@ (8001bbc <setTorque+0x2bc>)
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e004      	b.n	8001b04 <setTorque+0x204>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001afa:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <setTorque+0x294>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <setTorque+0x2bc>)
 8001b02:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001b04:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <setTorque+0x294>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d912      	bls.n	8001b32 <setTorque+0x232>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001b0c:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <setTorque+0x294>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <setTorque+0x2c0>)
 8001b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b20:	441a      	add	r2, r3
 8001b22:	1192      	asrs	r2, r2, #6
 8001b24:	17db      	asrs	r3, r3, #31
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b1a      	subs	r3, #26
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <setTorque+0x294>)
 8001b30:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001b32:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <setTorque+0x294>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001b40:	88bb      	ldrh	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w
 8001b50:	33333334 	.word	0x33333334
 8001b54:	401a3333 	.word	0x401a3333
 8001b58:	a1cac083 	.word	0xa1cac083
 8001b5c:	3ff5b645 	.word	0x3ff5b645
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40ad4c00 	.word	0x40ad4c00
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fa99999 	.word	0x3fa99999
 8001b78:	24000702 	.word	0x24000702
 8001b7c:	24000706 	.word	0x24000706
 8001b80:	24000704 	.word	0x24000704
 8001b84:	24000708 	.word	0x24000708
 8001b88:	0801245c 	.word	0x0801245c
 8001b8c:	0801246c 	.word	0x0801246c
 8001b90:	08012470 	.word	0x08012470
 8001b94:	24000710 	.word	0x24000710
 8001b98:	2400070c 	.word	0x2400070c
 8001b9c:	08012480 	.word	0x08012480
 8001ba0:	24000720 	.word	0x24000720
 8001ba4:	08012488 	.word	0x08012488
 8001ba8:	24000724 	.word	0x24000724
 8001bac:	2400071c 	.word	0x2400071c
 8001bb0:	24000008 	.word	0x24000008
 8001bb4:	455ac000 	.word	0x455ac000
 8001bb8:	452f0000 	.word	0x452f0000
 8001bbc:	24000714 	.word	0x24000714
 8001bc0:	b60b60b7 	.word	0xb60b60b7

08001bc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4aa3      	ldr	r2, [pc, #652]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	f040 81c5 	bne.w	8001f60 <HAL_TIM_PeriodElapsedCallback+0x39c>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001bd6:	4ba2      	ldr	r3, [pc, #648]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4aa2      	ldr	r2, [pc, #648]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bdc:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8001bde:	4ba1      	ldr	r3, [pc, #644]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001be0:	2202      	movs	r2, #2
 8001be2:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001be4:	4b9f      	ldr	r3, [pc, #636]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bea:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001bec:	4b9d      	ldr	r3, [pc, #628]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8001bf8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b9b      	ldr	r3, [pc, #620]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c00:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8001c02:	4b99      	ldr	r3, [pc, #612]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	121b      	asrs	r3, r3, #8
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b98      	ldr	r3, [pc, #608]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c0c:	705a      	strb	r2, [r3, #1]
		printValue(inv_dc_bus_voltage);
 8001c0e:	4b96      	ldr	r3, [pc, #600]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fd38 	bl	8001688 <printValue>
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001c18:	4a94      	ldr	r2, [pc, #592]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c1a:	4992      	ldr	r1, [pc, #584]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c1c:	4894      	ldr	r0, [pc, #592]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c1e:	f006 f896 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	4893      	ldr	r0, [pc, #588]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c26:	f007 f97d 	bl	8008f24 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b92      	ldr	r3, [pc, #584]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c30:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8001c32:	4b91      	ldr	r3, [pc, #580]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d11a      	bne.n	8001c70 <HAL_TIM_PeriodElapsedCallback+0xac>
			TxHeader_Acu.Identifier = 0x600;
 8001c3a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c3c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001c40:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8001c42:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001c48:	4b86      	ldr	r3, [pc, #536]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c4e:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001c50:	4b84      	ldr	r3, [pc, #528]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001c56:	4b83      	ldr	r3, [pc, #524]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 8001c5c:	4b86      	ldr	r3, [pc, #536]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b82      	ldr	r3, [pc, #520]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c64:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001c66:	4a81      	ldr	r2, [pc, #516]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c68:	497e      	ldr	r1, [pc, #504]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c6a:	4881      	ldr	r0, [pc, #516]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c6c:	f006 f86f 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001c70:	4b82      	ldr	r3, [pc, #520]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d003      	beq.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001c78:	4b80      	ldr	r3, [pc, #512]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8001c80:	4b7f      	ldr	r3, [pc, #508]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d117      	bne.n	8001cb8 <HAL_TIM_PeriodElapsedCallback+0xf4>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c88:	4b7e      	ldr	r3, [pc, #504]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7e      	ldr	r2, [pc, #504]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c8e:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c90:	4b7d      	ldr	r3, [pc, #500]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c92:	2203      	movs	r2, #3
 8001c94:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c96:	4b7c      	ldr	r3, [pc, #496]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001ca8:	4b78      	ldr	r3, [pc, #480]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001caa:	2206      	movs	r2, #6
 8001cac:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001cae:	4a77      	ldr	r2, [pc, #476]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cb0:	4975      	ldr	r1, [pc, #468]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001cb2:	4877      	ldr	r0, [pc, #476]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001cb4:	f006 f84b 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 8001cb8:	4b71      	ldr	r3, [pc, #452]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 814f 	bne.w	8001f60 <HAL_TIM_PeriodElapsedCallback+0x39c>
			switch (state)
 8001cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b0d      	cmp	r3, #13
 8001cc8:	f200 814a 	bhi.w	8001f60 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8001ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001d0d 	.word	0x08001d0d
 8001cd8:	08001f61 	.word	0x08001f61
 8001cdc:	08001f61 	.word	0x08001f61
 8001ce0:	08001d3d 	.word	0x08001d3d
 8001ce4:	08001d73 	.word	0x08001d73
 8001ce8:	08001f61 	.word	0x08001f61
 8001cec:	08001dfb 	.word	0x08001dfb
 8001cf0:	08001f61 	.word	0x08001f61
 8001cf4:	08001f61 	.word	0x08001f61
 8001cf8:	08001f61 	.word	0x08001f61
 8001cfc:	08001ead 	.word	0x08001ead
 8001d00:	08001eed 	.word	0x08001eed
 8001d04:	08001f61 	.word	0x08001f61
 8001d08:	08001f29 	.word	0x08001f29
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5d      	ldr	r2, [pc, #372]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d12:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001d14:	4b5c      	ldr	r3, [pc, #368]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d16:	2203      	movs	r2, #3
 8001d18:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001d20:	4b5a      	ldr	r3, [pc, #360]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d26:	4b59      	ldr	r3, [pc, #356]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8001d2c:	4b57      	ldr	r3, [pc, #348]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d32:	4a56      	ldr	r2, [pc, #344]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d34:	4954      	ldr	r1, [pc, #336]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d36:	4856      	ldr	r0, [pc, #344]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d38:	f006 f809 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 8001d3c:	4b55      	ldr	r3, [pc, #340]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d42:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a50      	ldr	r2, [pc, #320]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d48:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d50:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001d56:	4b4d      	ldr	r3, [pc, #308]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 8001d62:	4b4a      	ldr	r3, [pc, #296]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d64:	2204      	movs	r2, #4
 8001d66:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d68:	4a48      	ldr	r2, [pc, #288]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d6a:	4947      	ldr	r1, [pc, #284]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d6c:	4848      	ldr	r0, [pc, #288]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d6e:	f005 ffee 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 8001d72:	4849      	ldr	r0, [pc, #292]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001d74:	f7ff fc6a 	bl	800164c <print>
	#endif
				if (flag_r2d == 1){
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d120      	bne.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x1fe>
					TxHeader_Inv.Identifier = 0x362;
 8001d80:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d82:	f240 3262 	movw	r2, #866	@ 0x362
 8001d86:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 8001d88:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 8001d8e:	4b43      	ldr	r3, [pc, #268]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 8001d94:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 8001da0:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001da8:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 8001daa:	4b38      	ldr	r3, [pc, #224]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001db0:	4a36      	ldr	r2, [pc, #216]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001db2:	4935      	ldr	r1, [pc, #212]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001db4:	4836      	ldr	r0, [pc, #216]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001db6:	f005 ffca 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8001dc0:	e0ce      	b.n	8001f60 <HAL_TIM_PeriodElapsedCallback+0x39c>
					flag_react = 0;
 8001dc2:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dce:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 8001de8:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dea:	2204      	movs	r2, #4
 8001dec:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001dee:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001df0:	4925      	ldr	r1, [pc, #148]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001df2:	4827      	ldr	r0, [pc, #156]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001df4:	f005 ffab 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 8001df8:	e0b2      	b.n	8001f60 <HAL_TIM_PeriodElapsedCallback+0x39c>
			case 6:
				print("state: torque");
 8001dfa:	4829      	ldr	r0, [pc, #164]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001dfc:	f7ff fc26 	bl	800164c <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 8001e00:	f7ff fd7e 	bl	8001900 <setTorque>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e0a:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e0e:	f240 3262 	movw	r2, #866	@ 0x362
 8001e12:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 8001e14:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e16:	2204      	movs	r2, #4
 8001e18:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e22:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e30:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e44:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e4c:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e50:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e52:	480f      	ldr	r0, [pc, #60]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e54:	f005 ff7b 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 8001e58:	e082      	b.n	8001f60 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8001e5a:	bf00      	nop
 8001e5c:	24000494 	.word	0x24000494
 8001e60:	24000004 	.word	0x24000004
 8001e64:	24000654 	.word	0x24000654
 8001e68:	240006f4 	.word	0x240006f4
 8001e6c:	240006d8 	.word	0x240006d8
 8001e70:	2400028c 	.word	0x2400028c
 8001e74:	58021800 	.word	0x58021800
 8001e78:	24000728 	.word	0x24000728
 8001e7c:	2400071a 	.word	0x2400071a
 8001e80:	2400088c 	.word	0x2400088c
 8001e84:	24000000 	.word	0x24000000
 8001e88:	24000608 	.word	0x24000608
 8001e8c:	240006c8 	.word	0x240006c8
 8001e90:	240001ec 	.word	0x240001ec
 8001e94:	2400088b 	.word	0x2400088b
 8001e98:	08012430 	.word	0x08012430
 8001e9c:	24000718 	.word	0x24000718
 8001ea0:	08012490 	.word	0x08012490
 8001ea4:	24000712 	.word	0x24000712
 8001ea8:	24000713 	.word	0x24000713

			case 10:
				print("state: soft fault");
 8001eac:	482e      	ldr	r0, [pc, #184]	@ (8001f68 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001eae:	f7ff fbcd 	bl	800164c <print>
				printValue(error);
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fbe6 	bl	8001688 <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ec2:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001eca:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001ed6:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 8001edc:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ede:	2213      	movs	r2, #19
 8001ee0:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ee2:	4a25      	ldr	r2, [pc, #148]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ee4:	4923      	ldr	r1, [pc, #140]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ee6:	4825      	ldr	r0, [pc, #148]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001ee8:	f005 ff31 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 8001eec:	4824      	ldr	r0, [pc, #144]	@ (8001f80 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001eee:	f7ff fbad 	bl	800164c <print>
				flag_react = 1;
 8001ef2:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001efe:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f02:	2203      	movs	r2, #3
 8001f04:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f1a:	220d      	movs	r2, #13
 8001f1c:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001f1e:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f20:	4914      	ldr	r1, [pc, #80]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f22:	4816      	ldr	r0, [pc, #88]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001f24:	f005 ff13 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 8001f28:	4817      	ldr	r0, [pc, #92]	@ (8001f88 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8001f2a:	f7ff fb8f 	bl	800164c <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f34:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f38:	2203      	movs	r2, #3
 8001f3a:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001f54:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001f56:	4907      	ldr	r1, [pc, #28]	@ (8001f74 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001f5a:	f005 fef8 	bl	8007d4e <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 8001f5e:	bf00      	nop
			}
		}
#endif
	}
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	080124a0 	.word	0x080124a0
 8001f6c:	2400088a 	.word	0x2400088a
 8001f70:	24000000 	.word	0x24000000
 8001f74:	24000608 	.word	0x24000608
 8001f78:	240006c8 	.word	0x240006c8
 8001f7c:	240001ec 	.word	0x240001ec
 8001f80:	080124b4 	.word	0x080124b4
 8001f84:	2400088b 	.word	0x2400088b
 8001f88:	080124c8 	.word	0x080124c8

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <Error_Handler+0x8>

08001f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <HAL_MspInit+0x30>)
 8001fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fa4:	4a08      	ldr	r2, [pc, #32]	@ (8001fc8 <HAL_MspInit+0x30>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_MspInit+0x30>)
 8001fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	58024400 	.word	0x58024400

08001fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	@ 0x40
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a90      	ldr	r2, [pc, #576]	@ (800222c <HAL_ADC_MspInit+0x260>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	f040 80a3 	bne.w	8002136 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8002230 <HAL_ADC_MspInit+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a8e      	ldr	r2, [pc, #568]	@ (8002230 <HAL_ADC_MspInit+0x264>)
 8001ff8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ffa:	4b8d      	ldr	r3, [pc, #564]	@ (8002230 <HAL_ADC_MspInit+0x264>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10e      	bne.n	8002020 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002002:	4b8c      	ldr	r3, [pc, #560]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002008:	4a8a      	ldr	r2, [pc, #552]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002012:	4b88      	ldr	r3, [pc, #544]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800201e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4b84      	ldr	r3, [pc, #528]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002026:	4a83      	ldr	r2, [pc, #524]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002030:	4b80      	ldr	r3, [pc, #512]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b7d      	ldr	r3, [pc, #500]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002044:	4a7b      	ldr	r2, [pc, #492]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800204e:	4b79      	ldr	r3, [pc, #484]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800205c:	4b75      	ldr	r3, [pc, #468]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002062:	4a74      	ldr	r2, [pc, #464]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206c:	4b71      	ldr	r3, [pc, #452]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 800207a:	2330      	movs	r3, #48	@ 0x30
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	486a      	ldr	r0, [pc, #424]	@ (8002238 <HAL_ADC_MspInit+0x26c>)
 800208e:	f006 fda1 	bl	8008bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002092:	2303      	movs	r3, #3
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002096:	2303      	movs	r3, #3
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4865      	ldr	r0, [pc, #404]	@ (800223c <HAL_ADC_MspInit+0x270>)
 80020a6:	f006 fd95 	bl	8008bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 80020aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b0:	2303      	movs	r3, #3
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020bc:	4619      	mov	r1, r3
 80020be:	4860      	ldr	r0, [pc, #384]	@ (8002240 <HAL_ADC_MspInit+0x274>)
 80020c0:	f006 fd88 	bl	8008bd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80020c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020c6:	4a60      	ldr	r2, [pc, #384]	@ (8002248 <HAL_ADC_MspInit+0x27c>)
 80020c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020cc:	2209      	movs	r2, #9
 80020ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	4b59      	ldr	r3, [pc, #356]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020e4:	4b57      	ldr	r3, [pc, #348]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ec:	4b55      	ldr	r3, [pc, #340]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020f4:	4b53      	ldr	r3, [pc, #332]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020fc:	4b51      	ldr	r3, [pc, #324]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 80020fe:	2200      	movs	r2, #0
 8002100:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002102:	4b50      	ldr	r3, [pc, #320]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002108:	484e      	ldr	r0, [pc, #312]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 800210a:	f003 facd 	bl	80056a8 <HAL_DMA_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002114:	f7ff ff3a 	bl	8001f8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a4a      	ldr	r2, [pc, #296]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 800211c:	659a      	str	r2, [r3, #88]	@ 0x58
 800211e:	4a49      	ldr	r2, [pc, #292]	@ (8002244 <HAL_ADC_MspInit+0x278>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2012      	movs	r0, #18
 800212a:	f003 fa88 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800212e:	2012      	movs	r0, #18
 8002130:	f003 fa9f 	bl	8005672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002134:	e076      	b.n	8002224 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a44      	ldr	r2, [pc, #272]	@ (800224c <HAL_ADC_MspInit+0x280>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d171      	bne.n	8002224 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002140:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <HAL_ADC_MspInit+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a3a      	ldr	r2, [pc, #232]	@ (8002230 <HAL_ADC_MspInit+0x264>)
 8002148:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800214a:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <HAL_ADC_MspInit+0x264>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10e      	bne.n	8002170 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002152:	4b38      	ldr	r3, [pc, #224]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002158:	4a36      	ldr	r2, [pc, #216]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 800215a:	f043 0320 	orr.w	r3, r3, #32
 800215e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002162:	4b34      	ldr	r3, [pc, #208]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002170:	4b30      	ldr	r3, [pc, #192]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002176:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002180:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002194:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800219e:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ac:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b2:	4a20      	ldr	r2, [pc, #128]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 80021b4:	f043 0320 	orr.w	r3, r3, #32
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_ADC_MspInit+0x268>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80021ca:	2320      	movs	r3, #32
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ce:	2303      	movs	r3, #3
 80021d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021da:	4619      	mov	r1, r3
 80021dc:	4816      	ldr	r0, [pc, #88]	@ (8002238 <HAL_ADC_MspInit+0x26c>)
 80021de:	f006 fcf9 	bl	8008bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f2:	4619      	mov	r1, r3
 80021f4:	4811      	ldr	r0, [pc, #68]	@ (800223c <HAL_ADC_MspInit+0x270>)
 80021f6:	f006 fced 	bl	8008bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 80021fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002200:	2303      	movs	r3, #3
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002208:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220c:	4619      	mov	r1, r3
 800220e:	480c      	ldr	r0, [pc, #48]	@ (8002240 <HAL_ADC_MspInit+0x274>)
 8002210:	f006 fce0 	bl	8008bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2012      	movs	r0, #18
 800221a:	f003 fa10 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800221e:	2012      	movs	r0, #18
 8002220:	f003 fa27 	bl	8005672 <HAL_NVIC_EnableIRQ>
}
 8002224:	bf00      	nop
 8002226:	3740      	adds	r7, #64	@ 0x40
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40022000 	.word	0x40022000
 8002230:	24000890 	.word	0x24000890
 8002234:	58024400 	.word	0x58024400
 8002238:	58020800 	.word	0x58020800
 800223c:	58020400 	.word	0x58020400
 8002240:	58021400 	.word	0x58021400
 8002244:	24000174 	.word	0x24000174
 8002248:	40020010 	.word	0x40020010
 800224c:	40022100 	.word	0x40022100

08002250 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0bc      	sub	sp, #240	@ 0xf0
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	22b8      	movs	r2, #184	@ 0xb8
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f00f fb57 	bl	8011924 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a8d      	ldr	r2, [pc, #564]	@ (80024b0 <HAL_FDCAN_MspInit+0x260>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d157      	bne.n	8002330 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002280:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	4618      	mov	r0, r3
 8002298:	f007 fe16 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80022a2:	f7ff fe73 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80022a6:	4b83      	ldr	r3, [pc, #524]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a81      	ldr	r2, [pc, #516]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 80022ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80022b0:	4b80      	ldr	r3, [pc, #512]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10e      	bne.n	80022d6 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80022b8:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80022ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022be:	4a7e      	ldr	r2, [pc, #504]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80022c8:	4b7b      	ldr	r3, [pc, #492]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80022ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d6:	4b78      	ldr	r3, [pc, #480]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022dc:	4a76      	ldr	r2, [pc, #472]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e6:	4b74      	ldr	r3, [pc, #464]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022f4:	2303      	movs	r3, #3
 80022f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800230c:	2309      	movs	r3, #9
 800230e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002316:	4619      	mov	r1, r3
 8002318:	4868      	ldr	r0, [pc, #416]	@ (80024bc <HAL_FDCAN_MspInit+0x26c>)
 800231a:	f006 fc5b 	bl	8008bd4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2101      	movs	r1, #1
 8002322:	2013      	movs	r0, #19
 8002324:	f003 f98b 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002328:	2013      	movs	r0, #19
 800232a:	f003 f9a2 	bl	8005672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800232e:	e0ba      	b.n	80024a6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a62      	ldr	r2, [pc, #392]	@ (80024c0 <HAL_FDCAN_MspInit+0x270>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d158      	bne.n	80023ec <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800233a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234c:	f107 0320 	add.w	r3, r7, #32
 8002350:	4618      	mov	r0, r3
 8002352:	f007 fdb9 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800235c:	f7ff fe16 	bl	8001f8c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002360:	4b54      	ldr	r3, [pc, #336]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	4a53      	ldr	r2, [pc, #332]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 8002368:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800236a:	4b52      	ldr	r3, [pc, #328]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d10e      	bne.n	8002390 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002372:	4b51      	ldr	r3, [pc, #324]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002374:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002378:	4a4f      	ldr	r2, [pc, #316]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002382:	4b4d      	ldr	r3, [pc, #308]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002384:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002390:	4b49      	ldr	r3, [pc, #292]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002396:	4a48      	ldr	r2, [pc, #288]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023a0:	4b45      	ldr	r3, [pc, #276]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80023b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80023c8:	2309      	movs	r3, #9
 80023ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023d2:	4619      	mov	r1, r3
 80023d4:	483b      	ldr	r0, [pc, #236]	@ (80024c4 <HAL_FDCAN_MspInit+0x274>)
 80023d6:	f006 fbfd 	bl	8008bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2102      	movs	r1, #2
 80023de:	2014      	movs	r0, #20
 80023e0:	f003 f92d 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80023e4:	2014      	movs	r0, #20
 80023e6:	f003 f944 	bl	8005672 <HAL_NVIC_EnableIRQ>
}
 80023ea:	e05c      	b.n	80024a6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a35      	ldr	r2, [pc, #212]	@ (80024c8 <HAL_FDCAN_MspInit+0x278>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d157      	bne.n	80024a6 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023f6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002408:	f107 0320 	add.w	r3, r7, #32
 800240c:	4618      	mov	r0, r3
 800240e:	f007 fd5b 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8002418:	f7ff fdb8 	bl	8001f8c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800241c:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	4a24      	ldr	r2, [pc, #144]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 8002424:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002426:	4b23      	ldr	r3, [pc, #140]	@ (80024b4 <HAL_FDCAN_MspInit+0x264>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10e      	bne.n	800244c <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002430:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002434:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002440:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002452:	4a19      	ldr	r2, [pc, #100]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 8002454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_FDCAN_MspInit+0x268>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800246a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800246e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800248a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800248e:	4619      	mov	r1, r3
 8002490:	480e      	ldr	r0, [pc, #56]	@ (80024cc <HAL_FDCAN_MspInit+0x27c>)
 8002492:	f006 fb9f 	bl	8008bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	209f      	movs	r0, #159	@ 0x9f
 800249c:	f003 f8cf 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80024a0:	209f      	movs	r0, #159	@ 0x9f
 80024a2:	f003 f8e6 	bl	8005672 <HAL_NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	37f0      	adds	r7, #240	@ 0xf0
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	4000a000 	.word	0x4000a000
 80024b4:	24000894 	.word	0x24000894
 80024b8:	58024400 	.word	0x58024400
 80024bc:	58020c00 	.word	0x58020c00
 80024c0:	4000a400 	.word	0x4000a400
 80024c4:	58020400 	.word	0x58020400
 80024c8:	4000d400 	.word	0x4000d400
 80024cc:	58021800 	.word	0x58021800

080024d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	@ 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3e      	ldr	r2, [pc, #248]	@ (80025e8 <HAL_SD_MspInit+0x118>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d175      	bne.n	80025de <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024f2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 80024f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024f8:	4a3c      	ldr	r2, [pc, #240]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002502:	4b3a      	ldr	r3, [pc, #232]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002504:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002510:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	4a35      	ldr	r2, [pc, #212]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002520:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800252e:	4b2f      	ldr	r3, [pc, #188]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002534:	4a2d      	ldr	r2, [pc, #180]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002536:	f043 0308 	orr.w	r3, r3, #8
 800253a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800253e:	4b2b      	ldr	r3, [pc, #172]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254c:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 800254e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002552:	4a26      	ldr	r2, [pc, #152]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800255c:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <HAL_SD_MspInit+0x11c>)
 800255e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800256a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800256e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800257c:	230c      	movs	r3, #12
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	481a      	ldr	r0, [pc, #104]	@ (80025f0 <HAL_SD_MspInit+0x120>)
 8002588:	f006 fb24 	bl	8008bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800258c:	2304      	movs	r3, #4
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800259c:	230c      	movs	r3, #12
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4813      	ldr	r0, [pc, #76]	@ (80025f4 <HAL_SD_MspInit+0x124>)
 80025a8:	f006 fb14 	bl	8008bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 80025be:	2307      	movs	r3, #7
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	480b      	ldr	r0, [pc, #44]	@ (80025f8 <HAL_SD_MspInit+0x128>)
 80025ca:	f006 fb03 	bl	8008bd4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2031      	movs	r0, #49	@ 0x31
 80025d4:	f003 f833 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80025d8:	2031      	movs	r0, #49	@ 0x31
 80025da:	f003 f84a 	bl	8005672 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80025de:	bf00      	nop
 80025e0:	3730      	adds	r7, #48	@ 0x30
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	52007000 	.word	0x52007000
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020800 	.word	0x58020800
 80025f4:	58020c00 	.word	0x58020c00
 80025f8:	58020400 	.word	0x58020400

080025fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a19      	ldr	r2, [pc, #100]	@ (8002670 <HAL_TIM_Base_MspInit+0x74>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10f      	bne.n	800262e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260e:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_TIM_Base_MspInit+0x78>)
 8002610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002614:	4a17      	ldr	r2, [pc, #92]	@ (8002674 <HAL_TIM_Base_MspInit+0x78>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <HAL_TIM_Base_MspInit+0x78>)
 8002620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800262c:	e01b      	b.n	8002666 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a11      	ldr	r2, [pc, #68]	@ (8002678 <HAL_TIM_Base_MspInit+0x7c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d116      	bne.n	8002666 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_TIM_Base_MspInit+0x78>)
 800263a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800263e:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <HAL_TIM_Base_MspInit+0x78>)
 8002640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002644:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <HAL_TIM_Base_MspInit+0x78>)
 800264a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2075      	movs	r0, #117	@ 0x75
 800265c:	f002 ffef 	bl	800563e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002660:	2075      	movs	r0, #117	@ 0x75
 8002662:	f003 f806 	bl	8005672 <HAL_NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40010000 	.word	0x40010000
 8002674:	58024400 	.word	0x58024400
 8002678:	40014400 	.word	0x40014400

0800267c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <HAL_TIM_MspPostInit+0x6c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d11f      	bne.n	80026de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800269e:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <HAL_TIM_MspPostInit+0x70>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a4:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <HAL_TIM_MspPostInit+0x70>)
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026ae:	4b0f      	ldr	r3, [pc, #60]	@ (80026ec <HAL_TIM_MspPostInit+0x70>)
 80026b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 80026bc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80026c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <HAL_TIM_MspPostInit+0x74>)
 80026da:	f006 fa7b 	bl	8008bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58021000 	.word	0x58021000

080026f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0ba      	sub	sp, #232	@ 0xe8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 0318 	add.w	r3, r7, #24
 8002710:	22b8      	movs	r2, #184	@ 0xb8
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f00f f905 	bl	8011924 <memset>
  if(huart->Instance==USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a4d      	ldr	r2, [pc, #308]	@ (8002854 <HAL_UART_MspInit+0x160>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d147      	bne.n	80027b4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002724:	f04f 0201 	mov.w	r2, #1
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002736:	f107 0318 	add.w	r3, r7, #24
 800273a:	4618      	mov	r0, r3
 800273c:	f007 fbc4 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002746:	f7ff fc21 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800274a:	4b43      	ldr	r3, [pc, #268]	@ (8002858 <HAL_UART_MspInit+0x164>)
 800274c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002750:	4a41      	ldr	r2, [pc, #260]	@ (8002858 <HAL_UART_MspInit+0x164>)
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800275a:	4b3f      	ldr	r3, [pc, #252]	@ (8002858 <HAL_UART_MspInit+0x164>)
 800275c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_UART_MspInit+0x164>)
 800276a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800276e:	4a3a      	ldr	r2, [pc, #232]	@ (8002858 <HAL_UART_MspInit+0x164>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002778:	4b37      	ldr	r3, [pc, #220]	@ (8002858 <HAL_UART_MspInit+0x164>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8002786:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800278a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a0:	2307      	movs	r3, #7
 80027a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027aa:	4619      	mov	r1, r3
 80027ac:	482b      	ldr	r0, [pc, #172]	@ (800285c <HAL_UART_MspInit+0x168>)
 80027ae:	f006 fa11 	bl	8008bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027b2:	e04a      	b.n	800284a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <HAL_UART_MspInit+0x16c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d145      	bne.n	800284a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027be:	f04f 0202 	mov.w	r2, #2
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d0:	f107 0318 	add.w	r3, r7, #24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f007 fb77 	bl	8009ec8 <HAL_RCCEx_PeriphCLKConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80027e0:	f7ff fbd4 	bl	8001f8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <HAL_UART_MspInit+0x164>)
 80027e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002858 <HAL_UART_MspInit+0x164>)
 80027ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027f4:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <HAL_UART_MspInit+0x164>)
 80027f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <HAL_UART_MspInit+0x164>)
 8002804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002808:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <HAL_UART_MspInit+0x164>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002812:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_UART_MspInit+0x164>)
 8002814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002820:	230c      	movs	r3, #12
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002838:	2307      	movs	r3, #7
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	@ (800285c <HAL_UART_MspInit+0x168>)
 8002846:	f006 f9c5 	bl	8008bd4 <HAL_GPIO_Init>
}
 800284a:	bf00      	nop
 800284c:	37e8      	adds	r7, #232	@ 0xe8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40011000 	.word	0x40011000
 8002858:	58024400 	.word	0x58024400
 800285c:	58020000 	.word	0x58020000
 8002860:	40004400 	.word	0x40004400

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <NMI_Handler+0x4>

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <MemManage_Handler+0x4>

0800287c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <UsageFault_Handler+0x4>

0800288c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ba:	f000 f997 	bl	8002bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <DMA1_Stream0_IRQHandler+0x10>)
 80028ca:	f003 fcaf 	bl	800622c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	24000174 	.word	0x24000174

080028d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028dc:	4803      	ldr	r0, [pc, #12]	@ (80028ec <ADC_IRQHandler+0x14>)
 80028de:	f001 f9e9 	bl	8003cb4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028e2:	4803      	ldr	r0, [pc, #12]	@ (80028f0 <ADC_IRQHandler+0x18>)
 80028e4:	f001 f9e6 	bl	8003cb4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	24000094 	.word	0x24000094
 80028f0:	24000104 	.word	0x24000104

080028f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028f8:	4802      	ldr	r0, [pc, #8]	@ (8002904 <FDCAN1_IT0_IRQHandler+0x10>)
 80028fa:	f005 fc69 	bl	80081d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	240001ec 	.word	0x240001ec

08002908 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800290c:	4802      	ldr	r0, [pc, #8]	@ (8002918 <FDCAN2_IT0_IRQHandler+0x10>)
 800290e:	f005 fc5f 	bl	80081d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2400028c 	.word	0x2400028c

0800291c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <SDMMC1_IRQHandler+0x10>)
 8002922:	f00a f927 	bl	800cb74 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	240003cc 	.word	0x240003cc

08002930 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <TIM16_IRQHandler+0x10>)
 8002936:	f00b fc50 	bl	800e1da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	24000494 	.word	0x24000494

08002944 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <FDCAN3_IT0_IRQHandler+0x10>)
 800294a:	f005 fc41 	bl	80081d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2400032c 	.word	0x2400032c

08002958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002960:	4a14      	ldr	r2, [pc, #80]	@ (80029b4 <_sbrk+0x5c>)
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <_sbrk+0x60>)
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <_sbrk+0x64>)
 8002976:	4a12      	ldr	r2, [pc, #72]	@ (80029c0 <_sbrk+0x68>)
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297a:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d207      	bcs.n	8002998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002988:	f00e ffd4 	bl	8011934 <__errno>
 800298c:	4603      	mov	r3, r0
 800298e:	220c      	movs	r2, #12
 8002990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e009      	b.n	80029ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002998:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299e:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <_sbrk+0x64>)
 80029a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	24050000 	.word	0x24050000
 80029b8:	00000400 	.word	0x00000400
 80029bc:	24000898 	.word	0x24000898
 80029c0:	24000a08 	.word	0x24000a08

080029c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <SystemInit+0xd0>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ce:	4a31      	ldr	r2, [pc, #196]	@ (8002a94 <SystemInit+0xd0>)
 80029d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <SystemInit+0xd4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	2b06      	cmp	r3, #6
 80029e2:	d807      	bhi.n	80029f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <SystemInit+0xd4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 030f 	bic.w	r3, r3, #15
 80029ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <SystemInit+0xd4>)
 80029ee:	f043 0307 	orr.w	r3, r3, #7
 80029f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029f4:	4b29      	ldr	r3, [pc, #164]	@ (8002a9c <SystemInit+0xd8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a28      	ldr	r2, [pc, #160]	@ (8002a9c <SystemInit+0xd8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a00:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <SystemInit+0xd8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a06:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <SystemInit+0xd8>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4924      	ldr	r1, [pc, #144]	@ (8002a9c <SystemInit+0xd8>)
 8002a0c:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <SystemInit+0xdc>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a12:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <SystemInit+0xd4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <SystemInit+0xd4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 030f 	bic.w	r3, r3, #15
 8002a26:	4a1c      	ldr	r2, [pc, #112]	@ (8002a98 <SystemInit+0xd4>)
 8002a28:	f043 0307 	orr.w	r3, r3, #7
 8002a2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <SystemInit+0xd8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <SystemInit+0xd8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <SystemInit+0xd8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a40:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <SystemInit+0xd8>)
 8002a42:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <SystemInit+0xe0>)
 8002a44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <SystemInit+0xd8>)
 8002a48:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <SystemInit+0xe4>)
 8002a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a4c:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <SystemInit+0xd8>)
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <SystemInit+0xe8>)
 8002a50:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <SystemInit+0xd8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a58:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <SystemInit+0xd8>)
 8002a5a:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <SystemInit+0xe8>)
 8002a5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <SystemInit+0xd8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <SystemInit+0xd8>)
 8002a66:	4a11      	ldr	r2, [pc, #68]	@ (8002aac <SystemInit+0xe8>)
 8002a68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <SystemInit+0xd8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <SystemInit+0xd8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <SystemInit+0xd8>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a7c:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <SystemInit+0xd8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <SystemInit+0xec>)
 8002a84:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00
 8002a98:	52002000 	.word	0x52002000
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002aa4:	02020200 	.word	0x02020200
 8002aa8:	01ff0000 	.word	0x01ff0000
 8002aac:	01010280 	.word	0x01010280
 8002ab0:	52004000 	.word	0x52004000

08002ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ab8:	f7ff ff84 	bl	80029c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002abc:	480c      	ldr	r0, [pc, #48]	@ (8002af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002abe:	490d      	ldr	r1, [pc, #52]	@ (8002af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8002b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ae2:	f00e ff2d 	bl	8011940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ae6:	f7fd fe01 	bl	80006ec <main>
  bx  lr
 8002aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002af0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002af4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002af8:	080125cc 	.word	0x080125cc
  ldr r2, =_sbss
 8002afc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002b00:	24000a04 	.word	0x24000a04

08002b04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b04:	e7fe      	b.n	8002b04 <ADC3_IRQHandler>
	...

08002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0e:	2003      	movs	r0, #3
 8002b10:	f002 fd8a 	bl	8005628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b14:	f007 f802 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_Init+0x68>)
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	4913      	ldr	r1, [pc, #76]	@ (8002b74 <HAL_Init+0x6c>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b32:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_Init+0x68>)
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <HAL_Init+0x6c>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	4a0b      	ldr	r2, [pc, #44]	@ (8002b78 <HAL_Init+0x70>)
 8002b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b7c <HAL_Init+0x74>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b52:	200f      	movs	r0, #15
 8002b54:	f000 f814 	bl	8002b80 <HAL_InitTick>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e002      	b.n	8002b68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b62:	f7ff fa19 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	58024400 	.word	0x58024400
 8002b74:	08012524 	.word	0x08012524
 8002b78:	24000010 	.word	0x24000010
 8002b7c:	2400000c 	.word	0x2400000c

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b88:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_InitTick+0x60>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e021      	b.n	8002bd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b94:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <HAL_InitTick+0x64>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_InitTick+0x60>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 fd6f 	bl	800568e <HAL_SYSTICK_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00e      	b.n	8002bd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d80a      	bhi.n	8002bd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc8:	f002 fd39 	bl	800563e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bcc:	4a06      	ldr	r2, [pc, #24]	@ (8002be8 <HAL_InitTick+0x68>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	24000018 	.word	0x24000018
 8002be4:	2400000c 	.word	0x2400000c
 8002be8:	24000014 	.word	0x24000014

08002bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_IncTick+0x20>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_IncTick+0x24>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <HAL_IncTick+0x24>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	24000018 	.word	0x24000018
 8002c10:	2400089c 	.word	0x2400089c

08002c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <HAL_GetTick+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2400089c 	.word	0x2400089c

08002c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff ffee 	bl	8002c14 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d005      	beq.n	8002c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_Delay+0x44>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c52:	bf00      	nop
 8002c54:	f7ff ffde 	bl	8002c14 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d8f7      	bhi.n	8002c54 <HAL_Delay+0x28>
  {
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000018 	.word	0x24000018

08002c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3360      	adds	r3, #96	@ 0x60
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <LL_ADC_SetOffset+0x60>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10b      	bne.n	8002d18 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d16:	e00b      	b.n	8002d30 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	58026000 	.word	0x58026000

08002d40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3360      	adds	r3, #96	@ 0x60
 8002d4e:	461a      	mov	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	611a      	str	r2, [r3, #16]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a0c      	ldr	r2, [pc, #48]	@ (8002de0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3360      	adds	r3, #96	@ 0x60
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	601a      	str	r2, [r3, #0]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	58026000 	.word	0x58026000

08002de4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <LL_ADC_SetOffsetSaturation+0x40>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d10e      	bne.n	8002e16 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3360      	adds	r3, #96	@ 0x60
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	58026000 	.word	0x58026000

08002e28 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	@ (8002e68 <LL_ADC_SetOffsetSign+0x40>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10e      	bne.n	8002e5a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3360      	adds	r3, #96	@ 0x60
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	58026000 	.word	0x58026000

08002e6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3360      	adds	r3, #96	@ 0x60
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a0c      	ldr	r2, [pc, #48]	@ (8002ebc <LL_ADC_SetOffsetState+0x50>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d108      	bne.n	8002ea0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e9e:	e007      	b.n	8002eb0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	58026000 	.word	0x58026000

08002ec0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3330      	adds	r3, #48	@ 0x30
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	4413      	add	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	211f      	movs	r1, #31
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	f003 011f 	and.w	r1, r3, #31
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f023 0203 	bic.w	r2, r3, #3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60da      	str	r2, [r3, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d107      	bne.n	8002fa6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	58026000 	.word	0x58026000

08002fb8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b087      	sub	sp, #28
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3314      	adds	r3, #20
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0e5b      	lsrs	r3, r3, #25
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	4413      	add	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	0d1b      	lsrs	r3, r3, #20
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2107      	movs	r1, #7
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	401a      	ands	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0d1b      	lsrs	r3, r3, #20
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	431a      	orrs	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a1a      	ldr	r2, [pc, #104]	@ (80030ac <LL_ADC_SetChannelSingleDiff+0x78>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d115      	bne.n	8003074 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003054:	43db      	mvns	r3, r3
 8003056:	401a      	ands	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0318 	and.w	r3, r3, #24
 800305e:	4914      	ldr	r1, [pc, #80]	@ (80030b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003060:	40d9      	lsrs	r1, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	400b      	ands	r3, r1
 8003066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800306a:	431a      	orrs	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003072:	e014      	b.n	800309e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003080:	43db      	mvns	r3, r3
 8003082:	401a      	ands	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0318 	and.w	r3, r3, #24
 800308a:	4909      	ldr	r1, [pc, #36]	@ (80030b0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800308c:	40d9      	lsrs	r1, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	400b      	ands	r3, r1
 8003092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003096:	431a      	orrs	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800309e:	bf00      	nop
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	58026000 	.word	0x58026000
 80030b0:	000fffff 	.word	0x000fffff

080030b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 031f 	and.w	r3, r3, #31
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <LL_ADC_DisableDeepPowerDown+0x20>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6093      	str	r3, [r2, #8]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	5fffffc0 	.word	0x5fffffc0

08003110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003124:	d101      	bne.n	800312a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <LL_ADC_EnableInternalRegulator+0x24>)
 8003146:	4013      	ands	r3, r2
 8003148:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	6fffffc0 	.word	0x6fffffc0

08003160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003174:	d101      	bne.n	800317a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <LL_ADC_Enable+0x24>)
 8003196:	4013      	ands	r3, r2
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	7fffffc0 	.word	0x7fffffc0

080031b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <LL_ADC_Disable+0x24>)
 80031be:	4013      	ands	r3, r2
 80031c0:	f043 0202 	orr.w	r2, r3, #2
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	7fffffc0 	.word	0x7fffffc0

080031d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <LL_ADC_IsEnabled+0x18>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <LL_ADC_IsEnabled+0x1a>
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d101      	bne.n	8003216 <LL_ADC_IsDisableOngoing+0x18>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <LL_ADC_IsDisableOngoing+0x1a>
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <LL_ADC_REG_StartConversion+0x24>)
 8003232:	4013      	ands	r3, r2
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	7fffffc0 	.word	0x7fffffc0

0800324c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <LL_ADC_REG_StopConversion+0x24>)
 800325a:	4013      	ands	r3, r2
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	7fffffc0 	.word	0x7fffffc0

08003274 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d101      	bne.n	800328c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <LL_ADC_INJ_StopConversion+0x24>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	7fffffc0 	.word	0x7fffffc0

080032c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d101      	bne.n	80032dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1ee      	b.n	80036e4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fe fe59 	bl	8001fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff feef 	bl	8003110 <LL_ADC_IsDeepPowerDownEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fed5 	bl	80030ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff0a 	bl	8003160 <LL_ADC_IsInternalRegulatorEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d114      	bne.n	800337c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff feee 	bl	8003138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800335c:	4b8e      	ldr	r3, [pc, #568]	@ (8003598 <HAL_ADC_Init+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	099b      	lsrs	r3, r3, #6
 8003362:	4a8e      	ldr	r2, [pc, #568]	@ (800359c <HAL_ADC_Init+0x2b0>)
 8003364:	fba2 2303 	umull	r2, r3, r2, r3
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	3301      	adds	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800336e:	e002      	b.n	8003376 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	3b01      	subs	r3, #1
 8003374:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f9      	bne.n	8003370 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff feed 	bl	8003160 <LL_ADC_IsInternalRegulatorEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003390:	f043 0210 	orr.w	r2, r3, #16
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff61 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 80033b2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f040 8188 	bne.w	80036d2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8184 	bne.w	80036d2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fefa 	bl	80031d8 <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d136      	bne.n	8003458 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6c      	ldr	r2, [pc, #432]	@ (80035a0 <HAL_ADC_Init+0x2b4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_ADC_Init+0x112>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6a      	ldr	r2, [pc, #424]	@ (80035a4 <HAL_ADC_Init+0x2b8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d10e      	bne.n	800341c <HAL_ADC_Init+0x130>
 80033fe:	4868      	ldr	r0, [pc, #416]	@ (80035a0 <HAL_ADC_Init+0x2b4>)
 8003400:	f7ff feea 	bl	80031d8 <LL_ADC_IsEnabled>
 8003404:	4604      	mov	r4, r0
 8003406:	4867      	ldr	r0, [pc, #412]	@ (80035a4 <HAL_ADC_Init+0x2b8>)
 8003408:	f7ff fee6 	bl	80031d8 <LL_ADC_IsEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	4323      	orrs	r3, r4
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e008      	b.n	800342e <HAL_ADC_Init+0x142>
 800341c:	4862      	ldr	r0, [pc, #392]	@ (80035a8 <HAL_ADC_Init+0x2bc>)
 800341e:	f7ff fedb 	bl	80031d8 <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a5a      	ldr	r2, [pc, #360]	@ (80035a0 <HAL_ADC_Init+0x2b4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_ADC_Init+0x15a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <HAL_ADC_Init+0x2b8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_ADC_Init+0x15e>
 8003446:	4a59      	ldr	r2, [pc, #356]	@ (80035ac <HAL_ADC_Init+0x2c0>)
 8003448:	e000      	b.n	800344c <HAL_ADC_Init+0x160>
 800344a:	4a59      	ldr	r2, [pc, #356]	@ (80035b0 <HAL_ADC_Init+0x2c4>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7ff fc0e 	bl	8002c74 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <HAL_ADC_Init+0x2bc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d129      	bne.n	80034b6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e5b      	ldrb	r3, [r3, #25]
 8003466:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800346c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003472:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d013      	beq.n	80034a4 <HAL_ADC_Init+0x1b8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b0c      	cmp	r3, #12
 8003482:	d00d      	beq.n	80034a0 <HAL_ADC_Init+0x1b4>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b1c      	cmp	r3, #28
 800348a:	d007      	beq.n	800349c <HAL_ADC_Init+0x1b0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b18      	cmp	r3, #24
 8003492:	d101      	bne.n	8003498 <HAL_ADC_Init+0x1ac>
 8003494:	2318      	movs	r3, #24
 8003496:	e006      	b.n	80034a6 <HAL_ADC_Init+0x1ba>
 8003498:	2300      	movs	r3, #0
 800349a:	e004      	b.n	80034a6 <HAL_ADC_Init+0x1ba>
 800349c:	2310      	movs	r3, #16
 800349e:	e002      	b.n	80034a6 <HAL_ADC_Init+0x1ba>
 80034a0:	2308      	movs	r3, #8
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_Init+0x1ba>
 80034a4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80034a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e00e      	b.n	80034d4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7e5b      	ldrb	r3, [r3, #25]
 80034ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d106      	bne.n	80034ec <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	3b01      	subs	r3, #1
 80034e4:	045b      	lsls	r3, r3, #17
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a26      	ldr	r2, [pc, #152]	@ (80035a8 <HAL_ADC_Init+0x2bc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d115      	bne.n	800353e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b26      	ldr	r3, [pc, #152]	@ (80035b4 <HAL_ADC_Init+0x2c8>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	69b9      	ldr	r1, [r7, #24]
 8003522:	430b      	orrs	r3, r1
 8003524:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	611a      	str	r2, [r3, #16]
 800353c:	e009      	b.n	8003552 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b1c      	ldr	r3, [pc, #112]	@ (80035b8 <HAL_ADC_Init+0x2cc>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	69b9      	ldr	r1, [r7, #24]
 800354e:	430b      	orrs	r3, r1
 8003550:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe8c 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 800355c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff feae 	bl	80032c4 <LL_ADC_INJ_IsConversionOngoing>
 8003568:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f040 808e 	bne.w	800368e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 808a 	bne.w	800368e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a0a      	ldr	r2, [pc, #40]	@ (80035a8 <HAL_ADC_Init+0x2bc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d11b      	bne.n	80035bc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	7e1b      	ldrb	r3, [r3, #24]
 8003588:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003590:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	e018      	b.n	80035ca <HAL_ADC_Init+0x2de>
 8003598:	2400000c 	.word	0x2400000c
 800359c:	053e2d63 	.word	0x053e2d63
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40022100 	.word	0x40022100
 80035a8:	58026000 	.word	0x58026000
 80035ac:	40022300 	.word	0x40022300
 80035b0:	58026300 	.word	0x58026300
 80035b4:	fff04007 	.word	0xfff04007
 80035b8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7e1b      	ldrb	r3, [r3, #24]
 80035c0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	4b46      	ldr	r3, [pc, #280]	@ (80036ec <HAL_ADC_Init+0x400>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	69b9      	ldr	r1, [r7, #24]
 80035da:	430b      	orrs	r3, r1
 80035dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d137      	bne.n	8003658 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3f      	ldr	r2, [pc, #252]	@ (80036f0 <HAL_ADC_Init+0x404>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d116      	bne.n	8003626 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	4b3d      	ldr	r3, [pc, #244]	@ (80036f4 <HAL_ADC_Init+0x408>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800360a:	4311      	orrs	r1, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003616:	430a      	orrs	r2, r1
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	611a      	str	r2, [r3, #16]
 8003624:	e020      	b.n	8003668 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <HAL_ADC_Init+0x40c>)
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003634:	3a01      	subs	r2, #1
 8003636:	0411      	lsls	r1, r2, #16
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003648:	430a      	orrs	r2, r1
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	e007      	b.n	8003668 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_ADC_Init+0x404>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d002      	beq.n	800368e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f001 fcd5 	bl	8005038 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10c      	bne.n	80036b0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	f023 010f 	bic.w	r1, r3, #15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ae:	e007      	b.n	80036c0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020f 	bic.w	r2, r2, #15
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c4:	f023 0303 	bic.w	r3, r3, #3
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80036d0:	e007      	b.n	80036e2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3724      	adds	r7, #36	@ 0x24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd90      	pop	{r4, r7, pc}
 80036ec:	ffffbffc 	.word	0xffffbffc
 80036f0:	58026000 	.word	0x58026000
 80036f4:	fc00f81f 	.word	0xfc00f81f
 80036f8:	fc00f81e 	.word	0xfc00f81e

080036fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a5c      	ldr	r2, [pc, #368]	@ (800387c <HAL_ADC_Start+0x180>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_ADC_Start+0x1c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a5b      	ldr	r2, [pc, #364]	@ (8003880 <HAL_ADC_Start+0x184>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_ADC_Start+0x20>
 8003718:	4b5a      	ldr	r3, [pc, #360]	@ (8003884 <HAL_ADC_Start+0x188>)
 800371a:	e000      	b.n	800371e <HAL_ADC_Start+0x22>
 800371c:	4b5a      	ldr	r3, [pc, #360]	@ (8003888 <HAL_ADC_Start+0x18c>)
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fcc8 	bl	80030b4 <LL_ADC_GetMultimode>
 8003724:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fda2 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 809a 	bne.w	800386c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_ADC_Start+0x4a>
 8003742:	2302      	movs	r3, #2
 8003744:	e095      	b.n	8003872 <HAL_ADC_Start+0x176>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f001 faf4 	bl	8004d3c <ADC_Enable>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8081 	bne.w	8003862 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003764:	4b49      	ldr	r3, [pc, #292]	@ (800388c <HAL_ADC_Start+0x190>)
 8003766:	4013      	ands	r3, r2
 8003768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a42      	ldr	r2, [pc, #264]	@ (8003880 <HAL_ADC_Start+0x184>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d002      	beq.n	8003780 <HAL_ADC_Start+0x84>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	e000      	b.n	8003782 <HAL_ADC_Start+0x86>
 8003780:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <HAL_ADC_Start+0x180>)
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	4293      	cmp	r3, r2
 8003788:	d002      	beq.n	8003790 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a8:	d106      	bne.n	80037b8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ae:	f023 0206 	bic.w	r2, r3, #6
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	665a      	str	r2, [r3, #100]	@ 0x64
 80037b6:	e002      	b.n	80037be <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	221c      	movs	r2, #28
 80037c4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <HAL_ADC_Start+0x184>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d002      	beq.n	80037de <HAL_ADC_Start+0xe2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	e000      	b.n	80037e0 <HAL_ADC_Start+0xe4>
 80037de:	4b27      	ldr	r3, [pc, #156]	@ (800387c <HAL_ADC_Start+0x180>)
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d008      	beq.n	80037fa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d002      	beq.n	80037fa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2b09      	cmp	r3, #9
 80037f8:	d114      	bne.n	8003824 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003810:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fd01 	bl	8003224 <LL_ADC_REG_StartConversion>
 8003822:	e025      	b.n	8003870 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003828:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <HAL_ADC_Start+0x184>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d002      	beq.n	8003840 <HAL_ADC_Start+0x144>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	e000      	b.n	8003842 <HAL_ADC_Start+0x146>
 8003840:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <HAL_ADC_Start+0x180>)
 8003842:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003854:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003858:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003860:	e006      	b.n	8003870 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800386a:	e001      	b.n	8003870 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40022000 	.word	0x40022000
 8003880:	40022100 	.word	0x40022100
 8003884:	40022300 	.word	0x40022300
 8003888:	58026300 	.word	0x58026300
 800388c:	fffff0fe 	.word	0xfffff0fe

08003890 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_Stop+0x16>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e021      	b.n	80038ea <HAL_ADC_Stop+0x5a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80038ae:	2103      	movs	r1, #3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f001 f987 	bl	8004bc4 <ADC_ConversionStop>
 80038b6:	4603      	mov	r3, r0
 80038b8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10f      	bne.n	80038e0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f001 fac5 	bl	8004e50 <ADC_Disable>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d107      	bne.n	80038e0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038d4:	4b07      	ldr	r3, [pc, #28]	@ (80038f4 <HAL_ADC_Stop+0x64>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	ffffeefe 	.word	0xffffeefe

080038f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a72      	ldr	r2, [pc, #456]	@ (8003ad0 <HAL_ADC_PollForConversion+0x1d8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_ADC_PollForConversion+0x1e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a70      	ldr	r2, [pc, #448]	@ (8003ad4 <HAL_ADC_PollForConversion+0x1dc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_ADC_PollForConversion+0x22>
 8003916:	4b70      	ldr	r3, [pc, #448]	@ (8003ad8 <HAL_ADC_PollForConversion+0x1e0>)
 8003918:	e000      	b.n	800391c <HAL_ADC_PollForConversion+0x24>
 800391a:	4b70      	ldr	r3, [pc, #448]	@ (8003adc <HAL_ADC_PollForConversion+0x1e4>)
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fbc9 	bl	80030b4 <LL_ADC_GetMultimode>
 8003922:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d102      	bne.n	8003932 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800392c:	2308      	movs	r3, #8
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	e037      	b.n	80039a2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d002      	beq.n	8003944 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d111      	bne.n	8003968 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0b1      	b.n	8003ac6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003962:	2304      	movs	r3, #4
 8003964:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003966:	e01c      	b.n	80039a2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a58      	ldr	r2, [pc, #352]	@ (8003ad0 <HAL_ADC_PollForConversion+0x1d8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_ADC_PollForConversion+0x84>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_ADC_PollForConversion+0x1dc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_ADC_PollForConversion+0x88>
 800397c:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <HAL_ADC_PollForConversion+0x1e0>)
 800397e:	e000      	b.n	8003982 <HAL_ADC_PollForConversion+0x8a>
 8003980:	4b56      	ldr	r3, [pc, #344]	@ (8003adc <HAL_ADC_PollForConversion+0x1e4>)
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fba4 	bl	80030d0 <LL_ADC_GetMultiDMATransfer>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003992:	f043 0220 	orr.w	r2, r3, #32
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e093      	b.n	8003ac6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800399e:	2304      	movs	r3, #4
 80039a0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039a2:	f7ff f937 	bl	8002c14 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039a8:	e021      	b.n	80039ee <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d01d      	beq.n	80039ee <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039b2:	f7ff f92f 	bl	8002c14 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <HAL_ADC_PollForConversion+0xd0>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d112      	bne.n	80039ee <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	f043 0204 	orr.w	r2, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e06b      	b.n	8003ac6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0d6      	beq.n	80039aa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fa57 	bl	8002ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01c      	beq.n	8003a52 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7e5b      	ldrb	r3, [r3, #25]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d118      	bne.n	8003a52 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d111      	bne.n	8003a52 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f043 0201 	orr.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad4 <HAL_ADC_PollForConversion+0x1dc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x16a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	e000      	b.n	8003a64 <HAL_ADC_PollForConversion+0x16c>
 8003a62:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad0 <HAL_ADC_PollForConversion+0x1d8>)
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d008      	beq.n	8003a7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d002      	beq.n	8003a7e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d104      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e00c      	b.n	8003aa2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <HAL_ADC_PollForConversion+0x1dc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d002      	beq.n	8003a98 <HAL_ADC_PollForConversion+0x1a0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	e000      	b.n	8003a9a <HAL_ADC_PollForConversion+0x1a2>
 8003a98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <HAL_ADC_PollForConversion+0x1d8>)
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d104      	bne.n	8003ab2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2208      	movs	r2, #8
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e008      	b.n	8003ac4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	220c      	movs	r2, #12
 8003ac2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40022100 	.word	0x40022100
 8003ad8:	40022300 	.word	0x40022300
 8003adc:	58026300 	.word	0x58026300

08003ae0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a60      	ldr	r2, [pc, #384]	@ (8003c74 <HAL_ADC_Start_DMA+0x194>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <HAL_ADC_Start_DMA+0x20>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5f      	ldr	r2, [pc, #380]	@ (8003c78 <HAL_ADC_Start_DMA+0x198>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_Start_DMA+0x24>
 8003b00:	4b5e      	ldr	r3, [pc, #376]	@ (8003c7c <HAL_ADC_Start_DMA+0x19c>)
 8003b02:	e000      	b.n	8003b06 <HAL_ADC_Start_DMA+0x26>
 8003b04:	4b5e      	ldr	r3, [pc, #376]	@ (8003c80 <HAL_ADC_Start_DMA+0x1a0>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fad4 	bl	80030b4 <LL_ADC_GetMultimode>
 8003b0c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fbae 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 80a2 	bne.w	8003c64 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_Start_DMA+0x4e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e09d      	b.n	8003c6a <HAL_ADC_Start_DMA+0x18a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b05      	cmp	r3, #5
 8003b40:	d003      	beq.n	8003b4a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b09      	cmp	r3, #9
 8003b46:	f040 8086 	bne.w	8003c56 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f001 f8f6 	bl	8004d3c <ADC_Enable>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d178      	bne.n	8003c4c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b5e:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <HAL_ADC_Start_DMA+0x1a4>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a42      	ldr	r2, [pc, #264]	@ (8003c78 <HAL_ADC_Start_DMA+0x198>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d002      	beq.n	8003b7a <HAL_ADC_Start_DMA+0x9a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	e000      	b.n	8003b7c <HAL_ADC_Start_DMA+0x9c>
 8003b7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c74 <HAL_ADC_Start_DMA+0x194>)
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	6812      	ldr	r2, [r2, #0]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d002      	beq.n	8003b8a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba6:	f023 0206 	bic.w	r2, r3, #6
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	665a      	str	r2, [r3, #100]	@ 0x64
 8003bae:	e002      	b.n	8003bb6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	4a33      	ldr	r2, [pc, #204]	@ (8003c88 <HAL_ADC_Start_DMA+0x1a8>)
 8003bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc2:	4a32      	ldr	r2, [pc, #200]	@ (8003c8c <HAL_ADC_Start_DMA+0x1ac>)
 8003bc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bca:	4a31      	ldr	r2, [pc, #196]	@ (8003c90 <HAL_ADC_Start_DMA+0x1b0>)
 8003bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	221c      	movs	r2, #28
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0210 	orr.w	r2, r2, #16
 8003bec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a28      	ldr	r2, [pc, #160]	@ (8003c94 <HAL_ADC_Start_DMA+0x1b4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10f      	bne.n	8003c18 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7ff f9bc 	bl	8002f84 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff f9a7 	bl	8002f64 <LL_ADC_EnableDMAReq>
 8003c16:	e007      	b.n	8003c28 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7ff f98b 	bl	8002f3e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3340      	adds	r3, #64	@ 0x40
 8003c32:	4619      	mov	r1, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f002 f88e 	bl	8005d58 <HAL_DMA_Start_IT>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff faed 	bl	8003224 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c4a:	e00d      	b.n	8003c68 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003c54:	e008      	b.n	8003c68 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003c62:	e001      	b.n	8003c68 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40022100 	.word	0x40022100
 8003c7c:	40022300 	.word	0x40022300
 8003c80:	58026300 	.word	0x58026300
 8003c84:	fffff0fe 	.word	0xfffff0fe
 8003c88:	08004f0f 	.word	0x08004f0f
 8003c8c:	08004fe7 	.word	0x08004fe7
 8003c90:	08005003 	.word	0x08005003
 8003c94:	58026000 	.word	0x58026000

08003c98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	@ 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a87      	ldr	r2, [pc, #540]	@ (8003ef4 <HAL_ADC_IRQHandler+0x240>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_ADC_IRQHandler+0x30>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a86      	ldr	r2, [pc, #536]	@ (8003ef8 <HAL_ADC_IRQHandler+0x244>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_IRQHandler+0x34>
 8003ce4:	4b85      	ldr	r3, [pc, #532]	@ (8003efc <HAL_ADC_IRQHandler+0x248>)
 8003ce6:	e000      	b.n	8003cea <HAL_ADC_IRQHandler+0x36>
 8003ce8:	4b85      	ldr	r3, [pc, #532]	@ (8003f00 <HAL_ADC_IRQHandler+0x24c>)
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f9e2 	bl	80030b4 <LL_ADC_GetMultimode>
 8003cf0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <HAL_ADC_IRQHandler+0x78>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d012      	beq.n	8003d2c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d16:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 fac6 	bl	80052b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x8c>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8083 	beq.w	8003e52 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d07d      	beq.n	8003e52 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f8a4 	bl	8002ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d062      	beq.n	8003e44 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <HAL_ADC_IRQHandler+0x244>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d002      	beq.n	8003d8e <HAL_ADC_IRQHandler+0xda>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	e000      	b.n	8003d90 <HAL_ADC_IRQHandler+0xdc>
 8003d8e:	4b59      	ldr	r3, [pc, #356]	@ (8003ef4 <HAL_ADC_IRQHandler+0x240>)
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d008      	beq.n	8003daa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d002      	beq.n	8003daa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d104      	bne.n	8003db4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	e00c      	b.n	8003dce <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	@ (8003ef8 <HAL_ADC_IRQHandler+0x244>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d002      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x110>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	e000      	b.n	8003dc6 <HAL_ADC_IRQHandler+0x112>
 8003dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef4 <HAL_ADC_IRQHandler+0x240>)
 8003dc6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d135      	bne.n	8003e44 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d12e      	bne.n	8003e44 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fa42 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11a      	bne.n	8003e2c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 020c 	bic.w	r2, r2, #12
 8003e04:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d112      	bne.n	8003e44 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	f043 0201 	orr.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e2a:	e00b      	b.n	8003e44 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e30:	f043 0210 	orr.w	r2, r3, #16
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e3c:	f043 0201 	orr.w	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fd fc3d 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	220c      	movs	r2, #12
 8003e50:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x1b2>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a0 	beq.w	8003fb2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 809a 	beq.w	8003fb2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e8e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff f88c 	bl	8002fb8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ea0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff f80a 	bl	8002ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eac:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <HAL_ADC_IRQHandler+0x244>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d002      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x20a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	e000      	b.n	8003ec0 <HAL_ADC_IRQHandler+0x20c>
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <HAL_ADC_IRQHandler+0x240>)
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d008      	beq.n	8003eda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b06      	cmp	r3, #6
 8003ed2:	d002      	beq.n	8003eda <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b07      	cmp	r3, #7
 8003ed8:	d104      	bne.n	8003ee4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	e014      	b.n	8003f0e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a03      	ldr	r2, [pc, #12]	@ (8003ef8 <HAL_ADC_IRQHandler+0x244>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00a      	beq.n	8003f04 <HAL_ADC_IRQHandler+0x250>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e008      	b.n	8003f06 <HAL_ADC_IRQHandler+0x252>
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	40022100 	.word	0x40022100
 8003efc:	40022300 	.word	0x40022300
 8003f00:	58026300 	.word	0x58026300
 8003f04:	4b84      	ldr	r3, [pc, #528]	@ (8004118 <HAL_ADC_IRQHandler+0x464>)
 8003f06:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d047      	beq.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_ADC_IRQHandler+0x27a>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d03f      	beq.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d13a      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d133      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d12e      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f9ba 	bl	80032c4 <LL_ADC_INJ_IsConversionOngoing>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11a      	bne.n	8003f8c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f64:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d112      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f8a:	e00b      	b.n	8003fa4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f90:	f043 0210 	orr.w	r2, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 f95b 	bl	8005260 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2260      	movs	r2, #96	@ 0x60
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d011      	beq.n	8003fe0 <HAL_ADC_IRQHandler+0x32c>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8b2 	bl	800413c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2280      	movs	r2, #128	@ 0x80
 8003fde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_ADC_IRQHandler+0x35c>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f001 f941 	bl	8005288 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d012      	beq.n	8004040 <HAL_ADC_IRQHandler+0x38c>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004028:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f001 f933 	bl	800529c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	d043      	beq.n	80040d2 <HAL_ADC_IRQHandler+0x41e>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d03e      	beq.n	80040d2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800405c:	2301      	movs	r3, #1
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004060:	e021      	b.n	80040a6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_ADC_IRQHandler+0x464>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_ADC_IRQHandler+0x3c8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a29      	ldr	r2, [pc, #164]	@ (800411c <HAL_ADC_IRQHandler+0x468>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_ADC_IRQHandler+0x3cc>
 800407c:	4b28      	ldr	r3, [pc, #160]	@ (8004120 <HAL_ADC_IRQHandler+0x46c>)
 800407e:	e000      	b.n	8004082 <HAL_ADC_IRQHandler+0x3ce>
 8004080:	4b28      	ldr	r3, [pc, #160]	@ (8004124 <HAL_ADC_IRQHandler+0x470>)
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff f824 	bl	80030d0 <LL_ADC_GetMultiDMATransfer>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800408e:	2301      	movs	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
 8004092:	e008      	b.n	80040a6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10e      	bne.n	80040ca <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040bc:	f043 0202 	orr.w	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f843 	bl	8004150 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2210      	movs	r2, #16
 80040d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d018      	beq.n	800410e <HAL_ADC_IRQHandler+0x45a>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d013      	beq.n	800410e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f6:	f043 0208 	orr.w	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004106:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f001 f8b3 	bl	8005274 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800410e:	bf00      	nop
 8004110:	3728      	adds	r7, #40	@ 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40022000 	.word	0x40022000
 800411c:	40022100 	.word	0x40022100
 8004120:	40022300 	.word	0x40022300
 8004124:	58026300 	.word	0x58026300

08004128 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b0b9      	sub	sp, #228	@ 0xe4
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800417e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4aab      	ldr	r2, [pc, #684]	@ (8004434 <HAL_ADC_ConfigChannel+0x2d0>)
 8004186:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d102      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x34>
 8004192:	2302      	movs	r3, #2
 8004194:	f000 bcfe 	b.w	8004b94 <HAL_ADC_ConfigChannel+0xa30>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff f865 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 84e2 	bne.w	8004b76 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db38      	blt.n	800422c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a9e      	ldr	r2, [pc, #632]	@ (8004438 <HAL_ADC_ConfigChannel+0x2d4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d033      	beq.n	800422c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <HAL_ADC_ConfigChannel+0x7e>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	2201      	movs	r2, #1
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	e01d      	b.n	800421e <HAL_ADC_ConfigChannel+0xba>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004206:	2320      	movs	r3, #32
 8004208:	e004      	b.n	8004214 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800420a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2201      	movs	r2, #1
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	69d1      	ldr	r1, [r2, #28]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	f7fe fe54 	bl	8002ee6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff f816 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8004248:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff f837 	bl	80032c4 <LL_ADC_INJ_IsConversionOngoing>
 8004256:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800425a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 8270 	bne.w	8004744 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 826b 	bne.w	8004744 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6819      	ldr	r1, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	461a      	mov	r2, r3
 800427c:	f7fe feaf 	bl	8002fde <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6c      	ldr	r2, [pc, #432]	@ (8004438 <HAL_ADC_ConfigChannel+0x2d4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042a4:	e032      	b.n	800430c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042a6:	4b65      	ldr	r3, [pc, #404]	@ (800443c <HAL_ADC_ConfigChannel+0x2d8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80042ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042b2:	d10b      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x168>
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	e01d      	b.n	8004308 <HAL_ADC_ConfigChannel+0x1a4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x18e>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	089b      	lsrs	r3, r3, #2
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	e00a      	b.n	8004308 <HAL_ADC_ConfigChannel+0x1a4>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b04      	cmp	r3, #4
 8004312:	d048      	beq.n	80043a6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6919      	ldr	r1, [r3, #16]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004324:	f7fe fcda 	bl	8002cdc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a42      	ldr	r2, [pc, #264]	@ (8004438 <HAL_ADC_ConfigChannel+0x2d4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d119      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6919      	ldr	r1, [r3, #16]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	461a      	mov	r2, r3
 8004340:	f7fe fd72 	bl	8002e28 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6919      	ldr	r1, [r3, #16]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_ADC_ConfigChannel+0x1f8>
 8004356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800435a:	e000      	b.n	800435e <HAL_ADC_ConfigChannel+0x1fa>
 800435c:	2300      	movs	r3, #0
 800435e:	461a      	mov	r2, r3
 8004360:	f7fe fd40 	bl	8002de4 <LL_ADC_SetOffsetSaturation>
 8004364:	e1ee      	b.n	8004744 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <HAL_ADC_ConfigChannel+0x21a>
 8004378:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800437c:	e000      	b.n	8004380 <HAL_ADC_ConfigChannel+0x21c>
 800437e:	2300      	movs	r3, #0
 8004380:	461a      	mov	r2, r3
 8004382:	f7fe fd0d 	bl	8002da0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6919      	ldr	r1, [r3, #16]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	7e1b      	ldrb	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_ADC_ConfigChannel+0x238>
 8004396:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800439a:	e000      	b.n	800439e <HAL_ADC_ConfigChannel+0x23a>
 800439c:	2300      	movs	r3, #0
 800439e:	461a      	mov	r2, r3
 80043a0:	f7fe fce4 	bl	8002d6c <LL_ADC_SetDataRightShift>
 80043a4:	e1ce      	b.n	8004744 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a23      	ldr	r2, [pc, #140]	@ (8004438 <HAL_ADC_ConfigChannel+0x2d4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	f040 8181 	bne.w	80046b4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fcc1 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 80043be:	4603      	mov	r3, r0
 80043c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_ADC_ConfigChannel+0x27a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fcb6 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	0e9b      	lsrs	r3, r3, #26
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	e01e      	b.n	800441c <HAL_ADC_ConfigChannel+0x2b8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fcab 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80043fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004400:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8004404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800440c:	2320      	movs	r3, #32
 800440e:	e004      	b.n	800441a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004414:	fab3 f383 	clz	r3, r3
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x2dc>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0e9b      	lsrs	r3, r3, #26
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	e01e      	b.n	8004472 <HAL_ADC_ConfigChannel+0x30e>
 8004434:	47ff0000 	.word	0x47ff0000
 8004438:	58026000 	.word	0x58026000
 800443c:	5c001000 	.word	0x5c001000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800445c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e004      	b.n	8004472 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	429a      	cmp	r2, r3
 8004474:	d106      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fcf4 	bl	8002e6c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fc58 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 8004490:	4603      	mov	r3, r0
 8004492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x34c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fc4d 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	0e9b      	lsrs	r3, r3, #26
 80044aa:	f003 021f 	and.w	r2, r3, #31
 80044ae:	e01e      	b.n	80044ee <HAL_ADC_ConfigChannel+0x38a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fc42 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 80044bc:	4603      	mov	r3, r0
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80044de:	2320      	movs	r3, #32
 80044e0:	e004      	b.n	80044ec <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80044e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x3a2>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0e9b      	lsrs	r3, r3, #26
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	e018      	b.n	8004538 <HAL_ADC_ConfigChannel+0x3d4>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800451a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800451e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004522:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800452a:	2320      	movs	r3, #32
 800452c:	e004      	b.n	8004538 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800452e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	429a      	cmp	r2, r3
 800453a:	d106      	bne.n	800454a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fc91 	bl	8002e6c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2102      	movs	r1, #2
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe fbf5 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 8004556:	4603      	mov	r3, r0
 8004558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x412>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fbea 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 800456c:	4603      	mov	r3, r0
 800456e:	0e9b      	lsrs	r3, r3, #26
 8004570:	f003 021f 	and.w	r2, r3, #31
 8004574:	e01e      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x450>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2102      	movs	r1, #2
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fbdf 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004594:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004598:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800459c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80045a4:	2320      	movs	r3, #32
 80045a6:	e004      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80045a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x468>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0e9b      	lsrs	r3, r3, #26
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	e014      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x492>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e004      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80045ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045f0:	fab3 f383 	clz	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d106      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	2102      	movs	r1, #2
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fc32 	bl	8002e6c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2103      	movs	r1, #3
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fb96 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 8004614:	4603      	mov	r3, r0
 8004616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x4d0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2103      	movs	r1, #3
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fb8b 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	0e9b      	lsrs	r3, r3, #26
 800462e:	f003 021f 	and.w	r2, r3, #31
 8004632:	e017      	b.n	8004664 <HAL_ADC_ConfigChannel+0x500>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2103      	movs	r1, #3
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fb80 	bl	8002d40 <LL_ADC_GetOffsetChannel>
 8004640:	4603      	mov	r3, r0
 8004642:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004646:	fa93 f3a3 	rbit	r3, r3
 800464a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004650:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004656:	2320      	movs	r3, #32
 8004658:	e003      	b.n	8004662 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800465a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_ADC_ConfigChannel+0x518>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	e011      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x53c>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004684:	fa93 f3a3 	rbit	r3, r3
 8004688:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800468a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800468e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004694:	2320      	movs	r3, #32
 8004696:	e003      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d14f      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2103      	movs	r1, #3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe fbdd 	bl	8002e6c <LL_ADC_SetOffsetState>
 80046b2:	e047      	b.n	8004744 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	069b      	lsls	r3, r3, #26
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d107      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046d6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	069b      	lsls	r3, r3, #26
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d107      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046fa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	069b      	lsls	r3, r3, #26
 800470c:	429a      	cmp	r2, r3
 800470e:	d107      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800471e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004726:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	069b      	lsls	r3, r3, #26
 8004730:	429a      	cmp	r2, r3
 8004732:	d107      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004742:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fd45 	bl	80031d8 <LL_ADC_IsEnabled>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	f040 8219 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fe fc66 	bl	8003034 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4aa1      	ldr	r2, [pc, #644]	@ (80049f4 <HAL_ADC_ConfigChannel+0x890>)
 800476e:	4293      	cmp	r3, r2
 8004770:	f040 812e 	bne.w	80049d0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <HAL_ADC_ConfigChannel+0x638>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0e9b      	lsrs	r3, r3, #26
 800478a:	3301      	adds	r3, #1
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2b09      	cmp	r3, #9
 8004792:	bf94      	ite	ls
 8004794:	2301      	movls	r3, #1
 8004796:	2300      	movhi	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e019      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x66c>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80047aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80047ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80047b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2b09      	cmp	r3, #9
 80047c8:	bf94      	ite	ls
 80047ca:	2301      	movls	r3, #1
 80047cc:	2300      	movhi	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d079      	beq.n	80048c8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x68c>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0e9b      	lsrs	r3, r3, #26
 80047e6:	3301      	adds	r3, #1
 80047e8:	069b      	lsls	r3, r3, #26
 80047ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ee:	e015      	b.n	800481c <HAL_ADC_ConfigChannel+0x6b8>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80047fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004800:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800480c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	069b      	lsls	r3, r3, #26
 8004818:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <HAL_ADC_ConfigChannel+0x6d8>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	3301      	adds	r3, #1
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	e017      	b.n	800486c <HAL_ADC_ConfigChannel+0x708>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800484a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800484e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e003      	b.n	8004860 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	ea42 0103 	orr.w	r1, r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x72e>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	3301      	adds	r3, #1
 8004884:	f003 021f 	and.w	r2, r3, #31
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	051b      	lsls	r3, r3, #20
 8004890:	e018      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x760>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80048a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80048aa:	2320      	movs	r3, #32
 80048ac:	e003      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048c4:	430b      	orrs	r3, r1
 80048c6:	e07e      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d107      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x780>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0e9b      	lsrs	r3, r3, #26
 80048da:	3301      	adds	r3, #1
 80048dc:	069b      	lsls	r3, r3, #26
 80048de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048e2:	e015      	b.n	8004910 <HAL_ADC_ConfigChannel+0x7ac>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80048f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80048fc:	2320      	movs	r3, #32
 80048fe:	e003      	b.n	8004908 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	069b      	lsls	r3, r3, #26
 800490c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x7cc>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0e9b      	lsrs	r3, r3, #26
 8004922:	3301      	adds	r3, #1
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2101      	movs	r1, #1
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	e017      	b.n	8004960 <HAL_ADC_ConfigChannel+0x7fc>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	61bb      	str	r3, [r7, #24]
  return result;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004948:	2320      	movs	r3, #32
 800494a:	e003      	b.n	8004954 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3301      	adds	r3, #1
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10d      	bne.n	800498c <HAL_ADC_ConfigChannel+0x828>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	0e9b      	lsrs	r3, r3, #26
 8004976:	3301      	adds	r3, #1
 8004978:	f003 021f 	and.w	r2, r3, #31
 800497c:	4613      	mov	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4413      	add	r3, r2
 8004982:	3b1e      	subs	r3, #30
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800498a:	e01b      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x860>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	60fb      	str	r3, [r7, #12]
  return result;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80049a4:	2320      	movs	r3, #32
 80049a6:	e003      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	3301      	adds	r3, #1
 80049b2:	f003 021f 	and.w	r2, r3, #31
 80049b6:	4613      	mov	r3, r2
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	4413      	add	r3, r2
 80049bc:	3b1e      	subs	r3, #30
 80049be:	051b      	lsls	r3, r3, #20
 80049c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c4:	430b      	orrs	r3, r1
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	6892      	ldr	r2, [r2, #8]
 80049ca:	4619      	mov	r1, r3
 80049cc:	f7fe fb07 	bl	8002fde <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f280 80d7 	bge.w	8004b88 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a06      	ldr	r2, [pc, #24]	@ (80049f8 <HAL_ADC_ConfigChannel+0x894>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x88a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a04      	ldr	r2, [pc, #16]	@ (80049fc <HAL_ADC_ConfigChannel+0x898>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10a      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x8a0>
 80049ee:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <HAL_ADC_ConfigChannel+0x89c>)
 80049f0:	e009      	b.n	8004a06 <HAL_ADC_ConfigChannel+0x8a2>
 80049f2:	bf00      	nop
 80049f4:	47ff0000 	.word	0x47ff0000
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40022100 	.word	0x40022100
 8004a00:	40022300 	.word	0x40022300
 8004a04:	4b65      	ldr	r3, [pc, #404]	@ (8004b9c <HAL_ADC_ConfigChannel+0xa38>)
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe f95a 	bl	8002cc0 <LL_ADC_GetCommonPathInternalCh>
 8004a0c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a62      	ldr	r2, [pc, #392]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_ADC_ConfigChannel+0x8c0>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a61      	ldr	r2, [pc, #388]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa40>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10e      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x8de>
 8004a24:	485e      	ldr	r0, [pc, #376]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a26:	f7fe fbd7 	bl	80031d8 <LL_ADC_IsEnabled>
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	485d      	ldr	r0, [pc, #372]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa40>)
 8004a2e:	f7fe fbd3 	bl	80031d8 <LL_ADC_IsEnabled>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4323      	orrs	r3, r4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e008      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x8f0>
 8004a42:	4859      	ldr	r0, [pc, #356]	@ (8004ba8 <HAL_ADC_ConfigChannel+0xa44>)
 8004a44:	f7fe fbc8 	bl	80031d8 <LL_ADC_IsEnabled>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8084 	beq.w	8004b62 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a53      	ldr	r2, [pc, #332]	@ (8004bac <HAL_ADC_ConfigChannel+0xa48>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d132      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x966>
 8004a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d12c      	bne.n	8004aca <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba8 <HAL_ADC_ConfigChannel+0xa44>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	f040 8086 	bne.w	8004b88 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a47      	ldr	r2, [pc, #284]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_ADC_ConfigChannel+0x92c>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a46      	ldr	r2, [pc, #280]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa40>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x930>
 8004a90:	4a47      	ldr	r2, [pc, #284]	@ (8004bb0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a92:	e000      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x932>
 8004a94:	4a41      	ldr	r2, [pc, #260]	@ (8004b9c <HAL_ADC_ConfigChannel+0xa38>)
 8004a96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7fe f8fa 	bl	8002c9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aa6:	4b43      	ldr	r3, [pc, #268]	@ (8004bb4 <HAL_ADC_ConfigChannel+0xa50>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <HAL_ADC_ConfigChannel+0xa54>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004aba:	e002      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f9      	bne.n	8004abc <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ac8:	e05e      	b.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	@ (8004bbc <HAL_ADC_ConfigChannel+0xa58>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d120      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x9b2>
 8004ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11a      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a30      	ldr	r2, [pc, #192]	@ (8004ba8 <HAL_ADC_ConfigChannel+0xa44>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d14e      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_ADC_ConfigChannel+0x99a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa40>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0x99e>
 8004afe:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004b00:	e000      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x9a0>
 8004b02:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <HAL_ADC_ConfigChannel+0xa38>)
 8004b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe f8c3 	bl	8002c9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b14:	e038      	b.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a29      	ldr	r2, [pc, #164]	@ (8004bc0 <HAL_ADC_ConfigChannel+0xa5c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d133      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
 8004b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d12d      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba8 <HAL_ADC_ConfigChannel+0xa44>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d128      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_ADC_ConfigChannel+0x9e6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa40>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x9ea>
 8004b4a:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004b4c:	e000      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x9ec>
 8004b4e:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <HAL_ADC_ConfigChannel+0xa38>)
 8004b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f7fe f89d 	bl	8002c9a <LL_ADC_SetCommonPathInternalCh>
 8004b60:	e012      	b.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b66:	f043 0220 	orr.w	r2, r3, #32
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004b74:	e008      	b.n	8004b88 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b90:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	37e4      	adds	r7, #228	@ 0xe4
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd90      	pop	{r4, r7, pc}
 8004b9c:	58026300 	.word	0x58026300
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40022100 	.word	0x40022100
 8004ba8:	58026000 	.word	0x58026000
 8004bac:	c7520000 	.word	0xc7520000
 8004bb0:	40022300 	.word	0x40022300
 8004bb4:	2400000c 	.word	0x2400000c
 8004bb8:	053e2d63 	.word	0x053e2d63
 8004bbc:	c3210000 	.word	0xc3210000
 8004bc0:	cb840000 	.word	0xcb840000

08004bc4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fb4a 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8004be0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fb6c 	bl	80032c4 <LL_ADC_INJ_IsConversionOngoing>
 8004bec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8098 	beq.w	8004d2c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02a      	beq.n	8004c60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	7e5b      	ldrb	r3, [r3, #25]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d126      	bne.n	8004c60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7e1b      	ldrb	r3, [r3, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d122      	bne.n	8004c60 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c1e:	e014      	b.n	8004c4a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4a45      	ldr	r2, [pc, #276]	@ (8004d38 <ADC_ConversionStop+0x174>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d90d      	bls.n	8004c44 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2c:	f043 0210 	orr.w	r2, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e074      	b.n	8004d2e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	d1e3      	bne.n	8004c20 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2240      	movs	r2, #64	@ 0x40
 8004c5e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d014      	beq.n	8004c90 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fb02 	bl	8003274 <LL_ADC_REG_IsConversionOngoing>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fabf 	bl	80031fe <LL_ADC_IsDisableOngoing>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fade 	bl	800324c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d014      	beq.n	8004cc0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fb12 	bl	80032c4 <LL_ADC_INJ_IsConversionOngoing>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe faa7 	bl	80031fe <LL_ADC_IsDisableOngoing>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe faee 	bl	800329c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d005      	beq.n	8004cd2 <ADC_ConversionStop+0x10e>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d105      	bne.n	8004cd8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ccc:	230c      	movs	r3, #12
 8004cce:	617b      	str	r3, [r7, #20]
        break;
 8004cd0:	e005      	b.n	8004cde <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	617b      	str	r3, [r7, #20]
        break;
 8004cd6:	e002      	b.n	8004cde <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004cd8:	2304      	movs	r3, #4
 8004cda:	617b      	str	r3, [r7, #20]
        break;
 8004cdc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cde:	f7fd ff99 	bl	8002c14 <HAL_GetTick>
 8004ce2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ce4:	e01b      	b.n	8004d1e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ce6:	f7fd ff95 	bl	8002c14 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	d914      	bls.n	8004d1e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00d      	beq.n	8004d1e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d06:	f043 0210 	orr.w	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e007      	b.n	8004d2e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1dc      	bne.n	8004ce6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	000cdbff 	.word	0x000cdbff

08004d3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe fa45 	bl	80031d8 <LL_ADC_IsEnabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d16e      	bne.n	8004e32 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	4b38      	ldr	r3, [pc, #224]	@ (8004e3c <ADC_Enable+0x100>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d66:	f043 0210 	orr.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e05a      	b.n	8004e34 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fa00 	bl	8003188 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d88:	f7fd ff44 	bl	8002c14 <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2b      	ldr	r2, [pc, #172]	@ (8004e40 <ADC_Enable+0x104>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <ADC_Enable+0x66>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a29      	ldr	r2, [pc, #164]	@ (8004e44 <ADC_Enable+0x108>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <ADC_Enable+0x6a>
 8004da2:	4b29      	ldr	r3, [pc, #164]	@ (8004e48 <ADC_Enable+0x10c>)
 8004da4:	e000      	b.n	8004da8 <ADC_Enable+0x6c>
 8004da6:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <ADC_Enable+0x110>)
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe f983 	bl	80030b4 <LL_ADC_GetMultimode>
 8004dae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <ADC_Enable+0x108>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d002      	beq.n	8004dc0 <ADC_Enable+0x84>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	e000      	b.n	8004dc2 <ADC_Enable+0x86>
 8004dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <ADC_Enable+0x104>)
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02c      	beq.n	8004e24 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d130      	bne.n	8004e32 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dd0:	e028      	b.n	8004e24 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe f9fe 	bl	80031d8 <LL_ADC_IsEnabled>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe f9ce 	bl	8003188 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dec:	f7fd ff12 	bl	8002c14 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d914      	bls.n	8004e24 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d00d      	beq.n	8004e24 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0c:	f043 0210 	orr.w	r2, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e007      	b.n	8004e34 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d1cf      	bne.n	8004dd2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	8000003f 	.word	0x8000003f
 8004e40:	40022000 	.word	0x40022000
 8004e44:	40022100 	.word	0x40022100
 8004e48:	40022300 	.word	0x40022300
 8004e4c:	58026300 	.word	0x58026300

08004e50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe f9ce 	bl	80031fe <LL_ADC_IsDisableOngoing>
 8004e62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe f9b5 	bl	80031d8 <LL_ADC_IsEnabled>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d047      	beq.n	8004f04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d144      	bne.n	8004f04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030d 	and.w	r3, r3, #13
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10c      	bne.n	8004ea2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe f98f 	bl	80031b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2203      	movs	r2, #3
 8004e98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e9a:	f7fd febb 	bl	8002c14 <HAL_GetTick>
 8004e9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ea0:	e029      	b.n	8004ef6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea6:	f043 0210 	orr.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e023      	b.n	8004f06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ebe:	f7fd fea9 	bl	8002c14 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d914      	bls.n	8004ef6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ede:	f043 0210 	orr.w	r2, r3, #16
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eea:	f043 0201 	orr.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e007      	b.n	8004f06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1dc      	bne.n	8004ebe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d14b      	bne.n	8004fc0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d021      	beq.n	8004f86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd ffba 	bl	8002ec0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d032      	beq.n	8004fb8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d12b      	bne.n	8004fb8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11f      	bne.n	8004fb8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f84:	e018      	b.n	8004fb8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d111      	bne.n	8004fb8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d105      	bne.n	8004fb8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7fc fb83 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fbe:	e00e      	b.n	8004fde <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff f8bf 	bl	8004150 <HAL_ADC_ErrorCallback>
}
 8004fd2:	e004      	b.n	8004fde <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	4798      	blx	r3
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff f897 	bl	8004128 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005014:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005020:	f043 0204 	orr.w	r2, r3, #4
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff f891 	bl	8004150 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a6c      	ldr	r2, [pc, #432]	@ (80051f8 <ADC_ConfigureBoostMode+0x1c0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <ADC_ConfigureBoostMode+0x1c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6b      	ldr	r2, [pc, #428]	@ (80051fc <ADC_ConfigureBoostMode+0x1c4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <ADC_ConfigureBoostMode+0x30>
 8005054:	4b6a      	ldr	r3, [pc, #424]	@ (8005200 <ADC_ConfigureBoostMode+0x1c8>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e008      	b.n	800507a <ADC_ConfigureBoostMode+0x42>
 8005068:	4b66      	ldr	r3, [pc, #408]	@ (8005204 <ADC_ConfigureBoostMode+0x1cc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01c      	beq.n	80050b8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800507e:	f004 fec7 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8005082:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800508c:	d010      	beq.n	80050b0 <ADC_ConfigureBoostMode+0x78>
 800508e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005092:	d873      	bhi.n	800517c <ADC_ConfigureBoostMode+0x144>
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d002      	beq.n	80050a0 <ADC_ConfigureBoostMode+0x68>
 800509a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800509e:	d16d      	bne.n	800517c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	60fb      	str	r3, [r7, #12]
        break;
 80050ae:	e068      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	60fb      	str	r3, [r7, #12]
        break;
 80050b6:	e064      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80050b8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	f006 f8a2 	bl	800b208 <HAL_RCCEx_GetPeriphCLKFreq>
 80050c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80050ce:	d051      	beq.n	8005174 <ADC_ConfigureBoostMode+0x13c>
 80050d0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80050d4:	d854      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 80050d6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80050da:	d047      	beq.n	800516c <ADC_ConfigureBoostMode+0x134>
 80050dc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80050e0:	d84e      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 80050e2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80050e6:	d03d      	beq.n	8005164 <ADC_ConfigureBoostMode+0x12c>
 80050e8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80050ec:	d848      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 80050ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050f2:	d033      	beq.n	800515c <ADC_ConfigureBoostMode+0x124>
 80050f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050f8:	d842      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 80050fa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80050fe:	d029      	beq.n	8005154 <ADC_ConfigureBoostMode+0x11c>
 8005100:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005104:	d83c      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 8005106:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800510a:	d01a      	beq.n	8005142 <ADC_ConfigureBoostMode+0x10a>
 800510c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005110:	d836      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 8005112:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005116:	d014      	beq.n	8005142 <ADC_ConfigureBoostMode+0x10a>
 8005118:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800511c:	d830      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005122:	d00e      	beq.n	8005142 <ADC_ConfigureBoostMode+0x10a>
 8005124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005128:	d82a      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 800512a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800512e:	d008      	beq.n	8005142 <ADC_ConfigureBoostMode+0x10a>
 8005130:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005134:	d824      	bhi.n	8005180 <ADC_ConfigureBoostMode+0x148>
 8005136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800513a:	d002      	beq.n	8005142 <ADC_ConfigureBoostMode+0x10a>
 800513c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005140:	d11e      	bne.n	8005180 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0c9b      	lsrs	r3, r3, #18
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	60fb      	str	r3, [r7, #12]
        break;
 8005152:	e016      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	60fb      	str	r3, [r7, #12]
        break;
 800515a:	e012      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	60fb      	str	r3, [r7, #12]
        break;
 8005162:	e00e      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	60fb      	str	r3, [r7, #12]
        break;
 800516a:	e00a      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	09db      	lsrs	r3, r3, #7
 8005170:	60fb      	str	r3, [r7, #12]
        break;
 8005172:	e006      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	60fb      	str	r3, [r7, #12]
        break;
 800517a:	e002      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
        break;
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005180:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a1f      	ldr	r2, [pc, #124]	@ (8005208 <ADC_ConfigureBoostMode+0x1d0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d808      	bhi.n	80051a2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800519e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80051a0:	e025      	b.n	80051ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a19      	ldr	r2, [pc, #100]	@ (800520c <ADC_ConfigureBoostMode+0x1d4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d80a      	bhi.n	80051c0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051bc:	609a      	str	r2, [r3, #8]
}
 80051be:	e016      	b.n	80051ee <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a13      	ldr	r2, [pc, #76]	@ (8005210 <ADC_ConfigureBoostMode+0x1d8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d80a      	bhi.n	80051de <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	e007      	b.n	80051ee <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051ec:	609a      	str	r2, [r3, #8]
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40022000 	.word	0x40022000
 80051fc:	40022100 	.word	0x40022100
 8005200:	40022300 	.word	0x40022300
 8005204:	58026300 	.word	0x58026300
 8005208:	005f5e10 	.word	0x005f5e10
 800520c:	00bebc20 	.word	0x00bebc20
 8005210:	017d7840 	.word	0x017d7840

08005214 <LL_ADC_IsEnabled>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <LL_ADC_IsEnabled+0x18>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <LL_ADC_IsEnabled+0x1a>
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <LL_ADC_REG_IsConversionOngoing>:
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b04      	cmp	r3, #4
 800524c:	d101      	bne.n	8005252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b0a3      	sub	sp, #140	@ 0x8c
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0c1      	b.n	8005466 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a5e      	ldr	r2, [pc, #376]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d102      	bne.n	8005302 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e001      	b.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005310:	f043 0220 	orr.w	r2, r3, #32
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0a0      	b.n	8005466 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ff87 	bl	800523a <LL_ADC_REG_IsConversionOngoing>
 800532c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff80 	bl	800523a <LL_ADC_REG_IsConversionOngoing>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8081 	bne.w	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d17c      	bne.n	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a48      	ldr	r2, [pc, #288]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a46      	ldr	r2, [pc, #280]	@ (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d101      	bne.n	8005362 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800535e:	4b46      	ldr	r3, [pc, #280]	@ (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005360:	e000      	b.n	8005364 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005362:	4b46      	ldr	r3, [pc, #280]	@ (800547c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005364:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d039      	beq.n	80053e2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800536e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	431a      	orrs	r2, r3
 800537c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800537e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a3a      	ldr	r2, [pc, #232]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a39      	ldr	r2, [pc, #228]	@ (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10e      	bne.n	80053b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005394:	4836      	ldr	r0, [pc, #216]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005396:	f7ff ff3d 	bl	8005214 <LL_ADC_IsEnabled>
 800539a:	4604      	mov	r4, r0
 800539c:	4835      	ldr	r0, [pc, #212]	@ (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800539e:	f7ff ff39 	bl	8005214 <LL_ADC_IsEnabled>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4323      	orrs	r3, r4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	bf0c      	ite	eq
 80053aa:	2301      	moveq	r3, #1
 80053ac:	2300      	movne	r3, #0
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	e008      	b.n	80053c4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80053b2:	4833      	ldr	r0, [pc, #204]	@ (8005480 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80053b4:	f7ff ff2e 	bl	8005214 <LL_ADC_IsEnabled>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d047      	beq.n	8005458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005484 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	6811      	ldr	r1, [r2, #0]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	6892      	ldr	r2, [r2, #8]
 80053d8:	430a      	orrs	r2, r1
 80053da:	431a      	orrs	r2, r3
 80053dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053de:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053e0:	e03a      	b.n	8005458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80053e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10e      	bne.n	8005420 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005402:	481b      	ldr	r0, [pc, #108]	@ (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005404:	f7ff ff06 	bl	8005214 <LL_ADC_IsEnabled>
 8005408:	4604      	mov	r4, r0
 800540a:	481a      	ldr	r0, [pc, #104]	@ (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800540c:	f7ff ff02 	bl	8005214 <LL_ADC_IsEnabled>
 8005410:	4603      	mov	r3, r0
 8005412:	4323      	orrs	r3, r4
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e008      	b.n	8005432 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005420:	4817      	ldr	r0, [pc, #92]	@ (8005480 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005422:	f7ff fef7 	bl	8005214 <LL_ADC_IsEnabled>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005436:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b12      	ldr	r3, [pc, #72]	@ (8005484 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800543c:	4013      	ands	r3, r2
 800543e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005440:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005442:	e009      	b.n	8005458 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005456:	e000      	b.n	800545a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005458:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005462:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005466:	4618      	mov	r0, r3
 8005468:	378c      	adds	r7, #140	@ 0x8c
 800546a:	46bd      	mov	sp, r7
 800546c:	bd90      	pop	{r4, r7, pc}
 800546e:	bf00      	nop
 8005470:	40022000 	.word	0x40022000
 8005474:	40022100 	.word	0x40022100
 8005478:	40022300 	.word	0x40022300
 800547c:	58026300 	.word	0x58026300
 8005480:	58026000 	.word	0x58026000
 8005484:	fffff0e0 	.word	0xfffff0e0

08005488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <__NVIC_SetPriorityGrouping+0x40>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054a4:	4013      	ands	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <__NVIC_SetPriorityGrouping+0x44>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054b6:	4a04      	ldr	r2, [pc, #16]	@ (80054c8 <__NVIC_SetPriorityGrouping+0x40>)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	60d3      	str	r3, [r2, #12]
}
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	e000ed00 	.word	0xe000ed00
 80054cc:	05fa0000 	.word	0x05fa0000

080054d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054d4:	4b04      	ldr	r3, [pc, #16]	@ (80054e8 <__NVIC_GetPriorityGrouping+0x18>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	0a1b      	lsrs	r3, r3, #8
 80054da:	f003 0307 	and.w	r3, r3, #7
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	e000ed00 	.word	0xe000ed00

080054ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	db0b      	blt.n	8005516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	f003 021f 	and.w	r2, r3, #31
 8005504:	4907      	ldr	r1, [pc, #28]	@ (8005524 <__NVIC_EnableIRQ+0x38>)
 8005506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	2001      	movs	r0, #1
 800550e:	fa00 f202 	lsl.w	r2, r0, r2
 8005512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	e000e100 	.word	0xe000e100

08005528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	6039      	str	r1, [r7, #0]
 8005532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005538:	2b00      	cmp	r3, #0
 800553a:	db0a      	blt.n	8005552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	b2da      	uxtb	r2, r3
 8005540:	490c      	ldr	r1, [pc, #48]	@ (8005574 <__NVIC_SetPriority+0x4c>)
 8005542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005546:	0112      	lsls	r2, r2, #4
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	440b      	add	r3, r1
 800554c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005550:	e00a      	b.n	8005568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	4908      	ldr	r1, [pc, #32]	@ (8005578 <__NVIC_SetPriority+0x50>)
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	3b04      	subs	r3, #4
 8005560:	0112      	lsls	r2, r2, #4
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	440b      	add	r3, r1
 8005566:	761a      	strb	r2, [r3, #24]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	e000e100 	.word	0xe000e100
 8005578:	e000ed00 	.word	0xe000ed00

0800557c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	@ 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f1c3 0307 	rsb	r3, r3, #7
 8005596:	2b04      	cmp	r3, #4
 8005598:	bf28      	it	cs
 800559a:	2304      	movcs	r3, #4
 800559c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3304      	adds	r3, #4
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d902      	bls.n	80055ac <NVIC_EncodePriority+0x30>
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3b03      	subs	r3, #3
 80055aa:	e000      	b.n	80055ae <NVIC_EncodePriority+0x32>
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43da      	mvns	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	401a      	ands	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055c4:	f04f 31ff 	mov.w	r1, #4294967295
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	fa01 f303 	lsl.w	r3, r1, r3
 80055ce:	43d9      	mvns	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d4:	4313      	orrs	r3, r2
         );
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3724      	adds	r7, #36	@ 0x24
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055f4:	d301      	bcc.n	80055fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055f6:	2301      	movs	r3, #1
 80055f8:	e00f      	b.n	800561a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005624 <SysTick_Config+0x40>)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005602:	210f      	movs	r1, #15
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	f7ff ff8e 	bl	8005528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800560c:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <SysTick_Config+0x40>)
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005612:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <SysTick_Config+0x40>)
 8005614:	2207      	movs	r2, #7
 8005616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	e000e010 	.word	0xe000e010

08005628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff29 	bl	8005488 <__NVIC_SetPriorityGrouping>
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b086      	sub	sp, #24
 8005642:	af00      	add	r7, sp, #0
 8005644:	4603      	mov	r3, r0
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800564c:	f7ff ff40 	bl	80054d0 <__NVIC_GetPriorityGrouping>
 8005650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f7ff ff90 	bl	800557c <NVIC_EncodePriority>
 800565c:	4602      	mov	r2, r0
 800565e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005662:	4611      	mov	r1, r2
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ff5f 	bl	8005528 <__NVIC_SetPriority>
}
 800566a:	bf00      	nop
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	4603      	mov	r3, r0
 800567a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800567c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff ff33 	bl	80054ec <__NVIC_EnableIRQ>
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff ffa4 	bl	80055e4 <SysTick_Config>
 800569c:	4603      	mov	r3, r0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80056b0:	f7fd fab0 	bl	8002c14 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e312      	b.n	8005ce6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a66      	ldr	r2, [pc, #408]	@ (8005860 <HAL_DMA_Init+0x1b8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d04a      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a65      	ldr	r2, [pc, #404]	@ (8005864 <HAL_DMA_Init+0x1bc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d045      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a63      	ldr	r2, [pc, #396]	@ (8005868 <HAL_DMA_Init+0x1c0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d040      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a62      	ldr	r2, [pc, #392]	@ (800586c <HAL_DMA_Init+0x1c4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d03b      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a60      	ldr	r2, [pc, #384]	@ (8005870 <HAL_DMA_Init+0x1c8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d036      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005874 <HAL_DMA_Init+0x1cc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d031      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a5d      	ldr	r2, [pc, #372]	@ (8005878 <HAL_DMA_Init+0x1d0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02c      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a5c      	ldr	r2, [pc, #368]	@ (800587c <HAL_DMA_Init+0x1d4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d027      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a5a      	ldr	r2, [pc, #360]	@ (8005880 <HAL_DMA_Init+0x1d8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a59      	ldr	r2, [pc, #356]	@ (8005884 <HAL_DMA_Init+0x1dc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d01d      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a57      	ldr	r2, [pc, #348]	@ (8005888 <HAL_DMA_Init+0x1e0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a56      	ldr	r2, [pc, #344]	@ (800588c <HAL_DMA_Init+0x1e4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a54      	ldr	r2, [pc, #336]	@ (8005890 <HAL_DMA_Init+0x1e8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a53      	ldr	r2, [pc, #332]	@ (8005894 <HAL_DMA_Init+0x1ec>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a51      	ldr	r2, [pc, #324]	@ (8005898 <HAL_DMA_Init+0x1f0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_DMA_Init+0xb8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a50      	ldr	r2, [pc, #320]	@ (800589c <HAL_DMA_Init+0x1f4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_DMA_Init+0xbc>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_DMA_Init+0xbe>
 8005764:	2300      	movs	r3, #0
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 813c 	beq.w	80059e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a37      	ldr	r2, [pc, #220]	@ (8005860 <HAL_DMA_Init+0x1b8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d04a      	beq.n	800581c <HAL_DMA_Init+0x174>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a36      	ldr	r2, [pc, #216]	@ (8005864 <HAL_DMA_Init+0x1bc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d045      	beq.n	800581c <HAL_DMA_Init+0x174>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a34      	ldr	r2, [pc, #208]	@ (8005868 <HAL_DMA_Init+0x1c0>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d040      	beq.n	800581c <HAL_DMA_Init+0x174>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a33      	ldr	r2, [pc, #204]	@ (800586c <HAL_DMA_Init+0x1c4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d03b      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a31      	ldr	r2, [pc, #196]	@ (8005870 <HAL_DMA_Init+0x1c8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d036      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a30      	ldr	r2, [pc, #192]	@ (8005874 <HAL_DMA_Init+0x1cc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d031      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <HAL_DMA_Init+0x1d0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d02c      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2d      	ldr	r2, [pc, #180]	@ (800587c <HAL_DMA_Init+0x1d4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d027      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005880 <HAL_DMA_Init+0x1d8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d022      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a2a      	ldr	r2, [pc, #168]	@ (8005884 <HAL_DMA_Init+0x1dc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d01d      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a28      	ldr	r2, [pc, #160]	@ (8005888 <HAL_DMA_Init+0x1e0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a27      	ldr	r2, [pc, #156]	@ (800588c <HAL_DMA_Init+0x1e4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a25      	ldr	r2, [pc, #148]	@ (8005890 <HAL_DMA_Init+0x1e8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00e      	beq.n	800581c <HAL_DMA_Init+0x174>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a24      	ldr	r2, [pc, #144]	@ (8005894 <HAL_DMA_Init+0x1ec>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d009      	beq.n	800581c <HAL_DMA_Init+0x174>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <HAL_DMA_Init+0x1f0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_DMA_Init+0x174>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a21      	ldr	r2, [pc, #132]	@ (800589c <HAL_DMA_Init+0x1f4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d108      	bne.n	800582e <HAL_DMA_Init+0x186>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	e007      	b.n	800583e <HAL_DMA_Init+0x196>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800583e:	e02f      	b.n	80058a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005840:	f7fd f9e8 	bl	8002c14 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b05      	cmp	r3, #5
 800584c:	d928      	bls.n	80058a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2203      	movs	r2, #3
 8005858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e242      	b.n	8005ce6 <HAL_DMA_Init+0x63e>
 8005860:	40020010 	.word	0x40020010
 8005864:	40020028 	.word	0x40020028
 8005868:	40020040 	.word	0x40020040
 800586c:	40020058 	.word	0x40020058
 8005870:	40020070 	.word	0x40020070
 8005874:	40020088 	.word	0x40020088
 8005878:	400200a0 	.word	0x400200a0
 800587c:	400200b8 	.word	0x400200b8
 8005880:	40020410 	.word	0x40020410
 8005884:	40020428 	.word	0x40020428
 8005888:	40020440 	.word	0x40020440
 800588c:	40020458 	.word	0x40020458
 8005890:	40020470 	.word	0x40020470
 8005894:	40020488 	.word	0x40020488
 8005898:	400204a0 	.word	0x400204a0
 800589c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1c8      	bne.n	8005840 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4b83      	ldr	r3, [pc, #524]	@ (8005ac8 <HAL_DMA_Init+0x420>)
 80058ba:	4013      	ands	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80058c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d107      	bne.n	8005904 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	4313      	orrs	r3, r2
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b28      	cmp	r3, #40	@ 0x28
 800590a:	d903      	bls.n	8005914 <HAL_DMA_Init+0x26c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b2e      	cmp	r3, #46	@ 0x2e
 8005912:	d91f      	bls.n	8005954 <HAL_DMA_Init+0x2ac>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b3e      	cmp	r3, #62	@ 0x3e
 800591a:	d903      	bls.n	8005924 <HAL_DMA_Init+0x27c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b42      	cmp	r3, #66	@ 0x42
 8005922:	d917      	bls.n	8005954 <HAL_DMA_Init+0x2ac>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b46      	cmp	r3, #70	@ 0x46
 800592a:	d903      	bls.n	8005934 <HAL_DMA_Init+0x28c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b48      	cmp	r3, #72	@ 0x48
 8005932:	d90f      	bls.n	8005954 <HAL_DMA_Init+0x2ac>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b4e      	cmp	r3, #78	@ 0x4e
 800593a:	d903      	bls.n	8005944 <HAL_DMA_Init+0x29c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b52      	cmp	r3, #82	@ 0x52
 8005942:	d907      	bls.n	8005954 <HAL_DMA_Init+0x2ac>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b73      	cmp	r3, #115	@ 0x73
 800594a:	d905      	bls.n	8005958 <HAL_DMA_Init+0x2b0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b77      	cmp	r3, #119	@ 0x77
 8005952:	d801      	bhi.n	8005958 <HAL_DMA_Init+0x2b0>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <HAL_DMA_Init+0x2b2>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005964:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0307 	bic.w	r3, r3, #7
 800597c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	2b04      	cmp	r3, #4
 800598e:	d117      	bne.n	80059c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fdca 	bl	800753c <DMA_CheckFifoParam>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2240      	movs	r2, #64	@ 0x40
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e192      	b.n	8005ce6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fd05 	bl	80073d8 <DMA_CalcBaseAndBitshift>
 80059ce:	4603      	mov	r3, r0
 80059d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	223f      	movs	r2, #63	@ 0x3f
 80059dc:	409a      	lsls	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	e0c8      	b.n	8005b76 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a38      	ldr	r2, [pc, #224]	@ (8005acc <HAL_DMA_Init+0x424>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d022      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <HAL_DMA_Init+0x428>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d01d      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a35      	ldr	r2, [pc, #212]	@ (8005ad4 <HAL_DMA_Init+0x42c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d018      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a34      	ldr	r2, [pc, #208]	@ (8005ad8 <HAL_DMA_Init+0x430>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a32      	ldr	r2, [pc, #200]	@ (8005adc <HAL_DMA_Init+0x434>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a31      	ldr	r2, [pc, #196]	@ (8005ae0 <HAL_DMA_Init+0x438>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae4 <HAL_DMA_Init+0x43c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_DMA_Init+0x38c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae8 <HAL_DMA_Init+0x440>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d101      	bne.n	8005a38 <HAL_DMA_Init+0x390>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_DMA_Init+0x392>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8092 	beq.w	8005b64 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a21      	ldr	r2, [pc, #132]	@ (8005acc <HAL_DMA_Init+0x424>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d021      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a20      	ldr	r2, [pc, #128]	@ (8005ad0 <HAL_DMA_Init+0x428>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01c      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad4 <HAL_DMA_Init+0x42c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d017      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <HAL_DMA_Init+0x430>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d012      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005adc <HAL_DMA_Init+0x434>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00d      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae0 <HAL_DMA_Init+0x438>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d008      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <HAL_DMA_Init+0x43c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <HAL_DMA_Init+0x3e6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a17      	ldr	r2, [pc, #92]	@ (8005ae8 <HAL_DMA_Init+0x440>)
 8005a8c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4b10      	ldr	r3, [pc, #64]	@ (8005aec <HAL_DMA_Init+0x444>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b40      	cmp	r3, #64	@ 0x40
 8005ab4:	d01c      	beq.n	8005af0 <HAL_DMA_Init+0x448>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b80      	cmp	r3, #128	@ 0x80
 8005abc:	d102      	bne.n	8005ac4 <HAL_DMA_Init+0x41c>
 8005abe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ac2:	e016      	b.n	8005af2 <HAL_DMA_Init+0x44a>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e014      	b.n	8005af2 <HAL_DMA_Init+0x44a>
 8005ac8:	fe10803f 	.word	0xfe10803f
 8005acc:	58025408 	.word	0x58025408
 8005ad0:	5802541c 	.word	0x5802541c
 8005ad4:	58025430 	.word	0x58025430
 8005ad8:	58025444 	.word	0x58025444
 8005adc:	58025458 	.word	0x58025458
 8005ae0:	5802546c 	.word	0x5802546c
 8005ae4:	58025480 	.word	0x58025480
 8005ae8:	58025494 	.word	0x58025494
 8005aec:	fffe000f 	.word	0xfffe000f
 8005af0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68d2      	ldr	r2, [r2, #12]
 8005af6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005af8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	4b6e      	ldr	r3, [pc, #440]	@ (8005cf0 <HAL_DMA_Init+0x648>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8005cf4 <HAL_DMA_Init+0x64c>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	009a      	lsls	r2, r3, #2
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 fc45 	bl	80073d8 <DMA_CalcBaseAndBitshift>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b56:	f003 031f 	and.w	r3, r3, #31
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	e008      	b.n	8005b76 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2240      	movs	r2, #64	@ 0x40
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0b7      	b.n	8005ce6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8005cf8 <HAL_DMA_Init+0x650>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d072      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a5d      	ldr	r2, [pc, #372]	@ (8005cfc <HAL_DMA_Init+0x654>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d06d      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8005d00 <HAL_DMA_Init+0x658>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d068      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5a      	ldr	r2, [pc, #360]	@ (8005d04 <HAL_DMA_Init+0x65c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d063      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a59      	ldr	r2, [pc, #356]	@ (8005d08 <HAL_DMA_Init+0x660>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d05e      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a57      	ldr	r2, [pc, #348]	@ (8005d0c <HAL_DMA_Init+0x664>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d059      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a56      	ldr	r2, [pc, #344]	@ (8005d10 <HAL_DMA_Init+0x668>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d054      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a54      	ldr	r2, [pc, #336]	@ (8005d14 <HAL_DMA_Init+0x66c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d04f      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a53      	ldr	r2, [pc, #332]	@ (8005d18 <HAL_DMA_Init+0x670>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d04a      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a51      	ldr	r2, [pc, #324]	@ (8005d1c <HAL_DMA_Init+0x674>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d045      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a50      	ldr	r2, [pc, #320]	@ (8005d20 <HAL_DMA_Init+0x678>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d040      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4e      	ldr	r2, [pc, #312]	@ (8005d24 <HAL_DMA_Init+0x67c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d03b      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a4d      	ldr	r2, [pc, #308]	@ (8005d28 <HAL_DMA_Init+0x680>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d036      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8005d2c <HAL_DMA_Init+0x684>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d031      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a4a      	ldr	r2, [pc, #296]	@ (8005d30 <HAL_DMA_Init+0x688>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d02c      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a48      	ldr	r2, [pc, #288]	@ (8005d34 <HAL_DMA_Init+0x68c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d027      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a47      	ldr	r2, [pc, #284]	@ (8005d38 <HAL_DMA_Init+0x690>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d022      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a45      	ldr	r2, [pc, #276]	@ (8005d3c <HAL_DMA_Init+0x694>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01d      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a44      	ldr	r2, [pc, #272]	@ (8005d40 <HAL_DMA_Init+0x698>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d018      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a42      	ldr	r2, [pc, #264]	@ (8005d44 <HAL_DMA_Init+0x69c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d013      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a41      	ldr	r2, [pc, #260]	@ (8005d48 <HAL_DMA_Init+0x6a0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00e      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <HAL_DMA_Init+0x6a4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d009      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	@ (8005d50 <HAL_DMA_Init+0x6a8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d004      	beq.n	8005c66 <HAL_DMA_Init+0x5be>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a3c      	ldr	r2, [pc, #240]	@ (8005d54 <HAL_DMA_Init+0x6ac>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d101      	bne.n	8005c6a <HAL_DMA_Init+0x5c2>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <HAL_DMA_Init+0x5c4>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d032      	beq.n	8005cd6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fcdf 	bl	8007634 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b80      	cmp	r3, #128	@ 0x80
 8005c7c:	d102      	bne.n	8005c84 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <HAL_DMA_Init+0x61c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d80c      	bhi.n	8005cc4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fd5c 	bl	8007768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	e008      	b.n	8005cd6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	a7fdabf8 	.word	0xa7fdabf8
 8005cf4:	cccccccd 	.word	0xcccccccd
 8005cf8:	40020010 	.word	0x40020010
 8005cfc:	40020028 	.word	0x40020028
 8005d00:	40020040 	.word	0x40020040
 8005d04:	40020058 	.word	0x40020058
 8005d08:	40020070 	.word	0x40020070
 8005d0c:	40020088 	.word	0x40020088
 8005d10:	400200a0 	.word	0x400200a0
 8005d14:	400200b8 	.word	0x400200b8
 8005d18:	40020410 	.word	0x40020410
 8005d1c:	40020428 	.word	0x40020428
 8005d20:	40020440 	.word	0x40020440
 8005d24:	40020458 	.word	0x40020458
 8005d28:	40020470 	.word	0x40020470
 8005d2c:	40020488 	.word	0x40020488
 8005d30:	400204a0 	.word	0x400204a0
 8005d34:	400204b8 	.word	0x400204b8
 8005d38:	58025408 	.word	0x58025408
 8005d3c:	5802541c 	.word	0x5802541c
 8005d40:	58025430 	.word	0x58025430
 8005d44:	58025444 	.word	0x58025444
 8005d48:	58025458 	.word	0x58025458
 8005d4c:	5802546c 	.word	0x5802546c
 8005d50:	58025480 	.word	0x58025480
 8005d54:	58025494 	.word	0x58025494

08005d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e226      	b.n	80061c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <HAL_DMA_Start_IT+0x2a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e21f      	b.n	80061c2 <HAL_DMA_Start_IT+0x46a>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	f040 820a 	bne.w	80061ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a68      	ldr	r2, [pc, #416]	@ (8005f4c <HAL_DMA_Start_IT+0x1f4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d04a      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a66      	ldr	r2, [pc, #408]	@ (8005f50 <HAL_DMA_Start_IT+0x1f8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d045      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a65      	ldr	r2, [pc, #404]	@ (8005f54 <HAL_DMA_Start_IT+0x1fc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d040      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a63      	ldr	r2, [pc, #396]	@ (8005f58 <HAL_DMA_Start_IT+0x200>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d03b      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a62      	ldr	r2, [pc, #392]	@ (8005f5c <HAL_DMA_Start_IT+0x204>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d036      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a60      	ldr	r2, [pc, #384]	@ (8005f60 <HAL_DMA_Start_IT+0x208>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d031      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a5f      	ldr	r2, [pc, #380]	@ (8005f64 <HAL_DMA_Start_IT+0x20c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d02c      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f68 <HAL_DMA_Start_IT+0x210>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d027      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a5c      	ldr	r2, [pc, #368]	@ (8005f6c <HAL_DMA_Start_IT+0x214>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d022      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5a      	ldr	r2, [pc, #360]	@ (8005f70 <HAL_DMA_Start_IT+0x218>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01d      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a59      	ldr	r2, [pc, #356]	@ (8005f74 <HAL_DMA_Start_IT+0x21c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a57      	ldr	r2, [pc, #348]	@ (8005f78 <HAL_DMA_Start_IT+0x220>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a56      	ldr	r2, [pc, #344]	@ (8005f7c <HAL_DMA_Start_IT+0x224>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a54      	ldr	r2, [pc, #336]	@ (8005f80 <HAL_DMA_Start_IT+0x228>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a53      	ldr	r2, [pc, #332]	@ (8005f84 <HAL_DMA_Start_IT+0x22c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_DMA_Start_IT+0xee>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a51      	ldr	r2, [pc, #324]	@ (8005f88 <HAL_DMA_Start_IT+0x230>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d108      	bne.n	8005e58 <HAL_DMA_Start_IT+0x100>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e007      	b.n	8005e68 <HAL_DMA_Start_IT+0x110>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f001 f906 	bl	8007080 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a34      	ldr	r2, [pc, #208]	@ (8005f4c <HAL_DMA_Start_IT+0x1f4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d04a      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a33      	ldr	r2, [pc, #204]	@ (8005f50 <HAL_DMA_Start_IT+0x1f8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d045      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a31      	ldr	r2, [pc, #196]	@ (8005f54 <HAL_DMA_Start_IT+0x1fc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d040      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a30      	ldr	r2, [pc, #192]	@ (8005f58 <HAL_DMA_Start_IT+0x200>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d03b      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8005f5c <HAL_DMA_Start_IT+0x204>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d036      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8005f60 <HAL_DMA_Start_IT+0x208>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d031      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f64 <HAL_DMA_Start_IT+0x20c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02c      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8005f68 <HAL_DMA_Start_IT+0x210>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d027      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a28      	ldr	r2, [pc, #160]	@ (8005f6c <HAL_DMA_Start_IT+0x214>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d022      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a27      	ldr	r2, [pc, #156]	@ (8005f70 <HAL_DMA_Start_IT+0x218>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d01d      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a25      	ldr	r2, [pc, #148]	@ (8005f74 <HAL_DMA_Start_IT+0x21c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d018      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a24      	ldr	r2, [pc, #144]	@ (8005f78 <HAL_DMA_Start_IT+0x220>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d013      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a22      	ldr	r2, [pc, #136]	@ (8005f7c <HAL_DMA_Start_IT+0x224>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00e      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a21      	ldr	r2, [pc, #132]	@ (8005f80 <HAL_DMA_Start_IT+0x228>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d009      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1f      	ldr	r2, [pc, #124]	@ (8005f84 <HAL_DMA_Start_IT+0x22c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_DMA_Start_IT+0x1bc>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f88 <HAL_DMA_Start_IT+0x230>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d101      	bne.n	8005f18 <HAL_DMA_Start_IT+0x1c0>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <HAL_DMA_Start_IT+0x1c2>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d036      	beq.n	8005f8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f023 021e 	bic.w	r2, r3, #30
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0216 	orr.w	r2, r2, #22
 8005f30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d03e      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0208 	orr.w	r2, r2, #8
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e035      	b.n	8005fb8 <HAL_DMA_Start_IT+0x260>
 8005f4c:	40020010 	.word	0x40020010
 8005f50:	40020028 	.word	0x40020028
 8005f54:	40020040 	.word	0x40020040
 8005f58:	40020058 	.word	0x40020058
 8005f5c:	40020070 	.word	0x40020070
 8005f60:	40020088 	.word	0x40020088
 8005f64:	400200a0 	.word	0x400200a0
 8005f68:	400200b8 	.word	0x400200b8
 8005f6c:	40020410 	.word	0x40020410
 8005f70:	40020428 	.word	0x40020428
 8005f74:	40020440 	.word	0x40020440
 8005f78:	40020458 	.word	0x40020458
 8005f7c:	40020470 	.word	0x40020470
 8005f80:	40020488 	.word	0x40020488
 8005f84:	400204a0 	.word	0x400204a0
 8005f88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 020e 	bic.w	r2, r3, #14
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 020a 	orr.w	r2, r2, #10
 8005f9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0204 	orr.w	r2, r2, #4
 8005fb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a83      	ldr	r2, [pc, #524]	@ (80061cc <HAL_DMA_Start_IT+0x474>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d072      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a82      	ldr	r2, [pc, #520]	@ (80061d0 <HAL_DMA_Start_IT+0x478>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d06d      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a80      	ldr	r2, [pc, #512]	@ (80061d4 <HAL_DMA_Start_IT+0x47c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d068      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a7f      	ldr	r2, [pc, #508]	@ (80061d8 <HAL_DMA_Start_IT+0x480>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d063      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a7d      	ldr	r2, [pc, #500]	@ (80061dc <HAL_DMA_Start_IT+0x484>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d05e      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7c      	ldr	r2, [pc, #496]	@ (80061e0 <HAL_DMA_Start_IT+0x488>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d059      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80061e4 <HAL_DMA_Start_IT+0x48c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d054      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a79      	ldr	r2, [pc, #484]	@ (80061e8 <HAL_DMA_Start_IT+0x490>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d04f      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a77      	ldr	r2, [pc, #476]	@ (80061ec <HAL_DMA_Start_IT+0x494>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d04a      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a76      	ldr	r2, [pc, #472]	@ (80061f0 <HAL_DMA_Start_IT+0x498>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d045      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a74      	ldr	r2, [pc, #464]	@ (80061f4 <HAL_DMA_Start_IT+0x49c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d040      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a73      	ldr	r2, [pc, #460]	@ (80061f8 <HAL_DMA_Start_IT+0x4a0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d03b      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a71      	ldr	r2, [pc, #452]	@ (80061fc <HAL_DMA_Start_IT+0x4a4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d036      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a70      	ldr	r2, [pc, #448]	@ (8006200 <HAL_DMA_Start_IT+0x4a8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d031      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6e      	ldr	r2, [pc, #440]	@ (8006204 <HAL_DMA_Start_IT+0x4ac>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02c      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6d      	ldr	r2, [pc, #436]	@ (8006208 <HAL_DMA_Start_IT+0x4b0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d027      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a6b      	ldr	r2, [pc, #428]	@ (800620c <HAL_DMA_Start_IT+0x4b4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d022      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6a      	ldr	r2, [pc, #424]	@ (8006210 <HAL_DMA_Start_IT+0x4b8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d01d      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a68      	ldr	r2, [pc, #416]	@ (8006214 <HAL_DMA_Start_IT+0x4bc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d018      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a67      	ldr	r2, [pc, #412]	@ (8006218 <HAL_DMA_Start_IT+0x4c0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a65      	ldr	r2, [pc, #404]	@ (800621c <HAL_DMA_Start_IT+0x4c4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00e      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a64      	ldr	r2, [pc, #400]	@ (8006220 <HAL_DMA_Start_IT+0x4c8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d009      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a62      	ldr	r2, [pc, #392]	@ (8006224 <HAL_DMA_Start_IT+0x4cc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_DMA_Start_IT+0x350>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a61      	ldr	r2, [pc, #388]	@ (8006228 <HAL_DMA_Start_IT+0x4d0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d101      	bne.n	80060ac <HAL_DMA_Start_IT+0x354>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <HAL_DMA_Start_IT+0x356>
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01a      	beq.n	80060e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a37      	ldr	r2, [pc, #220]	@ (80061cc <HAL_DMA_Start_IT+0x474>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d04a      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a36      	ldr	r2, [pc, #216]	@ (80061d0 <HAL_DMA_Start_IT+0x478>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d045      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a34      	ldr	r2, [pc, #208]	@ (80061d4 <HAL_DMA_Start_IT+0x47c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d040      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a33      	ldr	r2, [pc, #204]	@ (80061d8 <HAL_DMA_Start_IT+0x480>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d03b      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a31      	ldr	r2, [pc, #196]	@ (80061dc <HAL_DMA_Start_IT+0x484>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d036      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a30      	ldr	r2, [pc, #192]	@ (80061e0 <HAL_DMA_Start_IT+0x488>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d031      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2e      	ldr	r2, [pc, #184]	@ (80061e4 <HAL_DMA_Start_IT+0x48c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02c      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a2d      	ldr	r2, [pc, #180]	@ (80061e8 <HAL_DMA_Start_IT+0x490>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d027      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a2b      	ldr	r2, [pc, #172]	@ (80061ec <HAL_DMA_Start_IT+0x494>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d022      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a2a      	ldr	r2, [pc, #168]	@ (80061f0 <HAL_DMA_Start_IT+0x498>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d01d      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a28      	ldr	r2, [pc, #160]	@ (80061f4 <HAL_DMA_Start_IT+0x49c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d018      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a27      	ldr	r2, [pc, #156]	@ (80061f8 <HAL_DMA_Start_IT+0x4a0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a25      	ldr	r2, [pc, #148]	@ (80061fc <HAL_DMA_Start_IT+0x4a4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a24      	ldr	r2, [pc, #144]	@ (8006200 <HAL_DMA_Start_IT+0x4a8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a22      	ldr	r2, [pc, #136]	@ (8006204 <HAL_DMA_Start_IT+0x4ac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <HAL_DMA_Start_IT+0x430>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	@ (8006208 <HAL_DMA_Start_IT+0x4b0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <HAL_DMA_Start_IT+0x442>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	e012      	b.n	80061c0 <HAL_DMA_Start_IT+0x468>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e009      	b.n	80061c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40020010 	.word	0x40020010
 80061d0:	40020028 	.word	0x40020028
 80061d4:	40020040 	.word	0x40020040
 80061d8:	40020058 	.word	0x40020058
 80061dc:	40020070 	.word	0x40020070
 80061e0:	40020088 	.word	0x40020088
 80061e4:	400200a0 	.word	0x400200a0
 80061e8:	400200b8 	.word	0x400200b8
 80061ec:	40020410 	.word	0x40020410
 80061f0:	40020428 	.word	0x40020428
 80061f4:	40020440 	.word	0x40020440
 80061f8:	40020458 	.word	0x40020458
 80061fc:	40020470 	.word	0x40020470
 8006200:	40020488 	.word	0x40020488
 8006204:	400204a0 	.word	0x400204a0
 8006208:	400204b8 	.word	0x400204b8
 800620c:	58025408 	.word	0x58025408
 8006210:	5802541c 	.word	0x5802541c
 8006214:	58025430 	.word	0x58025430
 8006218:	58025444 	.word	0x58025444
 800621c:	58025458 	.word	0x58025458
 8006220:	5802546c 	.word	0x5802546c
 8006224:	58025480 	.word	0x58025480
 8006228:	58025494 	.word	0x58025494

0800622c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	@ 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006238:	4b67      	ldr	r3, [pc, #412]	@ (80063d8 <HAL_DMA_IRQHandler+0x1ac>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a67      	ldr	r2, [pc, #412]	@ (80063dc <HAL_DMA_IRQHandler+0x1b0>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	0a9b      	lsrs	r3, r3, #10
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006250:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5f      	ldr	r2, [pc, #380]	@ (80063e0 <HAL_DMA_IRQHandler+0x1b4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d04a      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5d      	ldr	r2, [pc, #372]	@ (80063e4 <HAL_DMA_IRQHandler+0x1b8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d045      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a5c      	ldr	r2, [pc, #368]	@ (80063e8 <HAL_DMA_IRQHandler+0x1bc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d040      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a5a      	ldr	r2, [pc, #360]	@ (80063ec <HAL_DMA_IRQHandler+0x1c0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a59      	ldr	r2, [pc, #356]	@ (80063f0 <HAL_DMA_IRQHandler+0x1c4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d036      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a57      	ldr	r2, [pc, #348]	@ (80063f4 <HAL_DMA_IRQHandler+0x1c8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a56      	ldr	r2, [pc, #344]	@ (80063f8 <HAL_DMA_IRQHandler+0x1cc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d02c      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a54      	ldr	r2, [pc, #336]	@ (80063fc <HAL_DMA_IRQHandler+0x1d0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a53      	ldr	r2, [pc, #332]	@ (8006400 <HAL_DMA_IRQHandler+0x1d4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a51      	ldr	r2, [pc, #324]	@ (8006404 <HAL_DMA_IRQHandler+0x1d8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a50      	ldr	r2, [pc, #320]	@ (8006408 <HAL_DMA_IRQHandler+0x1dc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a4e      	ldr	r2, [pc, #312]	@ (800640c <HAL_DMA_IRQHandler+0x1e0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4d      	ldr	r2, [pc, #308]	@ (8006410 <HAL_DMA_IRQHandler+0x1e4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a4b      	ldr	r2, [pc, #300]	@ (8006414 <HAL_DMA_IRQHandler+0x1e8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006418 <HAL_DMA_IRQHandler+0x1ec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_DMA_IRQHandler+0xd2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a48      	ldr	r2, [pc, #288]	@ (800641c <HAL_DMA_IRQHandler+0x1f0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d101      	bne.n	8006302 <HAL_DMA_IRQHandler+0xd6>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_DMA_IRQHandler+0xd8>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 842b 	beq.w	8006b60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2208      	movs	r2, #8
 8006314:	409a      	lsls	r2, r3
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80a2 	beq.w	8006464 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2e      	ldr	r2, [pc, #184]	@ (80063e0 <HAL_DMA_IRQHandler+0x1b4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d04a      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2d      	ldr	r2, [pc, #180]	@ (80063e4 <HAL_DMA_IRQHandler+0x1b8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d045      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a2b      	ldr	r2, [pc, #172]	@ (80063e8 <HAL_DMA_IRQHandler+0x1bc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d040      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a2a      	ldr	r2, [pc, #168]	@ (80063ec <HAL_DMA_IRQHandler+0x1c0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d03b      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a28      	ldr	r2, [pc, #160]	@ (80063f0 <HAL_DMA_IRQHandler+0x1c4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d036      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a27      	ldr	r2, [pc, #156]	@ (80063f4 <HAL_DMA_IRQHandler+0x1c8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d031      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a25      	ldr	r2, [pc, #148]	@ (80063f8 <HAL_DMA_IRQHandler+0x1cc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d02c      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a24      	ldr	r2, [pc, #144]	@ (80063fc <HAL_DMA_IRQHandler+0x1d0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d027      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a22      	ldr	r2, [pc, #136]	@ (8006400 <HAL_DMA_IRQHandler+0x1d4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d022      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a21      	ldr	r2, [pc, #132]	@ (8006404 <HAL_DMA_IRQHandler+0x1d8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d01d      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1f      	ldr	r2, [pc, #124]	@ (8006408 <HAL_DMA_IRQHandler+0x1dc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d018      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1e      	ldr	r2, [pc, #120]	@ (800640c <HAL_DMA_IRQHandler+0x1e0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d013      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1c      	ldr	r2, [pc, #112]	@ (8006410 <HAL_DMA_IRQHandler+0x1e4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00e      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <HAL_DMA_IRQHandler+0x1e8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a19      	ldr	r2, [pc, #100]	@ (8006418 <HAL_DMA_IRQHandler+0x1ec>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x194>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a18      	ldr	r2, [pc, #96]	@ (800641c <HAL_DMA_IRQHandler+0x1f0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d12f      	bne.n	8006420 <HAL_DMA_IRQHandler+0x1f4>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e02e      	b.n	8006434 <HAL_DMA_IRQHandler+0x208>
 80063d6:	bf00      	nop
 80063d8:	2400000c 	.word	0x2400000c
 80063dc:	1b4e81b5 	.word	0x1b4e81b5
 80063e0:	40020010 	.word	0x40020010
 80063e4:	40020028 	.word	0x40020028
 80063e8:	40020040 	.word	0x40020040
 80063ec:	40020058 	.word	0x40020058
 80063f0:	40020070 	.word	0x40020070
 80063f4:	40020088 	.word	0x40020088
 80063f8:	400200a0 	.word	0x400200a0
 80063fc:	400200b8 	.word	0x400200b8
 8006400:	40020410 	.word	0x40020410
 8006404:	40020428 	.word	0x40020428
 8006408:	40020440 	.word	0x40020440
 800640c:	40020458 	.word	0x40020458
 8006410:	40020470 	.word	0x40020470
 8006414:	40020488 	.word	0x40020488
 8006418:	400204a0 	.word	0x400204a0
 800641c:	400204b8 	.word	0x400204b8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d015      	beq.n	8006464 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0204 	bic.w	r2, r2, #4
 8006446:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2208      	movs	r2, #8
 8006452:	409a      	lsls	r2, r3
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	fa22 f303 	lsr.w	r3, r2, r3
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d06e      	beq.n	8006558 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a69      	ldr	r2, [pc, #420]	@ (8006624 <HAL_DMA_IRQHandler+0x3f8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d04a      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a67      	ldr	r2, [pc, #412]	@ (8006628 <HAL_DMA_IRQHandler+0x3fc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d045      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a66      	ldr	r2, [pc, #408]	@ (800662c <HAL_DMA_IRQHandler+0x400>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d040      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a64      	ldr	r2, [pc, #400]	@ (8006630 <HAL_DMA_IRQHandler+0x404>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d03b      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a63      	ldr	r2, [pc, #396]	@ (8006634 <HAL_DMA_IRQHandler+0x408>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d036      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a61      	ldr	r2, [pc, #388]	@ (8006638 <HAL_DMA_IRQHandler+0x40c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d031      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a60      	ldr	r2, [pc, #384]	@ (800663c <HAL_DMA_IRQHandler+0x410>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d02c      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006640 <HAL_DMA_IRQHandler+0x414>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d027      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a5d      	ldr	r2, [pc, #372]	@ (8006644 <HAL_DMA_IRQHandler+0x418>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d022      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006648 <HAL_DMA_IRQHandler+0x41c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01d      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a5a      	ldr	r2, [pc, #360]	@ (800664c <HAL_DMA_IRQHandler+0x420>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d018      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a58      	ldr	r2, [pc, #352]	@ (8006650 <HAL_DMA_IRQHandler+0x424>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a57      	ldr	r2, [pc, #348]	@ (8006654 <HAL_DMA_IRQHandler+0x428>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a55      	ldr	r2, [pc, #340]	@ (8006658 <HAL_DMA_IRQHandler+0x42c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a54      	ldr	r2, [pc, #336]	@ (800665c <HAL_DMA_IRQHandler+0x430>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_DMA_IRQHandler+0x2ee>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a52      	ldr	r2, [pc, #328]	@ (8006660 <HAL_DMA_IRQHandler+0x434>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10a      	bne.n	8006530 <HAL_DMA_IRQHandler+0x304>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006524:	2b00      	cmp	r3, #0
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	e003      	b.n	8006538 <HAL_DMA_IRQHandler+0x30c>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2300      	movs	r3, #0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00d      	beq.n	8006558 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2201      	movs	r2, #1
 8006546:	409a      	lsls	r2, r3
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006550:	f043 0202 	orr.w	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2204      	movs	r2, #4
 8006562:	409a      	lsls	r2, r3
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 808f 	beq.w	800668c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <HAL_DMA_IRQHandler+0x3f8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d04a      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a2a      	ldr	r2, [pc, #168]	@ (8006628 <HAL_DMA_IRQHandler+0x3fc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d045      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a29      	ldr	r2, [pc, #164]	@ (800662c <HAL_DMA_IRQHandler+0x400>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d040      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a27      	ldr	r2, [pc, #156]	@ (8006630 <HAL_DMA_IRQHandler+0x404>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d03b      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a26      	ldr	r2, [pc, #152]	@ (8006634 <HAL_DMA_IRQHandler+0x408>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d036      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a24      	ldr	r2, [pc, #144]	@ (8006638 <HAL_DMA_IRQHandler+0x40c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d031      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a23      	ldr	r2, [pc, #140]	@ (800663c <HAL_DMA_IRQHandler+0x410>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d02c      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <HAL_DMA_IRQHandler+0x414>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d027      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a20      	ldr	r2, [pc, #128]	@ (8006644 <HAL_DMA_IRQHandler+0x418>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d022      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006648 <HAL_DMA_IRQHandler+0x41c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01d      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1d      	ldr	r2, [pc, #116]	@ (800664c <HAL_DMA_IRQHandler+0x420>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d018      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006650 <HAL_DMA_IRQHandler+0x424>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006654 <HAL_DMA_IRQHandler+0x428>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a18      	ldr	r2, [pc, #96]	@ (8006658 <HAL_DMA_IRQHandler+0x42c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d009      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a17      	ldr	r2, [pc, #92]	@ (800665c <HAL_DMA_IRQHandler+0x430>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_DMA_IRQHandler+0x3e2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a15      	ldr	r2, [pc, #84]	@ (8006660 <HAL_DMA_IRQHandler+0x434>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d12a      	bne.n	8006664 <HAL_DMA_IRQHandler+0x438>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e023      	b.n	800666c <HAL_DMA_IRQHandler+0x440>
 8006624:	40020010 	.word	0x40020010
 8006628:	40020028 	.word	0x40020028
 800662c:	40020040 	.word	0x40020040
 8006630:	40020058 	.word	0x40020058
 8006634:	40020070 	.word	0x40020070
 8006638:	40020088 	.word	0x40020088
 800663c:	400200a0 	.word	0x400200a0
 8006640:	400200b8 	.word	0x400200b8
 8006644:	40020410 	.word	0x40020410
 8006648:	40020428 	.word	0x40020428
 800664c:	40020440 	.word	0x40020440
 8006650:	40020458 	.word	0x40020458
 8006654:	40020470 	.word	0x40020470
 8006658:	40020488 	.word	0x40020488
 800665c:	400204a0 	.word	0x400204a0
 8006660:	400204b8 	.word	0x400204b8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00d      	beq.n	800668c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2204      	movs	r2, #4
 800667a:	409a      	lsls	r2, r3
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006684:	f043 0204 	orr.w	r2, r3, #4
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2210      	movs	r2, #16
 8006696:	409a      	lsls	r2, r3
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80a6 	beq.w	80067ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a85      	ldr	r2, [pc, #532]	@ (80068bc <HAL_DMA_IRQHandler+0x690>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d04a      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a83      	ldr	r2, [pc, #524]	@ (80068c0 <HAL_DMA_IRQHandler+0x694>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d045      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a82      	ldr	r2, [pc, #520]	@ (80068c4 <HAL_DMA_IRQHandler+0x698>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d040      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a80      	ldr	r2, [pc, #512]	@ (80068c8 <HAL_DMA_IRQHandler+0x69c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d03b      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a7f      	ldr	r2, [pc, #508]	@ (80068cc <HAL_DMA_IRQHandler+0x6a0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d036      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7d      	ldr	r2, [pc, #500]	@ (80068d0 <HAL_DMA_IRQHandler+0x6a4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d031      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a7c      	ldr	r2, [pc, #496]	@ (80068d4 <HAL_DMA_IRQHandler+0x6a8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d02c      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a7a      	ldr	r2, [pc, #488]	@ (80068d8 <HAL_DMA_IRQHandler+0x6ac>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d027      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a79      	ldr	r2, [pc, #484]	@ (80068dc <HAL_DMA_IRQHandler+0x6b0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d022      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a77      	ldr	r2, [pc, #476]	@ (80068e0 <HAL_DMA_IRQHandler+0x6b4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01d      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a76      	ldr	r2, [pc, #472]	@ (80068e4 <HAL_DMA_IRQHandler+0x6b8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a74      	ldr	r2, [pc, #464]	@ (80068e8 <HAL_DMA_IRQHandler+0x6bc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a73      	ldr	r2, [pc, #460]	@ (80068ec <HAL_DMA_IRQHandler+0x6c0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a71      	ldr	r2, [pc, #452]	@ (80068f0 <HAL_DMA_IRQHandler+0x6c4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a70      	ldr	r2, [pc, #448]	@ (80068f4 <HAL_DMA_IRQHandler+0x6c8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_DMA_IRQHandler+0x516>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a6e      	ldr	r2, [pc, #440]	@ (80068f8 <HAL_DMA_IRQHandler+0x6cc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10a      	bne.n	8006758 <HAL_DMA_IRQHandler+0x52c>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e009      	b.n	800676c <HAL_DMA_IRQHandler+0x540>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf14      	ite	ne
 8006766:	2301      	movne	r3, #1
 8006768:	2300      	moveq	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d03e      	beq.n	80067ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2210      	movs	r2, #16
 800677a:	409a      	lsls	r2, r3
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d018      	beq.n	80067c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d108      	bne.n	80067ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d024      	beq.n	80067ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
 80067ac:	e01f      	b.n	80067ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01b      	beq.n	80067ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
 80067be:	e016      	b.n	80067ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0208 	bic.w	r2, r2, #8
 80067dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	2220      	movs	r2, #32
 80067f8:	409a      	lsls	r2, r3
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 8110 	beq.w	8006a24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2c      	ldr	r2, [pc, #176]	@ (80068bc <HAL_DMA_IRQHandler+0x690>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d04a      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2b      	ldr	r2, [pc, #172]	@ (80068c0 <HAL_DMA_IRQHandler+0x694>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d045      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a29      	ldr	r2, [pc, #164]	@ (80068c4 <HAL_DMA_IRQHandler+0x698>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d040      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a28      	ldr	r2, [pc, #160]	@ (80068c8 <HAL_DMA_IRQHandler+0x69c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d03b      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a26      	ldr	r2, [pc, #152]	@ (80068cc <HAL_DMA_IRQHandler+0x6a0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d036      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a25      	ldr	r2, [pc, #148]	@ (80068d0 <HAL_DMA_IRQHandler+0x6a4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d031      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a23      	ldr	r2, [pc, #140]	@ (80068d4 <HAL_DMA_IRQHandler+0x6a8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d02c      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a22      	ldr	r2, [pc, #136]	@ (80068d8 <HAL_DMA_IRQHandler+0x6ac>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d027      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a20      	ldr	r2, [pc, #128]	@ (80068dc <HAL_DMA_IRQHandler+0x6b0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d022      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <HAL_DMA_IRQHandler+0x6b4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d01d      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <HAL_DMA_IRQHandler+0x6b8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d018      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <HAL_DMA_IRQHandler+0x6bc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d013      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1a      	ldr	r2, [pc, #104]	@ (80068ec <HAL_DMA_IRQHandler+0x6c0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00e      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a19      	ldr	r2, [pc, #100]	@ (80068f0 <HAL_DMA_IRQHandler+0x6c4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d009      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <HAL_DMA_IRQHandler+0x6c8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x678>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a16      	ldr	r2, [pc, #88]	@ (80068f8 <HAL_DMA_IRQHandler+0x6cc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d12b      	bne.n	80068fc <HAL_DMA_IRQHandler+0x6d0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0310 	and.w	r3, r3, #16
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bf14      	ite	ne
 80068b2:	2301      	movne	r3, #1
 80068b4:	2300      	moveq	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	e02a      	b.n	8006910 <HAL_DMA_IRQHandler+0x6e4>
 80068ba:	bf00      	nop
 80068bc:	40020010 	.word	0x40020010
 80068c0:	40020028 	.word	0x40020028
 80068c4:	40020040 	.word	0x40020040
 80068c8:	40020058 	.word	0x40020058
 80068cc:	40020070 	.word	0x40020070
 80068d0:	40020088 	.word	0x40020088
 80068d4:	400200a0 	.word	0x400200a0
 80068d8:	400200b8 	.word	0x400200b8
 80068dc:	40020410 	.word	0x40020410
 80068e0:	40020428 	.word	0x40020428
 80068e4:	40020440 	.word	0x40020440
 80068e8:	40020458 	.word	0x40020458
 80068ec:	40020470 	.word	0x40020470
 80068f0:	40020488 	.word	0x40020488
 80068f4:	400204a0 	.word	0x400204a0
 80068f8:	400204b8 	.word	0x400204b8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf14      	ite	ne
 800690a:	2301      	movne	r3, #1
 800690c:	2300      	moveq	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8087 	beq.w	8006a24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2220      	movs	r2, #32
 8006920:	409a      	lsls	r2, r3
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b04      	cmp	r3, #4
 8006930:	d139      	bne.n	80069a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 0216 	bic.w	r2, r2, #22
 8006940:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695a      	ldr	r2, [r3, #20]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006950:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <HAL_DMA_IRQHandler+0x736>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0208 	bic.w	r2, r2, #8
 8006970:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	223f      	movs	r2, #63	@ 0x3f
 800697c:	409a      	lsls	r2, r3
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 834a 	beq.w	8007030 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
          }
          return;
 80069a4:	e344      	b.n	8007030 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d018      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d108      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d02c      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	e027      	b.n	8006a24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
 80069e4:	e01e      	b.n	8006a24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10f      	bne.n	8006a14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0210 	bic.w	r2, r2, #16
 8006a02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8306 	beq.w	800703a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 8088 	beq.w	8006b4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a7a      	ldr	r2, [pc, #488]	@ (8006c34 <HAL_DMA_IRQHandler+0xa08>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d04a      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a79      	ldr	r2, [pc, #484]	@ (8006c38 <HAL_DMA_IRQHandler+0xa0c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d045      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a77      	ldr	r2, [pc, #476]	@ (8006c3c <HAL_DMA_IRQHandler+0xa10>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d040      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a76      	ldr	r2, [pc, #472]	@ (8006c40 <HAL_DMA_IRQHandler+0xa14>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d03b      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a74      	ldr	r2, [pc, #464]	@ (8006c44 <HAL_DMA_IRQHandler+0xa18>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d036      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a73      	ldr	r2, [pc, #460]	@ (8006c48 <HAL_DMA_IRQHandler+0xa1c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d031      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a71      	ldr	r2, [pc, #452]	@ (8006c4c <HAL_DMA_IRQHandler+0xa20>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d02c      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a70      	ldr	r2, [pc, #448]	@ (8006c50 <HAL_DMA_IRQHandler+0xa24>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d027      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a6e      	ldr	r2, [pc, #440]	@ (8006c54 <HAL_DMA_IRQHandler+0xa28>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d022      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8006c58 <HAL_DMA_IRQHandler+0xa2c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d01d      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a6b      	ldr	r2, [pc, #428]	@ (8006c5c <HAL_DMA_IRQHandler+0xa30>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8006c60 <HAL_DMA_IRQHandler+0xa34>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d013      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a68      	ldr	r2, [pc, #416]	@ (8006c64 <HAL_DMA_IRQHandler+0xa38>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a67      	ldr	r2, [pc, #412]	@ (8006c68 <HAL_DMA_IRQHandler+0xa3c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a65      	ldr	r2, [pc, #404]	@ (8006c6c <HAL_DMA_IRQHandler+0xa40>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_DMA_IRQHandler+0x8b8>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a64      	ldr	r2, [pc, #400]	@ (8006c70 <HAL_DMA_IRQHandler+0xa44>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d108      	bne.n	8006af6 <HAL_DMA_IRQHandler+0x8ca>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0201 	bic.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e007      	b.n	8006b06 <HAL_DMA_IRQHandler+0x8da>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d307      	bcc.n	8006b22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f2      	bne.n	8006b06 <HAL_DMA_IRQHandler+0x8da>
 8006b20:	e000      	b.n	8006b24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d004      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006b3a:	e003      	b.n	8006b44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8272 	beq.w	800703a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
 8006b5e:	e26c      	b.n	800703a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a43      	ldr	r2, [pc, #268]	@ (8006c74 <HAL_DMA_IRQHandler+0xa48>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a42      	ldr	r2, [pc, #264]	@ (8006c78 <HAL_DMA_IRQHandler+0xa4c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a40      	ldr	r2, [pc, #256]	@ (8006c7c <HAL_DMA_IRQHandler+0xa50>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a3f      	ldr	r2, [pc, #252]	@ (8006c80 <HAL_DMA_IRQHandler+0xa54>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c84 <HAL_DMA_IRQHandler+0xa58>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	@ (8006c88 <HAL_DMA_IRQHandler+0xa5c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8006c8c <HAL_DMA_IRQHandler+0xa60>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x984>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a39      	ldr	r2, [pc, #228]	@ (8006c90 <HAL_DMA_IRQHandler+0xa64>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d101      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x988>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_DMA_IRQHandler+0x98a>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 823f 	beq.w	800703a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	2204      	movs	r2, #4
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80cd 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xb48>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80c7 	beq.w	8006d74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2204      	movs	r2, #4
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d049      	beq.n	8006c94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8210 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1c:	e20a      	b.n	8007034 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8206 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c30:	e200      	b.n	8007034 <HAL_DMA_IRQHandler+0xe08>
 8006c32:	bf00      	nop
 8006c34:	40020010 	.word	0x40020010
 8006c38:	40020028 	.word	0x40020028
 8006c3c:	40020040 	.word	0x40020040
 8006c40:	40020058 	.word	0x40020058
 8006c44:	40020070 	.word	0x40020070
 8006c48:	40020088 	.word	0x40020088
 8006c4c:	400200a0 	.word	0x400200a0
 8006c50:	400200b8 	.word	0x400200b8
 8006c54:	40020410 	.word	0x40020410
 8006c58:	40020428 	.word	0x40020428
 8006c5c:	40020440 	.word	0x40020440
 8006c60:	40020458 	.word	0x40020458
 8006c64:	40020470 	.word	0x40020470
 8006c68:	40020488 	.word	0x40020488
 8006c6c:	400204a0 	.word	0x400204a0
 8006c70:	400204b8 	.word	0x400204b8
 8006c74:	58025408 	.word	0x58025408
 8006c78:	5802541c 	.word	0x5802541c
 8006c7c:	58025430 	.word	0x58025430
 8006c80:	58025444 	.word	0x58025444
 8006c84:	58025458 	.word	0x58025458
 8006c88:	5802546c 	.word	0x5802546c
 8006c8c:	58025480 	.word	0x58025480
 8006c90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d160      	bne.n	8006d60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ea0 <HAL_DMA_IRQHandler+0xc74>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d04a      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7d      	ldr	r2, [pc, #500]	@ (8006ea4 <HAL_DMA_IRQHandler+0xc78>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d045      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d040      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a7a      	ldr	r2, [pc, #488]	@ (8006eac <HAL_DMA_IRQHandler+0xc80>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d03b      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a79      	ldr	r2, [pc, #484]	@ (8006eb0 <HAL_DMA_IRQHandler+0xc84>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d036      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a77      	ldr	r2, [pc, #476]	@ (8006eb4 <HAL_DMA_IRQHandler+0xc88>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d031      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a76      	ldr	r2, [pc, #472]	@ (8006eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d02c      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a74      	ldr	r2, [pc, #464]	@ (8006ebc <HAL_DMA_IRQHandler+0xc90>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d027      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a73      	ldr	r2, [pc, #460]	@ (8006ec0 <HAL_DMA_IRQHandler+0xc94>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a71      	ldr	r2, [pc, #452]	@ (8006ec4 <HAL_DMA_IRQHandler+0xc98>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01d      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a70      	ldr	r2, [pc, #448]	@ (8006ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a6e      	ldr	r2, [pc, #440]	@ (8006ecc <HAL_DMA_IRQHandler+0xca0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a6d      	ldr	r2, [pc, #436]	@ (8006ed0 <HAL_DMA_IRQHandler+0xca4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a6b      	ldr	r2, [pc, #428]	@ (8006ed4 <HAL_DMA_IRQHandler+0xca8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6a      	ldr	r2, [pc, #424]	@ (8006ed8 <HAL_DMA_IRQHandler+0xcac>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_DMA_IRQHandler+0xb12>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a68      	ldr	r2, [pc, #416]	@ (8006edc <HAL_DMA_IRQHandler+0xcb0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d108      	bne.n	8006d50 <HAL_DMA_IRQHandler+0xb24>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0208 	bic.w	r2, r2, #8
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e007      	b.n	8006d60 <HAL_DMA_IRQHandler+0xb34>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8165 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d72:	e15f      	b.n	8007034 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80c5 	beq.w	8006f14 <HAL_DMA_IRQHandler+0xce8>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80bf 	beq.w	8006f14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2202      	movs	r2, #2
 8006da0:	409a      	lsls	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d018      	beq.n	8006de2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 813a 	beq.w	8007038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dcc:	e134      	b.n	8007038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8130 	beq.w	8007038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de0:	e12a      	b.n	8007038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f040 8089 	bne.w	8006f00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a2b      	ldr	r2, [pc, #172]	@ (8006ea0 <HAL_DMA_IRQHandler+0xc74>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04a      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a29      	ldr	r2, [pc, #164]	@ (8006ea4 <HAL_DMA_IRQHandler+0xc78>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d045      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a28      	ldr	r2, [pc, #160]	@ (8006ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d040      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a26      	ldr	r2, [pc, #152]	@ (8006eac <HAL_DMA_IRQHandler+0xc80>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03b      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a25      	ldr	r2, [pc, #148]	@ (8006eb0 <HAL_DMA_IRQHandler+0xc84>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d036      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a23      	ldr	r2, [pc, #140]	@ (8006eb4 <HAL_DMA_IRQHandler+0xc88>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a22      	ldr	r2, [pc, #136]	@ (8006eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d02c      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a20      	ldr	r2, [pc, #128]	@ (8006ebc <HAL_DMA_IRQHandler+0xc90>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d027      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec0 <HAL_DMA_IRQHandler+0xc94>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec4 <HAL_DMA_IRQHandler+0xc98>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1a      	ldr	r2, [pc, #104]	@ (8006ecc <HAL_DMA_IRQHandler+0xca0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a19      	ldr	r2, [pc, #100]	@ (8006ed0 <HAL_DMA_IRQHandler+0xca4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a17      	ldr	r2, [pc, #92]	@ (8006ed4 <HAL_DMA_IRQHandler+0xca8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a16      	ldr	r2, [pc, #88]	@ (8006ed8 <HAL_DMA_IRQHandler+0xcac>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xc62>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a14      	ldr	r2, [pc, #80]	@ (8006edc <HAL_DMA_IRQHandler+0xcb0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d128      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0xcb4>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0214 	bic.w	r2, r2, #20
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e027      	b.n	8006ef0 <HAL_DMA_IRQHandler+0xcc4>
 8006ea0:	40020010 	.word	0x40020010
 8006ea4:	40020028 	.word	0x40020028
 8006ea8:	40020040 	.word	0x40020040
 8006eac:	40020058 	.word	0x40020058
 8006eb0:	40020070 	.word	0x40020070
 8006eb4:	40020088 	.word	0x40020088
 8006eb8:	400200a0 	.word	0x400200a0
 8006ebc:	400200b8 	.word	0x400200b8
 8006ec0:	40020410 	.word	0x40020410
 8006ec4:	40020428 	.word	0x40020428
 8006ec8:	40020440 	.word	0x40020440
 8006ecc:	40020458 	.word	0x40020458
 8006ed0:	40020470 	.word	0x40020470
 8006ed4:	40020488 	.word	0x40020488
 8006ed8:	400204a0 	.word	0x400204a0
 8006edc:	400204b8 	.word	0x400204b8
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 020a 	bic.w	r2, r2, #10
 8006eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8097 	beq.w	8007038 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f12:	e091      	b.n	8007038 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f18:	f003 031f 	and.w	r3, r3, #31
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4013      	ands	r3, r2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8088 	beq.w	800703a <HAL_DMA_IRQHandler+0xe0e>
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8082 	beq.w	800703a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a41      	ldr	r2, [pc, #260]	@ (8007040 <HAL_DMA_IRQHandler+0xe14>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d04a      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a3f      	ldr	r2, [pc, #252]	@ (8007044 <HAL_DMA_IRQHandler+0xe18>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d045      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8007048 <HAL_DMA_IRQHandler+0xe1c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d040      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a3c      	ldr	r2, [pc, #240]	@ (800704c <HAL_DMA_IRQHandler+0xe20>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d03b      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a3b      	ldr	r2, [pc, #236]	@ (8007050 <HAL_DMA_IRQHandler+0xe24>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d036      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a39      	ldr	r2, [pc, #228]	@ (8007054 <HAL_DMA_IRQHandler+0xe28>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d031      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a38      	ldr	r2, [pc, #224]	@ (8007058 <HAL_DMA_IRQHandler+0xe2c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d02c      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a36      	ldr	r2, [pc, #216]	@ (800705c <HAL_DMA_IRQHandler+0xe30>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d027      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a35      	ldr	r2, [pc, #212]	@ (8007060 <HAL_DMA_IRQHandler+0xe34>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a33      	ldr	r2, [pc, #204]	@ (8007064 <HAL_DMA_IRQHandler+0xe38>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d01d      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a32      	ldr	r2, [pc, #200]	@ (8007068 <HAL_DMA_IRQHandler+0xe3c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a30      	ldr	r2, [pc, #192]	@ (800706c <HAL_DMA_IRQHandler+0xe40>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2f      	ldr	r2, [pc, #188]	@ (8007070 <HAL_DMA_IRQHandler+0xe44>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8007074 <HAL_DMA_IRQHandler+0xe48>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2c      	ldr	r2, [pc, #176]	@ (8007078 <HAL_DMA_IRQHandler+0xe4c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0xdaa>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800707c <HAL_DMA_IRQHandler+0xe50>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d108      	bne.n	8006fe8 <HAL_DMA_IRQHandler+0xdbc>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 021c 	bic.w	r2, r2, #28
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e007      	b.n	8006ff8 <HAL_DMA_IRQHandler+0xdcc>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 020e 	bic.w	r2, r2, #14
 8006ff6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2201      	movs	r2, #1
 8007002:	409a      	lsls	r2, r3
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d009      	beq.n	800703a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
 800702e:	e004      	b.n	800703a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007030:	bf00      	nop
 8007032:	e002      	b.n	800703a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007038:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800703a:	3728      	adds	r7, #40	@ 0x28
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8

08007080 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007098:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a7f      	ldr	r2, [pc, #508]	@ (800729c <DMA_SetConfig+0x21c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d072      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a7d      	ldr	r2, [pc, #500]	@ (80072a0 <DMA_SetConfig+0x220>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d06d      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a7c      	ldr	r2, [pc, #496]	@ (80072a4 <DMA_SetConfig+0x224>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d068      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a7a      	ldr	r2, [pc, #488]	@ (80072a8 <DMA_SetConfig+0x228>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d063      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a79      	ldr	r2, [pc, #484]	@ (80072ac <DMA_SetConfig+0x22c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d05e      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a77      	ldr	r2, [pc, #476]	@ (80072b0 <DMA_SetConfig+0x230>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d059      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a76      	ldr	r2, [pc, #472]	@ (80072b4 <DMA_SetConfig+0x234>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d054      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a74      	ldr	r2, [pc, #464]	@ (80072b8 <DMA_SetConfig+0x238>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d04f      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a73      	ldr	r2, [pc, #460]	@ (80072bc <DMA_SetConfig+0x23c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d04a      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a71      	ldr	r2, [pc, #452]	@ (80072c0 <DMA_SetConfig+0x240>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d045      	beq.n	800718a <DMA_SetConfig+0x10a>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a70      	ldr	r2, [pc, #448]	@ (80072c4 <DMA_SetConfig+0x244>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d040      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a6e      	ldr	r2, [pc, #440]	@ (80072c8 <DMA_SetConfig+0x248>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d03b      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6d      	ldr	r2, [pc, #436]	@ (80072cc <DMA_SetConfig+0x24c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d036      	beq.n	800718a <DMA_SetConfig+0x10a>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6b      	ldr	r2, [pc, #428]	@ (80072d0 <DMA_SetConfig+0x250>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d031      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6a      	ldr	r2, [pc, #424]	@ (80072d4 <DMA_SetConfig+0x254>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d02c      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a68      	ldr	r2, [pc, #416]	@ (80072d8 <DMA_SetConfig+0x258>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d027      	beq.n	800718a <DMA_SetConfig+0x10a>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a67      	ldr	r2, [pc, #412]	@ (80072dc <DMA_SetConfig+0x25c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d022      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a65      	ldr	r2, [pc, #404]	@ (80072e0 <DMA_SetConfig+0x260>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01d      	beq.n	800718a <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a64      	ldr	r2, [pc, #400]	@ (80072e4 <DMA_SetConfig+0x264>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d018      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a62      	ldr	r2, [pc, #392]	@ (80072e8 <DMA_SetConfig+0x268>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d013      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a61      	ldr	r2, [pc, #388]	@ (80072ec <DMA_SetConfig+0x26c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00e      	beq.n	800718a <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5f      	ldr	r2, [pc, #380]	@ (80072f0 <DMA_SetConfig+0x270>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d009      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a5e      	ldr	r2, [pc, #376]	@ (80072f4 <DMA_SetConfig+0x274>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d004      	beq.n	800718a <DMA_SetConfig+0x10a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5c      	ldr	r2, [pc, #368]	@ (80072f8 <DMA_SetConfig+0x278>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d101      	bne.n	800718e <DMA_SetConfig+0x10e>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <DMA_SetConfig+0x110>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00d      	beq.n	80071b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800719c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a39      	ldr	r2, [pc, #228]	@ (800729c <DMA_SetConfig+0x21c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d04a      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a38      	ldr	r2, [pc, #224]	@ (80072a0 <DMA_SetConfig+0x220>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d045      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a36      	ldr	r2, [pc, #216]	@ (80072a4 <DMA_SetConfig+0x224>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d040      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a35      	ldr	r2, [pc, #212]	@ (80072a8 <DMA_SetConfig+0x228>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d03b      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a33      	ldr	r2, [pc, #204]	@ (80072ac <DMA_SetConfig+0x22c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d036      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a32      	ldr	r2, [pc, #200]	@ (80072b0 <DMA_SetConfig+0x230>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d031      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a30      	ldr	r2, [pc, #192]	@ (80072b4 <DMA_SetConfig+0x234>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02c      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2f      	ldr	r2, [pc, #188]	@ (80072b8 <DMA_SetConfig+0x238>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d027      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a2d      	ldr	r2, [pc, #180]	@ (80072bc <DMA_SetConfig+0x23c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d022      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2c      	ldr	r2, [pc, #176]	@ (80072c0 <DMA_SetConfig+0x240>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d01d      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2a      	ldr	r2, [pc, #168]	@ (80072c4 <DMA_SetConfig+0x244>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d018      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a29      	ldr	r2, [pc, #164]	@ (80072c8 <DMA_SetConfig+0x248>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a27      	ldr	r2, [pc, #156]	@ (80072cc <DMA_SetConfig+0x24c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00e      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a26      	ldr	r2, [pc, #152]	@ (80072d0 <DMA_SetConfig+0x250>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d009      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a24      	ldr	r2, [pc, #144]	@ (80072d4 <DMA_SetConfig+0x254>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <DMA_SetConfig+0x1d0>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a23      	ldr	r2, [pc, #140]	@ (80072d8 <DMA_SetConfig+0x258>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d101      	bne.n	8007254 <DMA_SetConfig+0x1d4>
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <DMA_SetConfig+0x1d6>
 8007254:	2300      	movs	r3, #0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d059      	beq.n	800730e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	223f      	movs	r2, #63	@ 0x3f
 8007264:	409a      	lsls	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007278:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b40      	cmp	r3, #64	@ 0x40
 8007288:	d138      	bne.n	80072fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800729a:	e086      	b.n	80073aa <DMA_SetConfig+0x32a>
 800729c:	40020010 	.word	0x40020010
 80072a0:	40020028 	.word	0x40020028
 80072a4:	40020040 	.word	0x40020040
 80072a8:	40020058 	.word	0x40020058
 80072ac:	40020070 	.word	0x40020070
 80072b0:	40020088 	.word	0x40020088
 80072b4:	400200a0 	.word	0x400200a0
 80072b8:	400200b8 	.word	0x400200b8
 80072bc:	40020410 	.word	0x40020410
 80072c0:	40020428 	.word	0x40020428
 80072c4:	40020440 	.word	0x40020440
 80072c8:	40020458 	.word	0x40020458
 80072cc:	40020470 	.word	0x40020470
 80072d0:	40020488 	.word	0x40020488
 80072d4:	400204a0 	.word	0x400204a0
 80072d8:	400204b8 	.word	0x400204b8
 80072dc:	58025408 	.word	0x58025408
 80072e0:	5802541c 	.word	0x5802541c
 80072e4:	58025430 	.word	0x58025430
 80072e8:	58025444 	.word	0x58025444
 80072ec:	58025458 	.word	0x58025458
 80072f0:	5802546c 	.word	0x5802546c
 80072f4:	58025480 	.word	0x58025480
 80072f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	60da      	str	r2, [r3, #12]
}
 800730c:	e04d      	b.n	80073aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a29      	ldr	r2, [pc, #164]	@ (80073b8 <DMA_SetConfig+0x338>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d022      	beq.n	800735e <DMA_SetConfig+0x2de>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a27      	ldr	r2, [pc, #156]	@ (80073bc <DMA_SetConfig+0x33c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01d      	beq.n	800735e <DMA_SetConfig+0x2de>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a26      	ldr	r2, [pc, #152]	@ (80073c0 <DMA_SetConfig+0x340>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d018      	beq.n	800735e <DMA_SetConfig+0x2de>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a24      	ldr	r2, [pc, #144]	@ (80073c4 <DMA_SetConfig+0x344>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <DMA_SetConfig+0x2de>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a23      	ldr	r2, [pc, #140]	@ (80073c8 <DMA_SetConfig+0x348>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00e      	beq.n	800735e <DMA_SetConfig+0x2de>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a21      	ldr	r2, [pc, #132]	@ (80073cc <DMA_SetConfig+0x34c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d009      	beq.n	800735e <DMA_SetConfig+0x2de>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a20      	ldr	r2, [pc, #128]	@ (80073d0 <DMA_SetConfig+0x350>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <DMA_SetConfig+0x2de>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1e      	ldr	r2, [pc, #120]	@ (80073d4 <DMA_SetConfig+0x354>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d101      	bne.n	8007362 <DMA_SetConfig+0x2e2>
 800735e:	2301      	movs	r3, #1
 8007360:	e000      	b.n	8007364 <DMA_SetConfig+0x2e4>
 8007362:	2300      	movs	r3, #0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d020      	beq.n	80073aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	2201      	movs	r2, #1
 8007372:	409a      	lsls	r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b40      	cmp	r3, #64	@ 0x40
 8007386:	d108      	bne.n	800739a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	60da      	str	r2, [r3, #12]
}
 8007398:	e007      	b.n	80073aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	58025408 	.word	0x58025408
 80073bc:	5802541c 	.word	0x5802541c
 80073c0:	58025430 	.word	0x58025430
 80073c4:	58025444 	.word	0x58025444
 80073c8:	58025458 	.word	0x58025458
 80073cc:	5802546c 	.word	0x5802546c
 80073d0:	58025480 	.word	0x58025480
 80073d4:	58025494 	.word	0x58025494

080073d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a42      	ldr	r2, [pc, #264]	@ (80074f0 <DMA_CalcBaseAndBitshift+0x118>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d04a      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a41      	ldr	r2, [pc, #260]	@ (80074f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d045      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a3f      	ldr	r2, [pc, #252]	@ (80074f8 <DMA_CalcBaseAndBitshift+0x120>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d040      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3e      	ldr	r2, [pc, #248]	@ (80074fc <DMA_CalcBaseAndBitshift+0x124>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d03b      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a3c      	ldr	r2, [pc, #240]	@ (8007500 <DMA_CalcBaseAndBitshift+0x128>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d036      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a3b      	ldr	r2, [pc, #236]	@ (8007504 <DMA_CalcBaseAndBitshift+0x12c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d031      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a39      	ldr	r2, [pc, #228]	@ (8007508 <DMA_CalcBaseAndBitshift+0x130>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d02c      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a38      	ldr	r2, [pc, #224]	@ (800750c <DMA_CalcBaseAndBitshift+0x134>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d027      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a36      	ldr	r2, [pc, #216]	@ (8007510 <DMA_CalcBaseAndBitshift+0x138>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d022      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a35      	ldr	r2, [pc, #212]	@ (8007514 <DMA_CalcBaseAndBitshift+0x13c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d01d      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a33      	ldr	r2, [pc, #204]	@ (8007518 <DMA_CalcBaseAndBitshift+0x140>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d018      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a32      	ldr	r2, [pc, #200]	@ (800751c <DMA_CalcBaseAndBitshift+0x144>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d013      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a30      	ldr	r2, [pc, #192]	@ (8007520 <DMA_CalcBaseAndBitshift+0x148>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2f      	ldr	r2, [pc, #188]	@ (8007524 <DMA_CalcBaseAndBitshift+0x14c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d009      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2d      	ldr	r2, [pc, #180]	@ (8007528 <DMA_CalcBaseAndBitshift+0x150>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <DMA_CalcBaseAndBitshift+0xa8>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2c      	ldr	r2, [pc, #176]	@ (800752c <DMA_CalcBaseAndBitshift+0x154>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <DMA_CalcBaseAndBitshift+0xac>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <DMA_CalcBaseAndBitshift+0xae>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d024      	beq.n	80074d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	3b10      	subs	r3, #16
 8007492:	4a27      	ldr	r2, [pc, #156]	@ (8007530 <DMA_CalcBaseAndBitshift+0x158>)
 8007494:	fba2 2303 	umull	r2, r3, r2, r3
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	4a24      	ldr	r2, [pc, #144]	@ (8007534 <DMA_CalcBaseAndBitshift+0x15c>)
 80074a4:	5cd3      	ldrb	r3, [r2, r3]
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d908      	bls.n	80074c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007538 <DMA_CalcBaseAndBitshift+0x160>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	1d1a      	adds	r2, r3, #4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80074c2:	e00d      	b.n	80074e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007538 <DMA_CalcBaseAndBitshift+0x160>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d2:	e005      	b.n	80074e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40020010 	.word	0x40020010
 80074f4:	40020028 	.word	0x40020028
 80074f8:	40020040 	.word	0x40020040
 80074fc:	40020058 	.word	0x40020058
 8007500:	40020070 	.word	0x40020070
 8007504:	40020088 	.word	0x40020088
 8007508:	400200a0 	.word	0x400200a0
 800750c:	400200b8 	.word	0x400200b8
 8007510:	40020410 	.word	0x40020410
 8007514:	40020428 	.word	0x40020428
 8007518:	40020440 	.word	0x40020440
 800751c:	40020458 	.word	0x40020458
 8007520:	40020470 	.word	0x40020470
 8007524:	40020488 	.word	0x40020488
 8007528:	400204a0 	.word	0x400204a0
 800752c:	400204b8 	.word	0x400204b8
 8007530:	aaaaaaab 	.word	0xaaaaaaab
 8007534:	08012534 	.word	0x08012534
 8007538:	fffffc00 	.word	0xfffffc00

0800753c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d120      	bne.n	8007592 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	2b03      	cmp	r3, #3
 8007556:	d858      	bhi.n	800760a <DMA_CheckFifoParam+0xce>
 8007558:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <DMA_CheckFifoParam+0x24>)
 800755a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755e:	bf00      	nop
 8007560:	08007571 	.word	0x08007571
 8007564:	08007583 	.word	0x08007583
 8007568:	08007571 	.word	0x08007571
 800756c:	0800760b 	.word	0x0800760b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d048      	beq.n	800760e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007580:	e045      	b.n	800760e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800758a:	d142      	bne.n	8007612 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007590:	e03f      	b.n	8007612 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800759a:	d123      	bne.n	80075e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d838      	bhi.n	8007616 <DMA_CheckFifoParam+0xda>
 80075a4:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <DMA_CheckFifoParam+0x70>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075c3 	.word	0x080075c3
 80075b4:	080075bd 	.word	0x080075bd
 80075b8:	080075d5 	.word	0x080075d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
        break;
 80075c0:	e030      	b.n	8007624 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d025      	beq.n	800761a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075d2:	e022      	b.n	800761a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075dc:	d11f      	bne.n	800761e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075e2:	e01c      	b.n	800761e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d902      	bls.n	80075f2 <DMA_CheckFifoParam+0xb6>
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d003      	beq.n	80075f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075f0:	e018      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	73fb      	strb	r3, [r7, #15]
        break;
 80075f6:	e015      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
    break;
 8007608:	e00b      	b.n	8007622 <DMA_CheckFifoParam+0xe6>
        break;
 800760a:	bf00      	nop
 800760c:	e00a      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        break;
 800760e:	bf00      	nop
 8007610:	e008      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        break;
 8007612:	bf00      	nop
 8007614:	e006      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        break;
 8007616:	bf00      	nop
 8007618:	e004      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        break;
 800761a:	bf00      	nop
 800761c:	e002      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
        break;
 800761e:	bf00      	nop
 8007620:	e000      	b.n	8007624 <DMA_CheckFifoParam+0xe8>
    break;
 8007622:	bf00      	nop
    }
  }

  return status;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop

08007634 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a38      	ldr	r2, [pc, #224]	@ (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d022      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a36      	ldr	r2, [pc, #216]	@ (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01d      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a35      	ldr	r2, [pc, #212]	@ (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d018      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a33      	ldr	r2, [pc, #204]	@ (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a32      	ldr	r2, [pc, #200]	@ (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d00e      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a30      	ldr	r2, [pc, #192]	@ (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d009      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a2f      	ldr	r2, [pc, #188]	@ (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a2d      	ldr	r2, [pc, #180]	@ (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d101      	bne.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007696:	2300      	movs	r3, #0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01a      	beq.n	80076d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	3b08      	subs	r3, #8
 80076a4:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80076a6:	fba2 2303 	umull	r2, r3, r2, r3
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4b26      	ldr	r3, [pc, #152]	@ (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a24      	ldr	r2, [pc, #144]	@ (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2201      	movs	r2, #1
 80076ca:	409a      	lsls	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076d0:	e024      	b.n	800771c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	3b10      	subs	r3, #16
 80076da:	4a1e      	ldr	r2, [pc, #120]	@ (8007754 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076dc:	fba2 2303 	umull	r2, r3, r2, r3
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d806      	bhi.n	80076fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4a1b      	ldr	r2, [pc, #108]	@ (800775c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d902      	bls.n	80076fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3308      	adds	r3, #8
 80076f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4b18      	ldr	r3, [pc, #96]	@ (8007760 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a16      	ldr	r2, [pc, #88]	@ (8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800770c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f003 031f 	and.w	r3, r3, #31
 8007714:	2201      	movs	r2, #1
 8007716:	409a      	lsls	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	58025408 	.word	0x58025408
 800772c:	5802541c 	.word	0x5802541c
 8007730:	58025430 	.word	0x58025430
 8007734:	58025444 	.word	0x58025444
 8007738:	58025458 	.word	0x58025458
 800773c:	5802546c 	.word	0x5802546c
 8007740:	58025480 	.word	0x58025480
 8007744:	58025494 	.word	0x58025494
 8007748:	cccccccd 	.word	0xcccccccd
 800774c:	16009600 	.word	0x16009600
 8007750:	58025880 	.word	0x58025880
 8007754:	aaaaaaab 	.word	0xaaaaaaab
 8007758:	400204b8 	.word	0x400204b8
 800775c:	4002040f 	.word	0x4002040f
 8007760:	10008200 	.word	0x10008200
 8007764:	40020880 	.word	0x40020880

08007768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d04a      	beq.n	8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d847      	bhi.n	8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a25      	ldr	r2, [pc, #148]	@ (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d022      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a24      	ldr	r2, [pc, #144]	@ (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d01d      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a22      	ldr	r2, [pc, #136]	@ (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d018      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a21      	ldr	r2, [pc, #132]	@ (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1b      	ldr	r2, [pc, #108]	@ (800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d101      	bne.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077d8:	2300      	movs	r3, #0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4b17      	ldr	r3, [pc, #92]	@ (8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	461a      	mov	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a15      	ldr	r2, [pc, #84]	@ (8007844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80077f2:	e009      	b.n	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4b14      	ldr	r3, [pc, #80]	@ (8007848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a11      	ldr	r2, [pc, #68]	@ (800784c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007806:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3b01      	subs	r3, #1
 800780c:	2201      	movs	r2, #1
 800780e:	409a      	lsls	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	58025408 	.word	0x58025408
 8007824:	5802541c 	.word	0x5802541c
 8007828:	58025430 	.word	0x58025430
 800782c:	58025444 	.word	0x58025444
 8007830:	58025458 	.word	0x58025458
 8007834:	5802546c 	.word	0x5802546c
 8007838:	58025480 	.word	0x58025480
 800783c:	58025494 	.word	0x58025494
 8007840:	1600963f 	.word	0x1600963f
 8007844:	58025940 	.word	0x58025940
 8007848:	1000823f 	.word	0x1000823f
 800784c:	40020940 	.word	0x40020940

08007850 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b098      	sub	sp, #96	@ 0x60
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007858:	4a84      	ldr	r2, [pc, #528]	@ (8007a6c <HAL_FDCAN_Init+0x21c>)
 800785a:	f107 030c 	add.w	r3, r7, #12
 800785e:	4611      	mov	r1, r2
 8007860:	224c      	movs	r2, #76	@ 0x4c
 8007862:	4618      	mov	r0, r3
 8007864:	f00a f892 	bl	801198c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e1c6      	b.n	8007c00 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a7e      	ldr	r2, [pc, #504]	@ (8007a70 <HAL_FDCAN_Init+0x220>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d106      	bne.n	800788a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007884:	461a      	mov	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fa fcd6 	bl	8002250 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0210 	bic.w	r2, r2, #16
 80078b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b4:	f7fb f9ae 	bl	8002c14 <HAL_GetTick>
 80078b8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078ba:	e014      	b.n	80078e6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078bc:	f7fb f9aa 	bl	8002c14 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b0a      	cmp	r3, #10
 80078c8:	d90d      	bls.n	80078e6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078d0:	f043 0201 	orr.w	r2, r3, #1
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2203      	movs	r2, #3
 80078de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e18c      	b.n	8007c00 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d0e3      	beq.n	80078bc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007904:	f7fb f986 	bl	8002c14 <HAL_GetTick>
 8007908:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800790a:	e014      	b.n	8007936 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800790c:	f7fb f982 	bl	8002c14 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b0a      	cmp	r3, #10
 8007918:	d90d      	bls.n	8007936 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007920:	f043 0201 	orr.w	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2203      	movs	r2, #3
 800792e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e164      	b.n	8007c00 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0e3      	beq.n	800790c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0202 	orr.w	r2, r2, #2
 8007952:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7c1b      	ldrb	r3, [r3, #16]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d108      	bne.n	800796e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800796a:	619a      	str	r2, [r3, #24]
 800796c:	e007      	b.n	800797e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800797c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7c5b      	ldrb	r3, [r3, #17]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d108      	bne.n	8007998 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007994:	619a      	str	r2, [r3, #24]
 8007996:	e007      	b.n	80079a8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	7c9b      	ldrb	r3, [r3, #18]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d108      	bne.n	80079c2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079be:	619a      	str	r2, [r3, #24]
 80079c0:	e007      	b.n	80079d2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699a      	ldr	r2, [r3, #24]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079d0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80079f6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0210 	bic.w	r2, r2, #16
 8007a06:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d108      	bne.n	8007a22 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0204 	orr.w	r2, r2, #4
 8007a1e:	619a      	str	r2, [r3, #24]
 8007a20:	e030      	b.n	8007a84 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d02c      	beq.n	8007a84 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d020      	beq.n	8007a74 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a40:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0210 	orr.w	r2, r2, #16
 8007a50:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d114      	bne.n	8007a84 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f042 0220 	orr.w	r2, r2, #32
 8007a68:	619a      	str	r2, [r3, #24]
 8007a6a:	e00b      	b.n	8007a84 <HAL_FDCAN_Init+0x234>
 8007a6c:	080124d8 	.word	0x080124d8
 8007a70:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0220 	orr.w	r2, r2, #32
 8007a82:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a94:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a9c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007aac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007aae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ab8:	d115      	bne.n	8007ae6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ac8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007ad2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ada:	3b01      	subs	r3, #1
 8007adc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007ae2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ae4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00a      	beq.n	8007b04 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b0c:	4413      	add	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d011      	beq.n	8007b36 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007b1a:	f023 0107 	bic.w	r1, r3, #7
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	3360      	adds	r3, #96	@ 0x60
 8007b26:	443b      	add	r3, r7
 8007b28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d011      	beq.n	8007b62 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b46:	f023 0107 	bic.w	r1, r3, #7
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3360      	adds	r3, #96	@ 0x60
 8007b52:	443b      	add	r3, r7
 8007b54:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d012      	beq.n	8007b90 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b72:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	3360      	adds	r3, #96	@ 0x60
 8007b7e:	443b      	add	r3, r7
 8007b80:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b84:	011a      	lsls	r2, r3, #4
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ba0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	3360      	adds	r3, #96	@ 0x60
 8007bac:	443b      	add	r3, r7
 8007bae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007bb2:	021a      	lsls	r2, r3, #8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a11      	ldr	r2, [pc, #68]	@ (8007c08 <HAL_FDCAN_Init+0x3b8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d107      	bne.n	8007bd8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f022 0203 	bic.w	r2, r2, #3
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fdeb 	bl	80087cc <FDCAN_CalcultateRamBlockAddresses>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007bfc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3760      	adds	r7, #96	@ 0x60
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	4000a000 	.word	0x4000a000

08007c0c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c1c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d002      	beq.n	8007c2a <HAL_FDCAN_ConfigFilter+0x1e>
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d157      	bne.n	8007cda <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d12b      	bne.n	8007c8a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b07      	cmp	r3, #7
 8007c38:	d10d      	bne.n	8007c56 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007c46:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007c4c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007c4e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e00e      	b.n	8007c74 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c62:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007c6a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e025      	b.n	8007cd6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	075a      	lsls	r2, r3, #29
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b07      	cmp	r3, #7
 8007c9e:	d103      	bne.n	8007ca8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	e006      	b.n	8007cb6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	079a      	lsls	r2, r3, #30
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e008      	b.n	8007cec <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ce0:	f043 0202 	orr.w	r2, r3, #2
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
  }
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d111      	bne.n	8007d30 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e008      	b.n	8007d42 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d36:	f043 0204 	orr.w	r2, r3, #4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
  }
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d141      	bne.n	8007dea <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d6e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e038      	b.n	8007dfc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d009      	beq.n	8007dae <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007da0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e026      	b.n	8007dfc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	f003 031f 	and.w	r3, r3, #31
 8007dbc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 fe87 	bl	8008ad8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8007dd6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007dda:	2201      	movs	r2, #1
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	409a      	lsls	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	e008      	b.n	8007dfc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df0:	f043 0208 	orr.w	r2, r3, #8
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
  }
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b08b      	sub	sp, #44	@ 0x2c
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007e1c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007e1e:	7efb      	ldrb	r3, [r7, #27]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	f040 8149 	bne.w	80080b8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d14c      	bne.n	8007ec6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d109      	bne.n	8007e50 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e42:	f043 0220 	orr.w	r2, r3, #32
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e13c      	b.n	80080ca <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e12a      	b.n	80080ca <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e84:	d10a      	bne.n	8007e9c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e96:	d101      	bne.n	8007e9c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ea4:	0a1b      	lsrs	r3, r3, #8
 8007ea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	4413      	add	r3, r2
 8007eae:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb8:	69f9      	ldr	r1, [r7, #28]
 8007eba:	fb01 f303 	mul.w	r3, r1, r3
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ec4:	e068      	b.n	8007f98 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b41      	cmp	r3, #65	@ 0x41
 8007eca:	d14c      	bne.n	8007f66 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ed4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ee2:	f043 0220 	orr.w	r2, r3, #32
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0ec      	b.n	80080ca <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e0da      	b.n	80080ca <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f24:	d10a      	bne.n	8007f3c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f36:	d101      	bne.n	8007f3c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f58:	69f9      	ldr	r1, [r7, #28]
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f64:	e018      	b.n	8007f98 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d309      	bcc.n	8007f84 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f76:	f043 0220 	orr.w	r2, r3, #32
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0a2      	b.n	80080ca <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	fb01 f303 	mul.w	r3, r1, r3
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d107      	bne.n	8007fbc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	0c9b      	lsrs	r3, r3, #18
 8007fb2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	e005      	b.n	8007fc8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	f003 020f 	and.w	r2, r3, #15
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	0e1b      	lsrs	r3, r3, #24
 800801c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	0fda      	lsrs	r2, r3, #31
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	3304      	adds	r3, #4
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008038:	2300      	movs	r3, #0
 800803a:	623b      	str	r3, [r7, #32]
 800803c:	e00a      	b.n	8008054 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	441a      	add	r2, r3
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	440b      	add	r3, r1
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	3301      	adds	r3, #1
 8008052:	623b      	str	r3, [r7, #32]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	4a1f      	ldr	r2, [pc, #124]	@ (80080d8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 800805a:	5cd3      	ldrb	r3, [r2, r3]
 800805c:	461a      	mov	r2, r3
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	4293      	cmp	r3, r2
 8008062:	d3ec      	bcc.n	800803e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b40      	cmp	r3, #64	@ 0x40
 8008068:	d105      	bne.n	8008076 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8008074:	e01e      	b.n	80080b4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b41      	cmp	r3, #65	@ 0x41
 800807a:	d105      	bne.n	8008088 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8008086:	e015      	b.n	80080b4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b1f      	cmp	r3, #31
 800808c:	d808      	bhi.n	80080a0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2101      	movs	r1, #1
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	fa01 f202 	lsl.w	r2, r1, r2
 800809a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800809e:	e009      	b.n	80080b4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 021f 	and.w	r2, r3, #31
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2101      	movs	r1, #1
 80080ac:	fa01 f202 	lsl.w	r2, r1, r2
 80080b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e008      	b.n	80080ca <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080be:	f043 0208 	orr.w	r2, r3, #8
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	372c      	adds	r7, #44	@ 0x2c
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	0801253c 	.word	0x0801253c

080080dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80080ee:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d002      	beq.n	80080fc <HAL_FDCAN_ActivateNotification+0x20>
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d155      	bne.n	80081a8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4013      	ands	r3, r2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d108      	bne.n	800811c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0201 	orr.w	r2, r2, #1
 8008118:	65da      	str	r2, [r3, #92]	@ 0x5c
 800811a:	e014      	b.n	8008146 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4013      	ands	r3, r2
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	429a      	cmp	r2, r3
 800812a:	d108      	bne.n	800813e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0202 	orr.w	r2, r2, #2
 800813a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800813c:	e003      	b.n	8008146 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2203      	movs	r2, #3
 8008144:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	430a      	orrs	r2, r1
 8008160:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	430a      	orrs	r2, r1
 800817e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	4b0f      	ldr	r3, [pc, #60]	@ (80081c8 <HAL_FDCAN_ActivateNotification+0xec>)
 800818c:	4013      	ands	r3, r2
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	430b      	orrs	r3, r1
 8008194:	6553      	str	r3, [r2, #84]	@ 0x54
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <HAL_FDCAN_ActivateNotification+0xf0>)
 8008198:	695a      	ldr	r2, [r3, #20]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	0f9b      	lsrs	r3, r3, #30
 800819e:	490b      	ldr	r1, [pc, #44]	@ (80081cc <HAL_FDCAN_ActivateNotification+0xf0>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e008      	b.n	80081ba <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081ae:	f043 0202 	orr.w	r2, r3, #2
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	3fcfffff 	.word	0x3fcfffff
 80081cc:	4000a800 	.word	0x4000a800

080081d0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b096      	sub	sp, #88	@ 0x58
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80081d8:	4b9a      	ldr	r3, [pc, #616]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	079b      	lsls	r3, r3, #30
 80081de:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80081e0:	4b98      	ldr	r3, [pc, #608]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	079b      	lsls	r3, r3, #30
 80081e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081e8:	4013      	ands	r3, r2
 80081ea:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80081f6:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008200:	4013      	ands	r3, r2
 8008202:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800820a:	f003 030f 	and.w	r3, r3, #15
 800820e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008218:	4013      	ands	r3, r2
 800821a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008226:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008230:	4013      	ands	r3, r2
 8008232:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800823a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800823e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008248:	4013      	ands	r3, r2
 800824a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008252:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8008256:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008260:	4013      	ands	r3, r2
 8008262:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008272:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008276:	0a1b      	lsrs	r3, r3, #8
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d010      	beq.n	80082a2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	0a1b      	lsrs	r3, r3, #8
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008294:	651a      	str	r2, [r3, #80]	@ 0x50
 8008296:	4b6b      	ldr	r3, [pc, #428]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 8008298:	2200      	movs	r2, #0
 800829a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fa54 	bl	800874a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80082a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a4:	0a9b      	lsrs	r3, r3, #10
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01d      	beq.n	80082ea <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80082ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b0:	0a9b      	lsrs	r3, r3, #10
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d017      	beq.n	80082ea <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80082c2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082ce:	4013      	ands	r3, r2
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082da:	651a      	str	r2, [r3, #80]	@ 0x50
 80082dc:	4b59      	ldr	r3, [pc, #356]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 80082de:	2200      	movs	r2, #0
 80082e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80082e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa07 	bl	80086f8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80082ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082f6:	4b54      	ldr	r3, [pc, #336]	@ (8008448 <HAL_FDCAN_IRQHandler+0x278>)
 80082f8:	400b      	ands	r3, r1
 80082fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80082fc:	4a51      	ldr	r2, [pc, #324]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 80082fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008300:	0f9b      	lsrs	r3, r3, #30
 8008302:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8008304:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9c0 	bl	800868c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800830c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00d      	beq.n	800832e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008318:	4b4b      	ldr	r3, [pc, #300]	@ (8008448 <HAL_FDCAN_IRQHandler+0x278>)
 800831a:	400b      	ands	r3, r1
 800831c:	6513      	str	r3, [r2, #80]	@ 0x50
 800831e:	4a49      	ldr	r2, [pc, #292]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 8008320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008322:	0f9b      	lsrs	r3, r3, #30
 8008324:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008326:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f9ba 	bl	80086a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800832e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00d      	beq.n	8008350 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800833a:	4b43      	ldr	r3, [pc, #268]	@ (8008448 <HAL_FDCAN_IRQHandler+0x278>)
 800833c:	400b      	ands	r3, r1
 800833e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008340:	4a40      	ldr	r2, [pc, #256]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 8008342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008344:	0f9b      	lsrs	r3, r3, #30
 8008346:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008348:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7f9 f9c4 	bl	80016d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800835c:	4b3a      	ldr	r3, [pc, #232]	@ (8008448 <HAL_FDCAN_IRQHandler+0x278>)
 800835e:	400b      	ands	r3, r1
 8008360:	6513      	str	r3, [r2, #80]	@ 0x50
 8008362:	4a38      	ldr	r2, [pc, #224]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 8008364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008366:	0f9b      	lsrs	r3, r3, #30
 8008368:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800836a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f9a3 	bl	80086b8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008374:	0adb      	lsrs	r3, r3, #11
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800837e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008380:	0adb      	lsrs	r3, r3, #11
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008392:	651a      	str	r2, [r3, #80]	@ 0x50
 8008394:	4b2b      	ldr	r3, [pc, #172]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 8008396:	2200      	movs	r2, #0
 8008398:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f997 	bl	80086ce <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80083a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a2:	0a5b      	lsrs	r3, r3, #9
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01d      	beq.n	80083e8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	0a5b      	lsrs	r3, r3, #9
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d017      	beq.n	80083e8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083c0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083cc:	4013      	ands	r3, r2
 80083ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80083da:	4b1a      	ldr	r3, [pc, #104]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 80083dc:	2200      	movs	r2, #0
 80083de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80083e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f97d 	bl	80086e2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80083e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ea:	0cdb      	lsrs	r3, r3, #19
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d010      	beq.n	8008416 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80083f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f6:	0cdb      	lsrs	r3, r3, #19
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008408:	651a      	str	r2, [r3, #80]	@ 0x50
 800840a:	4b0e      	ldr	r3, [pc, #56]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 800840c:	2200      	movs	r2, #0
 800840e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f97c 	bl	800870e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d016      	beq.n	8008450 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	0c1b      	lsrs	r3, r3, #16
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d010      	beq.n	8008450 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008436:	651a      	str	r2, [r3, #80]	@ 0x50
 8008438:	4b02      	ldr	r3, [pc, #8]	@ (8008444 <HAL_FDCAN_IRQHandler+0x274>)
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	e004      	b.n	800844c <HAL_FDCAN_IRQHandler+0x27c>
 8008442:	bf00      	nop
 8008444:	4000a800 	.word	0x4000a800
 8008448:	3fcfffff 	.word	0x3fcfffff
 800844c:	f000 f969 	bl	8008722 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008452:	0c9b      	lsrs	r3, r3, #18
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	0c9b      	lsrs	r3, r3, #18
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008470:	651a      	str	r2, [r3, #80]	@ 0x50
 8008472:	4b83      	ldr	r3, [pc, #524]	@ (8008680 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008474:	2200      	movs	r2, #0
 8008476:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f95c 	bl	8008736 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800847e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008480:	0c5b      	lsrs	r3, r3, #17
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d015      	beq.n	80084b6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800848a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848c:	0c5b      	lsrs	r3, r3, #17
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00f      	beq.n	80084b6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800849e:	651a      	str	r2, [r3, #80]	@ 0x50
 80084a0:	4b77      	ldr	r3, [pc, #476]	@ (8008680 <HAL_FDCAN_IRQHandler+0x4b0>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80084b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00d      	beq.n	80084d8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084c2:	4b70      	ldr	r3, [pc, #448]	@ (8008684 <HAL_FDCAN_IRQHandler+0x4b4>)
 80084c4:	400b      	ands	r3, r1
 80084c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80084c8:	4a6d      	ldr	r2, [pc, #436]	@ (8008680 <HAL_FDCAN_IRQHandler+0x4b0>)
 80084ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084cc:	0f9b      	lsrs	r3, r3, #30
 80084ce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80084d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f9 fa04 	bl	80018e0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80084d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084e4:	4b67      	ldr	r3, [pc, #412]	@ (8008684 <HAL_FDCAN_IRQHandler+0x4b4>)
 80084e6:	400b      	ands	r3, r1
 80084e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80084ea:	4a65      	ldr	r2, [pc, #404]	@ (8008680 <HAL_FDCAN_IRQHandler+0x4b0>)
 80084ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084ee:	0f9b      	lsrs	r3, r3, #30
 80084f0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80084f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a60      	ldr	r2, [pc, #384]	@ (8008688 <HAL_FDCAN_IRQHandler+0x4b8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	f040 80ac 	bne.w	8008666 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80a4 	beq.w	8008666 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008532:	4013      	ands	r3, r2
 8008534:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008540:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800854a:	4013      	ands	r3, r2
 800854c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008558:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008562:	4013      	ands	r3, r2
 8008564:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8008570:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008578:	6a3a      	ldr	r2, [r7, #32]
 800857a:	4013      	ands	r3, r2
 800857c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8008588:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008590:	69fa      	ldr	r2, [r7, #28]
 8008592:	4013      	ands	r3, r2
 8008594:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80085a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d007      	beq.n	80085bc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80085b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8db 	bl	8008772 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085c8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80085ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f8db 	bl	8008788 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	099b      	lsrs	r3, r3, #6
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01a      	beq.n	8008614 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	099b      	lsrs	r3, r3, #6
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d014      	beq.n	8008614 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f0:	0c1b      	lsrs	r3, r3, #16
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008600:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2240      	movs	r2, #64	@ 0x40
 8008608:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	6939      	ldr	r1, [r7, #16]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f8c5 	bl	800879e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008620:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8c6 	bl	80087b6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	431a      	orrs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	69fa      	ldr	r2, [r7, #28]
 8008654:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	431a      	orrs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f874 	bl	800875e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008676:	bf00      	nop
 8008678:	3758      	adds	r7, #88	@ 0x58
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	4000a800 	.word	0x4000a800
 8008684:	3fcfffff 	.word	0x3fcfffff
 8008688:	4000a000 	.word	0x4000a000

0800868c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008736:	b480      	push	{r7}
 8008738:	b083      	sub	sp, #12
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80087e2:	4ba7      	ldr	r3, [pc, #668]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	0091      	lsls	r1, r2, #2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	430b      	orrs	r3, r1
 80087f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087fc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008804:	041a      	lsls	r2, r3, #16
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	4413      	add	r3, r2
 8008818:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008822:	4b97      	ldr	r3, [pc, #604]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008824:	4013      	ands	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0091      	lsls	r1, r2, #2
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	430b      	orrs	r3, r1
 8008830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800883c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008844:	041a      	lsls	r2, r3, #16
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4413      	add	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008864:	4b86      	ldr	r3, [pc, #536]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008866:	4013      	ands	r3, r2
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	0091      	lsls	r1, r2, #2
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	430b      	orrs	r3, r1
 8008872:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800887e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	041a      	lsls	r2, r3, #16
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	4413      	add	r3, r2
 80088a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80088ac:	4b74      	ldr	r3, [pc, #464]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	0091      	lsls	r1, r2, #2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6812      	ldr	r2, [r2, #0]
 80088b8:	430b      	orrs	r3, r1
 80088ba:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80088c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ce:	041a      	lsls	r2, r3, #16
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80088f4:	4b62      	ldr	r3, [pc, #392]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	0091      	lsls	r1, r2, #2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6812      	ldr	r2, [r2, #0]
 8008900:	430b      	orrs	r3, r1
 8008902:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	4413      	add	r3, r2
 8008916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008920:	4b57      	ldr	r3, [pc, #348]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008922:	4013      	ands	r3, r2
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	0091      	lsls	r1, r2, #2
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	430b      	orrs	r3, r1
 800892e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800893a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008942:	041a      	lsls	r2, r3, #16
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	4413      	add	r3, r2
 8008958:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008962:	4b47      	ldr	r3, [pc, #284]	@ (8008a80 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008964:	4013      	ands	r3, r2
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	0091      	lsls	r1, r2, #2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	430b      	orrs	r3, r1
 8008970:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800897c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008984:	041a      	lsls	r2, r3, #16
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008998:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089a0:	061a      	lsls	r2, r3, #24
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089b0:	4b34      	ldr	r3, [pc, #208]	@ (8008a84 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80089b2:	4413      	add	r3, r2
 80089b4:	009a      	lsls	r2, r3, #2
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	441a      	add	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80089e6:	fb01 f303 	mul.w	r3, r1, r3
 80089ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80089ec:	441a      	add	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80089fe:	fb01 f303 	mul.w	r3, r1, r3
 8008a02:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008a16:	fb01 f303 	mul.w	r3, r1, r3
 8008a1a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008a1c:	441a      	add	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	441a      	add	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	441a      	add	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008a62:	fb01 f303 	mul.w	r3, r1, r3
 8008a66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008a68:	441a      	add	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a76:	4a04      	ldr	r2, [pc, #16]	@ (8008a88 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d915      	bls.n	8008aa8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008a7c:	e006      	b.n	8008a8c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008a7e:	bf00      	nop
 8008a80:	ffff0003 	.word	0xffff0003
 8008a84:	10002b00 	.word	0x10002b00
 8008a88:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a92:	f043 0220 	orr.w	r2, r3, #32
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e010      	b.n	8008aca <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	e005      	b.n	8008abc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d3f3      	bcc.n	8008ab0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop

08008ad8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b089      	sub	sp, #36	@ 0x24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008af6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008afe:	4313      	orrs	r3, r2
 8008b00:	61fb      	str	r3, [r7, #28]
 8008b02:	e00a      	b.n	8008b1a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008b0c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008b12:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b18:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b24:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008b2a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008b30:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	69fa      	ldr	r2, [r7, #28]
 8008b56:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	3304      	adds	r3, #4
 8008b68:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e020      	b.n	8008bb2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	3303      	adds	r3, #3
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	3302      	adds	r3, #2
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	440b      	add	r3, r1
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008b88:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	440b      	add	r3, r1
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008b96:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008ba0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	4a06      	ldr	r2, [pc, #24]	@ (8008bd0 <FDCAN_CopyMessageToRAM+0xf8>)
 8008bb8:	5cd3      	ldrb	r3, [r2, r3]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d3d6      	bcc.n	8008b70 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	3724      	adds	r7, #36	@ 0x24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	0801253c 	.word	0x0801253c

08008bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b089      	sub	sp, #36	@ 0x24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008be2:	4b86      	ldr	r3, [pc, #536]	@ (8008dfc <HAL_GPIO_Init+0x228>)
 8008be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008be6:	e18c      	b.n	8008f02 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	2101      	movs	r1, #1
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 817e 	beq.w	8008efc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d005      	beq.n	8008c18 <HAL_GPIO_Init+0x44>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d130      	bne.n	8008c7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	2203      	movs	r2, #3
 8008c24:	fa02 f303 	lsl.w	r3, r2, r3
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c4e:	2201      	movs	r2, #1
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	43db      	mvns	r3, r3
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	f003 0201 	and.w	r2, r3, #1
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d017      	beq.n	8008cb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	2203      	movs	r2, #3
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	43db      	mvns	r3, r3
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d123      	bne.n	8008d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	08da      	lsrs	r2, r3, #3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3208      	adds	r2, #8
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	220f      	movs	r2, #15
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	43db      	mvns	r3, r3
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	691a      	ldr	r2, [r3, #16]
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	08da      	lsrs	r2, r3, #3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3208      	adds	r2, #8
 8008d04:	69b9      	ldr	r1, [r7, #24]
 8008d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	2203      	movs	r2, #3
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	4013      	ands	r3, r2
 8008d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f003 0203 	and.w	r2, r3, #3
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80d8 	beq.w	8008efc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e00 <HAL_GPIO_Init+0x22c>)
 8008d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d52:	4a2b      	ldr	r2, [pc, #172]	@ (8008e00 <HAL_GPIO_Init+0x22c>)
 8008d54:	f043 0302 	orr.w	r3, r3, #2
 8008d58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008d5c:	4b28      	ldr	r3, [pc, #160]	@ (8008e00 <HAL_GPIO_Init+0x22c>)
 8008d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d6a:	4a26      	ldr	r2, [pc, #152]	@ (8008e04 <HAL_GPIO_Init+0x230>)
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	089b      	lsrs	r3, r3, #2
 8008d70:	3302      	adds	r3, #2
 8008d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	220f      	movs	r2, #15
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	43db      	mvns	r3, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <HAL_GPIO_Init+0x234>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d04a      	beq.n	8008e2c <HAL_GPIO_Init+0x258>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a1c      	ldr	r2, [pc, #112]	@ (8008e0c <HAL_GPIO_Init+0x238>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d02b      	beq.n	8008df6 <HAL_GPIO_Init+0x222>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a1b      	ldr	r2, [pc, #108]	@ (8008e10 <HAL_GPIO_Init+0x23c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d025      	beq.n	8008df2 <HAL_GPIO_Init+0x21e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e14 <HAL_GPIO_Init+0x240>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01f      	beq.n	8008dee <HAL_GPIO_Init+0x21a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a19      	ldr	r2, [pc, #100]	@ (8008e18 <HAL_GPIO_Init+0x244>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d019      	beq.n	8008dea <HAL_GPIO_Init+0x216>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a18      	ldr	r2, [pc, #96]	@ (8008e1c <HAL_GPIO_Init+0x248>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d013      	beq.n	8008de6 <HAL_GPIO_Init+0x212>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a17      	ldr	r2, [pc, #92]	@ (8008e20 <HAL_GPIO_Init+0x24c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00d      	beq.n	8008de2 <HAL_GPIO_Init+0x20e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a16      	ldr	r2, [pc, #88]	@ (8008e24 <HAL_GPIO_Init+0x250>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <HAL_GPIO_Init+0x20a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a15      	ldr	r2, [pc, #84]	@ (8008e28 <HAL_GPIO_Init+0x254>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d101      	bne.n	8008dda <HAL_GPIO_Init+0x206>
 8008dd6:	2309      	movs	r3, #9
 8008dd8:	e029      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008dda:	230a      	movs	r3, #10
 8008ddc:	e027      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008dde:	2307      	movs	r3, #7
 8008de0:	e025      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008de2:	2306      	movs	r3, #6
 8008de4:	e023      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008de6:	2305      	movs	r3, #5
 8008de8:	e021      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008dea:	2304      	movs	r3, #4
 8008dec:	e01f      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008dee:	2303      	movs	r3, #3
 8008df0:	e01d      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e01b      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e019      	b.n	8008e2e <HAL_GPIO_Init+0x25a>
 8008dfa:	bf00      	nop
 8008dfc:	58000080 	.word	0x58000080
 8008e00:	58024400 	.word	0x58024400
 8008e04:	58000400 	.word	0x58000400
 8008e08:	58020000 	.word	0x58020000
 8008e0c:	58020400 	.word	0x58020400
 8008e10:	58020800 	.word	0x58020800
 8008e14:	58020c00 	.word	0x58020c00
 8008e18:	58021000 	.word	0x58021000
 8008e1c:	58021400 	.word	0x58021400
 8008e20:	58021800 	.word	0x58021800
 8008e24:	58021c00 	.word	0x58021c00
 8008e28:	58022400 	.word	0x58022400
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	f002 0203 	and.w	r2, r2, #3
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	4093      	lsls	r3, r2
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e3e:	4938      	ldr	r1, [pc, #224]	@ (8008f20 <HAL_GPIO_Init+0x34c>)
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	089b      	lsrs	r3, r3, #2
 8008e44:	3302      	adds	r3, #2
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	43db      	mvns	r3, r3
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	43db      	mvns	r3, r3
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008eee:	69ba      	ldr	r2, [r7, #24]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	3301      	adds	r3, #1
 8008f00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f47f ae6b 	bne.w	8008be8 <HAL_GPIO_Init+0x14>
  }
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	3724      	adds	r7, #36	@ 0x24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	58000400 	.word	0x58000400

08008f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	887b      	ldrh	r3, [r7, #2]
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	73fb      	strb	r3, [r7, #15]
 8008f40:	e001      	b.n	8008f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	807b      	strh	r3, [r7, #2]
 8008f60:	4613      	mov	r3, r2
 8008f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f64:	787b      	ldrb	r3, [r7, #1]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f6a:	887a      	ldrh	r2, [r7, #2]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f70:	e003      	b.n	8008f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f72:	887b      	ldrh	r3, [r7, #2]
 8008f74:	041a      	lsls	r2, r3, #16
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	619a      	str	r2, [r3, #24]
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f90:	4b19      	ldr	r3, [pc, #100]	@ (8008ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0304 	and.w	r3, r3, #4
 8008f98:	2b04      	cmp	r3, #4
 8008f9a:	d00a      	beq.n	8008fb2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f9c:	4b16      	ldr	r3, [pc, #88]	@ (8008ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d001      	beq.n	8008fae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e01f      	b.n	8008fee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e01d      	b.n	8008fee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008fb2:	4b11      	ldr	r3, [pc, #68]	@ (8008ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f023 0207 	bic.w	r2, r3, #7
 8008fba:	490f      	ldr	r1, [pc, #60]	@ (8008ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008fc2:	f7f9 fe27 	bl	8002c14 <HAL_GetTick>
 8008fc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fc8:	e009      	b.n	8008fde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008fca:	f7f9 fe23 	bl	8002c14 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fd8:	d901      	bls.n	8008fde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e007      	b.n	8008fee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fde:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <HAL_PWREx_ConfigSupply+0x70>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fea:	d1ee      	bne.n	8008fca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	58024800 	.word	0x58024800

08008ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08c      	sub	sp, #48	@ 0x30
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e3c8      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	f000 8087 	beq.w	800912a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800901c:	4b88      	ldr	r3, [pc, #544]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009026:	4b86      	ldr	r3, [pc, #536]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800902c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902e:	2b10      	cmp	r3, #16
 8009030:	d007      	beq.n	8009042 <HAL_RCC_OscConfig+0x46>
 8009032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009034:	2b18      	cmp	r3, #24
 8009036:	d110      	bne.n	800905a <HAL_RCC_OscConfig+0x5e>
 8009038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d10b      	bne.n	800905a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009042:	4b7f      	ldr	r3, [pc, #508]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d06c      	beq.n	8009128 <HAL_RCC_OscConfig+0x12c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d168      	bne.n	8009128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e3a2      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009062:	d106      	bne.n	8009072 <HAL_RCC_OscConfig+0x76>
 8009064:	4b76      	ldr	r3, [pc, #472]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a75      	ldr	r2, [pc, #468]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800906a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	e02e      	b.n	80090d0 <HAL_RCC_OscConfig+0xd4>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10c      	bne.n	8009094 <HAL_RCC_OscConfig+0x98>
 800907a:	4b71      	ldr	r3, [pc, #452]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a70      	ldr	r2, [pc, #448]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	4b6e      	ldr	r3, [pc, #440]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a6d      	ldr	r2, [pc, #436]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800908c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	e01d      	b.n	80090d0 <HAL_RCC_OscConfig+0xd4>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800909c:	d10c      	bne.n	80090b8 <HAL_RCC_OscConfig+0xbc>
 800909e:	4b68      	ldr	r3, [pc, #416]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a67      	ldr	r2, [pc, #412]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	4b65      	ldr	r3, [pc, #404]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a64      	ldr	r2, [pc, #400]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	e00b      	b.n	80090d0 <HAL_RCC_OscConfig+0xd4>
 80090b8:	4b61      	ldr	r3, [pc, #388]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a60      	ldr	r2, [pc, #384]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	4b5e      	ldr	r3, [pc, #376]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a5d      	ldr	r2, [pc, #372]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d013      	beq.n	8009100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7f9 fd9c 	bl	8002c14 <HAL_GetTick>
 80090dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090e0:	f7f9 fd98 	bl	8002c14 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b64      	cmp	r3, #100	@ 0x64
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e356      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090f2:	4b53      	ldr	r3, [pc, #332]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0xe4>
 80090fe:	e014      	b.n	800912a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009100:	f7f9 fd88 	bl	8002c14 <HAL_GetTick>
 8009104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009106:	e008      	b.n	800911a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009108:	f7f9 fd84 	bl	8002c14 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b64      	cmp	r3, #100	@ 0x64
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e342      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800911a:	4b49      	ldr	r3, [pc, #292]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f0      	bne.n	8009108 <HAL_RCC_OscConfig+0x10c>
 8009126:	e000      	b.n	800912a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 808c 	beq.w	8009250 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009138:	4b41      	ldr	r3, [pc, #260]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009140:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009142:	4b3f      	ldr	r3, [pc, #252]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009146:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <HAL_RCC_OscConfig+0x162>
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	2b18      	cmp	r3, #24
 8009152:	d137      	bne.n	80091c4 <HAL_RCC_OscConfig+0x1c8>
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f003 0303 	and.w	r3, r3, #3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d132      	bne.n	80091c4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800915e:	4b38      	ldr	r3, [pc, #224]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d005      	beq.n	8009176 <HAL_RCC_OscConfig+0x17a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e314      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009176:	4b32      	ldr	r3, [pc, #200]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f023 0219 	bic.w	r2, r3, #25
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	492f      	ldr	r1, [pc, #188]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009184:	4313      	orrs	r3, r2
 8009186:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7f9 fd44 	bl	8002c14 <HAL_GetTick>
 800918c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009190:	f7f9 fd40 	bl	8002c14 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e2fe      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091a2:	4b27      	ldr	r3, [pc, #156]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f0      	beq.n	8009190 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ae:	4b24      	ldr	r3, [pc, #144]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	4920      	ldr	r1, [pc, #128]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091c2:	e045      	b.n	8009250 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d026      	beq.n	800921a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80091cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f023 0219 	bic.w	r2, r3, #25
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4919      	ldr	r1, [pc, #100]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091de:	f7f9 fd19 	bl	8002c14 <HAL_GetTick>
 80091e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091e4:	e008      	b.n	80091f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091e6:	f7f9 fd15 	bl	8002c14 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e2d3      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091f8:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0f0      	beq.n	80091e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009204:	4b0e      	ldr	r3, [pc, #56]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	061b      	lsls	r3, r3, #24
 8009212:	490b      	ldr	r1, [pc, #44]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009214:	4313      	orrs	r3, r2
 8009216:	604b      	str	r3, [r1, #4]
 8009218:	e01a      	b.n	8009250 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800921a:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a08      	ldr	r2, [pc, #32]	@ (8009240 <HAL_RCC_OscConfig+0x244>)
 8009220:	f023 0301 	bic.w	r3, r3, #1
 8009224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009226:	f7f9 fcf5 	bl	8002c14 <HAL_GetTick>
 800922a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800922c:	e00a      	b.n	8009244 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800922e:	f7f9 fcf1 	bl	8002c14 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d903      	bls.n	8009244 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e2af      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
 8009240:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009244:	4b96      	ldr	r3, [pc, #600]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ee      	bne.n	800922e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0310 	and.w	r3, r3, #16
 8009258:	2b00      	cmp	r3, #0
 800925a:	d06a      	beq.n	8009332 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800925c:	4b90      	ldr	r3, [pc, #576]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009264:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009266:	4b8e      	ldr	r3, [pc, #568]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	2b08      	cmp	r3, #8
 8009270:	d007      	beq.n	8009282 <HAL_RCC_OscConfig+0x286>
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b18      	cmp	r3, #24
 8009276:	d11b      	bne.n	80092b0 <HAL_RCC_OscConfig+0x2b4>
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	2b01      	cmp	r3, #1
 8009280:	d116      	bne.n	80092b0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009282:	4b87      	ldr	r3, [pc, #540]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <HAL_RCC_OscConfig+0x29e>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	2b80      	cmp	r3, #128	@ 0x80
 8009294:	d001      	beq.n	800929a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e282      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800929a:	4b81      	ldr	r3, [pc, #516]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	061b      	lsls	r3, r3, #24
 80092a8:	497d      	ldr	r1, [pc, #500]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092ae:	e040      	b.n	8009332 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d023      	beq.n	8009300 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80092b8:	4b79      	ldr	r3, [pc, #484]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a78      	ldr	r2, [pc, #480]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80092be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7f9 fca6 	bl	8002c14 <HAL_GetTick>
 80092c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80092cc:	f7f9 fca2 	bl	8002c14 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e260      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092de:	4b70      	ldr	r3, [pc, #448]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f0      	beq.n	80092cc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092ea:	4b6d      	ldr	r3, [pc, #436]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	061b      	lsls	r3, r3, #24
 80092f8:	4969      	ldr	r1, [pc, #420]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60cb      	str	r3, [r1, #12]
 80092fe:	e018      	b.n	8009332 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009300:	4b67      	ldr	r3, [pc, #412]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a66      	ldr	r2, [pc, #408]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800930a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930c:	f7f9 fc82 	bl	8002c14 <HAL_GetTick>
 8009310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009312:	e008      	b.n	8009326 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009314:	f7f9 fc7e 	bl	8002c14 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b02      	cmp	r3, #2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e23c      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009326:	4b5e      	ldr	r3, [pc, #376]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f0      	bne.n	8009314 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b00      	cmp	r3, #0
 800933c:	d036      	beq.n	80093ac <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d019      	beq.n	800937a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009346:	4b56      	ldr	r3, [pc, #344]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800934a:	4a55      	ldr	r2, [pc, #340]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009352:	f7f9 fc5f 	bl	8002c14 <HAL_GetTick>
 8009356:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009358:	e008      	b.n	800936c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800935a:	f7f9 fc5b 	bl	8002c14 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b02      	cmp	r3, #2
 8009366:	d901      	bls.n	800936c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e219      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800936c:	4b4c      	ldr	r3, [pc, #304]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800936e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0f0      	beq.n	800935a <HAL_RCC_OscConfig+0x35e>
 8009378:	e018      	b.n	80093ac <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800937a:	4b49      	ldr	r3, [pc, #292]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800937c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800937e:	4a48      	ldr	r2, [pc, #288]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009386:	f7f9 fc45 	bl	8002c14 <HAL_GetTick>
 800938a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800938c:	e008      	b.n	80093a0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800938e:	f7f9 fc41 	bl	8002c14 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e1ff      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80093a0:	4b3f      	ldr	r3, [pc, #252]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80093a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1f0      	bne.n	800938e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d036      	beq.n	8009426 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d019      	beq.n	80093f4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093c0:	4b37      	ldr	r3, [pc, #220]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a36      	ldr	r2, [pc, #216]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80093c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80093ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093cc:	f7f9 fc22 	bl	8002c14 <HAL_GetTick>
 80093d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093d2:	e008      	b.n	80093e6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093d4:	f7f9 fc1e 	bl	8002c14 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d901      	bls.n	80093e6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80093e2:	2303      	movs	r3, #3
 80093e4:	e1dc      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093e6:	4b2e      	ldr	r3, [pc, #184]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <HAL_RCC_OscConfig+0x3d8>
 80093f2:	e018      	b.n	8009426 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093f4:	4b2a      	ldr	r3, [pc, #168]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a29      	ldr	r2, [pc, #164]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 80093fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009400:	f7f9 fc08 	bl	8002c14 <HAL_GetTick>
 8009404:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009408:	f7f9 fc04 	bl	8002c14 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e1c2      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800941a:	4b21      	ldr	r3, [pc, #132]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 8086 	beq.w	8009540 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009434:	4b1b      	ldr	r3, [pc, #108]	@ (80094a4 <HAL_RCC_OscConfig+0x4a8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a1a      	ldr	r2, [pc, #104]	@ (80094a4 <HAL_RCC_OscConfig+0x4a8>)
 800943a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800943e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009440:	f7f9 fbe8 	bl	8002c14 <HAL_GetTick>
 8009444:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009446:	e008      	b.n	800945a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009448:	f7f9 fbe4 	bl	8002c14 <HAL_GetTick>
 800944c:	4602      	mov	r2, r0
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b64      	cmp	r3, #100	@ 0x64
 8009454:	d901      	bls.n	800945a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e1a2      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800945a:	4b12      	ldr	r3, [pc, #72]	@ (80094a4 <HAL_RCC_OscConfig+0x4a8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f0      	beq.n	8009448 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d106      	bne.n	800947c <HAL_RCC_OscConfig+0x480>
 800946e:	4b0c      	ldr	r3, [pc, #48]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009472:	4a0b      	ldr	r2, [pc, #44]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009474:	f043 0301 	orr.w	r3, r3, #1
 8009478:	6713      	str	r3, [r2, #112]	@ 0x70
 800947a:	e032      	b.n	80094e2 <HAL_RCC_OscConfig+0x4e6>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d111      	bne.n	80094a8 <HAL_RCC_OscConfig+0x4ac>
 8009484:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009488:	4a05      	ldr	r2, [pc, #20]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 800948a:	f023 0301 	bic.w	r3, r3, #1
 800948e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009490:	4b03      	ldr	r3, [pc, #12]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009494:	4a02      	ldr	r2, [pc, #8]	@ (80094a0 <HAL_RCC_OscConfig+0x4a4>)
 8009496:	f023 0304 	bic.w	r3, r3, #4
 800949a:	6713      	str	r3, [r2, #112]	@ 0x70
 800949c:	e021      	b.n	80094e2 <HAL_RCC_OscConfig+0x4e6>
 800949e:	bf00      	nop
 80094a0:	58024400 	.word	0x58024400
 80094a4:	58024800 	.word	0x58024800
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b05      	cmp	r3, #5
 80094ae:	d10c      	bne.n	80094ca <HAL_RCC_OscConfig+0x4ce>
 80094b0:	4b83      	ldr	r3, [pc, #524]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b4:	4a82      	ldr	r2, [pc, #520]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	f043 0304 	orr.w	r3, r3, #4
 80094ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80094bc:	4b80      	ldr	r3, [pc, #512]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c0:	4a7f      	ldr	r2, [pc, #508]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094c2:	f043 0301 	orr.w	r3, r3, #1
 80094c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80094c8:	e00b      	b.n	80094e2 <HAL_RCC_OscConfig+0x4e6>
 80094ca:	4b7d      	ldr	r3, [pc, #500]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ce:	4a7c      	ldr	r2, [pc, #496]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80094d6:	4b7a      	ldr	r3, [pc, #488]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094da:	4a79      	ldr	r2, [pc, #484]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80094dc:	f023 0304 	bic.w	r3, r3, #4
 80094e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d015      	beq.n	8009516 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ea:	f7f9 fb93 	bl	8002c14 <HAL_GetTick>
 80094ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094f0:	e00a      	b.n	8009508 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094f2:	f7f9 fb8f 	bl	8002c14 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009500:	4293      	cmp	r3, r2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e14b      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009508:	4b6d      	ldr	r3, [pc, #436]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800950a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800950c:	f003 0302 	and.w	r3, r3, #2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0ee      	beq.n	80094f2 <HAL_RCC_OscConfig+0x4f6>
 8009514:	e014      	b.n	8009540 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009516:	f7f9 fb7d 	bl	8002c14 <HAL_GetTick>
 800951a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800951c:	e00a      	b.n	8009534 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800951e:	f7f9 fb79 	bl	8002c14 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800952c:	4293      	cmp	r3, r2
 800952e:	d901      	bls.n	8009534 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e135      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009534:	4b62      	ldr	r3, [pc, #392]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1ee      	bne.n	800951e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 812a 	beq.w	800979e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800954a:	4b5d      	ldr	r3, [pc, #372]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009552:	2b18      	cmp	r3, #24
 8009554:	f000 80ba 	beq.w	80096cc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955c:	2b02      	cmp	r3, #2
 800955e:	f040 8095 	bne.w	800968c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009562:	4b57      	ldr	r3, [pc, #348]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a56      	ldr	r2, [pc, #344]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009568:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800956c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956e:	f7f9 fb51 	bl	8002c14 <HAL_GetTick>
 8009572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009574:	e008      	b.n	8009588 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009576:	f7f9 fb4d 	bl	8002c14 <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	2b02      	cmp	r3, #2
 8009582:	d901      	bls.n	8009588 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e10b      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009588:	4b4d      	ldr	r3, [pc, #308]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f0      	bne.n	8009576 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009594:	4b4a      	ldr	r3, [pc, #296]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009598:	4b4a      	ldr	r3, [pc, #296]	@ (80096c4 <HAL_RCC_OscConfig+0x6c8>)
 800959a:	4013      	ands	r3, r2
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80095a4:	0112      	lsls	r2, r2, #4
 80095a6:	430a      	orrs	r2, r1
 80095a8:	4945      	ldr	r1, [pc, #276]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	628b      	str	r3, [r1, #40]	@ 0x28
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b2:	3b01      	subs	r3, #1
 80095b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095bc:	3b01      	subs	r3, #1
 80095be:	025b      	lsls	r3, r3, #9
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	431a      	orrs	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c8:	3b01      	subs	r3, #1
 80095ca:	041b      	lsls	r3, r3, #16
 80095cc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095d6:	3b01      	subs	r3, #1
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095de:	4938      	ldr	r1, [pc, #224]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80095e4:	4b36      	ldr	r3, [pc, #216]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	4a35      	ldr	r2, [pc, #212]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80095ea:	f023 0301 	bic.w	r3, r3, #1
 80095ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095f0:	4b33      	ldr	r3, [pc, #204]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80095f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095f4:	4b34      	ldr	r3, [pc, #208]	@ (80096c8 <HAL_RCC_OscConfig+0x6cc>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80095fc:	00d2      	lsls	r2, r2, #3
 80095fe:	4930      	ldr	r1, [pc, #192]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009600:	4313      	orrs	r3, r2
 8009602:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009604:	4b2e      	ldr	r3, [pc, #184]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	f023 020c 	bic.w	r2, r3, #12
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009610:	492b      	ldr	r1, [pc, #172]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009612:	4313      	orrs	r3, r2
 8009614:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009616:	4b2a      	ldr	r3, [pc, #168]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961a:	f023 0202 	bic.w	r2, r3, #2
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009622:	4927      	ldr	r1, [pc, #156]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009624:	4313      	orrs	r3, r2
 8009626:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009628:	4b25      	ldr	r3, [pc, #148]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	4a24      	ldr	r2, [pc, #144]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800962e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009634:	4b22      	ldr	r3, [pc, #136]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009638:	4a21      	ldr	r2, [pc, #132]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800963a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800963e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009640:	4b1f      	ldr	r3, [pc, #124]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	4a1e      	ldr	r2, [pc, #120]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800964a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800964c:	4b1c      	ldr	r3, [pc, #112]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800964e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009650:	4a1b      	ldr	r2, [pc, #108]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009652:	f043 0301 	orr.w	r3, r3, #1
 8009656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009658:	4b19      	ldr	r3, [pc, #100]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a18      	ldr	r2, [pc, #96]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800965e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009664:	f7f9 fad6 	bl	8002c14 <HAL_GetTick>
 8009668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800966a:	e008      	b.n	800967e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800966c:	f7f9 fad2 	bl	8002c14 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d901      	bls.n	800967e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e090      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800967e:	4b10      	ldr	r3, [pc, #64]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f0      	beq.n	800966c <HAL_RCC_OscConfig+0x670>
 800968a:	e088      	b.n	800979e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800968c:	4b0c      	ldr	r3, [pc, #48]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a0b      	ldr	r2, [pc, #44]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 8009692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009698:	f7f9 fabc 	bl	8002c14 <HAL_GetTick>
 800969c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800969e:	e008      	b.n	80096b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096a0:	f7f9 fab8 	bl	8002c14 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d901      	bls.n	80096b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e076      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096b2:	4b03      	ldr	r3, [pc, #12]	@ (80096c0 <HAL_RCC_OscConfig+0x6c4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1f0      	bne.n	80096a0 <HAL_RCC_OscConfig+0x6a4>
 80096be:	e06e      	b.n	800979e <HAL_RCC_OscConfig+0x7a2>
 80096c0:	58024400 	.word	0x58024400
 80096c4:	fffffc0c 	.word	0xfffffc0c
 80096c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80096cc:	4b36      	ldr	r3, [pc, #216]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 80096ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80096d2:	4b35      	ldr	r3, [pc, #212]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 80096d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d031      	beq.n	8009744 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f003 0203 	and.w	r2, r3, #3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d12a      	bne.n	8009744 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	091b      	lsrs	r3, r3, #4
 80096f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d122      	bne.n	8009744 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009708:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800970a:	429a      	cmp	r2, r3
 800970c:	d11a      	bne.n	8009744 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	0a5b      	lsrs	r3, r3, #9
 8009712:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800971a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800971c:	429a      	cmp	r2, r3
 800971e:	d111      	bne.n	8009744 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800972c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800972e:	429a      	cmp	r2, r3
 8009730:	d108      	bne.n	8009744 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	0e1b      	lsrs	r3, r3, #24
 8009736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009740:	429a      	cmp	r2, r3
 8009742:	d001      	beq.n	8009748 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e02b      	b.n	80097a0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009748:	4b17      	ldr	r3, [pc, #92]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 800974a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974c:	08db      	lsrs	r3, r3, #3
 800974e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009752:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	429a      	cmp	r2, r3
 800975c:	d01f      	beq.n	800979e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800975e:	4b12      	ldr	r3, [pc, #72]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 8009760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009762:	4a11      	ldr	r2, [pc, #68]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 8009764:	f023 0301 	bic.w	r3, r3, #1
 8009768:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800976a:	f7f9 fa53 	bl	8002c14 <HAL_GetTick>
 800976e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009770:	bf00      	nop
 8009772:	f7f9 fa4f 	bl	8002c14 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	4293      	cmp	r3, r2
 800977c:	d0f9      	beq.n	8009772 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800977e:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 8009780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009782:	4b0a      	ldr	r3, [pc, #40]	@ (80097ac <HAL_RCC_OscConfig+0x7b0>)
 8009784:	4013      	ands	r3, r2
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800978a:	00d2      	lsls	r2, r2, #3
 800978c:	4906      	ldr	r1, [pc, #24]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 800978e:	4313      	orrs	r3, r2
 8009790:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009792:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	4a04      	ldr	r2, [pc, #16]	@ (80097a8 <HAL_RCC_OscConfig+0x7ac>)
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3730      	adds	r7, #48	@ 0x30
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	58024400 	.word	0x58024400
 80097ac:	ffff0007 	.word	0xffff0007

080097b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e19c      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097c4:	4b8a      	ldr	r3, [pc, #552]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 030f 	and.w	r3, r3, #15
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d910      	bls.n	80097f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097d2:	4b87      	ldr	r3, [pc, #540]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f023 020f 	bic.w	r2, r3, #15
 80097da:	4985      	ldr	r1, [pc, #532]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	4313      	orrs	r3, r2
 80097e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097e2:	4b83      	ldr	r3, [pc, #524]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d001      	beq.n	80097f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e184      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d010      	beq.n	8009822 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	4b7b      	ldr	r3, [pc, #492]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800980c:	429a      	cmp	r2, r3
 800980e:	d908      	bls.n	8009822 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009810:	4b78      	ldr	r3, [pc, #480]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	4975      	ldr	r1, [pc, #468]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800981e:	4313      	orrs	r3, r2
 8009820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0308 	and.w	r3, r3, #8
 800982a:	2b00      	cmp	r3, #0
 800982c:	d010      	beq.n	8009850 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	695a      	ldr	r2, [r3, #20]
 8009832:	4b70      	ldr	r3, [pc, #448]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800983a:	429a      	cmp	r2, r3
 800983c:	d908      	bls.n	8009850 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800983e:	4b6d      	ldr	r3, [pc, #436]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	496a      	ldr	r1, [pc, #424]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800984c:	4313      	orrs	r3, r2
 800984e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0310 	and.w	r3, r3, #16
 8009858:	2b00      	cmp	r3, #0
 800985a:	d010      	beq.n	800987e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699a      	ldr	r2, [r3, #24]
 8009860:	4b64      	ldr	r3, [pc, #400]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009868:	429a      	cmp	r2, r3
 800986a:	d908      	bls.n	800987e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800986c:	4b61      	ldr	r3, [pc, #388]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	495e      	ldr	r1, [pc, #376]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800987a:	4313      	orrs	r3, r2
 800987c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0320 	and.w	r3, r3, #32
 8009886:	2b00      	cmp	r3, #0
 8009888:	d010      	beq.n	80098ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69da      	ldr	r2, [r3, #28]
 800988e:	4b59      	ldr	r3, [pc, #356]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009896:	429a      	cmp	r2, r3
 8009898:	d908      	bls.n	80098ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800989a:	4b56      	ldr	r3, [pc, #344]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	4953      	ldr	r1, [pc, #332]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d010      	beq.n	80098da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	4b4d      	ldr	r3, [pc, #308]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d908      	bls.n	80098da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098c8:	4b4a      	ldr	r3, [pc, #296]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	f023 020f 	bic.w	r2, r3, #15
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	4947      	ldr	r1, [pc, #284]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d055      	beq.n	8009992 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80098e6:	4b43      	ldr	r3, [pc, #268]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	4940      	ldr	r1, [pc, #256]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d107      	bne.n	8009910 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009900:	4b3c      	ldr	r3, [pc, #240]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d121      	bne.n	8009950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e0f6      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d107      	bne.n	8009928 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009918:	4b36      	ldr	r3, [pc, #216]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d115      	bne.n	8009950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e0ea      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d107      	bne.n	8009940 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009930:	4b30      	ldr	r3, [pc, #192]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009938:	2b00      	cmp	r3, #0
 800993a:	d109      	bne.n	8009950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e0de      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009940:	4b2c      	ldr	r3, [pc, #176]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e0d6      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009950:	4b28      	ldr	r3, [pc, #160]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	f023 0207 	bic.w	r2, r3, #7
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4925      	ldr	r1, [pc, #148]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 800995e:	4313      	orrs	r3, r2
 8009960:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009962:	f7f9 f957 	bl	8002c14 <HAL_GetTick>
 8009966:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009968:	e00a      	b.n	8009980 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800996a:	f7f9 f953 	bl	8002c14 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009978:	4293      	cmp	r3, r2
 800997a:	d901      	bls.n	8009980 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e0be      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009980:	4b1c      	ldr	r3, [pc, #112]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	429a      	cmp	r2, r3
 8009990:	d1eb      	bne.n	800996a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d010      	beq.n	80099c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68da      	ldr	r2, [r3, #12]
 80099a2:	4b14      	ldr	r3, [pc, #80]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f003 030f 	and.w	r3, r3, #15
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d208      	bcs.n	80099c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099ae:	4b11      	ldr	r3, [pc, #68]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	f023 020f 	bic.w	r2, r3, #15
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	490e      	ldr	r1, [pc, #56]	@ (80099f4 <HAL_RCC_ClockConfig+0x244>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099c0:	4b0b      	ldr	r3, [pc, #44]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d214      	bcs.n	80099f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ce:	4b08      	ldr	r3, [pc, #32]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f023 020f 	bic.w	r2, r3, #15
 80099d6:	4906      	ldr	r1, [pc, #24]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	4313      	orrs	r3, r2
 80099dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099de:	4b04      	ldr	r3, [pc, #16]	@ (80099f0 <HAL_RCC_ClockConfig+0x240>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d005      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e086      	b.n	8009afe <HAL_RCC_ClockConfig+0x34e>
 80099f0:	52002000 	.word	0x52002000
 80099f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d010      	beq.n	8009a26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691a      	ldr	r2, [r3, #16]
 8009a08:	4b3f      	ldr	r3, [pc, #252]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d208      	bcs.n	8009a26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a14:	4b3c      	ldr	r3, [pc, #240]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	4939      	ldr	r1, [pc, #228]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0308 	and.w	r3, r3, #8
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d010      	beq.n	8009a54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695a      	ldr	r2, [r3, #20]
 8009a36:	4b34      	ldr	r3, [pc, #208]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d208      	bcs.n	8009a54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a42:	4b31      	ldr	r3, [pc, #196]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	492e      	ldr	r1, [pc, #184]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0310 	and.w	r3, r3, #16
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d010      	beq.n	8009a82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	4b28      	ldr	r3, [pc, #160]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a66:	69db      	ldr	r3, [r3, #28]
 8009a68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d208      	bcs.n	8009a82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a70:	4b25      	ldr	r3, [pc, #148]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	4922      	ldr	r1, [pc, #136]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d010      	beq.n	8009ab0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69da      	ldr	r2, [r3, #28]
 8009a92:	4b1d      	ldr	r3, [pc, #116]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d208      	bcs.n	8009ab0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	4917      	ldr	r1, [pc, #92]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009aac:	4313      	orrs	r3, r2
 8009aae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ab0:	f000 f834 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	4b14      	ldr	r3, [pc, #80]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	4912      	ldr	r1, [pc, #72]	@ (8009b0c <HAL_RCC_ClockConfig+0x35c>)
 8009ac2:	5ccb      	ldrb	r3, [r1, r3]
 8009ac4:	f003 031f 	and.w	r3, r3, #31
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ace:	4b0e      	ldr	r3, [pc, #56]	@ (8009b08 <HAL_RCC_ClockConfig+0x358>)
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	f003 030f 	and.w	r3, r3, #15
 8009ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8009b0c <HAL_RCC_ClockConfig+0x35c>)
 8009ad8:	5cd3      	ldrb	r3, [r2, r3]
 8009ada:	f003 031f 	and.w	r3, r3, #31
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8009b10 <HAL_RCC_ClockConfig+0x360>)
 8009ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8009b14 <HAL_RCC_ClockConfig+0x364>)
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009aee:	4b0a      	ldr	r3, [pc, #40]	@ (8009b18 <HAL_RCC_ClockConfig+0x368>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f9 f844 	bl	8002b80 <HAL_InitTick>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	08012524 	.word	0x08012524
 8009b10:	24000010 	.word	0x24000010
 8009b14:	2400000c 	.word	0x2400000c
 8009b18:	24000014 	.word	0x24000014

08009b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b089      	sub	sp, #36	@ 0x24
 8009b20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b22:	4bb3      	ldr	r3, [pc, #716]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b2a:	2b18      	cmp	r3, #24
 8009b2c:	f200 8155 	bhi.w	8009dda <HAL_RCC_GetSysClockFreq+0x2be>
 8009b30:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b9d 	.word	0x08009b9d
 8009b3c:	08009ddb 	.word	0x08009ddb
 8009b40:	08009ddb 	.word	0x08009ddb
 8009b44:	08009ddb 	.word	0x08009ddb
 8009b48:	08009ddb 	.word	0x08009ddb
 8009b4c:	08009ddb 	.word	0x08009ddb
 8009b50:	08009ddb 	.word	0x08009ddb
 8009b54:	08009ddb 	.word	0x08009ddb
 8009b58:	08009bc3 	.word	0x08009bc3
 8009b5c:	08009ddb 	.word	0x08009ddb
 8009b60:	08009ddb 	.word	0x08009ddb
 8009b64:	08009ddb 	.word	0x08009ddb
 8009b68:	08009ddb 	.word	0x08009ddb
 8009b6c:	08009ddb 	.word	0x08009ddb
 8009b70:	08009ddb 	.word	0x08009ddb
 8009b74:	08009ddb 	.word	0x08009ddb
 8009b78:	08009bc9 	.word	0x08009bc9
 8009b7c:	08009ddb 	.word	0x08009ddb
 8009b80:	08009ddb 	.word	0x08009ddb
 8009b84:	08009ddb 	.word	0x08009ddb
 8009b88:	08009ddb 	.word	0x08009ddb
 8009b8c:	08009ddb 	.word	0x08009ddb
 8009b90:	08009ddb 	.word	0x08009ddb
 8009b94:	08009ddb 	.word	0x08009ddb
 8009b98:	08009bcf 	.word	0x08009bcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b9c:	4b94      	ldr	r3, [pc, #592]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba8:	4b91      	ldr	r3, [pc, #580]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	08db      	lsrs	r3, r3, #3
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	4a90      	ldr	r2, [pc, #576]	@ (8009df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009bba:	e111      	b.n	8009de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009bbc:	4b8d      	ldr	r3, [pc, #564]	@ (8009df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bbe:	61bb      	str	r3, [r7, #24]
      break;
 8009bc0:	e10e      	b.n	8009de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8009df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009bc4:	61bb      	str	r3, [r7, #24]
      break;
 8009bc6:	e10b      	b.n	8009de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8009dfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009bca:	61bb      	str	r3, [r7, #24]
      break;
 8009bcc:	e108      	b.n	8009de0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bce:	4b88      	ldr	r3, [pc, #544]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009bd8:	4b85      	ldr	r3, [pc, #532]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bdc:	091b      	lsrs	r3, r3, #4
 8009bde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009be2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009be4:	4b82      	ldr	r3, [pc, #520]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009bee:	4b80      	ldr	r3, [pc, #512]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bf2:	08db      	lsrs	r3, r3, #3
 8009bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	fb02 f303 	mul.w	r3, r2, r3
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80e1 	beq.w	8009dd4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	f000 8083 	beq.w	8009d20 <HAL_RCC_GetSysClockFreq+0x204>
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	f200 80a1 	bhi.w	8009d64 <HAL_RCC_GetSysClockFreq+0x248>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d003      	beq.n	8009c30 <HAL_RCC_GetSysClockFreq+0x114>
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d056      	beq.n	8009cdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8009c2e:	e099      	b.n	8009d64 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c30:	4b6f      	ldr	r3, [pc, #444]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0320 	and.w	r3, r3, #32
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d02d      	beq.n	8009c98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	08db      	lsrs	r3, r3, #3
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	4a6b      	ldr	r2, [pc, #428]	@ (8009df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c48:	fa22 f303 	lsr.w	r3, r2, r3
 8009c4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c66:	4b62      	ldr	r3, [pc, #392]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6e:	ee07 3a90 	vmov	s15, r3
 8009c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009c96:	e087      	b.n	8009da8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	ee07 3a90 	vmov	s15, r3
 8009c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009e04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009caa:	4b51      	ldr	r3, [pc, #324]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cbe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cda:	e065      	b.n	8009da8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cee:	4b40      	ldr	r3, [pc, #256]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d1e:	e043      	b.n	8009da8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009e0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d32:	4b2f      	ldr	r3, [pc, #188]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d62:	e021      	b.n	8009da8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d76:	4b1e      	ldr	r3, [pc, #120]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009da6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009da8:	4b11      	ldr	r3, [pc, #68]	@ (8009df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dac:	0a5b      	lsrs	r3, r3, #9
 8009dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009db2:	3301      	adds	r3, #1
 8009db4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dcc:	ee17 3a90 	vmov	r3, s15
 8009dd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009dd2:	e005      	b.n	8009de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61bb      	str	r3, [r7, #24]
      break;
 8009dd8:	e002      	b.n	8009de0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009dda:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ddc:	61bb      	str	r3, [r7, #24]
      break;
 8009dde:	bf00      	nop
  }

  return sysclockfreq;
 8009de0:	69bb      	ldr	r3, [r7, #24]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3724      	adds	r7, #36	@ 0x24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	58024400 	.word	0x58024400
 8009df4:	03d09000 	.word	0x03d09000
 8009df8:	003d0900 	.word	0x003d0900
 8009dfc:	016e3600 	.word	0x016e3600
 8009e00:	46000000 	.word	0x46000000
 8009e04:	4c742400 	.word	0x4c742400
 8009e08:	4a742400 	.word	0x4a742400
 8009e0c:	4bb71b00 	.word	0x4bb71b00

08009e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e16:	f7ff fe81 	bl	8009b1c <HAL_RCC_GetSysClockFreq>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	4b10      	ldr	r3, [pc, #64]	@ (8009e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	0a1b      	lsrs	r3, r3, #8
 8009e22:	f003 030f 	and.w	r3, r3, #15
 8009e26:	490f      	ldr	r1, [pc, #60]	@ (8009e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e28:	5ccb      	ldrb	r3, [r1, r3]
 8009e2a:	f003 031f 	and.w	r3, r3, #31
 8009e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e34:	4b0a      	ldr	r3, [pc, #40]	@ (8009e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	4a09      	ldr	r2, [pc, #36]	@ (8009e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e3e:	5cd3      	ldrb	r3, [r2, r3]
 8009e40:	f003 031f 	and.w	r3, r3, #31
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4a:	4a07      	ldr	r2, [pc, #28]	@ (8009e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e4e:	4a07      	ldr	r2, [pc, #28]	@ (8009e6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009e54:	4b04      	ldr	r3, [pc, #16]	@ (8009e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e56:	681b      	ldr	r3, [r3, #0]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	58024400 	.word	0x58024400
 8009e64:	08012524 	.word	0x08012524
 8009e68:	24000010 	.word	0x24000010
 8009e6c:	2400000c 	.word	0x2400000c

08009e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e74:	f7ff ffcc 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	4b06      	ldr	r3, [pc, #24]	@ (8009e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	091b      	lsrs	r3, r3, #4
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	4904      	ldr	r1, [pc, #16]	@ (8009e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e86:	5ccb      	ldrb	r3, [r1, r3]
 8009e88:	f003 031f 	and.w	r3, r3, #31
 8009e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	58024400 	.word	0x58024400
 8009e98:	08012524 	.word	0x08012524

08009e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009ea0:	f7ff ffb6 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	4b06      	ldr	r3, [pc, #24]	@ (8009ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	0a1b      	lsrs	r3, r3, #8
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	4904      	ldr	r1, [pc, #16]	@ (8009ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009eb2:	5ccb      	ldrb	r3, [r1, r3]
 8009eb4:	f003 031f 	and.w	r3, r3, #31
 8009eb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	58024400 	.word	0x58024400
 8009ec4:	08012524 	.word	0x08012524

08009ec8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ecc:	b0c6      	sub	sp, #280	@ 0x118
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009eda:	2300      	movs	r3, #0
 8009edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009eec:	2500      	movs	r5, #0
 8009eee:	ea54 0305 	orrs.w	r3, r4, r5
 8009ef2:	d049      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009efa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009efe:	d02f      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009f00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f04:	d828      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f0a:	d01a      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f10:	d822      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1a:	d007      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f1c:	e01c      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1e:	4bab      	ldr	r3, [pc, #684]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	4aaa      	ldr	r2, [pc, #680]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f2a:	e01a      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f30:	3308      	adds	r3, #8
 8009f32:	2102      	movs	r1, #2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f002 fa49 	bl	800c3cc <RCCEx_PLL2_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f40:	e00f      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f46:	3328      	adds	r3, #40	@ 0x28
 8009f48:	2102      	movs	r1, #2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f002 faf0 	bl	800c530 <RCCEx_PLL3_Config>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f56:	e004      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f5e:	e000      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10a      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f6a:	4b98      	ldr	r3, [pc, #608]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f78:	4a94      	ldr	r2, [pc, #592]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f7e:	e003      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009f94:	f04f 0900 	mov.w	r9, #0
 8009f98:	ea58 0309 	orrs.w	r3, r8, r9
 8009f9c:	d047      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d82a      	bhi.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fae:	bf00      	nop
 8009fb0:	08009fc5 	.word	0x08009fc5
 8009fb4:	08009fd3 	.word	0x08009fd3
 8009fb8:	08009fe9 	.word	0x08009fe9
 8009fbc:	0800a007 	.word	0x0800a007
 8009fc0:	0800a007 	.word	0x0800a007
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc4:	4b81      	ldr	r3, [pc, #516]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc8:	4a80      	ldr	r2, [pc, #512]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fd0:	e01a      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f002 f9f6 	bl	800c3cc <RCCEx_PLL2_Config>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe6:	e00f      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fec:	3328      	adds	r3, #40	@ 0x28
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f002 fa9d 	bl	800c530 <RCCEx_PLL3_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ffc:	e004      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a004:	e000      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a010:	4b6e      	ldr	r3, [pc, #440]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a014:	f023 0107 	bic.w	r1, r3, #7
 800a018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a01e:	4a6b      	ldr	r2, [pc, #428]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a020:	430b      	orrs	r3, r1
 800a022:	6513      	str	r3, [r2, #80]	@ 0x50
 800a024:	e003      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a026:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a02a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a03a:	f04f 0b00 	mov.w	fp, #0
 800a03e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a042:	d05b      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a04c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a050:	d03b      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a052:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a056:	d834      	bhi.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a058:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a05c:	d037      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a05e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a062:	d82e      	bhi.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a064:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a068:	d033      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a06a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a06e:	d828      	bhi.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a074:	d01a      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a07a:	d822      	bhi.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a080:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a084:	d007      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a086:	e01c      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a088:	4b50      	ldr	r3, [pc, #320]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08c:	4a4f      	ldr	r2, [pc, #316]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a08e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a094:	e01e      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09a:	3308      	adds	r3, #8
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f002 f994 	bl	800c3cc <RCCEx_PLL2_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0aa:	e013      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b0:	3328      	adds	r3, #40	@ 0x28
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 fa3b 	bl	800c530 <RCCEx_PLL3_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0c0:	e008      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0c8:	e004      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0ca:	bf00      	nop
 800a0cc:	e002      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0ce:	bf00      	nop
 800a0d0:	e000      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10b      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a0dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0e0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0ec:	4a37      	ldr	r2, [pc, #220]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a108:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a10c:	2300      	movs	r3, #0
 800a10e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a112:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a116:	460b      	mov	r3, r1
 800a118:	4313      	orrs	r3, r2
 800a11a:	d05d      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a124:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a128:	d03b      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a12a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a12e:	d834      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a130:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a134:	d037      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a136:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a13a:	d82e      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a13c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a140:	d033      	beq.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a142:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a146:	d828      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a148:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a14c:	d01a      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a14e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a152:	d822      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a15c:	d007      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a15e:	e01c      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a160:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a164:	4a19      	ldr	r2, [pc, #100]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a16a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a16c:	e01e      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a172:	3308      	adds	r3, #8
 800a174:	2100      	movs	r1, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f002 f928 	bl	800c3cc <RCCEx_PLL2_Config>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a182:	e013      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a188:	3328      	adds	r3, #40	@ 0x28
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f002 f9cf 	bl	800c530 <RCCEx_PLL3_Config>
 800a192:	4603      	mov	r3, r0
 800a194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a198:	e008      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1a0:	e004      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a1a2:	bf00      	nop
 800a1a4:	e002      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a1a6:	bf00      	nop
 800a1a8:	e000      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10d      	bne.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1b4:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a1c4:	4a01      	ldr	r2, [pc, #4]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1ca:	e005      	b.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a1cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a1e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1ee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	d03a      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fe:	2b30      	cmp	r3, #48	@ 0x30
 800a200:	d01f      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a202:	2b30      	cmp	r3, #48	@ 0x30
 800a204:	d819      	bhi.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a206:	2b20      	cmp	r3, #32
 800a208:	d00c      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	d815      	bhi.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d019      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a212:	2b10      	cmp	r3, #16
 800a214:	d111      	bne.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a216:	4baa      	ldr	r3, [pc, #680]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21a:	4aa9      	ldr	r2, [pc, #676]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a21c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a222:	e011      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a228:	3308      	adds	r3, #8
 800a22a:	2102      	movs	r1, #2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f002 f8cd 	bl	800c3cc <RCCEx_PLL2_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a238:	e006      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a240:	e002      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a246:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10a      	bne.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a250:	4b9b      	ldr	r3, [pc, #620]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a254:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a25e:	4a98      	ldr	r2, [pc, #608]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a260:	430b      	orrs	r3, r1
 800a262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a264:	e003      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a266:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a26a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a276:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a27a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a27e:	2300      	movs	r3, #0
 800a280:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a284:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a288:	460b      	mov	r3, r1
 800a28a:	4313      	orrs	r3, r2
 800a28c:	d051      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a298:	d035      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a29a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a29e:	d82e      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a2a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2a4:	d031      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a2a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2aa:	d828      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a2ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b0:	d01a      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a2b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b6:	d822      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a2bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c0:	d007      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a2c2:	e01c      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c8:	4a7d      	ldr	r2, [pc, #500]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2d0:	e01c      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 f876 	bl	800c3cc <RCCEx_PLL2_Config>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2e6:	e011      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ec:	3328      	adds	r3, #40	@ 0x28
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f002 f91d 	bl	800c530 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2fc:	e006      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a304:	e002      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a306:	bf00      	nop
 800a308:	e000      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a30a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a30c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10a      	bne.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a314:	4b6a      	ldr	r3, [pc, #424]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a318:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a322:	4a67      	ldr	r2, [pc, #412]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a324:	430b      	orrs	r3, r1
 800a326:	6513      	str	r3, [r2, #80]	@ 0x50
 800a328:	e003      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a32a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a32e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a33e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a342:	2300      	movs	r3, #0
 800a344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a348:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4313      	orrs	r3, r2
 800a350:	d053      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a35c:	d033      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a35e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a362:	d82c      	bhi.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a364:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a368:	d02f      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a36a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a36e:	d826      	bhi.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a370:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a374:	d02b      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a376:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a37a:	d820      	bhi.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a37c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a380:	d012      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a382:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a386:	d81a      	bhi.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d022      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a390:	d115      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a396:	3308      	adds	r3, #8
 800a398:	2101      	movs	r1, #1
 800a39a:	4618      	mov	r0, r3
 800a39c:	f002 f816 	bl	800c3cc <RCCEx_PLL2_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3a6:	e015      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ac:	3328      	adds	r3, #40	@ 0x28
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f002 f8bd 	bl	800c530 <RCCEx_PLL3_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3bc:	e00a      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3c4:	e006      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3c6:	bf00      	nop
 800a3c8:	e004      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3ca:	bf00      	nop
 800a3cc:	e002      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3ce:	bf00      	nop
 800a3d0:	e000      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3dc:	4b38      	ldr	r3, [pc, #224]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ea:	4a35      	ldr	r2, [pc, #212]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3f0:	e003      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a40a:	2300      	movs	r3, #0
 800a40c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a410:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a414:	460b      	mov	r3, r1
 800a416:	4313      	orrs	r3, r2
 800a418:	d058      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a41e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a426:	d033      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a42c:	d82c      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a432:	d02f      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a438:	d826      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a43a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a43e:	d02b      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a440:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a444:	d820      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a44a:	d012      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a44c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a450:	d81a      	bhi.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d022      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a45a:	d115      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a460:	3308      	adds	r3, #8
 800a462:	2101      	movs	r1, #1
 800a464:	4618      	mov	r0, r3
 800a466:	f001 ffb1 	bl	800c3cc <RCCEx_PLL2_Config>
 800a46a:	4603      	mov	r3, r0
 800a46c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a470:	e015      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a476:	3328      	adds	r3, #40	@ 0x28
 800a478:	2101      	movs	r1, #1
 800a47a:	4618      	mov	r0, r3
 800a47c:	f002 f858 	bl	800c530 <RCCEx_PLL3_Config>
 800a480:	4603      	mov	r3, r0
 800a482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a486:	e00a      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a48e:	e006      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a490:	bf00      	nop
 800a492:	e004      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a494:	bf00      	nop
 800a496:	e002      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a498:	bf00      	nop
 800a49a:	e000      	b.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a49c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10e      	bne.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4a6:	4b06      	ldr	r3, [pc, #24]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a4b6:	4a02      	ldr	r2, [pc, #8]	@ (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4b8:	430b      	orrs	r3, r1
 800a4ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4bc:	e006      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a4be:	bf00      	nop
 800a4c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a4d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	d037      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d00e      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a4f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4fc:	d816      	bhi.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d018      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a506:	d111      	bne.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a508:	4bc4      	ldr	r3, [pc, #784]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50c:	4ac3      	ldr	r2, [pc, #780]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a50e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a514:	e00f      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a51a:	3308      	adds	r3, #8
 800a51c:	2101      	movs	r1, #1
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 ff54 	bl	800c3cc <RCCEx_PLL2_Config>
 800a524:	4603      	mov	r3, r0
 800a526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a52a:	e004      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a532:	e000      	b.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a534:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a53e:	4bb7      	ldr	r3, [pc, #732]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a542:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a54c:	4ab3      	ldr	r2, [pc, #716]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a54e:	430b      	orrs	r3, r1
 800a550:	6513      	str	r3, [r2, #80]	@ 0x50
 800a552:	e003      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a558:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a56c:	2300      	movs	r3, #0
 800a56e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a572:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a576:	460b      	mov	r3, r1
 800a578:	4313      	orrs	r3, r2
 800a57a:	d039      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a582:	2b03      	cmp	r3, #3
 800a584:	d81c      	bhi.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a586:	a201      	add	r2, pc, #4	@ (adr r2, 800a58c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58c:	0800a5c9 	.word	0x0800a5c9
 800a590:	0800a59d 	.word	0x0800a59d
 800a594:	0800a5ab 	.word	0x0800a5ab
 800a598:	0800a5c9 	.word	0x0800a5c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a59c:	4b9f      	ldr	r3, [pc, #636]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	4a9e      	ldr	r2, [pc, #632]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5a8:	e00f      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f001 ff0a 	bl	800c3cc <RCCEx_PLL2_Config>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5be:	e004      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5c6:	e000      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a5c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5d2:	4b92      	ldr	r3, [pc, #584]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d6:	f023 0103 	bic.w	r1, r3, #3
 800a5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5e0:	4a8e      	ldr	r2, [pc, #568]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5e2:	430b      	orrs	r3, r1
 800a5e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5e6:	e003      	b.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a5fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a600:	2300      	movs	r3, #0
 800a602:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a606:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4313      	orrs	r3, r2
 800a60e:	f000 8099 	beq.w	800a744 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a612:	4b83      	ldr	r3, [pc, #524]	@ (800a820 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a82      	ldr	r2, [pc, #520]	@ (800a820 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a61c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a61e:	f7f8 faf9 	bl	8002c14 <HAL_GetTick>
 800a622:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a626:	e00b      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a628:	f7f8 faf4 	bl	8002c14 <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	2b64      	cmp	r3, #100	@ 0x64
 800a636:	d903      	bls.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a63e:	e005      	b.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a640:	4b77      	ldr	r3, [pc, #476]	@ (800a820 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d0ed      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a64c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a650:	2b00      	cmp	r3, #0
 800a652:	d173      	bne.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a654:	4b71      	ldr	r3, [pc, #452]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a656:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a65c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a660:	4053      	eors	r3, r2
 800a662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a666:	2b00      	cmp	r3, #0
 800a668:	d015      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a66a:	4b6c      	ldr	r3, [pc, #432]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a672:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a676:	4b69      	ldr	r3, [pc, #420]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a67a:	4a68      	ldr	r2, [pc, #416]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a67c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a680:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a682:	4b66      	ldr	r3, [pc, #408]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a686:	4a65      	ldr	r2, [pc, #404]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a68c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a68e:	4a63      	ldr	r2, [pc, #396]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a694:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a69a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6a2:	d118      	bne.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a4:	f7f8 fab6 	bl	8002c14 <HAL_GetTick>
 800a6a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ac:	e00d      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ae:	f7f8 fab1 	bl	8002c14 <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a6b8:	1ad2      	subs	r2, r2, r3
 800a6ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d903      	bls.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a6c8:	e005      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ca:	4b54      	ldr	r3, [pc, #336]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0eb      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a6d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d129      	bne.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6ee:	d10e      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a6f0:	4b4a      	ldr	r3, [pc, #296]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a700:	091a      	lsrs	r2, r3, #4
 800a702:	4b48      	ldr	r3, [pc, #288]	@ (800a824 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a704:	4013      	ands	r3, r2
 800a706:	4a45      	ldr	r2, [pc, #276]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a708:	430b      	orrs	r3, r1
 800a70a:	6113      	str	r3, [r2, #16]
 800a70c:	e005      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a70e:	4b43      	ldr	r3, [pc, #268]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	4a42      	ldr	r2, [pc, #264]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a714:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a718:	6113      	str	r3, [r2, #16]
 800a71a:	4b40      	ldr	r3, [pc, #256]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a71c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a72a:	4a3c      	ldr	r2, [pc, #240]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a72c:	430b      	orrs	r3, r1
 800a72e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a730:	e008      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a736:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a73a:	e003      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	f002 0301 	and.w	r3, r2, #1
 800a750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a754:	2300      	movs	r3, #0
 800a756:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a75a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a75e:	460b      	mov	r3, r1
 800a760:	4313      	orrs	r3, r2
 800a762:	f000 808f 	beq.w	800a884 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a76a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a76c:	2b28      	cmp	r3, #40	@ 0x28
 800a76e:	d871      	bhi.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a770:	a201      	add	r2, pc, #4	@ (adr r2, 800a778 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a85d 	.word	0x0800a85d
 800a77c:	0800a855 	.word	0x0800a855
 800a780:	0800a855 	.word	0x0800a855
 800a784:	0800a855 	.word	0x0800a855
 800a788:	0800a855 	.word	0x0800a855
 800a78c:	0800a855 	.word	0x0800a855
 800a790:	0800a855 	.word	0x0800a855
 800a794:	0800a855 	.word	0x0800a855
 800a798:	0800a829 	.word	0x0800a829
 800a79c:	0800a855 	.word	0x0800a855
 800a7a0:	0800a855 	.word	0x0800a855
 800a7a4:	0800a855 	.word	0x0800a855
 800a7a8:	0800a855 	.word	0x0800a855
 800a7ac:	0800a855 	.word	0x0800a855
 800a7b0:	0800a855 	.word	0x0800a855
 800a7b4:	0800a855 	.word	0x0800a855
 800a7b8:	0800a83f 	.word	0x0800a83f
 800a7bc:	0800a855 	.word	0x0800a855
 800a7c0:	0800a855 	.word	0x0800a855
 800a7c4:	0800a855 	.word	0x0800a855
 800a7c8:	0800a855 	.word	0x0800a855
 800a7cc:	0800a855 	.word	0x0800a855
 800a7d0:	0800a855 	.word	0x0800a855
 800a7d4:	0800a855 	.word	0x0800a855
 800a7d8:	0800a85d 	.word	0x0800a85d
 800a7dc:	0800a855 	.word	0x0800a855
 800a7e0:	0800a855 	.word	0x0800a855
 800a7e4:	0800a855 	.word	0x0800a855
 800a7e8:	0800a855 	.word	0x0800a855
 800a7ec:	0800a855 	.word	0x0800a855
 800a7f0:	0800a855 	.word	0x0800a855
 800a7f4:	0800a855 	.word	0x0800a855
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800a855 	.word	0x0800a855
 800a800:	0800a855 	.word	0x0800a855
 800a804:	0800a855 	.word	0x0800a855
 800a808:	0800a855 	.word	0x0800a855
 800a80c:	0800a855 	.word	0x0800a855
 800a810:	0800a855 	.word	0x0800a855
 800a814:	0800a855 	.word	0x0800a855
 800a818:	0800a85d 	.word	0x0800a85d
 800a81c:	58024400 	.word	0x58024400
 800a820:	58024800 	.word	0x58024800
 800a824:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a82c:	3308      	adds	r3, #8
 800a82e:	2101      	movs	r1, #1
 800a830:	4618      	mov	r0, r3
 800a832:	f001 fdcb 	bl	800c3cc <RCCEx_PLL2_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a83c:	e00f      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a842:	3328      	adds	r3, #40	@ 0x28
 800a844:	2101      	movs	r1, #1
 800a846:	4618      	mov	r0, r3
 800a848:	f001 fe72 	bl	800c530 <RCCEx_PLL3_Config>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a852:	e004      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a85a:	e000      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a85e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10a      	bne.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a866:	4bbf      	ldr	r3, [pc, #764]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a872:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a874:	4abb      	ldr	r2, [pc, #748]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a876:	430b      	orrs	r3, r1
 800a878:	6553      	str	r3, [r2, #84]	@ 0x54
 800a87a:	e003      	b.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f002 0302 	and.w	r3, r2, #2
 800a890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a894:	2300      	movs	r3, #0
 800a896:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a89a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	d041      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d824      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b4:	0800a901 	.word	0x0800a901
 800a8b8:	0800a8cd 	.word	0x0800a8cd
 800a8bc:	0800a8e3 	.word	0x0800a8e3
 800a8c0:	0800a901 	.word	0x0800a901
 800a8c4:	0800a901 	.word	0x0800a901
 800a8c8:	0800a901 	.word	0x0800a901
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 fd79 	bl	800c3cc <RCCEx_PLL2_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8e0:	e00f      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	3328      	adds	r3, #40	@ 0x28
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 fe20 	bl	800c530 <RCCEx_PLL3_Config>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8f6:	e004      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8fe:	e000      	b.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a900:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a90a:	4b96      	ldr	r3, [pc, #600]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a90c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a90e:	f023 0107 	bic.w	r1, r3, #7
 800a912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a918:	4a92      	ldr	r2, [pc, #584]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a91a:	430b      	orrs	r3, r1
 800a91c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a91e:	e003      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f002 0304 	and.w	r3, r2, #4
 800a934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a938:	2300      	movs	r3, #0
 800a93a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a93e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a942:	460b      	mov	r3, r1
 800a944:	4313      	orrs	r3, r2
 800a946:	d044      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a950:	2b05      	cmp	r3, #5
 800a952:	d825      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a954:	a201      	add	r2, pc, #4	@ (adr r2, 800a95c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95a:	bf00      	nop
 800a95c:	0800a9a9 	.word	0x0800a9a9
 800a960:	0800a975 	.word	0x0800a975
 800a964:	0800a98b 	.word	0x0800a98b
 800a968:	0800a9a9 	.word	0x0800a9a9
 800a96c:	0800a9a9 	.word	0x0800a9a9
 800a970:	0800a9a9 	.word	0x0800a9a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a978:	3308      	adds	r3, #8
 800a97a:	2101      	movs	r1, #1
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 fd25 	bl	800c3cc <RCCEx_PLL2_Config>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a988:	e00f      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a98e:	3328      	adds	r3, #40	@ 0x28
 800a990:	2101      	movs	r1, #1
 800a992:	4618      	mov	r0, r3
 800a994:	f001 fdcc 	bl	800c530 <RCCEx_PLL3_Config>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a99e:	e004      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9a6:	e000      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10b      	bne.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9b2:	4b6c      	ldr	r3, [pc, #432]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b6:	f023 0107 	bic.w	r1, r3, #7
 800a9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9c2:	4a68      	ldr	r2, [pc, #416]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9c4:	430b      	orrs	r3, r1
 800a9c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9c8:	e003      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f002 0320 	and.w	r3, r2, #32
 800a9de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	d055      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9fe:	d033      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800aa00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa04:	d82c      	bhi.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0a:	d02f      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800aa0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa10:	d826      	bhi.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa16:	d02b      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800aa18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa1c:	d820      	bhi.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa22:	d012      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800aa24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa28:	d81a      	bhi.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d022      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800aa2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa32:	d115      	bne.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa38:	3308      	adds	r3, #8
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 fcc5 	bl	800c3cc <RCCEx_PLL2_Config>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa48:	e015      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa4e:	3328      	adds	r3, #40	@ 0x28
 800aa50:	2102      	movs	r1, #2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f001 fd6c 	bl	800c530 <RCCEx_PLL3_Config>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa5e:	e00a      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa66:	e006      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa68:	bf00      	nop
 800aa6a:	e004      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa6c:	bf00      	nop
 800aa6e:	e002      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa70:	bf00      	nop
 800aa72:	e000      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10b      	bne.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa7e:	4b39      	ldr	r3, [pc, #228]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa8e:	4a35      	ldr	r2, [pc, #212]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa94:	e003      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aaaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aaae:	2300      	movs	r3, #0
 800aab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aab4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aab8:	460b      	mov	r3, r1
 800aaba:	4313      	orrs	r3, r2
 800aabc:	d058      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aac6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aaca:	d033      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800aacc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aad0:	d82c      	bhi.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aad6:	d02f      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aadc:	d826      	bhi.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aae2:	d02b      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aae4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aae8:	d820      	bhi.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aaea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaee:	d012      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800aaf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaf4:	d81a      	bhi.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d022      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aafa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aafe:	d115      	bne.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab04:	3308      	adds	r3, #8
 800ab06:	2100      	movs	r1, #0
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f001 fc5f 	bl	800c3cc <RCCEx_PLL2_Config>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab14:	e015      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1a:	3328      	adds	r3, #40	@ 0x28
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f001 fd06 	bl	800c530 <RCCEx_PLL3_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab2a:	e00a      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab32:	e006      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab34:	bf00      	nop
 800ab36:	e004      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab38:	bf00      	nop
 800ab3a:	e002      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab3c:	bf00      	nop
 800ab3e:	e000      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10e      	bne.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab4a:	4b06      	ldr	r3, [pc, #24]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ab52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab5a:	4a02      	ldr	r2, [pc, #8]	@ (800ab64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab60:	e006      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ab62:	bf00      	nop
 800ab64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ab7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab80:	2300      	movs	r3, #0
 800ab82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	d055      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab9c:	d033      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ab9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aba2:	d82c      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aba8:	d02f      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800abaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abae:	d826      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800abb4:	d02b      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800abb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800abba:	d820      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abc0:	d012      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800abc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abc6:	d81a      	bhi.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d022      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800abcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abd0:	d115      	bne.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd6:	3308      	adds	r3, #8
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f001 fbf6 	bl	800c3cc <RCCEx_PLL2_Config>
 800abe0:	4603      	mov	r3, r0
 800abe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abe6:	e015      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abec:	3328      	adds	r3, #40	@ 0x28
 800abee:	2102      	movs	r1, #2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 fc9d 	bl	800c530 <RCCEx_PLL3_Config>
 800abf6:	4603      	mov	r3, r0
 800abf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abfc:	e00a      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac04:	e006      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac06:	bf00      	nop
 800ac08:	e004      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac0a:	bf00      	nop
 800ac0c:	e002      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac0e:	bf00      	nop
 800ac10:	e000      	b.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10b      	bne.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac1c:	4ba0      	ldr	r3, [pc, #640]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ac24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac2c:	4a9c      	ldr	r2, [pc, #624]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac32:	e003      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ac3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f002 0308 	and.w	r3, r2, #8
 800ac48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac52:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ac56:	460b      	mov	r3, r1
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	d01e      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ac5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac68:	d10c      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac6e:	3328      	adds	r3, #40	@ 0x28
 800ac70:	2102      	movs	r1, #2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f001 fc5c 	bl	800c530 <RCCEx_PLL3_Config>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ac84:	4b86      	ldr	r3, [pc, #536]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac94:	4a82      	ldr	r2, [pc, #520]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac96:	430b      	orrs	r3, r1
 800ac98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f002 0310 	and.w	r3, r2, #16
 800aca6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800acaa:	2300      	movs	r3, #0
 800acac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800acb4:	460b      	mov	r3, r1
 800acb6:	4313      	orrs	r3, r2
 800acb8:	d01e      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acc6:	d10c      	bne.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800accc:	3328      	adds	r3, #40	@ 0x28
 800acce:	2102      	movs	r1, #2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f001 fc2d 	bl	800c530 <RCCEx_PLL3_Config>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ace2:	4b6f      	ldr	r3, [pc, #444]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ace4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ace6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800acea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acf2:	4a6b      	ldr	r2, [pc, #428]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acf4:	430b      	orrs	r3, r1
 800acf6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800acf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ad04:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad06:	2300      	movs	r3, #0
 800ad08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4313      	orrs	r3, r2
 800ad12:	d03e      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad20:	d022      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ad22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad26:	d81b      	bhi.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ad2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad30:	d00b      	beq.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ad32:	e015      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad38:	3308      	adds	r3, #8
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f001 fb45 	bl	800c3cc <RCCEx_PLL2_Config>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad48:	e00f      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4e:	3328      	adds	r3, #40	@ 0x28
 800ad50:	2102      	movs	r1, #2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f001 fbec 	bl	800c530 <RCCEx_PLL3_Config>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad5e:	e004      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad66:	e000      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ad68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d10b      	bne.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad72:	4b4b      	ldr	r3, [pc, #300]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad76:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad82:	4a47      	ldr	r2, [pc, #284]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad84:	430b      	orrs	r3, r1
 800ad86:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad88:	e003      	b.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ad9e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ada0:	2300      	movs	r3, #0
 800ada2:	677b      	str	r3, [r7, #116]	@ 0x74
 800ada4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ada8:	460b      	mov	r3, r1
 800adaa:	4313      	orrs	r3, r2
 800adac:	d03b      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adba:	d01f      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800adbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adc0:	d818      	bhi.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800adc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adc6:	d003      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800adc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800adcc:	d007      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800adce:	e011      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800add0:	4b33      	ldr	r3, [pc, #204]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800add2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add4:	4a32      	ldr	r2, [pc, #200]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800add6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800addc:	e00f      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade2:	3328      	adds	r3, #40	@ 0x28
 800ade4:	2101      	movs	r1, #1
 800ade6:	4618      	mov	r0, r3
 800ade8:	f001 fba2 	bl	800c530 <RCCEx_PLL3_Config>
 800adec:	4603      	mov	r3, r0
 800adee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800adf2:	e004      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adfa:	e000      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800adfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae06:	4b26      	ldr	r3, [pc, #152]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae16:	4a22      	ldr	r2, [pc, #136]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae1c:	e003      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ae32:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae34:	2300      	movs	r3, #0
 800ae36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	d034      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ae4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae50:	d007      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ae52:	e011      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae54:	4b12      	ldr	r3, [pc, #72]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae58:	4a11      	ldr	r2, [pc, #68]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae60:	e00e      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae66:	3308      	adds	r3, #8
 800ae68:	2102      	movs	r1, #2
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f001 faae 	bl	800c3cc <RCCEx_PLL2_Config>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae76:	e003      	b.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10d      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae88:	4b05      	ldr	r3, [pc, #20]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae96:	4a02      	ldr	r2, [pc, #8]	@ (800aea0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae9c:	e006      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ae9e:	bf00      	nop
 800aea0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800aeb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800aeba:	2300      	movs	r3, #0
 800aebc:	667b      	str	r3, [r7, #100]	@ 0x64
 800aebe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800aec2:	460b      	mov	r3, r1
 800aec4:	4313      	orrs	r3, r2
 800aec6:	d00c      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aecc:	3328      	adds	r3, #40	@ 0x28
 800aece:	2102      	movs	r1, #2
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 fb2d 	bl	800c530 <RCCEx_PLL3_Config>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aeee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aef0:	2300      	movs	r3, #0
 800aef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aef4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aef8:	460b      	mov	r3, r1
 800aefa:	4313      	orrs	r3, r2
 800aefc:	d036      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af08:	d018      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800af0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800af0e:	d811      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800af10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af14:	d014      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800af16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af1a:	d80b      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d011      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800af20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af24:	d106      	bne.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af26:	4bb7      	ldr	r3, [pc, #732]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2a:	4ab6      	ldr	r2, [pc, #728]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af32:	e008      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af3a:	e004      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af3c:	bf00      	nop
 800af3e:	e002      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af40:	bf00      	nop
 800af42:	e000      	b.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af4e:	4bad      	ldr	r3, [pc, #692]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af5c:	4aa9      	ldr	r2, [pc, #676]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af5e:	430b      	orrs	r3, r1
 800af60:	6553      	str	r3, [r2, #84]	@ 0x54
 800af62:	e003      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800af78:	653b      	str	r3, [r7, #80]	@ 0x50
 800af7a:	2300      	movs	r3, #0
 800af7c:	657b      	str	r3, [r7, #84]	@ 0x54
 800af7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800af82:	460b      	mov	r3, r1
 800af84:	4313      	orrs	r3, r2
 800af86:	d009      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af88:	4b9e      	ldr	r3, [pc, #632]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af96:	4a9b      	ldr	r2, [pc, #620]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af98:	430b      	orrs	r3, r1
 800af9a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800afa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afaa:	2300      	movs	r3, #0
 800afac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800afb2:	460b      	mov	r3, r1
 800afb4:	4313      	orrs	r3, r2
 800afb6:	d009      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800afb8:	4b92      	ldr	r3, [pc, #584]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afbc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afc6:	4a8f      	ldr	r2, [pc, #572]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afc8:	430b      	orrs	r3, r1
 800afca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800afcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800afd8:	643b      	str	r3, [r7, #64]	@ 0x40
 800afda:	2300      	movs	r3, #0
 800afdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800afde:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800afe2:	460b      	mov	r3, r1
 800afe4:	4313      	orrs	r3, r2
 800afe6:	d00e      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800afe8:	4b86      	ldr	r3, [pc, #536]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	4a85      	ldr	r2, [pc, #532]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aff2:	6113      	str	r3, [r2, #16]
 800aff4:	4b83      	ldr	r3, [pc, #524]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aff6:	6919      	ldr	r1, [r3, #16]
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800affc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b000:	4a80      	ldr	r2, [pc, #512]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b002:	430b      	orrs	r3, r1
 800b004:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b012:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b018:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b01c:	460b      	mov	r3, r1
 800b01e:	4313      	orrs	r3, r2
 800b020:	d009      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b022:	4b78      	ldr	r3, [pc, #480]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b026:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b02e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b030:	4a74      	ldr	r2, [pc, #464]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b032:	430b      	orrs	r3, r1
 800b034:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b042:	633b      	str	r3, [r7, #48]	@ 0x30
 800b044:	2300      	movs	r3, #0
 800b046:	637b      	str	r3, [r7, #52]	@ 0x34
 800b048:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b04c:	460b      	mov	r3, r1
 800b04e:	4313      	orrs	r3, r2
 800b050:	d00a      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b052:	4b6c      	ldr	r3, [pc, #432]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b056:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b062:	4a68      	ldr	r2, [pc, #416]	@ (800b204 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b064:	430b      	orrs	r3, r1
 800b066:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	2100      	movs	r1, #0
 800b072:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b07a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b07e:	460b      	mov	r3, r1
 800b080:	4313      	orrs	r3, r2
 800b082:	d011      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b088:	3308      	adds	r3, #8
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 f99d 	bl	800c3cc <RCCEx_PLL2_Config>
 800b092:	4603      	mov	r3, r0
 800b094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6239      	str	r1, [r7, #32]
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	d011      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 f97d 	bl	800c3cc <RCCEx_PLL2_Config>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	61b9      	str	r1, [r7, #24]
 800b0f4:	f003 0304 	and.w	r3, r3, #4
 800b0f8:	61fb      	str	r3, [r7, #28]
 800b0fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d011      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b108:	3308      	adds	r3, #8
 800b10a:	2102      	movs	r1, #2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 f95d 	bl	800c3cc <RCCEx_PLL2_Config>
 800b112:	4603      	mov	r3, r0
 800b114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	2100      	movs	r1, #0
 800b132:	6139      	str	r1, [r7, #16]
 800b134:	f003 0308 	and.w	r3, r3, #8
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b13e:	460b      	mov	r3, r1
 800b140:	4313      	orrs	r3, r2
 800b142:	d011      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b148:	3328      	adds	r3, #40	@ 0x28
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f9ef 	bl	800c530 <RCCEx_PLL3_Config>
 800b152:	4603      	mov	r3, r0
 800b154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	2100      	movs	r1, #0
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	60fb      	str	r3, [r7, #12]
 800b17a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b17e:	460b      	mov	r3, r1
 800b180:	4313      	orrs	r3, r2
 800b182:	d011      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b188:	3328      	adds	r3, #40	@ 0x28
 800b18a:	2101      	movs	r1, #1
 800b18c:	4618      	mov	r0, r3
 800b18e:	f001 f9cf 	bl	800c530 <RCCEx_PLL3_Config>
 800b192:	4603      	mov	r3, r0
 800b194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	6039      	str	r1, [r7, #0]
 800b1b4:	f003 0320 	and.w	r3, r3, #32
 800b1b8:	607b      	str	r3, [r7, #4]
 800b1ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	d011      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c8:	3328      	adds	r3, #40	@ 0x28
 800b1ca:	2102      	movs	r1, #2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f001 f9af 	bl	800c530 <RCCEx_PLL3_Config>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b1d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d003      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b1e8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e000      	b.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b202:	bf00      	nop
 800b204:	58024400 	.word	0x58024400

0800b208 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b090      	sub	sp, #64	@ 0x40
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b212:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b216:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b21a:	430b      	orrs	r3, r1
 800b21c:	f040 8094 	bne.w	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b220:	4b9b      	ldr	r3, [pc, #620]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b224:	f003 0307 	and.w	r3, r3, #7
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	f200 8087 	bhi.w	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b232:	a201      	add	r2, pc, #4	@ (adr r2, 800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b238:	0800b24d 	.word	0x0800b24d
 800b23c:	0800b275 	.word	0x0800b275
 800b240:	0800b29d 	.word	0x0800b29d
 800b244:	0800b339 	.word	0x0800b339
 800b248:	0800b2c5 	.word	0x0800b2c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b24c:	4b90      	ldr	r3, [pc, #576]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b258:	d108      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b25a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 ff62 	bl	800c128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b268:	f000 bc93 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b270:	f000 bc8f 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b274:	4b86      	ldr	r3, [pc, #536]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b27c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b280:	d108      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b282:	f107 0318 	add.w	r3, r7, #24
 800b286:	4618      	mov	r0, r3
 800b288:	f000 fca6 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b290:	f000 bc7f 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b298:	f000 bc7b 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b29c:	4b7c      	ldr	r3, [pc, #496]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2a8:	d108      	bne.n	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2aa:	f107 030c 	add.w	r3, r7, #12
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 fde6 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2b8:	f000 bc6b 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c0:	f000 bc67 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2c4:	4b72      	ldr	r3, [pc, #456]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ce:	4b70      	ldr	r3, [pc, #448]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d10c      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d109      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2e0:	4b6b      	ldr	r3, [pc, #428]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	08db      	lsrs	r3, r3, #3
 800b2e6:	f003 0303 	and.w	r3, r3, #3
 800b2ea:	4a6a      	ldr	r2, [pc, #424]	@ (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b2ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2f2:	e01f      	b.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2f4:	4b66      	ldr	r3, [pc, #408]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b300:	d106      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b308:	d102      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b30a:	4b63      	ldr	r3, [pc, #396]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b30e:	e011      	b.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b310:	4b5f      	ldr	r3, [pc, #380]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b31c:	d106      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b324:	d102      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b326:	4b5d      	ldr	r3, [pc, #372]	@ (800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b32a:	e003      	b.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b32c:	2300      	movs	r3, #0
 800b32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b330:	f000 bc2f 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b334:	f000 bc2d 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b338:	4b59      	ldr	r3, [pc, #356]	@ (800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33c:	f000 bc29 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b344:	f000 bc25 	b.w	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b34c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b350:	430b      	orrs	r3, r1
 800b352:	f040 80a7 	bne.w	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b356:	4b4e      	ldr	r3, [pc, #312]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b35a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b35e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b366:	d054      	beq.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b36e:	f200 808b 	bhi.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b378:	f000 8083 	beq.w	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b382:	f200 8081 	bhi.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b38c:	d02f      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b394:	d878      	bhi.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3a2:	d012      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b3a4:	e070      	b.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3a6:	4b3a      	ldr	r3, [pc, #232]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3b2:	d107      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 feb5 	bl	800c128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c2:	e3e6      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c8:	e3e3      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3ca:	4b31      	ldr	r3, [pc, #196]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3d6:	d107      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3d8:	f107 0318 	add.w	r3, r7, #24
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 fbfb 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e6:	e3d4      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ec:	e3d1      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3ee:	4b28      	ldr	r3, [pc, #160]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3fa:	d107      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3fc:	f107 030c 	add.w	r3, r7, #12
 800b400:	4618      	mov	r0, r3
 800b402:	f000 fd3d 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b40a:	e3c2      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b410:	e3bf      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b412:	4b1f      	ldr	r3, [pc, #124]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b416:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b41a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b41c:	4b1c      	ldr	r3, [pc, #112]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	2b04      	cmp	r3, #4
 800b426:	d10c      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d109      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b42e:	4b18      	ldr	r3, [pc, #96]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	08db      	lsrs	r3, r3, #3
 800b434:	f003 0303 	and.w	r3, r3, #3
 800b438:	4a16      	ldr	r2, [pc, #88]	@ (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b43a:	fa22 f303 	lsr.w	r3, r2, r3
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b440:	e01e      	b.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b442:	4b13      	ldr	r3, [pc, #76]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b44a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b44e:	d106      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b452:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b456:	d102      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b458:	4b0f      	ldr	r3, [pc, #60]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45c:	e010      	b.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b45e:	4b0c      	ldr	r3, [pc, #48]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b466:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b46a:	d106      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b472:	d102      	bne.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b474:	4b09      	ldr	r3, [pc, #36]	@ (800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b478:	e002      	b.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b47e:	e388      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b480:	e387      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b482:	4b07      	ldr	r3, [pc, #28]	@ (800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b486:	e384      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b48c:	e381      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b48e:	bf00      	nop
 800b490:	58024400 	.word	0x58024400
 800b494:	03d09000 	.word	0x03d09000
 800b498:	003d0900 	.word	0x003d0900
 800b49c:	016e3600 	.word	0x016e3600
 800b4a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	f040 809c 	bne.w	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b4b2:	4b9e      	ldr	r3, [pc, #632]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b4ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4c2:	d054      	beq.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4ca:	f200 808b 	bhi.w	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b4d4:	f000 8083 	beq.w	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b4de:	f200 8081 	bhi.w	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4e8:	d02f      	beq.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4f0:	d878      	bhi.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d004      	beq.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4fe:	d012      	beq.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b500:	e070      	b.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b502:	4b8a      	ldr	r3, [pc, #552]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b50a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b50e:	d107      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b514:	4618      	mov	r0, r3
 800b516:	f000 fe07 	bl	800c128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b51e:	e338      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b524:	e335      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b526:	4b81      	ldr	r3, [pc, #516]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b52e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b532:	d107      	bne.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b534:	f107 0318 	add.w	r3, r7, #24
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 fb4d 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b542:	e326      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b548:	e323      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b54a:	4b78      	ldr	r3, [pc, #480]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b556:	d107      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fc8f 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b566:	e314      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b56c:	e311      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b56e:	4b6f      	ldr	r3, [pc, #444]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b572:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b576:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b578:	4b6c      	ldr	r3, [pc, #432]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	2b04      	cmp	r3, #4
 800b582:	d10c      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b58a:	4b68      	ldr	r3, [pc, #416]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	08db      	lsrs	r3, r3, #3
 800b590:	f003 0303 	and.w	r3, r3, #3
 800b594:	4a66      	ldr	r2, [pc, #408]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b596:	fa22 f303 	lsr.w	r3, r2, r3
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b59c:	e01e      	b.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b59e:	4b63      	ldr	r3, [pc, #396]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5aa:	d106      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5b2:	d102      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5b4:	4b5f      	ldr	r3, [pc, #380]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5b8:	e010      	b.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5ba:	4b5c      	ldr	r3, [pc, #368]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5c6:	d106      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ce:	d102      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5d0:	4b59      	ldr	r3, [pc, #356]	@ (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5d4:	e002      	b.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b5da:	e2da      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5dc:	e2d9      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5de:	4b57      	ldr	r3, [pc, #348]	@ (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e2:	e2d6      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e8:	e2d3      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b5ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b5f2:	430b      	orrs	r3, r1
 800b5f4:	f040 80a7 	bne.w	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b5f8:	4b4c      	ldr	r3, [pc, #304]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b600:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b608:	d055      	beq.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b610:	f200 8096 	bhi.w	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b616:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b61a:	f000 8084 	beq.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b624:	f200 808c 	bhi.w	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b62e:	d030      	beq.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b636:	f200 8083 	bhi.w	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b646:	d012      	beq.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b648:	e07a      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b64a:	4b38      	ldr	r3, [pc, #224]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b656:	d107      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b658:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fd63 	bl	800c128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b666:	e294      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b66c:	e291      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b66e:	4b2f      	ldr	r3, [pc, #188]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b67a:	d107      	bne.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b67c:	f107 0318 	add.w	r3, r7, #24
 800b680:	4618      	mov	r0, r3
 800b682:	f000 faa9 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b68a:	e282      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b68c:	2300      	movs	r3, #0
 800b68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b690:	e27f      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b692:	4b26      	ldr	r3, [pc, #152]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b69a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b69e:	d107      	bne.n	800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6a0:	f107 030c 	add.w	r3, r7, #12
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fbeb 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ae:	e270      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b4:	e26d      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b6be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d10c      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6d2:	4b16      	ldr	r3, [pc, #88]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	08db      	lsrs	r3, r3, #3
 800b6d8:	f003 0303 	and.w	r3, r3, #3
 800b6dc:	4a14      	ldr	r2, [pc, #80]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b6de:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6e4:	e01e      	b.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6e6:	4b11      	ldr	r3, [pc, #68]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6f2:	d106      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6fa:	d102      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b700:	e010      	b.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b702:	4b0a      	ldr	r3, [pc, #40]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b70a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b70e:	d106      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b712:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b716:	d102      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b718:	4b07      	ldr	r3, [pc, #28]	@ (800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b71c:	e002      	b.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b722:	e236      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b724:	e235      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b726:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b72a:	e232      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b72c:	58024400 	.word	0x58024400
 800b730:	03d09000 	.word	0x03d09000
 800b734:	003d0900 	.word	0x003d0900
 800b738:	016e3600 	.word	0x016e3600
 800b73c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b744:	e225      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b74e:	430b      	orrs	r3, r1
 800b750:	f040 8085 	bne.w	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b754:	4b9c      	ldr	r3, [pc, #624]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b758:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b75c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b764:	d06b      	beq.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b76c:	d874      	bhi.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b770:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b774:	d056      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b77c:	d86c      	bhi.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b780:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b784:	d03b      	beq.n	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b788:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b78c:	d864      	bhi.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b794:	d021      	beq.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b79c:	d85c      	bhi.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d004      	beq.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7aa:	d004      	beq.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b7ac:	e054      	b.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b7ae:	f7fe fb5f 	bl	8009e70 <HAL_RCC_GetPCLK1Freq>
 800b7b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7b4:	e1ed      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7b6:	4b84      	ldr	r3, [pc, #528]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7c2:	d107      	bne.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7c4:	f107 0318 	add.w	r3, r7, #24
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f000 fa05 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d2:	e1de      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7d8:	e1db      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7da:	4b7b      	ldr	r3, [pc, #492]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7e6:	d107      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7e8:	f107 030c 	add.w	r3, r7, #12
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 fb47 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7f6:	e1cc      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7fc:	e1c9      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7fe:	4b72      	ldr	r3, [pc, #456]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 0304 	and.w	r3, r3, #4
 800b806:	2b04      	cmp	r3, #4
 800b808:	d109      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b80a:	4b6f      	ldr	r3, [pc, #444]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	08db      	lsrs	r3, r3, #3
 800b810:	f003 0303 	and.w	r3, r3, #3
 800b814:	4a6d      	ldr	r2, [pc, #436]	@ (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b816:	fa22 f303 	lsr.w	r3, r2, r3
 800b81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b81c:	e1b9      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b822:	e1b6      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b824:	4b68      	ldr	r3, [pc, #416]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b82c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b830:	d102      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b832:	4b67      	ldr	r3, [pc, #412]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b836:	e1ac      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b83c:	e1a9      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b83e:	4b62      	ldr	r3, [pc, #392]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b84a:	d102      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b84c:	4b61      	ldr	r3, [pc, #388]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b850:	e19f      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b856:	e19c      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b85c:	e199      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b862:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b866:	430b      	orrs	r3, r1
 800b868:	d173      	bne.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b86a:	4b57      	ldr	r3, [pc, #348]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b86c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b86e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b872:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b87a:	d02f      	beq.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b882:	d863      	bhi.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b886:	2b00      	cmp	r3, #0
 800b888:	d004      	beq.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b890:	d012      	beq.n	800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b892:	e05b      	b.n	800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b894:	4b4c      	ldr	r3, [pc, #304]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b89c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8a0:	d107      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8a2:	f107 0318 	add.w	r3, r7, #24
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f000 f996 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8b0:	e16f      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8b6:	e16c      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8b8:	4b43      	ldr	r3, [pc, #268]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8c4:	d107      	bne.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8c6:	f107 030c 	add.w	r3, r7, #12
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fad8 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8d4:	e15d      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8da:	e15a      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8dc:	4b3a      	ldr	r3, [pc, #232]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8e6:	4b38      	ldr	r3, [pc, #224]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b04      	cmp	r3, #4
 800b8f0:	d10c      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d109      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8f8:	4b33      	ldr	r3, [pc, #204]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	08db      	lsrs	r3, r3, #3
 800b8fe:	f003 0303 	and.w	r3, r3, #3
 800b902:	4a32      	ldr	r2, [pc, #200]	@ (800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b904:	fa22 f303 	lsr.w	r3, r2, r3
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b90a:	e01e      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b90c:	4b2e      	ldr	r3, [pc, #184]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b918:	d106      	bne.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b91c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b920:	d102      	bne.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b922:	4b2b      	ldr	r3, [pc, #172]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b926:	e010      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b928:	4b27      	ldr	r3, [pc, #156]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b934:	d106      	bne.n	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b93c:	d102      	bne.n	800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b93e:	4b25      	ldr	r3, [pc, #148]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b942:	e002      	b.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b948:	e123      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b94a:	e122      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b94c:	2300      	movs	r3, #0
 800b94e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b950:	e11f      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b952:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b956:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b95a:	430b      	orrs	r3, r1
 800b95c:	d13c      	bne.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b95e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b966:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b974:	d012      	beq.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b976:	e023      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b978:	4b13      	ldr	r3, [pc, #76]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b980:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b984:	d107      	bne.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fbcc 	bl	800c128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b994:	e0fd      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b99a:	e0fa      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b99c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9a8:	d107      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9aa:	f107 0318 	add.w	r3, r7, #24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f912 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b8:	e0eb      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9be:	e0e8      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c4:	e0e5      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9c6:	bf00      	nop
 800b9c8:	58024400 	.word	0x58024400
 800b9cc:	03d09000 	.word	0x03d09000
 800b9d0:	003d0900 	.word	0x003d0900
 800b9d4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b9d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9dc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	f040 8085 	bne.w	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b9e6:	4b6d      	ldr	r3, [pc, #436]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9ea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b9ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9f6:	d06b      	beq.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9fe:	d874      	bhi.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba06:	d056      	beq.n	800bab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ba08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba0e:	d86c      	bhi.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ba16:	d03b      	beq.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ba18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ba1e:	d864      	bhi.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba26:	d021      	beq.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ba28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba2e:	d85c      	bhi.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ba36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba3c:	d004      	beq.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ba3e:	e054      	b.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba40:	f000 f8b4 	bl	800bbac <HAL_RCCEx_GetD3PCLK1Freq>
 800ba44:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba46:	e0a4      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba48:	4b54      	ldr	r3, [pc, #336]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba54:	d107      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba56:	f107 0318 	add.w	r3, r7, #24
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 f8bc 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba64:	e095      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba6a:	e092      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba6c:	4b4b      	ldr	r3, [pc, #300]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba78:	d107      	bne.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba7a:	f107 030c 	add.w	r3, r7, #12
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 f9fe 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba88:	e083      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba8e:	e080      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba90:	4b42      	ldr	r3, [pc, #264]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b04      	cmp	r3, #4
 800ba9a:	d109      	bne.n	800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba9c:	4b3f      	ldr	r3, [pc, #252]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	08db      	lsrs	r3, r3, #3
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	4a3e      	ldr	r2, [pc, #248]	@ (800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800baa8:	fa22 f303 	lsr.w	r3, r2, r3
 800baac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baae:	e070      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab4:	e06d      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bab6:	4b39      	ldr	r3, [pc, #228]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800babe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bac2:	d102      	bne.n	800baca <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800bac4:	4b37      	ldr	r3, [pc, #220]	@ (800bba4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac8:	e063      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bace:	e060      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bad0:	4b32      	ldr	r3, [pc, #200]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800badc:	d102      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800bade:	4b32      	ldr	r3, [pc, #200]	@ (800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae2:	e056      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae8:	e053      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baee:	e050      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800baf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baf4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800baf8:	430b      	orrs	r3, r1
 800bafa:	d148      	bne.n	800bb8e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bafc:	4b27      	ldr	r3, [pc, #156]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bafe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bb04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb0c:	d02a      	beq.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb14:	d838      	bhi.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb22:	d00d      	beq.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bb24:	e030      	b.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb26:	4b1d      	ldr	r3, [pc, #116]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb32:	d102      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bb34:	4b1c      	ldr	r3, [pc, #112]	@ (800bba8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb38:	e02b      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb3e:	e028      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb40:	4b16      	ldr	r3, [pc, #88]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb4c:	d107      	bne.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 fae8 	bl	800c128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb5c:	e019      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb62:	e016      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb64:	4b0d      	ldr	r3, [pc, #52]	@ (800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb70:	d107      	bne.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb72:	f107 0318 	add.w	r3, r7, #24
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f82e 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb80:	e007      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb86:	e004      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb8c:	e001      	b.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bb92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3740      	adds	r7, #64	@ 0x40
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	58024400 	.word	0x58024400
 800bba0:	03d09000 	.word	0x03d09000
 800bba4:	003d0900 	.word	0x003d0900
 800bba8:	016e3600 	.word	0x016e3600

0800bbac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bbb0:	f7fe f92e 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	4b06      	ldr	r3, [pc, #24]	@ (800bbd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	091b      	lsrs	r3, r3, #4
 800bbbc:	f003 0307 	and.w	r3, r3, #7
 800bbc0:	4904      	ldr	r1, [pc, #16]	@ (800bbd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbc2:	5ccb      	ldrb	r3, [r1, r3]
 800bbc4:	f003 031f 	and.w	r3, r3, #31
 800bbc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	58024400 	.word	0x58024400
 800bbd4:	08012524 	.word	0x08012524

0800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b089      	sub	sp, #36	@ 0x24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbe0:	4ba1      	ldr	r3, [pc, #644]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bbea:	4b9f      	ldr	r3, [pc, #636]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbee:	0b1b      	lsrs	r3, r3, #12
 800bbf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbf4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbf6:	4b9c      	ldr	r3, [pc, #624]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfa:	091b      	lsrs	r3, r3, #4
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bc02:	4b99      	ldr	r3, [pc, #612]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc06:	08db      	lsrs	r3, r3, #3
 800bc08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	fb02 f303 	mul.w	r3, r2, r3
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f000 8111 	beq.w	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	f000 8083 	beq.w	800bd34 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	f200 80a1 	bhi.w	800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d056      	beq.n	800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc42:	e099      	b.n	800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc44:	4b88      	ldr	r3, [pc, #544]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f003 0320 	and.w	r3, r3, #32
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d02d      	beq.n	800bcac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc50:	4b85      	ldr	r3, [pc, #532]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	08db      	lsrs	r3, r3, #3
 800bc56:	f003 0303 	and.w	r3, r3, #3
 800bc5a:	4a84      	ldr	r2, [pc, #528]	@ (800be6c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc5c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc60:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	ee07 3a90 	vmov	s15, r3
 800bc68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc7a:	4b7b      	ldr	r3, [pc, #492]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bca6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcaa:	e087      	b.n	800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	ee07 3a90 	vmov	s15, r3
 800bcb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800be74 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcbe:	4b6a      	ldr	r3, [pc, #424]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcce:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcee:	e065      	b.n	800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	ee07 3a90 	vmov	s15, r3
 800bcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd02:	4b59      	ldr	r3, [pc, #356]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd0a:	ee07 3a90 	vmov	s15, r3
 800bd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd12:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd32:	e043      	b.n	800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	ee07 3a90 	vmov	s15, r3
 800bd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800be7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd46:	4b48      	ldr	r3, [pc, #288]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd56:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd76:	e021      	b.n	800bdbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800be78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd8a:	4b37      	ldr	r3, [pc, #220]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800be70 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bdbc:	4b2a      	ldr	r3, [pc, #168]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc0:	0a5b      	lsrs	r3, r3, #9
 800bdc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bde2:	ee17 2a90 	vmov	r2, s15
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bdea:	4b1f      	ldr	r3, [pc, #124]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdee:	0c1b      	lsrs	r3, r3, #16
 800bdf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be04:	edd7 6a07 	vldr	s13, [r7, #28]
 800be08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be10:	ee17 2a90 	vmov	r2, s15
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800be18:	4b13      	ldr	r3, [pc, #76]	@ (800be68 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	0e1b      	lsrs	r3, r3, #24
 800be1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be32:	edd7 6a07 	vldr	s13, [r7, #28]
 800be36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3e:	ee17 2a90 	vmov	r2, s15
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be46:	e008      	b.n	800be5a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	609a      	str	r2, [r3, #8]
}
 800be5a:	bf00      	nop
 800be5c:	3724      	adds	r7, #36	@ 0x24
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	58024400 	.word	0x58024400
 800be6c:	03d09000 	.word	0x03d09000
 800be70:	46000000 	.word	0x46000000
 800be74:	4c742400 	.word	0x4c742400
 800be78:	4a742400 	.word	0x4a742400
 800be7c:	4bb71b00 	.word	0x4bb71b00

0800be80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be80:	b480      	push	{r7}
 800be82:	b089      	sub	sp, #36	@ 0x24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be88:	4ba1      	ldr	r3, [pc, #644]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8c:	f003 0303 	and.w	r3, r3, #3
 800be90:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be92:	4b9f      	ldr	r3, [pc, #636]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be96:	0d1b      	lsrs	r3, r3, #20
 800be98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be9c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be9e:	4b9c      	ldr	r3, [pc, #624]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800beaa:	4b99      	ldr	r3, [pc, #612]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beae:	08db      	lsrs	r3, r3, #3
 800beb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
 800beba:	ee07 3a90 	vmov	s15, r3
 800bebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f000 8111 	beq.w	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	f000 8083 	beq.w	800bfdc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	2b02      	cmp	r3, #2
 800beda:	f200 80a1 	bhi.w	800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d056      	beq.n	800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800beea:	e099      	b.n	800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beec:	4b88      	ldr	r3, [pc, #544]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0320 	and.w	r3, r3, #32
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d02d      	beq.n	800bf54 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bef8:	4b85      	ldr	r3, [pc, #532]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	08db      	lsrs	r3, r3, #3
 800befe:	f003 0303 	and.w	r3, r3, #3
 800bf02:	4a84      	ldr	r2, [pc, #528]	@ (800c114 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf04:	fa22 f303 	lsr.w	r3, r2, r3
 800bf08:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	ee07 3a90 	vmov	s15, r3
 800bf10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	ee07 3a90 	vmov	s15, r3
 800bf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf22:	4b7b      	ldr	r3, [pc, #492]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf52:	e087      	b.n	800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	ee07 3a90 	vmov	s15, r3
 800bf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c11c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf66:	4b6a      	ldr	r3, [pc, #424]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf76:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf96:	e065      	b.n	800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfaa:	4b59      	ldr	r3, [pc, #356]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfba:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfda:	e043      	b.n	800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	ee07 3a90 	vmov	s15, r3
 800bfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bfea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfee:	4b48      	ldr	r3, [pc, #288]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c002:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c01e:	e021      	b.n	800c064 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	ee07 3a90 	vmov	s15, r3
 800c026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c032:	4b37      	ldr	r3, [pc, #220]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c042:	ed97 6a03 	vldr	s12, [r7, #12]
 800c046:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c118 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c062:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c064:	4b2a      	ldr	r3, [pc, #168]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c068:	0a5b      	lsrs	r3, r3, #9
 800c06a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c07a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c07e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c08a:	ee17 2a90 	vmov	r2, s15
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c092:	4b1f      	ldr	r3, [pc, #124]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c096:	0c1b      	lsrs	r3, r3, #16
 800c098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c09c:	ee07 3a90 	vmov	s15, r3
 800c0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b8:	ee17 2a90 	vmov	r2, s15
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0c0:	4b13      	ldr	r3, [pc, #76]	@ (800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c4:	0e1b      	lsrs	r3, r3, #24
 800c0c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0e6:	ee17 2a90 	vmov	r2, s15
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0ee:	e008      	b.n	800c102 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	609a      	str	r2, [r3, #8]
}
 800c102:	bf00      	nop
 800c104:	3724      	adds	r7, #36	@ 0x24
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	58024400 	.word	0x58024400
 800c114:	03d09000 	.word	0x03d09000
 800c118:	46000000 	.word	0x46000000
 800c11c:	4c742400 	.word	0x4c742400
 800c120:	4a742400 	.word	0x4a742400
 800c124:	4bb71b00 	.word	0x4bb71b00

0800c128 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c128:	b480      	push	{r7}
 800c12a:	b089      	sub	sp, #36	@ 0x24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c130:	4ba0      	ldr	r3, [pc, #640]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c134:	f003 0303 	and.w	r3, r3, #3
 800c138:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c13a:	4b9e      	ldr	r3, [pc, #632]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c13e:	091b      	lsrs	r3, r3, #4
 800c140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c144:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c146:	4b9b      	ldr	r3, [pc, #620]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c14a:	f003 0301 	and.w	r3, r3, #1
 800c14e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c150:	4b98      	ldr	r3, [pc, #608]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c154:	08db      	lsrs	r3, r3, #3
 800c156:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	fb02 f303 	mul.w	r3, r2, r3
 800c160:	ee07 3a90 	vmov	s15, r3
 800c164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c168:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 8111 	beq.w	800c396 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	2b02      	cmp	r3, #2
 800c178:	f000 8083 	beq.w	800c282 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	f200 80a1 	bhi.w	800c2c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d056      	beq.n	800c23e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c190:	e099      	b.n	800c2c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c192:	4b88      	ldr	r3, [pc, #544]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0320 	and.w	r3, r3, #32
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d02d      	beq.n	800c1fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c19e:	4b85      	ldr	r3, [pc, #532]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	08db      	lsrs	r3, r3, #3
 800c1a4:	f003 0303 	and.w	r3, r3, #3
 800c1a8:	4a83      	ldr	r2, [pc, #524]	@ (800c3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	ee07 3a90 	vmov	s15, r3
 800c1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	ee07 3a90 	vmov	s15, r3
 800c1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c8:	4b7a      	ldr	r3, [pc, #488]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d0:	ee07 3a90 	vmov	s15, r3
 800c1d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1f8:	e087      	b.n	800c30a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	ee07 3a90 	vmov	s15, r3
 800c200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c204:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c20c:	4b69      	ldr	r3, [pc, #420]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c20e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c214:	ee07 3a90 	vmov	s15, r3
 800c218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c220:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c22c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c234:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c238:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c23c:	e065      	b.n	800c30a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	ee07 3a90 	vmov	s15, r3
 800c244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c248:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c24c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c250:	4b58      	ldr	r3, [pc, #352]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c258:	ee07 3a90 	vmov	s15, r3
 800c25c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c260:	ed97 6a03 	vldr	s12, [r7, #12]
 800c264:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c270:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c280:	e043      	b.n	800c30a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	ee07 3a90 	vmov	s15, r3
 800c288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c294:	4b47      	ldr	r3, [pc, #284]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29c:	ee07 3a90 	vmov	s15, r3
 800c2a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2c4:	e021      	b.n	800c30a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	ee07 3a90 	vmov	s15, r3
 800c2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d8:	4b36      	ldr	r3, [pc, #216]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e0:	ee07 3a90 	vmov	s15, r3
 800c2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c3bc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c304:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c308:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c30a:	4b2a      	ldr	r3, [pc, #168]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c30c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c30e:	0a5b      	lsrs	r3, r3, #9
 800c310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c314:	ee07 3a90 	vmov	s15, r3
 800c318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c320:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c324:	edd7 6a07 	vldr	s13, [r7, #28]
 800c328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c32c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c330:	ee17 2a90 	vmov	r2, s15
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c338:	4b1e      	ldr	r3, [pc, #120]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c33a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33c:	0c1b      	lsrs	r3, r3, #16
 800c33e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c342:	ee07 3a90 	vmov	s15, r3
 800c346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c34a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c34e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c352:	edd7 6a07 	vldr	s13, [r7, #28]
 800c356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c35a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c35e:	ee17 2a90 	vmov	r2, s15
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c36a:	0e1b      	lsrs	r3, r3, #24
 800c36c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c370:	ee07 3a90 	vmov	s15, r3
 800c374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c378:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c37c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c380:	edd7 6a07 	vldr	s13, [r7, #28]
 800c384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c38c:	ee17 2a90 	vmov	r2, s15
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c394:	e008      	b.n	800c3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	609a      	str	r2, [r3, #8]
}
 800c3a8:	bf00      	nop
 800c3aa:	3724      	adds	r7, #36	@ 0x24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	58024400 	.word	0x58024400
 800c3b8:	03d09000 	.word	0x03d09000
 800c3bc:	46000000 	.word	0x46000000
 800c3c0:	4c742400 	.word	0x4c742400
 800c3c4:	4a742400 	.word	0x4a742400
 800c3c8:	4bb71b00 	.word	0x4bb71b00

0800c3cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3da:	4b53      	ldr	r3, [pc, #332]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3de:	f003 0303 	and.w	r3, r3, #3
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d101      	bne.n	800c3ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e099      	b.n	800c51e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c3ea:	4b4f      	ldr	r3, [pc, #316]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a4e      	ldr	r2, [pc, #312]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c3f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3f6:	f7f6 fc0d 	bl	8002c14 <HAL_GetTick>
 800c3fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3fc:	e008      	b.n	800c410 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3fe:	f7f6 fc09 	bl	8002c14 <HAL_GetTick>
 800c402:	4602      	mov	r2, r0
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d901      	bls.n	800c410 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e086      	b.n	800c51e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c410:	4b45      	ldr	r3, [pc, #276]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1f0      	bne.n	800c3fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c41c:	4b42      	ldr	r3, [pc, #264]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c420:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	031b      	lsls	r3, r3, #12
 800c42a:	493f      	ldr	r1, [pc, #252]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c42c:	4313      	orrs	r3, r2
 800c42e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	3b01      	subs	r3, #1
 800c436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	3b01      	subs	r3, #1
 800c440:	025b      	lsls	r3, r3, #9
 800c442:	b29b      	uxth	r3, r3
 800c444:	431a      	orrs	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	041b      	lsls	r3, r3, #16
 800c44e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	3b01      	subs	r3, #1
 800c45a:	061b      	lsls	r3, r3, #24
 800c45c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c460:	4931      	ldr	r1, [pc, #196]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c462:	4313      	orrs	r3, r2
 800c464:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c466:	4b30      	ldr	r3, [pc, #192]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	492d      	ldr	r1, [pc, #180]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c474:	4313      	orrs	r3, r2
 800c476:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c478:	4b2b      	ldr	r3, [pc, #172]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c47c:	f023 0220 	bic.w	r2, r3, #32
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	4928      	ldr	r1, [pc, #160]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c486:	4313      	orrs	r3, r2
 800c488:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c48a:	4b27      	ldr	r3, [pc, #156]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c48e:	4a26      	ldr	r2, [pc, #152]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c490:	f023 0310 	bic.w	r3, r3, #16
 800c494:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c496:	4b24      	ldr	r3, [pc, #144]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c49a:	4b24      	ldr	r3, [pc, #144]	@ (800c52c <RCCEx_PLL2_Config+0x160>)
 800c49c:	4013      	ands	r3, r2
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	69d2      	ldr	r2, [r2, #28]
 800c4a2:	00d2      	lsls	r2, r2, #3
 800c4a4:	4920      	ldr	r1, [pc, #128]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c4aa:	4b1f      	ldr	r3, [pc, #124]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4b0:	f043 0310 	orr.w	r3, r3, #16
 800c4b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d106      	bne.n	800c4ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c0:	4a19      	ldr	r2, [pc, #100]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4c8:	e00f      	b.n	800c4ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d106      	bne.n	800c4de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c4d0:	4b15      	ldr	r3, [pc, #84]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d4:	4a14      	ldr	r2, [pc, #80]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4dc:	e005      	b.n	800c4ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c4de:	4b12      	ldr	r3, [pc, #72]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e2:	4a11      	ldr	r2, [pc, #68]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c4e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a0e      	ldr	r2, [pc, #56]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c4f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4f6:	f7f6 fb8d 	bl	8002c14 <HAL_GetTick>
 800c4fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4fc:	e008      	b.n	800c510 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4fe:	f7f6 fb89 	bl	8002c14 <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d901      	bls.n	800c510 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e006      	b.n	800c51e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c510:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <RCCEx_PLL2_Config+0x15c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0f0      	beq.n	800c4fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	58024400 	.word	0x58024400
 800c52c:	ffff0007 	.word	0xffff0007

0800c530 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c53e:	4b53      	ldr	r3, [pc, #332]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c542:	f003 0303 	and.w	r3, r3, #3
 800c546:	2b03      	cmp	r3, #3
 800c548:	d101      	bne.n	800c54e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e099      	b.n	800c682 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c54e:	4b4f      	ldr	r3, [pc, #316]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a4e      	ldr	r2, [pc, #312]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c55a:	f7f6 fb5b 	bl	8002c14 <HAL_GetTick>
 800c55e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c560:	e008      	b.n	800c574 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c562:	f7f6 fb57 	bl	8002c14 <HAL_GetTick>
 800c566:	4602      	mov	r2, r0
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d901      	bls.n	800c574 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c570:	2303      	movs	r3, #3
 800c572:	e086      	b.n	800c682 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c574:	4b45      	ldr	r3, [pc, #276]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1f0      	bne.n	800c562 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c580:	4b42      	ldr	r3, [pc, #264]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c584:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	051b      	lsls	r3, r3, #20
 800c58e:	493f      	ldr	r1, [pc, #252]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c590:	4313      	orrs	r3, r2
 800c592:	628b      	str	r3, [r1, #40]	@ 0x28
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	3b01      	subs	r3, #1
 800c59a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	025b      	lsls	r3, r3, #9
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	041b      	lsls	r3, r3, #16
 800c5b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	691b      	ldr	r3, [r3, #16]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	061b      	lsls	r3, r3, #24
 800c5c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c5c4:	4931      	ldr	r1, [pc, #196]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c5ca:	4b30      	ldr	r3, [pc, #192]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	492d      	ldr	r1, [pc, #180]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c5dc:	4b2b      	ldr	r3, [pc, #172]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	4928      	ldr	r1, [pc, #160]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c5ee:	4b27      	ldr	r3, [pc, #156]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f2:	4a26      	ldr	r2, [pc, #152]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5fa:	4b24      	ldr	r3, [pc, #144]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c5fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5fe:	4b24      	ldr	r3, [pc, #144]	@ (800c690 <RCCEx_PLL3_Config+0x160>)
 800c600:	4013      	ands	r3, r2
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	69d2      	ldr	r2, [r2, #28]
 800c606:	00d2      	lsls	r2, r2, #3
 800c608:	4920      	ldr	r1, [pc, #128]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c60e:	4b1f      	ldr	r3, [pc, #124]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c612:	4a1e      	ldr	r2, [pc, #120]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c618:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d106      	bne.n	800c62e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c620:	4b1a      	ldr	r3, [pc, #104]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c624:	4a19      	ldr	r2, [pc, #100]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c626:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c62a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c62c:	e00f      	b.n	800c64e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d106      	bne.n	800c642 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c634:	4b15      	ldr	r3, [pc, #84]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c638:	4a14      	ldr	r2, [pc, #80]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c63a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c63e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c640:	e005      	b.n	800c64e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c642:	4b12      	ldr	r3, [pc, #72]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c646:	4a11      	ldr	r2, [pc, #68]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c648:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c64c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c64e:	4b0f      	ldr	r3, [pc, #60]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a0e      	ldr	r2, [pc, #56]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c658:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c65a:	f7f6 fadb 	bl	8002c14 <HAL_GetTick>
 800c65e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c660:	e008      	b.n	800c674 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c662:	f7f6 fad7 	bl	8002c14 <HAL_GetTick>
 800c666:	4602      	mov	r2, r0
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d901      	bls.n	800c674 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c670:	2303      	movs	r3, #3
 800c672:	e006      	b.n	800c682 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c674:	4b05      	ldr	r3, [pc, #20]	@ (800c68c <RCCEx_PLL3_Config+0x15c>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d0f0      	beq.n	800c662 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	58024400 	.word	0x58024400
 800c690:	ffff0007 	.word	0xffff0007

0800c694 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08a      	sub	sp, #40	@ 0x28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e075      	b.n	800c792 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d105      	bne.n	800c6be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7f5 ff09 	bl	80024d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2204      	movs	r2, #4
 800c6c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f868 	bl	800c79c <HAL_SD_InitCard>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e05d      	b.n	800c792 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c6d6:	f107 0308 	add.w	r3, r7, #8
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fdaf 	bl	800d240 <HAL_SD_GetCardStatus>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e052      	b.n	800c792 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c6ec:	7e3b      	ldrb	r3, [r7, #24]
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c6f2:	7e7b      	ldrb	r3, [r7, #25]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d10a      	bne.n	800c716 <HAL_SD_Init+0x82>
 800c700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c702:	2b00      	cmp	r3, #0
 800c704:	d102      	bne.n	800c70c <HAL_SD_Init+0x78>
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d004      	beq.n	800c716 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c712:	659a      	str	r2, [r3, #88]	@ 0x58
 800c714:	e00b      	b.n	800c72e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d104      	bne.n	800c728 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c724:	659a      	str	r2, [r3, #88]	@ 0x58
 800c726:	e002      	b.n	800c72e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fe6d 	bl	800d414 <HAL_SD_ConfigWideBusOperation>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e026      	b.n	800c792 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c744:	f7f6 fa66 	bl	8002c14 <HAL_GetTick>
 800c748:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c74a:	e011      	b.n	800c770 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c74c:	f7f6 fa62 	bl	8002c14 <HAL_GetTick>
 800c750:	4602      	mov	r2, r0
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75a:	d109      	bne.n	800c770 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c762:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e010      	b.n	800c792 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 ff61 	bl	800d638 <HAL_SD_GetCardState>
 800c776:	4603      	mov	r3, r0
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d1e7      	bne.n	800c74c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3728      	adds	r7, #40	@ 0x28
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
	...

0800c79c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c79c:	b590      	push	{r4, r7, lr}
 800c79e:	b08d      	sub	sp, #52	@ 0x34
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c7b4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c7b8:	f04f 0100 	mov.w	r1, #0
 800c7bc:	f7fe fd24 	bl	800b208 <HAL_RCCEx_GetPeriphCLKFreq>
 800c7c0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d109      	bne.n	800c7dc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c7d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e070      	b.n	800c8be <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	0a1b      	lsrs	r3, r3, #8
 800c7e0:	4a39      	ldr	r2, [pc, #228]	@ (800c8c8 <HAL_SD_InitCard+0x12c>)
 800c7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e6:	091b      	lsrs	r3, r3, #4
 800c7e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681c      	ldr	r4, [r3, #0]
 800c7ee:	466a      	mov	r2, sp
 800c7f0:	f107 0318 	add.w	r3, r7, #24
 800c7f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c7f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800c7fc:	f107 030c 	add.w	r3, r7, #12
 800c800:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c802:	4620      	mov	r0, r4
 800c804:	f003 fffe 	bl	8010804 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f004 f841 	bl	8010894 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d005      	beq.n	800c824 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	005b      	lsls	r3, r3, #1
 800c81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c822:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	d007      	beq.n	800c83a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c82a:	4a28      	ldr	r2, [pc, #160]	@ (800c8cc <HAL_SD_InitCard+0x130>)
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c832:	3301      	adds	r3, #1
 800c834:	4618      	mov	r0, r3
 800c836:	f7f6 f9f9 	bl	8002c2c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 ffea 	bl	800d814 <SD_PowerON>
 800c840:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00b      	beq.n	800c860 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	431a      	orrs	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e02e      	b.n	800c8be <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 ff09 	bl	800d678 <SD_InitCard>
 800c866:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c868:	6a3b      	ldr	r3, [r7, #32]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00b      	beq.n	800c886 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c87a:	6a3b      	ldr	r3, [r7, #32]
 800c87c:	431a      	orrs	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e01b      	b.n	800c8be <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c88e:	4618      	mov	r0, r3
 800c890:	f004 f896 	bl	80109c0 <SDMMC_CmdBlockLength>
 800c894:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00f      	beq.n	800c8bc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c8d0 <HAL_SD_InitCard+0x134>)
 800c8a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e000      	b.n	800c8be <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	372c      	adds	r7, #44	@ 0x2c
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd90      	pop	{r4, r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	014f8b59 	.word	0x014f8b59
 800c8cc:	00012110 	.word	0x00012110
 800c8d0:	1fe00fff 	.word	0x1fe00fff

0800c8d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08c      	sub	sp, #48	@ 0x30
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d107      	bne.n	800c8fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e08d      	b.n	800ca18 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b01      	cmp	r3, #1
 800c906:	f040 8086 	bne.w	800ca16 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2200      	movs	r2, #0
 800c90e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	441a      	add	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d907      	bls.n	800c92e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c922:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e074      	b.n	800ca18 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2203      	movs	r2, #3
 800c932:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2200      	movs	r2, #0
 800c93c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	025a      	lsls	r2, r3, #9
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c950:	2b01      	cmp	r3, #1
 800c952:	d002      	beq.n	800c95a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c956:	025b      	lsls	r3, r3, #9
 800c958:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c95a:	f04f 33ff 	mov.w	r3, #4294967295
 800c95e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	025b      	lsls	r3, r3, #9
 800c964:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c966:	2390      	movs	r3, #144	@ 0x90
 800c968:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c96a:	2302      	movs	r3, #2
 800c96c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c96e:	2300      	movs	r3, #0
 800c970:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c972:	2300      	movs	r3, #0
 800c974:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f107 0210 	add.w	r2, r7, #16
 800c97e:	4611      	mov	r1, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f003 fff1 	bl	8010968 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68da      	ldr	r2, [r3, #12]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c994:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d90a      	bls.n	800c9c2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2282      	movs	r2, #130	@ 0x82
 800c9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f004 f847 	bl	8010a4c <SDMMC_CmdReadMultiBlock>
 800c9be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9c0:	e009      	b.n	800c9d6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2281      	movs	r2, #129	@ 0x81
 800c9c6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f004 f819 	bl	8010a06 <SDMMC_CmdReadSingleBlock>
 800c9d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d012      	beq.n	800ca02 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a0f      	ldr	r2, [pc, #60]	@ (800ca20 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c9e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e00a      	b.n	800ca18 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800ca10:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	e000      	b.n	800ca18 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ca16:	2302      	movs	r3, #2
  }
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3730      	adds	r7, #48	@ 0x30
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	1fe00fff 	.word	0x1fe00fff

0800ca24 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08c      	sub	sp, #48	@ 0x30
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d107      	bne.n	800ca4c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca40:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e08d      	b.n	800cb68 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	f040 8086 	bne.w	800cb66 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	441a      	add	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d907      	bls.n	800ca7e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca72:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e074      	b.n	800cb68 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2203      	movs	r2, #3
 800ca82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	025a      	lsls	r2, r3, #9
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d002      	beq.n	800caaa <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800caa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa6:	025b      	lsls	r3, r3, #9
 800caa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800caaa:	f04f 33ff 	mov.w	r3, #4294967295
 800caae:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	025b      	lsls	r3, r3, #9
 800cab4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cab6:	2390      	movs	r3, #144	@ 0x90
 800cab8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cac2:	2300      	movs	r3, #0
 800cac4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f107 0210 	add.w	r2, r7, #16
 800cace:	4611      	mov	r1, r2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f003 ff49 	bl	8010968 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	68da      	ldr	r2, [r3, #12]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cae4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2201      	movs	r2, #1
 800caf4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d90a      	bls.n	800cb12 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	22a0      	movs	r2, #160	@ 0xa0
 800cb00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f003 ffe5 	bl	8010ad8 <SDMMC_CmdWriteMultiBlock>
 800cb0e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cb10:	e009      	b.n	800cb26 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2290      	movs	r2, #144	@ 0x90
 800cb16:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f003 ffb7 	bl	8010a92 <SDMMC_CmdWriteSingleBlock>
 800cb24:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d012      	beq.n	800cb52 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a0f      	ldr	r2, [pc, #60]	@ (800cb70 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cb32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3a:	431a      	orrs	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2201      	movs	r2, #1
 800cb44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e00a      	b.n	800cb68 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800cb60:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e000      	b.n	800cb68 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cb66:	2302      	movs	r3, #2
  }
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3730      	adds	r7, #48	@ 0x30
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	1fe00fff 	.word	0x1fe00fff

0800cb74 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb80:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d008      	beq.n	800cba2 <HAL_SD_IRQHandler+0x2e>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f003 0308 	and.w	r3, r3, #8
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f001 f926 	bl	800ddec <SD_Read_IT>
 800cba0:	e19a      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 80ac 	beq.w	800cd0a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cbba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	4b59      	ldr	r3, [pc, #356]	@ (800cd2c <HAL_SD_IRQHandler+0x1b8>)
 800cbc8:	400b      	ands	r3, r1
 800cbca:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cbda:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cbea:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f003 0308 	and.w	r3, r3, #8
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d038      	beq.n	800cc68 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f003 0302 	and.w	r3, r3, #2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d104      	bne.n	800cc0a <HAL_SD_IRQHandler+0x96>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f003 0320 	and.w	r3, r3, #32
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d011      	beq.n	800cc2e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f003 ff86 	bl	8010b20 <SDMMC_CmdStopTransfer>
 800cc14:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d008      	beq.n	800cc2e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	431a      	orrs	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f95b 	bl	800cee4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a3f      	ldr	r2, [pc, #252]	@ (800cd30 <HAL_SD_IRQHandler+0x1bc>)
 800cc34:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d104      	bne.n	800cc58 <HAL_SD_IRQHandler+0xe4>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f003 0302 	and.w	r3, r3, #2
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f004 fc31 	bl	80114c0 <HAL_SD_RxCpltCallback>
 800cc5e:	e13b      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f004 fc23 	bl	80114ac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc66:	e137      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 8132 	beq.w	800ced8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2200      	movs	r2, #0
 800cc82:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f003 0302 	and.w	r3, r3, #2
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d104      	bne.n	800cca0 <HAL_SD_IRQHandler+0x12c>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f003 0320 	and.w	r3, r3, #32
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d011      	beq.n	800ccc4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 ff3b 	bl	8010b20 <SDMMC_CmdStopTransfer>
 800ccaa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d008      	beq.n	800ccc4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	431a      	orrs	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f910 	bl	800cee4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f003 0310 	and.w	r3, r3, #16
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d104      	bne.n	800cce6 <HAL_SD_IRQHandler+0x172>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f003 0320 	and.w	r3, r3, #32
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f004 fbe0 	bl	80114ac <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d105      	bne.n	800cd02 <HAL_SD_IRQHandler+0x18e>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f003 0302 	and.w	r3, r3, #2
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 80eb 	beq.w	800ced8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f004 fbdc 	bl	80114c0 <HAL_SD_RxCpltCallback>
}
 800cd08:	e0e6      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00d      	beq.n	800cd34 <HAL_SD_IRQHandler+0x1c0>
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f003 0308 	and.w	r3, r3, #8
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f001 f8a8 	bl	800de78 <SD_Write_IT>
 800cd28:	e0d6      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
 800cd2a:	bf00      	nop
 800cd2c:	ffff3ec5 	.word	0xffff3ec5
 800cd30:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd3a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f000 809d 	beq.w	800ce7e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd4a:	f003 0302 	and.w	r3, r3, #2
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d005      	beq.n	800cd5e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd56:	f043 0202 	orr.w	r2, r3, #2
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd64:	f003 0308 	and.w	r3, r3, #8
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d005      	beq.n	800cd78 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd70:	f043 0208 	orr.w	r2, r3, #8
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd7e:	f003 0320 	and.w	r3, r3, #32
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd8a:	f043 0220 	orr.w	r2, r3, #32
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd98:	f003 0310 	and.w	r3, r3, #16
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d005      	beq.n	800cdac <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda4:	f043 0210 	orr.w	r2, r3, #16
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a4b      	ldr	r2, [pc, #300]	@ (800cee0 <HAL_SD_IRQHandler+0x36c>)
 800cdb2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800cdc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68da      	ldr	r2, [r3, #12]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdd2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cde2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68da      	ldr	r2, [r3, #12]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cdf2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f003 fe91 	bl	8010b20 <SDMMC_CmdStopTransfer>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce04:	431a      	orrs	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68da      	ldr	r2, [r3, #12]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ce18:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce22:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f003 0308 	and.w	r3, r3, #8
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00a      	beq.n	800ce44 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f851 	bl	800cee4 <HAL_SD_ErrorCallback>
}
 800ce42:	e049      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d044      	beq.n	800ced8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d040      	beq.n	800ced8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ce64:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f834 	bl	800cee4 <HAL_SD_ErrorCallback>
}
 800ce7c:	e02c      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d025      	beq.n	800ced8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce94:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10c      	bne.n	800cebe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f003 0320 	and.w	r3, r3, #32
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f001 f84a 	bl	800df48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ceb4:	e010      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f001 f832 	bl	800df20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cebc:	e00c      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f003 0320 	and.w	r3, r3, #32
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d003      	beq.n	800ced0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 f833 	bl	800df34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cece:	e003      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f001 f81b 	bl	800df0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ced6:	e7ff      	b.n	800ced8 <HAL_SD_IRQHandler+0x364>
 800ced8:	bf00      	nop
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	18000f3a 	.word	0x18000f3a

0800cee4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf06:	0f9b      	lsrs	r3, r3, #30
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf12:	0e9b      	lsrs	r3, r3, #26
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	f003 030f 	and.w	r3, r3, #15
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf24:	0e1b      	lsrs	r3, r3, #24
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf36:	0c1b      	lsrs	r3, r3, #16
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf58:	0d1b      	lsrs	r3, r3, #20
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf64:	0c1b      	lsrs	r3, r3, #16
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	f003 030f 	and.w	r3, r3, #15
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf76:	0bdb      	lsrs	r3, r3, #15
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	f003 0301 	and.w	r3, r3, #1
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf88:	0b9b      	lsrs	r3, r3, #14
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf9a:	0b5b      	lsrs	r3, r3, #13
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfac:	0b1b      	lsrs	r3, r3, #12
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	f003 0301 	and.w	r3, r3, #1
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d163      	bne.n	800d090 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfcc:	009a      	lsls	r2, r3, #2
 800cfce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cfd8:	0f92      	lsrs	r2, r2, #30
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfe4:	0edb      	lsrs	r3, r3, #27
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f003 0307 	and.w	r3, r3, #7
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cff6:	0e1b      	lsrs	r3, r3, #24
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	f003 0307 	and.w	r3, r3, #7
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d008:	0d5b      	lsrs	r3, r3, #21
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 0307 	and.w	r3, r3, #7
 800d010:	b2da      	uxtb	r2, r3
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d01a:	0c9b      	lsrs	r3, r3, #18
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	b2da      	uxtb	r2, r3
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d02c:	0bdb      	lsrs	r3, r3, #15
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	f003 0307 	and.w	r3, r3, #7
 800d034:	b2da      	uxtb	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	691b      	ldr	r3, [r3, #16]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	7e1b      	ldrb	r3, [r3, #24]
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	3302      	adds	r3, #2
 800d050:	2201      	movs	r2, #1
 800d052:	fa02 f303 	lsl.w	r3, r2, r3
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d05a:	fb03 f202 	mul.w	r2, r3, r2
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	7a1b      	ldrb	r3, [r3, #8]
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f003 030f 	and.w	r3, r3, #15
 800d06c:	2201      	movs	r2, #1
 800d06e:	409a      	lsls	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d07c:	0a52      	lsrs	r2, r2, #9
 800d07e:	fb03 f202 	mul.w	r2, r3, r2
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d08c:	655a      	str	r2, [r3, #84]	@ 0x54
 800d08e:	e031      	b.n	800d0f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d094:	2b01      	cmp	r3, #1
 800d096:	d11d      	bne.n	800d0d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d09c:	041b      	lsls	r3, r3, #16
 800d09e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0a6:	0c1b      	lsrs	r3, r3, #16
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	029a      	lsls	r2, r3, #10
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	655a      	str	r2, [r3, #84]	@ 0x54
 800d0d2:	e00f      	b.n	800d0f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a58      	ldr	r2, [pc, #352]	@ (800d23c <HAL_SD_GetCardCSD+0x344>)
 800d0da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e09d      	b.n	800d230 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0f8:	0b9b      	lsrs	r3, r3, #14
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	b2da      	uxtb	r2, r3
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d10a:	09db      	lsrs	r3, r3, #7
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d112:	b2da      	uxtb	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d122:	b2da      	uxtb	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d12c:	0fdb      	lsrs	r3, r3, #31
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d138:	0f5b      	lsrs	r3, r3, #29
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	f003 0303 	and.w	r3, r3, #3
 800d140:	b2da      	uxtb	r2, r3
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d14a:	0e9b      	lsrs	r3, r3, #26
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	b2da      	uxtb	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d15c:	0d9b      	lsrs	r3, r3, #22
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	f003 030f 	and.w	r3, r3, #15
 800d164:	b2da      	uxtb	r2, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d16e:	0d5b      	lsrs	r3, r3, #21
 800d170:	b2db      	uxtb	r3, r3
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d18a:	0c1b      	lsrs	r3, r3, #16
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	b2da      	uxtb	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d19e:	0bdb      	lsrs	r3, r3, #15
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1b2:	0b9b      	lsrs	r3, r3, #14
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1c6:	0b5b      	lsrs	r3, r3, #13
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	f003 0301 	and.w	r3, r3, #1
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1da:	0b1b      	lsrs	r3, r3, #12
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1ee:	0a9b      	lsrs	r3, r3, #10
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	f003 0303 	and.w	r3, r3, #3
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d202:	0a1b      	lsrs	r3, r3, #8
 800d204:	b2db      	uxtb	r3, r3
 800d206:	f003 0303 	and.w	r3, r3, #3
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d216:	085b      	lsrs	r3, r3, #1
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	1fe00fff 	.word	0x1fe00fff

0800d240 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b094      	sub	sp, #80	@ 0x50
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d24a:	2300      	movs	r3, #0
 800d24c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b03      	cmp	r3, #3
 800d25a:	d101      	bne.n	800d260 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e0a7      	b.n	800d3b0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d260:	f107 0308 	add.w	r3, r7, #8
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fb62 	bl	800d930 <SD_SendSDStatus>
 800d26c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d26e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d270:	2b00      	cmp	r3, #0
 800d272:	d011      	beq.n	800d298 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a4f      	ldr	r2, [pc, #316]	@ (800d3b8 <HAL_SD_GetCardStatus+0x178>)
 800d27a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d282:	431a      	orrs	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d296:	e070      	b.n	800d37a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	099b      	lsrs	r3, r3, #6
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 0303 	and.w	r3, r3, #3
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	095b      	lsrs	r3, r3, #5
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	b2da      	uxtb	r2, r3
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	0a1b      	lsrs	r3, r3, #8
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	0e1b      	lsrs	r3, r3, #24
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	061a      	lsls	r2, r3, #24
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	021b      	lsls	r3, r3, #8
 800d2da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d2de:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	0a1b      	lsrs	r3, r3, #8
 800d2e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2e8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	0e1b      	lsrs	r3, r3, #24
 800d2ee:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	0a1b      	lsrs	r3, r3, #8
 800d300:	b2da      	uxtb	r2, r3
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	0d1b      	lsrs	r3, r3, #20
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	b2da      	uxtb	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	0c1b      	lsrs	r3, r3, #16
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d320:	b29a      	uxth	r2, r3
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	b29b      	uxth	r3, r3
 800d326:	b2db      	uxtb	r3, r3
 800d328:	b29b      	uxth	r3, r3
 800d32a:	4313      	orrs	r3, r2
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	0a9b      	lsrs	r3, r3, #10
 800d336:	b2db      	uxtb	r3, r3
 800d338:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	0a1b      	lsrs	r3, r3, #8
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f003 0303 	and.w	r3, r3, #3
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	091b      	lsrs	r3, r3, #4
 800d356:	b2db      	uxtb	r3, r3
 800d358:	f003 030f 	and.w	r3, r3, #15
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 030f 	and.w	r3, r3, #15
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	0e1b      	lsrs	r3, r3, #24
 800d374:	b2da      	uxtb	r2, r3
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d382:	4618      	mov	r0, r3
 800d384:	f003 fb1c 	bl	80109c0 <SDMMC_CmdBlockLength>
 800d388:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d38a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00d      	beq.n	800d3ac <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a08      	ldr	r2, [pc, #32]	@ (800d3b8 <HAL_SD_GetCardStatus+0x178>)
 800d396:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d39c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d3ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3750      	adds	r7, #80	@ 0x50
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	1fe00fff 	.word	0x1fe00fff

0800d3bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d414:	b590      	push	{r4, r7, lr}
 800d416:	b08d      	sub	sp, #52	@ 0x34
 800d418:	af02      	add	r7, sp, #8
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2203      	movs	r2, #3
 800d428:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d430:	2b03      	cmp	r3, #3
 800d432:	d02e      	beq.n	800d492 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d43a:	d106      	bne.n	800d44a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d440:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	635a      	str	r2, [r3, #52]	@ 0x34
 800d448:	e029      	b.n	800d49e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d450:	d10a      	bne.n	800d468 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fb64 	bl	800db20 <SD_WideBus_Enable>
 800d458:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d45e:	6a3b      	ldr	r3, [r7, #32]
 800d460:	431a      	orrs	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	635a      	str	r2, [r3, #52]	@ 0x34
 800d466:	e01a      	b.n	800d49e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10a      	bne.n	800d484 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fba1 	bl	800dbb6 <SD_WideBus_Disable>
 800d474:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d47a:	6a3b      	ldr	r3, [r7, #32]
 800d47c:	431a      	orrs	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	635a      	str	r2, [r3, #52]	@ 0x34
 800d482:	e00c      	b.n	800d49e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d488:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d490:	e005      	b.n	800d49e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d496:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4a5f      	ldr	r2, [pc, #380]	@ (800d628 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d4ac:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d4b4:	e096      	b.n	800d5e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d4b6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d4ba:	f04f 0100 	mov.w	r1, #0
 800d4be:	f7fd fea3 	bl	800b208 <HAL_RCCEx_GetPeriphCLKFreq>
 800d4c2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f000 8083 	beq.w	800d5d2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	695a      	ldr	r2, [r3, #20]
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	4950      	ldr	r1, [pc, #320]	@ (800d62c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d4ea:	fba1 1303 	umull	r1, r3, r1, r3
 800d4ee:	0e1b      	lsrs	r3, r3, #24
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d303      	bcc.n	800d4fc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	61bb      	str	r3, [r7, #24]
 800d4fa:	e05a      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d504:	d103      	bne.n	800d50e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	61bb      	str	r3, [r7, #24]
 800d50c:	e051      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d516:	d126      	bne.n	800d566 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10e      	bne.n	800d53e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	4a43      	ldr	r2, [pc, #268]	@ (800d630 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d906      	bls.n	800d536 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	4a40      	ldr	r2, [pc, #256]	@ (800d62c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d52c:	fba2 2303 	umull	r2, r3, r2, r3
 800d530:	0e5b      	lsrs	r3, r3, #25
 800d532:	61bb      	str	r3, [r7, #24]
 800d534:	e03d      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	61bb      	str	r3, [r7, #24]
 800d53c:	e039      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	69fa      	ldr	r2, [r7, #28]
 800d546:	fbb2 f3f3 	udiv	r3, r2, r3
 800d54a:	4a39      	ldr	r2, [pc, #228]	@ (800d630 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d906      	bls.n	800d55e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	4a36      	ldr	r2, [pc, #216]	@ (800d62c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d554:	fba2 2303 	umull	r2, r3, r2, r3
 800d558:	0e5b      	lsrs	r3, r3, #25
 800d55a:	61bb      	str	r3, [r7, #24]
 800d55c:	e029      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	61bb      	str	r3, [r7, #24]
 800d564:	e025      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10e      	bne.n	800d58c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	4a30      	ldr	r2, [pc, #192]	@ (800d634 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d906      	bls.n	800d584 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	4a2c      	ldr	r2, [pc, #176]	@ (800d62c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d57a:	fba2 2303 	umull	r2, r3, r2, r3
 800d57e:	0e1b      	lsrs	r3, r3, #24
 800d580:	61bb      	str	r3, [r7, #24]
 800d582:	e016      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	61bb      	str	r3, [r7, #24]
 800d58a:	e012      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	69fa      	ldr	r2, [r7, #28]
 800d594:	fbb2 f3f3 	udiv	r3, r2, r3
 800d598:	4a26      	ldr	r2, [pc, #152]	@ (800d634 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d906      	bls.n	800d5ac <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	4a22      	ldr	r2, [pc, #136]	@ (800d62c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a6:	0e1b      	lsrs	r3, r3, #24
 800d5a8:	61bb      	str	r3, [r7, #24]
 800d5aa:	e002      	b.n	800d5b2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681c      	ldr	r4, [r3, #0]
 800d5b6:	466a      	mov	r2, sp
 800d5b8:	f107 0314 	add.w	r3, r7, #20
 800d5bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5c0:	e882 0003 	stmia.w	r2, {r0, r1}
 800d5c4:	f107 0308 	add.w	r3, r7, #8
 800d5c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f003 f91a 	bl	8010804 <SDMMC_Init>
 800d5d0:	e008      	b.n	800d5e4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f003 f9e7 	bl	80109c0 <SDMMC_CmdBlockLength>
 800d5f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00c      	beq.n	800d614 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a0a      	ldr	r2, [pc, #40]	@ (800d628 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d600:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	431a      	orrs	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d61c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d620:	4618      	mov	r0, r3
 800d622:	372c      	adds	r7, #44	@ 0x2c
 800d624:	46bd      	mov	sp, r7
 800d626:	bd90      	pop	{r4, r7, pc}
 800d628:	1fe00fff 	.word	0x1fe00fff
 800d62c:	55e63b89 	.word	0x55e63b89
 800d630:	02faf080 	.word	0x02faf080
 800d634:	017d7840 	.word	0x017d7840

0800d638 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d644:	f107 030c 	add.w	r3, r7, #12
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 fa40 	bl	800dad0 <SD_SendStatus>
 800d650:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d005      	beq.n	800d664 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	431a      	orrs	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	0a5b      	lsrs	r3, r3, #9
 800d668:	f003 030f 	and.w	r3, r3, #15
 800d66c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d66e:	693b      	ldr	r3, [r7, #16]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3718      	adds	r7, #24
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b090      	sub	sp, #64	@ 0x40
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d680:	2300      	movs	r3, #0
 800d682:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d684:	f7f5 fac6 	bl	8002c14 <HAL_GetTick>
 800d688:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4618      	mov	r0, r3
 800d690:	f003 f911 	bl	80108b6 <SDMMC_GetPowerState>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d69a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d69e:	e0b5      	b.n	800d80c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d02e      	beq.n	800d706 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f003 fb5c 	bl	8010d6a <SDMMC_CmdSendCID>
 800d6b2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <SD_InitCard+0x46>
    {
      return errorstate;
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6bc:	e0a6      	b.n	800d80c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f003 f93c 	bl	8010942 <SDMMC_GetResponse>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f003 f933 	bl	8010942 <SDMMC_GetResponse>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2108      	movs	r1, #8
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f003 f92a 	bl	8010942 <SDMMC_GetResponse>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	210c      	movs	r1, #12
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f003 f921 	bl	8010942 <SDMMC_GetResponse>
 800d700:	4602      	mov	r2, r0
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d01d      	beq.n	800d74a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d70e:	e019      	b.n	800d744 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f107 020a 	add.w	r2, r7, #10
 800d718:	4611      	mov	r1, r2
 800d71a:	4618      	mov	r0, r3
 800d71c:	f003 fb64 	bl	8010de8 <SDMMC_CmdSetRelAdd>
 800d720:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <SD_InitCard+0xb4>
      {
        return errorstate;
 800d728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72a:	e06f      	b.n	800d80c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d72c:	f7f5 fa72 	bl	8002c14 <HAL_GetTick>
 800d730:	4602      	mov	r2, r0
 800d732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d902      	bls.n	800d744 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d73e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d742:	e063      	b.n	800d80c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d744:	897b      	ldrh	r3, [r7, #10]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0e2      	beq.n	800d710 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d036      	beq.n	800d7c0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d752:	897b      	ldrh	r3, [r7, #10]
 800d754:	461a      	mov	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d762:	041b      	lsls	r3, r3, #16
 800d764:	4619      	mov	r1, r3
 800d766:	4610      	mov	r0, r2
 800d768:	f003 fb1e 	bl	8010da8 <SDMMC_CmdSendCSD>
 800d76c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <SD_InitCard+0x100>
    {
      return errorstate;
 800d774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d776:	e049      	b.n	800d80c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2100      	movs	r1, #0
 800d77e:	4618      	mov	r0, r3
 800d780:	f003 f8df 	bl	8010942 <SDMMC_GetResponse>
 800d784:	4602      	mov	r2, r0
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2104      	movs	r1, #4
 800d790:	4618      	mov	r0, r3
 800d792:	f003 f8d6 	bl	8010942 <SDMMC_GetResponse>
 800d796:	4602      	mov	r2, r0
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2108      	movs	r1, #8
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f003 f8cd 	bl	8010942 <SDMMC_GetResponse>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	210c      	movs	r1, #12
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f003 f8c4 	bl	8010942 <SDMMC_GetResponse>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2104      	movs	r1, #4
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f003 f8bb 	bl	8010942 <SDMMC_GetResponse>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	0d1a      	lsrs	r2, r3, #20
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d7d4:	f107 030c 	add.w	r3, r7, #12
 800d7d8:	4619      	mov	r1, r3
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff fb8c 	bl	800cef8 <HAL_SD_GetCardCSD>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d002      	beq.n	800d7ec <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d7ea:	e00f      	b.n	800d80c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7f4:	041b      	lsls	r3, r3, #16
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	f003 f9cd 	bl	8010b98 <SDMMC_CmdSelDesel>
 800d7fe:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d802:	2b00      	cmp	r3, #0
 800d804:	d001      	beq.n	800d80a <SD_InitCard+0x192>
  {
    return errorstate;
 800d806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d808:	e000      	b.n	800d80c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3740      	adds	r7, #64	@ 0x40
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d81c:	2300      	movs	r3, #0
 800d81e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d824:	2300      	movs	r3, #0
 800d826:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f003 f9d6 	bl	8010bde <SDMMC_CmdGoIdleState>
 800d832:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	e072      	b.n	800d924 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4618      	mov	r0, r3
 800d844:	f003 f9e9 	bl	8010c1a <SDMMC_CmdOperCond>
 800d848:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d850:	d10d      	bne.n	800d86e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f003 f9be 	bl	8010bde <SDMMC_CmdGoIdleState>
 800d862:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d004      	beq.n	800d874 <SD_PowerON+0x60>
    {
      return errorstate;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	e05a      	b.n	800d924 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d137      	bne.n	800d8ec <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2100      	movs	r1, #0
 800d882:	4618      	mov	r0, r3
 800d884:	f003 f9e9 	bl	8010c5a <SDMMC_CmdAppCommand>
 800d888:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d02d      	beq.n	800d8ec <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d890:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d894:	e046      	b.n	800d924 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2100      	movs	r1, #0
 800d89c:	4618      	mov	r0, r3
 800d89e:	f003 f9dc 	bl	8010c5a <SDMMC_CmdAppCommand>
 800d8a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d001      	beq.n	800d8ae <SD_PowerON+0x9a>
    {
      return errorstate;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	e03a      	b.n	800d924 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	491e      	ldr	r1, [pc, #120]	@ (800d92c <SD_PowerON+0x118>)
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f003 f9f3 	bl	8010ca0 <SDMMC_CmdAppOperCommand>
 800d8ba:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8c6:	e02d      	b.n	800d924 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f003 f837 	bl	8010942 <SDMMC_GetResponse>
 800d8d4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	0fdb      	lsrs	r3, r3, #31
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d101      	bne.n	800d8e2 <SD_PowerON+0xce>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <SD_PowerON+0xd0>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	613b      	str	r3, [r7, #16]

    count++;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d802      	bhi.n	800d8fc <SD_PowerON+0xe8>
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d0cc      	beq.n	800d896 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d902:	4293      	cmp	r3, r2
 800d904:	d902      	bls.n	800d90c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d906:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d90a:	e00b      	b.n	800d924 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	c1100000 	.word	0xc1100000

0800d930 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b08c      	sub	sp, #48	@ 0x30
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d93a:	f7f5 f96b 	bl	8002c14 <HAL_GetTick>
 800d93e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2100      	movs	r1, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f002 fff9 	bl	8010942 <SDMMC_GetResponse>
 800d950:	4603      	mov	r3, r0
 800d952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d95a:	d102      	bne.n	800d962 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d95c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d960:	e0b0      	b.n	800dac4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2140      	movs	r1, #64	@ 0x40
 800d968:	4618      	mov	r0, r3
 800d96a:	f003 f829 	bl	80109c0 <SDMMC_CmdBlockLength>
 800d96e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d970:	6a3b      	ldr	r3, [r7, #32]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d005      	beq.n	800d982 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	e0a0      	b.n	800dac4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d98a:	041b      	lsls	r3, r3, #16
 800d98c:	4619      	mov	r1, r3
 800d98e:	4610      	mov	r0, r2
 800d990:	f003 f963 	bl	8010c5a <SDMMC_CmdAppCommand>
 800d994:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d005      	beq.n	800d9a8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	e08d      	b.n	800dac4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ac:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d9ae:	2340      	movs	r3, #64	@ 0x40
 800d9b0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d9b2:	2360      	movs	r3, #96	@ 0x60
 800d9b4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f107 0208 	add.w	r2, r7, #8
 800d9ca:	4611      	mov	r1, r2
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f002 ffcb 	bl	8010968 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f003 fa4b 	bl	8010e72 <SDMMC_CmdStatusRegister>
 800d9dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d02b      	beq.n	800da3c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	e069      	b.n	800dac4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d013      	beq.n	800da26 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d9fe:	2300      	movs	r3, #0
 800da00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da02:	e00d      	b.n	800da20 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4618      	mov	r0, r3
 800da0a:	f002 ff25 	bl	8010858 <SDMMC_ReadFIFO>
 800da0e:	4602      	mov	r2, r0
 800da10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da12:	601a      	str	r2, [r3, #0]
        pData++;
 800da14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da16:	3304      	adds	r3, #4
 800da18:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1c:	3301      	adds	r3, #1
 800da1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da22:	2b07      	cmp	r3, #7
 800da24:	d9ee      	bls.n	800da04 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da26:	f7f5 f8f5 	bl	8002c14 <HAL_GetTick>
 800da2a:	4602      	mov	r2, r0
 800da2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da34:	d102      	bne.n	800da3c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da36:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da3a:	e043      	b.n	800dac4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da42:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800da46:	2b00      	cmp	r3, #0
 800da48:	d0d2      	beq.n	800d9f0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da50:	f003 0308 	and.w	r3, r3, #8
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800da58:	2308      	movs	r3, #8
 800da5a:	e033      	b.n	800dac4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da62:	f003 0302 	and.w	r3, r3, #2
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da6a:	2302      	movs	r3, #2
 800da6c:	e02a      	b.n	800dac4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da74:	f003 0320 	and.w	r3, r3, #32
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d017      	beq.n	800daac <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800da7c:	2320      	movs	r3, #32
 800da7e:	e021      	b.n	800dac4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4618      	mov	r0, r3
 800da86:	f002 fee7 	bl	8010858 <SDMMC_ReadFIFO>
 800da8a:	4602      	mov	r2, r0
 800da8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8e:	601a      	str	r2, [r3, #0]
    pData++;
 800da90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da92:	3304      	adds	r3, #4
 800da94:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da96:	f7f5 f8bd 	bl	8002c14 <HAL_GetTick>
 800da9a:	4602      	mov	r2, r0
 800da9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa4:	d102      	bne.n	800daac <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800daa6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800daaa:	e00b      	b.n	800dac4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1e2      	bne.n	800da80 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a03      	ldr	r2, [pc, #12]	@ (800dacc <SD_SendSDStatus+0x19c>)
 800dac0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3730      	adds	r7, #48	@ 0x30
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	18000f3a 	.word	0x18000f3a

0800dad0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d102      	bne.n	800dae6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dae0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dae4:	e018      	b.n	800db18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daee:	041b      	lsls	r3, r3, #16
 800daf0:	4619      	mov	r1, r3
 800daf2:	4610      	mov	r0, r2
 800daf4:	f003 f99a 	bl	8010e2c <SDMMC_CmdSendStatus>
 800daf8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <SD_SendStatus+0x34>
  {
    return errorstate;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	e009      	b.n	800db18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2100      	movs	r1, #0
 800db0a:	4618      	mov	r0, r3
 800db0c:	f002 ff19 	bl	8010942 <SDMMC_GetResponse>
 800db10:	4602      	mov	r2, r0
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800db28:	2300      	movs	r3, #0
 800db2a:	60fb      	str	r3, [r7, #12]
 800db2c:	2300      	movs	r3, #0
 800db2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2100      	movs	r1, #0
 800db36:	4618      	mov	r0, r3
 800db38:	f002 ff03 	bl	8010942 <SDMMC_GetResponse>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db46:	d102      	bne.n	800db4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db4c:	e02f      	b.n	800dbae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db4e:	f107 030c 	add.w	r3, r7, #12
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f879 	bl	800dc4c <SD_FindSCR>
 800db5a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	e023      	b.n	800dbae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d01c      	beq.n	800dbaa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db78:	041b      	lsls	r3, r3, #16
 800db7a:	4619      	mov	r1, r3
 800db7c:	4610      	mov	r0, r2
 800db7e:	f003 f86c 	bl	8010c5a <SDMMC_CmdAppCommand>
 800db82:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	e00f      	b.n	800dbae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2102      	movs	r1, #2
 800db94:	4618      	mov	r0, r3
 800db96:	f003 f8a3 	bl	8010ce0 <SDMMC_CmdBusWidth>
 800db9a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	e003      	b.n	800dbae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dba6:	2300      	movs	r3, #0
 800dba8:	e001      	b.n	800dbae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbaa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b086      	sub	sp, #24
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60fb      	str	r3, [r7, #12]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2100      	movs	r1, #0
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f002 feb8 	bl	8010942 <SDMMC_GetResponse>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbdc:	d102      	bne.n	800dbe4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dbe2:	e02f      	b.n	800dc44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbe4:	f107 030c 	add.w	r3, r7, #12
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f82e 	bl	800dc4c <SD_FindSCR>
 800dbf0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	e023      	b.n	800dc44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d01c      	beq.n	800dc40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc0e:	041b      	lsls	r3, r3, #16
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f003 f821 	bl	8010c5a <SDMMC_CmdAppCommand>
 800dc18:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	e00f      	b.n	800dc44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2100      	movs	r1, #0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f003 f858 	bl	8010ce0 <SDMMC_CmdBusWidth>
 800dc30:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	e003      	b.n	800dc44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	e001      	b.n	800dc44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08e      	sub	sp, #56	@ 0x38
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc56:	f7f4 ffdd 	bl	8002c14 <HAL_GetTick>
 800dc5a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dc60:	2300      	movs	r3, #0
 800dc62:	60bb      	str	r3, [r7, #8]
 800dc64:	2300      	movs	r3, #0
 800dc66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2108      	movs	r1, #8
 800dc72:	4618      	mov	r0, r3
 800dc74:	f002 fea4 	bl	80109c0 <SDMMC_CmdBlockLength>
 800dc78:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d001      	beq.n	800dc84 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc82:	e0ad      	b.n	800dde0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc8c:	041b      	lsls	r3, r3, #16
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4610      	mov	r0, r2
 800dc92:	f002 ffe2 	bl	8010c5a <SDMMC_CmdAppCommand>
 800dc96:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d001      	beq.n	800dca2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca0:	e09e      	b.n	800dde0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dca8:	2308      	movs	r3, #8
 800dcaa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dcac:	2330      	movs	r3, #48	@ 0x30
 800dcae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dcb0:	2302      	movs	r3, #2
 800dcb2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f107 0210 	add.w	r2, r7, #16
 800dcc4:	4611      	mov	r1, r2
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f002 fe4e 	bl	8010968 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f003 f828 	bl	8010d26 <SDMMC_CmdSendSCR>
 800dcd6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d027      	beq.n	800dd2e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce0:	e07e      	b.n	800dde0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d113      	bne.n	800dd18 <SD_FindSCR+0xcc>
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d110      	bne.n	800dd18 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f002 fdac 	bl	8010858 <SDMMC_ReadFIFO>
 800dd00:	4603      	mov	r3, r0
 800dd02:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f002 fda5 	bl	8010858 <SDMMC_ReadFIFO>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	60fb      	str	r3, [r7, #12]
      index++;
 800dd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd14:	3301      	adds	r3, #1
 800dd16:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd18:	f7f4 ff7c 	bl	8002c14 <HAL_GetTick>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd26:	d102      	bne.n	800dd2e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd2c:	e058      	b.n	800dde0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd34:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dd38:	4013      	ands	r3, r2
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d0d1      	beq.n	800dce2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd44:	f003 0308 	and.w	r3, r3, #8
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d005      	beq.n	800dd58 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2208      	movs	r2, #8
 800dd52:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd54:	2308      	movs	r3, #8
 800dd56:	e043      	b.n	800dde0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd5e:	f003 0302 	and.w	r3, r3, #2
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d005      	beq.n	800dd72 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd6e:	2302      	movs	r3, #2
 800dd70:	e036      	b.n	800dde0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd78:	f003 0320 	and.w	r3, r3, #32
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d005      	beq.n	800dd8c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2220      	movs	r2, #32
 800dd86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd88:	2320      	movs	r3, #32
 800dd8a:	e029      	b.n	800dde0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a15      	ldr	r2, [pc, #84]	@ (800dde8 <SD_FindSCR+0x19c>)
 800dd92:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	061a      	lsls	r2, r3, #24
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	021b      	lsls	r3, r3, #8
 800dd9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dda0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	0a1b      	lsrs	r3, r3, #8
 800dda6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ddaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	0e1b      	lsrs	r3, r3, #24
 800ddb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ddb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb4:	601a      	str	r2, [r3, #0]
    scr++;
 800ddb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb8:	3304      	adds	r3, #4
 800ddba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	061a      	lsls	r2, r3, #24
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	021b      	lsls	r3, r3, #8
 800ddc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddc8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	0a1b      	lsrs	r3, r3, #8
 800ddce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddd2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	0e1b      	lsrs	r3, r3, #24
 800ddd8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dddc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3738      	adds	r7, #56	@ 0x38
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	18000f3a 	.word	0x18000f3a

0800ddec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddfe:	2b1f      	cmp	r3, #31
 800de00:	d936      	bls.n	800de70 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800de02:	2300      	movs	r3, #0
 800de04:	617b      	str	r3, [r7, #20]
 800de06:	e027      	b.n	800de58 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f002 fd23 	bl	8010858 <SDMMC_ReadFIFO>
 800de12:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	b2da      	uxtb	r2, r3
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	3301      	adds	r3, #1
 800de20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	0a1b      	lsrs	r3, r3, #8
 800de26:	b2da      	uxtb	r2, r3
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	3301      	adds	r3, #1
 800de30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	0c1b      	lsrs	r3, r3, #16
 800de36:	b2da      	uxtb	r2, r3
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	3301      	adds	r3, #1
 800de40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	0e1b      	lsrs	r3, r3, #24
 800de46:	b2da      	uxtb	r2, r3
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	3301      	adds	r3, #1
 800de50:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	3301      	adds	r3, #1
 800de56:	617b      	str	r3, [r7, #20]
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2b07      	cmp	r3, #7
 800de5c:	d9d4      	bls.n	800de08 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de68:	f1a3 0220 	sub.w	r2, r3, #32
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800de70:	bf00      	nop
 800de72:	3718      	adds	r7, #24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	69db      	ldr	r3, [r3, #28]
 800de84:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	2b1f      	cmp	r3, #31
 800de8c:	d93a      	bls.n	800df04 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	e02b      	b.n	800deec <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	3301      	adds	r3, #1
 800de9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	021a      	lsls	r2, r3, #8
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	3301      	adds	r3, #1
 800deb0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	041a      	lsls	r2, r3, #16
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4313      	orrs	r3, r2
 800debc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	3301      	adds	r3, #1
 800dec2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	061a      	lsls	r2, r3, #24
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	4313      	orrs	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	3301      	adds	r3, #1
 800ded4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f107 020c 	add.w	r2, r7, #12
 800dede:	4611      	mov	r1, r2
 800dee0:	4618      	mov	r0, r3
 800dee2:	f002 fcc6 	bl	8010872 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	3301      	adds	r3, #1
 800deea:	617b      	str	r3, [r7, #20]
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b07      	cmp	r3, #7
 800def0:	d9d0      	bls.n	800de94 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6a1b      	ldr	r3, [r3, #32]
 800defc:	f1a3 0220 	sub.w	r2, r3, #32
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	621a      	str	r2, [r3, #32]
  }
}
 800df04:	bf00      	nop
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800df14:	bf00      	nop
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e049      	b.n	800e002 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f4 fb3a 	bl	80025fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2202      	movs	r2, #2
 800df8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	3304      	adds	r3, #4
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f000 fc58 	bl	800e850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d001      	beq.n	800e024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e05e      	b.n	800e0e2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2202      	movs	r2, #2
 800e028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68da      	ldr	r2, [r3, #12]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f042 0201 	orr.w	r2, r2, #1
 800e03a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a2b      	ldr	r2, [pc, #172]	@ (800e0f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d02c      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e04e:	d027      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a27      	ldr	r2, [pc, #156]	@ (800e0f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d022      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a26      	ldr	r2, [pc, #152]	@ (800e0f8 <HAL_TIM_Base_Start_IT+0xec>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d01d      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a24      	ldr	r2, [pc, #144]	@ (800e0fc <HAL_TIM_Base_Start_IT+0xf0>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d018      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a23      	ldr	r2, [pc, #140]	@ (800e100 <HAL_TIM_Base_Start_IT+0xf4>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d013      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a21      	ldr	r2, [pc, #132]	@ (800e104 <HAL_TIM_Base_Start_IT+0xf8>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d00e      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a20      	ldr	r2, [pc, #128]	@ (800e108 <HAL_TIM_Base_Start_IT+0xfc>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d009      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a1e      	ldr	r2, [pc, #120]	@ (800e10c <HAL_TIM_Base_Start_IT+0x100>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d004      	beq.n	800e0a0 <HAL_TIM_Base_Start_IT+0x94>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a1d      	ldr	r2, [pc, #116]	@ (800e110 <HAL_TIM_Base_Start_IT+0x104>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d115      	bne.n	800e0cc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	4b1b      	ldr	r3, [pc, #108]	@ (800e114 <HAL_TIM_Base_Start_IT+0x108>)
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2b06      	cmp	r3, #6
 800e0b0:	d015      	beq.n	800e0de <HAL_TIM_Base_Start_IT+0xd2>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0b8:	d011      	beq.n	800e0de <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f042 0201 	orr.w	r2, r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ca:	e008      	b.n	800e0de <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f042 0201 	orr.w	r2, r2, #1
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	e000      	b.n	800e0e0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	40010000 	.word	0x40010000
 800e0f4:	40000400 	.word	0x40000400
 800e0f8:	40000800 	.word	0x40000800
 800e0fc:	40000c00 	.word	0x40000c00
 800e100:	40010400 	.word	0x40010400
 800e104:	40001800 	.word	0x40001800
 800e108:	40014000 	.word	0x40014000
 800e10c:	4000e000 	.word	0x4000e000
 800e110:	4000e400 	.word	0x4000e400
 800e114:	00010007 	.word	0x00010007

0800e118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
 800e128:	e049      	b.n	800e1be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e130:	b2db      	uxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d106      	bne.n	800e144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f841 	bl	800e1c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2202      	movs	r2, #2
 800e148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3304      	adds	r3, #4
 800e154:	4619      	mov	r1, r3
 800e156:	4610      	mov	r0, r2
 800e158:	f000 fb7a 	bl	800e850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1c6:	b480      	push	{r7}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1ce:	bf00      	nop
 800e1d0:	370c      	adds	r7, #12
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	f003 0302 	and.w	r3, r3, #2
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d020      	beq.n	800e23e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f003 0302 	and.w	r3, r3, #2
 800e202:	2b00      	cmp	r3, #0
 800e204:	d01b      	beq.n	800e23e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f06f 0202 	mvn.w	r2, #2
 800e20e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	f003 0303 	and.w	r3, r3, #3
 800e220:	2b00      	cmp	r3, #0
 800e222:	d003      	beq.n	800e22c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 faf5 	bl	800e814 <HAL_TIM_IC_CaptureCallback>
 800e22a:	e005      	b.n	800e238 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fae7 	bl	800e800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 faf8 	bl	800e828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	f003 0304 	and.w	r3, r3, #4
 800e244:	2b00      	cmp	r3, #0
 800e246:	d020      	beq.n	800e28a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f003 0304 	and.w	r3, r3, #4
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d01b      	beq.n	800e28a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f06f 0204 	mvn.w	r2, #4
 800e25a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2202      	movs	r2, #2
 800e260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d003      	beq.n	800e278 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 facf 	bl	800e814 <HAL_TIM_IC_CaptureCallback>
 800e276:	e005      	b.n	800e284 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 fac1 	bl	800e800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 fad2 	bl	800e828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	f003 0308 	and.w	r3, r3, #8
 800e290:	2b00      	cmp	r3, #0
 800e292:	d020      	beq.n	800e2d6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d01b      	beq.n	800e2d6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f06f 0208 	mvn.w	r2, #8
 800e2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2204      	movs	r2, #4
 800e2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	69db      	ldr	r3, [r3, #28]
 800e2b4:	f003 0303 	and.w	r3, r3, #3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 faa9 	bl	800e814 <HAL_TIM_IC_CaptureCallback>
 800e2c2:	e005      	b.n	800e2d0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fa9b 	bl	800e800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 faac 	bl	800e828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	f003 0310 	and.w	r3, r3, #16
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d020      	beq.n	800e322 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f003 0310 	and.w	r3, r3, #16
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d01b      	beq.n	800e322 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f06f 0210 	mvn.w	r2, #16
 800e2f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2208      	movs	r2, #8
 800e2f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	69db      	ldr	r3, [r3, #28]
 800e300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e304:	2b00      	cmp	r3, #0
 800e306:	d003      	beq.n	800e310 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fa83 	bl	800e814 <HAL_TIM_IC_CaptureCallback>
 800e30e:	e005      	b.n	800e31c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fa75 	bl	800e800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fa86 	bl	800e828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	f003 0301 	and.w	r3, r3, #1
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00c      	beq.n	800e346 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b00      	cmp	r3, #0
 800e334:	d007      	beq.n	800e346 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f06f 0201 	mvn.w	r2, #1
 800e33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7f3 fc3f 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d104      	bne.n	800e35a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00c      	beq.n	800e374 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e360:	2b00      	cmp	r3, #0
 800e362:	d007      	beq.n	800e374 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e36c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 ffc6 	bl	800f300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00c      	beq.n	800e398 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e384:	2b00      	cmp	r3, #0
 800e386:	d007      	beq.n	800e398 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 ffbe 	bl	800f314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00c      	beq.n	800e3bc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d007      	beq.n	800e3bc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f000 fa40 	bl	800e83c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	f003 0320 	and.w	r3, r3, #32
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00c      	beq.n	800e3e0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f003 0320 	and.w	r3, r3, #32
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d007      	beq.n	800e3e0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f06f 0220 	mvn.w	r2, #32
 800e3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 ff86 	bl	800f2ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3e0:	bf00      	nop
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d101      	bne.n	800e406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e402:	2302      	movs	r3, #2
 800e404:	e0ff      	b.n	800e606 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b14      	cmp	r3, #20
 800e412:	f200 80f0 	bhi.w	800e5f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e416:	a201      	add	r2, pc, #4	@ (adr r2, 800e41c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41c:	0800e471 	.word	0x0800e471
 800e420:	0800e5f7 	.word	0x0800e5f7
 800e424:	0800e5f7 	.word	0x0800e5f7
 800e428:	0800e5f7 	.word	0x0800e5f7
 800e42c:	0800e4b1 	.word	0x0800e4b1
 800e430:	0800e5f7 	.word	0x0800e5f7
 800e434:	0800e5f7 	.word	0x0800e5f7
 800e438:	0800e5f7 	.word	0x0800e5f7
 800e43c:	0800e4f3 	.word	0x0800e4f3
 800e440:	0800e5f7 	.word	0x0800e5f7
 800e444:	0800e5f7 	.word	0x0800e5f7
 800e448:	0800e5f7 	.word	0x0800e5f7
 800e44c:	0800e533 	.word	0x0800e533
 800e450:	0800e5f7 	.word	0x0800e5f7
 800e454:	0800e5f7 	.word	0x0800e5f7
 800e458:	0800e5f7 	.word	0x0800e5f7
 800e45c:	0800e575 	.word	0x0800e575
 800e460:	0800e5f7 	.word	0x0800e5f7
 800e464:	0800e5f7 	.word	0x0800e5f7
 800e468:	0800e5f7 	.word	0x0800e5f7
 800e46c:	0800e5b5 	.word	0x0800e5b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	68b9      	ldr	r1, [r7, #8]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 fa9c 	bl	800e9b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	699a      	ldr	r2, [r3, #24]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0208 	orr.w	r2, r2, #8
 800e48a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	699a      	ldr	r2, [r3, #24]
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f022 0204 	bic.w	r2, r2, #4
 800e49a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6999      	ldr	r1, [r3, #24]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	430a      	orrs	r2, r1
 800e4ac:	619a      	str	r2, [r3, #24]
      break;
 800e4ae:	e0a5      	b.n	800e5fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 fb0c 	bl	800ead4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	699a      	ldr	r2, [r3, #24]
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	699a      	ldr	r2, [r3, #24]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6999      	ldr	r1, [r3, #24]
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	691b      	ldr	r3, [r3, #16]
 800e4e6:	021a      	lsls	r2, r3, #8
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	619a      	str	r2, [r3, #24]
      break;
 800e4f0:	e084      	b.n	800e5fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68b9      	ldr	r1, [r7, #8]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 fb75 	bl	800ebe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	69da      	ldr	r2, [r3, #28]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f042 0208 	orr.w	r2, r2, #8
 800e50c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	69da      	ldr	r2, [r3, #28]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f022 0204 	bic.w	r2, r2, #4
 800e51c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	69d9      	ldr	r1, [r3, #28]
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	691a      	ldr	r2, [r3, #16]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	430a      	orrs	r2, r1
 800e52e:	61da      	str	r2, [r3, #28]
      break;
 800e530:	e064      	b.n	800e5fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68b9      	ldr	r1, [r7, #8]
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 fbdd 	bl	800ecf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	69da      	ldr	r2, [r3, #28]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e54c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	69da      	ldr	r2, [r3, #28]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e55c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	69d9      	ldr	r1, [r3, #28]
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	021a      	lsls	r2, r3, #8
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	430a      	orrs	r2, r1
 800e570:	61da      	str	r2, [r3, #28]
      break;
 800e572:	e043      	b.n	800e5fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	68b9      	ldr	r1, [r7, #8]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f000 fc26 	bl	800edcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f042 0208 	orr.w	r2, r2, #8
 800e58e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f022 0204 	bic.w	r2, r2, #4
 800e59e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	691a      	ldr	r2, [r3, #16]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	430a      	orrs	r2, r1
 800e5b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e5b2:	e023      	b.n	800e5fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68b9      	ldr	r1, [r7, #8]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 fc6a 	bl	800ee94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	021a      	lsls	r2, r3, #8
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e5f4:	e002      	b.n	800e5fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	75fb      	strb	r3, [r7, #23]
      break;
 800e5fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e604:	7dfb      	ldrb	r3, [r7, #23]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop

0800e610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e624:	2b01      	cmp	r3, #1
 800e626:	d101      	bne.n	800e62c <HAL_TIM_ConfigClockSource+0x1c>
 800e628:	2302      	movs	r3, #2
 800e62a:	e0dc      	b.n	800e7e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2202      	movs	r2, #2
 800e638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	4b6a      	ldr	r3, [pc, #424]	@ (800e7f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e648:	4013      	ands	r3, r2
 800e64a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a64      	ldr	r2, [pc, #400]	@ (800e7f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e662:	4293      	cmp	r3, r2
 800e664:	f000 80a9 	beq.w	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e668:	4a62      	ldr	r2, [pc, #392]	@ (800e7f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	f200 80ae 	bhi.w	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e670:	4a61      	ldr	r2, [pc, #388]	@ (800e7f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e672:	4293      	cmp	r3, r2
 800e674:	f000 80a1 	beq.w	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e678:	4a5f      	ldr	r2, [pc, #380]	@ (800e7f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	f200 80a6 	bhi.w	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e680:	4a5e      	ldr	r2, [pc, #376]	@ (800e7fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800e682:	4293      	cmp	r3, r2
 800e684:	f000 8099 	beq.w	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e688:	4a5c      	ldr	r2, [pc, #368]	@ (800e7fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	f200 809e 	bhi.w	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e690:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e694:	f000 8091 	beq.w	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e698:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e69c:	f200 8096 	bhi.w	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e6a4:	f000 8089 	beq.w	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e6a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e6ac:	f200 808e 	bhi.w	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6b4:	d03e      	beq.n	800e734 <HAL_TIM_ConfigClockSource+0x124>
 800e6b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e6ba:	f200 8087 	bhi.w	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6c2:	f000 8086 	beq.w	800e7d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800e6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6ca:	d87f      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6cc:	2b70      	cmp	r3, #112	@ 0x70
 800e6ce:	d01a      	beq.n	800e706 <HAL_TIM_ConfigClockSource+0xf6>
 800e6d0:	2b70      	cmp	r3, #112	@ 0x70
 800e6d2:	d87b      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6d4:	2b60      	cmp	r3, #96	@ 0x60
 800e6d6:	d050      	beq.n	800e77a <HAL_TIM_ConfigClockSource+0x16a>
 800e6d8:	2b60      	cmp	r3, #96	@ 0x60
 800e6da:	d877      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6dc:	2b50      	cmp	r3, #80	@ 0x50
 800e6de:	d03c      	beq.n	800e75a <HAL_TIM_ConfigClockSource+0x14a>
 800e6e0:	2b50      	cmp	r3, #80	@ 0x50
 800e6e2:	d873      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6e4:	2b40      	cmp	r3, #64	@ 0x40
 800e6e6:	d058      	beq.n	800e79a <HAL_TIM_ConfigClockSource+0x18a>
 800e6e8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ea:	d86f      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6ec:	2b30      	cmp	r3, #48	@ 0x30
 800e6ee:	d064      	beq.n	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e6f0:	2b30      	cmp	r3, #48	@ 0x30
 800e6f2:	d86b      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6f4:	2b20      	cmp	r3, #32
 800e6f6:	d060      	beq.n	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e6f8:	2b20      	cmp	r3, #32
 800e6fa:	d867      	bhi.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d05c      	beq.n	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e700:	2b10      	cmp	r3, #16
 800e702:	d05a      	beq.n	800e7ba <HAL_TIM_ConfigClockSource+0x1aa>
 800e704:	e062      	b.n	800e7cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e716:	f000 fca1 	bl	800f05c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	609a      	str	r2, [r3, #8]
      break;
 800e732:	e04f      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e744:	f000 fc8a 	bl	800f05c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	689a      	ldr	r2, [r3, #8]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e756:	609a      	str	r2, [r3, #8]
      break;
 800e758:	e03c      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e766:	461a      	mov	r2, r3
 800e768:	f000 fbfa 	bl	800ef60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2150      	movs	r1, #80	@ 0x50
 800e772:	4618      	mov	r0, r3
 800e774:	f000 fc54 	bl	800f020 <TIM_ITRx_SetConfig>
      break;
 800e778:	e02c      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e786:	461a      	mov	r2, r3
 800e788:	f000 fc19 	bl	800efbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2160      	movs	r1, #96	@ 0x60
 800e792:	4618      	mov	r0, r3
 800e794:	f000 fc44 	bl	800f020 <TIM_ITRx_SetConfig>
      break;
 800e798:	e01c      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f000 fbda 	bl	800ef60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2140      	movs	r1, #64	@ 0x40
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f000 fc34 	bl	800f020 <TIM_ITRx_SetConfig>
      break;
 800e7b8:	e00c      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f000 fc2b 	bl	800f020 <TIM_ITRx_SetConfig>
      break;
 800e7ca:	e003      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	73fb      	strb	r3, [r7, #15]
      break;
 800e7d0:	e000      	b.n	800e7d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e7d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	ffceff88 	.word	0xffceff88
 800e7f4:	00100040 	.word	0x00100040
 800e7f8:	00100030 	.word	0x00100030
 800e7fc:	00100020 	.word	0x00100020

0800e800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e808:	bf00      	nop
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e81c:	bf00      	nop
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e830:	bf00      	nop
 800e832:	370c      	adds	r7, #12
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr

0800e83c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e844:	bf00      	nop
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a4a      	ldr	r2, [pc, #296]	@ (800e98c <TIM_Base_SetConfig+0x13c>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d013      	beq.n	800e890 <TIM_Base_SetConfig+0x40>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e86e:	d00f      	beq.n	800e890 <TIM_Base_SetConfig+0x40>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	4a47      	ldr	r2, [pc, #284]	@ (800e990 <TIM_Base_SetConfig+0x140>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d00b      	beq.n	800e890 <TIM_Base_SetConfig+0x40>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a46      	ldr	r2, [pc, #280]	@ (800e994 <TIM_Base_SetConfig+0x144>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d007      	beq.n	800e890 <TIM_Base_SetConfig+0x40>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4a45      	ldr	r2, [pc, #276]	@ (800e998 <TIM_Base_SetConfig+0x148>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d003      	beq.n	800e890 <TIM_Base_SetConfig+0x40>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4a44      	ldr	r2, [pc, #272]	@ (800e99c <TIM_Base_SetConfig+0x14c>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d108      	bne.n	800e8a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a39      	ldr	r2, [pc, #228]	@ (800e98c <TIM_Base_SetConfig+0x13c>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d027      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8b0:	d023      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4a36      	ldr	r2, [pc, #216]	@ (800e990 <TIM_Base_SetConfig+0x140>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d01f      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	4a35      	ldr	r2, [pc, #212]	@ (800e994 <TIM_Base_SetConfig+0x144>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d01b      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4a34      	ldr	r2, [pc, #208]	@ (800e998 <TIM_Base_SetConfig+0x148>)
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d017      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a33      	ldr	r2, [pc, #204]	@ (800e99c <TIM_Base_SetConfig+0x14c>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d013      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4a32      	ldr	r2, [pc, #200]	@ (800e9a0 <TIM_Base_SetConfig+0x150>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d00f      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4a31      	ldr	r2, [pc, #196]	@ (800e9a4 <TIM_Base_SetConfig+0x154>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d00b      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4a30      	ldr	r2, [pc, #192]	@ (800e9a8 <TIM_Base_SetConfig+0x158>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d007      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4a2f      	ldr	r2, [pc, #188]	@ (800e9ac <TIM_Base_SetConfig+0x15c>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d003      	beq.n	800e8fa <TIM_Base_SetConfig+0xaa>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4a2e      	ldr	r2, [pc, #184]	@ (800e9b0 <TIM_Base_SetConfig+0x160>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d108      	bne.n	800e90c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	4313      	orrs	r3, r2
 800e90a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	4313      	orrs	r3, r2
 800e918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	689a      	ldr	r2, [r3, #8]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a16      	ldr	r2, [pc, #88]	@ (800e98c <TIM_Base_SetConfig+0x13c>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d00f      	beq.n	800e958 <TIM_Base_SetConfig+0x108>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a18      	ldr	r2, [pc, #96]	@ (800e99c <TIM_Base_SetConfig+0x14c>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d00b      	beq.n	800e958 <TIM_Base_SetConfig+0x108>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a17      	ldr	r2, [pc, #92]	@ (800e9a0 <TIM_Base_SetConfig+0x150>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d007      	beq.n	800e958 <TIM_Base_SetConfig+0x108>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	4a16      	ldr	r2, [pc, #88]	@ (800e9a4 <TIM_Base_SetConfig+0x154>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d003      	beq.n	800e958 <TIM_Base_SetConfig+0x108>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4a15      	ldr	r2, [pc, #84]	@ (800e9a8 <TIM_Base_SetConfig+0x158>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d103      	bne.n	800e960 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	691a      	ldr	r2, [r3, #16]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d105      	bne.n	800e97e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	f023 0201 	bic.w	r2, r3, #1
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	611a      	str	r2, [r3, #16]
  }
}
 800e97e:	bf00      	nop
 800e980:	3714      	adds	r7, #20
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	40010000 	.word	0x40010000
 800e990:	40000400 	.word	0x40000400
 800e994:	40000800 	.word	0x40000800
 800e998:	40000c00 	.word	0x40000c00
 800e99c:	40010400 	.word	0x40010400
 800e9a0:	40014000 	.word	0x40014000
 800e9a4:	40014400 	.word	0x40014400
 800e9a8:	40014800 	.word	0x40014800
 800e9ac:	4000e000 	.word	0x4000e000
 800e9b0:	4000e400 	.word	0x4000e400

0800e9b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b087      	sub	sp, #28
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a1b      	ldr	r3, [r3, #32]
 800e9c8:	f023 0201 	bic.w	r2, r3, #1
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	699b      	ldr	r3, [r3, #24]
 800e9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e9dc:	68fa      	ldr	r2, [r7, #12]
 800e9de:	4b37      	ldr	r3, [pc, #220]	@ (800eabc <TIM_OC1_SetConfig+0x108>)
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f023 0303 	bic.w	r3, r3, #3
 800e9ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f023 0302 	bic.w	r3, r3, #2
 800e9fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4a2d      	ldr	r2, [pc, #180]	@ (800eac0 <TIM_OC1_SetConfig+0x10c>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d00f      	beq.n	800ea30 <TIM_OC1_SetConfig+0x7c>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	4a2c      	ldr	r2, [pc, #176]	@ (800eac4 <TIM_OC1_SetConfig+0x110>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d00b      	beq.n	800ea30 <TIM_OC1_SetConfig+0x7c>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4a2b      	ldr	r2, [pc, #172]	@ (800eac8 <TIM_OC1_SetConfig+0x114>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d007      	beq.n	800ea30 <TIM_OC1_SetConfig+0x7c>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4a2a      	ldr	r2, [pc, #168]	@ (800eacc <TIM_OC1_SetConfig+0x118>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d003      	beq.n	800ea30 <TIM_OC1_SetConfig+0x7c>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a29      	ldr	r2, [pc, #164]	@ (800ead0 <TIM_OC1_SetConfig+0x11c>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d10c      	bne.n	800ea4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	f023 0308 	bic.w	r3, r3, #8
 800ea36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f023 0304 	bic.w	r3, r3, #4
 800ea48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4a1c      	ldr	r2, [pc, #112]	@ (800eac0 <TIM_OC1_SetConfig+0x10c>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d00f      	beq.n	800ea72 <TIM_OC1_SetConfig+0xbe>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	4a1b      	ldr	r2, [pc, #108]	@ (800eac4 <TIM_OC1_SetConfig+0x110>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d00b      	beq.n	800ea72 <TIM_OC1_SetConfig+0xbe>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4a1a      	ldr	r2, [pc, #104]	@ (800eac8 <TIM_OC1_SetConfig+0x114>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d007      	beq.n	800ea72 <TIM_OC1_SetConfig+0xbe>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	4a19      	ldr	r2, [pc, #100]	@ (800eacc <TIM_OC1_SetConfig+0x118>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d003      	beq.n	800ea72 <TIM_OC1_SetConfig+0xbe>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4a18      	ldr	r2, [pc, #96]	@ (800ead0 <TIM_OC1_SetConfig+0x11c>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d111      	bne.n	800ea96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	695b      	ldr	r3, [r3, #20]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	693a      	ldr	r2, [r7, #16]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	693a      	ldr	r2, [r7, #16]
 800ea9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	685a      	ldr	r2, [r3, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	697a      	ldr	r2, [r7, #20]
 800eaae:	621a      	str	r2, [r3, #32]
}
 800eab0:	bf00      	nop
 800eab2:	371c      	adds	r7, #28
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr
 800eabc:	fffeff8f 	.word	0xfffeff8f
 800eac0:	40010000 	.word	0x40010000
 800eac4:	40010400 	.word	0x40010400
 800eac8:	40014000 	.word	0x40014000
 800eacc:	40014400 	.word	0x40014400
 800ead0:	40014800 	.word	0x40014800

0800ead4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b087      	sub	sp, #28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6a1b      	ldr	r3, [r3, #32]
 800eae8:	f023 0210 	bic.w	r2, r3, #16
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	4b34      	ldr	r3, [pc, #208]	@ (800ebd0 <TIM_OC2_SetConfig+0xfc>)
 800eb00:	4013      	ands	r3, r2
 800eb02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	021b      	lsls	r3, r3, #8
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f023 0320 	bic.w	r3, r3, #32
 800eb1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	011b      	lsls	r3, r3, #4
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4a29      	ldr	r2, [pc, #164]	@ (800ebd4 <TIM_OC2_SetConfig+0x100>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d003      	beq.n	800eb3c <TIM_OC2_SetConfig+0x68>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4a28      	ldr	r2, [pc, #160]	@ (800ebd8 <TIM_OC2_SetConfig+0x104>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d10d      	bne.n	800eb58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	011b      	lsls	r3, r3, #4
 800eb4a:	697a      	ldr	r2, [r7, #20]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a1e      	ldr	r2, [pc, #120]	@ (800ebd4 <TIM_OC2_SetConfig+0x100>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d00f      	beq.n	800eb80 <TIM_OC2_SetConfig+0xac>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a1d      	ldr	r2, [pc, #116]	@ (800ebd8 <TIM_OC2_SetConfig+0x104>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d00b      	beq.n	800eb80 <TIM_OC2_SetConfig+0xac>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a1c      	ldr	r2, [pc, #112]	@ (800ebdc <TIM_OC2_SetConfig+0x108>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d007      	beq.n	800eb80 <TIM_OC2_SetConfig+0xac>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a1b      	ldr	r2, [pc, #108]	@ (800ebe0 <TIM_OC2_SetConfig+0x10c>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d003      	beq.n	800eb80 <TIM_OC2_SetConfig+0xac>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a1a      	ldr	r2, [pc, #104]	@ (800ebe4 <TIM_OC2_SetConfig+0x110>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d113      	bne.n	800eba8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	695b      	ldr	r3, [r3, #20]
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	693a      	ldr	r2, [r7, #16]
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	4313      	orrs	r3, r2
 800eba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	621a      	str	r2, [r3, #32]
}
 800ebc2:	bf00      	nop
 800ebc4:	371c      	adds	r7, #28
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	feff8fff 	.word	0xfeff8fff
 800ebd4:	40010000 	.word	0x40010000
 800ebd8:	40010400 	.word	0x40010400
 800ebdc:	40014000 	.word	0x40014000
 800ebe0:	40014400 	.word	0x40014400
 800ebe4:	40014800 	.word	0x40014800

0800ebe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b087      	sub	sp, #28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a1b      	ldr	r3, [r3, #32]
 800ebf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	4b33      	ldr	r3, [pc, #204]	@ (800ece0 <TIM_OC3_SetConfig+0xf8>)
 800ec14:	4013      	ands	r3, r2
 800ec16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f023 0303 	bic.w	r3, r3, #3
 800ec1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	021b      	lsls	r3, r3, #8
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4a28      	ldr	r2, [pc, #160]	@ (800ece4 <TIM_OC3_SetConfig+0xfc>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d003      	beq.n	800ec4e <TIM_OC3_SetConfig+0x66>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	4a27      	ldr	r2, [pc, #156]	@ (800ece8 <TIM_OC3_SetConfig+0x100>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d10d      	bne.n	800ec6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	021b      	lsls	r3, r3, #8
 800ec5c:	697a      	ldr	r2, [r7, #20]
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a1d      	ldr	r2, [pc, #116]	@ (800ece4 <TIM_OC3_SetConfig+0xfc>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d00f      	beq.n	800ec92 <TIM_OC3_SetConfig+0xaa>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	4a1c      	ldr	r2, [pc, #112]	@ (800ece8 <TIM_OC3_SetConfig+0x100>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d00b      	beq.n	800ec92 <TIM_OC3_SetConfig+0xaa>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4a1b      	ldr	r2, [pc, #108]	@ (800ecec <TIM_OC3_SetConfig+0x104>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d007      	beq.n	800ec92 <TIM_OC3_SetConfig+0xaa>
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a1a      	ldr	r2, [pc, #104]	@ (800ecf0 <TIM_OC3_SetConfig+0x108>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d003      	beq.n	800ec92 <TIM_OC3_SetConfig+0xaa>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a19      	ldr	r2, [pc, #100]	@ (800ecf4 <TIM_OC3_SetConfig+0x10c>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d113      	bne.n	800ecba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	011b      	lsls	r3, r3, #4
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	011b      	lsls	r3, r3, #4
 800ecb4:	693a      	ldr	r2, [r7, #16]
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	685a      	ldr	r2, [r3, #4]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	621a      	str	r2, [r3, #32]
}
 800ecd4:	bf00      	nop
 800ecd6:	371c      	adds	r7, #28
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	fffeff8f 	.word	0xfffeff8f
 800ece4:	40010000 	.word	0x40010000
 800ece8:	40010400 	.word	0x40010400
 800ecec:	40014000 	.word	0x40014000
 800ecf0:	40014400 	.word	0x40014400
 800ecf4:	40014800 	.word	0x40014800

0800ecf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a1b      	ldr	r3, [r3, #32]
 800ed06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a1b      	ldr	r3, [r3, #32]
 800ed0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	69db      	ldr	r3, [r3, #28]
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	4b24      	ldr	r3, [pc, #144]	@ (800edb4 <TIM_OC4_SetConfig+0xbc>)
 800ed24:	4013      	ands	r3, r2
 800ed26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	021b      	lsls	r3, r3, #8
 800ed36:	68fa      	ldr	r2, [r7, #12]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	689b      	ldr	r3, [r3, #8]
 800ed48:	031b      	lsls	r3, r3, #12
 800ed4a:	693a      	ldr	r2, [r7, #16]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a19      	ldr	r2, [pc, #100]	@ (800edb8 <TIM_OC4_SetConfig+0xc0>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d00f      	beq.n	800ed78 <TIM_OC4_SetConfig+0x80>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4a18      	ldr	r2, [pc, #96]	@ (800edbc <TIM_OC4_SetConfig+0xc4>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d00b      	beq.n	800ed78 <TIM_OC4_SetConfig+0x80>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a17      	ldr	r2, [pc, #92]	@ (800edc0 <TIM_OC4_SetConfig+0xc8>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d007      	beq.n	800ed78 <TIM_OC4_SetConfig+0x80>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a16      	ldr	r2, [pc, #88]	@ (800edc4 <TIM_OC4_SetConfig+0xcc>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d003      	beq.n	800ed78 <TIM_OC4_SetConfig+0x80>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a15      	ldr	r2, [pc, #84]	@ (800edc8 <TIM_OC4_SetConfig+0xd0>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d109      	bne.n	800ed8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	019b      	lsls	r3, r3, #6
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	697a      	ldr	r2, [r7, #20]
 800ed90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	685a      	ldr	r2, [r3, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	693a      	ldr	r2, [r7, #16]
 800eda4:	621a      	str	r2, [r3, #32]
}
 800eda6:	bf00      	nop
 800eda8:	371c      	adds	r7, #28
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	feff8fff 	.word	0xfeff8fff
 800edb8:	40010000 	.word	0x40010000
 800edbc:	40010400 	.word	0x40010400
 800edc0:	40014000 	.word	0x40014000
 800edc4:	40014400 	.word	0x40014400
 800edc8:	40014800 	.word	0x40014800

0800edcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800edcc:	b480      	push	{r7}
 800edce:	b087      	sub	sp, #28
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a1b      	ldr	r3, [r3, #32]
 800edda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6a1b      	ldr	r3, [r3, #32]
 800ede0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edf4:	68fa      	ldr	r2, [r7, #12]
 800edf6:	4b21      	ldr	r3, [pc, #132]	@ (800ee7c <TIM_OC5_SetConfig+0xb0>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ee0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	041b      	lsls	r3, r3, #16
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a18      	ldr	r2, [pc, #96]	@ (800ee80 <TIM_OC5_SetConfig+0xb4>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d00f      	beq.n	800ee42 <TIM_OC5_SetConfig+0x76>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a17      	ldr	r2, [pc, #92]	@ (800ee84 <TIM_OC5_SetConfig+0xb8>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d00b      	beq.n	800ee42 <TIM_OC5_SetConfig+0x76>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a16      	ldr	r2, [pc, #88]	@ (800ee88 <TIM_OC5_SetConfig+0xbc>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d007      	beq.n	800ee42 <TIM_OC5_SetConfig+0x76>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4a15      	ldr	r2, [pc, #84]	@ (800ee8c <TIM_OC5_SetConfig+0xc0>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d003      	beq.n	800ee42 <TIM_OC5_SetConfig+0x76>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a14      	ldr	r2, [pc, #80]	@ (800ee90 <TIM_OC5_SetConfig+0xc4>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d109      	bne.n	800ee56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	021b      	lsls	r3, r3, #8
 800ee50:	697a      	ldr	r2, [r7, #20]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	697a      	ldr	r2, [r7, #20]
 800ee5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	685a      	ldr	r2, [r3, #4]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	693a      	ldr	r2, [r7, #16]
 800ee6e:	621a      	str	r2, [r3, #32]
}
 800ee70:	bf00      	nop
 800ee72:	371c      	adds	r7, #28
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	fffeff8f 	.word	0xfffeff8f
 800ee80:	40010000 	.word	0x40010000
 800ee84:	40010400 	.word	0x40010400
 800ee88:	40014000 	.word	0x40014000
 800ee8c:	40014400 	.word	0x40014400
 800ee90:	40014800 	.word	0x40014800

0800ee94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	4b22      	ldr	r3, [pc, #136]	@ (800ef48 <TIM_OC6_SetConfig+0xb4>)
 800eec0:	4013      	ands	r3, r2
 800eec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	021b      	lsls	r3, r3, #8
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	4313      	orrs	r3, r2
 800eece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	051b      	lsls	r3, r3, #20
 800eede:	693a      	ldr	r2, [r7, #16]
 800eee0:	4313      	orrs	r3, r2
 800eee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a19      	ldr	r2, [pc, #100]	@ (800ef4c <TIM_OC6_SetConfig+0xb8>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d00f      	beq.n	800ef0c <TIM_OC6_SetConfig+0x78>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4a18      	ldr	r2, [pc, #96]	@ (800ef50 <TIM_OC6_SetConfig+0xbc>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d00b      	beq.n	800ef0c <TIM_OC6_SetConfig+0x78>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4a17      	ldr	r2, [pc, #92]	@ (800ef54 <TIM_OC6_SetConfig+0xc0>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d007      	beq.n	800ef0c <TIM_OC6_SetConfig+0x78>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a16      	ldr	r2, [pc, #88]	@ (800ef58 <TIM_OC6_SetConfig+0xc4>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d003      	beq.n	800ef0c <TIM_OC6_SetConfig+0x78>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a15      	ldr	r2, [pc, #84]	@ (800ef5c <TIM_OC6_SetConfig+0xc8>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d109      	bne.n	800ef20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ef12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	695b      	ldr	r3, [r3, #20]
 800ef18:	029b      	lsls	r3, r3, #10
 800ef1a:	697a      	ldr	r2, [r7, #20]
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	685a      	ldr	r2, [r3, #4]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	621a      	str	r2, [r3, #32]
}
 800ef3a:	bf00      	nop
 800ef3c:	371c      	adds	r7, #28
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop
 800ef48:	feff8fff 	.word	0xfeff8fff
 800ef4c:	40010000 	.word	0x40010000
 800ef50:	40010400 	.word	0x40010400
 800ef54:	40014000 	.word	0x40014000
 800ef58:	40014400 	.word	0x40014400
 800ef5c:	40014800 	.word	0x40014800

0800ef60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b087      	sub	sp, #28
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	6a1b      	ldr	r3, [r3, #32]
 800ef70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6a1b      	ldr	r3, [r3, #32]
 800ef76:	f023 0201 	bic.w	r2, r3, #1
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	699b      	ldr	r3, [r3, #24]
 800ef82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	011b      	lsls	r3, r3, #4
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	f023 030a 	bic.w	r3, r3, #10
 800ef9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	693a      	ldr	r2, [r7, #16]
 800efaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	697a      	ldr	r2, [r7, #20]
 800efb0:	621a      	str	r2, [r3, #32]
}
 800efb2:	bf00      	nop
 800efb4:	371c      	adds	r7, #28
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efbe:	b480      	push	{r7}
 800efc0:	b087      	sub	sp, #28
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	60f8      	str	r0, [r7, #12]
 800efc6:	60b9      	str	r1, [r7, #8]
 800efc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6a1b      	ldr	r3, [r3, #32]
 800efd4:	f023 0210 	bic.w	r2, r3, #16
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	699b      	ldr	r3, [r3, #24]
 800efe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800efe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	031b      	lsls	r3, r3, #12
 800efee:	693a      	ldr	r2, [r7, #16]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800effa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	011b      	lsls	r3, r3, #4
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	4313      	orrs	r3, r2
 800f004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	621a      	str	r2, [r3, #32]
}
 800f012:	bf00      	nop
 800f014:	371c      	adds	r7, #28
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
	...

0800f020 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f020:	b480      	push	{r7}
 800f022:	b085      	sub	sp, #20
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	4b09      	ldr	r3, [pc, #36]	@ (800f058 <TIM_ITRx_SetConfig+0x38>)
 800f034:	4013      	ands	r3, r2
 800f036:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f038:	683a      	ldr	r2, [r7, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	4313      	orrs	r3, r2
 800f03e:	f043 0307 	orr.w	r3, r3, #7
 800f042:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	609a      	str	r2, [r3, #8]
}
 800f04a:	bf00      	nop
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	ffcfff8f 	.word	0xffcfff8f

0800f05c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	021a      	lsls	r2, r3, #8
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	431a      	orrs	r2, r3
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	4313      	orrs	r3, r2
 800f084:	697a      	ldr	r2, [r7, #20]
 800f086:	4313      	orrs	r3, r2
 800f088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	609a      	str	r2, [r3, #8]
}
 800f090:	bf00      	nop
 800f092:	371c      	adds	r7, #28
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d101      	bne.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	e077      	b.n	800f1a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2202      	movs	r2, #2
 800f0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a35      	ldr	r2, [pc, #212]	@ (800f1b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d004      	beq.n	800f0e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a34      	ldr	r2, [pc, #208]	@ (800f1b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d108      	bne.n	800f0fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f0ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f100:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	4313      	orrs	r3, r2
 800f10a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a25      	ldr	r2, [pc, #148]	@ (800f1b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d02c      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f126:	d027      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a22      	ldr	r2, [pc, #136]	@ (800f1b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d022      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a21      	ldr	r2, [pc, #132]	@ (800f1bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d01d      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a1f      	ldr	r2, [pc, #124]	@ (800f1c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d018      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a1a      	ldr	r2, [pc, #104]	@ (800f1b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d013      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a1b      	ldr	r2, [pc, #108]	@ (800f1c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d00e      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4a1a      	ldr	r2, [pc, #104]	@ (800f1c8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d009      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4a18      	ldr	r2, [pc, #96]	@ (800f1cc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d004      	beq.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	4a17      	ldr	r2, [pc, #92]	@ (800f1d0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d10c      	bne.n	800f192 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f17e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	68ba      	ldr	r2, [r7, #8]
 800f186:	4313      	orrs	r3, r2
 800f188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2201      	movs	r2, #1
 800f196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2200      	movs	r2, #0
 800f19e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3714      	adds	r7, #20
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	40010000 	.word	0x40010000
 800f1b4:	40010400 	.word	0x40010400
 800f1b8:	40000400 	.word	0x40000400
 800f1bc:	40000800 	.word	0x40000800
 800f1c0:	40000c00 	.word	0x40000c00
 800f1c4:	40001800 	.word	0x40001800
 800f1c8:	40014000 	.word	0x40014000
 800f1cc:	4000e000 	.word	0x4000e000
 800f1d0:	4000e400 	.word	0x4000e400

0800f1d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d101      	bne.n	800f1f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	e073      	b.n	800f2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	4313      	orrs	r3, r2
 800f204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	689b      	ldr	r3, [r3, #8]
 800f210:	4313      	orrs	r3, r2
 800f212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	4313      	orrs	r3, r2
 800f220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	691b      	ldr	r3, [r3, #16]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	4313      	orrs	r3, r2
 800f24a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f256:	4313      	orrs	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	699b      	ldr	r3, [r3, #24]
 800f264:	041b      	lsls	r3, r3, #16
 800f266:	4313      	orrs	r3, r2
 800f268:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	69db      	ldr	r3, [r3, #28]
 800f274:	4313      	orrs	r3, r2
 800f276:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a19      	ldr	r2, [pc, #100]	@ (800f2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d004      	beq.n	800f28c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a18      	ldr	r2, [pc, #96]	@ (800f2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d11c      	bne.n	800f2c6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f296:	051b      	lsls	r3, r3, #20
 800f298:	4313      	orrs	r3, r2
 800f29a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	6a1b      	ldr	r3, [r3, #32]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	40010000 	.word	0x40010000
 800f2e8:	40010400 	.word	0x40010400

0800f2ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f308:	bf00      	nop
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d101      	bne.n	800f33a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f336:	2301      	movs	r3, #1
 800f338:	e042      	b.n	800f3c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f340:	2b00      	cmp	r3, #0
 800f342:	d106      	bne.n	800f352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f7f3 f9d1 	bl	80026f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2224      	movs	r2, #36	@ 0x24
 800f356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f022 0201 	bic.w	r2, r2, #1
 800f368:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d002      	beq.n	800f378 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 ff22 	bl	80101bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f000 f8b3 	bl	800f4e4 <UART_SetConfig>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b01      	cmp	r3, #1
 800f382:	d101      	bne.n	800f388 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	e01b      	b.n	800f3c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	685a      	ldr	r2, [r3, #4]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	689a      	ldr	r2, [r3, #8]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f3a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f042 0201 	orr.w	r2, r2, #1
 800f3b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 ffa1 	bl	8010300 <UART_CheckIdleState>
 800f3be:	4603      	mov	r3, r0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08a      	sub	sp, #40	@ 0x28
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	603b      	str	r3, [r7, #0]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3de:	2b20      	cmp	r3, #32
 800f3e0:	d17b      	bne.n	800f4da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d002      	beq.n	800f3ee <HAL_UART_Transmit+0x26>
 800f3e8:	88fb      	ldrh	r3, [r7, #6]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e074      	b.n	800f4dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2221      	movs	r2, #33	@ 0x21
 800f3fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f402:	f7f3 fc07 	bl	8002c14 <HAL_GetTick>
 800f406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	88fa      	ldrh	r2, [r7, #6]
 800f40c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	88fa      	ldrh	r2, [r7, #6]
 800f414:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f420:	d108      	bne.n	800f434 <HAL_UART_Transmit+0x6c>
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d104      	bne.n	800f434 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	61bb      	str	r3, [r7, #24]
 800f432:	e003      	b.n	800f43c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f438:	2300      	movs	r3, #0
 800f43a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f43c:	e030      	b.n	800f4a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	2200      	movs	r2, #0
 800f446:	2180      	movs	r1, #128	@ 0x80
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f001 f803 	bl	8010454 <UART_WaitOnFlagUntilTimeout>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2220      	movs	r2, #32
 800f458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e03d      	b.n	800f4dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d10b      	bne.n	800f47e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f474:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	3302      	adds	r3, #2
 800f47a:	61bb      	str	r3, [r7, #24]
 800f47c:	e007      	b.n	800f48e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	781a      	ldrb	r2, [r3, #0]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	3301      	adds	r3, #1
 800f48c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f494:	b29b      	uxth	r3, r3
 800f496:	3b01      	subs	r3, #1
 800f498:	b29a      	uxth	r2, r3
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1c8      	bne.n	800f43e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2140      	movs	r1, #64	@ 0x40
 800f4b6:	68f8      	ldr	r0, [r7, #12]
 800f4b8:	f000 ffcc 	bl	8010454 <UART_WaitOnFlagUntilTimeout>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d005      	beq.n	800f4ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2220      	movs	r2, #32
 800f4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	e006      	b.n	800f4dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2220      	movs	r2, #32
 800f4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e000      	b.n	800f4dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f4da:	2302      	movs	r3, #2
  }
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3720      	adds	r7, #32
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4e8:	b092      	sub	sp, #72	@ 0x48
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	431a      	orrs	r2, r3
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	431a      	orrs	r2, r3
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	69db      	ldr	r3, [r3, #28]
 800f508:	4313      	orrs	r3, r2
 800f50a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	4bbe      	ldr	r3, [pc, #760]	@ (800f80c <UART_SetConfig+0x328>)
 800f514:	4013      	ands	r3, r2
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	6812      	ldr	r2, [r2, #0]
 800f51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f51c:	430b      	orrs	r3, r1
 800f51e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	68da      	ldr	r2, [r3, #12]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	430a      	orrs	r2, r1
 800f534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	699b      	ldr	r3, [r3, #24]
 800f53a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4ab3      	ldr	r2, [pc, #716]	@ (800f810 <UART_SetConfig+0x32c>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d004      	beq.n	800f550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	6a1b      	ldr	r3, [r3, #32]
 800f54a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f54c:	4313      	orrs	r3, r2
 800f54e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	689a      	ldr	r2, [r3, #8]
 800f556:	4baf      	ldr	r3, [pc, #700]	@ (800f814 <UART_SetConfig+0x330>)
 800f558:	4013      	ands	r3, r2
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	6812      	ldr	r2, [r2, #0]
 800f55e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f560:	430b      	orrs	r3, r1
 800f562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f56a:	f023 010f 	bic.w	r1, r3, #15
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	430a      	orrs	r2, r1
 800f578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4aa6      	ldr	r2, [pc, #664]	@ (800f818 <UART_SetConfig+0x334>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d177      	bne.n	800f674 <UART_SetConfig+0x190>
 800f584:	4ba5      	ldr	r3, [pc, #660]	@ (800f81c <UART_SetConfig+0x338>)
 800f586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f58c:	2b28      	cmp	r3, #40	@ 0x28
 800f58e:	d86d      	bhi.n	800f66c <UART_SetConfig+0x188>
 800f590:	a201      	add	r2, pc, #4	@ (adr r2, 800f598 <UART_SetConfig+0xb4>)
 800f592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f596:	bf00      	nop
 800f598:	0800f63d 	.word	0x0800f63d
 800f59c:	0800f66d 	.word	0x0800f66d
 800f5a0:	0800f66d 	.word	0x0800f66d
 800f5a4:	0800f66d 	.word	0x0800f66d
 800f5a8:	0800f66d 	.word	0x0800f66d
 800f5ac:	0800f66d 	.word	0x0800f66d
 800f5b0:	0800f66d 	.word	0x0800f66d
 800f5b4:	0800f66d 	.word	0x0800f66d
 800f5b8:	0800f645 	.word	0x0800f645
 800f5bc:	0800f66d 	.word	0x0800f66d
 800f5c0:	0800f66d 	.word	0x0800f66d
 800f5c4:	0800f66d 	.word	0x0800f66d
 800f5c8:	0800f66d 	.word	0x0800f66d
 800f5cc:	0800f66d 	.word	0x0800f66d
 800f5d0:	0800f66d 	.word	0x0800f66d
 800f5d4:	0800f66d 	.word	0x0800f66d
 800f5d8:	0800f64d 	.word	0x0800f64d
 800f5dc:	0800f66d 	.word	0x0800f66d
 800f5e0:	0800f66d 	.word	0x0800f66d
 800f5e4:	0800f66d 	.word	0x0800f66d
 800f5e8:	0800f66d 	.word	0x0800f66d
 800f5ec:	0800f66d 	.word	0x0800f66d
 800f5f0:	0800f66d 	.word	0x0800f66d
 800f5f4:	0800f66d 	.word	0x0800f66d
 800f5f8:	0800f655 	.word	0x0800f655
 800f5fc:	0800f66d 	.word	0x0800f66d
 800f600:	0800f66d 	.word	0x0800f66d
 800f604:	0800f66d 	.word	0x0800f66d
 800f608:	0800f66d 	.word	0x0800f66d
 800f60c:	0800f66d 	.word	0x0800f66d
 800f610:	0800f66d 	.word	0x0800f66d
 800f614:	0800f66d 	.word	0x0800f66d
 800f618:	0800f65d 	.word	0x0800f65d
 800f61c:	0800f66d 	.word	0x0800f66d
 800f620:	0800f66d 	.word	0x0800f66d
 800f624:	0800f66d 	.word	0x0800f66d
 800f628:	0800f66d 	.word	0x0800f66d
 800f62c:	0800f66d 	.word	0x0800f66d
 800f630:	0800f66d 	.word	0x0800f66d
 800f634:	0800f66d 	.word	0x0800f66d
 800f638:	0800f665 	.word	0x0800f665
 800f63c:	2301      	movs	r3, #1
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f642:	e326      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f644:	2304      	movs	r3, #4
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64a:	e322      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f64c:	2308      	movs	r3, #8
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f652:	e31e      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f654:	2310      	movs	r3, #16
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65a:	e31a      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f65c:	2320      	movs	r3, #32
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f662:	e316      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f664:	2340      	movs	r3, #64	@ 0x40
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f66a:	e312      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f66c:	2380      	movs	r3, #128	@ 0x80
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f672:	e30e      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	4a69      	ldr	r2, [pc, #420]	@ (800f820 <UART_SetConfig+0x33c>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d130      	bne.n	800f6e0 <UART_SetConfig+0x1fc>
 800f67e:	4b67      	ldr	r3, [pc, #412]	@ (800f81c <UART_SetConfig+0x338>)
 800f680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f682:	f003 0307 	and.w	r3, r3, #7
 800f686:	2b05      	cmp	r3, #5
 800f688:	d826      	bhi.n	800f6d8 <UART_SetConfig+0x1f4>
 800f68a:	a201      	add	r2, pc, #4	@ (adr r2, 800f690 <UART_SetConfig+0x1ac>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f6a9 	.word	0x0800f6a9
 800f694:	0800f6b1 	.word	0x0800f6b1
 800f698:	0800f6b9 	.word	0x0800f6b9
 800f69c:	0800f6c1 	.word	0x0800f6c1
 800f6a0:	0800f6c9 	.word	0x0800f6c9
 800f6a4:	0800f6d1 	.word	0x0800f6d1
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ae:	e2f0      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6b0:	2304      	movs	r3, #4
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b6:	e2ec      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6b8:	2308      	movs	r3, #8
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e2e8      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6c0:	2310      	movs	r3, #16
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c6:	e2e4      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6c8:	2320      	movs	r3, #32
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ce:	e2e0      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6d0:	2340      	movs	r3, #64	@ 0x40
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6d6:	e2dc      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6d8:	2380      	movs	r3, #128	@ 0x80
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6de:	e2d8      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a4f      	ldr	r2, [pc, #316]	@ (800f824 <UART_SetConfig+0x340>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d130      	bne.n	800f74c <UART_SetConfig+0x268>
 800f6ea:	4b4c      	ldr	r3, [pc, #304]	@ (800f81c <UART_SetConfig+0x338>)
 800f6ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6ee:	f003 0307 	and.w	r3, r3, #7
 800f6f2:	2b05      	cmp	r3, #5
 800f6f4:	d826      	bhi.n	800f744 <UART_SetConfig+0x260>
 800f6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f6fc <UART_SetConfig+0x218>)
 800f6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6fc:	0800f715 	.word	0x0800f715
 800f700:	0800f71d 	.word	0x0800f71d
 800f704:	0800f725 	.word	0x0800f725
 800f708:	0800f72d 	.word	0x0800f72d
 800f70c:	0800f735 	.word	0x0800f735
 800f710:	0800f73d 	.word	0x0800f73d
 800f714:	2300      	movs	r3, #0
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71a:	e2ba      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f71c:	2304      	movs	r3, #4
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f722:	e2b6      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f724:	2308      	movs	r3, #8
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72a:	e2b2      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f72c:	2310      	movs	r3, #16
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f732:	e2ae      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f734:	2320      	movs	r3, #32
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f73a:	e2aa      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f73c:	2340      	movs	r3, #64	@ 0x40
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f742:	e2a6      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f744:	2380      	movs	r3, #128	@ 0x80
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74a:	e2a2      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4a35      	ldr	r2, [pc, #212]	@ (800f828 <UART_SetConfig+0x344>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d130      	bne.n	800f7b8 <UART_SetConfig+0x2d4>
 800f756:	4b31      	ldr	r3, [pc, #196]	@ (800f81c <UART_SetConfig+0x338>)
 800f758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f75a:	f003 0307 	and.w	r3, r3, #7
 800f75e:	2b05      	cmp	r3, #5
 800f760:	d826      	bhi.n	800f7b0 <UART_SetConfig+0x2cc>
 800f762:	a201      	add	r2, pc, #4	@ (adr r2, 800f768 <UART_SetConfig+0x284>)
 800f764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f768:	0800f781 	.word	0x0800f781
 800f76c:	0800f789 	.word	0x0800f789
 800f770:	0800f791 	.word	0x0800f791
 800f774:	0800f799 	.word	0x0800f799
 800f778:	0800f7a1 	.word	0x0800f7a1
 800f77c:	0800f7a9 	.word	0x0800f7a9
 800f780:	2300      	movs	r3, #0
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f786:	e284      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f788:	2304      	movs	r3, #4
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78e:	e280      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f790:	2308      	movs	r3, #8
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f796:	e27c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f798:	2310      	movs	r3, #16
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79e:	e278      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f7a0:	2320      	movs	r3, #32
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a6:	e274      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f7a8:	2340      	movs	r3, #64	@ 0x40
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ae:	e270      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f7b0:	2380      	movs	r3, #128	@ 0x80
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7b6:	e26c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f82c <UART_SetConfig+0x348>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d142      	bne.n	800f848 <UART_SetConfig+0x364>
 800f7c2:	4b16      	ldr	r3, [pc, #88]	@ (800f81c <UART_SetConfig+0x338>)
 800f7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7c6:	f003 0307 	and.w	r3, r3, #7
 800f7ca:	2b05      	cmp	r3, #5
 800f7cc:	d838      	bhi.n	800f840 <UART_SetConfig+0x35c>
 800f7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f7d4 <UART_SetConfig+0x2f0>)
 800f7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d4:	0800f7ed 	.word	0x0800f7ed
 800f7d8:	0800f7f5 	.word	0x0800f7f5
 800f7dc:	0800f7fd 	.word	0x0800f7fd
 800f7e0:	0800f805 	.word	0x0800f805
 800f7e4:	0800f831 	.word	0x0800f831
 800f7e8:	0800f839 	.word	0x0800f839
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f2:	e24e      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f7f4:	2304      	movs	r3, #4
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fa:	e24a      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f7fc:	2308      	movs	r3, #8
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f802:	e246      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f804:	2310      	movs	r3, #16
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80a:	e242      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f80c:	cfff69f3 	.word	0xcfff69f3
 800f810:	58000c00 	.word	0x58000c00
 800f814:	11fff4ff 	.word	0x11fff4ff
 800f818:	40011000 	.word	0x40011000
 800f81c:	58024400 	.word	0x58024400
 800f820:	40004400 	.word	0x40004400
 800f824:	40004800 	.word	0x40004800
 800f828:	40004c00 	.word	0x40004c00
 800f82c:	40005000 	.word	0x40005000
 800f830:	2320      	movs	r3, #32
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f836:	e22c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f838:	2340      	movs	r3, #64	@ 0x40
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e228      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f840:	2380      	movs	r3, #128	@ 0x80
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e224      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4ab1      	ldr	r2, [pc, #708]	@ (800fb14 <UART_SetConfig+0x630>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d176      	bne.n	800f940 <UART_SetConfig+0x45c>
 800f852:	4bb1      	ldr	r3, [pc, #708]	@ (800fb18 <UART_SetConfig+0x634>)
 800f854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f85a:	2b28      	cmp	r3, #40	@ 0x28
 800f85c:	d86c      	bhi.n	800f938 <UART_SetConfig+0x454>
 800f85e:	a201      	add	r2, pc, #4	@ (adr r2, 800f864 <UART_SetConfig+0x380>)
 800f860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f864:	0800f909 	.word	0x0800f909
 800f868:	0800f939 	.word	0x0800f939
 800f86c:	0800f939 	.word	0x0800f939
 800f870:	0800f939 	.word	0x0800f939
 800f874:	0800f939 	.word	0x0800f939
 800f878:	0800f939 	.word	0x0800f939
 800f87c:	0800f939 	.word	0x0800f939
 800f880:	0800f939 	.word	0x0800f939
 800f884:	0800f911 	.word	0x0800f911
 800f888:	0800f939 	.word	0x0800f939
 800f88c:	0800f939 	.word	0x0800f939
 800f890:	0800f939 	.word	0x0800f939
 800f894:	0800f939 	.word	0x0800f939
 800f898:	0800f939 	.word	0x0800f939
 800f89c:	0800f939 	.word	0x0800f939
 800f8a0:	0800f939 	.word	0x0800f939
 800f8a4:	0800f919 	.word	0x0800f919
 800f8a8:	0800f939 	.word	0x0800f939
 800f8ac:	0800f939 	.word	0x0800f939
 800f8b0:	0800f939 	.word	0x0800f939
 800f8b4:	0800f939 	.word	0x0800f939
 800f8b8:	0800f939 	.word	0x0800f939
 800f8bc:	0800f939 	.word	0x0800f939
 800f8c0:	0800f939 	.word	0x0800f939
 800f8c4:	0800f921 	.word	0x0800f921
 800f8c8:	0800f939 	.word	0x0800f939
 800f8cc:	0800f939 	.word	0x0800f939
 800f8d0:	0800f939 	.word	0x0800f939
 800f8d4:	0800f939 	.word	0x0800f939
 800f8d8:	0800f939 	.word	0x0800f939
 800f8dc:	0800f939 	.word	0x0800f939
 800f8e0:	0800f939 	.word	0x0800f939
 800f8e4:	0800f929 	.word	0x0800f929
 800f8e8:	0800f939 	.word	0x0800f939
 800f8ec:	0800f939 	.word	0x0800f939
 800f8f0:	0800f939 	.word	0x0800f939
 800f8f4:	0800f939 	.word	0x0800f939
 800f8f8:	0800f939 	.word	0x0800f939
 800f8fc:	0800f939 	.word	0x0800f939
 800f900:	0800f939 	.word	0x0800f939
 800f904:	0800f931 	.word	0x0800f931
 800f908:	2301      	movs	r3, #1
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90e:	e1c0      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f910:	2304      	movs	r3, #4
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f916:	e1bc      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f918:	2308      	movs	r3, #8
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91e:	e1b8      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f920:	2310      	movs	r3, #16
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f926:	e1b4      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f928:	2320      	movs	r3, #32
 800f92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f92e:	e1b0      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f930:	2340      	movs	r3, #64	@ 0x40
 800f932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f936:	e1ac      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f938:	2380      	movs	r3, #128	@ 0x80
 800f93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f93e:	e1a8      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a75      	ldr	r2, [pc, #468]	@ (800fb1c <UART_SetConfig+0x638>)
 800f946:	4293      	cmp	r3, r2
 800f948:	d130      	bne.n	800f9ac <UART_SetConfig+0x4c8>
 800f94a:	4b73      	ldr	r3, [pc, #460]	@ (800fb18 <UART_SetConfig+0x634>)
 800f94c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f94e:	f003 0307 	and.w	r3, r3, #7
 800f952:	2b05      	cmp	r3, #5
 800f954:	d826      	bhi.n	800f9a4 <UART_SetConfig+0x4c0>
 800f956:	a201      	add	r2, pc, #4	@ (adr r2, 800f95c <UART_SetConfig+0x478>)
 800f958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95c:	0800f975 	.word	0x0800f975
 800f960:	0800f97d 	.word	0x0800f97d
 800f964:	0800f985 	.word	0x0800f985
 800f968:	0800f98d 	.word	0x0800f98d
 800f96c:	0800f995 	.word	0x0800f995
 800f970:	0800f99d 	.word	0x0800f99d
 800f974:	2300      	movs	r3, #0
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97a:	e18a      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f97c:	2304      	movs	r3, #4
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f982:	e186      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f984:	2308      	movs	r3, #8
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98a:	e182      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f98c:	2310      	movs	r3, #16
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f992:	e17e      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f994:	2320      	movs	r3, #32
 800f996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f99a:	e17a      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f99c:	2340      	movs	r3, #64	@ 0x40
 800f99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a2:	e176      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f9a4:	2380      	movs	r3, #128	@ 0x80
 800f9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9aa:	e172      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a5b      	ldr	r2, [pc, #364]	@ (800fb20 <UART_SetConfig+0x63c>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d130      	bne.n	800fa18 <UART_SetConfig+0x534>
 800f9b6:	4b58      	ldr	r3, [pc, #352]	@ (800fb18 <UART_SetConfig+0x634>)
 800f9b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9ba:	f003 0307 	and.w	r3, r3, #7
 800f9be:	2b05      	cmp	r3, #5
 800f9c0:	d826      	bhi.n	800fa10 <UART_SetConfig+0x52c>
 800f9c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9c8 <UART_SetConfig+0x4e4>)
 800f9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c8:	0800f9e1 	.word	0x0800f9e1
 800f9cc:	0800f9e9 	.word	0x0800f9e9
 800f9d0:	0800f9f1 	.word	0x0800f9f1
 800f9d4:	0800f9f9 	.word	0x0800f9f9
 800f9d8:	0800fa01 	.word	0x0800fa01
 800f9dc:	0800fa09 	.word	0x0800fa09
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e154      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ee:	e150      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f9f0:	2308      	movs	r3, #8
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f6:	e14c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800f9f8:	2310      	movs	r3, #16
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fe:	e148      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fa00:	2320      	movs	r3, #32
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e144      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fa08:	2340      	movs	r3, #64	@ 0x40
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0e:	e140      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fa10:	2380      	movs	r3, #128	@ 0x80
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa16:	e13c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a41      	ldr	r2, [pc, #260]	@ (800fb24 <UART_SetConfig+0x640>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	f040 8082 	bne.w	800fb28 <UART_SetConfig+0x644>
 800fa24:	4b3c      	ldr	r3, [pc, #240]	@ (800fb18 <UART_SetConfig+0x634>)
 800fa26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa2c:	2b28      	cmp	r3, #40	@ 0x28
 800fa2e:	d86d      	bhi.n	800fb0c <UART_SetConfig+0x628>
 800fa30:	a201      	add	r2, pc, #4	@ (adr r2, 800fa38 <UART_SetConfig+0x554>)
 800fa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa36:	bf00      	nop
 800fa38:	0800fadd 	.word	0x0800fadd
 800fa3c:	0800fb0d 	.word	0x0800fb0d
 800fa40:	0800fb0d 	.word	0x0800fb0d
 800fa44:	0800fb0d 	.word	0x0800fb0d
 800fa48:	0800fb0d 	.word	0x0800fb0d
 800fa4c:	0800fb0d 	.word	0x0800fb0d
 800fa50:	0800fb0d 	.word	0x0800fb0d
 800fa54:	0800fb0d 	.word	0x0800fb0d
 800fa58:	0800fae5 	.word	0x0800fae5
 800fa5c:	0800fb0d 	.word	0x0800fb0d
 800fa60:	0800fb0d 	.word	0x0800fb0d
 800fa64:	0800fb0d 	.word	0x0800fb0d
 800fa68:	0800fb0d 	.word	0x0800fb0d
 800fa6c:	0800fb0d 	.word	0x0800fb0d
 800fa70:	0800fb0d 	.word	0x0800fb0d
 800fa74:	0800fb0d 	.word	0x0800fb0d
 800fa78:	0800faed 	.word	0x0800faed
 800fa7c:	0800fb0d 	.word	0x0800fb0d
 800fa80:	0800fb0d 	.word	0x0800fb0d
 800fa84:	0800fb0d 	.word	0x0800fb0d
 800fa88:	0800fb0d 	.word	0x0800fb0d
 800fa8c:	0800fb0d 	.word	0x0800fb0d
 800fa90:	0800fb0d 	.word	0x0800fb0d
 800fa94:	0800fb0d 	.word	0x0800fb0d
 800fa98:	0800faf5 	.word	0x0800faf5
 800fa9c:	0800fb0d 	.word	0x0800fb0d
 800faa0:	0800fb0d 	.word	0x0800fb0d
 800faa4:	0800fb0d 	.word	0x0800fb0d
 800faa8:	0800fb0d 	.word	0x0800fb0d
 800faac:	0800fb0d 	.word	0x0800fb0d
 800fab0:	0800fb0d 	.word	0x0800fb0d
 800fab4:	0800fb0d 	.word	0x0800fb0d
 800fab8:	0800fafd 	.word	0x0800fafd
 800fabc:	0800fb0d 	.word	0x0800fb0d
 800fac0:	0800fb0d 	.word	0x0800fb0d
 800fac4:	0800fb0d 	.word	0x0800fb0d
 800fac8:	0800fb0d 	.word	0x0800fb0d
 800facc:	0800fb0d 	.word	0x0800fb0d
 800fad0:	0800fb0d 	.word	0x0800fb0d
 800fad4:	0800fb0d 	.word	0x0800fb0d
 800fad8:	0800fb05 	.word	0x0800fb05
 800fadc:	2301      	movs	r3, #1
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae2:	e0d6      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fae4:	2304      	movs	r3, #4
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faea:	e0d2      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800faec:	2308      	movs	r3, #8
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf2:	e0ce      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800faf4:	2310      	movs	r3, #16
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafa:	e0ca      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fafc:	2320      	movs	r3, #32
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb02:	e0c6      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fb04:	2340      	movs	r3, #64	@ 0x40
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0a:	e0c2      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fb0c:	2380      	movs	r3, #128	@ 0x80
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb12:	e0be      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fb14:	40011400 	.word	0x40011400
 800fb18:	58024400 	.word	0x58024400
 800fb1c:	40007800 	.word	0x40007800
 800fb20:	40007c00 	.word	0x40007c00
 800fb24:	40011800 	.word	0x40011800
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4aad      	ldr	r2, [pc, #692]	@ (800fde4 <UART_SetConfig+0x900>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d176      	bne.n	800fc20 <UART_SetConfig+0x73c>
 800fb32:	4bad      	ldr	r3, [pc, #692]	@ (800fde8 <UART_SetConfig+0x904>)
 800fb34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb3a:	2b28      	cmp	r3, #40	@ 0x28
 800fb3c:	d86c      	bhi.n	800fc18 <UART_SetConfig+0x734>
 800fb3e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb44 <UART_SetConfig+0x660>)
 800fb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb44:	0800fbe9 	.word	0x0800fbe9
 800fb48:	0800fc19 	.word	0x0800fc19
 800fb4c:	0800fc19 	.word	0x0800fc19
 800fb50:	0800fc19 	.word	0x0800fc19
 800fb54:	0800fc19 	.word	0x0800fc19
 800fb58:	0800fc19 	.word	0x0800fc19
 800fb5c:	0800fc19 	.word	0x0800fc19
 800fb60:	0800fc19 	.word	0x0800fc19
 800fb64:	0800fbf1 	.word	0x0800fbf1
 800fb68:	0800fc19 	.word	0x0800fc19
 800fb6c:	0800fc19 	.word	0x0800fc19
 800fb70:	0800fc19 	.word	0x0800fc19
 800fb74:	0800fc19 	.word	0x0800fc19
 800fb78:	0800fc19 	.word	0x0800fc19
 800fb7c:	0800fc19 	.word	0x0800fc19
 800fb80:	0800fc19 	.word	0x0800fc19
 800fb84:	0800fbf9 	.word	0x0800fbf9
 800fb88:	0800fc19 	.word	0x0800fc19
 800fb8c:	0800fc19 	.word	0x0800fc19
 800fb90:	0800fc19 	.word	0x0800fc19
 800fb94:	0800fc19 	.word	0x0800fc19
 800fb98:	0800fc19 	.word	0x0800fc19
 800fb9c:	0800fc19 	.word	0x0800fc19
 800fba0:	0800fc19 	.word	0x0800fc19
 800fba4:	0800fc01 	.word	0x0800fc01
 800fba8:	0800fc19 	.word	0x0800fc19
 800fbac:	0800fc19 	.word	0x0800fc19
 800fbb0:	0800fc19 	.word	0x0800fc19
 800fbb4:	0800fc19 	.word	0x0800fc19
 800fbb8:	0800fc19 	.word	0x0800fc19
 800fbbc:	0800fc19 	.word	0x0800fc19
 800fbc0:	0800fc19 	.word	0x0800fc19
 800fbc4:	0800fc09 	.word	0x0800fc09
 800fbc8:	0800fc19 	.word	0x0800fc19
 800fbcc:	0800fc19 	.word	0x0800fc19
 800fbd0:	0800fc19 	.word	0x0800fc19
 800fbd4:	0800fc19 	.word	0x0800fc19
 800fbd8:	0800fc19 	.word	0x0800fc19
 800fbdc:	0800fc19 	.word	0x0800fc19
 800fbe0:	0800fc19 	.word	0x0800fc19
 800fbe4:	0800fc11 	.word	0x0800fc11
 800fbe8:	2301      	movs	r3, #1
 800fbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbee:	e050      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fbf0:	2304      	movs	r3, #4
 800fbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbf6:	e04c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fbf8:	2308      	movs	r3, #8
 800fbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbfe:	e048      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc00:	2310      	movs	r3, #16
 800fc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc06:	e044      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc08:	2320      	movs	r3, #32
 800fc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc0e:	e040      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc10:	2340      	movs	r3, #64	@ 0x40
 800fc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc16:	e03c      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc18:	2380      	movs	r3, #128	@ 0x80
 800fc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc1e:	e038      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a71      	ldr	r2, [pc, #452]	@ (800fdec <UART_SetConfig+0x908>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d130      	bne.n	800fc8c <UART_SetConfig+0x7a8>
 800fc2a:	4b6f      	ldr	r3, [pc, #444]	@ (800fde8 <UART_SetConfig+0x904>)
 800fc2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc2e:	f003 0307 	and.w	r3, r3, #7
 800fc32:	2b05      	cmp	r3, #5
 800fc34:	d826      	bhi.n	800fc84 <UART_SetConfig+0x7a0>
 800fc36:	a201      	add	r2, pc, #4	@ (adr r2, 800fc3c <UART_SetConfig+0x758>)
 800fc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3c:	0800fc55 	.word	0x0800fc55
 800fc40:	0800fc5d 	.word	0x0800fc5d
 800fc44:	0800fc65 	.word	0x0800fc65
 800fc48:	0800fc6d 	.word	0x0800fc6d
 800fc4c:	0800fc75 	.word	0x0800fc75
 800fc50:	0800fc7d 	.word	0x0800fc7d
 800fc54:	2302      	movs	r3, #2
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5a:	e01a      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc5c:	2304      	movs	r3, #4
 800fc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc62:	e016      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc64:	2308      	movs	r3, #8
 800fc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc6a:	e012      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc6c:	2310      	movs	r3, #16
 800fc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc72:	e00e      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc74:	2320      	movs	r3, #32
 800fc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc7a:	e00a      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc7c:	2340      	movs	r3, #64	@ 0x40
 800fc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc82:	e006      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc84:	2380      	movs	r3, #128	@ 0x80
 800fc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc8a:	e002      	b.n	800fc92 <UART_SetConfig+0x7ae>
 800fc8c:	2380      	movs	r3, #128	@ 0x80
 800fc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a55      	ldr	r2, [pc, #340]	@ (800fdec <UART_SetConfig+0x908>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	f040 80f8 	bne.w	800fe8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fca2:	2b20      	cmp	r3, #32
 800fca4:	dc46      	bgt.n	800fd34 <UART_SetConfig+0x850>
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	db75      	blt.n	800fd96 <UART_SetConfig+0x8b2>
 800fcaa:	3b02      	subs	r3, #2
 800fcac:	2b1e      	cmp	r3, #30
 800fcae:	d872      	bhi.n	800fd96 <UART_SetConfig+0x8b2>
 800fcb0:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb8 <UART_SetConfig+0x7d4>)
 800fcb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb6:	bf00      	nop
 800fcb8:	0800fd3b 	.word	0x0800fd3b
 800fcbc:	0800fd97 	.word	0x0800fd97
 800fcc0:	0800fd43 	.word	0x0800fd43
 800fcc4:	0800fd97 	.word	0x0800fd97
 800fcc8:	0800fd97 	.word	0x0800fd97
 800fccc:	0800fd97 	.word	0x0800fd97
 800fcd0:	0800fd53 	.word	0x0800fd53
 800fcd4:	0800fd97 	.word	0x0800fd97
 800fcd8:	0800fd97 	.word	0x0800fd97
 800fcdc:	0800fd97 	.word	0x0800fd97
 800fce0:	0800fd97 	.word	0x0800fd97
 800fce4:	0800fd97 	.word	0x0800fd97
 800fce8:	0800fd97 	.word	0x0800fd97
 800fcec:	0800fd97 	.word	0x0800fd97
 800fcf0:	0800fd63 	.word	0x0800fd63
 800fcf4:	0800fd97 	.word	0x0800fd97
 800fcf8:	0800fd97 	.word	0x0800fd97
 800fcfc:	0800fd97 	.word	0x0800fd97
 800fd00:	0800fd97 	.word	0x0800fd97
 800fd04:	0800fd97 	.word	0x0800fd97
 800fd08:	0800fd97 	.word	0x0800fd97
 800fd0c:	0800fd97 	.word	0x0800fd97
 800fd10:	0800fd97 	.word	0x0800fd97
 800fd14:	0800fd97 	.word	0x0800fd97
 800fd18:	0800fd97 	.word	0x0800fd97
 800fd1c:	0800fd97 	.word	0x0800fd97
 800fd20:	0800fd97 	.word	0x0800fd97
 800fd24:	0800fd97 	.word	0x0800fd97
 800fd28:	0800fd97 	.word	0x0800fd97
 800fd2c:	0800fd97 	.word	0x0800fd97
 800fd30:	0800fd89 	.word	0x0800fd89
 800fd34:	2b40      	cmp	r3, #64	@ 0x40
 800fd36:	d02a      	beq.n	800fd8e <UART_SetConfig+0x8aa>
 800fd38:	e02d      	b.n	800fd96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fd3a:	f7fb ff37 	bl	800bbac <HAL_RCCEx_GetD3PCLK1Freq>
 800fd3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd40:	e02f      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fb ff46 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd50:	e027      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd52:	f107 0318 	add.w	r3, r7, #24
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fc f892 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd60:	e01f      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd62:	4b21      	ldr	r3, [pc, #132]	@ (800fde8 <UART_SetConfig+0x904>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f003 0320 	and.w	r3, r3, #32
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd6e:	4b1e      	ldr	r3, [pc, #120]	@ (800fde8 <UART_SetConfig+0x904>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	08db      	lsrs	r3, r3, #3
 800fd74:	f003 0303 	and.w	r3, r3, #3
 800fd78:	4a1d      	ldr	r2, [pc, #116]	@ (800fdf0 <UART_SetConfig+0x90c>)
 800fd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd80:	e00f      	b.n	800fda2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd82:	4b1b      	ldr	r3, [pc, #108]	@ (800fdf0 <UART_SetConfig+0x90c>)
 800fd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd86:	e00c      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd88:	4b1a      	ldr	r3, [pc, #104]	@ (800fdf4 <UART_SetConfig+0x910>)
 800fd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd8c:	e009      	b.n	800fda2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd94:	e005      	b.n	800fda2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd96:	2300      	movs	r3, #0
 800fd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fda0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fda2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f000 81ee 	beq.w	8010186 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdae:	4a12      	ldr	r2, [pc, #72]	@ (800fdf8 <UART_SetConfig+0x914>)
 800fdb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdbc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	005b      	lsls	r3, r3, #1
 800fdc6:	4413      	add	r3, r2
 800fdc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d305      	bcc.n	800fdda <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fdd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d910      	bls.n	800fdfc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fdda:	2301      	movs	r3, #1
 800fddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fde0:	e1d1      	b.n	8010186 <UART_SetConfig+0xca2>
 800fde2:	bf00      	nop
 800fde4:	40011c00 	.word	0x40011c00
 800fde8:	58024400 	.word	0x58024400
 800fdec:	58000c00 	.word	0x58000c00
 800fdf0:	03d09000 	.word	0x03d09000
 800fdf4:	003d0900 	.word	0x003d0900
 800fdf8:	0801254c 	.word	0x0801254c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdfe:	2200      	movs	r2, #0
 800fe00:	60bb      	str	r3, [r7, #8]
 800fe02:	60fa      	str	r2, [r7, #12]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe08:	4ac0      	ldr	r2, [pc, #768]	@ (801010c <UART_SetConfig+0xc28>)
 800fe0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	2200      	movs	r2, #0
 800fe12:	603b      	str	r3, [r7, #0]
 800fe14:	607a      	str	r2, [r7, #4]
 800fe16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fe1e:	f7f0 facf 	bl	80003c0 <__aeabi_uldivmod>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	4610      	mov	r0, r2
 800fe28:	4619      	mov	r1, r3
 800fe2a:	f04f 0200 	mov.w	r2, #0
 800fe2e:	f04f 0300 	mov.w	r3, #0
 800fe32:	020b      	lsls	r3, r1, #8
 800fe34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe38:	0202      	lsls	r2, r0, #8
 800fe3a:	6979      	ldr	r1, [r7, #20]
 800fe3c:	6849      	ldr	r1, [r1, #4]
 800fe3e:	0849      	lsrs	r1, r1, #1
 800fe40:	2000      	movs	r0, #0
 800fe42:	460c      	mov	r4, r1
 800fe44:	4605      	mov	r5, r0
 800fe46:	eb12 0804 	adds.w	r8, r2, r4
 800fe4a:	eb43 0905 	adc.w	r9, r3, r5
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	469a      	mov	sl, r3
 800fe56:	4693      	mov	fp, r2
 800fe58:	4652      	mov	r2, sl
 800fe5a:	465b      	mov	r3, fp
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	4649      	mov	r1, r9
 800fe60:	f7f0 faae 	bl	80003c0 <__aeabi_uldivmod>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	4613      	mov	r3, r2
 800fe6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe72:	d308      	bcc.n	800fe86 <UART_SetConfig+0x9a2>
 800fe74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe7a:	d204      	bcs.n	800fe86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe82:	60da      	str	r2, [r3, #12]
 800fe84:	e17f      	b.n	8010186 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fe86:	2301      	movs	r3, #1
 800fe88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe8c:	e17b      	b.n	8010186 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	69db      	ldr	r3, [r3, #28]
 800fe92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe96:	f040 80bd 	bne.w	8010014 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fe9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe9e:	2b20      	cmp	r3, #32
 800fea0:	dc48      	bgt.n	800ff34 <UART_SetConfig+0xa50>
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	db7b      	blt.n	800ff9e <UART_SetConfig+0xaba>
 800fea6:	2b20      	cmp	r3, #32
 800fea8:	d879      	bhi.n	800ff9e <UART_SetConfig+0xaba>
 800feaa:	a201      	add	r2, pc, #4	@ (adr r2, 800feb0 <UART_SetConfig+0x9cc>)
 800feac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb0:	0800ff3b 	.word	0x0800ff3b
 800feb4:	0800ff43 	.word	0x0800ff43
 800feb8:	0800ff9f 	.word	0x0800ff9f
 800febc:	0800ff9f 	.word	0x0800ff9f
 800fec0:	0800ff4b 	.word	0x0800ff4b
 800fec4:	0800ff9f 	.word	0x0800ff9f
 800fec8:	0800ff9f 	.word	0x0800ff9f
 800fecc:	0800ff9f 	.word	0x0800ff9f
 800fed0:	0800ff5b 	.word	0x0800ff5b
 800fed4:	0800ff9f 	.word	0x0800ff9f
 800fed8:	0800ff9f 	.word	0x0800ff9f
 800fedc:	0800ff9f 	.word	0x0800ff9f
 800fee0:	0800ff9f 	.word	0x0800ff9f
 800fee4:	0800ff9f 	.word	0x0800ff9f
 800fee8:	0800ff9f 	.word	0x0800ff9f
 800feec:	0800ff9f 	.word	0x0800ff9f
 800fef0:	0800ff6b 	.word	0x0800ff6b
 800fef4:	0800ff9f 	.word	0x0800ff9f
 800fef8:	0800ff9f 	.word	0x0800ff9f
 800fefc:	0800ff9f 	.word	0x0800ff9f
 800ff00:	0800ff9f 	.word	0x0800ff9f
 800ff04:	0800ff9f 	.word	0x0800ff9f
 800ff08:	0800ff9f 	.word	0x0800ff9f
 800ff0c:	0800ff9f 	.word	0x0800ff9f
 800ff10:	0800ff9f 	.word	0x0800ff9f
 800ff14:	0800ff9f 	.word	0x0800ff9f
 800ff18:	0800ff9f 	.word	0x0800ff9f
 800ff1c:	0800ff9f 	.word	0x0800ff9f
 800ff20:	0800ff9f 	.word	0x0800ff9f
 800ff24:	0800ff9f 	.word	0x0800ff9f
 800ff28:	0800ff9f 	.word	0x0800ff9f
 800ff2c:	0800ff9f 	.word	0x0800ff9f
 800ff30:	0800ff91 	.word	0x0800ff91
 800ff34:	2b40      	cmp	r3, #64	@ 0x40
 800ff36:	d02e      	beq.n	800ff96 <UART_SetConfig+0xab2>
 800ff38:	e031      	b.n	800ff9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff3a:	f7f9 ff99 	bl	8009e70 <HAL_RCC_GetPCLK1Freq>
 800ff3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff40:	e033      	b.n	800ffaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff42:	f7f9 ffab 	bl	8009e9c <HAL_RCC_GetPCLK2Freq>
 800ff46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff48:	e02f      	b.n	800ffaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fb fe42 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff58:	e027      	b.n	800ffaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff5a:	f107 0318 	add.w	r3, r7, #24
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb ff8e 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff68:	e01f      	b.n	800ffaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff6a:	4b69      	ldr	r3, [pc, #420]	@ (8010110 <UART_SetConfig+0xc2c>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f003 0320 	and.w	r3, r3, #32
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d009      	beq.n	800ff8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff76:	4b66      	ldr	r3, [pc, #408]	@ (8010110 <UART_SetConfig+0xc2c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	08db      	lsrs	r3, r3, #3
 800ff7c:	f003 0303 	and.w	r3, r3, #3
 800ff80:	4a64      	ldr	r2, [pc, #400]	@ (8010114 <UART_SetConfig+0xc30>)
 800ff82:	fa22 f303 	lsr.w	r3, r2, r3
 800ff86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff88:	e00f      	b.n	800ffaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ff8a:	4b62      	ldr	r3, [pc, #392]	@ (8010114 <UART_SetConfig+0xc30>)
 800ff8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff8e:	e00c      	b.n	800ffaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff90:	4b61      	ldr	r3, [pc, #388]	@ (8010118 <UART_SetConfig+0xc34>)
 800ff92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff94:	e009      	b.n	800ffaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff9c:	e005      	b.n	800ffaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ffa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ffaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	f000 80ea 	beq.w	8010186 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb6:	4a55      	ldr	r2, [pc, #340]	@ (801010c <UART_SetConfig+0xc28>)
 800ffb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffc4:	005a      	lsls	r2, r3, #1
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	085b      	lsrs	r3, r3, #1
 800ffcc:	441a      	add	r2, r3
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffda:	2b0f      	cmp	r3, #15
 800ffdc:	d916      	bls.n	801000c <UART_SetConfig+0xb28>
 800ffde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ffe4:	d212      	bcs.n	801000c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	f023 030f 	bic.w	r3, r3, #15
 800ffee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff2:	085b      	lsrs	r3, r3, #1
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	f003 0307 	and.w	r3, r3, #7
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fffe:	4313      	orrs	r3, r2
 8010000:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010008:	60da      	str	r2, [r3, #12]
 801000a:	e0bc      	b.n	8010186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010012:	e0b8      	b.n	8010186 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010014:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010018:	2b20      	cmp	r3, #32
 801001a:	dc4b      	bgt.n	80100b4 <UART_SetConfig+0xbd0>
 801001c:	2b00      	cmp	r3, #0
 801001e:	f2c0 8087 	blt.w	8010130 <UART_SetConfig+0xc4c>
 8010022:	2b20      	cmp	r3, #32
 8010024:	f200 8084 	bhi.w	8010130 <UART_SetConfig+0xc4c>
 8010028:	a201      	add	r2, pc, #4	@ (adr r2, 8010030 <UART_SetConfig+0xb4c>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	080100bb 	.word	0x080100bb
 8010034:	080100c3 	.word	0x080100c3
 8010038:	08010131 	.word	0x08010131
 801003c:	08010131 	.word	0x08010131
 8010040:	080100cb 	.word	0x080100cb
 8010044:	08010131 	.word	0x08010131
 8010048:	08010131 	.word	0x08010131
 801004c:	08010131 	.word	0x08010131
 8010050:	080100db 	.word	0x080100db
 8010054:	08010131 	.word	0x08010131
 8010058:	08010131 	.word	0x08010131
 801005c:	08010131 	.word	0x08010131
 8010060:	08010131 	.word	0x08010131
 8010064:	08010131 	.word	0x08010131
 8010068:	08010131 	.word	0x08010131
 801006c:	08010131 	.word	0x08010131
 8010070:	080100eb 	.word	0x080100eb
 8010074:	08010131 	.word	0x08010131
 8010078:	08010131 	.word	0x08010131
 801007c:	08010131 	.word	0x08010131
 8010080:	08010131 	.word	0x08010131
 8010084:	08010131 	.word	0x08010131
 8010088:	08010131 	.word	0x08010131
 801008c:	08010131 	.word	0x08010131
 8010090:	08010131 	.word	0x08010131
 8010094:	08010131 	.word	0x08010131
 8010098:	08010131 	.word	0x08010131
 801009c:	08010131 	.word	0x08010131
 80100a0:	08010131 	.word	0x08010131
 80100a4:	08010131 	.word	0x08010131
 80100a8:	08010131 	.word	0x08010131
 80100ac:	08010131 	.word	0x08010131
 80100b0:	08010123 	.word	0x08010123
 80100b4:	2b40      	cmp	r3, #64	@ 0x40
 80100b6:	d037      	beq.n	8010128 <UART_SetConfig+0xc44>
 80100b8:	e03a      	b.n	8010130 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100ba:	f7f9 fed9 	bl	8009e70 <HAL_RCC_GetPCLK1Freq>
 80100be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100c0:	e03c      	b.n	801013c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100c2:	f7f9 feeb 	bl	8009e9c <HAL_RCC_GetPCLK2Freq>
 80100c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100c8:	e038      	b.n	801013c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fb fd82 	bl	800bbd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100d8:	e030      	b.n	801013c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100da:	f107 0318 	add.w	r3, r7, #24
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fb fece 	bl	800be80 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100e8:	e028      	b.n	801013c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100ea:	4b09      	ldr	r3, [pc, #36]	@ (8010110 <UART_SetConfig+0xc2c>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f003 0320 	and.w	r3, r3, #32
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d012      	beq.n	801011c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100f6:	4b06      	ldr	r3, [pc, #24]	@ (8010110 <UART_SetConfig+0xc2c>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	08db      	lsrs	r3, r3, #3
 80100fc:	f003 0303 	and.w	r3, r3, #3
 8010100:	4a04      	ldr	r2, [pc, #16]	@ (8010114 <UART_SetConfig+0xc30>)
 8010102:	fa22 f303 	lsr.w	r3, r2, r3
 8010106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010108:	e018      	b.n	801013c <UART_SetConfig+0xc58>
 801010a:	bf00      	nop
 801010c:	0801254c 	.word	0x0801254c
 8010110:	58024400 	.word	0x58024400
 8010114:	03d09000 	.word	0x03d09000
 8010118:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801011c:	4b24      	ldr	r3, [pc, #144]	@ (80101b0 <UART_SetConfig+0xccc>)
 801011e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010120:	e00c      	b.n	801013c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010122:	4b24      	ldr	r3, [pc, #144]	@ (80101b4 <UART_SetConfig+0xcd0>)
 8010124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010126:	e009      	b.n	801013c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801012c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801012e:	e005      	b.n	801013c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010130:	2300      	movs	r3, #0
 8010132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010134:	2301      	movs	r3, #1
 8010136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801013a:	bf00      	nop
    }

    if (pclk != 0U)
 801013c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801013e:	2b00      	cmp	r3, #0
 8010140:	d021      	beq.n	8010186 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010146:	4a1c      	ldr	r2, [pc, #112]	@ (80101b8 <UART_SetConfig+0xcd4>)
 8010148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801014c:	461a      	mov	r2, r3
 801014e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010150:	fbb3 f2f2 	udiv	r2, r3, r2
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	085b      	lsrs	r3, r3, #1
 801015a:	441a      	add	r2, r3
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	fbb2 f3f3 	udiv	r3, r2, r3
 8010164:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010168:	2b0f      	cmp	r3, #15
 801016a:	d909      	bls.n	8010180 <UART_SetConfig+0xc9c>
 801016c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801016e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010172:	d205      	bcs.n	8010180 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010176:	b29a      	uxth	r2, r3
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	60da      	str	r2, [r3, #12]
 801017e:	e002      	b.n	8010186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010180:	2301      	movs	r3, #1
 8010182:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	2201      	movs	r2, #1
 801018a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	2201      	movs	r2, #1
 8010192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2200      	movs	r2, #0
 801019a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	2200      	movs	r2, #0
 80101a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80101a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3748      	adds	r7, #72	@ 0x48
 80101aa:	46bd      	mov	sp, r7
 80101ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80101b0:	03d09000 	.word	0x03d09000
 80101b4:	003d0900 	.word	0x003d0900
 80101b8:	0801254c 	.word	0x0801254c

080101bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101c8:	f003 0308 	and.w	r3, r3, #8
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00a      	beq.n	80101e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	430a      	orrs	r2, r1
 80101e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d00a      	beq.n	8010208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	430a      	orrs	r2, r1
 8010206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801020c:	f003 0302 	and.w	r3, r3, #2
 8010210:	2b00      	cmp	r3, #0
 8010212:	d00a      	beq.n	801022a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	430a      	orrs	r2, r1
 8010228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801022e:	f003 0304 	and.w	r3, r3, #4
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00a      	beq.n	801024c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	430a      	orrs	r2, r1
 801024a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010250:	f003 0310 	and.w	r3, r3, #16
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00a      	beq.n	801026e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	430a      	orrs	r2, r1
 801026c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010272:	f003 0320 	and.w	r3, r3, #32
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00a      	beq.n	8010290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	430a      	orrs	r2, r1
 801028e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010298:	2b00      	cmp	r3, #0
 801029a:	d01a      	beq.n	80102d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	430a      	orrs	r2, r1
 80102b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102ba:	d10a      	bne.n	80102d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	430a      	orrs	r2, r1
 80102d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00a      	beq.n	80102f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	430a      	orrs	r2, r1
 80102f2:	605a      	str	r2, [r3, #4]
  }
}
 80102f4:	bf00      	nop
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr

08010300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b098      	sub	sp, #96	@ 0x60
 8010304:	af02      	add	r7, sp, #8
 8010306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010310:	f7f2 fc80 	bl	8002c14 <HAL_GetTick>
 8010314:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f003 0308 	and.w	r3, r3, #8
 8010320:	2b08      	cmp	r3, #8
 8010322:	d12f      	bne.n	8010384 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801032c:	2200      	movs	r2, #0
 801032e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f000 f88e 	bl	8010454 <UART_WaitOnFlagUntilTimeout>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d022      	beq.n	8010384 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010346:	e853 3f00 	ldrex	r3, [r3]
 801034a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801034c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801034e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010352:	653b      	str	r3, [r7, #80]	@ 0x50
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	461a      	mov	r2, r3
 801035a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801035c:	647b      	str	r3, [r7, #68]	@ 0x44
 801035e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010364:	e841 2300 	strex	r3, r2, [r1]
 8010368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801036a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801036c:	2b00      	cmp	r3, #0
 801036e:	d1e6      	bne.n	801033e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2220      	movs	r2, #32
 8010374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e063      	b.n	801044c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f003 0304 	and.w	r3, r3, #4
 801038e:	2b04      	cmp	r3, #4
 8010390:	d149      	bne.n	8010426 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801039a:	2200      	movs	r2, #0
 801039c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f857 	bl	8010454 <UART_WaitOnFlagUntilTimeout>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d03c      	beq.n	8010426 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b4:	e853 3f00 	ldrex	r3, [r3]
 80103b8:	623b      	str	r3, [r7, #32]
   return(result);
 80103ba:	6a3b      	ldr	r3, [r7, #32]
 80103bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80103cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103d2:	e841 2300 	strex	r3, r2, [r1]
 80103d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80103d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d1e6      	bne.n	80103ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	3308      	adds	r3, #8
 80103e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	e853 3f00 	ldrex	r3, [r3]
 80103ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f023 0301 	bic.w	r3, r3, #1
 80103f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3308      	adds	r3, #8
 80103fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80103fe:	61fa      	str	r2, [r7, #28]
 8010400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010402:	69b9      	ldr	r1, [r7, #24]
 8010404:	69fa      	ldr	r2, [r7, #28]
 8010406:	e841 2300 	strex	r3, r2, [r1]
 801040a:	617b      	str	r3, [r7, #20]
   return(result);
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1e5      	bne.n	80103de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2220      	movs	r2, #32
 8010416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010422:	2303      	movs	r3, #3
 8010424:	e012      	b.n	801044c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2220      	movs	r2, #32
 801042a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2220      	movs	r2, #32
 8010432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3758      	adds	r7, #88	@ 0x58
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	603b      	str	r3, [r7, #0]
 8010460:	4613      	mov	r3, r2
 8010462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010464:	e04f      	b.n	8010506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046c:	d04b      	beq.n	8010506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801046e:	f7f2 fbd1 	bl	8002c14 <HAL_GetTick>
 8010472:	4602      	mov	r2, r0
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	1ad3      	subs	r3, r2, r3
 8010478:	69ba      	ldr	r2, [r7, #24]
 801047a:	429a      	cmp	r2, r3
 801047c:	d302      	bcc.n	8010484 <UART_WaitOnFlagUntilTimeout+0x30>
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010484:	2303      	movs	r3, #3
 8010486:	e04e      	b.n	8010526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f003 0304 	and.w	r3, r3, #4
 8010492:	2b00      	cmp	r3, #0
 8010494:	d037      	beq.n	8010506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	2b80      	cmp	r3, #128	@ 0x80
 801049a:	d034      	beq.n	8010506 <UART_WaitOnFlagUntilTimeout+0xb2>
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	2b40      	cmp	r3, #64	@ 0x40
 80104a0:	d031      	beq.n	8010506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	69db      	ldr	r3, [r3, #28]
 80104a8:	f003 0308 	and.w	r3, r3, #8
 80104ac:	2b08      	cmp	r3, #8
 80104ae:	d110      	bne.n	80104d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2208      	movs	r2, #8
 80104b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f000 f839 	bl	8010530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2208      	movs	r2, #8
 80104c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
 80104d0:	e029      	b.n	8010526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	69db      	ldr	r3, [r3, #28]
 80104d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104e0:	d111      	bne.n	8010506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f000 f81f 	bl	8010530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2220      	movs	r2, #32
 80104f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2200      	movs	r2, #0
 80104fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010502:	2303      	movs	r3, #3
 8010504:	e00f      	b.n	8010526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	69da      	ldr	r2, [r3, #28]
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	4013      	ands	r3, r2
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	429a      	cmp	r2, r3
 8010514:	bf0c      	ite	eq
 8010516:	2301      	moveq	r3, #1
 8010518:	2300      	movne	r3, #0
 801051a:	b2db      	uxtb	r3, r3
 801051c:	461a      	mov	r2, r3
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	429a      	cmp	r2, r3
 8010522:	d0a0      	beq.n	8010466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
	...

08010530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010530:	b480      	push	{r7}
 8010532:	b095      	sub	sp, #84	@ 0x54
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010540:	e853 3f00 	ldrex	r3, [r3]
 8010544:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801054c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010556:	643b      	str	r3, [r7, #64]	@ 0x40
 8010558:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801055c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801055e:	e841 2300 	strex	r3, r2, [r1]
 8010562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1e6      	bne.n	8010538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3308      	adds	r3, #8
 8010570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010572:	6a3b      	ldr	r3, [r7, #32]
 8010574:	e853 3f00 	ldrex	r3, [r3]
 8010578:	61fb      	str	r3, [r7, #28]
   return(result);
 801057a:	69fa      	ldr	r2, [r7, #28]
 801057c:	4b1e      	ldr	r3, [pc, #120]	@ (80105f8 <UART_EndRxTransfer+0xc8>)
 801057e:	4013      	ands	r3, r2
 8010580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3308      	adds	r3, #8
 8010588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801058a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801058c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010592:	e841 2300 	strex	r3, r2, [r1]
 8010596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1e5      	bne.n	801056a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d118      	bne.n	80105d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	e853 3f00 	ldrex	r3, [r3]
 80105b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	f023 0310 	bic.w	r3, r3, #16
 80105ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	461a      	mov	r2, r3
 80105c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105c4:	61bb      	str	r3, [r7, #24]
 80105c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c8:	6979      	ldr	r1, [r7, #20]
 80105ca:	69ba      	ldr	r2, [r7, #24]
 80105cc:	e841 2300 	strex	r3, r2, [r1]
 80105d0:	613b      	str	r3, [r7, #16]
   return(result);
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1e6      	bne.n	80105a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2220      	movs	r2, #32
 80105dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80105ec:	bf00      	nop
 80105ee:	3754      	adds	r7, #84	@ 0x54
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr
 80105f8:	effffffe 	.word	0xeffffffe

080105fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801060a:	2b01      	cmp	r3, #1
 801060c:	d101      	bne.n	8010612 <HAL_UARTEx_DisableFifoMode+0x16>
 801060e:	2302      	movs	r3, #2
 8010610:	e027      	b.n	8010662 <HAL_UARTEx_DisableFifoMode+0x66>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2201      	movs	r2, #1
 8010616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2224      	movs	r2, #36	@ 0x24
 801061e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f022 0201 	bic.w	r2, r2, #1
 8010638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2220      	movs	r2, #32
 8010654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010660:	2300      	movs	r3, #0
}
 8010662:	4618      	mov	r0, r3
 8010664:	3714      	adds	r7, #20
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr

0801066e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b084      	sub	sp, #16
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801067e:	2b01      	cmp	r3, #1
 8010680:	d101      	bne.n	8010686 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010682:	2302      	movs	r3, #2
 8010684:	e02d      	b.n	80106e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2201      	movs	r2, #1
 801068a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2224      	movs	r2, #36	@ 0x24
 8010692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f022 0201 	bic.w	r2, r2, #1
 80106ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	689b      	ldr	r3, [r3, #8]
 80106b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	683a      	ldr	r2, [r7, #0]
 80106be:	430a      	orrs	r2, r1
 80106c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f850 	bl	8010768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2220      	movs	r2, #32
 80106d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2200      	movs	r2, #0
 80106dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b084      	sub	sp, #16
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d101      	bne.n	8010702 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80106fe:	2302      	movs	r3, #2
 8010700:	e02d      	b.n	801075e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2201      	movs	r2, #1
 8010706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2224      	movs	r2, #36	@ 0x24
 801070e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f022 0201 	bic.w	r2, r2, #1
 8010728:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	689b      	ldr	r3, [r3, #8]
 8010730:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	683a      	ldr	r2, [r7, #0]
 801073a:	430a      	orrs	r2, r1
 801073c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 f812 	bl	8010768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68fa      	ldr	r2, [r7, #12]
 801074a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2220      	movs	r2, #32
 8010750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801075c:	2300      	movs	r3, #0
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
	...

08010768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010768:	b480      	push	{r7}
 801076a:	b085      	sub	sp, #20
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010774:	2b00      	cmp	r3, #0
 8010776:	d108      	bne.n	801078a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2201      	movs	r2, #1
 801077c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2201      	movs	r2, #1
 8010784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010788:	e031      	b.n	80107ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801078a:	2310      	movs	r3, #16
 801078c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801078e:	2310      	movs	r3, #16
 8010790:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	0e5b      	lsrs	r3, r3, #25
 801079a:	b2db      	uxtb	r3, r3
 801079c:	f003 0307 	and.w	r3, r3, #7
 80107a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	689b      	ldr	r3, [r3, #8]
 80107a8:	0f5b      	lsrs	r3, r3, #29
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	f003 0307 	and.w	r3, r3, #7
 80107b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107b2:	7bbb      	ldrb	r3, [r7, #14]
 80107b4:	7b3a      	ldrb	r2, [r7, #12]
 80107b6:	4911      	ldr	r1, [pc, #68]	@ (80107fc <UARTEx_SetNbDataToProcess+0x94>)
 80107b8:	5c8a      	ldrb	r2, [r1, r2]
 80107ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80107be:	7b3a      	ldrb	r2, [r7, #12]
 80107c0:	490f      	ldr	r1, [pc, #60]	@ (8010800 <UARTEx_SetNbDataToProcess+0x98>)
 80107c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80107c8:	b29a      	uxth	r2, r3
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
 80107d2:	7b7a      	ldrb	r2, [r7, #13]
 80107d4:	4909      	ldr	r1, [pc, #36]	@ (80107fc <UARTEx_SetNbDataToProcess+0x94>)
 80107d6:	5c8a      	ldrb	r2, [r1, r2]
 80107d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80107dc:	7b7a      	ldrb	r2, [r7, #13]
 80107de:	4908      	ldr	r1, [pc, #32]	@ (8010800 <UARTEx_SetNbDataToProcess+0x98>)
 80107e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80107ee:	bf00      	nop
 80107f0:	3714      	adds	r7, #20
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	08012564 	.word	0x08012564
 8010800:	0801256c 	.word	0x0801256c

08010804 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010804:	b084      	sub	sp, #16
 8010806:	b480      	push	{r7}
 8010808:	b085      	sub	sp, #20
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
 801080e:	f107 001c 	add.w	r0, r7, #28
 8010812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801081a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801081c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801081e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8010822:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8010826:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801082a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	4313      	orrs	r3, r2
 8010830:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	685a      	ldr	r2, [r3, #4]
 8010836:	4b07      	ldr	r3, [pc, #28]	@ (8010854 <SDMMC_Init+0x50>)
 8010838:	4013      	ands	r3, r2
 801083a:	68fa      	ldr	r2, [r7, #12]
 801083c:	431a      	orrs	r2, r3
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3714      	adds	r7, #20
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	b004      	add	sp, #16
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	ffc02c00 	.word	0xffc02c00

08010858 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010866:	4618      	mov	r0, r3
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010872:	b480      	push	{r7}
 8010874:	b083      	sub	sp, #12
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
 801087a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	370c      	adds	r7, #12
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f043 0203 	orr.w	r2, r3, #3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	370c      	adds	r7, #12
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr

080108b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80108b6:	b480      	push	{r7}
 80108b8:	b083      	sub	sp, #12
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f003 0303 	and.w	r3, r3, #3
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
	...

080108d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80108f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80108f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80108fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	4313      	orrs	r3, r2
 8010904:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68da      	ldr	r2, [r3, #12]
 801090a:	4b06      	ldr	r3, [pc, #24]	@ (8010924 <SDMMC_SendCommand+0x50>)
 801090c:	4013      	ands	r3, r2
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	431a      	orrs	r2, r3
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	3714      	adds	r7, #20
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr
 8010924:	fffee0c0 	.word	0xfffee0c0

08010928 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	691b      	ldr	r3, [r3, #16]
 8010934:	b2db      	uxtb	r3, r3
}
 8010936:	4618      	mov	r0, r3
 8010938:	370c      	adds	r7, #12
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr

08010942 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010942:	b480      	push	{r7}
 8010944:	b085      	sub	sp, #20
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	3314      	adds	r3, #20
 8010950:	461a      	mov	r2, r3
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	4413      	add	r3, r2
 8010956:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
}
 801095c:	4618      	mov	r0, r3
 801095e:	3714      	adds	r7, #20
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010972:	2300      	movs	r3, #0
 8010974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	685a      	ldr	r2, [r3, #4]
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801098e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010994:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801099a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801099c:	68fa      	ldr	r2, [r7, #12]
 801099e:	4313      	orrs	r3, r2
 80109a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	431a      	orrs	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80109b2:	2300      	movs	r3, #0

}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3714      	adds	r7, #20
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr

080109c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b088      	sub	sp, #32
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80109ce:	2310      	movs	r3, #16
 80109d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109d8:	2300      	movs	r3, #0
 80109da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109e2:	f107 0308 	add.w	r3, r7, #8
 80109e6:	4619      	mov	r1, r3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7ff ff73 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80109ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109f2:	2110      	movs	r1, #16
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 fa5f 	bl	8010eb8 <SDMMC_GetCmdResp1>
 80109fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109fc:	69fb      	ldr	r3, [r7, #28]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}

08010a06 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b088      	sub	sp, #32
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010a14:	2311      	movs	r3, #17
 8010a16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a28:	f107 0308 	add.w	r3, r7, #8
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7ff ff50 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a38:	2111      	movs	r1, #17
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fa3c 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a42:	69fb      	ldr	r3, [r7, #28]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3720      	adds	r7, #32
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b088      	sub	sp, #32
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010a5a:	2312      	movs	r3, #18
 8010a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a64:	2300      	movs	r3, #0
 8010a66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a6e:	f107 0308 	add.w	r3, r7, #8
 8010a72:	4619      	mov	r1, r3
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7ff ff2d 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a7e:	2112      	movs	r1, #18
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fa19 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a88:	69fb      	ldr	r3, [r7, #28]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3720      	adds	r7, #32
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b088      	sub	sp, #32
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010aa0:	2318      	movs	r3, #24
 8010aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010aae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ab2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ab4:	f107 0308 	add.w	r3, r7, #8
 8010ab8:	4619      	mov	r1, r3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7ff ff0a 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ac4:	2118      	movs	r1, #24
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f9f6 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ace:	69fb      	ldr	r3, [r7, #28]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3720      	adds	r7, #32
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010ae6:	2319      	movs	r3, #25
 8010ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010af0:	2300      	movs	r3, #0
 8010af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010afa:	f107 0308 	add.w	r3, r7, #8
 8010afe:	4619      	mov	r1, r3
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f7ff fee7 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b0a:	2119      	movs	r1, #25
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f000 f9d3 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b14:	69fb      	ldr	r3, [r7, #28]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3720      	adds	r7, #32
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010b2c:	230c      	movs	r3, #12
 8010b2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b36:	2300      	movs	r3, #0
 8010b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b3e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b58:	f107 0308 	add.w	r3, r7, #8
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7ff feb8 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010b64:	4a0b      	ldr	r2, [pc, #44]	@ (8010b94 <SDMMC_CmdStopTransfer+0x74>)
 8010b66:	210c      	movs	r1, #12
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 f9a5 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010b6e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010b82:	d101      	bne.n	8010b88 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010b84:	2300      	movs	r3, #0
 8010b86:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010b88:	69fb      	ldr	r3, [r7, #28]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3720      	adds	r7, #32
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	05f5e100 	.word	0x05f5e100

08010b98 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b088      	sub	sp, #32
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010ba6:	2307      	movs	r3, #7
 8010ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bba:	f107 0308 	add.w	r3, r7, #8
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7ff fe87 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bca:	2107      	movs	r1, #7
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f973 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010bd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd4:	69fb      	ldr	r3, [r7, #28]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b088      	sub	sp, #32
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010be6:	2300      	movs	r3, #0
 8010be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010bea:	2300      	movs	r3, #0
 8010bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bfc:	f107 0308 	add.w	r3, r7, #8
 8010c00:	4619      	mov	r1, r3
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7ff fe66 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f000 fb97 	bl	801133c <SDMMC_GetCmdError>
 8010c0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c10:	69fb      	ldr	r3, [r7, #28]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3720      	adds	r7, #32
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b088      	sub	sp, #32
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010c22:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010c26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010c28:	2308      	movs	r3, #8
 8010c2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c32:	2300      	movs	r3, #0
 8010c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c3c:	f107 0308 	add.w	r3, r7, #8
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff fe46 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 fb29 	bl	80112a0 <SDMMC_GetCmdResp7>
 8010c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c50:	69fb      	ldr	r3, [r7, #28]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3720      	adds	r7, #32
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b088      	sub	sp, #32
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010c68:	2337      	movs	r3, #55	@ 0x37
 8010c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c72:	2300      	movs	r3, #0
 8010c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c7c:	f107 0308 	add.w	r3, r7, #8
 8010c80:	4619      	mov	r1, r3
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff fe26 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c8c:	2137      	movs	r1, #55	@ 0x37
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 f912 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c96:	69fb      	ldr	r3, [r7, #28]
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b088      	sub	sp, #32
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010cae:	2329      	movs	r3, #41	@ 0x29
 8010cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010cc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cc2:	f107 0308 	add.w	r3, r7, #8
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f7ff fe03 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 fa2e 	bl	8011130 <SDMMC_GetCmdResp3>
 8010cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cd6:	69fb      	ldr	r3, [r7, #28]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3720      	adds	r7, #32
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b088      	sub	sp, #32
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010cee:	2306      	movs	r3, #6
 8010cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d02:	f107 0308 	add.w	r3, r7, #8
 8010d06:	4619      	mov	r1, r3
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7ff fde3 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d12:	2106      	movs	r1, #6
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f000 f8cf 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010d1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d1c:	69fb      	ldr	r3, [r7, #28]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3720      	adds	r7, #32
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b088      	sub	sp, #32
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010d32:	2333      	movs	r3, #51	@ 0x33
 8010d34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d46:	f107 0308 	add.w	r3, r7, #8
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7ff fdc1 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d56:	2133      	movs	r1, #51	@ 0x33
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f000 f8ad 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d60:	69fb      	ldr	r3, [r7, #28]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3720      	adds	r7, #32
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}

08010d6a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b088      	sub	sp, #32
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010d72:	2300      	movs	r3, #0
 8010d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010d76:	2302      	movs	r3, #2
 8010d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d8a:	f107 0308 	add.w	r3, r7, #8
 8010d8e:	4619      	mov	r1, r3
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff fd9f 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f000 f980 	bl	801109c <SDMMC_GetCmdResp2>
 8010d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d9e:	69fb      	ldr	r3, [r7, #28]
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3720      	adds	r7, #32
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b088      	sub	sp, #32
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010db6:	2309      	movs	r3, #9
 8010db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010dba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010dc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dca:	f107 0308 	add.w	r3, r7, #8
 8010dce:	4619      	mov	r1, r3
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7ff fd7f 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 f960 	bl	801109c <SDMMC_GetCmdResp2>
 8010ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dde:	69fb      	ldr	r3, [r7, #28]
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3720      	adds	r7, #32
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b088      	sub	sp, #32
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010df2:	2300      	movs	r3, #0
 8010df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010df6:	2303      	movs	r3, #3
 8010df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e00:	2300      	movs	r3, #0
 8010e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e0a:	f107 0308 	add.w	r3, r7, #8
 8010e0e:	4619      	mov	r1, r3
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7ff fd5f 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	2103      	movs	r1, #3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 f9c8 	bl	80111b0 <SDMMC_GetCmdResp6>
 8010e20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e22:	69fb      	ldr	r3, [r7, #28]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3720      	adds	r7, #32
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b088      	sub	sp, #32
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010e3a:	230d      	movs	r3, #13
 8010e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e44:	2300      	movs	r3, #0
 8010e46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e4e:	f107 0308 	add.w	r3, r7, #8
 8010e52:	4619      	mov	r1, r3
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff fd3d 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e5e:	210d      	movs	r1, #13
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f829 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e68:	69fb      	ldr	r3, [r7, #28]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3720      	adds	r7, #32
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b088      	sub	sp, #32
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010e7e:	230d      	movs	r3, #13
 8010e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e92:	f107 0308 	add.w	r3, r7, #8
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fd1b 	bl	80108d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ea2:	210d      	movs	r1, #13
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 f807 	bl	8010eb8 <SDMMC_GetCmdResp1>
 8010eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010eac:	69fb      	ldr	r3, [r7, #28]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3720      	adds	r7, #32
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
	...

08010eb8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b088      	sub	sp, #32
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	460b      	mov	r3, r1
 8010ec2:	607a      	str	r2, [r7, #4]
 8010ec4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010ec6:	4b70      	ldr	r3, [pc, #448]	@ (8011088 <SDMMC_GetCmdResp1+0x1d0>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4a70      	ldr	r2, [pc, #448]	@ (801108c <SDMMC_GetCmdResp1+0x1d4>)
 8010ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8010ed0:	0a5a      	lsrs	r2, r3, #9
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	fb02 f303 	mul.w	r3, r2, r3
 8010ed8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	1e5a      	subs	r2, r3, #1
 8010ede:	61fa      	str	r2, [r7, #28]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d102      	bne.n	8010eea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ee4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ee8:	e0c9      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eee:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010ef0:	69ba      	ldr	r2, [r7, #24]
 8010ef2:	4b67      	ldr	r3, [pc, #412]	@ (8011090 <SDMMC_GetCmdResp1+0x1d8>)
 8010ef4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d0ef      	beq.n	8010eda <SDMMC_GetCmdResp1+0x22>
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1ea      	bne.n	8010eda <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f08:	f003 0304 	and.w	r3, r3, #4
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d004      	beq.n	8010f1a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2204      	movs	r2, #4
 8010f14:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f16:	2304      	movs	r3, #4
 8010f18:	e0b1      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d004      	beq.n	8010f30 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e0a6      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	4a58      	ldr	r2, [pc, #352]	@ (8011094 <SDMMC_GetCmdResp1+0x1dc>)
 8010f34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f7ff fcf6 	bl	8010928 <SDMMC_GetCommandResponse>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	461a      	mov	r2, r3
 8010f40:	7afb      	ldrb	r3, [r7, #11]
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d001      	beq.n	8010f4a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f46:	2301      	movs	r3, #1
 8010f48:	e099      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f7ff fcf8 	bl	8010942 <SDMMC_GetResponse>
 8010f52:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010f54:	697a      	ldr	r2, [r7, #20]
 8010f56:	4b50      	ldr	r3, [pc, #320]	@ (8011098 <SDMMC_GetCmdResp1+0x1e0>)
 8010f58:	4013      	ands	r3, r2
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d101      	bne.n	8010f62 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e08d      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	da02      	bge.n	8010f6e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010f68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010f6c:	e087      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d001      	beq.n	8010f7c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010f78:	2340      	movs	r3, #64	@ 0x40
 8010f7a:	e080      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010f86:	2380      	movs	r3, #128	@ 0x80
 8010f88:	e079      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d002      	beq.n	8010f9a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010f98:	e071      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010fa8:	e069      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010fb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fb8:	e061      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010fc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010fc8:	e059      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010fd8:	e051      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d002      	beq.n	8010fea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010fe8:	e049      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010ff4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010ff8:	e041      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011000:	2b00      	cmp	r3, #0
 8011002:	d002      	beq.n	801100a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011004:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011008:	e039      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011010:	2b00      	cmp	r3, #0
 8011012:	d002      	beq.n	801101a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011018:	e031      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011020:	2b00      	cmp	r3, #0
 8011022:	d002      	beq.n	801102a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011024:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8011028:	e029      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011030:	2b00      	cmp	r3, #0
 8011032:	d002      	beq.n	801103a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011034:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011038:	e021      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011040:	2b00      	cmp	r3, #0
 8011042:	d002      	beq.n	801104a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011044:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8011048:	e019      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011050:	2b00      	cmp	r3, #0
 8011052:	d002      	beq.n	801105a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011054:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8011058:	e011      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011064:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011068:	e009      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801106a:	697b      	ldr	r3, [r7, #20]
 801106c:	f003 0308 	and.w	r3, r3, #8
 8011070:	2b00      	cmp	r3, #0
 8011072:	d002      	beq.n	801107a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011074:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8011078:	e001      	b.n	801107e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801107a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801107e:	4618      	mov	r0, r3
 8011080:	3720      	adds	r7, #32
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	2400000c 	.word	0x2400000c
 801108c:	10624dd3 	.word	0x10624dd3
 8011090:	00200045 	.word	0x00200045
 8011094:	002000c5 	.word	0x002000c5
 8011098:	fdffe008 	.word	0xfdffe008

0801109c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801109c:	b480      	push	{r7}
 801109e:	b085      	sub	sp, #20
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80110a4:	4b1f      	ldr	r3, [pc, #124]	@ (8011124 <SDMMC_GetCmdResp2+0x88>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4a1f      	ldr	r2, [pc, #124]	@ (8011128 <SDMMC_GetCmdResp2+0x8c>)
 80110aa:	fba2 2303 	umull	r2, r3, r2, r3
 80110ae:	0a5b      	lsrs	r3, r3, #9
 80110b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110b4:	fb02 f303 	mul.w	r3, r2, r3
 80110b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	1e5a      	subs	r2, r3, #1
 80110be:	60fa      	str	r2, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d102      	bne.n	80110ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110c8:	e026      	b.n	8011118 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d0ef      	beq.n	80110ba <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1ea      	bne.n	80110ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110e8:	f003 0304 	and.w	r3, r3, #4
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d004      	beq.n	80110fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2204      	movs	r2, #4
 80110f4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110f6:	2304      	movs	r3, #4
 80110f8:	e00e      	b.n	8011118 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110fe:	f003 0301 	and.w	r3, r3, #1
 8011102:	2b00      	cmp	r3, #0
 8011104:	d004      	beq.n	8011110 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2201      	movs	r2, #1
 801110a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801110c:	2301      	movs	r3, #1
 801110e:	e003      	b.n	8011118 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a06      	ldr	r2, [pc, #24]	@ (801112c <SDMMC_GetCmdResp2+0x90>)
 8011114:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011116:	2300      	movs	r3, #0
}
 8011118:	4618      	mov	r0, r3
 801111a:	3714      	adds	r7, #20
 801111c:	46bd      	mov	sp, r7
 801111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011122:	4770      	bx	lr
 8011124:	2400000c 	.word	0x2400000c
 8011128:	10624dd3 	.word	0x10624dd3
 801112c:	002000c5 	.word	0x002000c5

08011130 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011138:	4b1a      	ldr	r3, [pc, #104]	@ (80111a4 <SDMMC_GetCmdResp3+0x74>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a1a      	ldr	r2, [pc, #104]	@ (80111a8 <SDMMC_GetCmdResp3+0x78>)
 801113e:	fba2 2303 	umull	r2, r3, r2, r3
 8011142:	0a5b      	lsrs	r3, r3, #9
 8011144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011148:	fb02 f303 	mul.w	r3, r2, r3
 801114c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	1e5a      	subs	r2, r3, #1
 8011152:	60fa      	str	r2, [r7, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d102      	bne.n	801115e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011158:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801115c:	e01b      	b.n	8011196 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011162:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801116a:	2b00      	cmp	r3, #0
 801116c:	d0ef      	beq.n	801114e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1ea      	bne.n	801114e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801117c:	f003 0304 	and.w	r3, r3, #4
 8011180:	2b00      	cmp	r3, #0
 8011182:	d004      	beq.n	801118e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2204      	movs	r2, #4
 8011188:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801118a:	2304      	movs	r3, #4
 801118c:	e003      	b.n	8011196 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	4a06      	ldr	r2, [pc, #24]	@ (80111ac <SDMMC_GetCmdResp3+0x7c>)
 8011192:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011194:	2300      	movs	r3, #0
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	2400000c 	.word	0x2400000c
 80111a8:	10624dd3 	.word	0x10624dd3
 80111ac:	002000c5 	.word	0x002000c5

080111b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b088      	sub	sp, #32
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	460b      	mov	r3, r1
 80111ba:	607a      	str	r2, [r7, #4]
 80111bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80111be:	4b35      	ldr	r3, [pc, #212]	@ (8011294 <SDMMC_GetCmdResp6+0xe4>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4a35      	ldr	r2, [pc, #212]	@ (8011298 <SDMMC_GetCmdResp6+0xe8>)
 80111c4:	fba2 2303 	umull	r2, r3, r2, r3
 80111c8:	0a5b      	lsrs	r3, r3, #9
 80111ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111ce:	fb02 f303 	mul.w	r3, r2, r3
 80111d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	1e5a      	subs	r2, r3, #1
 80111d8:	61fa      	str	r2, [r7, #28]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d102      	bne.n	80111e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80111e2:	e052      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111e8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d0ef      	beq.n	80111d4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80111f4:	69bb      	ldr	r3, [r7, #24]
 80111f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d1ea      	bne.n	80111d4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011202:	f003 0304 	and.w	r3, r3, #4
 8011206:	2b00      	cmp	r3, #0
 8011208:	d004      	beq.n	8011214 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2204      	movs	r2, #4
 801120e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011210:	2304      	movs	r3, #4
 8011212:	e03a      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	d004      	beq.n	801122a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2201      	movs	r2, #1
 8011224:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011226:	2301      	movs	r3, #1
 8011228:	e02f      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	f7ff fb7c 	bl	8010928 <SDMMC_GetCommandResponse>
 8011230:	4603      	mov	r3, r0
 8011232:	461a      	mov	r2, r3
 8011234:	7afb      	ldrb	r3, [r7, #11]
 8011236:	4293      	cmp	r3, r2
 8011238:	d001      	beq.n	801123e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801123a:	2301      	movs	r3, #1
 801123c:	e025      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	4a16      	ldr	r2, [pc, #88]	@ (801129c <SDMMC_GetCmdResp6+0xec>)
 8011242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011244:	2100      	movs	r1, #0
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f7ff fb7b 	bl	8010942 <SDMMC_GetResponse>
 801124c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011254:	2b00      	cmp	r3, #0
 8011256:	d106      	bne.n	8011266 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	0c1b      	lsrs	r3, r3, #16
 801125c:	b29a      	uxth	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011262:	2300      	movs	r3, #0
 8011264:	e011      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801126c:	2b00      	cmp	r3, #0
 801126e:	d002      	beq.n	8011276 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011274:	e009      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011284:	e001      	b.n	801128a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801128a:	4618      	mov	r0, r3
 801128c:	3720      	adds	r7, #32
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	2400000c 	.word	0x2400000c
 8011298:	10624dd3 	.word	0x10624dd3
 801129c:	002000c5 	.word	0x002000c5

080112a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80112a8:	4b22      	ldr	r3, [pc, #136]	@ (8011334 <SDMMC_GetCmdResp7+0x94>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a22      	ldr	r2, [pc, #136]	@ (8011338 <SDMMC_GetCmdResp7+0x98>)
 80112ae:	fba2 2303 	umull	r2, r3, r2, r3
 80112b2:	0a5b      	lsrs	r3, r3, #9
 80112b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80112b8:	fb02 f303 	mul.w	r3, r2, r3
 80112bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	1e5a      	subs	r2, r3, #1
 80112c2:	60fa      	str	r2, [r7, #12]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d102      	bne.n	80112ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80112cc:	e02c      	b.n	8011328 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d0ef      	beq.n	80112be <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1ea      	bne.n	80112be <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112ec:	f003 0304 	and.w	r3, r3, #4
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d004      	beq.n	80112fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2204      	movs	r2, #4
 80112f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112fa:	2304      	movs	r3, #4
 80112fc:	e014      	b.n	8011328 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011302:	f003 0301 	and.w	r3, r3, #1
 8011306:	2b00      	cmp	r3, #0
 8011308:	d004      	beq.n	8011314 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2201      	movs	r2, #1
 801130e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011310:	2301      	movs	r3, #1
 8011312:	e009      	b.n	8011328 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2240      	movs	r2, #64	@ 0x40
 8011324:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011326:	2300      	movs	r3, #0

}
 8011328:	4618      	mov	r0, r3
 801132a:	3714      	adds	r7, #20
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr
 8011334:	2400000c 	.word	0x2400000c
 8011338:	10624dd3 	.word	0x10624dd3

0801133c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011344:	4b11      	ldr	r3, [pc, #68]	@ (801138c <SDMMC_GetCmdError+0x50>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4a11      	ldr	r2, [pc, #68]	@ (8011390 <SDMMC_GetCmdError+0x54>)
 801134a:	fba2 2303 	umull	r2, r3, r2, r3
 801134e:	0a5b      	lsrs	r3, r3, #9
 8011350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011354:	fb02 f303 	mul.w	r3, r2, r3
 8011358:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	1e5a      	subs	r2, r3, #1
 801135e:	60fa      	str	r2, [r7, #12]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011364:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011368:	e009      	b.n	801137e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011372:	2b00      	cmp	r3, #0
 8011374:	d0f1      	beq.n	801135a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4a06      	ldr	r2, [pc, #24]	@ (8011394 <SDMMC_GetCmdError+0x58>)
 801137a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3714      	adds	r7, #20
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	2400000c 	.word	0x2400000c
 8011390:	10624dd3 	.word	0x10624dd3
 8011394:	002000c5 	.word	0x002000c5

08011398 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801139c:	4904      	ldr	r1, [pc, #16]	@ (80113b0 <MX_FATFS_Init+0x18>)
 801139e:	4805      	ldr	r0, [pc, #20]	@ (80113b4 <MX_FATFS_Init+0x1c>)
 80113a0:	f000 fa8e 	bl	80118c0 <FATFS_LinkDriver>
 80113a4:	4603      	mov	r3, r0
 80113a6:	461a      	mov	r2, r3
 80113a8:	4b03      	ldr	r3, [pc, #12]	@ (80113b8 <MX_FATFS_Init+0x20>)
 80113aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80113ac:	bf00      	nop
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	240008a4 	.word	0x240008a4
 80113b4:	08012574 	.word	0x08012574
 80113b8:	240008a0 	.word	0x240008a0

080113bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80113c2:	2300      	movs	r3, #0
 80113c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80113c6:	f000 f885 	bl	80114d4 <BSP_SD_IsDetected>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d001      	beq.n	80113d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80113d0:	2302      	movs	r3, #2
 80113d2:	e012      	b.n	80113fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80113d4:	480b      	ldr	r0, [pc, #44]	@ (8011404 <BSP_SD_Init+0x48>)
 80113d6:	f7fb f95d 	bl	800c694 <HAL_SD_Init>
 80113da:	4603      	mov	r3, r0
 80113dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80113de:	79fb      	ldrb	r3, [r7, #7]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d109      	bne.n	80113f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80113e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80113e8:	4806      	ldr	r0, [pc, #24]	@ (8011404 <BSP_SD_Init+0x48>)
 80113ea:	f7fc f813 	bl	800d414 <HAL_SD_ConfigWideBusOperation>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d001      	beq.n	80113f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80113f4:	2301      	movs	r3, #1
 80113f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80113f8:	79fb      	ldrb	r3, [r7, #7]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	240003cc 	.word	0x240003cc

08011408 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	68ba      	ldr	r2, [r7, #8]
 801141c:	68f9      	ldr	r1, [r7, #12]
 801141e:	4806      	ldr	r0, [pc, #24]	@ (8011438 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011420:	f7fb fa58 	bl	800c8d4 <HAL_SD_ReadBlocks_DMA>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d001      	beq.n	801142e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801142a:	2301      	movs	r3, #1
 801142c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801142e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	240003cc 	.word	0x240003cc

0801143c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b086      	sub	sp, #24
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	68f9      	ldr	r1, [r7, #12]
 8011452:	4806      	ldr	r0, [pc, #24]	@ (801146c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011454:	f7fb fae6 	bl	800ca24 <HAL_SD_WriteBlocks_DMA>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	d001      	beq.n	8011462 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801145e:	2301      	movs	r3, #1
 8011460:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011462:	7dfb      	ldrb	r3, [r7, #23]
}
 8011464:	4618      	mov	r0, r3
 8011466:	3718      	adds	r7, #24
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	240003cc 	.word	0x240003cc

08011470 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011474:	4805      	ldr	r0, [pc, #20]	@ (801148c <BSP_SD_GetCardState+0x1c>)
 8011476:	f7fc f8df 	bl	800d638 <HAL_SD_GetCardState>
 801147a:	4603      	mov	r3, r0
 801147c:	2b04      	cmp	r3, #4
 801147e:	bf14      	ite	ne
 8011480:	2301      	movne	r3, #1
 8011482:	2300      	moveq	r3, #0
 8011484:	b2db      	uxtb	r3, r3
}
 8011486:	4618      	mov	r0, r3
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	240003cc 	.word	0x240003cc

08011490 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011498:	6879      	ldr	r1, [r7, #4]
 801149a:	4803      	ldr	r0, [pc, #12]	@ (80114a8 <BSP_SD_GetCardInfo+0x18>)
 801149c:	f7fb ff8e 	bl	800d3bc <HAL_SD_GetCardInfo>
}
 80114a0:	bf00      	nop
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	240003cc 	.word	0x240003cc

080114ac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80114b4:	f000 f9a0 	bl	80117f8 <BSP_SD_WriteCpltCallback>
}
 80114b8:	bf00      	nop
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b082      	sub	sp, #8
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80114c8:	f000 f9a2 	bl	8011810 <BSP_SD_ReadCpltCallback>
}
 80114cc:	bf00      	nop
 80114ce:	3708      	adds	r7, #8
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80114da:	2301      	movs	r3, #1
 80114dc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80114de:	f000 f80b 	bl	80114f8 <BSP_PlatformIsDetected>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d101      	bne.n	80114ec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80114e8:	2300      	movs	r3, #0
 80114ea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80114ec:	79fb      	ldrb	r3, [r7, #7]
 80114ee:	b2db      	uxtb	r3, r3
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80114fe:	2301      	movs	r3, #1
 8011500:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011502:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011506:	4806      	ldr	r0, [pc, #24]	@ (8011520 <BSP_PlatformIsDetected+0x28>)
 8011508:	f7f7 fd0c 	bl	8008f24 <HAL_GPIO_ReadPin>
 801150c:	4603      	mov	r3, r0
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011512:	2300      	movs	r3, #0
 8011514:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011516:	79fb      	ldrb	r3, [r7, #7]
}
 8011518:	4618      	mov	r0, r3
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	58021400 	.word	0x58021400

08011524 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801152c:	f7f1 fb72 	bl	8002c14 <HAL_GetTick>
 8011530:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011532:	e006      	b.n	8011542 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011534:	f7ff ff9c 	bl	8011470 <BSP_SD_GetCardState>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	d101      	bne.n	8011542 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801153e:	2300      	movs	r3, #0
 8011540:	e009      	b.n	8011556 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011542:	f7f1 fb67 	bl	8002c14 <HAL_GetTick>
 8011546:	4602      	mov	r2, r0
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	429a      	cmp	r2, r3
 8011550:	d8f0      	bhi.n	8011534 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
	...

08011560 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	4603      	mov	r3, r0
 8011568:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801156a:	4b0b      	ldr	r3, [pc, #44]	@ (8011598 <SD_CheckStatus+0x38>)
 801156c:	2201      	movs	r2, #1
 801156e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011570:	f7ff ff7e 	bl	8011470 <BSP_SD_GetCardState>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d107      	bne.n	801158a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801157a:	4b07      	ldr	r3, [pc, #28]	@ (8011598 <SD_CheckStatus+0x38>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f023 0301 	bic.w	r3, r3, #1
 8011584:	b2da      	uxtb	r2, r3
 8011586:	4b04      	ldr	r3, [pc, #16]	@ (8011598 <SD_CheckStatus+0x38>)
 8011588:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801158a:	4b03      	ldr	r3, [pc, #12]	@ (8011598 <SD_CheckStatus+0x38>)
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	b2db      	uxtb	r3, r3
}
 8011590:	4618      	mov	r0, r3
 8011592:	3708      	adds	r7, #8
 8011594:	46bd      	mov	sp, r7
 8011596:	bd80      	pop	{r7, pc}
 8011598:	24000019 	.word	0x24000019

0801159c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	4603      	mov	r3, r0
 80115a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80115a6:	f7ff ff09 	bl	80113bc <BSP_SD_Init>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d107      	bne.n	80115c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80115b0:	79fb      	ldrb	r3, [r7, #7]
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff ffd4 	bl	8011560 <SD_CheckStatus>
 80115b8:	4603      	mov	r3, r0
 80115ba:	461a      	mov	r2, r3
 80115bc:	4b04      	ldr	r3, [pc, #16]	@ (80115d0 <SD_initialize+0x34>)
 80115be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80115c0:	4b03      	ldr	r3, [pc, #12]	@ (80115d0 <SD_initialize+0x34>)
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	b2db      	uxtb	r3, r3
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	24000019 	.word	0x24000019

080115d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff ffbd 	bl	8011560 <SD_CheckStatus>
 80115e6:	4603      	mov	r3, r0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b086      	sub	sp, #24
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	60b9      	str	r1, [r7, #8]
 80115f8:	607a      	str	r2, [r7, #4]
 80115fa:	603b      	str	r3, [r7, #0]
 80115fc:	4603      	mov	r3, r0
 80115fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011600:	2301      	movs	r3, #1
 8011602:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011604:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011608:	f7ff ff8c 	bl	8011524 <SD_CheckStatusWithTimeout>
 801160c:	4603      	mov	r3, r0
 801160e:	2b00      	cmp	r3, #0
 8011610:	da01      	bge.n	8011616 <SD_read+0x26>
  {
    return res;
 8011612:	7dfb      	ldrb	r3, [r7, #23]
 8011614:	e03b      	b.n	801168e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011616:	683a      	ldr	r2, [r7, #0]
 8011618:	6879      	ldr	r1, [r7, #4]
 801161a:	68b8      	ldr	r0, [r7, #8]
 801161c:	f7ff fef4 	bl	8011408 <BSP_SD_ReadBlocks_DMA>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d132      	bne.n	801168c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011626:	4b1c      	ldr	r3, [pc, #112]	@ (8011698 <SD_read+0xa8>)
 8011628:	2200      	movs	r2, #0
 801162a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801162c:	f7f1 faf2 	bl	8002c14 <HAL_GetTick>
 8011630:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011632:	bf00      	nop
 8011634:	4b18      	ldr	r3, [pc, #96]	@ (8011698 <SD_read+0xa8>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d108      	bne.n	801164e <SD_read+0x5e>
 801163c:	f7f1 faea 	bl	8002c14 <HAL_GetTick>
 8011640:	4602      	mov	r2, r0
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	f247 522f 	movw	r2, #29999	@ 0x752f
 801164a:	4293      	cmp	r3, r2
 801164c:	d9f2      	bls.n	8011634 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801164e:	4b12      	ldr	r3, [pc, #72]	@ (8011698 <SD_read+0xa8>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d102      	bne.n	801165c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011656:	2301      	movs	r3, #1
 8011658:	75fb      	strb	r3, [r7, #23]
 801165a:	e017      	b.n	801168c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801165c:	4b0e      	ldr	r3, [pc, #56]	@ (8011698 <SD_read+0xa8>)
 801165e:	2200      	movs	r2, #0
 8011660:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011662:	f7f1 fad7 	bl	8002c14 <HAL_GetTick>
 8011666:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011668:	e007      	b.n	801167a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801166a:	f7ff ff01 	bl	8011470 <BSP_SD_GetCardState>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <SD_read+0x8a>
          {
            res = RES_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011678:	e008      	b.n	801168c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801167a:	f7f1 facb 	bl	8002c14 <HAL_GetTick>
 801167e:	4602      	mov	r2, r0
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011688:	4293      	cmp	r3, r2
 801168a:	d9ee      	bls.n	801166a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801168c:	7dfb      	ldrb	r3, [r7, #23]
}
 801168e:	4618      	mov	r0, r3
 8011690:	3718      	adds	r7, #24
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	240008ac 	.word	0x240008ac

0801169c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b086      	sub	sp, #24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60b9      	str	r1, [r7, #8]
 80116a4:	607a      	str	r2, [r7, #4]
 80116a6:	603b      	str	r3, [r7, #0]
 80116a8:	4603      	mov	r3, r0
 80116aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80116ac:	2301      	movs	r3, #1
 80116ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80116b0:	4b24      	ldr	r3, [pc, #144]	@ (8011744 <SD_write+0xa8>)
 80116b2:	2200      	movs	r2, #0
 80116b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80116b6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80116ba:	f7ff ff33 	bl	8011524 <SD_CheckStatusWithTimeout>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	da01      	bge.n	80116c8 <SD_write+0x2c>
  {
    return res;
 80116c4:	7dfb      	ldrb	r3, [r7, #23]
 80116c6:	e038      	b.n	801173a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80116c8:	683a      	ldr	r2, [r7, #0]
 80116ca:	6879      	ldr	r1, [r7, #4]
 80116cc:	68b8      	ldr	r0, [r7, #8]
 80116ce:	f7ff feb5 	bl	801143c <BSP_SD_WriteBlocks_DMA>
 80116d2:	4603      	mov	r3, r0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d12f      	bne.n	8011738 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80116d8:	f7f1 fa9c 	bl	8002c14 <HAL_GetTick>
 80116dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80116de:	bf00      	nop
 80116e0:	4b18      	ldr	r3, [pc, #96]	@ (8011744 <SD_write+0xa8>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d108      	bne.n	80116fa <SD_write+0x5e>
 80116e8:	f7f1 fa94 	bl	8002c14 <HAL_GetTick>
 80116ec:	4602      	mov	r2, r0
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	f247 522f 	movw	r2, #29999	@ 0x752f
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d9f2      	bls.n	80116e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80116fa:	4b12      	ldr	r3, [pc, #72]	@ (8011744 <SD_write+0xa8>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d102      	bne.n	8011708 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011702:	2301      	movs	r3, #1
 8011704:	75fb      	strb	r3, [r7, #23]
 8011706:	e017      	b.n	8011738 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011708:	4b0e      	ldr	r3, [pc, #56]	@ (8011744 <SD_write+0xa8>)
 801170a:	2200      	movs	r2, #0
 801170c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801170e:	f7f1 fa81 	bl	8002c14 <HAL_GetTick>
 8011712:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011714:	e007      	b.n	8011726 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011716:	f7ff feab 	bl	8011470 <BSP_SD_GetCardState>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <SD_write+0x8a>
          {
            res = RES_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	75fb      	strb	r3, [r7, #23]
            break;
 8011724:	e008      	b.n	8011738 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011726:	f7f1 fa75 	bl	8002c14 <HAL_GetTick>
 801172a:	4602      	mov	r2, r0
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	1ad3      	subs	r3, r2, r3
 8011730:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011734:	4293      	cmp	r3, r2
 8011736:	d9ee      	bls.n	8011716 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011738:	7dfb      	ldrb	r3, [r7, #23]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3718      	adds	r7, #24
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	240008a8 	.word	0x240008a8

08011748 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b08c      	sub	sp, #48	@ 0x30
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	603a      	str	r2, [r7, #0]
 8011752:	71fb      	strb	r3, [r7, #7]
 8011754:	460b      	mov	r3, r1
 8011756:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011758:	2301      	movs	r3, #1
 801175a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801175e:	4b25      	ldr	r3, [pc, #148]	@ (80117f4 <SD_ioctl+0xac>)
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	b2db      	uxtb	r3, r3
 8011764:	f003 0301 	and.w	r3, r3, #1
 8011768:	2b00      	cmp	r3, #0
 801176a:	d001      	beq.n	8011770 <SD_ioctl+0x28>
 801176c:	2303      	movs	r3, #3
 801176e:	e03c      	b.n	80117ea <SD_ioctl+0xa2>

  switch (cmd)
 8011770:	79bb      	ldrb	r3, [r7, #6]
 8011772:	2b03      	cmp	r3, #3
 8011774:	d834      	bhi.n	80117e0 <SD_ioctl+0x98>
 8011776:	a201      	add	r2, pc, #4	@ (adr r2, 801177c <SD_ioctl+0x34>)
 8011778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801177c:	0801178d 	.word	0x0801178d
 8011780:	08011795 	.word	0x08011795
 8011784:	080117ad 	.word	0x080117ad
 8011788:	080117c7 	.word	0x080117c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801178c:	2300      	movs	r3, #0
 801178e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011792:	e028      	b.n	80117e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011794:	f107 0308 	add.w	r3, r7, #8
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff fe79 	bl	8011490 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801179e:	6a3a      	ldr	r2, [r7, #32]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80117a4:	2300      	movs	r3, #0
 80117a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80117aa:	e01c      	b.n	80117e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80117ac:	f107 0308 	add.w	r3, r7, #8
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7ff fe6d 	bl	8011490 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80117b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80117be:	2300      	movs	r3, #0
 80117c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80117c4:	e00f      	b.n	80117e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80117c6:	f107 0308 	add.w	r3, r7, #8
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7ff fe60 	bl	8011490 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80117d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d2:	0a5a      	lsrs	r2, r3, #9
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80117d8:	2300      	movs	r3, #0
 80117da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80117de:	e002      	b.n	80117e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80117e0:	2304      	movs	r3, #4
 80117e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80117e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3730      	adds	r7, #48	@ 0x30
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	24000019 	.word	0x24000019

080117f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80117f8:	b480      	push	{r7}
 80117fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80117fc:	4b03      	ldr	r3, [pc, #12]	@ (801180c <BSP_SD_WriteCpltCallback+0x14>)
 80117fe:	2201      	movs	r2, #1
 8011800:	601a      	str	r2, [r3, #0]
}
 8011802:	bf00      	nop
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	240008a8 	.word	0x240008a8

08011810 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011810:	b480      	push	{r7}
 8011812:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011814:	4b03      	ldr	r3, [pc, #12]	@ (8011824 <BSP_SD_ReadCpltCallback+0x14>)
 8011816:	2201      	movs	r2, #1
 8011818:	601a      	str	r2, [r3, #0]
}
 801181a:	bf00      	nop
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr
 8011824:	240008ac 	.word	0x240008ac

08011828 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011828:	b480      	push	{r7}
 801182a:	b087      	sub	sp, #28
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	4613      	mov	r3, r2
 8011834:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011836:	2301      	movs	r3, #1
 8011838:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801183a:	2300      	movs	r3, #0
 801183c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801183e:	4b1f      	ldr	r3, [pc, #124]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011840:	7a5b      	ldrb	r3, [r3, #9]
 8011842:	b2db      	uxtb	r3, r3
 8011844:	2b00      	cmp	r3, #0
 8011846:	d131      	bne.n	80118ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011848:	4b1c      	ldr	r3, [pc, #112]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 801184a:	7a5b      	ldrb	r3, [r3, #9]
 801184c:	b2db      	uxtb	r3, r3
 801184e:	461a      	mov	r2, r3
 8011850:	4b1a      	ldr	r3, [pc, #104]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011852:	2100      	movs	r1, #0
 8011854:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011856:	4b19      	ldr	r3, [pc, #100]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011858:	7a5b      	ldrb	r3, [r3, #9]
 801185a:	b2db      	uxtb	r3, r3
 801185c:	4a17      	ldr	r2, [pc, #92]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	4413      	add	r3, r2
 8011862:	68fa      	ldr	r2, [r7, #12]
 8011864:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011866:	4b15      	ldr	r3, [pc, #84]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011868:	7a5b      	ldrb	r3, [r3, #9]
 801186a:	b2db      	uxtb	r3, r3
 801186c:	461a      	mov	r2, r3
 801186e:	4b13      	ldr	r3, [pc, #76]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011870:	4413      	add	r3, r2
 8011872:	79fa      	ldrb	r2, [r7, #7]
 8011874:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011876:	4b11      	ldr	r3, [pc, #68]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011878:	7a5b      	ldrb	r3, [r3, #9]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	1c5a      	adds	r2, r3, #1
 801187e:	b2d1      	uxtb	r1, r2
 8011880:	4a0e      	ldr	r2, [pc, #56]	@ (80118bc <FATFS_LinkDriverEx+0x94>)
 8011882:	7251      	strb	r1, [r2, #9]
 8011884:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011886:	7dbb      	ldrb	r3, [r7, #22]
 8011888:	3330      	adds	r3, #48	@ 0x30
 801188a:	b2da      	uxtb	r2, r3
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	3301      	adds	r3, #1
 8011894:	223a      	movs	r2, #58	@ 0x3a
 8011896:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	3302      	adds	r3, #2
 801189c:	222f      	movs	r2, #47	@ 0x2f
 801189e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	3303      	adds	r3, #3
 80118a4:	2200      	movs	r2, #0
 80118a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118a8:	2300      	movs	r3, #0
 80118aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	371c      	adds	r7, #28
 80118b2:	46bd      	mov	sp, r7
 80118b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	240008b0 	.word	0x240008b0

080118c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118ca:	2200      	movs	r2, #0
 80118cc:	6839      	ldr	r1, [r7, #0]
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f7ff ffaa 	bl	8011828 <FATFS_LinkDriverEx>
 80118d4:	4603      	mov	r3, r0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
	...

080118e0 <siprintf>:
 80118e0:	b40e      	push	{r1, r2, r3}
 80118e2:	b510      	push	{r4, lr}
 80118e4:	b09d      	sub	sp, #116	@ 0x74
 80118e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80118e8:	9002      	str	r0, [sp, #8]
 80118ea:	9006      	str	r0, [sp, #24]
 80118ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80118f0:	480a      	ldr	r0, [pc, #40]	@ (801191c <siprintf+0x3c>)
 80118f2:	9107      	str	r1, [sp, #28]
 80118f4:	9104      	str	r1, [sp, #16]
 80118f6:	490a      	ldr	r1, [pc, #40]	@ (8011920 <siprintf+0x40>)
 80118f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80118fc:	9105      	str	r1, [sp, #20]
 80118fe:	2400      	movs	r4, #0
 8011900:	a902      	add	r1, sp, #8
 8011902:	6800      	ldr	r0, [r0, #0]
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011908:	f000 f9a2 	bl	8011c50 <_svfiprintf_r>
 801190c:	9b02      	ldr	r3, [sp, #8]
 801190e:	701c      	strb	r4, [r3, #0]
 8011910:	b01d      	add	sp, #116	@ 0x74
 8011912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011916:	b003      	add	sp, #12
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	2400001c 	.word	0x2400001c
 8011920:	ffff0208 	.word	0xffff0208

08011924 <memset>:
 8011924:	4402      	add	r2, r0
 8011926:	4603      	mov	r3, r0
 8011928:	4293      	cmp	r3, r2
 801192a:	d100      	bne.n	801192e <memset+0xa>
 801192c:	4770      	bx	lr
 801192e:	f803 1b01 	strb.w	r1, [r3], #1
 8011932:	e7f9      	b.n	8011928 <memset+0x4>

08011934 <__errno>:
 8011934:	4b01      	ldr	r3, [pc, #4]	@ (801193c <__errno+0x8>)
 8011936:	6818      	ldr	r0, [r3, #0]
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop
 801193c:	2400001c 	.word	0x2400001c

08011940 <__libc_init_array>:
 8011940:	b570      	push	{r4, r5, r6, lr}
 8011942:	4d0d      	ldr	r5, [pc, #52]	@ (8011978 <__libc_init_array+0x38>)
 8011944:	4c0d      	ldr	r4, [pc, #52]	@ (801197c <__libc_init_array+0x3c>)
 8011946:	1b64      	subs	r4, r4, r5
 8011948:	10a4      	asrs	r4, r4, #2
 801194a:	2600      	movs	r6, #0
 801194c:	42a6      	cmp	r6, r4
 801194e:	d109      	bne.n	8011964 <__libc_init_array+0x24>
 8011950:	4d0b      	ldr	r5, [pc, #44]	@ (8011980 <__libc_init_array+0x40>)
 8011952:	4c0c      	ldr	r4, [pc, #48]	@ (8011984 <__libc_init_array+0x44>)
 8011954:	f000 fc64 	bl	8012220 <_init>
 8011958:	1b64      	subs	r4, r4, r5
 801195a:	10a4      	asrs	r4, r4, #2
 801195c:	2600      	movs	r6, #0
 801195e:	42a6      	cmp	r6, r4
 8011960:	d105      	bne.n	801196e <__libc_init_array+0x2e>
 8011962:	bd70      	pop	{r4, r5, r6, pc}
 8011964:	f855 3b04 	ldr.w	r3, [r5], #4
 8011968:	4798      	blx	r3
 801196a:	3601      	adds	r6, #1
 801196c:	e7ee      	b.n	801194c <__libc_init_array+0xc>
 801196e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011972:	4798      	blx	r3
 8011974:	3601      	adds	r6, #1
 8011976:	e7f2      	b.n	801195e <__libc_init_array+0x1e>
 8011978:	080125c4 	.word	0x080125c4
 801197c:	080125c4 	.word	0x080125c4
 8011980:	080125c4 	.word	0x080125c4
 8011984:	080125c8 	.word	0x080125c8

08011988 <__retarget_lock_acquire_recursive>:
 8011988:	4770      	bx	lr

0801198a <__retarget_lock_release_recursive>:
 801198a:	4770      	bx	lr

0801198c <memcpy>:
 801198c:	440a      	add	r2, r1
 801198e:	4291      	cmp	r1, r2
 8011990:	f100 33ff 	add.w	r3, r0, #4294967295
 8011994:	d100      	bne.n	8011998 <memcpy+0xc>
 8011996:	4770      	bx	lr
 8011998:	b510      	push	{r4, lr}
 801199a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801199e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119a2:	4291      	cmp	r1, r2
 80119a4:	d1f9      	bne.n	801199a <memcpy+0xe>
 80119a6:	bd10      	pop	{r4, pc}

080119a8 <_free_r>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4605      	mov	r5, r0
 80119ac:	2900      	cmp	r1, #0
 80119ae:	d041      	beq.n	8011a34 <_free_r+0x8c>
 80119b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119b4:	1f0c      	subs	r4, r1, #4
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	bfb8      	it	lt
 80119ba:	18e4      	addlt	r4, r4, r3
 80119bc:	f000 f8e0 	bl	8011b80 <__malloc_lock>
 80119c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011a38 <_free_r+0x90>)
 80119c2:	6813      	ldr	r3, [r2, #0]
 80119c4:	b933      	cbnz	r3, 80119d4 <_free_r+0x2c>
 80119c6:	6063      	str	r3, [r4, #4]
 80119c8:	6014      	str	r4, [r2, #0]
 80119ca:	4628      	mov	r0, r5
 80119cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119d0:	f000 b8dc 	b.w	8011b8c <__malloc_unlock>
 80119d4:	42a3      	cmp	r3, r4
 80119d6:	d908      	bls.n	80119ea <_free_r+0x42>
 80119d8:	6820      	ldr	r0, [r4, #0]
 80119da:	1821      	adds	r1, r4, r0
 80119dc:	428b      	cmp	r3, r1
 80119de:	bf01      	itttt	eq
 80119e0:	6819      	ldreq	r1, [r3, #0]
 80119e2:	685b      	ldreq	r3, [r3, #4]
 80119e4:	1809      	addeq	r1, r1, r0
 80119e6:	6021      	streq	r1, [r4, #0]
 80119e8:	e7ed      	b.n	80119c6 <_free_r+0x1e>
 80119ea:	461a      	mov	r2, r3
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	b10b      	cbz	r3, 80119f4 <_free_r+0x4c>
 80119f0:	42a3      	cmp	r3, r4
 80119f2:	d9fa      	bls.n	80119ea <_free_r+0x42>
 80119f4:	6811      	ldr	r1, [r2, #0]
 80119f6:	1850      	adds	r0, r2, r1
 80119f8:	42a0      	cmp	r0, r4
 80119fa:	d10b      	bne.n	8011a14 <_free_r+0x6c>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	4401      	add	r1, r0
 8011a00:	1850      	adds	r0, r2, r1
 8011a02:	4283      	cmp	r3, r0
 8011a04:	6011      	str	r1, [r2, #0]
 8011a06:	d1e0      	bne.n	80119ca <_free_r+0x22>
 8011a08:	6818      	ldr	r0, [r3, #0]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	6053      	str	r3, [r2, #4]
 8011a0e:	4408      	add	r0, r1
 8011a10:	6010      	str	r0, [r2, #0]
 8011a12:	e7da      	b.n	80119ca <_free_r+0x22>
 8011a14:	d902      	bls.n	8011a1c <_free_r+0x74>
 8011a16:	230c      	movs	r3, #12
 8011a18:	602b      	str	r3, [r5, #0]
 8011a1a:	e7d6      	b.n	80119ca <_free_r+0x22>
 8011a1c:	6820      	ldr	r0, [r4, #0]
 8011a1e:	1821      	adds	r1, r4, r0
 8011a20:	428b      	cmp	r3, r1
 8011a22:	bf04      	itt	eq
 8011a24:	6819      	ldreq	r1, [r3, #0]
 8011a26:	685b      	ldreq	r3, [r3, #4]
 8011a28:	6063      	str	r3, [r4, #4]
 8011a2a:	bf04      	itt	eq
 8011a2c:	1809      	addeq	r1, r1, r0
 8011a2e:	6021      	streq	r1, [r4, #0]
 8011a30:	6054      	str	r4, [r2, #4]
 8011a32:	e7ca      	b.n	80119ca <_free_r+0x22>
 8011a34:	bd38      	pop	{r3, r4, r5, pc}
 8011a36:	bf00      	nop
 8011a38:	24000a00 	.word	0x24000a00

08011a3c <sbrk_aligned>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8011a7c <sbrk_aligned+0x40>)
 8011a40:	460c      	mov	r4, r1
 8011a42:	6831      	ldr	r1, [r6, #0]
 8011a44:	4605      	mov	r5, r0
 8011a46:	b911      	cbnz	r1, 8011a4e <sbrk_aligned+0x12>
 8011a48:	f000 fba4 	bl	8012194 <_sbrk_r>
 8011a4c:	6030      	str	r0, [r6, #0]
 8011a4e:	4621      	mov	r1, r4
 8011a50:	4628      	mov	r0, r5
 8011a52:	f000 fb9f 	bl	8012194 <_sbrk_r>
 8011a56:	1c43      	adds	r3, r0, #1
 8011a58:	d103      	bne.n	8011a62 <sbrk_aligned+0x26>
 8011a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8011a5e:	4620      	mov	r0, r4
 8011a60:	bd70      	pop	{r4, r5, r6, pc}
 8011a62:	1cc4      	adds	r4, r0, #3
 8011a64:	f024 0403 	bic.w	r4, r4, #3
 8011a68:	42a0      	cmp	r0, r4
 8011a6a:	d0f8      	beq.n	8011a5e <sbrk_aligned+0x22>
 8011a6c:	1a21      	subs	r1, r4, r0
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f000 fb90 	bl	8012194 <_sbrk_r>
 8011a74:	3001      	adds	r0, #1
 8011a76:	d1f2      	bne.n	8011a5e <sbrk_aligned+0x22>
 8011a78:	e7ef      	b.n	8011a5a <sbrk_aligned+0x1e>
 8011a7a:	bf00      	nop
 8011a7c:	240009fc 	.word	0x240009fc

08011a80 <_malloc_r>:
 8011a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a84:	1ccd      	adds	r5, r1, #3
 8011a86:	f025 0503 	bic.w	r5, r5, #3
 8011a8a:	3508      	adds	r5, #8
 8011a8c:	2d0c      	cmp	r5, #12
 8011a8e:	bf38      	it	cc
 8011a90:	250c      	movcc	r5, #12
 8011a92:	2d00      	cmp	r5, #0
 8011a94:	4606      	mov	r6, r0
 8011a96:	db01      	blt.n	8011a9c <_malloc_r+0x1c>
 8011a98:	42a9      	cmp	r1, r5
 8011a9a:	d904      	bls.n	8011aa6 <_malloc_r+0x26>
 8011a9c:	230c      	movs	r3, #12
 8011a9e:	6033      	str	r3, [r6, #0]
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b7c <_malloc_r+0xfc>
 8011aaa:	f000 f869 	bl	8011b80 <__malloc_lock>
 8011aae:	f8d8 3000 	ldr.w	r3, [r8]
 8011ab2:	461c      	mov	r4, r3
 8011ab4:	bb44      	cbnz	r4, 8011b08 <_malloc_r+0x88>
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f7ff ffbf 	bl	8011a3c <sbrk_aligned>
 8011abe:	1c43      	adds	r3, r0, #1
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	d158      	bne.n	8011b76 <_malloc_r+0xf6>
 8011ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8011ac8:	4627      	mov	r7, r4
 8011aca:	2f00      	cmp	r7, #0
 8011acc:	d143      	bne.n	8011b56 <_malloc_r+0xd6>
 8011ace:	2c00      	cmp	r4, #0
 8011ad0:	d04b      	beq.n	8011b6a <_malloc_r+0xea>
 8011ad2:	6823      	ldr	r3, [r4, #0]
 8011ad4:	4639      	mov	r1, r7
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	eb04 0903 	add.w	r9, r4, r3
 8011adc:	f000 fb5a 	bl	8012194 <_sbrk_r>
 8011ae0:	4581      	cmp	r9, r0
 8011ae2:	d142      	bne.n	8011b6a <_malloc_r+0xea>
 8011ae4:	6821      	ldr	r1, [r4, #0]
 8011ae6:	1a6d      	subs	r5, r5, r1
 8011ae8:	4629      	mov	r1, r5
 8011aea:	4630      	mov	r0, r6
 8011aec:	f7ff ffa6 	bl	8011a3c <sbrk_aligned>
 8011af0:	3001      	adds	r0, #1
 8011af2:	d03a      	beq.n	8011b6a <_malloc_r+0xea>
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	442b      	add	r3, r5
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	f8d8 3000 	ldr.w	r3, [r8]
 8011afe:	685a      	ldr	r2, [r3, #4]
 8011b00:	bb62      	cbnz	r2, 8011b5c <_malloc_r+0xdc>
 8011b02:	f8c8 7000 	str.w	r7, [r8]
 8011b06:	e00f      	b.n	8011b28 <_malloc_r+0xa8>
 8011b08:	6822      	ldr	r2, [r4, #0]
 8011b0a:	1b52      	subs	r2, r2, r5
 8011b0c:	d420      	bmi.n	8011b50 <_malloc_r+0xd0>
 8011b0e:	2a0b      	cmp	r2, #11
 8011b10:	d917      	bls.n	8011b42 <_malloc_r+0xc2>
 8011b12:	1961      	adds	r1, r4, r5
 8011b14:	42a3      	cmp	r3, r4
 8011b16:	6025      	str	r5, [r4, #0]
 8011b18:	bf18      	it	ne
 8011b1a:	6059      	strne	r1, [r3, #4]
 8011b1c:	6863      	ldr	r3, [r4, #4]
 8011b1e:	bf08      	it	eq
 8011b20:	f8c8 1000 	streq.w	r1, [r8]
 8011b24:	5162      	str	r2, [r4, r5]
 8011b26:	604b      	str	r3, [r1, #4]
 8011b28:	4630      	mov	r0, r6
 8011b2a:	f000 f82f 	bl	8011b8c <__malloc_unlock>
 8011b2e:	f104 000b 	add.w	r0, r4, #11
 8011b32:	1d23      	adds	r3, r4, #4
 8011b34:	f020 0007 	bic.w	r0, r0, #7
 8011b38:	1ac2      	subs	r2, r0, r3
 8011b3a:	bf1c      	itt	ne
 8011b3c:	1a1b      	subne	r3, r3, r0
 8011b3e:	50a3      	strne	r3, [r4, r2]
 8011b40:	e7af      	b.n	8011aa2 <_malloc_r+0x22>
 8011b42:	6862      	ldr	r2, [r4, #4]
 8011b44:	42a3      	cmp	r3, r4
 8011b46:	bf0c      	ite	eq
 8011b48:	f8c8 2000 	streq.w	r2, [r8]
 8011b4c:	605a      	strne	r2, [r3, #4]
 8011b4e:	e7eb      	b.n	8011b28 <_malloc_r+0xa8>
 8011b50:	4623      	mov	r3, r4
 8011b52:	6864      	ldr	r4, [r4, #4]
 8011b54:	e7ae      	b.n	8011ab4 <_malloc_r+0x34>
 8011b56:	463c      	mov	r4, r7
 8011b58:	687f      	ldr	r7, [r7, #4]
 8011b5a:	e7b6      	b.n	8011aca <_malloc_r+0x4a>
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	42a3      	cmp	r3, r4
 8011b62:	d1fb      	bne.n	8011b5c <_malloc_r+0xdc>
 8011b64:	2300      	movs	r3, #0
 8011b66:	6053      	str	r3, [r2, #4]
 8011b68:	e7de      	b.n	8011b28 <_malloc_r+0xa8>
 8011b6a:	230c      	movs	r3, #12
 8011b6c:	6033      	str	r3, [r6, #0]
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f000 f80c 	bl	8011b8c <__malloc_unlock>
 8011b74:	e794      	b.n	8011aa0 <_malloc_r+0x20>
 8011b76:	6005      	str	r5, [r0, #0]
 8011b78:	e7d6      	b.n	8011b28 <_malloc_r+0xa8>
 8011b7a:	bf00      	nop
 8011b7c:	24000a00 	.word	0x24000a00

08011b80 <__malloc_lock>:
 8011b80:	4801      	ldr	r0, [pc, #4]	@ (8011b88 <__malloc_lock+0x8>)
 8011b82:	f7ff bf01 	b.w	8011988 <__retarget_lock_acquire_recursive>
 8011b86:	bf00      	nop
 8011b88:	240009f8 	.word	0x240009f8

08011b8c <__malloc_unlock>:
 8011b8c:	4801      	ldr	r0, [pc, #4]	@ (8011b94 <__malloc_unlock+0x8>)
 8011b8e:	f7ff befc 	b.w	801198a <__retarget_lock_release_recursive>
 8011b92:	bf00      	nop
 8011b94:	240009f8 	.word	0x240009f8

08011b98 <__ssputs_r>:
 8011b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b9c:	688e      	ldr	r6, [r1, #8]
 8011b9e:	461f      	mov	r7, r3
 8011ba0:	42be      	cmp	r6, r7
 8011ba2:	680b      	ldr	r3, [r1, #0]
 8011ba4:	4682      	mov	sl, r0
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	4690      	mov	r8, r2
 8011baa:	d82d      	bhi.n	8011c08 <__ssputs_r+0x70>
 8011bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011bb4:	d026      	beq.n	8011c04 <__ssputs_r+0x6c>
 8011bb6:	6965      	ldr	r5, [r4, #20]
 8011bb8:	6909      	ldr	r1, [r1, #16]
 8011bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bbe:	eba3 0901 	sub.w	r9, r3, r1
 8011bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011bc6:	1c7b      	adds	r3, r7, #1
 8011bc8:	444b      	add	r3, r9
 8011bca:	106d      	asrs	r5, r5, #1
 8011bcc:	429d      	cmp	r5, r3
 8011bce:	bf38      	it	cc
 8011bd0:	461d      	movcc	r5, r3
 8011bd2:	0553      	lsls	r3, r2, #21
 8011bd4:	d527      	bpl.n	8011c26 <__ssputs_r+0x8e>
 8011bd6:	4629      	mov	r1, r5
 8011bd8:	f7ff ff52 	bl	8011a80 <_malloc_r>
 8011bdc:	4606      	mov	r6, r0
 8011bde:	b360      	cbz	r0, 8011c3a <__ssputs_r+0xa2>
 8011be0:	6921      	ldr	r1, [r4, #16]
 8011be2:	464a      	mov	r2, r9
 8011be4:	f7ff fed2 	bl	801198c <memcpy>
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bf2:	81a3      	strh	r3, [r4, #12]
 8011bf4:	6126      	str	r6, [r4, #16]
 8011bf6:	6165      	str	r5, [r4, #20]
 8011bf8:	444e      	add	r6, r9
 8011bfa:	eba5 0509 	sub.w	r5, r5, r9
 8011bfe:	6026      	str	r6, [r4, #0]
 8011c00:	60a5      	str	r5, [r4, #8]
 8011c02:	463e      	mov	r6, r7
 8011c04:	42be      	cmp	r6, r7
 8011c06:	d900      	bls.n	8011c0a <__ssputs_r+0x72>
 8011c08:	463e      	mov	r6, r7
 8011c0a:	6820      	ldr	r0, [r4, #0]
 8011c0c:	4632      	mov	r2, r6
 8011c0e:	4641      	mov	r1, r8
 8011c10:	f000 faa6 	bl	8012160 <memmove>
 8011c14:	68a3      	ldr	r3, [r4, #8]
 8011c16:	1b9b      	subs	r3, r3, r6
 8011c18:	60a3      	str	r3, [r4, #8]
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	4433      	add	r3, r6
 8011c1e:	6023      	str	r3, [r4, #0]
 8011c20:	2000      	movs	r0, #0
 8011c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c26:	462a      	mov	r2, r5
 8011c28:	f000 fac4 	bl	80121b4 <_realloc_r>
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d1e0      	bne.n	8011bf4 <__ssputs_r+0x5c>
 8011c32:	6921      	ldr	r1, [r4, #16]
 8011c34:	4650      	mov	r0, sl
 8011c36:	f7ff feb7 	bl	80119a8 <_free_r>
 8011c3a:	230c      	movs	r3, #12
 8011c3c:	f8ca 3000 	str.w	r3, [sl]
 8011c40:	89a3      	ldrh	r3, [r4, #12]
 8011c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c46:	81a3      	strh	r3, [r4, #12]
 8011c48:	f04f 30ff 	mov.w	r0, #4294967295
 8011c4c:	e7e9      	b.n	8011c22 <__ssputs_r+0x8a>
	...

08011c50 <_svfiprintf_r>:
 8011c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c54:	4698      	mov	r8, r3
 8011c56:	898b      	ldrh	r3, [r1, #12]
 8011c58:	061b      	lsls	r3, r3, #24
 8011c5a:	b09d      	sub	sp, #116	@ 0x74
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	460d      	mov	r5, r1
 8011c60:	4614      	mov	r4, r2
 8011c62:	d510      	bpl.n	8011c86 <_svfiprintf_r+0x36>
 8011c64:	690b      	ldr	r3, [r1, #16]
 8011c66:	b973      	cbnz	r3, 8011c86 <_svfiprintf_r+0x36>
 8011c68:	2140      	movs	r1, #64	@ 0x40
 8011c6a:	f7ff ff09 	bl	8011a80 <_malloc_r>
 8011c6e:	6028      	str	r0, [r5, #0]
 8011c70:	6128      	str	r0, [r5, #16]
 8011c72:	b930      	cbnz	r0, 8011c82 <_svfiprintf_r+0x32>
 8011c74:	230c      	movs	r3, #12
 8011c76:	603b      	str	r3, [r7, #0]
 8011c78:	f04f 30ff 	mov.w	r0, #4294967295
 8011c7c:	b01d      	add	sp, #116	@ 0x74
 8011c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c82:	2340      	movs	r3, #64	@ 0x40
 8011c84:	616b      	str	r3, [r5, #20]
 8011c86:	2300      	movs	r3, #0
 8011c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c8a:	2320      	movs	r3, #32
 8011c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c94:	2330      	movs	r3, #48	@ 0x30
 8011c96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e34 <_svfiprintf_r+0x1e4>
 8011c9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c9e:	f04f 0901 	mov.w	r9, #1
 8011ca2:	4623      	mov	r3, r4
 8011ca4:	469a      	mov	sl, r3
 8011ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011caa:	b10a      	cbz	r2, 8011cb0 <_svfiprintf_r+0x60>
 8011cac:	2a25      	cmp	r2, #37	@ 0x25
 8011cae:	d1f9      	bne.n	8011ca4 <_svfiprintf_r+0x54>
 8011cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8011cb4:	d00b      	beq.n	8011cce <_svfiprintf_r+0x7e>
 8011cb6:	465b      	mov	r3, fp
 8011cb8:	4622      	mov	r2, r4
 8011cba:	4629      	mov	r1, r5
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	f7ff ff6b 	bl	8011b98 <__ssputs_r>
 8011cc2:	3001      	adds	r0, #1
 8011cc4:	f000 80a7 	beq.w	8011e16 <_svfiprintf_r+0x1c6>
 8011cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cca:	445a      	add	r2, fp
 8011ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cce:	f89a 3000 	ldrb.w	r3, [sl]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f000 809f 	beq.w	8011e16 <_svfiprintf_r+0x1c6>
 8011cd8:	2300      	movs	r3, #0
 8011cda:	f04f 32ff 	mov.w	r2, #4294967295
 8011cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ce2:	f10a 0a01 	add.w	sl, sl, #1
 8011ce6:	9304      	str	r3, [sp, #16]
 8011ce8:	9307      	str	r3, [sp, #28]
 8011cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8011cf0:	4654      	mov	r4, sl
 8011cf2:	2205      	movs	r2, #5
 8011cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf8:	484e      	ldr	r0, [pc, #312]	@ (8011e34 <_svfiprintf_r+0x1e4>)
 8011cfa:	f7ee fb11 	bl	8000320 <memchr>
 8011cfe:	9a04      	ldr	r2, [sp, #16]
 8011d00:	b9d8      	cbnz	r0, 8011d3a <_svfiprintf_r+0xea>
 8011d02:	06d0      	lsls	r0, r2, #27
 8011d04:	bf44      	itt	mi
 8011d06:	2320      	movmi	r3, #32
 8011d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d0c:	0711      	lsls	r1, r2, #28
 8011d0e:	bf44      	itt	mi
 8011d10:	232b      	movmi	r3, #43	@ 0x2b
 8011d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d16:	f89a 3000 	ldrb.w	r3, [sl]
 8011d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d1c:	d015      	beq.n	8011d4a <_svfiprintf_r+0xfa>
 8011d1e:	9a07      	ldr	r2, [sp, #28]
 8011d20:	4654      	mov	r4, sl
 8011d22:	2000      	movs	r0, #0
 8011d24:	f04f 0c0a 	mov.w	ip, #10
 8011d28:	4621      	mov	r1, r4
 8011d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d2e:	3b30      	subs	r3, #48	@ 0x30
 8011d30:	2b09      	cmp	r3, #9
 8011d32:	d94b      	bls.n	8011dcc <_svfiprintf_r+0x17c>
 8011d34:	b1b0      	cbz	r0, 8011d64 <_svfiprintf_r+0x114>
 8011d36:	9207      	str	r2, [sp, #28]
 8011d38:	e014      	b.n	8011d64 <_svfiprintf_r+0x114>
 8011d3a:	eba0 0308 	sub.w	r3, r0, r8
 8011d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8011d42:	4313      	orrs	r3, r2
 8011d44:	9304      	str	r3, [sp, #16]
 8011d46:	46a2      	mov	sl, r4
 8011d48:	e7d2      	b.n	8011cf0 <_svfiprintf_r+0xa0>
 8011d4a:	9b03      	ldr	r3, [sp, #12]
 8011d4c:	1d19      	adds	r1, r3, #4
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	9103      	str	r1, [sp, #12]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	bfbb      	ittet	lt
 8011d56:	425b      	neglt	r3, r3
 8011d58:	f042 0202 	orrlt.w	r2, r2, #2
 8011d5c:	9307      	strge	r3, [sp, #28]
 8011d5e:	9307      	strlt	r3, [sp, #28]
 8011d60:	bfb8      	it	lt
 8011d62:	9204      	strlt	r2, [sp, #16]
 8011d64:	7823      	ldrb	r3, [r4, #0]
 8011d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d68:	d10a      	bne.n	8011d80 <_svfiprintf_r+0x130>
 8011d6a:	7863      	ldrb	r3, [r4, #1]
 8011d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d6e:	d132      	bne.n	8011dd6 <_svfiprintf_r+0x186>
 8011d70:	9b03      	ldr	r3, [sp, #12]
 8011d72:	1d1a      	adds	r2, r3, #4
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	9203      	str	r2, [sp, #12]
 8011d78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d7c:	3402      	adds	r4, #2
 8011d7e:	9305      	str	r3, [sp, #20]
 8011d80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e44 <_svfiprintf_r+0x1f4>
 8011d84:	7821      	ldrb	r1, [r4, #0]
 8011d86:	2203      	movs	r2, #3
 8011d88:	4650      	mov	r0, sl
 8011d8a:	f7ee fac9 	bl	8000320 <memchr>
 8011d8e:	b138      	cbz	r0, 8011da0 <_svfiprintf_r+0x150>
 8011d90:	9b04      	ldr	r3, [sp, #16]
 8011d92:	eba0 000a 	sub.w	r0, r0, sl
 8011d96:	2240      	movs	r2, #64	@ 0x40
 8011d98:	4082      	lsls	r2, r0
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	3401      	adds	r4, #1
 8011d9e:	9304      	str	r3, [sp, #16]
 8011da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011da4:	4824      	ldr	r0, [pc, #144]	@ (8011e38 <_svfiprintf_r+0x1e8>)
 8011da6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011daa:	2206      	movs	r2, #6
 8011dac:	f7ee fab8 	bl	8000320 <memchr>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d036      	beq.n	8011e22 <_svfiprintf_r+0x1d2>
 8011db4:	4b21      	ldr	r3, [pc, #132]	@ (8011e3c <_svfiprintf_r+0x1ec>)
 8011db6:	bb1b      	cbnz	r3, 8011e00 <_svfiprintf_r+0x1b0>
 8011db8:	9b03      	ldr	r3, [sp, #12]
 8011dba:	3307      	adds	r3, #7
 8011dbc:	f023 0307 	bic.w	r3, r3, #7
 8011dc0:	3308      	adds	r3, #8
 8011dc2:	9303      	str	r3, [sp, #12]
 8011dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dc6:	4433      	add	r3, r6
 8011dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dca:	e76a      	b.n	8011ca2 <_svfiprintf_r+0x52>
 8011dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	e7a8      	b.n	8011d28 <_svfiprintf_r+0xd8>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	3401      	adds	r4, #1
 8011dda:	9305      	str	r3, [sp, #20]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	f04f 0c0a 	mov.w	ip, #10
 8011de2:	4620      	mov	r0, r4
 8011de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011de8:	3a30      	subs	r2, #48	@ 0x30
 8011dea:	2a09      	cmp	r2, #9
 8011dec:	d903      	bls.n	8011df6 <_svfiprintf_r+0x1a6>
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d0c6      	beq.n	8011d80 <_svfiprintf_r+0x130>
 8011df2:	9105      	str	r1, [sp, #20]
 8011df4:	e7c4      	b.n	8011d80 <_svfiprintf_r+0x130>
 8011df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e7f0      	b.n	8011de2 <_svfiprintf_r+0x192>
 8011e00:	ab03      	add	r3, sp, #12
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	462a      	mov	r2, r5
 8011e06:	4b0e      	ldr	r3, [pc, #56]	@ (8011e40 <_svfiprintf_r+0x1f0>)
 8011e08:	a904      	add	r1, sp, #16
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	f3af 8000 	nop.w
 8011e10:	1c42      	adds	r2, r0, #1
 8011e12:	4606      	mov	r6, r0
 8011e14:	d1d6      	bne.n	8011dc4 <_svfiprintf_r+0x174>
 8011e16:	89ab      	ldrh	r3, [r5, #12]
 8011e18:	065b      	lsls	r3, r3, #25
 8011e1a:	f53f af2d 	bmi.w	8011c78 <_svfiprintf_r+0x28>
 8011e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e20:	e72c      	b.n	8011c7c <_svfiprintf_r+0x2c>
 8011e22:	ab03      	add	r3, sp, #12
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	462a      	mov	r2, r5
 8011e28:	4b05      	ldr	r3, [pc, #20]	@ (8011e40 <_svfiprintf_r+0x1f0>)
 8011e2a:	a904      	add	r1, sp, #16
 8011e2c:	4638      	mov	r0, r7
 8011e2e:	f000 f879 	bl	8011f24 <_printf_i>
 8011e32:	e7ed      	b.n	8011e10 <_svfiprintf_r+0x1c0>
 8011e34:	08012588 	.word	0x08012588
 8011e38:	08012592 	.word	0x08012592
 8011e3c:	00000000 	.word	0x00000000
 8011e40:	08011b99 	.word	0x08011b99
 8011e44:	0801258e 	.word	0x0801258e

08011e48 <_printf_common>:
 8011e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e4c:	4616      	mov	r6, r2
 8011e4e:	4698      	mov	r8, r3
 8011e50:	688a      	ldr	r2, [r1, #8]
 8011e52:	690b      	ldr	r3, [r1, #16]
 8011e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	bfb8      	it	lt
 8011e5c:	4613      	movlt	r3, r2
 8011e5e:	6033      	str	r3, [r6, #0]
 8011e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e64:	4607      	mov	r7, r0
 8011e66:	460c      	mov	r4, r1
 8011e68:	b10a      	cbz	r2, 8011e6e <_printf_common+0x26>
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	6033      	str	r3, [r6, #0]
 8011e6e:	6823      	ldr	r3, [r4, #0]
 8011e70:	0699      	lsls	r1, r3, #26
 8011e72:	bf42      	ittt	mi
 8011e74:	6833      	ldrmi	r3, [r6, #0]
 8011e76:	3302      	addmi	r3, #2
 8011e78:	6033      	strmi	r3, [r6, #0]
 8011e7a:	6825      	ldr	r5, [r4, #0]
 8011e7c:	f015 0506 	ands.w	r5, r5, #6
 8011e80:	d106      	bne.n	8011e90 <_printf_common+0x48>
 8011e82:	f104 0a19 	add.w	sl, r4, #25
 8011e86:	68e3      	ldr	r3, [r4, #12]
 8011e88:	6832      	ldr	r2, [r6, #0]
 8011e8a:	1a9b      	subs	r3, r3, r2
 8011e8c:	42ab      	cmp	r3, r5
 8011e8e:	dc26      	bgt.n	8011ede <_printf_common+0x96>
 8011e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e94:	6822      	ldr	r2, [r4, #0]
 8011e96:	3b00      	subs	r3, #0
 8011e98:	bf18      	it	ne
 8011e9a:	2301      	movne	r3, #1
 8011e9c:	0692      	lsls	r2, r2, #26
 8011e9e:	d42b      	bmi.n	8011ef8 <_printf_common+0xb0>
 8011ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011ea4:	4641      	mov	r1, r8
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	47c8      	blx	r9
 8011eaa:	3001      	adds	r0, #1
 8011eac:	d01e      	beq.n	8011eec <_printf_common+0xa4>
 8011eae:	6823      	ldr	r3, [r4, #0]
 8011eb0:	6922      	ldr	r2, [r4, #16]
 8011eb2:	f003 0306 	and.w	r3, r3, #6
 8011eb6:	2b04      	cmp	r3, #4
 8011eb8:	bf02      	ittt	eq
 8011eba:	68e5      	ldreq	r5, [r4, #12]
 8011ebc:	6833      	ldreq	r3, [r6, #0]
 8011ebe:	1aed      	subeq	r5, r5, r3
 8011ec0:	68a3      	ldr	r3, [r4, #8]
 8011ec2:	bf0c      	ite	eq
 8011ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ec8:	2500      	movne	r5, #0
 8011eca:	4293      	cmp	r3, r2
 8011ecc:	bfc4      	itt	gt
 8011ece:	1a9b      	subgt	r3, r3, r2
 8011ed0:	18ed      	addgt	r5, r5, r3
 8011ed2:	2600      	movs	r6, #0
 8011ed4:	341a      	adds	r4, #26
 8011ed6:	42b5      	cmp	r5, r6
 8011ed8:	d11a      	bne.n	8011f10 <_printf_common+0xc8>
 8011eda:	2000      	movs	r0, #0
 8011edc:	e008      	b.n	8011ef0 <_printf_common+0xa8>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	4652      	mov	r2, sl
 8011ee2:	4641      	mov	r1, r8
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	47c8      	blx	r9
 8011ee8:	3001      	adds	r0, #1
 8011eea:	d103      	bne.n	8011ef4 <_printf_common+0xac>
 8011eec:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef4:	3501      	adds	r5, #1
 8011ef6:	e7c6      	b.n	8011e86 <_printf_common+0x3e>
 8011ef8:	18e1      	adds	r1, r4, r3
 8011efa:	1c5a      	adds	r2, r3, #1
 8011efc:	2030      	movs	r0, #48	@ 0x30
 8011efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011f02:	4422      	add	r2, r4
 8011f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011f0c:	3302      	adds	r3, #2
 8011f0e:	e7c7      	b.n	8011ea0 <_printf_common+0x58>
 8011f10:	2301      	movs	r3, #1
 8011f12:	4622      	mov	r2, r4
 8011f14:	4641      	mov	r1, r8
 8011f16:	4638      	mov	r0, r7
 8011f18:	47c8      	blx	r9
 8011f1a:	3001      	adds	r0, #1
 8011f1c:	d0e6      	beq.n	8011eec <_printf_common+0xa4>
 8011f1e:	3601      	adds	r6, #1
 8011f20:	e7d9      	b.n	8011ed6 <_printf_common+0x8e>
	...

08011f24 <_printf_i>:
 8011f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f28:	7e0f      	ldrb	r7, [r1, #24]
 8011f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f2c:	2f78      	cmp	r7, #120	@ 0x78
 8011f2e:	4691      	mov	r9, r2
 8011f30:	4680      	mov	r8, r0
 8011f32:	460c      	mov	r4, r1
 8011f34:	469a      	mov	sl, r3
 8011f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011f3a:	d807      	bhi.n	8011f4c <_printf_i+0x28>
 8011f3c:	2f62      	cmp	r7, #98	@ 0x62
 8011f3e:	d80a      	bhi.n	8011f56 <_printf_i+0x32>
 8011f40:	2f00      	cmp	r7, #0
 8011f42:	f000 80d1 	beq.w	80120e8 <_printf_i+0x1c4>
 8011f46:	2f58      	cmp	r7, #88	@ 0x58
 8011f48:	f000 80b8 	beq.w	80120bc <_printf_i+0x198>
 8011f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f54:	e03a      	b.n	8011fcc <_printf_i+0xa8>
 8011f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f5a:	2b15      	cmp	r3, #21
 8011f5c:	d8f6      	bhi.n	8011f4c <_printf_i+0x28>
 8011f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8011f64 <_printf_i+0x40>)
 8011f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f64:	08011fbd 	.word	0x08011fbd
 8011f68:	08011fd1 	.word	0x08011fd1
 8011f6c:	08011f4d 	.word	0x08011f4d
 8011f70:	08011f4d 	.word	0x08011f4d
 8011f74:	08011f4d 	.word	0x08011f4d
 8011f78:	08011f4d 	.word	0x08011f4d
 8011f7c:	08011fd1 	.word	0x08011fd1
 8011f80:	08011f4d 	.word	0x08011f4d
 8011f84:	08011f4d 	.word	0x08011f4d
 8011f88:	08011f4d 	.word	0x08011f4d
 8011f8c:	08011f4d 	.word	0x08011f4d
 8011f90:	080120cf 	.word	0x080120cf
 8011f94:	08011ffb 	.word	0x08011ffb
 8011f98:	08012089 	.word	0x08012089
 8011f9c:	08011f4d 	.word	0x08011f4d
 8011fa0:	08011f4d 	.word	0x08011f4d
 8011fa4:	080120f1 	.word	0x080120f1
 8011fa8:	08011f4d 	.word	0x08011f4d
 8011fac:	08011ffb 	.word	0x08011ffb
 8011fb0:	08011f4d 	.word	0x08011f4d
 8011fb4:	08011f4d 	.word	0x08011f4d
 8011fb8:	08012091 	.word	0x08012091
 8011fbc:	6833      	ldr	r3, [r6, #0]
 8011fbe:	1d1a      	adds	r2, r3, #4
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	6032      	str	r2, [r6, #0]
 8011fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011fcc:	2301      	movs	r3, #1
 8011fce:	e09c      	b.n	801210a <_printf_i+0x1e6>
 8011fd0:	6833      	ldr	r3, [r6, #0]
 8011fd2:	6820      	ldr	r0, [r4, #0]
 8011fd4:	1d19      	adds	r1, r3, #4
 8011fd6:	6031      	str	r1, [r6, #0]
 8011fd8:	0606      	lsls	r6, r0, #24
 8011fda:	d501      	bpl.n	8011fe0 <_printf_i+0xbc>
 8011fdc:	681d      	ldr	r5, [r3, #0]
 8011fde:	e003      	b.n	8011fe8 <_printf_i+0xc4>
 8011fe0:	0645      	lsls	r5, r0, #25
 8011fe2:	d5fb      	bpl.n	8011fdc <_printf_i+0xb8>
 8011fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011fe8:	2d00      	cmp	r5, #0
 8011fea:	da03      	bge.n	8011ff4 <_printf_i+0xd0>
 8011fec:	232d      	movs	r3, #45	@ 0x2d
 8011fee:	426d      	negs	r5, r5
 8011ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ff4:	4858      	ldr	r0, [pc, #352]	@ (8012158 <_printf_i+0x234>)
 8011ff6:	230a      	movs	r3, #10
 8011ff8:	e011      	b.n	801201e <_printf_i+0xfa>
 8011ffa:	6821      	ldr	r1, [r4, #0]
 8011ffc:	6833      	ldr	r3, [r6, #0]
 8011ffe:	0608      	lsls	r0, r1, #24
 8012000:	f853 5b04 	ldr.w	r5, [r3], #4
 8012004:	d402      	bmi.n	801200c <_printf_i+0xe8>
 8012006:	0649      	lsls	r1, r1, #25
 8012008:	bf48      	it	mi
 801200a:	b2ad      	uxthmi	r5, r5
 801200c:	2f6f      	cmp	r7, #111	@ 0x6f
 801200e:	4852      	ldr	r0, [pc, #328]	@ (8012158 <_printf_i+0x234>)
 8012010:	6033      	str	r3, [r6, #0]
 8012012:	bf14      	ite	ne
 8012014:	230a      	movne	r3, #10
 8012016:	2308      	moveq	r3, #8
 8012018:	2100      	movs	r1, #0
 801201a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801201e:	6866      	ldr	r6, [r4, #4]
 8012020:	60a6      	str	r6, [r4, #8]
 8012022:	2e00      	cmp	r6, #0
 8012024:	db05      	blt.n	8012032 <_printf_i+0x10e>
 8012026:	6821      	ldr	r1, [r4, #0]
 8012028:	432e      	orrs	r6, r5
 801202a:	f021 0104 	bic.w	r1, r1, #4
 801202e:	6021      	str	r1, [r4, #0]
 8012030:	d04b      	beq.n	80120ca <_printf_i+0x1a6>
 8012032:	4616      	mov	r6, r2
 8012034:	fbb5 f1f3 	udiv	r1, r5, r3
 8012038:	fb03 5711 	mls	r7, r3, r1, r5
 801203c:	5dc7      	ldrb	r7, [r0, r7]
 801203e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012042:	462f      	mov	r7, r5
 8012044:	42bb      	cmp	r3, r7
 8012046:	460d      	mov	r5, r1
 8012048:	d9f4      	bls.n	8012034 <_printf_i+0x110>
 801204a:	2b08      	cmp	r3, #8
 801204c:	d10b      	bne.n	8012066 <_printf_i+0x142>
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	07df      	lsls	r7, r3, #31
 8012052:	d508      	bpl.n	8012066 <_printf_i+0x142>
 8012054:	6923      	ldr	r3, [r4, #16]
 8012056:	6861      	ldr	r1, [r4, #4]
 8012058:	4299      	cmp	r1, r3
 801205a:	bfde      	ittt	le
 801205c:	2330      	movle	r3, #48	@ 0x30
 801205e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012062:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012066:	1b92      	subs	r2, r2, r6
 8012068:	6122      	str	r2, [r4, #16]
 801206a:	f8cd a000 	str.w	sl, [sp]
 801206e:	464b      	mov	r3, r9
 8012070:	aa03      	add	r2, sp, #12
 8012072:	4621      	mov	r1, r4
 8012074:	4640      	mov	r0, r8
 8012076:	f7ff fee7 	bl	8011e48 <_printf_common>
 801207a:	3001      	adds	r0, #1
 801207c:	d14a      	bne.n	8012114 <_printf_i+0x1f0>
 801207e:	f04f 30ff 	mov.w	r0, #4294967295
 8012082:	b004      	add	sp, #16
 8012084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	f043 0320 	orr.w	r3, r3, #32
 801208e:	6023      	str	r3, [r4, #0]
 8012090:	4832      	ldr	r0, [pc, #200]	@ (801215c <_printf_i+0x238>)
 8012092:	2778      	movs	r7, #120	@ 0x78
 8012094:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012098:	6823      	ldr	r3, [r4, #0]
 801209a:	6831      	ldr	r1, [r6, #0]
 801209c:	061f      	lsls	r7, r3, #24
 801209e:	f851 5b04 	ldr.w	r5, [r1], #4
 80120a2:	d402      	bmi.n	80120aa <_printf_i+0x186>
 80120a4:	065f      	lsls	r7, r3, #25
 80120a6:	bf48      	it	mi
 80120a8:	b2ad      	uxthmi	r5, r5
 80120aa:	6031      	str	r1, [r6, #0]
 80120ac:	07d9      	lsls	r1, r3, #31
 80120ae:	bf44      	itt	mi
 80120b0:	f043 0320 	orrmi.w	r3, r3, #32
 80120b4:	6023      	strmi	r3, [r4, #0]
 80120b6:	b11d      	cbz	r5, 80120c0 <_printf_i+0x19c>
 80120b8:	2310      	movs	r3, #16
 80120ba:	e7ad      	b.n	8012018 <_printf_i+0xf4>
 80120bc:	4826      	ldr	r0, [pc, #152]	@ (8012158 <_printf_i+0x234>)
 80120be:	e7e9      	b.n	8012094 <_printf_i+0x170>
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	f023 0320 	bic.w	r3, r3, #32
 80120c6:	6023      	str	r3, [r4, #0]
 80120c8:	e7f6      	b.n	80120b8 <_printf_i+0x194>
 80120ca:	4616      	mov	r6, r2
 80120cc:	e7bd      	b.n	801204a <_printf_i+0x126>
 80120ce:	6833      	ldr	r3, [r6, #0]
 80120d0:	6825      	ldr	r5, [r4, #0]
 80120d2:	6961      	ldr	r1, [r4, #20]
 80120d4:	1d18      	adds	r0, r3, #4
 80120d6:	6030      	str	r0, [r6, #0]
 80120d8:	062e      	lsls	r6, r5, #24
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	d501      	bpl.n	80120e2 <_printf_i+0x1be>
 80120de:	6019      	str	r1, [r3, #0]
 80120e0:	e002      	b.n	80120e8 <_printf_i+0x1c4>
 80120e2:	0668      	lsls	r0, r5, #25
 80120e4:	d5fb      	bpl.n	80120de <_printf_i+0x1ba>
 80120e6:	8019      	strh	r1, [r3, #0]
 80120e8:	2300      	movs	r3, #0
 80120ea:	6123      	str	r3, [r4, #16]
 80120ec:	4616      	mov	r6, r2
 80120ee:	e7bc      	b.n	801206a <_printf_i+0x146>
 80120f0:	6833      	ldr	r3, [r6, #0]
 80120f2:	1d1a      	adds	r2, r3, #4
 80120f4:	6032      	str	r2, [r6, #0]
 80120f6:	681e      	ldr	r6, [r3, #0]
 80120f8:	6862      	ldr	r2, [r4, #4]
 80120fa:	2100      	movs	r1, #0
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7ee f90f 	bl	8000320 <memchr>
 8012102:	b108      	cbz	r0, 8012108 <_printf_i+0x1e4>
 8012104:	1b80      	subs	r0, r0, r6
 8012106:	6060      	str	r0, [r4, #4]
 8012108:	6863      	ldr	r3, [r4, #4]
 801210a:	6123      	str	r3, [r4, #16]
 801210c:	2300      	movs	r3, #0
 801210e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012112:	e7aa      	b.n	801206a <_printf_i+0x146>
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	4632      	mov	r2, r6
 8012118:	4649      	mov	r1, r9
 801211a:	4640      	mov	r0, r8
 801211c:	47d0      	blx	sl
 801211e:	3001      	adds	r0, #1
 8012120:	d0ad      	beq.n	801207e <_printf_i+0x15a>
 8012122:	6823      	ldr	r3, [r4, #0]
 8012124:	079b      	lsls	r3, r3, #30
 8012126:	d413      	bmi.n	8012150 <_printf_i+0x22c>
 8012128:	68e0      	ldr	r0, [r4, #12]
 801212a:	9b03      	ldr	r3, [sp, #12]
 801212c:	4298      	cmp	r0, r3
 801212e:	bfb8      	it	lt
 8012130:	4618      	movlt	r0, r3
 8012132:	e7a6      	b.n	8012082 <_printf_i+0x15e>
 8012134:	2301      	movs	r3, #1
 8012136:	4632      	mov	r2, r6
 8012138:	4649      	mov	r1, r9
 801213a:	4640      	mov	r0, r8
 801213c:	47d0      	blx	sl
 801213e:	3001      	adds	r0, #1
 8012140:	d09d      	beq.n	801207e <_printf_i+0x15a>
 8012142:	3501      	adds	r5, #1
 8012144:	68e3      	ldr	r3, [r4, #12]
 8012146:	9903      	ldr	r1, [sp, #12]
 8012148:	1a5b      	subs	r3, r3, r1
 801214a:	42ab      	cmp	r3, r5
 801214c:	dcf2      	bgt.n	8012134 <_printf_i+0x210>
 801214e:	e7eb      	b.n	8012128 <_printf_i+0x204>
 8012150:	2500      	movs	r5, #0
 8012152:	f104 0619 	add.w	r6, r4, #25
 8012156:	e7f5      	b.n	8012144 <_printf_i+0x220>
 8012158:	08012599 	.word	0x08012599
 801215c:	080125aa 	.word	0x080125aa

08012160 <memmove>:
 8012160:	4288      	cmp	r0, r1
 8012162:	b510      	push	{r4, lr}
 8012164:	eb01 0402 	add.w	r4, r1, r2
 8012168:	d902      	bls.n	8012170 <memmove+0x10>
 801216a:	4284      	cmp	r4, r0
 801216c:	4623      	mov	r3, r4
 801216e:	d807      	bhi.n	8012180 <memmove+0x20>
 8012170:	1e43      	subs	r3, r0, #1
 8012172:	42a1      	cmp	r1, r4
 8012174:	d008      	beq.n	8012188 <memmove+0x28>
 8012176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801217a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801217e:	e7f8      	b.n	8012172 <memmove+0x12>
 8012180:	4402      	add	r2, r0
 8012182:	4601      	mov	r1, r0
 8012184:	428a      	cmp	r2, r1
 8012186:	d100      	bne.n	801218a <memmove+0x2a>
 8012188:	bd10      	pop	{r4, pc}
 801218a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801218e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012192:	e7f7      	b.n	8012184 <memmove+0x24>

08012194 <_sbrk_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d06      	ldr	r5, [pc, #24]	@ (80121b0 <_sbrk_r+0x1c>)
 8012198:	2300      	movs	r3, #0
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	602b      	str	r3, [r5, #0]
 80121a0:	f7f0 fbda 	bl	8002958 <_sbrk>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d102      	bne.n	80121ae <_sbrk_r+0x1a>
 80121a8:	682b      	ldr	r3, [r5, #0]
 80121aa:	b103      	cbz	r3, 80121ae <_sbrk_r+0x1a>
 80121ac:	6023      	str	r3, [r4, #0]
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	240009f4 	.word	0x240009f4

080121b4 <_realloc_r>:
 80121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b8:	4607      	mov	r7, r0
 80121ba:	4614      	mov	r4, r2
 80121bc:	460d      	mov	r5, r1
 80121be:	b921      	cbnz	r1, 80121ca <_realloc_r+0x16>
 80121c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121c4:	4611      	mov	r1, r2
 80121c6:	f7ff bc5b 	b.w	8011a80 <_malloc_r>
 80121ca:	b92a      	cbnz	r2, 80121d8 <_realloc_r+0x24>
 80121cc:	f7ff fbec 	bl	80119a8 <_free_r>
 80121d0:	4625      	mov	r5, r4
 80121d2:	4628      	mov	r0, r5
 80121d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121d8:	f000 f81a 	bl	8012210 <_malloc_usable_size_r>
 80121dc:	4284      	cmp	r4, r0
 80121de:	4606      	mov	r6, r0
 80121e0:	d802      	bhi.n	80121e8 <_realloc_r+0x34>
 80121e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80121e6:	d8f4      	bhi.n	80121d2 <_realloc_r+0x1e>
 80121e8:	4621      	mov	r1, r4
 80121ea:	4638      	mov	r0, r7
 80121ec:	f7ff fc48 	bl	8011a80 <_malloc_r>
 80121f0:	4680      	mov	r8, r0
 80121f2:	b908      	cbnz	r0, 80121f8 <_realloc_r+0x44>
 80121f4:	4645      	mov	r5, r8
 80121f6:	e7ec      	b.n	80121d2 <_realloc_r+0x1e>
 80121f8:	42b4      	cmp	r4, r6
 80121fa:	4622      	mov	r2, r4
 80121fc:	4629      	mov	r1, r5
 80121fe:	bf28      	it	cs
 8012200:	4632      	movcs	r2, r6
 8012202:	f7ff fbc3 	bl	801198c <memcpy>
 8012206:	4629      	mov	r1, r5
 8012208:	4638      	mov	r0, r7
 801220a:	f7ff fbcd 	bl	80119a8 <_free_r>
 801220e:	e7f1      	b.n	80121f4 <_realloc_r+0x40>

08012210 <_malloc_usable_size_r>:
 8012210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012214:	1f18      	subs	r0, r3, #4
 8012216:	2b00      	cmp	r3, #0
 8012218:	bfbc      	itt	lt
 801221a:	580b      	ldrlt	r3, [r1, r0]
 801221c:	18c0      	addlt	r0, r0, r3
 801221e:	4770      	bx	lr

08012220 <_init>:
 8012220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012222:	bf00      	nop
 8012224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012226:	bc08      	pop	{r3}
 8012228:	469e      	mov	lr, r3
 801222a:	4770      	bx	lr

0801222c <_fini>:
 801222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222e:	bf00      	nop
 8012230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012232:	bc08      	pop	{r3}
 8012234:	469e      	mov	lr, r3
 8012236:	4770      	bx	lr
