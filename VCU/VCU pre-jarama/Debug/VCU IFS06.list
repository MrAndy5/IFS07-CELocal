
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e78  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08012148  08012148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080124e4  080124e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080124ec  080124ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080124f0  080124f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  080124f4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000994  2400006c  08012560  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a00  08012560  00014a00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025801  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  0003989b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  00040a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026726  00000000  00000000  00079cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001792a3  00000000  00000000  000a041c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002196bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  00219704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00221dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012130 	.word	0x08012130

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08012130 	.word	0x08012130

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f992 	bl	8002a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f9ea 	bl	8000acc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa56 	bl	8000ba8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 feba 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fe98 	bl	8001434 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa82 	bl	8000c0c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb1c 	bl	8000d44 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb82 	bl	8000e14 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fbfe 	bl	8000f10 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd16 	bl	8001144 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe40 	bl	800139c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fdca 	bl	80012b4 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fdf0 	bl	8001304 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fcf0 	bl	8001108 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 fdbe 	bl	80112a8 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc6e 	bl	800100c <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	4998      	ldr	r1, [pc, #608]	@ (8000994 <main+0x2a8>)
 8000734:	4898      	ldr	r0, [pc, #608]	@ (8000998 <main+0x2ac>)
 8000736:	f003 f95b 	bl	80039f0 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	4896      	ldr	r0, [pc, #600]	@ (800099c <main+0x2b0>)
 8000742:	f000 ff69 	bl	8001618 <print>
#endif
		Error_Handler();
 8000746:	f001 fba9 	bl	8001e9c <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	4895      	ldr	r0, [pc, #596]	@ (80009a0 <main+0x2b4>)
 800074c:	f007 fa5c 	bl	8007c08 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	4893      	ldr	r0, [pc, #588]	@ (80009a4 <main+0x2b8>)
 8000758:	f000 ff5e 	bl	8001618 <print>
#endif
		Error_Handler();
 800075c:	f001 fb9e 	bl	8001e9c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	488e      	ldr	r0, [pc, #568]	@ (80009a0 <main+0x2b4>)
 8000766:	f007 fc41 	bl	8007fec <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	488d      	ldr	r0, [pc, #564]	@ (80009a8 <main+0x2bc>)
 8000772:	f000 ff51 	bl	8001618 <print>
#endif
		Error_Handler();
 8000776:	f001 fb91 	bl	8001e9c <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	488c      	ldr	r0, [pc, #560]	@ (80009ac <main+0x2c0>)
 800077c:	f007 fa44 	bl	8007c08 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	488a      	ldr	r0, [pc, #552]	@ (80009b0 <main+0x2c4>)
 8000788:	f000 ff46 	bl	8001618 <print>

#endif
		Error_Handler();
 800078c:	f001 fb86 	bl	8001e9c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4885      	ldr	r0, [pc, #532]	@ (80009ac <main+0x2c0>)
 8000796:	f007 fc29 	bl	8007fec <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	4884      	ldr	r0, [pc, #528]	@ (80009b4 <main+0x2c8>)
 80007a2:	f000 ff39 	bl	8001618 <print>
#endif
		Error_Handler();
 80007a6:	f001 fb79 	bl	8001e9c <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	4883      	ldr	r0, [pc, #524]	@ (80009b8 <main+0x2cc>)
 80007ac:	f007 fa2c 	bl	8007c08 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	4881      	ldr	r0, [pc, #516]	@ (80009bc <main+0x2d0>)
 80007b8:	f000 ff2e 	bl	8001618 <print>

#endif
		Error_Handler();
 80007bc:	f001 fb6e 	bl	8001e9c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	487c      	ldr	r0, [pc, #496]	@ (80009b8 <main+0x2cc>)
 80007c6:	f007 fc11 	bl	8007fec <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	487b      	ldr	r0, [pc, #492]	@ (80009c0 <main+0x2d4>)
 80007d2:	f000 ff21 	bl	8001618 <print>
#endif
		Error_Handler();
 80007d6:	f001 fb61 	bl	8001e9c <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	487a      	ldr	r0, [pc, #488]	@ (80009c4 <main+0x2d8>)
 80007dc:	f000 ff1c 	bl	8001618 <print>
#if (CALIBRATION)
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e0:	e009      	b.n	80007f6 <main+0x10a>
	{
		print("Solicitar tensión inversor");
 80007e2:	4878      	ldr	r0, [pc, #480]	@ (80009c4 <main+0x2d8>)
 80007e4:	f000 ff18 	bl	8001618 <print>
		if (config_inv_lectura_v == 1)
 80007e8:	4b77      	ldr	r3, [pc, #476]	@ (80009c8 <main+0x2dc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4876      	ldr	r0, [pc, #472]	@ (80009cc <main+0x2e0>)
 80007f2:	f000 ff11 	bl	8001618 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b74      	ldr	r3, [pc, #464]	@ (80009c8 <main+0x2dc>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f1      	beq.n	80007e2 <main+0xf6>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80007fe:	e031      	b.n	8000864 <main+0x178>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000800:	4b73      	ldr	r3, [pc, #460]	@ (80009d0 <main+0x2e4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4973      	ldr	r1, [pc, #460]	@ (80009d4 <main+0x2e8>)
 8000808:	4873      	ldr	r0, [pc, #460]	@ (80009d8 <main+0x2ec>)
 800080a:	f010 fff1 	bl	80117f0 <siprintf>
		print(TxBuffer);
 800080e:	4872      	ldr	r0, [pc, #456]	@ (80009d8 <main+0x2ec>)
 8000810:	f000 ff02 	bl	8001618 <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000814:	4b71      	ldr	r3, [pc, #452]	@ (80009dc <main+0x2f0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a71      	ldr	r2, [pc, #452]	@ (80009e0 <main+0x2f4>)
 800081a:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 800081c:	4b70      	ldr	r3, [pc, #448]	@ (80009e0 <main+0x2f4>)
 800081e:	2202      	movs	r2, #2
 8000820:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000822:	4b6f      	ldr	r3, [pc, #444]	@ (80009e0 <main+0x2f4>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000828:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800082a:	4b6d      	ldr	r3, [pc, #436]	@ (80009e0 <main+0x2f4>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000830:	4b6b      	ldr	r3, [pc, #428]	@ (80009e0 <main+0x2f4>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000836:	4b66      	ldr	r3, [pc, #408]	@ (80009d0 <main+0x2e4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b69      	ldr	r3, [pc, #420]	@ (80009e4 <main+0x2f8>)
 800083e:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000840:	4b63      	ldr	r3, [pc, #396]	@ (80009d0 <main+0x2e4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	121b      	asrs	r3, r3, #8
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b66      	ldr	r3, [pc, #408]	@ (80009e4 <main+0x2f8>)
 800084a:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 800084c:	4a65      	ldr	r2, [pc, #404]	@ (80009e4 <main+0x2f8>)
 800084e:	4964      	ldr	r1, [pc, #400]	@ (80009e0 <main+0x2f4>)
 8000850:	4856      	ldr	r0, [pc, #344]	@ (80009ac <main+0x2c0>)
 8000852:	f007 fa04 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		if (precarga_inv == 1)
 8000856:	4b64      	ldr	r3, [pc, #400]	@ (80009e8 <main+0x2fc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d102      	bne.n	8000864 <main+0x178>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 800085e:	4863      	ldr	r0, [pc, #396]	@ (80009ec <main+0x300>)
 8000860:	f000 feda 	bl	8001618 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000864:	4b60      	ldr	r3, [pc, #384]	@ (80009e8 <main+0x2fc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d104      	bne.n	8000876 <main+0x18a>
 800086c:	4b58      	ldr	r3, [pc, #352]	@ (80009d0 <main+0x2e4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000874:	dbc4      	blt.n	8000800 <main+0x114>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8000876:	4b59      	ldr	r3, [pc, #356]	@ (80009dc <main+0x2f0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a59      	ldr	r2, [pc, #356]	@ (80009e0 <main+0x2f4>)
 800087c:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 800087e:	4b58      	ldr	r3, [pc, #352]	@ (80009e0 <main+0x2f4>)
 8000880:	2202      	movs	r2, #2
 8000882:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000884:	4b56      	ldr	r3, [pc, #344]	@ (80009e0 <main+0x2f4>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088a:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 800088c:	4b54      	ldr	r3, [pc, #336]	@ (80009e0 <main+0x2f4>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000892:	4b53      	ldr	r3, [pc, #332]	@ (80009e0 <main+0x2f4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000898:	4b4d      	ldr	r3, [pc, #308]	@ (80009d0 <main+0x2e4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b51      	ldr	r3, [pc, #324]	@ (80009e4 <main+0x2f8>)
 80008a0:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008a2:	4b4b      	ldr	r3, [pc, #300]	@ (80009d0 <main+0x2e4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	121b      	asrs	r3, r3, #8
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b4e      	ldr	r3, [pc, #312]	@ (80009e4 <main+0x2f8>)
 80008ac:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008ae:	4a4d      	ldr	r2, [pc, #308]	@ (80009e4 <main+0x2f8>)
 80008b0:	494b      	ldr	r1, [pc, #300]	@ (80009e0 <main+0x2f4>)
 80008b2:	483e      	ldr	r0, [pc, #248]	@ (80009ac <main+0x2c0>)
 80008b4:	f007 f9d3 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 80008b8:	e03e      	b.n	8000938 <main+0x24c>
	{
		HAL_ADC_Start(&hadc1);
 80008ba:	4837      	ldr	r0, [pc, #220]	@ (8000998 <main+0x2ac>)
 80008bc:	f002 fea6 	bl	800360c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	4834      	ldr	r0, [pc, #208]	@ (8000998 <main+0x2ac>)
 80008c6:	f002 ff9f 	bl	8003808 <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 80008ca:	4833      	ldr	r0, [pc, #204]	@ (8000998 <main+0x2ac>)
 80008cc:	f003 f96c 	bl	8003ba8 <HAL_ADC_GetValue>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b46      	ldr	r3, [pc, #280]	@ (80009f0 <main+0x304>)
 80008d6:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 80008d8:	482f      	ldr	r0, [pc, #188]	@ (8000998 <main+0x2ac>)
 80008da:	f002 ff61 	bl	80037a0 <HAL_ADC_Stop>

		printValue(s_freno);
 80008de:	4b44      	ldr	r3, [pc, #272]	@ (80009f0 <main+0x304>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 feb6 	bl	8001654 <printValue>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	4842      	ldr	r0, [pc, #264]	@ (80009f4 <main+0x308>)
 80008ec:	f008 faa2 	bl	8008e34 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b40      	ldr	r3, [pc, #256]	@ (80009f8 <main+0x30c>)
 80008f6:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		printValue(start_button_act);
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <main+0x30c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fea9 	bl	8001654 <printValue>
		print("Botón Start + Freno:");
 8000902:	483e      	ldr	r0, [pc, #248]	@ (80009fc <main+0x310>)
 8000904:	f000 fe88 	bl	8001618 <print>
		if (start_button_act == 1)
 8000908:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <main+0x30c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d113      	bne.n	8000938 <main+0x24c>
		{

#if DEBUG
			printValue(s_freno);
 8000910:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <main+0x304>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fe9d 	bl	8001654 <printValue>
#endif
			if (s_freno > 900)
 800091a:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <main+0x304>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8000922:	dd06      	ble.n	8000932 <main+0x246>
			{
				boton_arranque = 1;
 8000924:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <main+0x314>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 800092a:	4836      	ldr	r0, [pc, #216]	@ (8000a04 <main+0x318>)
 800092c:	f000 fe74 	bl	8001618 <print>
 8000930:	e002      	b.n	8000938 <main+0x24c>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000932:	4835      	ldr	r0, [pc, #212]	@ (8000a08 <main+0x31c>)
 8000934:	f000 fe70 	bl	8001618 <print>
	while (boton_arranque == 0)
 8000938:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <main+0x314>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0bc      	beq.n	80008ba <main+0x1ce>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000940:	4832      	ldr	r0, [pc, #200]	@ (8000a0c <main+0x320>)
 8000942:	f000 fe69 	bl	8001618 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <main+0x324>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 800094c:	2201      	movs	r2, #1
 800094e:	2102      	movs	r1, #2
 8000950:	4830      	ldr	r0, [pc, #192]	@ (8000a14 <main+0x328>)
 8000952:	f008 fa87 	bl	8008e64 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000956:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800095a:	f002 f8ef 	bl	8002b3c <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 800095e:	2200      	movs	r2, #0
 8000960:	2102      	movs	r1, #2
 8000962:	482c      	ldr	r0, [pc, #176]	@ (8000a14 <main+0x328>)
 8000964:	f008 fa7e 	bl	8008e64 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000968:	482b      	ldr	r0, [pc, #172]	@ (8000a18 <main+0x32c>)
 800096a:	f000 fe55 	bl	8001618 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 800096e:	482b      	ldr	r0, [pc, #172]	@ (8000a1c <main+0x330>)
 8000970:	f00d fad4 	bl	800df1c <HAL_TIM_Base_Start_IT>

	// Estado STAND BY inversor
	while (state != 3)
 8000974:	e006      	b.n	8000984 <main+0x298>
	{
		if (state == 3)
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <main+0x334>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d102      	bne.n	8000984 <main+0x298>
		{
#if DEBUG
			print("Precarga");
 800097e:	4829      	ldr	r0, [pc, #164]	@ (8000a24 <main+0x338>)
 8000980:	f000 fe4a 	bl	8001618 <print>
	while (state != 3)
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <main+0x334>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d1f4      	bne.n	8000976 <main+0x28a>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 800098c:	4826      	ldr	r0, [pc, #152]	@ (8000a28 <main+0x33c>)
 800098e:	f000 fe43 	bl	8001618 <print>
#endif

	while (state != 4)
 8000992:	e083      	b.n	8000a9c <main+0x3b0>
 8000994:	240006fc 	.word	0x240006fc
 8000998:	24000094 	.word	0x24000094
 800099c:	08012148 	.word	0x08012148
 80009a0:	240001ec 	.word	0x240001ec
 80009a4:	08012168 	.word	0x08012168
 80009a8:	08012188 	.word	0x08012188
 80009ac:	2400028c 	.word	0x2400028c
 80009b0:	080121b0 	.word	0x080121b0
 80009b4:	080121d0 	.word	0x080121d0
 80009b8:	2400032c 	.word	0x2400032c
 80009bc:	080121f8 	.word	0x080121f8
 80009c0:	08012218 	.word	0x08012218
 80009c4:	08012240 	.word	0x08012240
 80009c8:	2400008c 	.word	0x2400008c
 80009cc:	0801225c 	.word	0x0801225c
 80009d0:	240006f4 	.word	0x240006f4
 80009d4:	08012290 	.word	0x08012290
 80009d8:	2400078c 	.word	0x2400078c
 80009dc:	24000004 	.word	0x24000004
 80009e0:	24000654 	.word	0x24000654
 80009e4:	240006d8 	.word	0x240006d8
 80009e8:	24000088 	.word	0x24000088
 80009ec:	080122a8 	.word	0x080122a8
 80009f0:	2400070c 	.word	0x2400070c
 80009f4:	58021800 	.word	0x58021800
 80009f8:	240006f0 	.word	0x240006f0
 80009fc:	080122c4 	.word	0x080122c4
 8000a00:	24000090 	.word	0x24000090
 8000a04:	080122dc 	.word	0x080122dc
 8000a08:	080122fc 	.word	0x080122fc
 8000a0c:	08012318 	.word	0x08012318
 8000a10:	24000888 	.word	0x24000888
 8000a14:	58020800 	.word	0x58020800
 8000a18:	08012328 	.word	0x08012328
 8000a1c:	24000494 	.word	0x24000494
 8000a20:	2400071a 	.word	0x2400071a
 8000a24:	08012338 	.word	0x08012338
 8000a28:	08012344 	.word	0x08012344
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <main+0x3c4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <main+0x3c8>)
 8000a32:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <main+0x3c8>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <main+0x3c8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <main+0x3cc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <main+0x3cc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <main+0x3cc>)
 8000a4e:	2204      	movs	r2, #4
 8000a50:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a52:	4a19      	ldr	r2, [pc, #100]	@ (8000ab8 <main+0x3cc>)
 8000a54:	4917      	ldr	r1, [pc, #92]	@ (8000ab4 <main+0x3c8>)
 8000a56:	4819      	ldr	r0, [pc, #100]	@ (8000abc <main+0x3d0>)
 8000a58:	f007 f901 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <main+0x3c8>)
 8000a5e:	f240 3262 	movw	r2, #866	@ 0x362
 8000a62:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <main+0x3c8>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <main+0x3d4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <main+0x3cc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <main+0x3cc>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <main+0x3d4>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <main+0x3cc>)
 8000a84:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <main+0x3cc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <main+0x3cc>)
 8000a8e:	4909      	ldr	r1, [pc, #36]	@ (8000ab4 <main+0x3c8>)
 8000a90:	480a      	ldr	r0, [pc, #40]	@ (8000abc <main+0x3d0>)
 8000a92:	f007 f8e4 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000a96:	200a      	movs	r0, #10
 8000a98:	f002 f850 	bl	8002b3c <HAL_Delay>
	while (state != 4)
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <main+0x3d8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d1c3      	bne.n	8000a2c <main+0x340>

	}

#if DEBUG
	print("state: ready");
 8000aa4:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <main+0x3dc>)
 8000aa6:	f000 fdb7 	bl	8001618 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <main+0x3be>
 8000aae:	bf00      	nop
 8000ab0:	24000000 	.word	0x24000000
 8000ab4:	24000608 	.word	0x24000608
 8000ab8:	240006c8 	.word	0x240006c8
 8000abc:	240001ec 	.word	0x240001ec
 8000ac0:	24000718 	.word	0x24000718
 8000ac4:	2400071a 	.word	0x2400071a
 8000ac8:	08012358 	.word	0x08012358

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09c      	sub	sp, #112	@ 0x70
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	224c      	movs	r2, #76	@ 0x4c
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f010 feaa 	bl	8011834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f010 fea4 	bl	8011834 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f008 f9d3 	bl	8008e98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000afc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0e:	bf00      	nop
 8000b10:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <SystemClock_Config+0xd8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b1c:	d1f8      	bne.n	8000b10 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b34:	232c      	movs	r3, #44	@ 0x2c
 8000b36:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b44:	230c      	movs	r3, #12
 8000b46:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 f9d9 	bl	8008f0c <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b60:	f001 f99c 	bl	8001e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	233f      	movs	r3, #63	@ 0x3f
 8000b66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b70:	2308      	movs	r3, #8
 8000b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b74:	2340      	movs	r3, #64	@ 0x40
 8000b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b78:	2340      	movs	r3, #64	@ 0x40
 8000b7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b82:	2340      	movs	r3, #64	@ 0x40
 8000b84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f008 fd98 	bl	80096c0 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b96:	f001 f981 	bl	8001e9c <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3770      	adds	r7, #112	@ 0x70
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58024800 	.word	0x58024800

08000ba8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0ae      	sub	sp, #184	@ 0xb8
 8000bac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	22b8      	movs	r2, #184	@ 0xb8
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f010 fe3d 	bl	8011834 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000bba:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000bbe:	f04f 0300 	mov.w	r3, #0
 8000bc2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bda:	23c0      	movs	r3, #192	@ 0xc0
 8000bdc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bea:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f009 f8ef 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000c00:	f001 f94c 	bl	8001e9c <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	37b8      	adds	r7, #184	@ 0xb8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	@ 0x30
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2224      	movs	r2, #36	@ 0x24
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f010 fe05 	bl	8011834 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c2a:	4b41      	ldr	r3, [pc, #260]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c2c:	4a41      	ldr	r2, [pc, #260]	@ (8000d34 <MX_ADC1_Init+0x128>)
 8000c2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c30:	4b3f      	ldr	r3, [pc, #252]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c38:	4b3d      	ldr	r3, [pc, #244]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c44:	4b3a      	ldr	r3, [pc, #232]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c4a:	4b39      	ldr	r3, [pc, #228]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c50:	4b37      	ldr	r3, [pc, #220]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c64:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6a:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c76:	4b2e      	ldr	r3, [pc, #184]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c82:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	4827      	ldr	r0, [pc, #156]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000c92:	f002 fab3 	bl	80031fc <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c9c:	f001 f8fe 	bl	8001e9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4821      	ldr	r0, [pc, #132]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000cac:	f004 fa92 	bl	80051d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000cb6:	f001 f8f1 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <MX_ADC1_Init+0x12c>)
 8000cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4814      	ldr	r0, [pc, #80]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000ce0:	f003 f9c8 	bl	8004074 <HAL_ADC_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000cea:	f001 f8d7 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_ADC1_Init+0x130>)
 8000cf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000cfc:	f003 f9ba 	bl	8004074 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d06:	f001 f8c9 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <MX_ADC1_Init+0x134>)
 8000d0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d0e:	2312      	movs	r3, #18
 8000d10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <MX_ADC1_Init+0x124>)
 8000d18:	f003 f9ac 	bl	8004074 <HAL_ADC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d22:	f001 f8bb 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	@ 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	24000094 	.word	0x24000094
 8000d34:	40022000 	.word	0x40022000
 8000d38:	10c00010 	.word	0x10c00010
 8000d3c:	14f00020 	.word	0x14f00020
 8000d40:	08600004 	.word	0x08600004

08000d44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2224      	movs	r2, #36	@ 0x24
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f010 fd6f 	bl	8011834 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d58:	4a2c      	ldr	r2, [pc, #176]	@ (8000e0c <MX_ADC2_Init+0xc8>)
 8000d5a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d5e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d62:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d64:	4b28      	ldr	r3, [pc, #160]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d70:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d76:	4b24      	ldr	r3, [pc, #144]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dbc:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000dbe:	f002 fa1d 	bl	80031fc <HAL_ADC_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dc8:	f001 f868 	bl	8001e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dcc:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <MX_ADC2_Init+0xcc>)
 8000dce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dd8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ddc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dde:	2304      	movs	r3, #4
 8000de0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_ADC2_Init+0xc4>)
 8000df2:	f003 f93f 	bl	8004074 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000dfc:	f001 f84e 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	@ 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	24000104 	.word	0x24000104
 8000e0c:	40022100 	.word	0x40022100
 8000e10:	25b00200 	.word	0x25b00200

08000e14 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e1c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f0c <MX_FDCAN1_Init+0xf8>)
 8000e1e:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e20:	4b39      	ldr	r3, [pc, #228]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e2c:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e32:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e38:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e3e:	4b32      	ldr	r3, [pc, #200]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e40:	2206      	movs	r2, #6
 8000e42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e44:	4b30      	ldr	r3, [pc, #192]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e56:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e62:	4b29      	ldr	r3, [pc, #164]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e68:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e74:	4b24      	ldr	r3, [pc, #144]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e80:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e82:	2220      	movs	r2, #32
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e86:	4b20      	ldr	r3, [pc, #128]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e8e:	2220      	movs	r2, #32
 8000e90:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000ec4:	f006 fc4c 	bl	8007760 <HAL_FDCAN_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000ece:	f000 ffe5 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000eea:	463b      	mov	r3, r7
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <MX_FDCAN1_Init+0xf4>)
 8000ef0:	f006 fe14 	bl	8007b1c <HAL_FDCAN_ConfigFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000efa:	f000 ffcf 	bl	8001e9c <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	240001ec 	.word	0x240001ec
 8000f0c:	4000a000 	.word	0x4000a000

08000f10 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f16:	4b3b      	ldr	r3, [pc, #236]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f18:	4a3b      	ldr	r2, [pc, #236]	@ (8001008 <MX_FDCAN2_Init+0xf8>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f1c:	4b39      	ldr	r3, [pc, #228]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f22:	4b38      	ldr	r3, [pc, #224]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f28:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f2e:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f34:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f3a:	4b32      	ldr	r3, [pc, #200]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f3c:	2206      	movs	r2, #6
 8000f3e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f40:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f46:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f4e:	2205      	movs	r2, #5
 8000f50:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f5e:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f76:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f7e:	2210      	movs	r2, #16
 8000f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fae:	2210      	movs	r2, #16
 8000fb0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fbe:	4811      	ldr	r0, [pc, #68]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fc0:	f006 fbce 	bl	8007760 <HAL_FDCAN_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000fca:	f000 ff67 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fd2:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_FDCAN2_Init+0xf4>)
 8000fee:	f006 fd95 	bl	8007b1c <HAL_FDCAN_ConfigFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000ff8:	f000 ff50 	bl	8001e9c <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2400028c 	.word	0x2400028c
 8001008:	4000a400 	.word	0x4000a400

0800100c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001012:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001014:	4a3b      	ldr	r2, [pc, #236]	@ (8001104 <MX_FDCAN3_Init+0xf8>)
 8001016:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001018:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800101e:	4b38      	ldr	r3, [pc, #224]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001024:	4b36      	ldr	r3, [pc, #216]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001026:	2200      	movs	r2, #0
 8001028:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 800102a:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800102c:	2200      	movs	r2, #0
 800102e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001030:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001032:	2200      	movs	r2, #0
 8001034:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001036:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001038:	2206      	movs	r2, #6
 800103a:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800103c:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800103e:	2201      	movs	r2, #1
 8001040:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001042:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001044:	2202      	movs	r2, #2
 8001046:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001048:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800104a:	2205      	movs	r2, #5
 800104c:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001050:	2201      	movs	r2, #1
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001056:	2201      	movs	r2, #1
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800105c:	2201      	movs	r2, #1
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001062:	2201      	movs	r2, #1
 8001064:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001068:	2200      	movs	r2, #0
 800106a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800106e:	2201      	movs	r2, #1
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 8001072:	4b23      	ldr	r3, [pc, #140]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001074:	2201      	movs	r2, #1
 8001076:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800107a:	2210      	movs	r2, #16
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800107e:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001080:	2204      	movs	r2, #4
 8001082:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001086:	2210      	movs	r2, #16
 8001088:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800108a:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800108c:	2204      	movs	r2, #4
 800108e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001092:	2200      	movs	r2, #0
 8001094:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 8001098:	2204      	movs	r2, #4
 800109a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 80010b6:	2204      	movs	r2, #4
 80010b8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80010ba:	4811      	ldr	r0, [pc, #68]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 80010bc:	f006 fb50 	bl	8007760 <HAL_FDCAN_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 80010c6:	f000 fee9 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80010ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ce:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_FDCAN3_Init+0xf4>)
 80010ea:	f006 fd17 	bl	8007b1c <HAL_FDCAN_ConfigFilter>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 80010f4:	f000 fed2 	bl	8001e9c <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400032c 	.word	0x2400032c
 8001104:	4000d400 	.word	0x4000d400

08001108 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_SDMMC1_SD_Init+0x34>)
 800110e:	4a0c      	ldr	r2, [pc, #48]	@ (8001140 <MX_SDMMC1_SD_Init+0x38>)
 8001110:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_SDMMC1_SD_Init+0x34>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_SDMMC1_SD_Init+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_SDMMC1_SD_Init+0x34>)
 8001120:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001124:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <MX_SDMMC1_SD_Init+0x34>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <MX_SDMMC1_SD_Init+0x34>)
 800112e:	2202      	movs	r2, #2
 8001130:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	240003cc 	.word	0x240003cc
 8001140:	52007000 	.word	0x52007000

08001144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09c      	sub	sp, #112	@ 0x70
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2234      	movs	r2, #52	@ 0x34
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f010 fb58 	bl	8011834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001184:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <MX_TIM1_Init+0x168>)
 8001186:	4a4a      	ldr	r2, [pc, #296]	@ (80012b0 <MX_TIM1_Init+0x16c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800118a:	4b48      	ldr	r3, [pc, #288]	@ (80012ac <MX_TIM1_Init+0x168>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <MX_TIM1_Init+0x168>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <MX_TIM1_Init+0x168>)
 8001198:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800119c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b43      	ldr	r3, [pc, #268]	@ (80012ac <MX_TIM1_Init+0x168>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a4:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <MX_TIM1_Init+0x168>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011aa:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <MX_TIM1_Init+0x168>)
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b0:	483e      	ldr	r0, [pc, #248]	@ (80012ac <MX_TIM1_Init+0x168>)
 80011b2:	f00c fe5b 	bl	800de6c <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011bc:	f000 fe6e 	bl	8001e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011ca:	4619      	mov	r1, r3
 80011cc:	4837      	ldr	r0, [pc, #220]	@ (80012ac <MX_TIM1_Init+0x168>)
 80011ce:	f00d f9a7 	bl	800e520 <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011d8:	f000 fe60 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011dc:	4833      	ldr	r0, [pc, #204]	@ (80012ac <MX_TIM1_Init+0x168>)
 80011de:	f00c ff23 	bl	800e028 <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011e8:	f000 fe58 	bl	8001e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011fc:	4619      	mov	r1, r3
 80011fe:	482b      	ldr	r0, [pc, #172]	@ (80012ac <MX_TIM1_Init+0x168>)
 8001200:	f00d fed4 	bl	800efac <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800120a:	f000 fe47 	bl	8001e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	@ 0x60
 8001210:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	481e      	ldr	r0, [pc, #120]	@ (80012ac <MX_TIM1_Init+0x168>)
 8001234:	f00d f860 	bl	800e2f8 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800123e:	f000 fe2d 	bl	8001e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001242:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001246:	2204      	movs	r2, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4818      	ldr	r0, [pc, #96]	@ (80012ac <MX_TIM1_Init+0x168>)
 800124c:	f00d f854 	bl	800e2f8 <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001256:	f000 fe21 	bl	8001e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800126e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001272:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800127c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <MX_TIM1_Init+0x168>)
 8001290:	f00d ff28 	bl	800f0e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800129a:	f000 fdff 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800129e:	4803      	ldr	r0, [pc, #12]	@ (80012ac <MX_TIM1_Init+0x168>)
 80012a0:	f001 f974 	bl	800258c <HAL_TIM_MspPostInit>

}
 80012a4:	bf00      	nop
 80012a6:	3770      	adds	r7, #112	@ 0x70
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24000448 	.word	0x24000448
 80012b0:	40010000 	.word	0x40010000

080012b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012b8:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012ba:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <MX_TIM16_Init+0x4c>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012c0:	f44f 7204 	mov.w	r2, #528	@ 0x210
 80012c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_TIM16_Init+0x48>)
 80012e8:	f00c fdc0 	bl	800de6c <HAL_TIM_Base_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012f2:	f000 fdd3 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000494 	.word	0x24000494
 8001300:	40014400 	.word	0x40014400

08001304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800130a:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <MX_USART1_UART_Init+0x94>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134c:	4811      	ldr	r0, [pc, #68]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 800134e:	f00d ff73 	bl	800f238 <HAL_UART_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001358:	f000 fda0 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135c:	2100      	movs	r1, #0
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001360:	f00f f90d 	bl	801057e <HAL_UARTEx_SetTxFifoThreshold>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800136a:	f000 fd97 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001372:	f00f f942 	bl	80105fa <HAL_UARTEx_SetRxFifoThreshold>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 fd8e 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <MX_USART1_UART_Init+0x90>)
 8001382:	f00f f8c3 	bl	801050c <HAL_UARTEx_DisableFifoMode>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800138c:	f000 fd86 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	240004e0 	.word	0x240004e0
 8001398:	40011000 	.word	0x40011000

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b22      	ldr	r3, [pc, #136]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	@ (8001430 <MX_USART2_UART_Init+0x94>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e4:	4811      	ldr	r0, [pc, #68]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013e6:	f00d ff27 	bl	800f238 <HAL_UART_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013f0:	f000 fd54 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_USART2_UART_Init+0x90>)
 80013f8:	f00f f8c1 	bl	801057e <HAL_UARTEx_SetTxFifoThreshold>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001402:	f000 fd4b 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4808      	ldr	r0, [pc, #32]	@ (800142c <MX_USART2_UART_Init+0x90>)
 800140a:	f00f f8f6 	bl	80105fa <HAL_UARTEx_SetRxFifoThreshold>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001414:	f000 fd42 	bl	8001e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_USART2_UART_Init+0x90>)
 800141a:	f00f f877 	bl	801050c <HAL_UARTEx_DisableFifoMode>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001424:	f000 fd3a 	bl	8001e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	24000574 	.word	0x24000574
 8001430:	40004400 	.word	0x40004400

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_DMA_Init+0x3c>)
 800143c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001440:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <MX_DMA_Init+0x3c>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_DMA_Init+0x3c>)
 800144c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	200b      	movs	r0, #11
 800145e:	f004 f876 	bl	800554e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001462:	200b      	movs	r0, #11
 8001464:	f004 f88d 	bl	8005582 <HAL_NVIC_EnableIRQ>

}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	58024400 	.word	0x58024400

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	@ 0x38
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <MX_GPIO_Init+0x190>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001490:	4a5c      	ldr	r2, [pc, #368]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800149a:	4b5a      	ldr	r3, [pc, #360]	@ (8001604 <MX_GPIO_Init+0x190>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	4b56      	ldr	r3, [pc, #344]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ae:	4a55      	ldr	r2, [pc, #340]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b8:	4b52      	ldr	r3, [pc, #328]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	4a46      	ldr	r2, [pc, #280]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f4:	4b43      	ldr	r3, [pc, #268]	@ (8001604 <MX_GPIO_Init+0x190>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	4a3e      	ldr	r2, [pc, #248]	@ (8001604 <MX_GPIO_Init+0x190>)
 800150a:	f043 0320 	orr.w	r3, r3, #32
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001512:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	4a37      	ldr	r2, [pc, #220]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001530:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800153e:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	4a2f      	ldr	r2, [pc, #188]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800154a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <MX_GPIO_Init+0x190>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <MX_GPIO_Init+0x190>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <MX_GPIO_Init+0x190>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2103      	movs	r1, #3
 800157e:	4822      	ldr	r0, [pc, #136]	@ (8001608 <MX_GPIO_Init+0x194>)
 8001580:	f007 fc70 	bl	8008e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158a:	4820      	ldr	r0, [pc, #128]	@ (800160c <MX_GPIO_Init+0x198>)
 800158c:	f007 fc6a 	bl	8008e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001590:	2303      	movs	r3, #3
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4818      	ldr	r0, [pc, #96]	@ (8001608 <MX_GPIO_Init+0x194>)
 80015a8:	f007 fa9c 	bl	8008ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 80015ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4813      	ldr	r0, [pc, #76]	@ (8001610 <MX_GPIO_Init+0x19c>)
 80015c2:	f007 fa8f 	bl	8008ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80015c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_GPIO_Init+0x198>)
 80015e0:	f007 fa80 	bl	8008ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4807      	ldr	r0, [pc, #28]	@ (8001614 <MX_GPIO_Init+0x1a0>)
 80015f8:	f007 fa74 	bl	8008ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fc:	bf00      	nop
 80015fe:	3738      	adds	r7, #56	@ 0x38
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	58024400 	.word	0x58024400
 8001608:	58020800 	.word	0x58020800
 800160c:	58021000 	.word	0x58021000
 8001610:	58021400 	.word	0x58021400
 8001614:	58021800 	.word	0x58021800

08001618 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4909      	ldr	r1, [pc, #36]	@ (8001648 <print+0x30>)
 8001624:	4809      	ldr	r0, [pc, #36]	@ (800164c <print+0x34>)
 8001626:	f010 f8e3 	bl	80117f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800162a:	4808      	ldr	r0, [pc, #32]	@ (800164c <print+0x34>)
 800162c:	f7fe fe70 	bl	8000310 <strlen>
 8001630:	4603      	mov	r3, r0
 8001632:	b29a      	uxth	r2, r3
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	4904      	ldr	r1, [pc, #16]	@ (800164c <print+0x34>)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <print+0x38>)
 800163c:	f00d fe4c 	bl	800f2d8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	08012368 	.word	0x08012368
 800164c:	24000728 	.word	0x24000728
 8001650:	24000574 	.word	0x24000574

08001654 <printValue>:

void printValue(int value)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4909      	ldr	r1, [pc, #36]	@ (8001684 <printValue+0x30>)
 8001660:	4809      	ldr	r0, [pc, #36]	@ (8001688 <printValue+0x34>)
 8001662:	f010 f8c5 	bl	80117f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001666:	4808      	ldr	r0, [pc, #32]	@ (8001688 <printValue+0x34>)
 8001668:	f7fe fe52 	bl	8000310 <strlen>
 800166c:	4603      	mov	r3, r0
 800166e:	b29a      	uxth	r2, r3
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	4904      	ldr	r1, [pc, #16]	@ (8001688 <printValue+0x34>)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <printValue+0x38>)
 8001678:	f00d fe2e 	bl	800f2d8 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	08012370 	.word	0x08012370
 8001688:	24000728 	.word	0x24000728
 800168c:	24000574 	.word	0x24000574

08001690 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80cd 	beq.w	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a67      	ldr	r2, [pc, #412]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d165      	bne.n	8001790 <HAL_FDCAN_RxFifo0Callback+0xec>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 80016c4:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016c6:	4a67      	ldr	r2, [pc, #412]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016c8:	2140      	movs	r1, #64	@ 0x40
 80016ca:	4867      	ldr	r0, [pc, #412]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016cc:	f006 fb22 	bl	8007d14 <HAL_FDCAN_GetRxMessage>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80be 	bne.w	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 80016d8:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f240 4266 	movw	r2, #1126	@ 0x466
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d03c      	beq.n	800175e <HAL_FDCAN_RxFifo0Callback+0xba>
 80016e4:	f240 4266 	movw	r2, #1126	@ 0x466
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f200 80b3 	bhi.w	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
 80016ee:	f240 4261 	movw	r2, #1121	@ 0x461
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d004      	beq.n	8001700 <HAL_FDCAN_RxFifo0Callback+0x5c>
 80016f6:	f240 4263 	movw	r2, #1123	@ 0x463
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d015      	beq.n	800172a <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 80016fe:	e0a9      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					state = RxData_Inv[4] & 0xF;
 8001700:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b58      	ldr	r3, [pc, #352]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 800170c:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 800170e:	4b57      	ldr	r3, [pc, #348]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d004      	beq.n	8001720 <HAL_FDCAN_RxFifo0Callback+0x7c>
 8001716:	4b55      	ldr	r3, [pc, #340]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b0b      	cmp	r3, #11
 800171c:	f040 8093 	bne.w	8001846 <HAL_FDCAN_RxFifo0Callback+0x1a2>
						error = RxData_Inv[2];
 8001720:	4b4f      	ldr	r3, [pc, #316]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001722:	789a      	ldrb	r2, [r3, #2]
 8001724:	4b52      	ldr	r3, [pc, #328]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001726:	701a      	strb	r2, [r3, #0]
					break;
 8001728:	e08d      	b.n	8001846 <HAL_FDCAN_RxFifo0Callback+0x1a2>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 800172a:	4b4d      	ldr	r3, [pc, #308]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800172c:	79db      	ldrb	r3, [r3, #7]
 800172e:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001732:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001734:	7a1b      	ldrb	r3, [r3, #8]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4313      	orrs	r3, r2
 800173a:	4a49      	ldr	r2, [pc, #292]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800173c:	7952      	ldrb	r2, [r2, #5]
 800173e:	4313      	orrs	r3, r2
 8001740:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001742:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 8001744:	4b4b      	ldr	r3, [pc, #300]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d07c      	beq.n	800184a <HAL_FDCAN_RxFifo0Callback+0x1a6>
						e_machine_rpm |= 0xFFF0000;
 8001750:	4b48      	ldr	r3, [pc, #288]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b48      	ldr	r3, [pc, #288]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001756:	4313      	orrs	r3, r2
 8001758:	4a46      	ldr	r2, [pc, #280]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800175a:	6013      	str	r3, [r2, #0]
					break;
 800175c:	e075      	b.n	800184a <HAL_FDCAN_RxFifo0Callback+0x1a6>
					if (RxHeader_Inv.DataLength == 6)
 800175e:	4b41      	ldr	r3, [pc, #260]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b06      	cmp	r3, #6
 8001764:	d173      	bne.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1aa>
						if (config_inv_lectura_v == 0)
 8001766:	4b45      	ldr	r3, [pc, #276]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_FDCAN_RxFifo0Callback+0xd2>
							config_inv_lectura_v = 1;
 800176e:	4b43      	ldr	r3, [pc, #268]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
					break;
 8001774:	e06b      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1aa>
						else if (config_inv_lectura_v == 1)
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d167      	bne.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1aa>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001780:	78db      	ldrb	r3, [r3, #3]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4a36      	ldr	r2, [pc, #216]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001786:	7892      	ldrb	r2, [r2, #2]
 8001788:	4313      	orrs	r3, r2
 800178a:	4a3d      	ldr	r2, [pc, #244]	@ (8001880 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 800178c:	6013      	str	r3, [r2, #0]
					break;
 800178e:	e05e      	b.n	800184e <HAL_FDCAN_RxFifo0Callback+0x1aa>
		else if (hfdcan->Instance == FDCAN2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3b      	ldr	r2, [pc, #236]	@ (8001884 <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d126      	bne.n	80017e8 <HAL_FDCAN_RxFifo0Callback+0x144>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 800179c:	4a3b      	ldr	r2, [pc, #236]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 800179e:	2140      	movs	r1, #64	@ 0x40
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f006 fab7 	bl	8007d14 <HAL_FDCAN_GetRxMessage>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d153      	bne.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
				switch (RxHeader_Acu.Identifier)
 80017ac:	4b37      	ldr	r3, [pc, #220]	@ (800188c <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d003      	beq.n	80017bc <HAL_FDCAN_RxFifo0Callback+0x118>
 80017b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017b8:	d008      	beq.n	80017cc <HAL_FDCAN_RxFifo0Callback+0x128>
}
 80017ba:	e04b      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					if (RxData_Acu[0] == 0)
 80017bc:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d146      	bne.n	8001852 <HAL_FDCAN_RxFifo0Callback+0x1ae>
						precarga_inv = 1;
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
					break;
 80017ca:	e042      	b.n	8001852 <HAL_FDCAN_RxFifo0Callback+0x1ae>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 80017cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001888 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017d4:	7852      	ldrb	r2, [r2, #1]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80017e2:	edc3 7a00 	vstr	s15, [r3]
					break;
 80017e6:	e035      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
		else if (hfdcan->Instance == FDCAN3)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001898 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d130      	bne.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 80017f2:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017f4:	4a2a      	ldr	r2, [pc, #168]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017f6:	2140      	movs	r1, #64	@ 0x40
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f006 fa8b 	bl	8007d14 <HAL_FDCAN_GetRxMessage>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d127      	bne.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
				switch (RxHeader_Dash.Identifier)
 8001804:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f240 1233 	movw	r2, #307	@ 0x133
 800180c:	4293      	cmp	r3, r2
 800180e:	d121      	bne.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001810:	4b22      	ldr	r3, [pc, #136]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b21b      	sxth	r3, r3
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	b21b      	sxth	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b21b      	sxth	r3, r3
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001828:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	b21b      	sxth	r3, r3
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001842:	801a      	strh	r2, [r3, #0]
}
 8001844:	e006      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 8001846:	bf00      	nop
 8001848:	e004      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 800184a:	bf00      	nop
 800184c:	e002      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <HAL_FDCAN_RxFifo0Callback+0x1b0>
					break;
 8001852:	bf00      	nop
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	4000a000 	.word	0x4000a000
 8001860:	240006d0 	.word	0x240006d0
 8001864:	2400062c 	.word	0x2400062c
 8001868:	240001ec 	.word	0x240001ec
 800186c:	2400071a 	.word	0x2400071a
 8001870:	24000886 	.word	0x24000886
 8001874:	240006f8 	.word	0x240006f8
 8001878:	0fff0000 	.word	0x0fff0000
 800187c:	2400008c 	.word	0x2400008c
 8001880:	240006f4 	.word	0x240006f4
 8001884:	4000a400 	.word	0x4000a400
 8001888:	240006e0 	.word	0x240006e0
 800188c:	24000678 	.word	0x24000678
 8001890:	24000088 	.word	0x24000088
 8001894:	24000008 	.word	0x24000008
 8001898:	4000d400 	.word	0x4000d400
 800189c:	240006e8 	.word	0x240006e8
 80018a0:	240006a0 	.word	0x240006a0
 80018a4:	24000702 	.word	0x24000702
 80018a8:	24000704 	.word	0x24000704

080018ac <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a03      	ldr	r2, [pc, #12]	@ (80018c8 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 80018ba:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	2400028c 	.word	0x2400028c
 80018cc:	00000000 	.word	0x00000000

080018d0 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 80018d6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b48 <setTorque+0x278>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018e6:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 80018ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b94      	ldr	r3, [pc, #592]	@ (8001b4c <setTorque+0x27c>)
 80018fa:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80018fc:	4b93      	ldr	r3, [pc, #588]	@ (8001b4c <setTorque+0x27c>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	2b64      	cmp	r3, #100	@ 0x64
 8001902:	d902      	bls.n	800190a <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 8001904:	4b91      	ldr	r3, [pc, #580]	@ (8001b4c <setTorque+0x27c>)
 8001906:	2264      	movs	r2, #100	@ 0x64
 8001908:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 800190a:	4b91      	ldr	r3, [pc, #580]	@ (8001b50 <setTorque+0x280>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800191a:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001b20 <setTorque+0x250>
 800191e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001922:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001926:	ee17 3a90 	vmov	r3, s15
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b89      	ldr	r3, [pc, #548]	@ (8001b54 <setTorque+0x284>)
 800192e:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001930:	4b88      	ldr	r3, [pc, #544]	@ (8001b54 <setTorque+0x284>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b64      	cmp	r3, #100	@ 0x64
 8001936:	d902      	bls.n	800193e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001938:	4b86      	ldr	r3, [pc, #536]	@ (8001b54 <setTorque+0x284>)
 800193a:	2264      	movs	r2, #100	@ 0x64
 800193c:	801a      	strh	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 800193e:	4886      	ldr	r0, [pc, #536]	@ (8001b58 <setTorque+0x288>)
 8001940:	f7ff fe6a 	bl	8001618 <print>
	printValue(s1_aceleracion_aux);
 8001944:	4b81      	ldr	r3, [pc, #516]	@ (8001b4c <setTorque+0x27c>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fe83 	bl	8001654 <printValue>
	print("");
 800194e:	4883      	ldr	r0, [pc, #524]	@ (8001b5c <setTorque+0x28c>)
 8001950:	f7ff fe62 	bl	8001618 <print>
	print("Sensor % 2: ");
 8001954:	4882      	ldr	r0, [pc, #520]	@ (8001b60 <setTorque+0x290>)
 8001956:	f7ff fe5f 	bl	8001618 <print>
	printValue(s2_aceleracion_aux);
 800195a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b54 <setTorque+0x284>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fe78 	bl	8001654 <printValue>
	print("");
 8001964:	487d      	ldr	r0, [pc, #500]	@ (8001b5c <setTorque+0x28c>)
 8001966:	f7ff fe57 	bl	8001618 <print>
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 800196a:	4b78      	ldr	r3, [pc, #480]	@ (8001b4c <setTorque+0x27c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b08      	cmp	r3, #8
 8001970:	d911      	bls.n	8001996 <setTorque+0xc6>
 8001972:	4b78      	ldr	r3, [pc, #480]	@ (8001b54 <setTorque+0x284>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d90d      	bls.n	8001996 <setTorque+0xc6>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800197a:	4b74      	ldr	r3, [pc, #464]	@ (8001b4c <setTorque+0x27c>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	4b74      	ldr	r3, [pc, #464]	@ (8001b54 <setTorque+0x284>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	4413      	add	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	da00      	bge.n	800198c <setTorque+0xbc>
 800198a:	3301      	adds	r3, #1
 800198c:	105b      	asrs	r3, r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b74      	ldr	r3, [pc, #464]	@ (8001b64 <setTorque+0x294>)
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	e002      	b.n	800199c <setTorque+0xcc>
	}
	else
	{
		torque_total = 0;
 8001996:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <setTorque+0x294>)
 8001998:	2200      	movs	r2, #0
 800199a:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 800199c:	4b71      	ldr	r3, [pc, #452]	@ (8001b64 <setTorque+0x294>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d803      	bhi.n	80019ac <setTorque+0xdc>
	{
		torque_total = 0;
 80019a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <setTorque+0x294>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e006      	b.n	80019ba <setTorque+0xea>
	}
	else if (torque_total > 90)
 80019ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001b64 <setTorque+0x294>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	2b5a      	cmp	r3, #90	@ 0x5a
 80019b2:	d902      	bls.n	80019ba <setTorque+0xea>
	{
		torque_total = 100;
 80019b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b64 <setTorque+0x294>)
 80019b6:	2264      	movs	r2, #100	@ 0x64
 80019b8:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80019ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001b68 <setTorque+0x298>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019c2:	4293      	cmp	r3, r2
 80019c4:	dd0a      	ble.n	80019dc <setTorque+0x10c>
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <setTorque+0x294>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	2b19      	cmp	r3, #25
 80019cc:	d906      	bls.n	80019dc <setTorque+0x10c>
	{
		print("EV_2_3");
 80019ce:	4867      	ldr	r0, [pc, #412]	@ (8001b6c <setTorque+0x29c>)
 80019d0:	f7ff fe22 	bl	8001618 <print>
		flag_EV_2_3 = 1;
 80019d4:	4b66      	ldr	r3, [pc, #408]	@ (8001b70 <setTorque+0x2a0>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e00c      	b.n	80019f6 <setTorque+0x126>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80019dc:	4b62      	ldr	r3, [pc, #392]	@ (8001b68 <setTorque+0x298>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019e4:	4293      	cmp	r3, r2
 80019e6:	dc06      	bgt.n	80019f6 <setTorque+0x126>
 80019e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b64 <setTorque+0x294>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d802      	bhi.n	80019f6 <setTorque+0x126>
	{
		flag_EV_2_3 = 0;
 80019f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b70 <setTorque+0x2a0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 80019f6:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <setTorque+0x27c>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b55      	ldr	r3, [pc, #340]	@ (8001b54 <setTorque+0x284>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bfb8      	it	lt
 8001a06:	425b      	neglt	r3, r3
 8001a08:	2b0a      	cmp	r3, #10
 8001a0a:	dd06      	ble.n	8001a1a <setTorque+0x14a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001a0c:	4859      	ldr	r0, [pc, #356]	@ (8001b74 <setTorque+0x2a4>)
 8001a0e:	f7ff fe03 	bl	8001618 <print>
		flag_T11_8_9 = 1;
 8001a12:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <setTorque+0x2a8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e007      	b.n	8001a2a <setTorque+0x15a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001a1a:	f001 f883 	bl	8002b24 <HAL_GetTick>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a56      	ldr	r2, [pc, #344]	@ (8001b7c <setTorque+0x2ac>)
 8001a22:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001a24:	4b54      	ldr	r3, [pc, #336]	@ (8001b78 <setTorque+0x2a8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001a2a:	4b51      	ldr	r3, [pc, #324]	@ (8001b70 <setTorque+0x2a0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <setTorque+0x16a>
 8001a32:	4b51      	ldr	r3, [pc, #324]	@ (8001b78 <setTorque+0x2a8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <setTorque+0x170>
	{
		torque_total = 0;
 8001a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <setTorque+0x294>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a40:	4b4f      	ldr	r3, [pc, #316]	@ (8001b80 <setTorque+0x2b0>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001b84 <setTorque+0x2b4>
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d53a      	bpl.n	8001aca <setTorque+0x1fa>
	{
		if (v_celda_min > 2800)
 8001a54:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <setTorque+0x2b0>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001b88 <setTorque+0x2b8>
 8001a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	dd1f      	ble.n	8001aa8 <setTorque+0x1d8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a68:	4b3e      	ldr	r3, [pc, #248]	@ (8001b64 <setTorque+0x294>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a74:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <setTorque+0x2b0>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a7e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b28 <setTorque+0x258>
 8001a82:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a86:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b30 <setTorque+0x260>
 8001a8a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001a8e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a92:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b38 <setTorque+0x268>
 8001a96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a9a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a9e:	ee17 2a90 	vmov	r2, s15
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8001b8c <setTorque+0x2bc>)
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e015      	b.n	8001ad4 <setTorque+0x204>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <setTorque+0x294>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ab4:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001b40 <setTorque+0x270>
 8001ab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001abc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ac0:	ee17 2a90 	vmov	r2, s15
 8001ac4:	4b31      	ldr	r3, [pc, #196]	@ (8001b8c <setTorque+0x2bc>)
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e004      	b.n	8001ad4 <setTorque+0x204>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <setTorque+0x294>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b8c <setTorque+0x2bc>)
 8001ad2:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <setTorque+0x294>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	d912      	bls.n	8001b02 <setTorque+0x232>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <setTorque+0x294>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <setTorque+0x2c0>)
 8001aec:	fb82 1203 	smull	r1, r2, r2, r3
 8001af0:	441a      	add	r2, r3
 8001af2:	1192      	asrs	r2, r2, #6
 8001af4:	17db      	asrs	r3, r3, #31
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b1a      	subs	r3, #26
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <setTorque+0x294>)
 8001b00:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001b02:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <setTorque+0x294>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001b10:	88bb      	ldrh	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w
 8001b20:	33333334 	.word	0x33333334
 8001b24:	401a3333 	.word	0x401a3333
 8001b28:	a1cac083 	.word	0xa1cac083
 8001b2c:	3ff5b645 	.word	0x3ff5b645
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40ad4c00 	.word	0x40ad4c00
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	408f4000 	.word	0x408f4000
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	3fa99999 	.word	0x3fa99999
 8001b48:	24000702 	.word	0x24000702
 8001b4c:	24000706 	.word	0x24000706
 8001b50:	24000704 	.word	0x24000704
 8001b54:	24000708 	.word	0x24000708
 8001b58:	08012384 	.word	0x08012384
 8001b5c:	08012394 	.word	0x08012394
 8001b60:	08012398 	.word	0x08012398
 8001b64:	24000710 	.word	0x24000710
 8001b68:	2400070c 	.word	0x2400070c
 8001b6c:	080123a8 	.word	0x080123a8
 8001b70:	24000720 	.word	0x24000720
 8001b74:	080123b0 	.word	0x080123b0
 8001b78:	24000724 	.word	0x24000724
 8001b7c:	2400071c 	.word	0x2400071c
 8001b80:	24000008 	.word	0x24000008
 8001b84:	455ac000 	.word	0x455ac000
 8001b88:	452f0000 	.word	0x452f0000
 8001b8c:	24000714 	.word	0x24000714
 8001b90:	b60b60b7 	.word	0xb60b60b7

08001b94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d88 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	f040 8165 	bne.w	8001e70 <HAL_TIM_PeriodElapsedCallback+0x2dc>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001ba6:	4b79      	ldr	r3, [pc, #484]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0x22>
 8001bae:	4b77      	ldr	r3, [pc, #476]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d11b      	bne.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x5a>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d117      	bne.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x5a>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001bbe:	4b75      	ldr	r3, [pc, #468]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001bc4:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001bc6:	4b74      	ldr	r3, [pc, #464]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001bc8:	2203      	movs	r2, #3
 8001bca:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001bcc:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001bd2:	4b72      	ldr	r3, [pc, #456]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001bd8:	4b70      	ldr	r3, [pc, #448]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001bde:	4b6f      	ldr	r3, [pc, #444]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001be0:	2206      	movs	r2, #6
 8001be2:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001be4:	4a6d      	ldr	r2, [pc, #436]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001be6:	496c      	ldr	r1, [pc, #432]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001be8:	486d      	ldr	r0, [pc, #436]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001bea:	f006 f838 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001bee:	4b67      	ldr	r3, [pc, #412]	@ (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b0d      	cmp	r3, #13
 8001bf4:	f200 813c 	bhi.w	8001e70 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8001bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c39 	.word	0x08001c39
 8001c04:	08001e71 	.word	0x08001e71
 8001c08:	08001e71 	.word	0x08001e71
 8001c0c:	08001c69 	.word	0x08001c69
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001e71 	.word	0x08001e71
 8001c18:	08001d27 	.word	0x08001d27
 8001c1c:	08001e71 	.word	0x08001e71
 8001c20:	08001e71 	.word	0x08001e71
 8001c24:	08001e71 	.word	0x08001e71
 8001c28:	08001dbd 	.word	0x08001dbd
 8001c2c:	08001dfd 	.word	0x08001dfd
 8001c30:	08001e71 	.word	0x08001e71
 8001c34:	08001e39 	.word	0x08001e39
		{
		case 0:
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c38:	4b56      	ldr	r3, [pc, #344]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c3e:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c42:	2203      	movs	r2, #3
 8001c44:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c46:	4b54      	ldr	r3, [pc, #336]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c4c:	4b53      	ldr	r3, [pc, #332]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c52:	4b52      	ldr	r3, [pc, #328]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001c58:	4b50      	ldr	r3, [pc, #320]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c60:	494d      	ldr	r1, [pc, #308]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c62:	484f      	ldr	r0, [pc, #316]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001c64:	f005 fffb 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		case 3:
#if DEBUG
			//print("state: standby");
#endif
			flag_react = 0;
 8001c68:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c6e:	4b49      	ldr	r3, [pc, #292]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a49      	ldr	r2, [pc, #292]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c74:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c76:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c78:	2203      	movs	r2, #3
 8001c7a:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c7c:	4b46      	ldr	r3, [pc, #280]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c82:	4b46      	ldr	r3, [pc, #280]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c88:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c94:	4a41      	ldr	r2, [pc, #260]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001c96:	4940      	ldr	r1, [pc, #256]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001c98:	4841      	ldr	r0, [pc, #260]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001c9a:	f005 ffe0 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001c9e:	4842      	ldr	r0, [pc, #264]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001ca0:	f7ff fcba 	bl	8001618 <print>
#endif
			if (flag_r2d == 1){
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d120      	bne.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x15a>
				TxHeader_Inv.Identifier = 0x362;
 8001cac:	4b3a      	ldr	r3, [pc, #232]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cae:	f240 3262 	movw	r2, #866	@ 0x362
 8001cb2:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 8001cb4:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	60da      	str	r2, [r3, #12]

				real_torque = 0;
 8001cba:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	801a      	strh	r2, [r3, #0]

				TxData_Inv[0] = 0x0;
 8001cc0:	4b36      	ldr	r3, [pc, #216]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001cc6:	4b35      	ldr	r3, [pc, #212]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = real_torque;
 8001ccc:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b32      	ldr	r3, [pc, #200]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cd4:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = 0x0;
 8001cd6:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	70da      	strb	r2, [r3, #3]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001cde:	492e      	ldr	r1, [pc, #184]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ce0:	482f      	ldr	r0, [pc, #188]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001ce2:	f005 ffbc 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
				flag_react = 0; // Reactivado
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
				TxData_Inv[2] = 0x4;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
			}

			break;
 8001cec:	e0c0      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x2dc>
				flag_react = 0;
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001cf4:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cfa:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001cfe:	2203      	movs	r2, #3
 8001d00:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d02:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
				TxData_Inv[0] = 0x0;
 8001d08:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d0e:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 8001d14:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d16:	2204      	movs	r2, #4
 8001d18:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d1a:	4a20      	ldr	r2, [pc, #128]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d1c:	491e      	ldr	r1, [pc, #120]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d1e:	4820      	ldr	r0, [pc, #128]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d20:	f005 ff9d 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
			break;
 8001d24:	e0a4      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x2dc>
		case 6:
			print("state: torque");
 8001d26:	4822      	ldr	r0, [pc, #136]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d28:	f7ff fc76 	bl	8001618 <print>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001d2c:	f7ff fdd0 	bl	80018d0 <setTorque>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d36:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001d38:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d3a:	f240 3262 	movw	r2, #866	@ 0x362
 8001d3e:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d42:	2204      	movs	r2, #4
 8001d44:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d4e:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d5c:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d70:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d78:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d7a:	4a08      	ldr	r2, [pc, #32]	@ (8001d9c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001d7c:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001d7e:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d80:	f005 ff6d 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
			//CAN_bus_off_check_reset(&hfdcan1);

			break;
 8001d84:	e074      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8001d86:	bf00      	nop
 8001d88:	24000494 	.word	0x24000494
 8001d8c:	2400071a 	.word	0x2400071a
 8001d90:	24000888 	.word	0x24000888
 8001d94:	24000000 	.word	0x24000000
 8001d98:	24000608 	.word	0x24000608
 8001d9c:	240006c8 	.word	0x240006c8
 8001da0:	240001ec 	.word	0x240001ec
 8001da4:	24000887 	.word	0x24000887
 8001da8:	08012358 	.word	0x08012358
 8001dac:	24000718 	.word	0x24000718
 8001db0:	080123b8 	.word	0x080123b8
 8001db4:	24000712 	.word	0x24000712
 8001db8:	24000713 	.word	0x24000713

		case 10:
			print("state: soft fault");
 8001dbc:	482e      	ldr	r0, [pc, #184]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001dbe:	f7ff fc2b 	bl	8001618 <print>
			printValue(error);
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fc44 	bl	8001654 <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001dcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001dd2:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001de6:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x13;
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001dee:	2213      	movs	r2, #19
 8001df0:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001df2:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001df4:	4923      	ldr	r1, [pc, #140]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001df6:	4825      	ldr	r0, [pc, #148]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001df8:	f005 ff31 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
												  TxData_Inv);
				}*/

		case 11:
			print("state: hard fault");
 8001dfc:	4824      	ldr	r0, [pc, #144]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001dfe:	f7ff fc0b 	bl	8001618 <print>
			flag_react = 1;
 8001e02:	4b24      	ldr	r3, [pc, #144]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e0e:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e12:	2203      	movs	r2, #3
 8001e14:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 13;
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e2a:	220d      	movs	r2, #13
 8001e2c:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001e2e:	4a16      	ldr	r2, [pc, #88]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e30:	4914      	ldr	r1, [pc, #80]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e32:	4816      	ldr	r0, [pc, #88]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001e34:	f005 ff13 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>

		case 13:
			print("state: shutdown");
 8001e38:	4817      	ldr	r0, [pc, #92]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e3a:	f7ff fbed 	bl	8001618 <print>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e44:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e48:	2203      	movs	r2, #3
 8001e4a:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001e64:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001e66:	4907      	ldr	r1, [pc, #28]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001e68:	4808      	ldr	r0, [pc, #32]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001e6a:	f005 fef8 	bl	8007c5e <HAL_FDCAN_AddMessageToTxFifoQ>


			break;
 8001e6e:	bf00      	nop
		}
#endif
	}
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	080123c8 	.word	0x080123c8
 8001e7c:	24000886 	.word	0x24000886
 8001e80:	24000000 	.word	0x24000000
 8001e84:	24000608 	.word	0x24000608
 8001e88:	240006c8 	.word	0x240006c8
 8001e8c:	240001ec 	.word	0x240001ec
 8001e90:	080123dc 	.word	0x080123dc
 8001e94:	24000887 	.word	0x24000887
 8001e98:	080123f0 	.word	0x080123f0

08001e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <Error_Handler+0x8>

08001ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_MspInit+0x30>)
 8001eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eb4:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <HAL_MspInit+0x30>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_MspInit+0x30>)
 8001ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	58024400 	.word	0x58024400

08001edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b090      	sub	sp, #64	@ 0x40
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a90      	ldr	r2, [pc, #576]	@ (800213c <HAL_ADC_MspInit+0x260>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	f040 80a3 	bne.w	8002046 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f00:	4b8f      	ldr	r3, [pc, #572]	@ (8002140 <HAL_ADC_MspInit+0x264>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a8e      	ldr	r2, [pc, #568]	@ (8002140 <HAL_ADC_MspInit+0x264>)
 8001f08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8002140 <HAL_ADC_MspInit+0x264>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10e      	bne.n	8001f30 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f12:	4b8c      	ldr	r3, [pc, #560]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f18:	4a8a      	ldr	r2, [pc, #552]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f1a:	f043 0320 	orr.w	r3, r3, #32
 8001f1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f22:	4b88      	ldr	r3, [pc, #544]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f30:	4b84      	ldr	r3, [pc, #528]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f36:	4a83      	ldr	r2, [pc, #524]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f40:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f54:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f5e:	4b79      	ldr	r3, [pc, #484]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f6c:	4b75      	ldr	r3, [pc, #468]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f72:	4a74      	ldr	r2, [pc, #464]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f7c:	4b71      	ldr	r3, [pc, #452]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001f8a:	2330      	movs	r3, #48	@ 0x30
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	486a      	ldr	r0, [pc, #424]	@ (8002148 <HAL_ADC_MspInit+0x26c>)
 8001f9e:	f006 fda1 	bl	8008ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4865      	ldr	r0, [pc, #404]	@ (800214c <HAL_ADC_MspInit+0x270>)
 8001fb6:	f006 fd95 	bl	8008ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001fba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4860      	ldr	r0, [pc, #384]	@ (8002150 <HAL_ADC_MspInit+0x274>)
 8001fd0:	f006 fd88 	bl	8008ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001fd4:	4b5f      	ldr	r3, [pc, #380]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001fd6:	4a60      	ldr	r2, [pc, #384]	@ (8002158 <HAL_ADC_MspInit+0x27c>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fda:	4b5e      	ldr	r3, [pc, #376]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001fdc:	2209      	movs	r2, #9
 8001fde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe0:	4b5c      	ldr	r3, [pc, #368]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fec:	4b59      	ldr	r3, [pc, #356]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001fee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff4:	4b57      	ldr	r3, [pc, #348]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ffc:	4b55      	ldr	r3, [pc, #340]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8001ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002002:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002004:	4b53      	ldr	r3, [pc, #332]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8002006:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800200a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	4b51      	ldr	r3, [pc, #324]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002012:	4b50      	ldr	r3, [pc, #320]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002018:	484e      	ldr	r0, [pc, #312]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 800201a:	f003 facd 	bl	80055b8 <HAL_DMA_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8002024:	f7ff ff3a 	bl	8001e9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 800202c:	659a      	str	r2, [r3, #88]	@ 0x58
 800202e:	4a49      	ldr	r2, [pc, #292]	@ (8002154 <HAL_ADC_MspInit+0x278>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	2012      	movs	r0, #18
 800203a:	f003 fa88 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800203e:	2012      	movs	r0, #18
 8002040:	f003 fa9f 	bl	8005582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002044:	e076      	b.n	8002134 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a44      	ldr	r2, [pc, #272]	@ (800215c <HAL_ADC_MspInit+0x280>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d171      	bne.n	8002134 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <HAL_ADC_MspInit+0x264>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a3a      	ldr	r2, [pc, #232]	@ (8002140 <HAL_ADC_MspInit+0x264>)
 8002058:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800205a:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <HAL_ADC_MspInit+0x264>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10e      	bne.n	8002080 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002062:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8002064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002068:	4a36      	ldr	r2, [pc, #216]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 800206a:	f043 0320 	orr.w	r3, r3, #32
 800206e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002072:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8002074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002086:	4a2f      	ldr	r2, [pc, #188]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002090:	4b2c      	ldr	r3, [pc, #176]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ae:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c2:	4a20      	ldr	r2, [pc, #128]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_ADC_MspInit+0x268>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80020da:	2320      	movs	r3, #32
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020de:	2303      	movs	r3, #3
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ea:	4619      	mov	r1, r3
 80020ec:	4816      	ldr	r0, [pc, #88]	@ (8002148 <HAL_ADC_MspInit+0x26c>)
 80020ee:	f006 fcf9 	bl	8008ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80020f2:	2301      	movs	r3, #1
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f6:	2303      	movs	r3, #3
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002102:	4619      	mov	r1, r3
 8002104:	4811      	ldr	r0, [pc, #68]	@ (800214c <HAL_ADC_MspInit+0x270>)
 8002106:	f006 fced 	bl	8008ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 800210a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002110:	2303      	movs	r3, #3
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	480c      	ldr	r0, [pc, #48]	@ (8002150 <HAL_ADC_MspInit+0x274>)
 8002120:	f006 fce0 	bl	8008ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2012      	movs	r0, #18
 800212a:	f003 fa10 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800212e:	2012      	movs	r0, #18
 8002130:	f003 fa27 	bl	8005582 <HAL_NVIC_EnableIRQ>
}
 8002134:	bf00      	nop
 8002136:	3740      	adds	r7, #64	@ 0x40
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	2400088c 	.word	0x2400088c
 8002144:	58024400 	.word	0x58024400
 8002148:	58020800 	.word	0x58020800
 800214c:	58020400 	.word	0x58020400
 8002150:	58021400 	.word	0x58021400
 8002154:	24000174 	.word	0x24000174
 8002158:	40020010 	.word	0x40020010
 800215c:	40022100 	.word	0x40022100

08002160 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0bc      	sub	sp, #240	@ 0xf0
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	22b8      	movs	r2, #184	@ 0xb8
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f00f fb57 	bl	8011834 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a8d      	ldr	r2, [pc, #564]	@ (80023c0 <HAL_FDCAN_MspInit+0x260>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d157      	bne.n	8002240 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002190:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	4618      	mov	r0, r3
 80021a8:	f007 fe16 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80021b2:	f7ff fe73 	bl	8001e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021b6:	4b83      	ldr	r3, [pc, #524]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a81      	ldr	r2, [pc, #516]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 80021be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021c0:	4b80      	ldr	r3, [pc, #512]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10e      	bne.n	80021e6 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021c8:	4b7f      	ldr	r3, [pc, #508]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80021ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021ce:	4a7e      	ldr	r2, [pc, #504]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80021d8:	4b7b      	ldr	r3, [pc, #492]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80021da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e6:	4b78      	ldr	r3, [pc, #480]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ec:	4a76      	ldr	r2, [pc, #472]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f6:	4b74      	ldr	r3, [pc, #464]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80021f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002204:	2303      	movs	r3, #3
 8002206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800221c:	2309      	movs	r3, #9
 800221e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002222:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002226:	4619      	mov	r1, r3
 8002228:	4868      	ldr	r0, [pc, #416]	@ (80023cc <HAL_FDCAN_MspInit+0x26c>)
 800222a:	f006 fc5b 	bl	8008ae4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2101      	movs	r1, #1
 8002232:	2013      	movs	r0, #19
 8002234:	f003 f98b 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002238:	2013      	movs	r0, #19
 800223a:	f003 f9a2 	bl	8005582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800223e:	e0ba      	b.n	80023b6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a62      	ldr	r2, [pc, #392]	@ (80023d0 <HAL_FDCAN_MspInit+0x270>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d158      	bne.n	80022fc <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800224a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225c:	f107 0320 	add.w	r3, r7, #32
 8002260:	4618      	mov	r0, r3
 8002262:	f007 fdb9 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 800226c:	f7ff fe16 	bl	8001e9c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002270:	4b54      	ldr	r3, [pc, #336]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4a53      	ldr	r2, [pc, #332]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 8002278:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800227a:	4b52      	ldr	r3, [pc, #328]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10e      	bne.n	80022a0 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002282:	4b51      	ldr	r3, [pc, #324]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 8002284:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002288:	4a4f      	ldr	r2, [pc, #316]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002292:	4b4d      	ldr	r3, [pc, #308]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 8002294:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a0:	4b49      	ldr	r3, [pc, #292]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80022a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a6:	4a48      	ldr	r2, [pc, #288]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022b0:	4b45      	ldr	r3, [pc, #276]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80022d8:	2309      	movs	r3, #9
 80022da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022e2:	4619      	mov	r1, r3
 80022e4:	483b      	ldr	r0, [pc, #236]	@ (80023d4 <HAL_FDCAN_MspInit+0x274>)
 80022e6:	f006 fbfd 	bl	8008ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2102      	movs	r1, #2
 80022ee:	2014      	movs	r0, #20
 80022f0:	f003 f92d 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80022f4:	2014      	movs	r0, #20
 80022f6:	f003 f944 	bl	8005582 <HAL_NVIC_EnableIRQ>
}
 80022fa:	e05c      	b.n	80023b6 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a35      	ldr	r2, [pc, #212]	@ (80023d8 <HAL_FDCAN_MspInit+0x278>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d157      	bne.n	80023b6 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002306:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002318:	f107 0320 	add.w	r3, r7, #32
 800231c:	4618      	mov	r0, r3
 800231e:	f007 fd5b 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8002328:	f7ff fdb8 	bl	8001e9c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800232c:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	4a24      	ldr	r2, [pc, #144]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 8002334:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002336:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <HAL_FDCAN_MspInit+0x264>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d10e      	bne.n	800235c <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 8002340:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800234e:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 8002350:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800235c:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002362:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 8002364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_FDCAN_MspInit+0x268>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800237a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800239a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800239e:	4619      	mov	r1, r3
 80023a0:	480e      	ldr	r0, [pc, #56]	@ (80023dc <HAL_FDCAN_MspInit+0x27c>)
 80023a2:	f006 fb9f 	bl	8008ae4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	209f      	movs	r0, #159	@ 0x9f
 80023ac:	f003 f8cf 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80023b0:	209f      	movs	r0, #159	@ 0x9f
 80023b2:	f003 f8e6 	bl	8005582 <HAL_NVIC_EnableIRQ>
}
 80023b6:	bf00      	nop
 80023b8:	37f0      	adds	r7, #240	@ 0xf0
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	4000a000 	.word	0x4000a000
 80023c4:	24000890 	.word	0x24000890
 80023c8:	58024400 	.word	0x58024400
 80023cc:	58020c00 	.word	0x58020c00
 80023d0:	4000a400 	.word	0x4000a400
 80023d4:	58020400 	.word	0x58020400
 80023d8:	4000d400 	.word	0x4000d400
 80023dc:	58021800 	.word	0x58021800

080023e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3e      	ldr	r2, [pc, #248]	@ (80024f8 <HAL_SD_MspInit+0x118>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d175      	bne.n	80024ee <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002402:	4b3e      	ldr	r3, [pc, #248]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002404:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002408:	4a3c      	ldr	r2, [pc, #240]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002412:	4b3a      	ldr	r3, [pc, #232]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002414:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a35      	ldr	r2, [pc, #212]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002444:	4a2d      	ldr	r2, [pc, #180]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800244e:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245c:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002462:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800246c:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <HAL_SD_MspInit+0x11c>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800247a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800247e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800248c:	230c      	movs	r3, #12
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	481a      	ldr	r0, [pc, #104]	@ (8002500 <HAL_SD_MspInit+0x120>)
 8002498:	f006 fb24 	bl	8008ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800249c:	2304      	movs	r3, #4
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024ac:	230c      	movs	r3, #12
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	4813      	ldr	r0, [pc, #76]	@ (8002504 <HAL_SD_MspInit+0x124>)
 80024b8:	f006 fb14 	bl	8008ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 80024ce:	2307      	movs	r3, #7
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4619      	mov	r1, r3
 80024d8:	480b      	ldr	r0, [pc, #44]	@ (8002508 <HAL_SD_MspInit+0x128>)
 80024da:	f006 fb03 	bl	8008ae4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2031      	movs	r0, #49	@ 0x31
 80024e4:	f003 f833 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80024e8:	2031      	movs	r0, #49	@ 0x31
 80024ea:	f003 f84a 	bl	8005582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80024ee:	bf00      	nop
 80024f0:	3730      	adds	r7, #48	@ 0x30
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	52007000 	.word	0x52007000
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020800 	.word	0x58020800
 8002504:	58020c00 	.word	0x58020c00
 8002508:	58020400 	.word	0x58020400

0800250c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_TIM_Base_MspInit+0x74>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10f      	bne.n	800253e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800251e:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_TIM_Base_MspInit+0x78>)
 8002520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002524:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <HAL_TIM_Base_MspInit+0x78>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_TIM_Base_MspInit+0x78>)
 8002530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800253c:	e01b      	b.n	8002576 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a11      	ldr	r2, [pc, #68]	@ (8002588 <HAL_TIM_Base_MspInit+0x7c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d116      	bne.n	8002576 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002548:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_TIM_Base_MspInit+0x78>)
 800254a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800254e:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_TIM_Base_MspInit+0x78>)
 8002550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002554:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <HAL_TIM_Base_MspInit+0x78>)
 800255a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	2075      	movs	r0, #117	@ 0x75
 800256c:	f002 ffef 	bl	800554e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002570:	2075      	movs	r0, #117	@ 0x75
 8002572:	f003 f806 	bl	8005582 <HAL_NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	58024400 	.word	0x58024400
 8002588:	40014400 	.word	0x40014400

0800258c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	@ (80025f8 <HAL_TIM_MspPostInit+0x6c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d11f      	bne.n	80025ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <HAL_TIM_MspPostInit+0x70>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b4:	4a11      	ldr	r2, [pc, #68]	@ (80025fc <HAL_TIM_MspPostInit+0x70>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025be:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <HAL_TIM_MspPostInit+0x70>)
 80025c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 80025cc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80025d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025de:	2301      	movs	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	@ (8002600 <HAL_TIM_MspPostInit+0x74>)
 80025ea:	f006 fa7b 	bl	8008ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40010000 	.word	0x40010000
 80025fc:	58024400 	.word	0x58024400
 8002600:	58021000 	.word	0x58021000

08002604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0ba      	sub	sp, #232	@ 0xe8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800261c:	f107 0318 	add.w	r3, r7, #24
 8002620:	22b8      	movs	r2, #184	@ 0xb8
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f00f f905 	bl	8011834 <memset>
  if(huart->Instance==USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a4d      	ldr	r2, [pc, #308]	@ (8002764 <HAL_UART_MspInit+0x160>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d147      	bne.n	80026c4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002634:	f04f 0201 	mov.w	r2, #1
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002646:	f107 0318 	add.w	r3, r7, #24
 800264a:	4618      	mov	r0, r3
 800264c:	f007 fbc4 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002656:	f7ff fc21 	bl	8001e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800265a:	4b43      	ldr	r3, [pc, #268]	@ (8002768 <HAL_UART_MspInit+0x164>)
 800265c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002660:	4a41      	ldr	r2, [pc, #260]	@ (8002768 <HAL_UART_MspInit+0x164>)
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800266a:	4b3f      	ldr	r3, [pc, #252]	@ (8002768 <HAL_UART_MspInit+0x164>)
 800266c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_UART_MspInit+0x164>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267e:	4a3a      	ldr	r2, [pc, #232]	@ (8002768 <HAL_UART_MspInit+0x164>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002688:	4b37      	ldr	r3, [pc, #220]	@ (8002768 <HAL_UART_MspInit+0x164>)
 800268a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8002696:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800269a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026b0:	2307      	movs	r3, #7
 80026b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026ba:	4619      	mov	r1, r3
 80026bc:	482b      	ldr	r0, [pc, #172]	@ (800276c <HAL_UART_MspInit+0x168>)
 80026be:	f006 fa11 	bl	8008ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c2:	e04a      	b.n	800275a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_UART_MspInit+0x16c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d145      	bne.n	800275a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026ce:	f04f 0202 	mov.w	r2, #2
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e0:	f107 0318 	add.w	r3, r7, #24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 fb77 	bl	8009dd8 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80026f0:	f7ff fbd4 	bl	8001e9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002768 <HAL_UART_MspInit+0x164>)
 80026f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <HAL_UART_MspInit+0x164>)
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002700:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002704:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <HAL_UART_MspInit+0x164>)
 8002706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_UART_MspInit+0x164>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002718:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <HAL_UART_MspInit+0x164>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_UART_MspInit+0x164>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002730:	230c      	movs	r3, #12
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002748:	2307      	movs	r3, #7
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	@ (800276c <HAL_UART_MspInit+0x168>)
 8002756:	f006 f9c5 	bl	8008ae4 <HAL_GPIO_Init>
}
 800275a:	bf00      	nop
 800275c:	37e8      	adds	r7, #232	@ 0xe8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40011000 	.word	0x40011000
 8002768:	58024400 	.word	0x58024400
 800276c:	58020000 	.word	0x58020000
 8002770:	40004400 	.word	0x40004400

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <NMI_Handler+0x4>

0800277c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <HardFault_Handler+0x4>

08002784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <MemManage_Handler+0x4>

0800278c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <BusFault_Handler+0x4>

08002794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <UsageFault_Handler+0x4>

0800279c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ca:	f000 f997 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <DMA1_Stream0_IRQHandler+0x10>)
 80027da:	f003 fcaf 	bl	800613c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	24000174 	.word	0x24000174

080027e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027ec:	4803      	ldr	r0, [pc, #12]	@ (80027fc <ADC_IRQHandler+0x14>)
 80027ee:	f001 f9e9 	bl	8003bc4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80027f2:	4803      	ldr	r0, [pc, #12]	@ (8002800 <ADC_IRQHandler+0x18>)
 80027f4:	f001 f9e6 	bl	8003bc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	24000094 	.word	0x24000094
 8002800:	24000104 	.word	0x24000104

08002804 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002808:	4802      	ldr	r0, [pc, #8]	@ (8002814 <FDCAN1_IT0_IRQHandler+0x10>)
 800280a:	f005 fc69 	bl	80080e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	240001ec 	.word	0x240001ec

08002818 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <FDCAN2_IT0_IRQHandler+0x10>)
 800281e:	f005 fc5f 	bl	80080e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2400028c 	.word	0x2400028c

0800282c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <SDMMC1_IRQHandler+0x10>)
 8002832:	f00a f927 	bl	800ca84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	240003cc 	.word	0x240003cc

08002840 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002844:	4802      	ldr	r0, [pc, #8]	@ (8002850 <TIM16_IRQHandler+0x10>)
 8002846:	f00b fc50 	bl	800e0ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	24000494 	.word	0x24000494

08002854 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <FDCAN3_IT0_IRQHandler+0x10>)
 800285a:	f005 fc41 	bl	80080e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2400032c 	.word	0x2400032c

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f00e ffd4 	bl	8011844 <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	24050000 	.word	0x24050000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	24000894 	.word	0x24000894
 80028d0:	24000a00 	.word	0x24000a00

080028d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028d8:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <SystemInit+0xd0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	4a31      	ldr	r2, [pc, #196]	@ (80029a4 <SystemInit+0xd0>)
 80028e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <SystemInit+0xd4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d807      	bhi.n	8002904 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028f4:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <SystemInit+0xd4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f023 030f 	bic.w	r3, r3, #15
 80028fc:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <SystemInit+0xd4>)
 80028fe:	f043 0307 	orr.w	r3, r3, #7
 8002902:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <SystemInit+0xd8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <SystemInit+0xd8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002910:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <SystemInit+0xd8>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002916:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <SystemInit+0xd8>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4924      	ldr	r1, [pc, #144]	@ (80029ac <SystemInit+0xd8>)
 800291c:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <SystemInit+0xdc>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002922:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <SystemInit+0xd4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <SystemInit+0xd4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 030f 	bic.w	r3, r3, #15
 8002936:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <SystemInit+0xd4>)
 8002938:	f043 0307 	orr.w	r3, r3, #7
 800293c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <SystemInit+0xd8>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <SystemInit+0xd8>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800294a:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <SystemInit+0xd8>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002950:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <SystemInit+0xd8>)
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <SystemInit+0xe0>)
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <SystemInit+0xd8>)
 8002958:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <SystemInit+0xe4>)
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <SystemInit+0xd8>)
 800295e:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <SystemInit+0xe8>)
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002962:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <SystemInit+0xd8>)
 8002964:	2200      	movs	r2, #0
 8002966:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002968:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <SystemInit+0xd8>)
 800296a:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <SystemInit+0xe8>)
 800296c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800296e:	4b0f      	ldr	r3, [pc, #60]	@ (80029ac <SystemInit+0xd8>)
 8002970:	2200      	movs	r2, #0
 8002972:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002974:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <SystemInit+0xd8>)
 8002976:	4a11      	ldr	r2, [pc, #68]	@ (80029bc <SystemInit+0xe8>)
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800297a:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <SystemInit+0xd8>)
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <SystemInit+0xd8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <SystemInit+0xd8>)
 8002986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800298a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800298c:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <SystemInit+0xd8>)
 800298e:	2200      	movs	r2, #0
 8002990:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <SystemInit+0xec>)
 8002994:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002998:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00
 80029a8:	52002000 	.word	0x52002000
 80029ac:	58024400 	.word	0x58024400
 80029b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80029b4:	02020200 	.word	0x02020200
 80029b8:	01ff0000 	.word	0x01ff0000
 80029bc:	01010280 	.word	0x01010280
 80029c0:	52004000 	.word	0x52004000

080029c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029c8:	f7ff ff84 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029cc:	480c      	ldr	r0, [pc, #48]	@ (8002a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ce:	490d      	ldr	r1, [pc, #52]	@ (8002a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d4:	e002      	b.n	80029dc <LoopCopyDataInit>

080029d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029da:	3304      	adds	r3, #4

080029dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e0:	d3f9      	bcc.n	80029d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e8:	e001      	b.n	80029ee <LoopFillZerobss>

080029ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ec:	3204      	adds	r2, #4

080029ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f0:	d3fb      	bcc.n	80029ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f2:	f00e ff2d 	bl	8011850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f6:	f7fd fe79 	bl	80006ec <main>
  bx  lr
 80029fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a04:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002a08:	080124f4 	.word	0x080124f4
  ldr r2, =_sbss
 8002a0c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002a10:	24000a00 	.word	0x24000a00

08002a14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC3_IRQHandler>
	...

08002a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f002 fd8a 	bl	8005538 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a24:	f007 f802 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <HAL_Init+0x68>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	4913      	ldr	r1, [pc, #76]	@ (8002a84 <HAL_Init+0x6c>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <HAL_Init+0x68>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a84 <HAL_Init+0x6c>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <HAL_Init+0x70>)
 8002a5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a8c <HAL_Init+0x74>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a62:	200f      	movs	r0, #15
 8002a64:	f000 f814 	bl	8002a90 <HAL_InitTick>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e002      	b.n	8002a78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a72:	f7ff fa19 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	58024400 	.word	0x58024400
 8002a84:	0801244c 	.word	0x0801244c
 8002a88:	24000010 	.word	0x24000010
 8002a8c:	2400000c 	.word	0x2400000c

08002a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a98:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_InitTick+0x60>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e021      	b.n	8002ae8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_InitTick+0x64>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <HAL_InitTick+0x60>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 fd6f 	bl	800559e <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f002 fd39 	bl	800554e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	@ (8002af8 <HAL_InitTick+0x68>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	24000018 	.word	0x24000018
 8002af4:	2400000c 	.word	0x2400000c
 8002af8:	24000014 	.word	0x24000014

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	24000018 	.word	0x24000018
 8002b20:	24000898 	.word	0x24000898

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	@ (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	24000898 	.word	0x24000898

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	24000018 	.word	0x24000018

08002b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3360      	adds	r3, #96	@ 0x60
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a10      	ldr	r2, [pc, #64]	@ (8002c4c <LL_ADC_SetOffset+0x60>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10b      	bne.n	8002c28 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c26:	e00b      	b.n	8002c40 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	601a      	str	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	58026000 	.word	0x58026000

08002c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3360      	adds	r3, #96	@ 0x60
 8002c5e:	461a      	mov	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3360      	adds	r3, #96	@ 0x60
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	601a      	str	r2, [r3, #0]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	58026000 	.word	0x58026000

08002cf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a0c      	ldr	r2, [pc, #48]	@ (8002d34 <LL_ADC_SetOffsetSaturation+0x40>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10e      	bne.n	8002d26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3360      	adds	r3, #96	@ 0x60
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	58026000 	.word	0x58026000

08002d38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a0c      	ldr	r2, [pc, #48]	@ (8002d78 <LL_ADC_SetOffsetSign+0x40>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10e      	bne.n	8002d6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3360      	adds	r3, #96	@ 0x60
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	58026000 	.word	0x58026000

08002d7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3360      	adds	r3, #96	@ 0x60
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a0c      	ldr	r2, [pc, #48]	@ (8002dcc <LL_ADC_SetOffsetState+0x50>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d108      	bne.n	8002db0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002dae:	e007      	b.n	8002dc0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	58026000 	.word	0x58026000

08002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3330      	adds	r3, #48	@ 0x30
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	4413      	add	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	211f      	movs	r1, #31
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 011f 	and.w	r1, r3, #31
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f023 0203 	bic.w	r2, r3, #3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a08      	ldr	r2, [pc, #32]	@ (8002ec4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d107      	bne.n	8002eb6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60da      	str	r2, [r3, #12]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	58026000 	.word	0x58026000

08002ec8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b087      	sub	sp, #28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3314      	adds	r3, #20
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	0e5b      	lsrs	r3, r3, #25
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	0d1b      	lsrs	r3, r3, #20
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2107      	movs	r1, #7
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	0d1b      	lsrs	r3, r3, #20
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	431a      	orrs	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a1a      	ldr	r2, [pc, #104]	@ (8002fbc <LL_ADC_SetChannelSingleDiff+0x78>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d115      	bne.n	8002f84 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0318 	and.w	r3, r3, #24
 8002f6e:	4914      	ldr	r1, [pc, #80]	@ (8002fc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f70:	40d9      	lsrs	r1, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	400b      	ands	r3, r1
 8002f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f82:	e014      	b.n	8002fae <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f90:	43db      	mvns	r3, r3
 8002f92:	401a      	ands	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0318 	and.w	r3, r3, #24
 8002f9a:	4909      	ldr	r1, [pc, #36]	@ (8002fc0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f9c:	40d9      	lsrs	r1, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	58026000 	.word	0x58026000
 8002fc0:	000fffff 	.word	0x000fffff

08002fc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <LL_ADC_DisableDeepPowerDown+0x20>)
 800300a:	4013      	ands	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6093      	str	r3, [r2, #8]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	5fffffc0 	.word	0x5fffffc0

08003020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003034:	d101      	bne.n	800303a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <LL_ADC_EnableInternalRegulator+0x24>)
 8003056:	4013      	ands	r3, r2
 8003058:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	6fffffc0 	.word	0x6fffffc0

08003070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003084:	d101      	bne.n	800308a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <LL_ADC_Enable+0x24>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	7fffffc0 	.word	0x7fffffc0

080030c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <LL_ADC_Disable+0x24>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	f043 0202 	orr.w	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	7fffffc0 	.word	0x7fffffc0

080030e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <LL_ADC_IsEnabled+0x18>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <LL_ADC_IsEnabled+0x1a>
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d101      	bne.n	8003126 <LL_ADC_IsDisableOngoing+0x18>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <LL_ADC_IsDisableOngoing+0x1a>
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <LL_ADC_REG_StartConversion+0x24>)
 8003142:	4013      	ands	r3, r2
 8003144:	f043 0204 	orr.w	r2, r3, #4
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	7fffffc0 	.word	0x7fffffc0

0800315c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <LL_ADC_REG_StopConversion+0x24>)
 800316a:	4013      	ands	r3, r2
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	7fffffc0 	.word	0x7fffffc0

08003184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d101      	bne.n	800319c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <LL_ADC_INJ_StopConversion+0x24>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	7fffffc0 	.word	0x7fffffc0

080031d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d101      	bne.n	80031ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1ee      	b.n	80035f4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003220:	2b00      	cmp	r3, #0
 8003222:	d109      	bne.n	8003238 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fe fe59 	bl	8001edc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff feef 	bl	8003020 <LL_ADC_IsDeepPowerDownEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fed5 	bl	8002ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff0a 	bl	8003070 <LL_ADC_IsInternalRegulatorEnabled>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d114      	bne.n	800328c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff feee 	bl	8003048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800326c:	4b8e      	ldr	r3, [pc, #568]	@ (80034a8 <HAL_ADC_Init+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	4a8e      	ldr	r2, [pc, #568]	@ (80034ac <HAL_ADC_Init+0x2b0>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800327e:	e002      	b.n	8003286 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	3b01      	subs	r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f9      	bne.n	8003280 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff feed 	bl	8003070 <LL_ADC_IsInternalRegulatorEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10d      	bne.n	80032b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a0:	f043 0210 	orr.w	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff61 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 80032c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 8188 	bne.w	80035e2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8184 	bne.w	80035e2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fefa 	bl	80030e8 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d136      	bne.n	8003368 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a6c      	ldr	r2, [pc, #432]	@ (80034b0 <HAL_ADC_Init+0x2b4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_ADC_Init+0x112>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a6a      	ldr	r2, [pc, #424]	@ (80034b4 <HAL_ADC_Init+0x2b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10e      	bne.n	800332c <HAL_ADC_Init+0x130>
 800330e:	4868      	ldr	r0, [pc, #416]	@ (80034b0 <HAL_ADC_Init+0x2b4>)
 8003310:	f7ff feea 	bl	80030e8 <LL_ADC_IsEnabled>
 8003314:	4604      	mov	r4, r0
 8003316:	4867      	ldr	r0, [pc, #412]	@ (80034b4 <HAL_ADC_Init+0x2b8>)
 8003318:	f7ff fee6 	bl	80030e8 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e008      	b.n	800333e <HAL_ADC_Init+0x142>
 800332c:	4862      	ldr	r0, [pc, #392]	@ (80034b8 <HAL_ADC_Init+0x2bc>)
 800332e:	f7ff fedb 	bl	80030e8 <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a5a      	ldr	r2, [pc, #360]	@ (80034b0 <HAL_ADC_Init+0x2b4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d004      	beq.n	8003356 <HAL_ADC_Init+0x15a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <HAL_ADC_Init+0x2b8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_ADC_Init+0x15e>
 8003356:	4a59      	ldr	r2, [pc, #356]	@ (80034bc <HAL_ADC_Init+0x2c0>)
 8003358:	e000      	b.n	800335c <HAL_ADC_Init+0x160>
 800335a:	4a59      	ldr	r2, [pc, #356]	@ (80034c0 <HAL_ADC_Init+0x2c4>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7ff fc0e 	bl	8002b84 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_ADC_Init+0x2bc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d129      	bne.n	80033c6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7e5b      	ldrb	r3, [r3, #25]
 8003376:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800337c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003382:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d013      	beq.n	80033b4 <HAL_ADC_Init+0x1b8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d00d      	beq.n	80033b0 <HAL_ADC_Init+0x1b4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b1c      	cmp	r3, #28
 800339a:	d007      	beq.n	80033ac <HAL_ADC_Init+0x1b0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b18      	cmp	r3, #24
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_Init+0x1ac>
 80033a4:	2318      	movs	r3, #24
 80033a6:	e006      	b.n	80033b6 <HAL_ADC_Init+0x1ba>
 80033a8:	2300      	movs	r3, #0
 80033aa:	e004      	b.n	80033b6 <HAL_ADC_Init+0x1ba>
 80033ac:	2310      	movs	r3, #16
 80033ae:	e002      	b.n	80033b6 <HAL_ADC_Init+0x1ba>
 80033b0:	2308      	movs	r3, #8
 80033b2:	e000      	b.n	80033b6 <HAL_ADC_Init+0x1ba>
 80033b4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80033b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e00e      	b.n	80033e4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7e5b      	ldrb	r3, [r3, #25]
 80033ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d106      	bne.n	80033fc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	3b01      	subs	r3, #1
 80033f4:	045b      	lsls	r3, r3, #17
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_ADC_Init+0x2bc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d115      	bne.n	800344e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <HAL_ADC_Init+0x2c8>)
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	69b9      	ldr	r1, [r7, #24]
 8003432:	430b      	orrs	r3, r1
 8003434:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	611a      	str	r2, [r3, #16]
 800344c:	e009      	b.n	8003462 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <HAL_ADC_Init+0x2cc>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	430b      	orrs	r3, r1
 8003460:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fe8c 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 800346c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff feae 	bl	80031d4 <LL_ADC_INJ_IsConversionOngoing>
 8003478:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 808e 	bne.w	800359e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 808a 	bne.w	800359e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <HAL_ADC_Init+0x2bc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d11b      	bne.n	80034cc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034a0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e018      	b.n	80034da <HAL_ADC_Init+0x2de>
 80034a8:	2400000c 	.word	0x2400000c
 80034ac:	053e2d63 	.word	0x053e2d63
 80034b0:	40022000 	.word	0x40022000
 80034b4:	40022100 	.word	0x40022100
 80034b8:	58026000 	.word	0x58026000
 80034bc:	40022300 	.word	0x40022300
 80034c0:	58026300 	.word	0x58026300
 80034c4:	fff04007 	.word	0xfff04007
 80034c8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e1b      	ldrb	r3, [r3, #24]
 80034d0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b46      	ldr	r3, [pc, #280]	@ (80035fc <HAL_ADC_Init+0x400>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	430b      	orrs	r3, r1
 80034ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d137      	bne.n	8003568 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3f      	ldr	r2, [pc, #252]	@ (8003600 <HAL_ADC_Init+0x404>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d116      	bne.n	8003536 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	4b3d      	ldr	r3, [pc, #244]	@ (8003604 <HAL_ADC_Init+0x408>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800351a:	4311      	orrs	r1, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003526:	430a      	orrs	r2, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	611a      	str	r2, [r3, #16]
 8003534:	e020      	b.n	8003578 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	4b32      	ldr	r3, [pc, #200]	@ (8003608 <HAL_ADC_Init+0x40c>)
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003544:	3a01      	subs	r2, #1
 8003546:	0411      	lsls	r1, r2, #16
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003558:	430a      	orrs	r2, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	e007      	b.n	8003578 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <HAL_ADC_Init+0x404>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d002      	beq.n	800359e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fcd5 	bl	8004f48 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10c      	bne.n	80035c0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	f023 010f 	bic.w	r1, r3, #15
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80035be:	e007      	b.n	80035d0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 020f 	bic.w	r2, r2, #15
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d4:	f023 0303 	bic.w	r3, r3, #3
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	661a      	str	r2, [r3, #96]	@ 0x60
 80035e0:	e007      	b.n	80035f2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3724      	adds	r7, #36	@ 0x24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	ffffbffc 	.word	0xffffbffc
 8003600:	58026000 	.word	0x58026000
 8003604:	fc00f81f 	.word	0xfc00f81f
 8003608:	fc00f81e 	.word	0xfc00f81e

0800360c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5c      	ldr	r2, [pc, #368]	@ (800378c <HAL_ADC_Start+0x180>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_ADC_Start+0x1c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5b      	ldr	r2, [pc, #364]	@ (8003790 <HAL_ADC_Start+0x184>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_ADC_Start+0x20>
 8003628:	4b5a      	ldr	r3, [pc, #360]	@ (8003794 <HAL_ADC_Start+0x188>)
 800362a:	e000      	b.n	800362e <HAL_ADC_Start+0x22>
 800362c:	4b5a      	ldr	r3, [pc, #360]	@ (8003798 <HAL_ADC_Start+0x18c>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fcc8 	bl	8002fc4 <LL_ADC_GetMultimode>
 8003634:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fda2 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	f040 809a 	bne.w	800377c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Start+0x4a>
 8003652:	2302      	movs	r3, #2
 8003654:	e095      	b.n	8003782 <HAL_ADC_Start+0x176>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f001 faf4 	bl	8004c4c <ADC_Enable>
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 8081 	bne.w	8003772 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003674:	4b49      	ldr	r3, [pc, #292]	@ (800379c <HAL_ADC_Start+0x190>)
 8003676:	4013      	ands	r3, r2
 8003678:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a42      	ldr	r2, [pc, #264]	@ (8003790 <HAL_ADC_Start+0x184>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d002      	beq.n	8003690 <HAL_ADC_Start+0x84>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e000      	b.n	8003692 <HAL_ADC_Start+0x86>
 8003690:	4b3e      	ldr	r3, [pc, #248]	@ (800378c <HAL_ADC_Start+0x180>)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4293      	cmp	r3, r2
 8003698:	d002      	beq.n	80036a0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b8:	d106      	bne.n	80036c8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036be:	f023 0206 	bic.w	r2, r3, #6
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	665a      	str	r2, [r3, #100]	@ 0x64
 80036c6:	e002      	b.n	80036ce <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	221c      	movs	r2, #28
 80036d4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003790 <HAL_ADC_Start+0x184>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d002      	beq.n	80036ee <HAL_ADC_Start+0xe2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	e000      	b.n	80036f0 <HAL_ADC_Start+0xe4>
 80036ee:	4b27      	ldr	r3, [pc, #156]	@ (800378c <HAL_ADC_Start+0x180>)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d008      	beq.n	800370a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d002      	beq.n	800370a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b09      	cmp	r3, #9
 8003708:	d114      	bne.n	8003734 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003720:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fd01 	bl	8003134 <LL_ADC_REG_StartConversion>
 8003732:	e025      	b.n	8003780 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a12      	ldr	r2, [pc, #72]	@ (8003790 <HAL_ADC_Start+0x184>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d002      	beq.n	8003750 <HAL_ADC_Start+0x144>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e000      	b.n	8003752 <HAL_ADC_Start+0x146>
 8003750:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <HAL_ADC_Start+0x180>)
 8003752:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00f      	beq.n	8003780 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003768:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003770:	e006      	b.n	8003780 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800377a:	e001      	b.n	8003780 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003780:	7dfb      	ldrb	r3, [r7, #23]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000
 8003790:	40022100 	.word	0x40022100
 8003794:	40022300 	.word	0x40022300
 8003798:	58026300 	.word	0x58026300
 800379c:	fffff0fe 	.word	0xfffff0fe

080037a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_Stop+0x16>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e021      	b.n	80037fa <HAL_ADC_Stop+0x5a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80037be:	2103      	movs	r1, #3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f001 f987 	bl	8004ad4 <ADC_ConversionStop>
 80037c6:	4603      	mov	r3, r0
 80037c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10f      	bne.n	80037f0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f001 fac5 	bl	8004d60 <ADC_Disable>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037e4:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <HAL_ADC_Stop+0x64>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	ffffeefe 	.word	0xffffeefe

08003808 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a72      	ldr	r2, [pc, #456]	@ (80039e0 <HAL_ADC_PollForConversion+0x1d8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_ADC_PollForConversion+0x1e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a70      	ldr	r2, [pc, #448]	@ (80039e4 <HAL_ADC_PollForConversion+0x1dc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <HAL_ADC_PollForConversion+0x22>
 8003826:	4b70      	ldr	r3, [pc, #448]	@ (80039e8 <HAL_ADC_PollForConversion+0x1e0>)
 8003828:	e000      	b.n	800382c <HAL_ADC_PollForConversion+0x24>
 800382a:	4b70      	ldr	r3, [pc, #448]	@ (80039ec <HAL_ADC_PollForConversion+0x1e4>)
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fbc9 	bl	8002fc4 <LL_ADC_GetMultimode>
 8003832:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d102      	bne.n	8003842 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800383c:	2308      	movs	r3, #8
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e037      	b.n	80038b2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d002      	beq.n	8003854 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d111      	bne.n	8003878 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0b1      	b.n	80039d6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003872:	2304      	movs	r3, #4
 8003874:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003876:	e01c      	b.n	80038b2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a58      	ldr	r2, [pc, #352]	@ (80039e0 <HAL_ADC_PollForConversion+0x1d8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_ADC_PollForConversion+0x84>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a57      	ldr	r2, [pc, #348]	@ (80039e4 <HAL_ADC_PollForConversion+0x1dc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_ADC_PollForConversion+0x88>
 800388c:	4b56      	ldr	r3, [pc, #344]	@ (80039e8 <HAL_ADC_PollForConversion+0x1e0>)
 800388e:	e000      	b.n	8003892 <HAL_ADC_PollForConversion+0x8a>
 8003890:	4b56      	ldr	r3, [pc, #344]	@ (80039ec <HAL_ADC_PollForConversion+0x1e4>)
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fba4 	bl	8002fe0 <LL_ADC_GetMultiDMATransfer>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e093      	b.n	80039d6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038ae:	2304      	movs	r3, #4
 80038b0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038b2:	f7ff f937 	bl	8002b24 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038b8:	e021      	b.n	80038fe <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d01d      	beq.n	80038fe <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038c2:	f7ff f92f 	bl	8002b24 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <HAL_ADC_PollForConversion+0xd0>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d112      	bne.n	80038fe <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e06b      	b.n	80039d6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0d6      	beq.n	80038ba <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003910:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fa57 	bl	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01c      	beq.n	8003962 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	7e5b      	ldrb	r3, [r3, #25]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d118      	bne.n	8003962 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b08      	cmp	r3, #8
 800393c:	d111      	bne.n	8003962 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003942:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <HAL_ADC_PollForConversion+0x1dc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d002      	beq.n	8003972 <HAL_ADC_PollForConversion+0x16a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	e000      	b.n	8003974 <HAL_ADC_PollForConversion+0x16c>
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_ADC_PollForConversion+0x1d8>)
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	4293      	cmp	r3, r2
 800397a:	d008      	beq.n	800398e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d002      	beq.n	800398e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b09      	cmp	r3, #9
 800398c:	d104      	bne.n	8003998 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e00c      	b.n	80039b2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a11      	ldr	r2, [pc, #68]	@ (80039e4 <HAL_ADC_PollForConversion+0x1dc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d002      	beq.n	80039a8 <HAL_ADC_PollForConversion+0x1a0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	e000      	b.n	80039aa <HAL_ADC_PollForConversion+0x1a2>
 80039a8:	4b0d      	ldr	r3, [pc, #52]	@ (80039e0 <HAL_ADC_PollForConversion+0x1d8>)
 80039aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2208      	movs	r2, #8
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e008      	b.n	80039d4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	220c      	movs	r2, #12
 80039d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40022100 	.word	0x40022100
 80039e8:	40022300 	.word	0x40022300
 80039ec:	58026300 	.word	0x58026300

080039f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_ADC_Start_DMA+0x194>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_ADC_Start_DMA+0x20>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b88 <HAL_ADC_Start_DMA+0x198>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_Start_DMA+0x24>
 8003a10:	4b5e      	ldr	r3, [pc, #376]	@ (8003b8c <HAL_ADC_Start_DMA+0x19c>)
 8003a12:	e000      	b.n	8003a16 <HAL_ADC_Start_DMA+0x26>
 8003a14:	4b5e      	ldr	r3, [pc, #376]	@ (8003b90 <HAL_ADC_Start_DMA+0x1a0>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fad4 	bl	8002fc4 <LL_ADC_GetMultimode>
 8003a1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fbae 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 80a2 	bne.w	8003b74 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x4e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e09d      	b.n	8003b7a <HAL_ADC_Start_DMA+0x18a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d003      	beq.n	8003a5a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b09      	cmp	r3, #9
 8003a56:	f040 8086 	bne.w	8003b66 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f001 f8f6 	bl	8004c4c <ADC_Enable>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d178      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <HAL_ADC_Start_DMA+0x1a4>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a42      	ldr	r2, [pc, #264]	@ (8003b88 <HAL_ADC_Start_DMA+0x198>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_Start_DMA+0x9a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	e000      	b.n	8003a8c <HAL_ADC_Start_DMA+0x9c>
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b84 <HAL_ADC_Start_DMA+0x194>)
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d002      	beq.n	8003a9a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab6:	f023 0206 	bic.w	r2, r3, #6
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	665a      	str	r2, [r3, #100]	@ 0x64
 8003abe:	e002      	b.n	8003ac6 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	4a33      	ldr	r2, [pc, #204]	@ (8003b98 <HAL_ADC_Start_DMA+0x1a8>)
 8003acc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	4a32      	ldr	r2, [pc, #200]	@ (8003b9c <HAL_ADC_Start_DMA+0x1ac>)
 8003ad4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <HAL_ADC_Start_DMA+0x1b0>)
 8003adc:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	221c      	movs	r2, #28
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0210 	orr.w	r2, r2, #16
 8003afc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a28      	ldr	r2, [pc, #160]	@ (8003ba4 <HAL_ADC_Start_DMA+0x1b4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10f      	bne.n	8003b28 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f7ff f9bc 	bl	8002e94 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff f9a7 	bl	8002e74 <LL_ADC_EnableDMAReq>
 8003b26:	e007      	b.n	8003b38 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7ff f98b 	bl	8002e4e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3340      	adds	r3, #64	@ 0x40
 8003b42:	4619      	mov	r1, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f002 f88e 	bl	8005c68 <HAL_DMA_Start_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff faed 	bl	8003134 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b5a:	e00d      	b.n	8003b78 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003b64:	e008      	b.n	8003b78 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003b72:	e001      	b.n	8003b78 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40022100 	.word	0x40022100
 8003b8c:	40022300 	.word	0x40022300
 8003b90:	58026300 	.word	0x58026300
 8003b94:	fffff0fe 	.word	0xfffff0fe
 8003b98:	08004e1f 	.word	0x08004e1f
 8003b9c:	08004ef7 	.word	0x08004ef7
 8003ba0:	08004f13 	.word	0x08004f13
 8003ba4:	58026000 	.word	0x58026000

08003ba8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	@ 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a87      	ldr	r2, [pc, #540]	@ (8003e04 <HAL_ADC_IRQHandler+0x240>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_ADC_IRQHandler+0x30>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a86      	ldr	r2, [pc, #536]	@ (8003e08 <HAL_ADC_IRQHandler+0x244>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_IRQHandler+0x34>
 8003bf4:	4b85      	ldr	r3, [pc, #532]	@ (8003e0c <HAL_ADC_IRQHandler+0x248>)
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_IRQHandler+0x36>
 8003bf8:	4b85      	ldr	r3, [pc, #532]	@ (8003e10 <HAL_ADC_IRQHandler+0x24c>)
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f9e2 	bl	8002fc4 <LL_ADC_GetMultimode>
 8003c00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d017      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x78>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d012      	beq.n	8003c3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c26:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f001 fac6 	bl	80051c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x8c>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8083 	beq.w	8003d62 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d07d      	beq.n	8003d62 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f8a4 	bl	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d062      	beq.n	8003d54 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5d      	ldr	r2, [pc, #372]	@ (8003e08 <HAL_ADC_IRQHandler+0x244>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d002      	beq.n	8003c9e <HAL_ADC_IRQHandler+0xda>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	e000      	b.n	8003ca0 <HAL_ADC_IRQHandler+0xdc>
 8003c9e:	4b59      	ldr	r3, [pc, #356]	@ (8003e04 <HAL_ADC_IRQHandler+0x240>)
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d008      	beq.n	8003cba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d002      	beq.n	8003cba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	d104      	bne.n	8003cc4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	e00c      	b.n	8003cde <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003e08 <HAL_ADC_IRQHandler+0x244>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d002      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x110>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	e000      	b.n	8003cd6 <HAL_ADC_IRQHandler+0x112>
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e04 <HAL_ADC_IRQHandler+0x240>)
 8003cd6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d135      	bne.n	8003d54 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d12e      	bne.n	8003d54 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7ff fa42 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11a      	bne.n	8003d3c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 020c 	bic.w	r2, r2, #12
 8003d14:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d112      	bne.n	8003d54 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d3a:	e00b      	b.n	8003d54 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d40:	f043 0210 	orr.w	r2, r3, #16
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fd fc9b 	bl	8001690 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	220c      	movs	r2, #12
 8003d60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d004      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x1b2>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a0 	beq.w	8003ec2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 809a 	beq.w	8003ec2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f88c 	bl	8002ec8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003db0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff f80a 	bl	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dbc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <HAL_ADC_IRQHandler+0x244>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d002      	beq.n	8003dce <HAL_ADC_IRQHandler+0x20a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	e000      	b.n	8003dd0 <HAL_ADC_IRQHandler+0x20c>
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <HAL_ADC_IRQHandler+0x240>)
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d008      	beq.n	8003dea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d002      	beq.n	8003dea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b07      	cmp	r3, #7
 8003de8:	d104      	bne.n	8003df4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	623b      	str	r3, [r7, #32]
 8003df2:	e014      	b.n	8003e1e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a03      	ldr	r2, [pc, #12]	@ (8003e08 <HAL_ADC_IRQHandler+0x244>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00a      	beq.n	8003e14 <HAL_ADC_IRQHandler+0x250>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	e008      	b.n	8003e16 <HAL_ADC_IRQHandler+0x252>
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40022100 	.word	0x40022100
 8003e0c:	40022300 	.word	0x40022300
 8003e10:	58026300 	.word	0x58026300
 8003e14:	4b84      	ldr	r3, [pc, #528]	@ (8004028 <HAL_ADC_IRQHandler+0x464>)
 8003e16:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d047      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_ADC_IRQHandler+0x27a>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d03f      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d13a      	bne.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e48:	2b40      	cmp	r3, #64	@ 0x40
 8003e4a:	d133      	bne.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d12e      	bne.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f9ba 	bl	80031d4 <LL_ADC_INJ_IsConversionOngoing>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d11a      	bne.n	8003e9c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d112      	bne.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e9a:	e00b      	b.n	8003eb4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea0:	f043 0210 	orr.w	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eac:	f043 0201 	orr.w	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f001 f95b 	bl	8005170 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2260      	movs	r2, #96	@ 0x60
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d011      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x32c>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8b2 	bl	800404c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2280      	movs	r2, #128	@ 0x80
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <HAL_ADC_IRQHandler+0x35c>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f08:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f001 f941 	bl	8005198 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d012      	beq.n	8003f50 <HAL_ADC_IRQHandler+0x38c>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00d      	beq.n	8003f50 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f38:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 f933 	bl	80051ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d043      	beq.n	8003fe2 <HAL_ADC_IRQHandler+0x41e>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d03e      	beq.n	8003fe2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f70:	e021      	b.n	8003fb6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <HAL_ADC_IRQHandler+0x464>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_IRQHandler+0x3c8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a29      	ldr	r2, [pc, #164]	@ (800402c <HAL_ADC_IRQHandler+0x468>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_IRQHandler+0x3cc>
 8003f8c:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <HAL_ADC_IRQHandler+0x46c>)
 8003f8e:	e000      	b.n	8003f92 <HAL_ADC_IRQHandler+0x3ce>
 8003f90:	4b28      	ldr	r3, [pc, #160]	@ (8004034 <HAL_ADC_IRQHandler+0x470>)
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f824 	bl	8002fe0 <LL_ADC_GetMultiDMATransfer>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa2:	e008      	b.n	8003fb6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10e      	bne.n	8003fda <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fcc:	f043 0202 	orr.w	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f843 	bl	8004060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2210      	movs	r2, #16
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d018      	beq.n	800401e <HAL_ADC_IRQHandler+0x45a>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d013      	beq.n	800401e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004006:	f043 0208 	orr.w	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004016:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f001 f8b3 	bl	8005184 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800401e:	bf00      	nop
 8004020:	3728      	adds	r7, #40	@ 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40022000 	.word	0x40022000
 800402c:	40022100 	.word	0x40022100
 8004030:	40022300 	.word	0x40022300
 8004034:	58026300 	.word	0x58026300

08004038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b0b9      	sub	sp, #228	@ 0xe4
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800408e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4aab      	ldr	r2, [pc, #684]	@ (8004344 <HAL_ADC_ConfigChannel+0x2d0>)
 8004096:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x34>
 80040a2:	2302      	movs	r3, #2
 80040a4:	f000 bcfe 	b.w	8004aa4 <HAL_ADC_ConfigChannel+0xa30>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f865 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f040 84e2 	bne.w	8004a86 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	db38      	blt.n	800413c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a9e      	ldr	r2, [pc, #632]	@ (8004348 <HAL_ADC_ConfigChannel+0x2d4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d033      	beq.n	800413c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d108      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x7e>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	0e9b      	lsrs	r3, r3, #26
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2201      	movs	r2, #1
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	e01d      	b.n	800412e <HAL_ADC_ConfigChannel+0xba>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800410a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800410e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004116:	2320      	movs	r3, #32
 8004118:	e004      	b.n	8004124 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800411a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2201      	movs	r2, #1
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	69d1      	ldr	r1, [r2, #28]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	430b      	orrs	r3, r1
 800413a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	f7fe fe54 	bl	8002df6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f816 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8004158:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff f837 	bl	80031d4 <LL_ADC_INJ_IsConversionOngoing>
 8004166:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800416a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 8270 	bne.w	8004654 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f040 826b 	bne.w	8004654 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fe feaf 	bl	8002eee <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6c      	ldr	r2, [pc, #432]	@ (8004348 <HAL_ADC_ConfigChannel+0x2d4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10d      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	08db      	lsrs	r3, r3, #3
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041b4:	e032      	b.n	800421c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041b6:	4b65      	ldr	r3, [pc, #404]	@ (800434c <HAL_ADC_ConfigChannel+0x2d8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80041be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041c2:	d10b      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x168>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	089b      	lsrs	r3, r3, #2
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	e01d      	b.n	8004218 <HAL_ADC_ConfigChannel+0x1a4>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x18e>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	e00a      	b.n	8004218 <HAL_ADC_ConfigChannel+0x1a4>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d048      	beq.n	80042b6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6919      	ldr	r1, [r3, #16]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004234:	f7fe fcda 	bl	8002bec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a42      	ldr	r2, [pc, #264]	@ (8004348 <HAL_ADC_ConfigChannel+0x2d4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d119      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6919      	ldr	r1, [r3, #16]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	461a      	mov	r2, r3
 8004250:	f7fe fd72 	bl	8002d38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6919      	ldr	r1, [r3, #16]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d102      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1f8>
 8004266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800426a:	e000      	b.n	800426e <HAL_ADC_ConfigChannel+0x1fa>
 800426c:	2300      	movs	r3, #0
 800426e:	461a      	mov	r2, r3
 8004270:	f7fe fd40 	bl	8002cf4 <LL_ADC_SetOffsetSaturation>
 8004274:	e1ee      	b.n	8004654 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004284:	2b01      	cmp	r3, #1
 8004286:	d102      	bne.n	800428e <HAL_ADC_ConfigChannel+0x21a>
 8004288:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800428c:	e000      	b.n	8004290 <HAL_ADC_ConfigChannel+0x21c>
 800428e:	2300      	movs	r3, #0
 8004290:	461a      	mov	r2, r3
 8004292:	f7fe fd0d 	bl	8002cb0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6919      	ldr	r1, [r3, #16]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	7e1b      	ldrb	r3, [r3, #24]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d102      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x238>
 80042a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80042aa:	e000      	b.n	80042ae <HAL_ADC_ConfigChannel+0x23a>
 80042ac:	2300      	movs	r3, #0
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fe fce4 	bl	8002c7c <LL_ADC_SetDataRightShift>
 80042b4:	e1ce      	b.n	8004654 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a23      	ldr	r2, [pc, #140]	@ (8004348 <HAL_ADC_ConfigChannel+0x2d4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	f040 8181 	bne.w	80045c4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fe fcc1 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x27a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fcb6 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 80042e4:	4603      	mov	r3, r0
 80042e6:	0e9b      	lsrs	r3, r3, #26
 80042e8:	f003 021f 	and.w	r2, r3, #31
 80042ec:	e01e      	b.n	800432c <HAL_ADC_ConfigChannel+0x2b8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe fcab 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800430c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8004314:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800431c:	2320      	movs	r3, #32
 800431e:	e004      	b.n	800432a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004324:	fab3 f383 	clz	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x2dc>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	e01e      	b.n	8004382 <HAL_ADC_ConfigChannel+0x30e>
 8004344:	47ff0000 	.word	0x47ff0000
 8004348:	58026000 	.word	0x58026000
 800434c:	5c001000 	.word	0x5c001000
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800436c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004374:	2320      	movs	r3, #32
 8004376:	e004      	b.n	8004382 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	429a      	cmp	r2, r3
 8004384:	d106      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fcf4 	bl	8002d7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fc58 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x34c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fe fc4d 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	f003 021f 	and.w	r2, r3, #31
 80043be:	e01e      	b.n	80043fe <HAL_ADC_ConfigChannel+0x38a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2101      	movs	r1, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fc42 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80043de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80043e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80043ee:	2320      	movs	r3, #32
 80043f0:	e004      	b.n	80043fc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80043f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x3a2>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	0e9b      	lsrs	r3, r3, #26
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	e018      	b.n	8004448 <HAL_ADC_ConfigChannel+0x3d4>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800442a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800442e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800443a:	2320      	movs	r3, #32
 800443c:	e004      	b.n	8004448 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800443e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	429a      	cmp	r2, r3
 800444a:	d106      	bne.n	800445a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe fc91 	bl	8002d7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fbf5 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 8004466:	4603      	mov	r3, r0
 8004468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x412>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fbea 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 800447c:	4603      	mov	r3, r0
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	e01e      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x450>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2102      	movs	r1, #2
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fbdf 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 8004492:	4603      	mov	r3, r0
 8004494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80044a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80044ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 80044b4:	2320      	movs	r3, #32
 80044b6:	e004      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 80044b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x468>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	0e9b      	lsrs	r3, r3, #26
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	e014      	b.n	8004506 <HAL_ADC_ConfigChannel+0x492>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80044ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80044f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80044f8:	2320      	movs	r3, #32
 80044fa:	e004      	b.n	8004506 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80044fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	429a      	cmp	r2, r3
 8004508:	d106      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fc32 	bl	8002d7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2103      	movs	r1, #3
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fb96 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 8004524:	4603      	mov	r3, r0
 8004526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x4d0>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2103      	movs	r1, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe fb8b 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	0e9b      	lsrs	r3, r3, #26
 800453e:	f003 021f 	and.w	r2, r3, #31
 8004542:	e017      	b.n	8004574 <HAL_ADC_ConfigChannel+0x500>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2103      	movs	r1, #3
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fb80 	bl	8002c50 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e003      	b.n	8004572 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800456a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800457c:	2b00      	cmp	r3, #0
 800457e:	d105      	bne.n	800458c <HAL_ADC_ConfigChannel+0x518>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	0e9b      	lsrs	r3, r3, #26
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	e011      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x53c>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800459a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800459c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800459e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80045a4:	2320      	movs	r3, #32
 80045a6:	e003      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80045a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d14f      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	2103      	movs	r1, #3
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fbdd 	bl	8002d7c <LL_ADC_SetOffsetState>
 80045c2:	e047      	b.n	8004654 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	069b      	lsls	r3, r3, #26
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d107      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045e6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	069b      	lsls	r3, r3, #26
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d107      	bne.n	800460c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800460a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	069b      	lsls	r3, r3, #26
 800461c:	429a      	cmp	r2, r3
 800461e:	d107      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800462e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	069b      	lsls	r3, r3, #26
 8004640:	429a      	cmp	r2, r3
 8004642:	d107      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004652:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fd45 	bl	80030e8 <LL_ADC_IsEnabled>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 8219 	bne.w	8004a98 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	461a      	mov	r2, r3
 8004674:	f7fe fc66 	bl	8002f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4aa1      	ldr	r2, [pc, #644]	@ (8004904 <HAL_ADC_ConfigChannel+0x890>)
 800467e:	4293      	cmp	r3, r2
 8004680:	f040 812e 	bne.w	80048e0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x638>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0e9b      	lsrs	r3, r3, #26
 800469a:	3301      	adds	r3, #1
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	bf94      	ite	ls
 80046a4:	2301      	movls	r3, #1
 80046a6:	2300      	movhi	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e019      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x66c>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80046ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80046be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e003      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80046c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	bf94      	ite	ls
 80046da:	2301      	movls	r3, #1
 80046dc:	2300      	movhi	r3, #0
 80046de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d079      	beq.n	80047d8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x68c>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	0e9b      	lsrs	r3, r3, #26
 80046f6:	3301      	adds	r3, #1
 80046f8:	069b      	lsls	r3, r3, #26
 80046fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046fe:	e015      	b.n	800472c <HAL_ADC_ConfigChannel+0x6b8>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800470e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004710:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004718:	2320      	movs	r3, #32
 800471a:	e003      	b.n	8004724 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800471c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3301      	adds	r3, #1
 8004726:	069b      	lsls	r3, r3, #26
 8004728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_ADC_ConfigChannel+0x6d8>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	3301      	adds	r3, #1
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	e017      	b.n	800477c <HAL_ADC_ConfigChannel+0x708>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800475a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800475e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3301      	adds	r3, #1
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	ea42 0103 	orr.w	r1, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x72e>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	3301      	adds	r3, #1
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4613      	mov	r3, r2
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4413      	add	r3, r2
 800479e:	051b      	lsls	r3, r3, #20
 80047a0:	e018      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x760>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80047b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80047ba:	2320      	movs	r3, #32
 80047bc:	e003      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3301      	adds	r3, #1
 80047c8:	f003 021f 	and.w	r2, r3, #31
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047d4:	430b      	orrs	r3, r1
 80047d6:	e07e      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x780>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	0e9b      	lsrs	r3, r3, #26
 80047ea:	3301      	adds	r3, #1
 80047ec:	069b      	lsls	r3, r3, #26
 80047ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047f2:	e015      	b.n	8004820 <HAL_ADC_ConfigChannel+0x7ac>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800480c:	2320      	movs	r3, #32
 800480e:	e003      	b.n	8004818 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	3301      	adds	r3, #1
 800481a:	069b      	lsls	r3, r3, #26
 800481c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x7cc>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0e9b      	lsrs	r3, r3, #26
 8004832:	3301      	adds	r3, #1
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	e017      	b.n	8004870 <HAL_ADC_ConfigChannel+0x7fc>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	61bb      	str	r3, [r7, #24]
  return result;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004858:	2320      	movs	r3, #32
 800485a:	e003      	b.n	8004864 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2101      	movs	r1, #1
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	ea42 0103 	orr.w	r1, r2, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_ADC_ConfigChannel+0x828>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0e9b      	lsrs	r3, r3, #26
 8004886:	3301      	adds	r3, #1
 8004888:	f003 021f 	and.w	r2, r3, #31
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	3b1e      	subs	r3, #30
 8004894:	051b      	lsls	r3, r3, #20
 8004896:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800489a:	e01b      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x860>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	60fb      	str	r3, [r7, #12]
  return result;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80048b4:	2320      	movs	r3, #32
 80048b6:	e003      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	f003 021f 	and.w	r2, r3, #31
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	3b1e      	subs	r3, #30
 80048ce:	051b      	lsls	r3, r3, #20
 80048d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048d4:	430b      	orrs	r3, r1
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	6892      	ldr	r2, [r2, #8]
 80048da:	4619      	mov	r1, r3
 80048dc:	f7fe fb07 	bl	8002eee <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f280 80d7 	bge.w	8004a98 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a06      	ldr	r2, [pc, #24]	@ (8004908 <HAL_ADC_ConfigChannel+0x894>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_ADC_ConfigChannel+0x88a>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a04      	ldr	r2, [pc, #16]	@ (800490c <HAL_ADC_ConfigChannel+0x898>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10a      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x8a0>
 80048fe:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <HAL_ADC_ConfigChannel+0x89c>)
 8004900:	e009      	b.n	8004916 <HAL_ADC_ConfigChannel+0x8a2>
 8004902:	bf00      	nop
 8004904:	47ff0000 	.word	0x47ff0000
 8004908:	40022000 	.word	0x40022000
 800490c:	40022100 	.word	0x40022100
 8004910:	40022300 	.word	0x40022300
 8004914:	4b65      	ldr	r3, [pc, #404]	@ (8004aac <HAL_ADC_ConfigChannel+0xa38>)
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f95a 	bl	8002bd0 <LL_ADC_GetCommonPathInternalCh>
 800491c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a62      	ldr	r2, [pc, #392]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_ADC_ConfigChannel+0x8c0>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a61      	ldr	r2, [pc, #388]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xa40>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10e      	bne.n	8004952 <HAL_ADC_ConfigChannel+0x8de>
 8004934:	485e      	ldr	r0, [pc, #376]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004936:	f7fe fbd7 	bl	80030e8 <LL_ADC_IsEnabled>
 800493a:	4604      	mov	r4, r0
 800493c:	485d      	ldr	r0, [pc, #372]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xa40>)
 800493e:	f7fe fbd3 	bl	80030e8 <LL_ADC_IsEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	4323      	orrs	r3, r4
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	e008      	b.n	8004964 <HAL_ADC_ConfigChannel+0x8f0>
 8004952:	4859      	ldr	r0, [pc, #356]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xa44>)
 8004954:	f7fe fbc8 	bl	80030e8 <LL_ADC_IsEnabled>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8084 	beq.w	8004a72 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a53      	ldr	r2, [pc, #332]	@ (8004abc <HAL_ADC_ConfigChannel+0xa48>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d132      	bne.n	80049da <HAL_ADC_ConfigChannel+0x966>
 8004974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d12c      	bne.n	80049da <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a4c      	ldr	r2, [pc, #304]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xa44>)
 8004986:	4293      	cmp	r3, r2
 8004988:	f040 8086 	bne.w	8004a98 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a47      	ldr	r2, [pc, #284]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_ADC_ConfigChannel+0x92c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a46      	ldr	r2, [pc, #280]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xa40>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x930>
 80049a0:	4a47      	ldr	r2, [pc, #284]	@ (8004ac0 <HAL_ADC_ConfigChannel+0xa4c>)
 80049a2:	e000      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x932>
 80049a4:	4a41      	ldr	r2, [pc, #260]	@ (8004aac <HAL_ADC_ConfigChannel+0xa38>)
 80049a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe f8fa 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049b6:	4b43      	ldr	r3, [pc, #268]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xa50>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	4a42      	ldr	r2, [pc, #264]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xa54>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	3301      	adds	r3, #1
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80049ca:	e002      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f9      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049d8:	e05e      	b.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3b      	ldr	r2, [pc, #236]	@ (8004acc <HAL_ADC_ConfigChannel+0xa58>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d120      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x9b2>
 80049e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11a      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a30      	ldr	r2, [pc, #192]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xa44>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d14e      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_ADC_ConfigChannel+0x99a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xa40>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x99e>
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a10:	e000      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x9a0>
 8004a12:	4a26      	ldr	r2, [pc, #152]	@ (8004aac <HAL_ADC_ConfigChannel+0xa38>)
 8004a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe f8c3 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a24:	e038      	b.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a29      	ldr	r2, [pc, #164]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xa5c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d133      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
 8004a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d12d      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <HAL_ADC_ConfigChannel+0xa44>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d128      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a19      	ldr	r2, [pc, #100]	@ (8004ab0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_ADC_ConfigChannel+0x9e6>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a17      	ldr	r2, [pc, #92]	@ (8004ab4 <HAL_ADC_ConfigChannel+0xa40>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x9ea>
 8004a5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a5c:	e000      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x9ec>
 8004a5e:	4a13      	ldr	r2, [pc, #76]	@ (8004aac <HAL_ADC_ConfigChannel+0xa38>)
 8004a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7fe f89d 	bl	8002baa <LL_ADC_SetCommonPathInternalCh>
 8004a70:	e012      	b.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a76:	f043 0220 	orr.w	r2, r3, #32
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004a84:	e008      	b.n	8004a98 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004aa0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	37e4      	adds	r7, #228	@ 0xe4
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd90      	pop	{r4, r7, pc}
 8004aac:	58026300 	.word	0x58026300
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40022100 	.word	0x40022100
 8004ab8:	58026000 	.word	0x58026000
 8004abc:	c7520000 	.word	0xc7520000
 8004ac0:	40022300 	.word	0x40022300
 8004ac4:	2400000c 	.word	0x2400000c
 8004ac8:	053e2d63 	.word	0x053e2d63
 8004acc:	c3210000 	.word	0xc3210000
 8004ad0:	cb840000 	.word	0xcb840000

08004ad4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fb4a 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8004af0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fb6c 	bl	80031d4 <LL_ADC_INJ_IsConversionOngoing>
 8004afc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8098 	beq.w	8004c3c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02a      	beq.n	8004b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7e5b      	ldrb	r3, [r3, #25]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d126      	bne.n	8004b70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e1b      	ldrb	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d122      	bne.n	8004b70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b2e:	e014      	b.n	8004b5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4a45      	ldr	r2, [pc, #276]	@ (8004c48 <ADC_ConversionStop+0x174>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d90d      	bls.n	8004b54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3c:	f043 0210 	orr.w	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b48:	f043 0201 	orr.w	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e074      	b.n	8004c3e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d1e3      	bne.n	8004b30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d014      	beq.n	8004ba0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fb02 	bl	8003184 <LL_ADC_REG_IsConversionOngoing>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fabf 	bl	800310e <LL_ADC_IsDisableOngoing>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fade 	bl	800315c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d014      	beq.n	8004bd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe fb12 	bl	80031d4 <LL_ADC_INJ_IsConversionOngoing>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe faa7 	bl	800310e <LL_ADC_IsDisableOngoing>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe faee 	bl	80031ac <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d005      	beq.n	8004be2 <ADC_ConversionStop+0x10e>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d105      	bne.n	8004be8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004bdc:	230c      	movs	r3, #12
 8004bde:	617b      	str	r3, [r7, #20]
        break;
 8004be0:	e005      	b.n	8004bee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004be2:	2308      	movs	r3, #8
 8004be4:	617b      	str	r3, [r7, #20]
        break;
 8004be6:	e002      	b.n	8004bee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004be8:	2304      	movs	r3, #4
 8004bea:	617b      	str	r3, [r7, #20]
        break;
 8004bec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bee:	f7fd ff99 	bl	8002b24 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bf4:	e01b      	b.n	8004c2e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bf6:	f7fd ff95 	bl	8002b24 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d914      	bls.n	8004c2e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e007      	b.n	8004c3e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1dc      	bne.n	8004bf6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3720      	adds	r7, #32
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	000cdbff 	.word	0x000cdbff

08004c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fa45 	bl	80030e8 <LL_ADC_IsEnabled>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d16e      	bne.n	8004d42 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	4b38      	ldr	r3, [pc, #224]	@ (8004d4c <ADC_Enable+0x100>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c76:	f043 0210 	orr.w	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e05a      	b.n	8004d44 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fa00 	bl	8003098 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c98:	f7fd ff44 	bl	8002b24 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <ADC_Enable+0x104>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <ADC_Enable+0x66>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a29      	ldr	r2, [pc, #164]	@ (8004d54 <ADC_Enable+0x108>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <ADC_Enable+0x6a>
 8004cb2:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <ADC_Enable+0x10c>)
 8004cb4:	e000      	b.n	8004cb8 <ADC_Enable+0x6c>
 8004cb6:	4b29      	ldr	r3, [pc, #164]	@ (8004d5c <ADC_Enable+0x110>)
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe f983 	bl	8002fc4 <LL_ADC_GetMultimode>
 8004cbe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	@ (8004d54 <ADC_Enable+0x108>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d002      	beq.n	8004cd0 <ADC_Enable+0x84>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	e000      	b.n	8004cd2 <ADC_Enable+0x86>
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d50 <ADC_Enable+0x104>)
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02c      	beq.n	8004d34 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d130      	bne.n	8004d42 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ce0:	e028      	b.n	8004d34 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe f9fe 	bl	80030e8 <LL_ADC_IsEnabled>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe f9ce 	bl	8003098 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cfc:	f7fd ff12 	bl	8002b24 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d914      	bls.n	8004d34 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d00d      	beq.n	8004d34 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1c:	f043 0210 	orr.w	r2, r3, #16
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d28:	f043 0201 	orr.w	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e007      	b.n	8004d44 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d1cf      	bne.n	8004ce2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	8000003f 	.word	0x8000003f
 8004d50:	40022000 	.word	0x40022000
 8004d54:	40022100 	.word	0x40022100
 8004d58:	40022300 	.word	0x40022300
 8004d5c:	58026300 	.word	0x58026300

08004d60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe f9ce 	bl	800310e <LL_ADC_IsDisableOngoing>
 8004d72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe f9b5 	bl	80030e8 <LL_ADC_IsEnabled>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d047      	beq.n	8004e14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d144      	bne.n	8004e14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 030d 	and.w	r3, r3, #13
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10c      	bne.n	8004db2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe f98f 	bl	80030c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2203      	movs	r2, #3
 8004da8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004daa:	f7fd febb 	bl	8002b24 <HAL_GetTick>
 8004dae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004db0:	e029      	b.n	8004e06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db6:	f043 0210 	orr.w	r2, r3, #16
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dc2:	f043 0201 	orr.w	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e023      	b.n	8004e16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dce:	f7fd fea9 	bl	8002b24 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d914      	bls.n	8004e06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00d      	beq.n	8004e06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dee:	f043 0210 	orr.w	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e007      	b.n	8004e16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1dc      	bne.n	8004dce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d14b      	bne.n	8004ed0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d021      	beq.n	8004e96 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd ffba 	bl	8002dd0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d032      	beq.n	8004ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12b      	bne.n	8004ec8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d11f      	bne.n	8004ec8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	f043 0201 	orr.w	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e94:	e018      	b.n	8004ec8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d111      	bne.n	8004ec8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fc fbe1 	bl	8001690 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ece:	e00e      	b.n	8004eee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff f8bf 	bl	8004060 <HAL_ADC_ErrorCallback>
}
 8004ee2:	e004      	b.n	8004eee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff f897 	bl	8004038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f30:	f043 0204 	orr.w	r2, r3, #4
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff f891 	bl	8004060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a6c      	ldr	r2, [pc, #432]	@ (8005108 <ADC_ConfigureBoostMode+0x1c0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <ADC_ConfigureBoostMode+0x1c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6b      	ldr	r2, [pc, #428]	@ (800510c <ADC_ConfigureBoostMode+0x1c4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d109      	bne.n	8004f78 <ADC_ConfigureBoostMode+0x30>
 8004f64:	4b6a      	ldr	r3, [pc, #424]	@ (8005110 <ADC_ConfigureBoostMode+0x1c8>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	2301      	movne	r3, #1
 8004f72:	2300      	moveq	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e008      	b.n	8004f8a <ADC_ConfigureBoostMode+0x42>
 8004f78:	4b66      	ldr	r3, [pc, #408]	@ (8005114 <ADC_ConfigureBoostMode+0x1cc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01c      	beq.n	8004fc8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f8e:	f004 fec7 	bl	8009d20 <HAL_RCC_GetHCLKFreq>
 8004f92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f9c:	d010      	beq.n	8004fc0 <ADC_ConfigureBoostMode+0x78>
 8004f9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fa2:	d873      	bhi.n	800508c <ADC_ConfigureBoostMode+0x144>
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa8:	d002      	beq.n	8004fb0 <ADC_ConfigureBoostMode+0x68>
 8004faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fae:	d16d      	bne.n	800508c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	60fb      	str	r3, [r7, #12]
        break;
 8004fbe:	e068      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	089b      	lsrs	r3, r3, #2
 8004fc4:	60fb      	str	r3, [r7, #12]
        break;
 8004fc6:	e064      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004fc8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f006 f8a2 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fd4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004fde:	d051      	beq.n	8005084 <ADC_ConfigureBoostMode+0x13c>
 8004fe0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004fe4:	d854      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 8004fe6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004fea:	d047      	beq.n	800507c <ADC_ConfigureBoostMode+0x134>
 8004fec:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004ff0:	d84e      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 8004ff2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004ff6:	d03d      	beq.n	8005074 <ADC_ConfigureBoostMode+0x12c>
 8004ff8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004ffc:	d848      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 8004ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005002:	d033      	beq.n	800506c <ADC_ConfigureBoostMode+0x124>
 8005004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005008:	d842      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 800500a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800500e:	d029      	beq.n	8005064 <ADC_ConfigureBoostMode+0x11c>
 8005010:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005014:	d83c      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 8005016:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800501a:	d01a      	beq.n	8005052 <ADC_ConfigureBoostMode+0x10a>
 800501c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005020:	d836      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 8005022:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005026:	d014      	beq.n	8005052 <ADC_ConfigureBoostMode+0x10a>
 8005028:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800502c:	d830      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005032:	d00e      	beq.n	8005052 <ADC_ConfigureBoostMode+0x10a>
 8005034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005038:	d82a      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 800503a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800503e:	d008      	beq.n	8005052 <ADC_ConfigureBoostMode+0x10a>
 8005040:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005044:	d824      	bhi.n	8005090 <ADC_ConfigureBoostMode+0x148>
 8005046:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800504a:	d002      	beq.n	8005052 <ADC_ConfigureBoostMode+0x10a>
 800504c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005050:	d11e      	bne.n	8005090 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	0c9b      	lsrs	r3, r3, #18
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	60fb      	str	r3, [r7, #12]
        break;
 8005062:	e016      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	60fb      	str	r3, [r7, #12]
        break;
 800506a:	e012      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	60fb      	str	r3, [r7, #12]
        break;
 8005072:	e00e      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	60fb      	str	r3, [r7, #12]
        break;
 800507a:	e00a      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	09db      	lsrs	r3, r3, #7
 8005080:	60fb      	str	r3, [r7, #12]
        break;
 8005082:	e006      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	60fb      	str	r3, [r7, #12]
        break;
 800508a:	e002      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
        break;
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005090:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a1f      	ldr	r2, [pc, #124]	@ (8005118 <ADC_ConfigureBoostMode+0x1d0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d808      	bhi.n	80050b2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80050ae:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80050b0:	e025      	b.n	80050fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a19      	ldr	r2, [pc, #100]	@ (800511c <ADC_ConfigureBoostMode+0x1d4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d80a      	bhi.n	80050d0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050cc:	609a      	str	r2, [r3, #8]
}
 80050ce:	e016      	b.n	80050fe <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a13      	ldr	r2, [pc, #76]	@ (8005120 <ADC_ConfigureBoostMode+0x1d8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d80a      	bhi.n	80050ee <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ea:	609a      	str	r2, [r3, #8]
}
 80050ec:	e007      	b.n	80050fe <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80050fc:	609a      	str	r2, [r3, #8]
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40022000 	.word	0x40022000
 800510c:	40022100 	.word	0x40022100
 8005110:	40022300 	.word	0x40022300
 8005114:	58026300 	.word	0x58026300
 8005118:	005f5e10 	.word	0x005f5e10
 800511c:	00bebc20 	.word	0x00bebc20
 8005120:	017d7840 	.word	0x017d7840

08005124 <LL_ADC_IsEnabled>:
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <LL_ADC_IsEnabled+0x18>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <LL_ADC_IsEnabled+0x1a>
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <LL_ADC_REG_IsConversionOngoing>:
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b04      	cmp	r3, #4
 800515c:	d101      	bne.n	8005162 <LL_ADC_REG_IsConversionOngoing+0x18>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b0a3      	sub	sp, #140	@ 0x8c
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e0c1      	b.n	8005376 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80051fe:	2300      	movs	r3, #0
 8005200:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a5e      	ldr	r2, [pc, #376]	@ (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d102      	bne.n	8005212 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800520c:	4b5d      	ldr	r3, [pc, #372]	@ (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e001      	b.n	8005216 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005220:	f043 0220 	orr.w	r2, r3, #32
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0a0      	b.n	8005376 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff ff87 	bl	800514a <LL_ADC_REG_IsConversionOngoing>
 800523c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff ff80 	bl	800514a <LL_ADC_REG_IsConversionOngoing>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 8081 	bne.w	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d17c      	bne.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a48      	ldr	r2, [pc, #288]	@ (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a46      	ldr	r2, [pc, #280]	@ (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800526e:	4b46      	ldr	r3, [pc, #280]	@ (8005388 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005270:	e000      	b.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005272:	4b46      	ldr	r3, [pc, #280]	@ (800538c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005274:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d039      	beq.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800527e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	431a      	orrs	r2, r3
 800528c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800528e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a3a      	ldr	r2, [pc, #232]	@ (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a39      	ldr	r2, [pc, #228]	@ (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10e      	bne.n	80052c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80052a4:	4836      	ldr	r0, [pc, #216]	@ (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052a6:	f7ff ff3d 	bl	8005124 <LL_ADC_IsEnabled>
 80052aa:	4604      	mov	r4, r0
 80052ac:	4835      	ldr	r0, [pc, #212]	@ (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052ae:	f7ff ff39 	bl	8005124 <LL_ADC_IsEnabled>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4323      	orrs	r3, r4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	e008      	b.n	80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80052c2:	4833      	ldr	r0, [pc, #204]	@ (8005390 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80052c4:	f7ff ff2e 	bl	8005124 <LL_ADC_IsEnabled>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d047      	beq.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80052d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052de:	4013      	ands	r3, r2
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	6811      	ldr	r1, [r2, #0]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	431a      	orrs	r2, r3
 80052ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052f0:	e03a      	b.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80052f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1f      	ldr	r2, [pc, #124]	@ (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1d      	ldr	r2, [pc, #116]	@ (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10e      	bne.n	8005330 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005312:	481b      	ldr	r0, [pc, #108]	@ (8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005314:	f7ff ff06 	bl	8005124 <LL_ADC_IsEnabled>
 8005318:	4604      	mov	r4, r0
 800531a:	481a      	ldr	r0, [pc, #104]	@ (8005384 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800531c:	f7ff ff02 	bl	8005124 <LL_ADC_IsEnabled>
 8005320:	4603      	mov	r3, r0
 8005322:	4323      	orrs	r3, r4
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e008      	b.n	8005342 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005330:	4817      	ldr	r0, [pc, #92]	@ (8005390 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005332:	f7ff fef7 	bl	8005124 <LL_ADC_IsEnabled>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800534c:	4013      	ands	r3, r2
 800534e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005350:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005352:	e009      	b.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005358:	f043 0220 	orr.w	r2, r3, #32
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005366:	e000      	b.n	800536a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005368:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005372:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005376:	4618      	mov	r0, r3
 8005378:	378c      	adds	r7, #140	@ 0x8c
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}
 800537e:	bf00      	nop
 8005380:	40022000 	.word	0x40022000
 8005384:	40022100 	.word	0x40022100
 8005388:	40022300 	.word	0x40022300
 800538c:	58026300 	.word	0x58026300
 8005390:	58026000 	.word	0x58026000
 8005394:	fffff0e0 	.word	0xfffff0e0

08005398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <__NVIC_SetPriorityGrouping+0x40>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053b4:	4013      	ands	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053c0:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053c6:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <__NVIC_SetPriorityGrouping+0x40>)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	60d3      	str	r3, [r2, #12]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00
 80053dc:	05fa0000 	.word	0x05fa0000

080053e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e4:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <__NVIC_GetPriorityGrouping+0x18>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	f003 0307 	and.w	r3, r3, #7
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db0b      	blt.n	8005426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	4907      	ldr	r1, [pc, #28]	@ (8005434 <__NVIC_EnableIRQ+0x38>)
 8005416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2001      	movs	r0, #1
 800541e:	fa00 f202 	lsl.w	r2, r0, r2
 8005422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	e000e100 	.word	0xe000e100

08005438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	6039      	str	r1, [r7, #0]
 8005442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db0a      	blt.n	8005462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	490c      	ldr	r1, [pc, #48]	@ (8005484 <__NVIC_SetPriority+0x4c>)
 8005452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005456:	0112      	lsls	r2, r2, #4
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	440b      	add	r3, r1
 800545c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005460:	e00a      	b.n	8005478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4908      	ldr	r1, [pc, #32]	@ (8005488 <__NVIC_SetPriority+0x50>)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	3b04      	subs	r3, #4
 8005470:	0112      	lsls	r2, r2, #4
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	440b      	add	r3, r1
 8005476:	761a      	strb	r2, [r3, #24]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	e000e100 	.word	0xe000e100
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f1c3 0307 	rsb	r3, r3, #7
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	bf28      	it	cs
 80054aa:	2304      	movcs	r3, #4
 80054ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d902      	bls.n	80054bc <NVIC_EncodePriority+0x30>
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3b03      	subs	r3, #3
 80054ba:	e000      	b.n	80054be <NVIC_EncodePriority+0x32>
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43da      	mvns	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	401a      	ands	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d4:	f04f 31ff 	mov.w	r1, #4294967295
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	43d9      	mvns	r1, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e4:	4313      	orrs	r3, r2
         );
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3724      	adds	r7, #36	@ 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005504:	d301      	bcc.n	800550a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005506:	2301      	movs	r3, #1
 8005508:	e00f      	b.n	800552a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800550a:	4a0a      	ldr	r2, [pc, #40]	@ (8005534 <SysTick_Config+0x40>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3b01      	subs	r3, #1
 8005510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005512:	210f      	movs	r1, #15
 8005514:	f04f 30ff 	mov.w	r0, #4294967295
 8005518:	f7ff ff8e 	bl	8005438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800551c:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <SysTick_Config+0x40>)
 800551e:	2200      	movs	r2, #0
 8005520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005522:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <SysTick_Config+0x40>)
 8005524:	2207      	movs	r2, #7
 8005526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	e000e010 	.word	0xe000e010

08005538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff29 	bl	8005398 <__NVIC_SetPriorityGrouping>
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b086      	sub	sp, #24
 8005552:	af00      	add	r7, sp, #0
 8005554:	4603      	mov	r3, r0
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800555c:	f7ff ff40 	bl	80053e0 <__NVIC_GetPriorityGrouping>
 8005560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	6978      	ldr	r0, [r7, #20]
 8005568:	f7ff ff90 	bl	800548c <NVIC_EncodePriority>
 800556c:	4602      	mov	r2, r0
 800556e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005572:	4611      	mov	r1, r2
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff5f 	bl	8005438 <__NVIC_SetPriority>
}
 800557a:	bf00      	nop
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	4603      	mov	r3, r0
 800558a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800558c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ff33 	bl	80053fc <__NVIC_EnableIRQ>
}
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff ffa4 	bl	80054f4 <SysTick_Config>
 80055ac:	4603      	mov	r3, r0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055c0:	f7fd fab0 	bl	8002b24 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e312      	b.n	8005bf6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a66      	ldr	r2, [pc, #408]	@ (8005770 <HAL_DMA_Init+0x1b8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d04a      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a65      	ldr	r2, [pc, #404]	@ (8005774 <HAL_DMA_Init+0x1bc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d045      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a63      	ldr	r2, [pc, #396]	@ (8005778 <HAL_DMA_Init+0x1c0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d040      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a62      	ldr	r2, [pc, #392]	@ (800577c <HAL_DMA_Init+0x1c4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d03b      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a60      	ldr	r2, [pc, #384]	@ (8005780 <HAL_DMA_Init+0x1c8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d036      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a5f      	ldr	r2, [pc, #380]	@ (8005784 <HAL_DMA_Init+0x1cc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d031      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5d      	ldr	r2, [pc, #372]	@ (8005788 <HAL_DMA_Init+0x1d0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02c      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a5c      	ldr	r2, [pc, #368]	@ (800578c <HAL_DMA_Init+0x1d4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d027      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5a      	ldr	r2, [pc, #360]	@ (8005790 <HAL_DMA_Init+0x1d8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a59      	ldr	r2, [pc, #356]	@ (8005794 <HAL_DMA_Init+0x1dc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d01d      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a57      	ldr	r2, [pc, #348]	@ (8005798 <HAL_DMA_Init+0x1e0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a56      	ldr	r2, [pc, #344]	@ (800579c <HAL_DMA_Init+0x1e4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a54      	ldr	r2, [pc, #336]	@ (80057a0 <HAL_DMA_Init+0x1e8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a53      	ldr	r2, [pc, #332]	@ (80057a4 <HAL_DMA_Init+0x1ec>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a51      	ldr	r2, [pc, #324]	@ (80057a8 <HAL_DMA_Init+0x1f0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_DMA_Init+0xb8>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a50      	ldr	r2, [pc, #320]	@ (80057ac <HAL_DMA_Init+0x1f4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d101      	bne.n	8005674 <HAL_DMA_Init+0xbc>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_DMA_Init+0xbe>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 813c 	beq.w	80058f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a37      	ldr	r2, [pc, #220]	@ (8005770 <HAL_DMA_Init+0x1b8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d04a      	beq.n	800572c <HAL_DMA_Init+0x174>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a36      	ldr	r2, [pc, #216]	@ (8005774 <HAL_DMA_Init+0x1bc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d045      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a34      	ldr	r2, [pc, #208]	@ (8005778 <HAL_DMA_Init+0x1c0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d040      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a33      	ldr	r2, [pc, #204]	@ (800577c <HAL_DMA_Init+0x1c4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d03b      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a31      	ldr	r2, [pc, #196]	@ (8005780 <HAL_DMA_Init+0x1c8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d036      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a30      	ldr	r2, [pc, #192]	@ (8005784 <HAL_DMA_Init+0x1cc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d031      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <HAL_DMA_Init+0x1d0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d02c      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <HAL_DMA_Init+0x1d4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d027      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005790 <HAL_DMA_Init+0x1d8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d022      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005794 <HAL_DMA_Init+0x1dc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d01d      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a28      	ldr	r2, [pc, #160]	@ (8005798 <HAL_DMA_Init+0x1e0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d018      	beq.n	800572c <HAL_DMA_Init+0x174>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a27      	ldr	r2, [pc, #156]	@ (800579c <HAL_DMA_Init+0x1e4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <HAL_DMA_Init+0x174>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a25      	ldr	r2, [pc, #148]	@ (80057a0 <HAL_DMA_Init+0x1e8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00e      	beq.n	800572c <HAL_DMA_Init+0x174>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <HAL_DMA_Init+0x1ec>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d009      	beq.n	800572c <HAL_DMA_Init+0x174>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a22      	ldr	r2, [pc, #136]	@ (80057a8 <HAL_DMA_Init+0x1f0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_DMA_Init+0x174>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <HAL_DMA_Init+0x1f4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <HAL_DMA_Init+0x186>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e007      	b.n	800574e <HAL_DMA_Init+0x196>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800574e:	e02f      	b.n	80057b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005750:	f7fd f9e8 	bl	8002b24 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b05      	cmp	r3, #5
 800575c:	d928      	bls.n	80057b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2203      	movs	r2, #3
 8005768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e242      	b.n	8005bf6 <HAL_DMA_Init+0x63e>
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1c8      	bne.n	8005750 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4b83      	ldr	r3, [pc, #524]	@ (80059d8 <HAL_DMA_Init+0x420>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80057d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	2b04      	cmp	r3, #4
 8005802:	d107      	bne.n	8005814 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	4313      	orrs	r3, r2
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b28      	cmp	r3, #40	@ 0x28
 800581a:	d903      	bls.n	8005824 <HAL_DMA_Init+0x26c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b2e      	cmp	r3, #46	@ 0x2e
 8005822:	d91f      	bls.n	8005864 <HAL_DMA_Init+0x2ac>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b3e      	cmp	r3, #62	@ 0x3e
 800582a:	d903      	bls.n	8005834 <HAL_DMA_Init+0x27c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b42      	cmp	r3, #66	@ 0x42
 8005832:	d917      	bls.n	8005864 <HAL_DMA_Init+0x2ac>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b46      	cmp	r3, #70	@ 0x46
 800583a:	d903      	bls.n	8005844 <HAL_DMA_Init+0x28c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b48      	cmp	r3, #72	@ 0x48
 8005842:	d90f      	bls.n	8005864 <HAL_DMA_Init+0x2ac>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b4e      	cmp	r3, #78	@ 0x4e
 800584a:	d903      	bls.n	8005854 <HAL_DMA_Init+0x29c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b52      	cmp	r3, #82	@ 0x52
 8005852:	d907      	bls.n	8005864 <HAL_DMA_Init+0x2ac>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b73      	cmp	r3, #115	@ 0x73
 800585a:	d905      	bls.n	8005868 <HAL_DMA_Init+0x2b0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b77      	cmp	r3, #119	@ 0x77
 8005862:	d801      	bhi.n	8005868 <HAL_DMA_Init+0x2b0>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_DMA_Init+0x2b2>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005874:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f023 0307 	bic.w	r3, r3, #7
 800588c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	2b04      	cmp	r3, #4
 800589e:	d117      	bne.n	80058d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00e      	beq.n	80058d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fdca 	bl	800744c <DMA_CheckFifoParam>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2240      	movs	r2, #64	@ 0x40
 80058c2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e192      	b.n	8005bf6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 fd05 	bl	80072e8 <DMA_CalcBaseAndBitshift>
 80058de:	4603      	mov	r3, r0
 80058e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	223f      	movs	r2, #63	@ 0x3f
 80058ec:	409a      	lsls	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	e0c8      	b.n	8005a86 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a38      	ldr	r2, [pc, #224]	@ (80059dc <HAL_DMA_Init+0x424>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d022      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a37      	ldr	r2, [pc, #220]	@ (80059e0 <HAL_DMA_Init+0x428>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d01d      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a35      	ldr	r2, [pc, #212]	@ (80059e4 <HAL_DMA_Init+0x42c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a34      	ldr	r2, [pc, #208]	@ (80059e8 <HAL_DMA_Init+0x430>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d013      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a32      	ldr	r2, [pc, #200]	@ (80059ec <HAL_DMA_Init+0x434>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a31      	ldr	r2, [pc, #196]	@ (80059f0 <HAL_DMA_Init+0x438>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2f      	ldr	r2, [pc, #188]	@ (80059f4 <HAL_DMA_Init+0x43c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_DMA_Init+0x38c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2e      	ldr	r2, [pc, #184]	@ (80059f8 <HAL_DMA_Init+0x440>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d101      	bne.n	8005948 <HAL_DMA_Init+0x390>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <HAL_DMA_Init+0x392>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8092 	beq.w	8005a74 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a21      	ldr	r2, [pc, #132]	@ (80059dc <HAL_DMA_Init+0x424>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d021      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a20      	ldr	r2, [pc, #128]	@ (80059e0 <HAL_DMA_Init+0x428>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d01c      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_DMA_Init+0x42c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d017      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <HAL_DMA_Init+0x430>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d012      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <HAL_DMA_Init+0x434>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00d      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1a      	ldr	r2, [pc, #104]	@ (80059f0 <HAL_DMA_Init+0x438>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d008      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a18      	ldr	r2, [pc, #96]	@ (80059f4 <HAL_DMA_Init+0x43c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <HAL_DMA_Init+0x3e6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <HAL_DMA_Init+0x440>)
 800599c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <HAL_DMA_Init+0x444>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d01c      	beq.n	8005a00 <HAL_DMA_Init+0x448>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b80      	cmp	r3, #128	@ 0x80
 80059cc:	d102      	bne.n	80059d4 <HAL_DMA_Init+0x41c>
 80059ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059d2:	e016      	b.n	8005a02 <HAL_DMA_Init+0x44a>
 80059d4:	2300      	movs	r3, #0
 80059d6:	e014      	b.n	8005a02 <HAL_DMA_Init+0x44a>
 80059d8:	fe10803f 	.word	0xfe10803f
 80059dc:	58025408 	.word	0x58025408
 80059e0:	5802541c 	.word	0x5802541c
 80059e4:	58025430 	.word	0x58025430
 80059e8:	58025444 	.word	0x58025444
 80059ec:	58025458 	.word	0x58025458
 80059f0:	5802546c 	.word	0x5802546c
 80059f4:	58025480 	.word	0x58025480
 80059f8:	58025494 	.word	0x58025494
 80059fc:	fffe000f 	.word	0xfffe000f
 8005a00:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a30:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	4b6e      	ldr	r3, [pc, #440]	@ (8005c00 <HAL_DMA_Init+0x648>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c04 <HAL_DMA_Init+0x64c>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	009a      	lsls	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fc45 	bl	80072e8 <DMA_CalcBaseAndBitshift>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	e008      	b.n	8005a86 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e0b7      	b.n	8005bf6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5f      	ldr	r2, [pc, #380]	@ (8005c08 <HAL_DMA_Init+0x650>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d072      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5d      	ldr	r2, [pc, #372]	@ (8005c0c <HAL_DMA_Init+0x654>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d06d      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8005c10 <HAL_DMA_Init+0x658>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d068      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8005c14 <HAL_DMA_Init+0x65c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d063      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a59      	ldr	r2, [pc, #356]	@ (8005c18 <HAL_DMA_Init+0x660>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d05e      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a57      	ldr	r2, [pc, #348]	@ (8005c1c <HAL_DMA_Init+0x664>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d059      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a56      	ldr	r2, [pc, #344]	@ (8005c20 <HAL_DMA_Init+0x668>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d054      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a54      	ldr	r2, [pc, #336]	@ (8005c24 <HAL_DMA_Init+0x66c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d04f      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a53      	ldr	r2, [pc, #332]	@ (8005c28 <HAL_DMA_Init+0x670>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a51      	ldr	r2, [pc, #324]	@ (8005c2c <HAL_DMA_Init+0x674>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a50      	ldr	r2, [pc, #320]	@ (8005c30 <HAL_DMA_Init+0x678>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a4e      	ldr	r2, [pc, #312]	@ (8005c34 <HAL_DMA_Init+0x67c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4d      	ldr	r2, [pc, #308]	@ (8005c38 <HAL_DMA_Init+0x680>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8005c3c <HAL_DMA_Init+0x684>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a4a      	ldr	r2, [pc, #296]	@ (8005c40 <HAL_DMA_Init+0x688>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a48      	ldr	r2, [pc, #288]	@ (8005c44 <HAL_DMA_Init+0x68c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a47      	ldr	r2, [pc, #284]	@ (8005c48 <HAL_DMA_Init+0x690>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a45      	ldr	r2, [pc, #276]	@ (8005c4c <HAL_DMA_Init+0x694>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a44      	ldr	r2, [pc, #272]	@ (8005c50 <HAL_DMA_Init+0x698>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a42      	ldr	r2, [pc, #264]	@ (8005c54 <HAL_DMA_Init+0x69c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a41      	ldr	r2, [pc, #260]	@ (8005c58 <HAL_DMA_Init+0x6a0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c5c <HAL_DMA_Init+0x6a4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3e      	ldr	r2, [pc, #248]	@ (8005c60 <HAL_DMA_Init+0x6a8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_Init+0x5be>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a3c      	ldr	r2, [pc, #240]	@ (8005c64 <HAL_DMA_Init+0x6ac>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Init+0x5c2>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_DMA_Init+0x5c4>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d032      	beq.n	8005be6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fcdf 	bl	8007544 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b80      	cmp	r3, #128	@ 0x80
 8005b8c:	d102      	bne.n	8005b94 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ba8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_DMA_Init+0x61c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d80c      	bhi.n	8005bd4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 fd5c 	bl	8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e008      	b.n	8005be6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	a7fdabf8 	.word	0xa7fdabf8
 8005c04:	cccccccd 	.word	0xcccccccd
 8005c08:	40020010 	.word	0x40020010
 8005c0c:	40020028 	.word	0x40020028
 8005c10:	40020040 	.word	0x40020040
 8005c14:	40020058 	.word	0x40020058
 8005c18:	40020070 	.word	0x40020070
 8005c1c:	40020088 	.word	0x40020088
 8005c20:	400200a0 	.word	0x400200a0
 8005c24:	400200b8 	.word	0x400200b8
 8005c28:	40020410 	.word	0x40020410
 8005c2c:	40020428 	.word	0x40020428
 8005c30:	40020440 	.word	0x40020440
 8005c34:	40020458 	.word	0x40020458
 8005c38:	40020470 	.word	0x40020470
 8005c3c:	40020488 	.word	0x40020488
 8005c40:	400204a0 	.word	0x400204a0
 8005c44:	400204b8 	.word	0x400204b8
 8005c48:	58025408 	.word	0x58025408
 8005c4c:	5802541c 	.word	0x5802541c
 8005c50:	58025430 	.word	0x58025430
 8005c54:	58025444 	.word	0x58025444
 8005c58:	58025458 	.word	0x58025458
 8005c5c:	5802546c 	.word	0x5802546c
 8005c60:	58025480 	.word	0x58025480
 8005c64:	58025494 	.word	0x58025494

08005c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e226      	b.n	80060d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_DMA_Start_IT+0x2a>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e21f      	b.n	80060d2 <HAL_DMA_Start_IT+0x46a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f040 820a 	bne.w	80060bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a68      	ldr	r2, [pc, #416]	@ (8005e5c <HAL_DMA_Start_IT+0x1f4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d04a      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a66      	ldr	r2, [pc, #408]	@ (8005e60 <HAL_DMA_Start_IT+0x1f8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d045      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a65      	ldr	r2, [pc, #404]	@ (8005e64 <HAL_DMA_Start_IT+0x1fc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d040      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a63      	ldr	r2, [pc, #396]	@ (8005e68 <HAL_DMA_Start_IT+0x200>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d03b      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a62      	ldr	r2, [pc, #392]	@ (8005e6c <HAL_DMA_Start_IT+0x204>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d036      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a60      	ldr	r2, [pc, #384]	@ (8005e70 <HAL_DMA_Start_IT+0x208>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d031      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8005e74 <HAL_DMA_Start_IT+0x20c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d02c      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5d      	ldr	r2, [pc, #372]	@ (8005e78 <HAL_DMA_Start_IT+0x210>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d027      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8005e7c <HAL_DMA_Start_IT+0x214>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d022      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a5a      	ldr	r2, [pc, #360]	@ (8005e80 <HAL_DMA_Start_IT+0x218>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01d      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a59      	ldr	r2, [pc, #356]	@ (8005e84 <HAL_DMA_Start_IT+0x21c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d018      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a57      	ldr	r2, [pc, #348]	@ (8005e88 <HAL_DMA_Start_IT+0x220>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a56      	ldr	r2, [pc, #344]	@ (8005e8c <HAL_DMA_Start_IT+0x224>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00e      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a54      	ldr	r2, [pc, #336]	@ (8005e90 <HAL_DMA_Start_IT+0x228>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a53      	ldr	r2, [pc, #332]	@ (8005e94 <HAL_DMA_Start_IT+0x22c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d004      	beq.n	8005d56 <HAL_DMA_Start_IT+0xee>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a51      	ldr	r2, [pc, #324]	@ (8005e98 <HAL_DMA_Start_IT+0x230>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d108      	bne.n	8005d68 <HAL_DMA_Start_IT+0x100>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e007      	b.n	8005d78 <HAL_DMA_Start_IT+0x110>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f001 f906 	bl	8006f90 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a34      	ldr	r2, [pc, #208]	@ (8005e5c <HAL_DMA_Start_IT+0x1f4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d04a      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a33      	ldr	r2, [pc, #204]	@ (8005e60 <HAL_DMA_Start_IT+0x1f8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d045      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a31      	ldr	r2, [pc, #196]	@ (8005e64 <HAL_DMA_Start_IT+0x1fc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d040      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a30      	ldr	r2, [pc, #192]	@ (8005e68 <HAL_DMA_Start_IT+0x200>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d03b      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e6c <HAL_DMA_Start_IT+0x204>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d036      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2d      	ldr	r2, [pc, #180]	@ (8005e70 <HAL_DMA_Start_IT+0x208>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005e74 <HAL_DMA_Start_IT+0x20c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02c      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2a      	ldr	r2, [pc, #168]	@ (8005e78 <HAL_DMA_Start_IT+0x210>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d027      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a28      	ldr	r2, [pc, #160]	@ (8005e7c <HAL_DMA_Start_IT+0x214>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a27      	ldr	r2, [pc, #156]	@ (8005e80 <HAL_DMA_Start_IT+0x218>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01d      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a25      	ldr	r2, [pc, #148]	@ (8005e84 <HAL_DMA_Start_IT+0x21c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a24      	ldr	r2, [pc, #144]	@ (8005e88 <HAL_DMA_Start_IT+0x220>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a22      	ldr	r2, [pc, #136]	@ (8005e8c <HAL_DMA_Start_IT+0x224>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	@ (8005e90 <HAL_DMA_Start_IT+0x228>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1f      	ldr	r2, [pc, #124]	@ (8005e94 <HAL_DMA_Start_IT+0x22c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_DMA_Start_IT+0x1bc>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e98 <HAL_DMA_Start_IT+0x230>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d101      	bne.n	8005e28 <HAL_DMA_Start_IT+0x1c0>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_DMA_Start_IT+0x1c2>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d036      	beq.n	8005e9c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 021e 	bic.w	r2, r3, #30
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0216 	orr.w	r2, r2, #22
 8005e40:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d03e      	beq.n	8005ec8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0208 	orr.w	r2, r2, #8
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e035      	b.n	8005ec8 <HAL_DMA_Start_IT+0x260>
 8005e5c:	40020010 	.word	0x40020010
 8005e60:	40020028 	.word	0x40020028
 8005e64:	40020040 	.word	0x40020040
 8005e68:	40020058 	.word	0x40020058
 8005e6c:	40020070 	.word	0x40020070
 8005e70:	40020088 	.word	0x40020088
 8005e74:	400200a0 	.word	0x400200a0
 8005e78:	400200b8 	.word	0x400200b8
 8005e7c:	40020410 	.word	0x40020410
 8005e80:	40020428 	.word	0x40020428
 8005e84:	40020440 	.word	0x40020440
 8005e88:	40020458 	.word	0x40020458
 8005e8c:	40020470 	.word	0x40020470
 8005e90:	40020488 	.word	0x40020488
 8005e94:	400204a0 	.word	0x400204a0
 8005e98:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 020e 	bic.w	r2, r3, #14
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 020a 	orr.w	r2, r2, #10
 8005eae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0204 	orr.w	r2, r2, #4
 8005ec6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a83      	ldr	r2, [pc, #524]	@ (80060dc <HAL_DMA_Start_IT+0x474>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d072      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a82      	ldr	r2, [pc, #520]	@ (80060e0 <HAL_DMA_Start_IT+0x478>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d06d      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a80      	ldr	r2, [pc, #512]	@ (80060e4 <HAL_DMA_Start_IT+0x47c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d068      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7f      	ldr	r2, [pc, #508]	@ (80060e8 <HAL_DMA_Start_IT+0x480>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d063      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7d      	ldr	r2, [pc, #500]	@ (80060ec <HAL_DMA_Start_IT+0x484>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d05e      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a7c      	ldr	r2, [pc, #496]	@ (80060f0 <HAL_DMA_Start_IT+0x488>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d059      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a7a      	ldr	r2, [pc, #488]	@ (80060f4 <HAL_DMA_Start_IT+0x48c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d054      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a79      	ldr	r2, [pc, #484]	@ (80060f8 <HAL_DMA_Start_IT+0x490>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d04f      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a77      	ldr	r2, [pc, #476]	@ (80060fc <HAL_DMA_Start_IT+0x494>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d04a      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a76      	ldr	r2, [pc, #472]	@ (8006100 <HAL_DMA_Start_IT+0x498>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d045      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a74      	ldr	r2, [pc, #464]	@ (8006104 <HAL_DMA_Start_IT+0x49c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d040      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a73      	ldr	r2, [pc, #460]	@ (8006108 <HAL_DMA_Start_IT+0x4a0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d03b      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a71      	ldr	r2, [pc, #452]	@ (800610c <HAL_DMA_Start_IT+0x4a4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d036      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a70      	ldr	r2, [pc, #448]	@ (8006110 <HAL_DMA_Start_IT+0x4a8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d031      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a6e      	ldr	r2, [pc, #440]	@ (8006114 <HAL_DMA_Start_IT+0x4ac>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d02c      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a6d      	ldr	r2, [pc, #436]	@ (8006118 <HAL_DMA_Start_IT+0x4b0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d027      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800611c <HAL_DMA_Start_IT+0x4b4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d022      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6a      	ldr	r2, [pc, #424]	@ (8006120 <HAL_DMA_Start_IT+0x4b8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d01d      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a68      	ldr	r2, [pc, #416]	@ (8006124 <HAL_DMA_Start_IT+0x4bc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a67      	ldr	r2, [pc, #412]	@ (8006128 <HAL_DMA_Start_IT+0x4c0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d013      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a65      	ldr	r2, [pc, #404]	@ (800612c <HAL_DMA_Start_IT+0x4c4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a64      	ldr	r2, [pc, #400]	@ (8006130 <HAL_DMA_Start_IT+0x4c8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a62      	ldr	r2, [pc, #392]	@ (8006134 <HAL_DMA_Start_IT+0x4cc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_DMA_Start_IT+0x350>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a61      	ldr	r2, [pc, #388]	@ (8006138 <HAL_DMA_Start_IT+0x4d0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <HAL_DMA_Start_IT+0x354>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <HAL_DMA_Start_IT+0x356>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01a      	beq.n	8005ff8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fde:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ff6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a37      	ldr	r2, [pc, #220]	@ (80060dc <HAL_DMA_Start_IT+0x474>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d04a      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a36      	ldr	r2, [pc, #216]	@ (80060e0 <HAL_DMA_Start_IT+0x478>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d045      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a34      	ldr	r2, [pc, #208]	@ (80060e4 <HAL_DMA_Start_IT+0x47c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d040      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	@ (80060e8 <HAL_DMA_Start_IT+0x480>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d03b      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a31      	ldr	r2, [pc, #196]	@ (80060ec <HAL_DMA_Start_IT+0x484>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d036      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a30      	ldr	r2, [pc, #192]	@ (80060f0 <HAL_DMA_Start_IT+0x488>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d031      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2e      	ldr	r2, [pc, #184]	@ (80060f4 <HAL_DMA_Start_IT+0x48c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d02c      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2d      	ldr	r2, [pc, #180]	@ (80060f8 <HAL_DMA_Start_IT+0x490>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d027      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <HAL_DMA_Start_IT+0x494>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <HAL_DMA_Start_IT+0x498>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d01d      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a28      	ldr	r2, [pc, #160]	@ (8006104 <HAL_DMA_Start_IT+0x49c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a27      	ldr	r2, [pc, #156]	@ (8006108 <HAL_DMA_Start_IT+0x4a0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	@ (800610c <HAL_DMA_Start_IT+0x4a4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a24      	ldr	r2, [pc, #144]	@ (8006110 <HAL_DMA_Start_IT+0x4a8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <HAL_DMA_Start_IT+0x4ac>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_DMA_Start_IT+0x430>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	@ (8006118 <HAL_DMA_Start_IT+0x4b0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d108      	bne.n	80060aa <HAL_DMA_Start_IT+0x442>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0201 	orr.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]
 80060a8:	e012      	b.n	80060d0 <HAL_DMA_Start_IT+0x468>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e009      	b.n	80060d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060c2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40020010 	.word	0x40020010
 80060e0:	40020028 	.word	0x40020028
 80060e4:	40020040 	.word	0x40020040
 80060e8:	40020058 	.word	0x40020058
 80060ec:	40020070 	.word	0x40020070
 80060f0:	40020088 	.word	0x40020088
 80060f4:	400200a0 	.word	0x400200a0
 80060f8:	400200b8 	.word	0x400200b8
 80060fc:	40020410 	.word	0x40020410
 8006100:	40020428 	.word	0x40020428
 8006104:	40020440 	.word	0x40020440
 8006108:	40020458 	.word	0x40020458
 800610c:	40020470 	.word	0x40020470
 8006110:	40020488 	.word	0x40020488
 8006114:	400204a0 	.word	0x400204a0
 8006118:	400204b8 	.word	0x400204b8
 800611c:	58025408 	.word	0x58025408
 8006120:	5802541c 	.word	0x5802541c
 8006124:	58025430 	.word	0x58025430
 8006128:	58025444 	.word	0x58025444
 800612c:	58025458 	.word	0x58025458
 8006130:	5802546c 	.word	0x5802546c
 8006134:	58025480 	.word	0x58025480
 8006138:	58025494 	.word	0x58025494

0800613c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	@ 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006148:	4b67      	ldr	r3, [pc, #412]	@ (80062e8 <HAL_DMA_IRQHandler+0x1ac>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a67      	ldr	r2, [pc, #412]	@ (80062ec <HAL_DMA_IRQHandler+0x1b0>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	0a9b      	lsrs	r3, r3, #10
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006160:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5f      	ldr	r2, [pc, #380]	@ (80062f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04a      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a5d      	ldr	r2, [pc, #372]	@ (80062f4 <HAL_DMA_IRQHandler+0x1b8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d045      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5c      	ldr	r2, [pc, #368]	@ (80062f8 <HAL_DMA_IRQHandler+0x1bc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5a      	ldr	r2, [pc, #360]	@ (80062fc <HAL_DMA_IRQHandler+0x1c0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a59      	ldr	r2, [pc, #356]	@ (8006300 <HAL_DMA_IRQHandler+0x1c4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d036      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a57      	ldr	r2, [pc, #348]	@ (8006304 <HAL_DMA_IRQHandler+0x1c8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d031      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a56      	ldr	r2, [pc, #344]	@ (8006308 <HAL_DMA_IRQHandler+0x1cc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d02c      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a54      	ldr	r2, [pc, #336]	@ (800630c <HAL_DMA_IRQHandler+0x1d0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a53      	ldr	r2, [pc, #332]	@ (8006310 <HAL_DMA_IRQHandler+0x1d4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a51      	ldr	r2, [pc, #324]	@ (8006314 <HAL_DMA_IRQHandler+0x1d8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a50      	ldr	r2, [pc, #320]	@ (8006318 <HAL_DMA_IRQHandler+0x1dc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a4e      	ldr	r2, [pc, #312]	@ (800631c <HAL_DMA_IRQHandler+0x1e0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a4d      	ldr	r2, [pc, #308]	@ (8006320 <HAL_DMA_IRQHandler+0x1e4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006324 <HAL_DMA_IRQHandler+0x1e8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006328 <HAL_DMA_IRQHandler+0x1ec>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_DMA_IRQHandler+0xd2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a48      	ldr	r2, [pc, #288]	@ (800632c <HAL_DMA_IRQHandler+0x1f0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d101      	bne.n	8006212 <HAL_DMA_IRQHandler+0xd6>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <HAL_DMA_IRQHandler+0xd8>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 842b 	beq.w	8006a70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2208      	movs	r2, #8
 8006224:	409a      	lsls	r2, r3
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80a2 	beq.w	8006374 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a2e      	ldr	r2, [pc, #184]	@ (80062f0 <HAL_DMA_IRQHandler+0x1b4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d04a      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2d      	ldr	r2, [pc, #180]	@ (80062f4 <HAL_DMA_IRQHandler+0x1b8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d045      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2b      	ldr	r2, [pc, #172]	@ (80062f8 <HAL_DMA_IRQHandler+0x1bc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d040      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2a      	ldr	r2, [pc, #168]	@ (80062fc <HAL_DMA_IRQHandler+0x1c0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d03b      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <HAL_DMA_IRQHandler+0x1c4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d036      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a27      	ldr	r2, [pc, #156]	@ (8006304 <HAL_DMA_IRQHandler+0x1c8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d031      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a25      	ldr	r2, [pc, #148]	@ (8006308 <HAL_DMA_IRQHandler+0x1cc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02c      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a24      	ldr	r2, [pc, #144]	@ (800630c <HAL_DMA_IRQHandler+0x1d0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d027      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <HAL_DMA_IRQHandler+0x1d4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d022      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <HAL_DMA_IRQHandler+0x1d8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d01d      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1f      	ldr	r2, [pc, #124]	@ (8006318 <HAL_DMA_IRQHandler+0x1dc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1e      	ldr	r2, [pc, #120]	@ (800631c <HAL_DMA_IRQHandler+0x1e0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006320 <HAL_DMA_IRQHandler+0x1e4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006324 <HAL_DMA_IRQHandler+0x1e8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a19      	ldr	r2, [pc, #100]	@ (8006328 <HAL_DMA_IRQHandler+0x1ec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_DMA_IRQHandler+0x194>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a18      	ldr	r2, [pc, #96]	@ (800632c <HAL_DMA_IRQHandler+0x1f0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d12f      	bne.n	8006330 <HAL_DMA_IRQHandler+0x1f4>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	e02e      	b.n	8006344 <HAL_DMA_IRQHandler+0x208>
 80062e6:	bf00      	nop
 80062e8:	2400000c 	.word	0x2400000c
 80062ec:	1b4e81b5 	.word	0x1b4e81b5
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2208      	movs	r2, #8
 8006362:	409a      	lsls	r2, r3
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	f043 0201 	orr.w	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06e      	beq.n	8006468 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a69      	ldr	r2, [pc, #420]	@ (8006534 <HAL_DMA_IRQHandler+0x3f8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d04a      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a67      	ldr	r2, [pc, #412]	@ (8006538 <HAL_DMA_IRQHandler+0x3fc>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d045      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a66      	ldr	r2, [pc, #408]	@ (800653c <HAL_DMA_IRQHandler+0x400>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d040      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a64      	ldr	r2, [pc, #400]	@ (8006540 <HAL_DMA_IRQHandler+0x404>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d03b      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a63      	ldr	r2, [pc, #396]	@ (8006544 <HAL_DMA_IRQHandler+0x408>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d036      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a61      	ldr	r2, [pc, #388]	@ (8006548 <HAL_DMA_IRQHandler+0x40c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d031      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a60      	ldr	r2, [pc, #384]	@ (800654c <HAL_DMA_IRQHandler+0x410>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d02c      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006550 <HAL_DMA_IRQHandler+0x414>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d027      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5d      	ldr	r2, [pc, #372]	@ (8006554 <HAL_DMA_IRQHandler+0x418>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5b      	ldr	r2, [pc, #364]	@ (8006558 <HAL_DMA_IRQHandler+0x41c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01d      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a5a      	ldr	r2, [pc, #360]	@ (800655c <HAL_DMA_IRQHandler+0x420>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a58      	ldr	r2, [pc, #352]	@ (8006560 <HAL_DMA_IRQHandler+0x424>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a57      	ldr	r2, [pc, #348]	@ (8006564 <HAL_DMA_IRQHandler+0x428>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a55      	ldr	r2, [pc, #340]	@ (8006568 <HAL_DMA_IRQHandler+0x42c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a54      	ldr	r2, [pc, #336]	@ (800656c <HAL_DMA_IRQHandler+0x430>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_DMA_IRQHandler+0x2ee>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a52      	ldr	r2, [pc, #328]	@ (8006570 <HAL_DMA_IRQHandler+0x434>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d10a      	bne.n	8006440 <HAL_DMA_IRQHandler+0x304>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e003      	b.n	8006448 <HAL_DMA_IRQHandler+0x30c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2201      	movs	r2, #1
 8006456:	409a      	lsls	r2, r3
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006460:	f043 0202 	orr.w	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2204      	movs	r2, #4
 8006472:	409a      	lsls	r2, r3
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 808f 	beq.w	800659c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <HAL_DMA_IRQHandler+0x3f8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d04a      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2a      	ldr	r2, [pc, #168]	@ (8006538 <HAL_DMA_IRQHandler+0x3fc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d045      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a29      	ldr	r2, [pc, #164]	@ (800653c <HAL_DMA_IRQHandler+0x400>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d040      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a27      	ldr	r2, [pc, #156]	@ (8006540 <HAL_DMA_IRQHandler+0x404>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d03b      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a26      	ldr	r2, [pc, #152]	@ (8006544 <HAL_DMA_IRQHandler+0x408>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d036      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a24      	ldr	r2, [pc, #144]	@ (8006548 <HAL_DMA_IRQHandler+0x40c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d031      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a23      	ldr	r2, [pc, #140]	@ (800654c <HAL_DMA_IRQHandler+0x410>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d02c      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a21      	ldr	r2, [pc, #132]	@ (8006550 <HAL_DMA_IRQHandler+0x414>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d027      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a20      	ldr	r2, [pc, #128]	@ (8006554 <HAL_DMA_IRQHandler+0x418>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006558 <HAL_DMA_IRQHandler+0x41c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <HAL_DMA_IRQHandler+0x420>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006560 <HAL_DMA_IRQHandler+0x424>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006564 <HAL_DMA_IRQHandler+0x428>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	@ (8006568 <HAL_DMA_IRQHandler+0x42c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a17      	ldr	r2, [pc, #92]	@ (800656c <HAL_DMA_IRQHandler+0x430>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_DMA_IRQHandler+0x3e2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <HAL_DMA_IRQHandler+0x434>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d12a      	bne.n	8006574 <HAL_DMA_IRQHandler+0x438>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	bf14      	ite	ne
 800652c:	2301      	movne	r3, #1
 800652e:	2300      	moveq	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e023      	b.n	800657c <HAL_DMA_IRQHandler+0x440>
 8006534:	40020010 	.word	0x40020010
 8006538:	40020028 	.word	0x40020028
 800653c:	40020040 	.word	0x40020040
 8006540:	40020058 	.word	0x40020058
 8006544:	40020070 	.word	0x40020070
 8006548:	40020088 	.word	0x40020088
 800654c:	400200a0 	.word	0x400200a0
 8006550:	400200b8 	.word	0x400200b8
 8006554:	40020410 	.word	0x40020410
 8006558:	40020428 	.word	0x40020428
 800655c:	40020440 	.word	0x40020440
 8006560:	40020458 	.word	0x40020458
 8006564:	40020470 	.word	0x40020470
 8006568:	40020488 	.word	0x40020488
 800656c:	400204a0 	.word	0x400204a0
 8006570:	400204b8 	.word	0x400204b8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2204      	movs	r2, #4
 800658a:	409a      	lsls	r2, r3
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006594:	f043 0204 	orr.w	r2, r3, #4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2210      	movs	r2, #16
 80065a6:	409a      	lsls	r2, r3
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80a6 	beq.w	80066fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a85      	ldr	r2, [pc, #532]	@ (80067cc <HAL_DMA_IRQHandler+0x690>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d04a      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a83      	ldr	r2, [pc, #524]	@ (80067d0 <HAL_DMA_IRQHandler+0x694>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d045      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a82      	ldr	r2, [pc, #520]	@ (80067d4 <HAL_DMA_IRQHandler+0x698>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d040      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a80      	ldr	r2, [pc, #512]	@ (80067d8 <HAL_DMA_IRQHandler+0x69c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d03b      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7f      	ldr	r2, [pc, #508]	@ (80067dc <HAL_DMA_IRQHandler+0x6a0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d036      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a7d      	ldr	r2, [pc, #500]	@ (80067e0 <HAL_DMA_IRQHandler+0x6a4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d031      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7c      	ldr	r2, [pc, #496]	@ (80067e4 <HAL_DMA_IRQHandler+0x6a8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d02c      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a7a      	ldr	r2, [pc, #488]	@ (80067e8 <HAL_DMA_IRQHandler+0x6ac>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d027      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a79      	ldr	r2, [pc, #484]	@ (80067ec <HAL_DMA_IRQHandler+0x6b0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a77      	ldr	r2, [pc, #476]	@ (80067f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a76      	ldr	r2, [pc, #472]	@ (80067f4 <HAL_DMA_IRQHandler+0x6b8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a74      	ldr	r2, [pc, #464]	@ (80067f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a73      	ldr	r2, [pc, #460]	@ (80067fc <HAL_DMA_IRQHandler+0x6c0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a71      	ldr	r2, [pc, #452]	@ (8006800 <HAL_DMA_IRQHandler+0x6c4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a70      	ldr	r2, [pc, #448]	@ (8006804 <HAL_DMA_IRQHandler+0x6c8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_DMA_IRQHandler+0x516>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a6e      	ldr	r2, [pc, #440]	@ (8006808 <HAL_DMA_IRQHandler+0x6cc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d10a      	bne.n	8006668 <HAL_DMA_IRQHandler+0x52c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e009      	b.n	800667c <HAL_DMA_IRQHandler+0x540>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf14      	ite	ne
 8006676:	2301      	movne	r3, #1
 8006678:	2300      	moveq	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d03e      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2210      	movs	r2, #16
 800668a:	409a      	lsls	r2, r3
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d018      	beq.n	80066d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d024      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
 80066bc:	e01f      	b.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01b      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
 80066ce:	e016      	b.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d107      	bne.n	80066ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0208 	bic.w	r2, r2, #8
 80066ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006702:	f003 031f 	and.w	r3, r3, #31
 8006706:	2220      	movs	r2, #32
 8006708:	409a      	lsls	r2, r3
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8110 	beq.w	8006934 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2c      	ldr	r2, [pc, #176]	@ (80067cc <HAL_DMA_IRQHandler+0x690>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d04a      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2b      	ldr	r2, [pc, #172]	@ (80067d0 <HAL_DMA_IRQHandler+0x694>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d045      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a29      	ldr	r2, [pc, #164]	@ (80067d4 <HAL_DMA_IRQHandler+0x698>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d040      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a28      	ldr	r2, [pc, #160]	@ (80067d8 <HAL_DMA_IRQHandler+0x69c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d03b      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a26      	ldr	r2, [pc, #152]	@ (80067dc <HAL_DMA_IRQHandler+0x6a0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d036      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a25      	ldr	r2, [pc, #148]	@ (80067e0 <HAL_DMA_IRQHandler+0x6a4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d031      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a23      	ldr	r2, [pc, #140]	@ (80067e4 <HAL_DMA_IRQHandler+0x6a8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02c      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <HAL_DMA_IRQHandler+0x6ac>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d027      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a20      	ldr	r2, [pc, #128]	@ (80067ec <HAL_DMA_IRQHandler+0x6b0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <HAL_DMA_IRQHandler+0x6b4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d01d      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1d      	ldr	r2, [pc, #116]	@ (80067f4 <HAL_DMA_IRQHandler+0x6b8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <HAL_DMA_IRQHandler+0x6bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <HAL_DMA_IRQHandler+0x6c0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a19      	ldr	r2, [pc, #100]	@ (8006800 <HAL_DMA_IRQHandler+0x6c4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a17      	ldr	r2, [pc, #92]	@ (8006804 <HAL_DMA_IRQHandler+0x6c8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x678>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a16      	ldr	r2, [pc, #88]	@ (8006808 <HAL_DMA_IRQHandler+0x6cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d12b      	bne.n	800680c <HAL_DMA_IRQHandler+0x6d0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	e02a      	b.n	8006820 <HAL_DMA_IRQHandler+0x6e4>
 80067ca:	bf00      	nop
 80067cc:	40020010 	.word	0x40020010
 80067d0:	40020028 	.word	0x40020028
 80067d4:	40020040 	.word	0x40020040
 80067d8:	40020058 	.word	0x40020058
 80067dc:	40020070 	.word	0x40020070
 80067e0:	40020088 	.word	0x40020088
 80067e4:	400200a0 	.word	0x400200a0
 80067e8:	400200b8 	.word	0x400200b8
 80067ec:	40020410 	.word	0x40020410
 80067f0:	40020428 	.word	0x40020428
 80067f4:	40020440 	.word	0x40020440
 80067f8:	40020458 	.word	0x40020458
 80067fc:	40020470 	.word	0x40020470
 8006800:	40020488 	.word	0x40020488
 8006804:	400204a0 	.word	0x400204a0
 8006808:	400204b8 	.word	0x400204b8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	bf14      	ite	ne
 800681a:	2301      	movne	r3, #1
 800681c:	2300      	moveq	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8087 	beq.w	8006934 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2220      	movs	r2, #32
 8006830:	409a      	lsls	r2, r3
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b04      	cmp	r3, #4
 8006840:	d139      	bne.n	80068b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0216 	bic.w	r2, r2, #22
 8006850:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695a      	ldr	r2, [r3, #20]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006860:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <HAL_DMA_IRQHandler+0x736>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0208 	bic.w	r2, r2, #8
 8006880:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006886:	f003 031f 	and.w	r3, r3, #31
 800688a:	223f      	movs	r2, #63	@ 0x3f
 800688c:	409a      	lsls	r2, r3
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 834a 	beq.w	8006f40 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
          }
          return;
 80068b4:	e344      	b.n	8006f40 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d018      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02c      	beq.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	e027      	b.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d023      	beq.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
 80068f4:	e01e      	b.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10f      	bne.n	8006924 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0210 	bic.w	r2, r2, #16
 8006912:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8306 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8088 	beq.w	8006a5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2204      	movs	r2, #4
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a7a      	ldr	r2, [pc, #488]	@ (8006b44 <HAL_DMA_IRQHandler+0xa08>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a79      	ldr	r2, [pc, #484]	@ (8006b48 <HAL_DMA_IRQHandler+0xa0c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a77      	ldr	r2, [pc, #476]	@ (8006b4c <HAL_DMA_IRQHandler+0xa10>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a76      	ldr	r2, [pc, #472]	@ (8006b50 <HAL_DMA_IRQHandler+0xa14>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	@ (8006b54 <HAL_DMA_IRQHandler+0xa18>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a73      	ldr	r2, [pc, #460]	@ (8006b58 <HAL_DMA_IRQHandler+0xa1c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a71      	ldr	r2, [pc, #452]	@ (8006b5c <HAL_DMA_IRQHandler+0xa20>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a70      	ldr	r2, [pc, #448]	@ (8006b60 <HAL_DMA_IRQHandler+0xa24>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6e      	ldr	r2, [pc, #440]	@ (8006b64 <HAL_DMA_IRQHandler+0xa28>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a6d      	ldr	r2, [pc, #436]	@ (8006b68 <HAL_DMA_IRQHandler+0xa2c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a6b      	ldr	r2, [pc, #428]	@ (8006b6c <HAL_DMA_IRQHandler+0xa30>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6a      	ldr	r2, [pc, #424]	@ (8006b70 <HAL_DMA_IRQHandler+0xa34>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a68      	ldr	r2, [pc, #416]	@ (8006b74 <HAL_DMA_IRQHandler+0xa38>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a67      	ldr	r2, [pc, #412]	@ (8006b78 <HAL_DMA_IRQHandler+0xa3c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a65      	ldr	r2, [pc, #404]	@ (8006b7c <HAL_DMA_IRQHandler+0xa40>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x8b8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a64      	ldr	r2, [pc, #400]	@ (8006b80 <HAL_DMA_IRQHandler+0xa44>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <HAL_DMA_IRQHandler+0x8ca>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0201 	bic.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e007      	b.n	8006a16 <HAL_DMA_IRQHandler+0x8da>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d307      	bcc.n	8006a32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f2      	bne.n	8006a16 <HAL_DMA_IRQHandler+0x8da>
 8006a30:	e000      	b.n	8006a34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2203      	movs	r2, #3
 8006a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006a4a:	e003      	b.n	8006a54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8272 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	e26c      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a43      	ldr	r2, [pc, #268]	@ (8006b84 <HAL_DMA_IRQHandler+0xa48>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a42      	ldr	r2, [pc, #264]	@ (8006b88 <HAL_DMA_IRQHandler+0xa4c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d01d      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a40      	ldr	r2, [pc, #256]	@ (8006b8c <HAL_DMA_IRQHandler+0xa50>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a3f      	ldr	r2, [pc, #252]	@ (8006b90 <HAL_DMA_IRQHandler+0xa54>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b94 <HAL_DMA_IRQHandler+0xa58>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8006b98 <HAL_DMA_IRQHandler+0xa5c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8006b9c <HAL_DMA_IRQHandler+0xa60>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x984>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a39      	ldr	r2, [pc, #228]	@ (8006ba0 <HAL_DMA_IRQHandler+0xa64>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d101      	bne.n	8006ac4 <HAL_DMA_IRQHandler+0x988>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_DMA_IRQHandler+0x98a>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 823f 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2204      	movs	r2, #4
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80cd 	beq.w	8006c84 <HAL_DMA_IRQHandler+0xb48>
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80c7 	beq.w	8006c84 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	2204      	movs	r2, #4
 8006b00:	409a      	lsls	r2, r3
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d049      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8210 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b2c:	e20a      	b.n	8006f44 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8206 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b40:	e200      	b.n	8006f44 <HAL_DMA_IRQHandler+0xe08>
 8006b42:	bf00      	nop
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8
 8006b84:	58025408 	.word	0x58025408
 8006b88:	5802541c 	.word	0x5802541c
 8006b8c:	58025430 	.word	0x58025430
 8006b90:	58025444 	.word	0x58025444
 8006b94:	58025458 	.word	0x58025458
 8006b98:	5802546c 	.word	0x5802546c
 8006b9c:	58025480 	.word	0x58025480
 8006ba0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d160      	bne.n	8006c70 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a7f      	ldr	r2, [pc, #508]	@ (8006db0 <HAL_DMA_IRQHandler+0xc74>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d04a      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a7d      	ldr	r2, [pc, #500]	@ (8006db4 <HAL_DMA_IRQHandler+0xc78>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d045      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a7c      	ldr	r2, [pc, #496]	@ (8006db8 <HAL_DMA_IRQHandler+0xc7c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d040      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a7a      	ldr	r2, [pc, #488]	@ (8006dbc <HAL_DMA_IRQHandler+0xc80>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d03b      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a79      	ldr	r2, [pc, #484]	@ (8006dc0 <HAL_DMA_IRQHandler+0xc84>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d036      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a77      	ldr	r2, [pc, #476]	@ (8006dc4 <HAL_DMA_IRQHandler+0xc88>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d031      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a76      	ldr	r2, [pc, #472]	@ (8006dc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d02c      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a74      	ldr	r2, [pc, #464]	@ (8006dcc <HAL_DMA_IRQHandler+0xc90>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d027      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a73      	ldr	r2, [pc, #460]	@ (8006dd0 <HAL_DMA_IRQHandler+0xc94>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a71      	ldr	r2, [pc, #452]	@ (8006dd4 <HAL_DMA_IRQHandler+0xc98>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01d      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a70      	ldr	r2, [pc, #448]	@ (8006dd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d018      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a6e      	ldr	r2, [pc, #440]	@ (8006ddc <HAL_DMA_IRQHandler+0xca0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a6d      	ldr	r2, [pc, #436]	@ (8006de0 <HAL_DMA_IRQHandler+0xca4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6b      	ldr	r2, [pc, #428]	@ (8006de4 <HAL_DMA_IRQHandler+0xca8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d009      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8006de8 <HAL_DMA_IRQHandler+0xcac>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_DMA_IRQHandler+0xb12>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a68      	ldr	r2, [pc, #416]	@ (8006dec <HAL_DMA_IRQHandler+0xcb0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d108      	bne.n	8006c60 <HAL_DMA_IRQHandler+0xb24>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0208 	bic.w	r2, r2, #8
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e007      	b.n	8006c70 <HAL_DMA_IRQHandler+0xb34>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0204 	bic.w	r2, r2, #4
 8006c6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8165 	beq.w	8006f44 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c82:	e15f      	b.n	8006f44 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80c5 	beq.w	8006e24 <HAL_DMA_IRQHandler+0xce8>
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80bf 	beq.w	8006e24 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2202      	movs	r2, #2
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 813a 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cdc:	e134      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8130 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf0:	e12a      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f040 8089 	bne.w	8006e10 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2b      	ldr	r2, [pc, #172]	@ (8006db0 <HAL_DMA_IRQHandler+0xc74>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	@ (8006db4 <HAL_DMA_IRQHandler+0xc78>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a28      	ldr	r2, [pc, #160]	@ (8006db8 <HAL_DMA_IRQHandler+0xc7c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a26      	ldr	r2, [pc, #152]	@ (8006dbc <HAL_DMA_IRQHandler+0xc80>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a25      	ldr	r2, [pc, #148]	@ (8006dc0 <HAL_DMA_IRQHandler+0xc84>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a23      	ldr	r2, [pc, #140]	@ (8006dc4 <HAL_DMA_IRQHandler+0xc88>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a22      	ldr	r2, [pc, #136]	@ (8006dc8 <HAL_DMA_IRQHandler+0xc8c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a20      	ldr	r2, [pc, #128]	@ (8006dcc <HAL_DMA_IRQHandler+0xc90>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd0 <HAL_DMA_IRQHandler+0xc94>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <HAL_DMA_IRQHandler+0xc98>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <HAL_DMA_IRQHandler+0xc9c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1a      	ldr	r2, [pc, #104]	@ (8006ddc <HAL_DMA_IRQHandler+0xca0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a19      	ldr	r2, [pc, #100]	@ (8006de0 <HAL_DMA_IRQHandler+0xca4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a17      	ldr	r2, [pc, #92]	@ (8006de4 <HAL_DMA_IRQHandler+0xca8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a16      	ldr	r2, [pc, #88]	@ (8006de8 <HAL_DMA_IRQHandler+0xcac>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_IRQHandler+0xc62>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a14      	ldr	r2, [pc, #80]	@ (8006dec <HAL_DMA_IRQHandler+0xcb0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d128      	bne.n	8006df0 <HAL_DMA_IRQHandler+0xcb4>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0214 	bic.w	r2, r2, #20
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	e027      	b.n	8006e00 <HAL_DMA_IRQHandler+0xcc4>
 8006db0:	40020010 	.word	0x40020010
 8006db4:	40020028 	.word	0x40020028
 8006db8:	40020040 	.word	0x40020040
 8006dbc:	40020058 	.word	0x40020058
 8006dc0:	40020070 	.word	0x40020070
 8006dc4:	40020088 	.word	0x40020088
 8006dc8:	400200a0 	.word	0x400200a0
 8006dcc:	400200b8 	.word	0x400200b8
 8006dd0:	40020410 	.word	0x40020410
 8006dd4:	40020428 	.word	0x40020428
 8006dd8:	40020440 	.word	0x40020440
 8006ddc:	40020458 	.word	0x40020458
 8006de0:	40020470 	.word	0x40020470
 8006de4:	40020488 	.word	0x40020488
 8006de8:	400204a0 	.word	0x400204a0
 8006dec:	400204b8 	.word	0x400204b8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 020a 	bic.w	r2, r2, #10
 8006dfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8097 	beq.w	8006f48 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e22:	e091      	b.n	8006f48 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8088 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8082 	beq.w	8006f4a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a41      	ldr	r2, [pc, #260]	@ (8006f50 <HAL_DMA_IRQHandler+0xe14>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a3f      	ldr	r2, [pc, #252]	@ (8006f54 <HAL_DMA_IRQHandler+0xe18>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8006f58 <HAL_DMA_IRQHandler+0xe1c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a3c      	ldr	r2, [pc, #240]	@ (8006f5c <HAL_DMA_IRQHandler+0xe20>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a3b      	ldr	r2, [pc, #236]	@ (8006f60 <HAL_DMA_IRQHandler+0xe24>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a39      	ldr	r2, [pc, #228]	@ (8006f64 <HAL_DMA_IRQHandler+0xe28>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a38      	ldr	r2, [pc, #224]	@ (8006f68 <HAL_DMA_IRQHandler+0xe2c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a36      	ldr	r2, [pc, #216]	@ (8006f6c <HAL_DMA_IRQHandler+0xe30>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a35      	ldr	r2, [pc, #212]	@ (8006f70 <HAL_DMA_IRQHandler+0xe34>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a33      	ldr	r2, [pc, #204]	@ (8006f74 <HAL_DMA_IRQHandler+0xe38>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a32      	ldr	r2, [pc, #200]	@ (8006f78 <HAL_DMA_IRQHandler+0xe3c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a30      	ldr	r2, [pc, #192]	@ (8006f7c <HAL_DMA_IRQHandler+0xe40>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2f      	ldr	r2, [pc, #188]	@ (8006f80 <HAL_DMA_IRQHandler+0xe44>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8006f84 <HAL_DMA_IRQHandler+0xe48>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f88 <HAL_DMA_IRQHandler+0xe4c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <HAL_DMA_IRQHandler+0xdaa>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <HAL_DMA_IRQHandler+0xe50>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d108      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0xdbc>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 021c 	bic.w	r2, r2, #28
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e007      	b.n	8006f08 <HAL_DMA_IRQHandler+0xdcc>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 020e 	bic.w	r2, r2, #14
 8006f06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2201      	movs	r2, #1
 8006f12:	409a      	lsls	r2, r3
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
 8006f3e:	e004      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f40:	bf00      	nop
 8006f42:	e002      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f44:	bf00      	nop
 8006f46:	e000      	b.n	8006f4a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f4a:	3728      	adds	r7, #40	@ 0x28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40020010 	.word	0x40020010
 8006f54:	40020028 	.word	0x40020028
 8006f58:	40020040 	.word	0x40020040
 8006f5c:	40020058 	.word	0x40020058
 8006f60:	40020070 	.word	0x40020070
 8006f64:	40020088 	.word	0x40020088
 8006f68:	400200a0 	.word	0x400200a0
 8006f6c:	400200b8 	.word	0x400200b8
 8006f70:	40020410 	.word	0x40020410
 8006f74:	40020428 	.word	0x40020428
 8006f78:	40020440 	.word	0x40020440
 8006f7c:	40020458 	.word	0x40020458
 8006f80:	40020470 	.word	0x40020470
 8006f84:	40020488 	.word	0x40020488
 8006f88:	400204a0 	.word	0x400204a0
 8006f8c:	400204b8 	.word	0x400204b8

08006f90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a7f      	ldr	r2, [pc, #508]	@ (80071ac <DMA_SetConfig+0x21c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d072      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80071b0 <DMA_SetConfig+0x220>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d06d      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a7c      	ldr	r2, [pc, #496]	@ (80071b4 <DMA_SetConfig+0x224>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d068      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80071b8 <DMA_SetConfig+0x228>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d063      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a79      	ldr	r2, [pc, #484]	@ (80071bc <DMA_SetConfig+0x22c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d05e      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a77      	ldr	r2, [pc, #476]	@ (80071c0 <DMA_SetConfig+0x230>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d059      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a76      	ldr	r2, [pc, #472]	@ (80071c4 <DMA_SetConfig+0x234>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d054      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a74      	ldr	r2, [pc, #464]	@ (80071c8 <DMA_SetConfig+0x238>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04f      	beq.n	800709a <DMA_SetConfig+0x10a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a73      	ldr	r2, [pc, #460]	@ (80071cc <DMA_SetConfig+0x23c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d04a      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a71      	ldr	r2, [pc, #452]	@ (80071d0 <DMA_SetConfig+0x240>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d045      	beq.n	800709a <DMA_SetConfig+0x10a>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a70      	ldr	r2, [pc, #448]	@ (80071d4 <DMA_SetConfig+0x244>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d040      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a6e      	ldr	r2, [pc, #440]	@ (80071d8 <DMA_SetConfig+0x248>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d03b      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a6d      	ldr	r2, [pc, #436]	@ (80071dc <DMA_SetConfig+0x24c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d036      	beq.n	800709a <DMA_SetConfig+0x10a>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6b      	ldr	r2, [pc, #428]	@ (80071e0 <DMA_SetConfig+0x250>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d031      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6a      	ldr	r2, [pc, #424]	@ (80071e4 <DMA_SetConfig+0x254>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d02c      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a68      	ldr	r2, [pc, #416]	@ (80071e8 <DMA_SetConfig+0x258>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d027      	beq.n	800709a <DMA_SetConfig+0x10a>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a67      	ldr	r2, [pc, #412]	@ (80071ec <DMA_SetConfig+0x25c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a65      	ldr	r2, [pc, #404]	@ (80071f0 <DMA_SetConfig+0x260>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <DMA_SetConfig+0x10a>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a64      	ldr	r2, [pc, #400]	@ (80071f4 <DMA_SetConfig+0x264>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a62      	ldr	r2, [pc, #392]	@ (80071f8 <DMA_SetConfig+0x268>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a61      	ldr	r2, [pc, #388]	@ (80071fc <DMA_SetConfig+0x26c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <DMA_SetConfig+0x10a>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a5f      	ldr	r2, [pc, #380]	@ (8007200 <DMA_SetConfig+0x270>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a5e      	ldr	r2, [pc, #376]	@ (8007204 <DMA_SetConfig+0x274>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <DMA_SetConfig+0x10a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5c      	ldr	r2, [pc, #368]	@ (8007208 <DMA_SetConfig+0x278>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <DMA_SetConfig+0x10e>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <DMA_SetConfig+0x110>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00d      	beq.n	80070c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80070ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d004      	beq.n	80070c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80070be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a39      	ldr	r2, [pc, #228]	@ (80071ac <DMA_SetConfig+0x21c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d04a      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a38      	ldr	r2, [pc, #224]	@ (80071b0 <DMA_SetConfig+0x220>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d045      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a36      	ldr	r2, [pc, #216]	@ (80071b4 <DMA_SetConfig+0x224>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d040      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a35      	ldr	r2, [pc, #212]	@ (80071b8 <DMA_SetConfig+0x228>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d03b      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a33      	ldr	r2, [pc, #204]	@ (80071bc <DMA_SetConfig+0x22c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d036      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a32      	ldr	r2, [pc, #200]	@ (80071c0 <DMA_SetConfig+0x230>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d031      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a30      	ldr	r2, [pc, #192]	@ (80071c4 <DMA_SetConfig+0x234>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02c      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2f      	ldr	r2, [pc, #188]	@ (80071c8 <DMA_SetConfig+0x238>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d027      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2d      	ldr	r2, [pc, #180]	@ (80071cc <DMA_SetConfig+0x23c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2c      	ldr	r2, [pc, #176]	@ (80071d0 <DMA_SetConfig+0x240>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2a      	ldr	r2, [pc, #168]	@ (80071d4 <DMA_SetConfig+0x244>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a29      	ldr	r2, [pc, #164]	@ (80071d8 <DMA_SetConfig+0x248>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a27      	ldr	r2, [pc, #156]	@ (80071dc <DMA_SetConfig+0x24c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a26      	ldr	r2, [pc, #152]	@ (80071e0 <DMA_SetConfig+0x250>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a24      	ldr	r2, [pc, #144]	@ (80071e4 <DMA_SetConfig+0x254>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <DMA_SetConfig+0x1d0>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a23      	ldr	r2, [pc, #140]	@ (80071e8 <DMA_SetConfig+0x258>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <DMA_SetConfig+0x1d4>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <DMA_SetConfig+0x1d6>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d059      	beq.n	800721e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	223f      	movs	r2, #63	@ 0x3f
 8007174:	409a      	lsls	r2, r3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007188:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	d138      	bne.n	800720c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071aa:	e086      	b.n	80072ba <DMA_SetConfig+0x32a>
 80071ac:	40020010 	.word	0x40020010
 80071b0:	40020028 	.word	0x40020028
 80071b4:	40020040 	.word	0x40020040
 80071b8:	40020058 	.word	0x40020058
 80071bc:	40020070 	.word	0x40020070
 80071c0:	40020088 	.word	0x40020088
 80071c4:	400200a0 	.word	0x400200a0
 80071c8:	400200b8 	.word	0x400200b8
 80071cc:	40020410 	.word	0x40020410
 80071d0:	40020428 	.word	0x40020428
 80071d4:	40020440 	.word	0x40020440
 80071d8:	40020458 	.word	0x40020458
 80071dc:	40020470 	.word	0x40020470
 80071e0:	40020488 	.word	0x40020488
 80071e4:	400204a0 	.word	0x400204a0
 80071e8:	400204b8 	.word	0x400204b8
 80071ec:	58025408 	.word	0x58025408
 80071f0:	5802541c 	.word	0x5802541c
 80071f4:	58025430 	.word	0x58025430
 80071f8:	58025444 	.word	0x58025444
 80071fc:	58025458 	.word	0x58025458
 8007200:	5802546c 	.word	0x5802546c
 8007204:	58025480 	.word	0x58025480
 8007208:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]
}
 800721c:	e04d      	b.n	80072ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a29      	ldr	r2, [pc, #164]	@ (80072c8 <DMA_SetConfig+0x338>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a27      	ldr	r2, [pc, #156]	@ (80072cc <DMA_SetConfig+0x33c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a26      	ldr	r2, [pc, #152]	@ (80072d0 <DMA_SetConfig+0x340>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <DMA_SetConfig+0x2de>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a24      	ldr	r2, [pc, #144]	@ (80072d4 <DMA_SetConfig+0x344>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a23      	ldr	r2, [pc, #140]	@ (80072d8 <DMA_SetConfig+0x348>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a21      	ldr	r2, [pc, #132]	@ (80072dc <DMA_SetConfig+0x34c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <DMA_SetConfig+0x2de>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a20      	ldr	r2, [pc, #128]	@ (80072e0 <DMA_SetConfig+0x350>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <DMA_SetConfig+0x2de>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1e      	ldr	r2, [pc, #120]	@ (80072e4 <DMA_SetConfig+0x354>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d101      	bne.n	8007272 <DMA_SetConfig+0x2e2>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <DMA_SetConfig+0x2e4>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d020      	beq.n	80072ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b40      	cmp	r3, #64	@ 0x40
 8007296:	d108      	bne.n	80072aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	60da      	str	r2, [r3, #12]
}
 80072a8:	e007      	b.n	80072ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	60da      	str	r2, [r3, #12]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	58025408 	.word	0x58025408
 80072cc:	5802541c 	.word	0x5802541c
 80072d0:	58025430 	.word	0x58025430
 80072d4:	58025444 	.word	0x58025444
 80072d8:	58025458 	.word	0x58025458
 80072dc:	5802546c 	.word	0x5802546c
 80072e0:	58025480 	.word	0x58025480
 80072e4:	58025494 	.word	0x58025494

080072e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a42      	ldr	r2, [pc, #264]	@ (8007400 <DMA_CalcBaseAndBitshift+0x118>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d04a      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a41      	ldr	r2, [pc, #260]	@ (8007404 <DMA_CalcBaseAndBitshift+0x11c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d045      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a3f      	ldr	r2, [pc, #252]	@ (8007408 <DMA_CalcBaseAndBitshift+0x120>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d040      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a3e      	ldr	r2, [pc, #248]	@ (800740c <DMA_CalcBaseAndBitshift+0x124>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d03b      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3c      	ldr	r2, [pc, #240]	@ (8007410 <DMA_CalcBaseAndBitshift+0x128>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d036      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3b      	ldr	r2, [pc, #236]	@ (8007414 <DMA_CalcBaseAndBitshift+0x12c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d031      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a39      	ldr	r2, [pc, #228]	@ (8007418 <DMA_CalcBaseAndBitshift+0x130>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d02c      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a38      	ldr	r2, [pc, #224]	@ (800741c <DMA_CalcBaseAndBitshift+0x134>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d027      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a36      	ldr	r2, [pc, #216]	@ (8007420 <DMA_CalcBaseAndBitshift+0x138>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d022      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a35      	ldr	r2, [pc, #212]	@ (8007424 <DMA_CalcBaseAndBitshift+0x13c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d01d      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a33      	ldr	r2, [pc, #204]	@ (8007428 <DMA_CalcBaseAndBitshift+0x140>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d018      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a32      	ldr	r2, [pc, #200]	@ (800742c <DMA_CalcBaseAndBitshift+0x144>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a30      	ldr	r2, [pc, #192]	@ (8007430 <DMA_CalcBaseAndBitshift+0x148>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00e      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a2f      	ldr	r2, [pc, #188]	@ (8007434 <DMA_CalcBaseAndBitshift+0x14c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d009      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2d      	ldr	r2, [pc, #180]	@ (8007438 <DMA_CalcBaseAndBitshift+0x150>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d004      	beq.n	8007390 <DMA_CalcBaseAndBitshift+0xa8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2c      	ldr	r2, [pc, #176]	@ (800743c <DMA_CalcBaseAndBitshift+0x154>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d101      	bne.n	8007394 <DMA_CalcBaseAndBitshift+0xac>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <DMA_CalcBaseAndBitshift+0xae>
 8007394:	2300      	movs	r3, #0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d024      	beq.n	80073e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	3b10      	subs	r3, #16
 80073a2:	4a27      	ldr	r2, [pc, #156]	@ (8007440 <DMA_CalcBaseAndBitshift+0x158>)
 80073a4:	fba2 2303 	umull	r2, r3, r2, r3
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	4a24      	ldr	r2, [pc, #144]	@ (8007444 <DMA_CalcBaseAndBitshift+0x15c>)
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d908      	bls.n	80073d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007448 <DMA_CalcBaseAndBitshift+0x160>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	1d1a      	adds	r2, r3, #4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80073d2:	e00d      	b.n	80073f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	4b1b      	ldr	r3, [pc, #108]	@ (8007448 <DMA_CalcBaseAndBitshift+0x160>)
 80073dc:	4013      	ands	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e2:	e005      	b.n	80073f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	40020010 	.word	0x40020010
 8007404:	40020028 	.word	0x40020028
 8007408:	40020040 	.word	0x40020040
 800740c:	40020058 	.word	0x40020058
 8007410:	40020070 	.word	0x40020070
 8007414:	40020088 	.word	0x40020088
 8007418:	400200a0 	.word	0x400200a0
 800741c:	400200b8 	.word	0x400200b8
 8007420:	40020410 	.word	0x40020410
 8007424:	40020428 	.word	0x40020428
 8007428:	40020440 	.word	0x40020440
 800742c:	40020458 	.word	0x40020458
 8007430:	40020470 	.word	0x40020470
 8007434:	40020488 	.word	0x40020488
 8007438:	400204a0 	.word	0x400204a0
 800743c:	400204b8 	.word	0x400204b8
 8007440:	aaaaaaab 	.word	0xaaaaaaab
 8007444:	0801245c 	.word	0x0801245c
 8007448:	fffffc00 	.word	0xfffffc00

0800744c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d120      	bne.n	80074a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007464:	2b03      	cmp	r3, #3
 8007466:	d858      	bhi.n	800751a <DMA_CheckFifoParam+0xce>
 8007468:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <DMA_CheckFifoParam+0x24>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007481 	.word	0x08007481
 8007474:	08007493 	.word	0x08007493
 8007478:	08007481 	.word	0x08007481
 800747c:	0800751b 	.word	0x0800751b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d048      	beq.n	800751e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007490:	e045      	b.n	800751e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800749a:	d142      	bne.n	8007522 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074a0:	e03f      	b.n	8007522 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074aa:	d123      	bne.n	80074f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d838      	bhi.n	8007526 <DMA_CheckFifoParam+0xda>
 80074b4:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <DMA_CheckFifoParam+0x70>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d3 	.word	0x080074d3
 80074c4:	080074cd 	.word	0x080074cd
 80074c8:	080074e5 	.word	0x080074e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
        break;
 80074d0:	e030      	b.n	8007534 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d025      	beq.n	800752a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074e2:	e022      	b.n	800752a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80074ec:	d11f      	bne.n	800752e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074f2:	e01c      	b.n	800752e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d902      	bls.n	8007502 <DMA_CheckFifoParam+0xb6>
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d003      	beq.n	8007508 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007500:	e018      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
        break;
 8007506:	e015      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
    break;
 8007518:	e00b      	b.n	8007532 <DMA_CheckFifoParam+0xe6>
        break;
 800751a:	bf00      	nop
 800751c:	e00a      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 800751e:	bf00      	nop
 8007520:	e008      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 8007522:	bf00      	nop
 8007524:	e006      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 8007526:	bf00      	nop
 8007528:	e004      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 800752a:	bf00      	nop
 800752c:	e002      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
        break;
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <DMA_CheckFifoParam+0xe8>
    break;
 8007532:	bf00      	nop
    }
  }

  return status;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop

08007544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a38      	ldr	r2, [pc, #224]	@ (8007638 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d022      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a36      	ldr	r2, [pc, #216]	@ (800763c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01d      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a35      	ldr	r2, [pc, #212]	@ (8007640 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d018      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a33      	ldr	r2, [pc, #204]	@ (8007644 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a32      	ldr	r2, [pc, #200]	@ (8007648 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00e      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a30      	ldr	r2, [pc, #192]	@ (800764c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a2f      	ldr	r2, [pc, #188]	@ (8007650 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e000      	b.n	80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075a6:	2300      	movs	r3, #0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01a      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	3b08      	subs	r3, #8
 80075b4:	4a28      	ldr	r2, [pc, #160]	@ (8007658 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	091b      	lsrs	r3, r3, #4
 80075bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4b26      	ldr	r3, [pc, #152]	@ (800765c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a24      	ldr	r2, [pc, #144]	@ (8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80075d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2201      	movs	r2, #1
 80075da:	409a      	lsls	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80075e0:	e024      	b.n	800762c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	3b10      	subs	r3, #16
 80075ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007668 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d806      	bhi.n	800760a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4a1b      	ldr	r2, [pc, #108]	@ (800766c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d902      	bls.n	800760a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3308      	adds	r3, #8
 8007608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4b18      	ldr	r3, [pc, #96]	@ (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a16      	ldr	r2, [pc, #88]	@ (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800761c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2201      	movs	r2, #1
 8007626:	409a      	lsls	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800762c:	bf00      	nop
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	58025408 	.word	0x58025408
 800763c:	5802541c 	.word	0x5802541c
 8007640:	58025430 	.word	0x58025430
 8007644:	58025444 	.word	0x58025444
 8007648:	58025458 	.word	0x58025458
 800764c:	5802546c 	.word	0x5802546c
 8007650:	58025480 	.word	0x58025480
 8007654:	58025494 	.word	0x58025494
 8007658:	cccccccd 	.word	0xcccccccd
 800765c:	16009600 	.word	0x16009600
 8007660:	58025880 	.word	0x58025880
 8007664:	aaaaaaab 	.word	0xaaaaaaab
 8007668:	400204b8 	.word	0x400204b8
 800766c:	4002040f 	.word	0x4002040f
 8007670:	10008200 	.word	0x10008200
 8007674:	40020880 	.word	0x40020880

08007678 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d04a      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b08      	cmp	r3, #8
 8007692:	d847      	bhi.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a25      	ldr	r2, [pc, #148]	@ (8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a24      	ldr	r2, [pc, #144]	@ (8007734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d01d      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a22      	ldr	r2, [pc, #136]	@ (8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a21      	ldr	r2, [pc, #132]	@ (800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	@ (800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d101      	bne.n	80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80076e8:	2300      	movs	r3, #0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a15      	ldr	r2, [pc, #84]	@ (8007754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007700:	671a      	str	r2, [r3, #112]	@ 0x70
 8007702:	e009      	b.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4b14      	ldr	r3, [pc, #80]	@ (8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a11      	ldr	r2, [pc, #68]	@ (800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007716:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3b01      	subs	r3, #1
 800771c:	2201      	movs	r2, #1
 800771e:	409a      	lsls	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	58025408 	.word	0x58025408
 8007734:	5802541c 	.word	0x5802541c
 8007738:	58025430 	.word	0x58025430
 800773c:	58025444 	.word	0x58025444
 8007740:	58025458 	.word	0x58025458
 8007744:	5802546c 	.word	0x5802546c
 8007748:	58025480 	.word	0x58025480
 800774c:	58025494 	.word	0x58025494
 8007750:	1600963f 	.word	0x1600963f
 8007754:	58025940 	.word	0x58025940
 8007758:	1000823f 	.word	0x1000823f
 800775c:	40020940 	.word	0x40020940

08007760 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b098      	sub	sp, #96	@ 0x60
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007768:	4a84      	ldr	r2, [pc, #528]	@ (800797c <HAL_FDCAN_Init+0x21c>)
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4611      	mov	r1, r2
 8007770:	224c      	movs	r2, #76	@ 0x4c
 8007772:	4618      	mov	r0, r3
 8007774:	f00a f892 	bl	801189c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e1c6      	b.n	8007b10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7e      	ldr	r2, [pc, #504]	@ (8007980 <HAL_FDCAN_Init+0x220>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d106      	bne.n	800779a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007794:	461a      	mov	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fa fcd6 	bl	8002160 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0210 	bic.w	r2, r2, #16
 80077c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077c4:	f7fb f9ae 	bl	8002b24 <HAL_GetTick>
 80077c8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80077ca:	e014      	b.n	80077f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80077cc:	f7fb f9aa 	bl	8002b24 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b0a      	cmp	r3, #10
 80077d8:	d90d      	bls.n	80077f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077e0:	f043 0201 	orr.w	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2203      	movs	r2, #3
 80077ee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e18c      	b.n	8007b10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b08      	cmp	r3, #8
 8007802:	d0e3      	beq.n	80077cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007814:	f7fb f986 	bl	8002b24 <HAL_GetTick>
 8007818:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800781a:	e014      	b.n	8007846 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800781c:	f7fb f982 	bl	8002b24 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b0a      	cmp	r3, #10
 8007828:	d90d      	bls.n	8007846 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007830:	f043 0201 	orr.w	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2203      	movs	r2, #3
 800783e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e164      	b.n	8007b10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0e3      	beq.n	800781c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0202 	orr.w	r2, r2, #2
 8007862:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	7c1b      	ldrb	r3, [r3, #16]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d108      	bne.n	800787e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800787a:	619a      	str	r2, [r3, #24]
 800787c:	e007      	b.n	800788e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699a      	ldr	r2, [r3, #24]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800788c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7c5b      	ldrb	r3, [r3, #17]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d108      	bne.n	80078a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699a      	ldr	r2, [r3, #24]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078a4:	619a      	str	r2, [r3, #24]
 80078a6:	e007      	b.n	80078b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7c9b      	ldrb	r3, [r3, #18]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d108      	bne.n	80078d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078ce:	619a      	str	r2, [r3, #24]
 80078d0:	e007      	b.n	80078e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007906:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0210 	bic.w	r2, r2, #16
 8007916:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d108      	bne.n	8007932 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0204 	orr.w	r2, r2, #4
 800792e:	619a      	str	r2, [r3, #24]
 8007930:	e030      	b.n	8007994 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d02c      	beq.n	8007994 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d020      	beq.n	8007984 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007950:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0210 	orr.w	r2, r2, #16
 8007960:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d114      	bne.n	8007994 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0220 	orr.w	r2, r2, #32
 8007978:	619a      	str	r2, [r3, #24]
 800797a:	e00b      	b.n	8007994 <HAL_FDCAN_Init+0x234>
 800797c:	08012400 	.word	0x08012400
 8007980:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0220 	orr.w	r2, r2, #32
 8007992:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	3b01      	subs	r3, #1
 800799a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079c8:	d115      	bne.n	80079f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	3b01      	subs	r3, #1
 80079d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079de:	3b01      	subs	r3, #1
 80079e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80079e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ea:	3b01      	subs	r3, #1
 80079ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80079f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a1c:	4413      	add	r3, r2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007a2a:	f023 0107 	bic.w	r1, r3, #7
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	3360      	adds	r3, #96	@ 0x60
 8007a36:	443b      	add	r3, r7
 8007a38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d011      	beq.n	8007a72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a56:	f023 0107 	bic.w	r1, r3, #7
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	3360      	adds	r3, #96	@ 0x60
 8007a62:	443b      	add	r3, r7
 8007a64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d012      	beq.n	8007aa0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a82:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3360      	adds	r3, #96	@ 0x60
 8007a8e:	443b      	add	r3, r7
 8007a90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a94:	011a      	lsls	r2, r3, #4
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d012      	beq.n	8007ace <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ab0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	3360      	adds	r3, #96	@ 0x60
 8007abc:	443b      	add	r3, r7
 8007abe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007ac2:	021a      	lsls	r2, r3, #8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a11      	ldr	r2, [pc, #68]	@ (8007b18 <HAL_FDCAN_Init+0x3b8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d107      	bne.n	8007ae8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f022 0203 	bic.w	r2, r2, #3
 8007ae6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fdeb 	bl	80086dc <FDCAN_CalcultateRamBlockAddresses>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007b0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3760      	adds	r7, #96	@ 0x60
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	4000a000 	.word	0x4000a000

08007b1c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007b2c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d002      	beq.n	8007b3a <HAL_FDCAN_ConfigFilter+0x1e>
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d157      	bne.n	8007bea <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d12b      	bne.n	8007b9a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2b07      	cmp	r3, #7
 8007b48:	d10d      	bne.n	8007b66 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007b56:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007b5c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007b5e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e00e      	b.n	8007b84 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b72:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007b7a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b80:	4313      	orrs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e025      	b.n	8007be6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	075a      	lsls	r2, r3, #29
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d103      	bne.n	8007bb8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e006      	b.n	8007bc6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	079a      	lsls	r2, r3, #30
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e008      	b.n	8007bfc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bf0:	f043 0202 	orr.w	r2, r3, #2
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d111      	bne.n	8007c40 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e008      	b.n	8007c52 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c46:	f043 0204 	orr.w	r2, r3, #4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b086      	sub	sp, #24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d141      	bne.n	8007cfa <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007c7e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d109      	bne.n	8007c9a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c8c:	f043 0220 	orr.w	r2, r3, #32
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e038      	b.n	8007d0c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e026      	b.n	8007d0c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007cc6:	0c1b      	lsrs	r3, r3, #16
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fe87 	bl	80089e8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ce6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007cea:	2201      	movs	r2, #1
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e008      	b.n	8007d0c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d00:	f043 0208 	orr.w	r2, r3, #8
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b08b      	sub	sp, #44	@ 0x2c
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d2c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007d2e:	7efb      	ldrb	r3, [r7, #27]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	f040 8149 	bne.w	8007fc8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b40      	cmp	r3, #64	@ 0x40
 8007d3a:	d14c      	bne.n	8007dd6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d44:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d52:	f043 0220 	orr.w	r2, r3, #32
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e13c      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e12a      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d94:	d10a      	bne.n	8007dac <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da6:	d101      	bne.n	8007dac <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007da8:	2301      	movs	r3, #1
 8007daa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dd4:	e068      	b.n	8007ea8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b41      	cmp	r3, #65	@ 0x41
 8007dda:	d14c      	bne.n	8007e76 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007de4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d109      	bne.n	8007e00 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df2:	f043 0220 	orr.w	r2, r3, #32
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e0ec      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0da      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e34:	d10a      	bne.n	8007e4c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e46:	d101      	bne.n	8007e4c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e54:	0a1b      	lsrs	r3, r3, #8
 8007e56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e68:	69f9      	ldr	r1, [r7, #28]
 8007e6a:	fb01 f303 	mul.w	r3, r1, r3
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e74:	e018      	b.n	8007ea8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d309      	bcc.n	8007e94 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e86:	f043 0220 	orr.w	r2, r3, #32
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0a2      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d107      	bne.n	8007ecc <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	0c9b      	lsrs	r3, r3, #18
 8007ec2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e005      	b.n	8007ed8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	0e1b      	lsrs	r3, r3, #24
 8007f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	0fda      	lsrs	r2, r3, #31
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f40:	3304      	adds	r3, #4
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	623b      	str	r3, [r7, #32]
 8007f4c:	e00a      	b.n	8007f64 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	441a      	add	r2, r3
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	440b      	add	r3, r1
 8007f5a:	7812      	ldrb	r2, [r2, #0]
 8007f5c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	3301      	adds	r3, #1
 8007f62:	623b      	str	r3, [r7, #32]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	4a1f      	ldr	r2, [pc, #124]	@ (8007fe8 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007f6a:	5cd3      	ldrb	r3, [r2, r3]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d3ec      	bcc.n	8007f4e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d105      	bne.n	8007f86 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007f84:	e01e      	b.n	8007fc4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b41      	cmp	r3, #65	@ 0x41
 8007f8a:	d105      	bne.n	8007f98 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007f96:	e015      	b.n	8007fc4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b1f      	cmp	r3, #31
 8007f9c:	d808      	bhi.n	8007fb0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8007faa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007fae:	e009      	b.n	8007fc4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 021f 	and.w	r2, r3, #31
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2101      	movs	r1, #1
 8007fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e008      	b.n	8007fda <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fce:	f043 0208 	orr.w	r2, r3, #8
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
  }
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	372c      	adds	r7, #44	@ 0x2c
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	08012464 	.word	0x08012464

08007fec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007ffe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <HAL_FDCAN_ActivateNotification+0x20>
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d155      	bne.n	80080b8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d108      	bne.n	800802c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0201 	orr.w	r2, r2, #1
 8008028:	65da      	str	r2, [r3, #92]	@ 0x5c
 800802a:	e014      	b.n	8008056 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4013      	ands	r3, r2
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	429a      	cmp	r2, r3
 800803a:	d108      	bne.n	800804e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0202 	orr.w	r2, r2, #2
 800804a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800804c:	e003      	b.n	8008056 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2203      	movs	r2, #3
 8008054:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800805c:	2b00      	cmp	r3, #0
 800805e:	d009      	beq.n	8008074 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	430a      	orrs	r2, r1
 8008070:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	430a      	orrs	r2, r1
 800808e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	4b0f      	ldr	r3, [pc, #60]	@ (80080d8 <HAL_FDCAN_ActivateNotification+0xec>)
 800809c:	4013      	ands	r3, r2
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	6812      	ldr	r2, [r2, #0]
 80080a2:	430b      	orrs	r3, r1
 80080a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80080a6:	4b0d      	ldr	r3, [pc, #52]	@ (80080dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	0f9b      	lsrs	r3, r3, #30
 80080ae:	490b      	ldr	r1, [pc, #44]	@ (80080dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e008      	b.n	80080ca <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080be:	f043 0202 	orr.w	r2, r3, #2
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	3fcfffff 	.word	0x3fcfffff
 80080dc:	4000a800 	.word	0x4000a800

080080e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b096      	sub	sp, #88	@ 0x58
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80080e8:	4b9a      	ldr	r3, [pc, #616]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	079b      	lsls	r3, r3, #30
 80080ee:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80080f0:	4b98      	ldr	r3, [pc, #608]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	079b      	lsls	r3, r3, #30
 80080f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080f8:	4013      	ands	r3, r2
 80080fa:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008102:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008106:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008110:	4013      	ands	r3, r2
 8008112:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008128:	4013      	ands	r3, r2
 800812a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008136:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008140:	4013      	ands	r3, r2
 8008142:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800814a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800814e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008158:	4013      	ands	r3, r2
 800815a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008162:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8008166:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008170:	4013      	ands	r3, r2
 8008172:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008182:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d010      	beq.n	80081b2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80081a6:	4b6b      	ldr	r3, [pc, #428]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa54 	bl	800865a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80081b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b4:	0a9b      	lsrs	r3, r3, #10
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01d      	beq.n	80081fa <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	0a9b      	lsrs	r3, r3, #10
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d017      	beq.n	80081fa <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80081d2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081de:	4013      	ands	r3, r2
 80081e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80081ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80081ec:	4b59      	ldr	r3, [pc, #356]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80081f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa07 	bl	8008608 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80081fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008206:	4b54      	ldr	r3, [pc, #336]	@ (8008358 <HAL_FDCAN_IRQHandler+0x278>)
 8008208:	400b      	ands	r3, r1
 800820a:	6513      	str	r3, [r2, #80]	@ 0x50
 800820c:	4a51      	ldr	r2, [pc, #324]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 800820e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008210:	0f9b      	lsrs	r3, r3, #30
 8008212:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8008214:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9c0 	bl	800859c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800821c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00d      	beq.n	800823e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008228:	4b4b      	ldr	r3, [pc, #300]	@ (8008358 <HAL_FDCAN_IRQHandler+0x278>)
 800822a:	400b      	ands	r3, r1
 800822c:	6513      	str	r3, [r2, #80]	@ 0x50
 800822e:	4a49      	ldr	r2, [pc, #292]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 8008230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008232:	0f9b      	lsrs	r3, r3, #30
 8008234:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008236:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f9ba 	bl	80085b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800823e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00d      	beq.n	8008260 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800824a:	4b43      	ldr	r3, [pc, #268]	@ (8008358 <HAL_FDCAN_IRQHandler+0x278>)
 800824c:	400b      	ands	r3, r1
 800824e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008250:	4a40      	ldr	r2, [pc, #256]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 8008252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008254:	0f9b      	lsrs	r3, r3, #30
 8008256:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008258:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7f9 fa22 	bl	80016a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800826c:	4b3a      	ldr	r3, [pc, #232]	@ (8008358 <HAL_FDCAN_IRQHandler+0x278>)
 800826e:	400b      	ands	r3, r1
 8008270:	6513      	str	r3, [r2, #80]	@ 0x50
 8008272:	4a38      	ldr	r2, [pc, #224]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 8008274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008276:	0f9b      	lsrs	r3, r3, #30
 8008278:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800827a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f9a3 	bl	80085c8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008284:	0adb      	lsrs	r3, r3, #11
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d010      	beq.n	80082b0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	0adb      	lsrs	r3, r3, #11
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80082a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f997 	bl	80085de <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80082b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b2:	0a5b      	lsrs	r3, r3, #9
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01d      	beq.n	80082f8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80082bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082be:	0a5b      	lsrs	r3, r3, #9
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d017      	beq.n	80082f8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082d0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082dc:	4013      	ands	r3, r2
 80082de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80082ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80082f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f97d 	bl	80085f2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80082f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082fa:	0cdb      	lsrs	r3, r3, #19
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	0cdb      	lsrs	r3, r3, #19
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008318:	651a      	str	r2, [r3, #80]	@ 0x50
 800831a:	4b0e      	ldr	r3, [pc, #56]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 800831c:	2200      	movs	r2, #0
 800831e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f97c 	bl	800861e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008328:	0c1b      	lsrs	r3, r3, #16
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d016      	beq.n	8008360 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	0c1b      	lsrs	r3, r3, #16
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d010      	beq.n	8008360 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008346:	651a      	str	r2, [r3, #80]	@ 0x50
 8008348:	4b02      	ldr	r3, [pc, #8]	@ (8008354 <HAL_FDCAN_IRQHandler+0x274>)
 800834a:	2200      	movs	r2, #0
 800834c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	e004      	b.n	800835c <HAL_FDCAN_IRQHandler+0x27c>
 8008352:	bf00      	nop
 8008354:	4000a800 	.word	0x4000a800
 8008358:	3fcfffff 	.word	0x3fcfffff
 800835c:	f000 f969 	bl	8008632 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	0c9b      	lsrs	r3, r3, #18
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800836c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836e:	0c9b      	lsrs	r3, r3, #18
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008380:	651a      	str	r2, [r3, #80]	@ 0x50
 8008382:	4b83      	ldr	r3, [pc, #524]	@ (8008590 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008384:	2200      	movs	r2, #0
 8008386:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f95c 	bl	8008646 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800838e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008390:	0c5b      	lsrs	r3, r3, #17
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d015      	beq.n	80083c6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	0c5b      	lsrs	r3, r3, #17
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00f      	beq.n	80083c6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80083ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80083b0:	4b77      	ldr	r3, [pc, #476]	@ (8008590 <HAL_FDCAN_IRQHandler+0x4b0>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80083bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80083c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083d2:	4b70      	ldr	r3, [pc, #448]	@ (8008594 <HAL_FDCAN_IRQHandler+0x4b4>)
 80083d4:	400b      	ands	r3, r1
 80083d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80083d8:	4a6d      	ldr	r2, [pc, #436]	@ (8008590 <HAL_FDCAN_IRQHandler+0x4b0>)
 80083da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083dc:	0f9b      	lsrs	r3, r3, #30
 80083de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80083e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f9 fa62 	bl	80018ac <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80083e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d011      	beq.n	8008412 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083f4:	4b67      	ldr	r3, [pc, #412]	@ (8008594 <HAL_FDCAN_IRQHandler+0x4b4>)
 80083f6:	400b      	ands	r3, r1
 80083f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80083fa:	4a65      	ldr	r2, [pc, #404]	@ (8008590 <HAL_FDCAN_IRQHandler+0x4b0>)
 80083fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083fe:	0f9b      	lsrs	r3, r3, #30
 8008400:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a60      	ldr	r2, [pc, #384]	@ (8008598 <HAL_FDCAN_IRQHandler+0x4b8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	f040 80ac 	bne.w	8008576 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f003 0303 	and.w	r3, r3, #3
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 80a4 	beq.w	8008576 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008442:	4013      	ands	r3, r2
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008450:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800845a:	4013      	ands	r3, r2
 800845c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008472:	4013      	ands	r3, r2
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8008480:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	6a3a      	ldr	r2, [r7, #32]
 800848a:	4013      	ands	r3, r2
 800848c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8008498:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	4013      	ands	r3, r2
 80084a4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084c2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80084c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8db 	bl	8008682 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d007      	beq.n	80084e2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80084da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f8db 	bl	8008698 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	099b      	lsrs	r3, r3, #6
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01a      	beq.n	8008524 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	099b      	lsrs	r3, r3, #6
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d014      	beq.n	8008524 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008500:	0c1b      	lsrs	r3, r3, #16
 8008502:	b29b      	uxth	r3, r3
 8008504:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800850c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008510:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2240      	movs	r2, #64	@ 0x40
 8008518:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	6939      	ldr	r1, [r7, #16]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8c5 	bl	80086ae <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008530:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f8c6 	bl	80086c6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	6a3a      	ldr	r2, [r7, #32]
 8008546:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	431a      	orrs	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f874 	bl	800866e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008586:	bf00      	nop
 8008588:	3758      	adds	r7, #88	@ 0x58
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	4000a800 	.word	0x4000a800
 8008594:	3fcfffff 	.word	0x3fcfffff
 8008598:	4000a000 	.word	0x4000a000

0800859c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086e8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80086f2:	4ba7      	ldr	r3, [pc, #668]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	0091      	lsls	r1, r2, #2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6812      	ldr	r2, [r2, #0]
 80086fe:	430b      	orrs	r3, r1
 8008700:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800870c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	041a      	lsls	r2, r3, #16
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	4413      	add	r3, r2
 8008728:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008732:	4b97      	ldr	r3, [pc, #604]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008734:	4013      	ands	r3, r2
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	0091      	lsls	r1, r2, #2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	430b      	orrs	r3, r1
 8008740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800874c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008754:	041a      	lsls	r2, r3, #16
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	4413      	add	r3, r2
 800876a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008774:	4b86      	ldr	r3, [pc, #536]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008776:	4013      	ands	r3, r2
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	0091      	lsls	r1, r2, #2
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	430b      	orrs	r3, r1
 8008782:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800878e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008796:	041a      	lsls	r2, r3, #16
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80087bc:	4b74      	ldr	r3, [pc, #464]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087be:	4013      	ands	r3, r2
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	0091      	lsls	r1, r2, #2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	430b      	orrs	r3, r1
 80087ca:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087d6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087de:	041a      	lsls	r2, r3, #16
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80087f2:	fb02 f303 	mul.w	r3, r2, r3
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	4413      	add	r3, r2
 80087fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008804:	4b62      	ldr	r3, [pc, #392]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008806:	4013      	ands	r3, r2
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	0091      	lsls	r1, r2, #2
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	430b      	orrs	r3, r1
 8008812:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800881e:	fb02 f303 	mul.w	r3, r2, r3
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4413      	add	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008830:	4b57      	ldr	r3, [pc, #348]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008832:	4013      	ands	r3, r2
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	0091      	lsls	r1, r2, #2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6812      	ldr	r2, [r2, #0]
 800883c:	430b      	orrs	r3, r1
 800883e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800884a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008852:	041a      	lsls	r2, r3, #16
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4413      	add	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008872:	4b47      	ldr	r3, [pc, #284]	@ (8008990 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008874:	4013      	ands	r3, r2
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	0091      	lsls	r1, r2, #2
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	430b      	orrs	r3, r1
 8008880:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800888c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008894:	041a      	lsls	r2, r3, #16
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80088a8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088b0:	061a      	lsls	r2, r3, #24
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c0:	4b34      	ldr	r3, [pc, #208]	@ (8008994 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80088c2:	4413      	add	r3, r2
 80088c4:	009a      	lsls	r2, r3, #2
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	441a      	add	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	441a      	add	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
 80088fa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80088fc:	441a      	add	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800892c:	441a      	add	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	441a      	add	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	441a      	add	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008972:	fb01 f303 	mul.w	r3, r1, r3
 8008976:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008978:	441a      	add	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008986:	4a04      	ldr	r2, [pc, #16]	@ (8008998 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d915      	bls.n	80089b8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800898c:	e006      	b.n	800899c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800898e:	bf00      	nop
 8008990:	ffff0003 	.word	0xffff0003
 8008994:	10002b00 	.word	0x10002b00
 8008998:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089a2:	f043 0220 	orr.w	r2, r3, #32
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2203      	movs	r2, #3
 80089b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e010      	b.n	80089da <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	e005      	b.n	80089cc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d3f3      	bcc.n	80089c0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop

080089e8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b089      	sub	sp, #36	@ 0x24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
 80089f4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008a06:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	e00a      	b.n	8008a2a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008a1c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008a22:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008a24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a28:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008a34:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008a3a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008a40:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	fb01 f303 	mul.w	r3, r1, r3
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	3304      	adds	r3, #4
 8008a78:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	e020      	b.n	8008ac2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	3303      	adds	r3, #3
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	3302      	adds	r3, #2
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	440b      	add	r3, r1
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a98:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	440b      	add	r3, r1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008aa6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	440a      	add	r2, r1
 8008aae:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008ab0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	4a06      	ldr	r2, [pc, #24]	@ (8008ae0 <FDCAN_CopyMessageToRAM+0xf8>)
 8008ac8:	5cd3      	ldrb	r3, [r2, r3]
 8008aca:	461a      	mov	r2, r3
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d3d6      	bcc.n	8008a80 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	bf00      	nop
 8008ad6:	3724      	adds	r7, #36	@ 0x24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	08012464 	.word	0x08012464

08008ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b089      	sub	sp, #36	@ 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008af2:	4b86      	ldr	r3, [pc, #536]	@ (8008d0c <HAL_GPIO_Init+0x228>)
 8008af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008af6:	e18c      	b.n	8008e12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	2101      	movs	r1, #1
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	fa01 f303 	lsl.w	r3, r1, r3
 8008b04:	4013      	ands	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 817e 	beq.w	8008e0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f003 0303 	and.w	r3, r3, #3
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d005      	beq.n	8008b28 <HAL_GPIO_Init+0x44>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d130      	bne.n	8008b8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	2203      	movs	r2, #3
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b5e:	2201      	movs	r2, #1
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	fa02 f303 	lsl.w	r3, r2, r3
 8008b66:	43db      	mvns	r3, r3
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	091b      	lsrs	r3, r3, #4
 8008b74:	f003 0201 	and.w	r2, r3, #1
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d017      	beq.n	8008bc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	2203      	movs	r2, #3
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	43db      	mvns	r3, r3
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	4013      	ands	r3, r2
 8008bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d123      	bne.n	8008c1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	08da      	lsrs	r2, r3, #3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3208      	adds	r2, #8
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	220f      	movs	r2, #15
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	08da      	lsrs	r2, r3, #3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3208      	adds	r2, #8
 8008c14:	69b9      	ldr	r1, [r7, #24]
 8008c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	2203      	movs	r2, #3
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f003 0203 	and.w	r2, r3, #3
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80d8 	beq.w	8008e0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8008d10 <HAL_GPIO_Init+0x22c>)
 8008c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c62:	4a2b      	ldr	r2, [pc, #172]	@ (8008d10 <HAL_GPIO_Init+0x22c>)
 8008c64:	f043 0302 	orr.w	r3, r3, #2
 8008c68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008c6c:	4b28      	ldr	r3, [pc, #160]	@ (8008d10 <HAL_GPIO_Init+0x22c>)
 8008c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c7a:	4a26      	ldr	r2, [pc, #152]	@ (8008d14 <HAL_GPIO_Init+0x230>)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	3302      	adds	r3, #2
 8008c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	220f      	movs	r2, #15
 8008c92:	fa02 f303 	lsl.w	r3, r2, r3
 8008c96:	43db      	mvns	r3, r3
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d18 <HAL_GPIO_Init+0x234>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d04a      	beq.n	8008d3c <HAL_GPIO_Init+0x258>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d1c <HAL_GPIO_Init+0x238>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d02b      	beq.n	8008d06 <HAL_GPIO_Init+0x222>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d20 <HAL_GPIO_Init+0x23c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d025      	beq.n	8008d02 <HAL_GPIO_Init+0x21e>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d24 <HAL_GPIO_Init+0x240>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d01f      	beq.n	8008cfe <HAL_GPIO_Init+0x21a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a19      	ldr	r2, [pc, #100]	@ (8008d28 <HAL_GPIO_Init+0x244>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d019      	beq.n	8008cfa <HAL_GPIO_Init+0x216>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <HAL_GPIO_Init+0x248>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d013      	beq.n	8008cf6 <HAL_GPIO_Init+0x212>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a17      	ldr	r2, [pc, #92]	@ (8008d30 <HAL_GPIO_Init+0x24c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00d      	beq.n	8008cf2 <HAL_GPIO_Init+0x20e>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a16      	ldr	r2, [pc, #88]	@ (8008d34 <HAL_GPIO_Init+0x250>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d007      	beq.n	8008cee <HAL_GPIO_Init+0x20a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a15      	ldr	r2, [pc, #84]	@ (8008d38 <HAL_GPIO_Init+0x254>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d101      	bne.n	8008cea <HAL_GPIO_Init+0x206>
 8008ce6:	2309      	movs	r3, #9
 8008ce8:	e029      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008cea:	230a      	movs	r3, #10
 8008cec:	e027      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008cee:	2307      	movs	r3, #7
 8008cf0:	e025      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008cf2:	2306      	movs	r3, #6
 8008cf4:	e023      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008cf6:	2305      	movs	r3, #5
 8008cf8:	e021      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008cfa:	2304      	movs	r3, #4
 8008cfc:	e01f      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e01d      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008d02:	2302      	movs	r3, #2
 8008d04:	e01b      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e019      	b.n	8008d3e <HAL_GPIO_Init+0x25a>
 8008d0a:	bf00      	nop
 8008d0c:	58000080 	.word	0x58000080
 8008d10:	58024400 	.word	0x58024400
 8008d14:	58000400 	.word	0x58000400
 8008d18:	58020000 	.word	0x58020000
 8008d1c:	58020400 	.word	0x58020400
 8008d20:	58020800 	.word	0x58020800
 8008d24:	58020c00 	.word	0x58020c00
 8008d28:	58021000 	.word	0x58021000
 8008d2c:	58021400 	.word	0x58021400
 8008d30:	58021800 	.word	0x58021800
 8008d34:	58021c00 	.word	0x58021c00
 8008d38:	58022400 	.word	0x58022400
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	f002 0203 	and.w	r2, r2, #3
 8008d44:	0092      	lsls	r2, r2, #2
 8008d46:	4093      	lsls	r3, r2
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d4e:	4938      	ldr	r1, [pc, #224]	@ (8008e30 <HAL_GPIO_Init+0x34c>)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	089b      	lsrs	r3, r3, #2
 8008d54:	3302      	adds	r3, #2
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	43db      	mvns	r3, r3
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008d82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	43db      	mvns	r3, r3
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008db0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	43db      	mvns	r3, r3
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	4013      	ands	r3, r2
 8008df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f47f ae6b 	bne.w	8008af8 <HAL_GPIO_Init+0x14>
  }
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	3724      	adds	r7, #36	@ 0x24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	58000400 	.word	0x58000400

08008e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691a      	ldr	r2, [r3, #16]
 8008e44:	887b      	ldrh	r3, [r7, #2]
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	e001      	b.n	8008e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	807b      	strh	r3, [r7, #2]
 8008e70:	4613      	mov	r3, r2
 8008e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e74:	787b      	ldrb	r3, [r7, #1]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e7a:	887a      	ldrh	r2, [r7, #2]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e80:	e003      	b.n	8008e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e82:	887b      	ldrh	r3, [r7, #2]
 8008e84:	041a      	lsls	r2, r3, #16
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	619a      	str	r2, [r3, #24]
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ea0:	4b19      	ldr	r3, [pc, #100]	@ (8008f08 <HAL_PWREx_ConfigSupply+0x70>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	d00a      	beq.n	8008ec2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008eac:	4b16      	ldr	r3, [pc, #88]	@ (8008f08 <HAL_PWREx_ConfigSupply+0x70>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d001      	beq.n	8008ebe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e01f      	b.n	8008efe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e01d      	b.n	8008efe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008ec2:	4b11      	ldr	r3, [pc, #68]	@ (8008f08 <HAL_PWREx_ConfigSupply+0x70>)
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f023 0207 	bic.w	r2, r3, #7
 8008eca:	490f      	ldr	r1, [pc, #60]	@ (8008f08 <HAL_PWREx_ConfigSupply+0x70>)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008ed2:	f7f9 fe27 	bl	8002b24 <HAL_GetTick>
 8008ed6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ed8:	e009      	b.n	8008eee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008eda:	f7f9 fe23 	bl	8002b24 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ee8:	d901      	bls.n	8008eee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e007      	b.n	8008efe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008eee:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <HAL_PWREx_ConfigSupply+0x70>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008efa:	d1ee      	bne.n	8008eda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	58024800 	.word	0x58024800

08008f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08c      	sub	sp, #48	@ 0x30
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e3c8      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 8087 	beq.w	800903a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f2c:	4b88      	ldr	r3, [pc, #544]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f36:	4b86      	ldr	r3, [pc, #536]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	2b10      	cmp	r3, #16
 8008f40:	d007      	beq.n	8008f52 <HAL_RCC_OscConfig+0x46>
 8008f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f44:	2b18      	cmp	r3, #24
 8008f46:	d110      	bne.n	8008f6a <HAL_RCC_OscConfig+0x5e>
 8008f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d10b      	bne.n	8008f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f52:	4b7f      	ldr	r3, [pc, #508]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d06c      	beq.n	8009038 <HAL_RCC_OscConfig+0x12c>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d168      	bne.n	8009038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e3a2      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f72:	d106      	bne.n	8008f82 <HAL_RCC_OscConfig+0x76>
 8008f74:	4b76      	ldr	r3, [pc, #472]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a75      	ldr	r2, [pc, #468]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	e02e      	b.n	8008fe0 <HAL_RCC_OscConfig+0xd4>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x98>
 8008f8a:	4b71      	ldr	r3, [pc, #452]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a70      	ldr	r2, [pc, #448]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	4b6e      	ldr	r3, [pc, #440]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a6d      	ldr	r2, [pc, #436]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	e01d      	b.n	8008fe0 <HAL_RCC_OscConfig+0xd4>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fac:	d10c      	bne.n	8008fc8 <HAL_RCC_OscConfig+0xbc>
 8008fae:	4b68      	ldr	r3, [pc, #416]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a67      	ldr	r2, [pc, #412]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	4b65      	ldr	r3, [pc, #404]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a64      	ldr	r2, [pc, #400]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	e00b      	b.n	8008fe0 <HAL_RCC_OscConfig+0xd4>
 8008fc8:	4b61      	ldr	r3, [pc, #388]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a60      	ldr	r2, [pc, #384]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8008fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d013      	beq.n	8009010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe8:	f7f9 fd9c 	bl	8002b24 <HAL_GetTick>
 8008fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fee:	e008      	b.n	8009002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ff0:	f7f9 fd98 	bl	8002b24 <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	2b64      	cmp	r3, #100	@ 0x64
 8008ffc:	d901      	bls.n	8009002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e356      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009002:	4b53      	ldr	r3, [pc, #332]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0f0      	beq.n	8008ff0 <HAL_RCC_OscConfig+0xe4>
 800900e:	e014      	b.n	800903a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7f9 fd88 	bl	8002b24 <HAL_GetTick>
 8009014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009018:	f7f9 fd84 	bl	8002b24 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b64      	cmp	r3, #100	@ 0x64
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e342      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800902a:	4b49      	ldr	r3, [pc, #292]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f0      	bne.n	8009018 <HAL_RCC_OscConfig+0x10c>
 8009036:	e000      	b.n	800903a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 808c 	beq.w	8009160 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009048:	4b41      	ldr	r3, [pc, #260]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009052:	4b3f      	ldr	r3, [pc, #252]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009056:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d007      	beq.n	800906e <HAL_RCC_OscConfig+0x162>
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	2b18      	cmp	r3, #24
 8009062:	d137      	bne.n	80090d4 <HAL_RCC_OscConfig+0x1c8>
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d132      	bne.n	80090d4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800906e:	4b38      	ldr	r3, [pc, #224]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <HAL_RCC_OscConfig+0x17a>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e314      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009086:	4b32      	ldr	r3, [pc, #200]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f023 0219 	bic.w	r2, r3, #25
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	492f      	ldr	r1, [pc, #188]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009094:	4313      	orrs	r3, r2
 8009096:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009098:	f7f9 fd44 	bl	8002b24 <HAL_GetTick>
 800909c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090a0:	f7f9 fd40 	bl	8002b24 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e2fe      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090b2:	4b27      	ldr	r3, [pc, #156]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0f0      	beq.n	80090a0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090be:	4b24      	ldr	r3, [pc, #144]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	061b      	lsls	r3, r3, #24
 80090cc:	4920      	ldr	r1, [pc, #128]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090d2:	e045      	b.n	8009160 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d026      	beq.n	800912a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f023 0219 	bic.w	r2, r3, #25
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	4919      	ldr	r1, [pc, #100]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ee:	f7f9 fd19 	bl	8002b24 <HAL_GetTick>
 80090f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090f4:	e008      	b.n	8009108 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090f6:	f7f9 fd15 	bl	8002b24 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d901      	bls.n	8009108 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e2d3      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009108:	4b11      	ldr	r3, [pc, #68]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0f0      	beq.n	80090f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009114:	4b0e      	ldr	r3, [pc, #56]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	061b      	lsls	r3, r3, #24
 8009122:	490b      	ldr	r1, [pc, #44]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009124:	4313      	orrs	r3, r2
 8009126:	604b      	str	r3, [r1, #4]
 8009128:	e01a      	b.n	8009160 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800912a:	4b09      	ldr	r3, [pc, #36]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a08      	ldr	r2, [pc, #32]	@ (8009150 <HAL_RCC_OscConfig+0x244>)
 8009130:	f023 0301 	bic.w	r3, r3, #1
 8009134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009136:	f7f9 fcf5 	bl	8002b24 <HAL_GetTick>
 800913a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800913c:	e00a      	b.n	8009154 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800913e:	f7f9 fcf1 	bl	8002b24 <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d903      	bls.n	8009154 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e2af      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
 8009150:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009154:	4b96      	ldr	r3, [pc, #600]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1ee      	bne.n	800913e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d06a      	beq.n	8009242 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800916c:	4b90      	ldr	r3, [pc, #576]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009174:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009176:	4b8e      	ldr	r3, [pc, #568]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	2b08      	cmp	r3, #8
 8009180:	d007      	beq.n	8009192 <HAL_RCC_OscConfig+0x286>
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	2b18      	cmp	r3, #24
 8009186:	d11b      	bne.n	80091c0 <HAL_RCC_OscConfig+0x2b4>
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b01      	cmp	r3, #1
 8009190:	d116      	bne.n	80091c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009192:	4b87      	ldr	r3, [pc, #540]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <HAL_RCC_OscConfig+0x29e>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	2b80      	cmp	r3, #128	@ 0x80
 80091a4:	d001      	beq.n	80091aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e282      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091aa:	4b81      	ldr	r3, [pc, #516]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	061b      	lsls	r3, r3, #24
 80091b8:	497d      	ldr	r1, [pc, #500]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091be:	e040      	b.n	8009242 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d023      	beq.n	8009210 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091c8:	4b79      	ldr	r3, [pc, #484]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a78      	ldr	r2, [pc, #480]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80091ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d4:	f7f9 fca6 	bl	8002b24 <HAL_GetTick>
 80091d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091dc:	f7f9 fca2 	bl	8002b24 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e260      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091ee:	4b70      	ldr	r3, [pc, #448]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0f0      	beq.n	80091dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091fa:	4b6d      	ldr	r3, [pc, #436]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	061b      	lsls	r3, r3, #24
 8009208:	4969      	ldr	r1, [pc, #420]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800920a:	4313      	orrs	r3, r2
 800920c:	60cb      	str	r3, [r1, #12]
 800920e:	e018      	b.n	8009242 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009210:	4b67      	ldr	r3, [pc, #412]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a66      	ldr	r2, [pc, #408]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800921a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921c:	f7f9 fc82 	bl	8002b24 <HAL_GetTick>
 8009220:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009224:	f7f9 fc7e 	bl	8002b24 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e23c      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009236:	4b5e      	ldr	r3, [pc, #376]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1f0      	bne.n	8009224 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0308 	and.w	r3, r3, #8
 800924a:	2b00      	cmp	r3, #0
 800924c:	d036      	beq.n	80092bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d019      	beq.n	800928a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009256:	4b56      	ldr	r3, [pc, #344]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800925a:	4a55      	ldr	r2, [pc, #340]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800925c:	f043 0301 	orr.w	r3, r3, #1
 8009260:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009262:	f7f9 fc5f 	bl	8002b24 <HAL_GetTick>
 8009266:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009268:	e008      	b.n	800927c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800926a:	f7f9 fc5b 	bl	8002b24 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	2b02      	cmp	r3, #2
 8009276:	d901      	bls.n	800927c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e219      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800927c:	4b4c      	ldr	r3, [pc, #304]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800927e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0f0      	beq.n	800926a <HAL_RCC_OscConfig+0x35e>
 8009288:	e018      	b.n	80092bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800928a:	4b49      	ldr	r3, [pc, #292]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800928c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800928e:	4a48      	ldr	r2, [pc, #288]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009290:	f023 0301 	bic.w	r3, r3, #1
 8009294:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009296:	f7f9 fc45 	bl	8002b24 <HAL_GetTick>
 800929a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800929c:	e008      	b.n	80092b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800929e:	f7f9 fc41 	bl	8002b24 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d901      	bls.n	80092b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e1ff      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092b0:	4b3f      	ldr	r3, [pc, #252]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80092b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1f0      	bne.n	800929e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d036      	beq.n	8009336 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d019      	beq.n	8009304 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092d0:	4b37      	ldr	r3, [pc, #220]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a36      	ldr	r2, [pc, #216]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80092d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80092da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092dc:	f7f9 fc22 	bl	8002b24 <HAL_GetTick>
 80092e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092e2:	e008      	b.n	80092f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092e4:	f7f9 fc1e 	bl	8002b24 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e1dc      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092f6:	4b2e      	ldr	r3, [pc, #184]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0f0      	beq.n	80092e4 <HAL_RCC_OscConfig+0x3d8>
 8009302:	e018      	b.n	8009336 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009304:	4b2a      	ldr	r3, [pc, #168]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a29      	ldr	r2, [pc, #164]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800930a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800930e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009310:	f7f9 fc08 	bl	8002b24 <HAL_GetTick>
 8009314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009318:	f7f9 fc04 	bl	8002b24 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e1c2      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800932a:	4b21      	ldr	r3, [pc, #132]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f0      	bne.n	8009318 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0304 	and.w	r3, r3, #4
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8086 	beq.w	8009450 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009344:	4b1b      	ldr	r3, [pc, #108]	@ (80093b4 <HAL_RCC_OscConfig+0x4a8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a1a      	ldr	r2, [pc, #104]	@ (80093b4 <HAL_RCC_OscConfig+0x4a8>)
 800934a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800934e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009350:	f7f9 fbe8 	bl	8002b24 <HAL_GetTick>
 8009354:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009358:	f7f9 fbe4 	bl	8002b24 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b64      	cmp	r3, #100	@ 0x64
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e1a2      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800936a:	4b12      	ldr	r3, [pc, #72]	@ (80093b4 <HAL_RCC_OscConfig+0x4a8>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0f0      	beq.n	8009358 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d106      	bne.n	800938c <HAL_RCC_OscConfig+0x480>
 800937e:	4b0c      	ldr	r3, [pc, #48]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009382:	4a0b      	ldr	r2, [pc, #44]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009384:	f043 0301 	orr.w	r3, r3, #1
 8009388:	6713      	str	r3, [r2, #112]	@ 0x70
 800938a:	e032      	b.n	80093f2 <HAL_RCC_OscConfig+0x4e6>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d111      	bne.n	80093b8 <HAL_RCC_OscConfig+0x4ac>
 8009394:	4b06      	ldr	r3, [pc, #24]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 8009396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009398:	4a05      	ldr	r2, [pc, #20]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	6713      	str	r3, [r2, #112]	@ 0x70
 80093a0:	4b03      	ldr	r3, [pc, #12]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80093a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093a4:	4a02      	ldr	r2, [pc, #8]	@ (80093b0 <HAL_RCC_OscConfig+0x4a4>)
 80093a6:	f023 0304 	bic.w	r3, r3, #4
 80093aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80093ac:	e021      	b.n	80093f2 <HAL_RCC_OscConfig+0x4e6>
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	58024800 	.word	0x58024800
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	2b05      	cmp	r3, #5
 80093be:	d10c      	bne.n	80093da <HAL_RCC_OscConfig+0x4ce>
 80093c0:	4b83      	ldr	r3, [pc, #524]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c4:	4a82      	ldr	r2, [pc, #520]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093c6:	f043 0304 	orr.w	r3, r3, #4
 80093ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80093cc:	4b80      	ldr	r3, [pc, #512]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d0:	4a7f      	ldr	r2, [pc, #508]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80093d8:	e00b      	b.n	80093f2 <HAL_RCC_OscConfig+0x4e6>
 80093da:	4b7d      	ldr	r3, [pc, #500]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093de:	4a7c      	ldr	r2, [pc, #496]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80093e6:	4b7a      	ldr	r3, [pc, #488]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ea:	4a79      	ldr	r2, [pc, #484]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80093ec:	f023 0304 	bic.w	r3, r3, #4
 80093f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d015      	beq.n	8009426 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093fa:	f7f9 fb93 	bl	8002b24 <HAL_GetTick>
 80093fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009400:	e00a      	b.n	8009418 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009402:	f7f9 fb8f 	bl	8002b24 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009410:	4293      	cmp	r3, r2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e14b      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009418:	4b6d      	ldr	r3, [pc, #436]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800941a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d0ee      	beq.n	8009402 <HAL_RCC_OscConfig+0x4f6>
 8009424:	e014      	b.n	8009450 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009426:	f7f9 fb7d 	bl	8002b24 <HAL_GetTick>
 800942a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800942c:	e00a      	b.n	8009444 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800942e:	f7f9 fb79 	bl	8002b24 <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800943c:	4293      	cmp	r3, r2
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e135      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009444:	4b62      	ldr	r3, [pc, #392]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1ee      	bne.n	800942e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 812a 	beq.w	80096ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800945a:	4b5d      	ldr	r3, [pc, #372]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009462:	2b18      	cmp	r3, #24
 8009464:	f000 80ba 	beq.w	80095dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946c:	2b02      	cmp	r3, #2
 800946e:	f040 8095 	bne.w	800959c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009472:	4b57      	ldr	r3, [pc, #348]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a56      	ldr	r2, [pc, #344]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800947c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947e:	f7f9 fb51 	bl	8002b24 <HAL_GetTick>
 8009482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009484:	e008      	b.n	8009498 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009486:	f7f9 fb4d 	bl	8002b24 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	2b02      	cmp	r3, #2
 8009492:	d901      	bls.n	8009498 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e10b      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009498:	4b4d      	ldr	r3, [pc, #308]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1f0      	bne.n	8009486 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094a4:	4b4a      	ldr	r3, [pc, #296]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80094a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094a8:	4b4a      	ldr	r3, [pc, #296]	@ (80095d4 <HAL_RCC_OscConfig+0x6c8>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80094b4:	0112      	lsls	r2, r2, #4
 80094b6:	430a      	orrs	r2, r1
 80094b8:	4945      	ldr	r1, [pc, #276]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c2:	3b01      	subs	r3, #1
 80094c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	3b01      	subs	r3, #1
 80094ce:	025b      	lsls	r3, r3, #9
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d8:	3b01      	subs	r3, #1
 80094da:	041b      	lsls	r3, r3, #16
 80094dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e6:	3b01      	subs	r3, #1
 80094e8:	061b      	lsls	r3, r3, #24
 80094ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80094ee:	4938      	ldr	r1, [pc, #224]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80094f4:	4b36      	ldr	r3, [pc, #216]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f8:	4a35      	ldr	r2, [pc, #212]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009500:	4b33      	ldr	r3, [pc, #204]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009504:	4b34      	ldr	r3, [pc, #208]	@ (80095d8 <HAL_RCC_OscConfig+0x6cc>)
 8009506:	4013      	ands	r3, r2
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800950c:	00d2      	lsls	r2, r2, #3
 800950e:	4930      	ldr	r1, [pc, #192]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009510:	4313      	orrs	r3, r2
 8009512:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009514:	4b2e      	ldr	r3, [pc, #184]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009518:	f023 020c 	bic.w	r2, r3, #12
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009520:	492b      	ldr	r1, [pc, #172]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009522:	4313      	orrs	r3, r2
 8009524:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009526:	4b2a      	ldr	r3, [pc, #168]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952a:	f023 0202 	bic.w	r2, r3, #2
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009532:	4927      	ldr	r1, [pc, #156]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009534:	4313      	orrs	r3, r2
 8009536:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009538:	4b25      	ldr	r3, [pc, #148]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800953a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953c:	4a24      	ldr	r2, [pc, #144]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800953e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009544:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009548:	4a21      	ldr	r2, [pc, #132]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800954a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800954e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009550:	4b1f      	ldr	r3, [pc, #124]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	4a1e      	ldr	r2, [pc, #120]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800955a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	4a1b      	ldr	r2, [pc, #108]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009568:	4b19      	ldr	r3, [pc, #100]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a18      	ldr	r2, [pc, #96]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800956e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009574:	f7f9 fad6 	bl	8002b24 <HAL_GetTick>
 8009578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800957a:	e008      	b.n	800958e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800957c:	f7f9 fad2 	bl	8002b24 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d901      	bls.n	800958e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e090      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800958e:	4b10      	ldr	r3, [pc, #64]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f0      	beq.n	800957c <HAL_RCC_OscConfig+0x670>
 800959a:	e088      	b.n	80096ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800959c:	4b0c      	ldr	r3, [pc, #48]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0b      	ldr	r2, [pc, #44]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80095a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7f9 fabc 	bl	8002b24 <HAL_GetTick>
 80095ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095b0:	f7f9 fab8 	bl	8002b24 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e076      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095c2:	4b03      	ldr	r3, [pc, #12]	@ (80095d0 <HAL_RCC_OscConfig+0x6c4>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <HAL_RCC_OscConfig+0x6a4>
 80095ce:	e06e      	b.n	80096ae <HAL_RCC_OscConfig+0x7a2>
 80095d0:	58024400 	.word	0x58024400
 80095d4:	fffffc0c 	.word	0xfffffc0c
 80095d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095dc:	4b36      	ldr	r3, [pc, #216]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 80095de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095e2:	4b35      	ldr	r3, [pc, #212]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d031      	beq.n	8009654 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	f003 0203 	and.w	r2, r3, #3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d12a      	bne.n	8009654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800960a:	429a      	cmp	r2, r3
 800960c:	d122      	bne.n	8009654 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009618:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800961a:	429a      	cmp	r2, r3
 800961c:	d11a      	bne.n	8009654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	0a5b      	lsrs	r3, r3, #9
 8009622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800962c:	429a      	cmp	r2, r3
 800962e:	d111      	bne.n	8009654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800963e:	429a      	cmp	r2, r3
 8009640:	d108      	bne.n	8009654 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	0e1b      	lsrs	r3, r3, #24
 8009646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800964e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009650:	429a      	cmp	r2, r3
 8009652:	d001      	beq.n	8009658 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e02b      	b.n	80096b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009658:	4b17      	ldr	r3, [pc, #92]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 800965a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965c:	08db      	lsrs	r3, r3, #3
 800965e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009662:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	429a      	cmp	r2, r3
 800966c:	d01f      	beq.n	80096ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800966e:	4b12      	ldr	r3, [pc, #72]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 8009670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009672:	4a11      	ldr	r2, [pc, #68]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 8009674:	f023 0301 	bic.w	r3, r3, #1
 8009678:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800967a:	f7f9 fa53 	bl	8002b24 <HAL_GetTick>
 800967e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009680:	bf00      	nop
 8009682:	f7f9 fa4f 	bl	8002b24 <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968a:	4293      	cmp	r3, r2
 800968c:	d0f9      	beq.n	8009682 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800968e:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 8009690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009692:	4b0a      	ldr	r3, [pc, #40]	@ (80096bc <HAL_RCC_OscConfig+0x7b0>)
 8009694:	4013      	ands	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800969a:	00d2      	lsls	r2, r2, #3
 800969c:	4906      	ldr	r1, [pc, #24]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80096a2:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a6:	4a04      	ldr	r2, [pc, #16]	@ (80096b8 <HAL_RCC_OscConfig+0x7ac>)
 80096a8:	f043 0301 	orr.w	r3, r3, #1
 80096ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3730      	adds	r7, #48	@ 0x30
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	58024400 	.word	0x58024400
 80096bc:	ffff0007 	.word	0xffff0007

080096c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e19c      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096d4:	4b8a      	ldr	r3, [pc, #552]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d910      	bls.n	8009704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096e2:	4b87      	ldr	r3, [pc, #540]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f023 020f 	bic.w	r2, r3, #15
 80096ea:	4985      	ldr	r1, [pc, #532]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b83      	ldr	r3, [pc, #524]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d001      	beq.n	8009704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e184      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d010      	beq.n	8009732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	4b7b      	ldr	r3, [pc, #492]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800971c:	429a      	cmp	r2, r3
 800971e:	d908      	bls.n	8009732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009720:	4b78      	ldr	r3, [pc, #480]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	4975      	ldr	r1, [pc, #468]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 800972e:	4313      	orrs	r3, r2
 8009730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0308 	and.w	r3, r3, #8
 800973a:	2b00      	cmp	r3, #0
 800973c:	d010      	beq.n	8009760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	695a      	ldr	r2, [r3, #20]
 8009742:	4b70      	ldr	r3, [pc, #448]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800974a:	429a      	cmp	r2, r3
 800974c:	d908      	bls.n	8009760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800974e:	4b6d      	ldr	r3, [pc, #436]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	496a      	ldr	r1, [pc, #424]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 800975c:	4313      	orrs	r3, r2
 800975e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0310 	and.w	r3, r3, #16
 8009768:	2b00      	cmp	r3, #0
 800976a:	d010      	beq.n	800978e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	4b64      	ldr	r3, [pc, #400]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009778:	429a      	cmp	r2, r3
 800977a:	d908      	bls.n	800978e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800977c:	4b61      	ldr	r3, [pc, #388]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	495e      	ldr	r1, [pc, #376]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 800978a:	4313      	orrs	r3, r2
 800978c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0320 	and.w	r3, r3, #32
 8009796:	2b00      	cmp	r3, #0
 8009798:	d010      	beq.n	80097bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	69da      	ldr	r2, [r3, #28]
 800979e:	4b59      	ldr	r3, [pc, #356]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d908      	bls.n	80097bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097aa:	4b56      	ldr	r3, [pc, #344]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	4953      	ldr	r1, [pc, #332]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097b8:	4313      	orrs	r3, r2
 80097ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d010      	beq.n	80097ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	4b4d      	ldr	r3, [pc, #308]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	f003 030f 	and.w	r3, r3, #15
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d908      	bls.n	80097ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097d8:	4b4a      	ldr	r3, [pc, #296]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	f023 020f 	bic.w	r2, r3, #15
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	4947      	ldr	r1, [pc, #284]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d055      	beq.n	80098a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097f6:	4b43      	ldr	r3, [pc, #268]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	4940      	ldr	r1, [pc, #256]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009804:	4313      	orrs	r3, r2
 8009806:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2b02      	cmp	r3, #2
 800980e:	d107      	bne.n	8009820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009810:	4b3c      	ldr	r3, [pc, #240]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d121      	bne.n	8009860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e0f6      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2b03      	cmp	r3, #3
 8009826:	d107      	bne.n	8009838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009828:	4b36      	ldr	r3, [pc, #216]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d115      	bne.n	8009860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e0ea      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d107      	bne.n	8009850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009840:	4b30      	ldr	r3, [pc, #192]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e0de      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009850:	4b2c      	ldr	r3, [pc, #176]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e0d6      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009860:	4b28      	ldr	r3, [pc, #160]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f023 0207 	bic.w	r2, r3, #7
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	4925      	ldr	r1, [pc, #148]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 800986e:	4313      	orrs	r3, r2
 8009870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009872:	f7f9 f957 	bl	8002b24 <HAL_GetTick>
 8009876:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009878:	e00a      	b.n	8009890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800987a:	f7f9 f953 	bl	8002b24 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009888:	4293      	cmp	r3, r2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e0be      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009890:	4b1c      	ldr	r3, [pc, #112]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	429a      	cmp	r2, r3
 80098a0:	d1eb      	bne.n	800987a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d010      	beq.n	80098d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68da      	ldr	r2, [r3, #12]
 80098b2:	4b14      	ldr	r3, [pc, #80]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f003 030f 	and.w	r3, r3, #15
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d208      	bcs.n	80098d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098be:	4b11      	ldr	r3, [pc, #68]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f023 020f 	bic.w	r2, r3, #15
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	490e      	ldr	r1, [pc, #56]	@ (8009904 <HAL_RCC_ClockConfig+0x244>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d214      	bcs.n	8009908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098de:	4b08      	ldr	r3, [pc, #32]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f023 020f 	bic.w	r2, r3, #15
 80098e6:	4906      	ldr	r1, [pc, #24]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ee:	4b04      	ldr	r3, [pc, #16]	@ (8009900 <HAL_RCC_ClockConfig+0x240>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	683a      	ldr	r2, [r7, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d005      	beq.n	8009908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e086      	b.n	8009a0e <HAL_RCC_ClockConfig+0x34e>
 8009900:	52002000 	.word	0x52002000
 8009904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b00      	cmp	r3, #0
 8009912:	d010      	beq.n	8009936 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	4b3f      	ldr	r3, [pc, #252]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009920:	429a      	cmp	r2, r3
 8009922:	d208      	bcs.n	8009936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009924:	4b3c      	ldr	r3, [pc, #240]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	4939      	ldr	r1, [pc, #228]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009932:	4313      	orrs	r3, r2
 8009934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0308 	and.w	r3, r3, #8
 800993e:	2b00      	cmp	r3, #0
 8009940:	d010      	beq.n	8009964 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695a      	ldr	r2, [r3, #20]
 8009946:	4b34      	ldr	r3, [pc, #208]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800994e:	429a      	cmp	r2, r3
 8009950:	d208      	bcs.n	8009964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009952:	4b31      	ldr	r3, [pc, #196]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	492e      	ldr	r1, [pc, #184]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009960:	4313      	orrs	r3, r2
 8009962:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0310 	and.w	r3, r3, #16
 800996c:	2b00      	cmp	r3, #0
 800996e:	d010      	beq.n	8009992 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699a      	ldr	r2, [r3, #24]
 8009974:	4b28      	ldr	r3, [pc, #160]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800997c:	429a      	cmp	r2, r3
 800997e:	d208      	bcs.n	8009992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009980:	4b25      	ldr	r3, [pc, #148]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	4922      	ldr	r1, [pc, #136]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 800998e:	4313      	orrs	r3, r2
 8009990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d010      	beq.n	80099c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69da      	ldr	r2, [r3, #28]
 80099a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d208      	bcs.n	80099c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80099ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	4917      	ldr	r1, [pc, #92]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099c0:	f000 f834 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 80099c4:	4602      	mov	r2, r0
 80099c6:	4b14      	ldr	r3, [pc, #80]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	4912      	ldr	r1, [pc, #72]	@ (8009a1c <HAL_RCC_ClockConfig+0x35c>)
 80099d2:	5ccb      	ldrb	r3, [r1, r3]
 80099d4:	f003 031f 	and.w	r3, r3, #31
 80099d8:	fa22 f303 	lsr.w	r3, r2, r3
 80099dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099de:	4b0e      	ldr	r3, [pc, #56]	@ (8009a18 <HAL_RCC_ClockConfig+0x358>)
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	4a0d      	ldr	r2, [pc, #52]	@ (8009a1c <HAL_RCC_ClockConfig+0x35c>)
 80099e8:	5cd3      	ldrb	r3, [r2, r3]
 80099ea:	f003 031f 	and.w	r3, r3, #31
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
 80099f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009a20 <HAL_RCC_ClockConfig+0x360>)
 80099f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099f8:	4a0a      	ldr	r2, [pc, #40]	@ (8009a24 <HAL_RCC_ClockConfig+0x364>)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80099fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009a28 <HAL_RCC_ClockConfig+0x368>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f9 f844 	bl	8002a90 <HAL_InitTick>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	58024400 	.word	0x58024400
 8009a1c:	0801244c 	.word	0x0801244c
 8009a20:	24000010 	.word	0x24000010
 8009a24:	2400000c 	.word	0x2400000c
 8009a28:	24000014 	.word	0x24000014

08009a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b089      	sub	sp, #36	@ 0x24
 8009a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a32:	4bb3      	ldr	r3, [pc, #716]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a3a:	2b18      	cmp	r3, #24
 8009a3c:	f200 8155 	bhi.w	8009cea <HAL_RCC_GetSysClockFreq+0x2be>
 8009a40:	a201      	add	r2, pc, #4	@ (adr r2, 8009a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009aad 	.word	0x08009aad
 8009a4c:	08009ceb 	.word	0x08009ceb
 8009a50:	08009ceb 	.word	0x08009ceb
 8009a54:	08009ceb 	.word	0x08009ceb
 8009a58:	08009ceb 	.word	0x08009ceb
 8009a5c:	08009ceb 	.word	0x08009ceb
 8009a60:	08009ceb 	.word	0x08009ceb
 8009a64:	08009ceb 	.word	0x08009ceb
 8009a68:	08009ad3 	.word	0x08009ad3
 8009a6c:	08009ceb 	.word	0x08009ceb
 8009a70:	08009ceb 	.word	0x08009ceb
 8009a74:	08009ceb 	.word	0x08009ceb
 8009a78:	08009ceb 	.word	0x08009ceb
 8009a7c:	08009ceb 	.word	0x08009ceb
 8009a80:	08009ceb 	.word	0x08009ceb
 8009a84:	08009ceb 	.word	0x08009ceb
 8009a88:	08009ad9 	.word	0x08009ad9
 8009a8c:	08009ceb 	.word	0x08009ceb
 8009a90:	08009ceb 	.word	0x08009ceb
 8009a94:	08009ceb 	.word	0x08009ceb
 8009a98:	08009ceb 	.word	0x08009ceb
 8009a9c:	08009ceb 	.word	0x08009ceb
 8009aa0:	08009ceb 	.word	0x08009ceb
 8009aa4:	08009ceb 	.word	0x08009ceb
 8009aa8:	08009adf 	.word	0x08009adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aac:	4b94      	ldr	r3, [pc, #592]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d009      	beq.n	8009acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ab8:	4b91      	ldr	r3, [pc, #580]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	08db      	lsrs	r3, r3, #3
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	4a90      	ldr	r2, [pc, #576]	@ (8009d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009aca:	e111      	b.n	8009cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009acc:	4b8d      	ldr	r3, [pc, #564]	@ (8009d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ace:	61bb      	str	r3, [r7, #24]
      break;
 8009ad0:	e10e      	b.n	8009cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8009d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ad4:	61bb      	str	r3, [r7, #24]
      break;
 8009ad6:	e10b      	b.n	8009cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8009d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ada:	61bb      	str	r3, [r7, #24]
      break;
 8009adc:	e108      	b.n	8009cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ade:	4b88      	ldr	r3, [pc, #544]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009ae8:	4b85      	ldr	r3, [pc, #532]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	091b      	lsrs	r3, r3, #4
 8009aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009af2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009af4:	4b82      	ldr	r3, [pc, #520]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009afe:	4b80      	ldr	r3, [pc, #512]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b02:	08db      	lsrs	r3, r3, #3
 8009b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	fb02 f303 	mul.w	r3, r2, r3
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 80e1 	beq.w	8009ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	f000 8083 	beq.w	8009c30 <HAL_RCC_GetSysClockFreq+0x204>
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	f200 80a1 	bhi.w	8009c74 <HAL_RCC_GetSysClockFreq+0x248>
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <HAL_RCC_GetSysClockFreq+0x114>
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d056      	beq.n	8009bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b3e:	e099      	b.n	8009c74 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b40:	4b6f      	ldr	r3, [pc, #444]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d02d      	beq.n	8009ba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	08db      	lsrs	r3, r3, #3
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	4a6b      	ldr	r2, [pc, #428]	@ (8009d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b76:	4b62      	ldr	r3, [pc, #392]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009ba6:	e087      	b.n	8009cb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b51      	ldr	r3, [pc, #324]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bea:	e065      	b.n	8009cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b40      	ldr	r3, [pc, #256]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c2e:	e043      	b.n	8009cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c42:	4b2f      	ldr	r3, [pc, #188]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c72:	e021      	b.n	8009cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c86:	4b1e      	ldr	r3, [pc, #120]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009cb8:	4b11      	ldr	r3, [pc, #68]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cbc:	0a5b      	lsrs	r3, r3, #9
 8009cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cdc:	ee17 3a90 	vmov	r3, s15
 8009ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009ce2:	e005      	b.n	8009cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	61bb      	str	r3, [r7, #24]
      break;
 8009ce8:	e002      	b.n	8009cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009cea:	4b07      	ldr	r3, [pc, #28]	@ (8009d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009cec:	61bb      	str	r3, [r7, #24]
      break;
 8009cee:	bf00      	nop
  }

  return sysclockfreq;
 8009cf0:	69bb      	ldr	r3, [r7, #24]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3724      	adds	r7, #36	@ 0x24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	58024400 	.word	0x58024400
 8009d04:	03d09000 	.word	0x03d09000
 8009d08:	003d0900 	.word	0x003d0900
 8009d0c:	016e3600 	.word	0x016e3600
 8009d10:	46000000 	.word	0x46000000
 8009d14:	4c742400 	.word	0x4c742400
 8009d18:	4a742400 	.word	0x4a742400
 8009d1c:	4bb71b00 	.word	0x4bb71b00

08009d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d26:	f7ff fe81 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	4b10      	ldr	r3, [pc, #64]	@ (8009d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	0a1b      	lsrs	r3, r3, #8
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	490f      	ldr	r1, [pc, #60]	@ (8009d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d38:	5ccb      	ldrb	r3, [r1, r3]
 8009d3a:	f003 031f 	and.w	r3, r3, #31
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d44:	4b0a      	ldr	r3, [pc, #40]	@ (8009d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f003 030f 	and.w	r3, r3, #15
 8009d4c:	4a09      	ldr	r2, [pc, #36]	@ (8009d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d4e:	5cd3      	ldrb	r3, [r2, r3]
 8009d50:	f003 031f 	and.w	r3, r3, #31
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	fa22 f303 	lsr.w	r3, r2, r3
 8009d5a:	4a07      	ldr	r2, [pc, #28]	@ (8009d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d5e:	4a07      	ldr	r2, [pc, #28]	@ (8009d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d64:	4b04      	ldr	r3, [pc, #16]	@ (8009d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d66:	681b      	ldr	r3, [r3, #0]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	58024400 	.word	0x58024400
 8009d74:	0801244c 	.word	0x0801244c
 8009d78:	24000010 	.word	0x24000010
 8009d7c:	2400000c 	.word	0x2400000c

08009d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d84:	f7ff ffcc 	bl	8009d20 <HAL_RCC_GetHCLKFreq>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	091b      	lsrs	r3, r3, #4
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	4904      	ldr	r1, [pc, #16]	@ (8009da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d96:	5ccb      	ldrb	r3, [r1, r3]
 8009d98:	f003 031f 	and.w	r3, r3, #31
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	58024400 	.word	0x58024400
 8009da8:	0801244c 	.word	0x0801244c

08009dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009db0:	f7ff ffb6 	bl	8009d20 <HAL_RCC_GetHCLKFreq>
 8009db4:	4602      	mov	r2, r0
 8009db6:	4b06      	ldr	r3, [pc, #24]	@ (8009dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	f003 0307 	and.w	r3, r3, #7
 8009dc0:	4904      	ldr	r1, [pc, #16]	@ (8009dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dc2:	5ccb      	ldrb	r3, [r1, r3]
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	0801244c 	.word	0x0801244c

08009dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ddc:	b0c6      	sub	sp, #280	@ 0x118
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	ea54 0305 	orrs.w	r3, r4, r5
 8009e02:	d049      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e0e:	d02f      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e14:	d828      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e1a:	d01a      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e20:	d822      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e2a:	d007      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e2c:	e01c      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2e:	4bab      	ldr	r3, [pc, #684]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e32:	4aaa      	ldr	r2, [pc, #680]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e3a:	e01a      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e40:	3308      	adds	r3, #8
 8009e42:	2102      	movs	r1, #2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f002 fa49 	bl	800c2dc <RCCEx_PLL2_Config>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e50:	e00f      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e56:	3328      	adds	r3, #40	@ 0x28
 8009e58:	2102      	movs	r1, #2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 faf0 	bl	800c440 <RCCEx_PLL3_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e66:	e004      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e6e:	e000      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e7a:	4b98      	ldr	r3, [pc, #608]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e88:	4a94      	ldr	r2, [pc, #592]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e8e:	e003      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009ea4:	f04f 0900 	mov.w	r9, #0
 8009ea8:	ea58 0309 	orrs.w	r3, r8, r9
 8009eac:	d047      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	d82a      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ed5 	.word	0x08009ed5
 8009ec4:	08009ee3 	.word	0x08009ee3
 8009ec8:	08009ef9 	.word	0x08009ef9
 8009ecc:	08009f17 	.word	0x08009f17
 8009ed0:	08009f17 	.word	0x08009f17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed4:	4b81      	ldr	r3, [pc, #516]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed8:	4a80      	ldr	r2, [pc, #512]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ee0:	e01a      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	2100      	movs	r1, #0
 8009eea:	4618      	mov	r0, r3
 8009eec:	f002 f9f6 	bl	800c2dc <RCCEx_PLL2_Config>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ef6:	e00f      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efc:	3328      	adds	r3, #40	@ 0x28
 8009efe:	2100      	movs	r1, #0
 8009f00:	4618      	mov	r0, r3
 8009f02:	f002 fa9d 	bl	800c440 <RCCEx_PLL3_Config>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f0c:	e004      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f14:	e000      	b.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f20:	4b6e      	ldr	r3, [pc, #440]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f24:	f023 0107 	bic.w	r1, r3, #7
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f2e:	4a6b      	ldr	r2, [pc, #428]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f30:	430b      	orrs	r3, r1
 8009f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f34:	e003      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009f4a:	f04f 0b00 	mov.w	fp, #0
 8009f4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009f52:	d05b      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f5c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009f60:	d03b      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009f62:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009f66:	d834      	bhi.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f6c:	d037      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f72:	d82e      	bhi.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f78:	d033      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f7e:	d828      	bhi.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f84:	d01a      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f8a:	d822      	bhi.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f94:	d007      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009f96:	e01c      	b.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f98:	4b50      	ldr	r3, [pc, #320]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9c:	4a4f      	ldr	r2, [pc, #316]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fa4:	e01e      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009faa:	3308      	adds	r3, #8
 8009fac:	2100      	movs	r1, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f002 f994 	bl	800c2dc <RCCEx_PLL2_Config>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009fba:	e013      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc0:	3328      	adds	r3, #40	@ 0x28
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f002 fa3b 	bl	800c440 <RCCEx_PLL3_Config>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fd0:	e008      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fd8:	e004      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009fda:	bf00      	nop
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10b      	bne.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009fec:	4b3b      	ldr	r3, [pc, #236]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ffc:	4a37      	ldr	r2, [pc, #220]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ffe:	430b      	orrs	r3, r1
 800a000:	6593      	str	r3, [r2, #88]	@ 0x58
 800a002:	e003      	b.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a01c:	2300      	movs	r3, #0
 800a01e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a022:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a026:	460b      	mov	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	d05d      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a034:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a038:	d03b      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a03a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a03e:	d834      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a044:	d037      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a046:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a04a:	d82e      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a04c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a050:	d033      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a052:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a056:	d828      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a05c:	d01a      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a05e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a062:	d822      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a06c:	d007      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a06e:	e01c      	b.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a070:	4b1a      	ldr	r3, [pc, #104]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a074:	4a19      	ldr	r2, [pc, #100]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a07c:	e01e      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a082:	3308      	adds	r3, #8
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f002 f928 	bl	800c2dc <RCCEx_PLL2_Config>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a092:	e013      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a098:	3328      	adds	r3, #40	@ 0x28
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f002 f9cf 	bl	800c440 <RCCEx_PLL3_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0a8:	e008      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0b0:	e004      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a0b2:	bf00      	nop
 800a0b4:	e002      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a0b6:	bf00      	nop
 800a0b8:	e000      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a0ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10d      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0c8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a0d4:	4a01      	ldr	r2, [pc, #4]	@ (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0da:	e005      	b.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a0dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a0f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a0fe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a102:	460b      	mov	r3, r1
 800a104:	4313      	orrs	r3, r2
 800a106:	d03a      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a10e:	2b30      	cmp	r3, #48	@ 0x30
 800a110:	d01f      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a112:	2b30      	cmp	r3, #48	@ 0x30
 800a114:	d819      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a116:	2b20      	cmp	r3, #32
 800a118:	d00c      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a11a:	2b20      	cmp	r3, #32
 800a11c:	d815      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d019      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a122:	2b10      	cmp	r3, #16
 800a124:	d111      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a126:	4baa      	ldr	r3, [pc, #680]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12a:	4aa9      	ldr	r2, [pc, #676]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a12c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a130:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a132:	e011      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a138:	3308      	adds	r3, #8
 800a13a:	2102      	movs	r1, #2
 800a13c:	4618      	mov	r0, r3
 800a13e:	f002 f8cd 	bl	800c2dc <RCCEx_PLL2_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a148:	e006      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a150:	e002      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a152:	bf00      	nop
 800a154:	e000      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a156:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a160:	4b9b      	ldr	r3, [pc, #620]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a164:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a16e:	4a98      	ldr	r2, [pc, #608]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a170:	430b      	orrs	r3, r1
 800a172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a174:	e003      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a17a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a18a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a18e:	2300      	movs	r3, #0
 800a190:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a194:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a198:	460b      	mov	r3, r1
 800a19a:	4313      	orrs	r3, r2
 800a19c:	d051      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1a8:	d035      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a1aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1ae:	d82e      	bhi.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a1b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1b4:	d031      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a1b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1ba:	d828      	bhi.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a1bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c0:	d01a      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c6:	d822      	bhi.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a1cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d0:	d007      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a1d2:	e01c      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d4:	4b7e      	ldr	r3, [pc, #504]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	4a7d      	ldr	r2, [pc, #500]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1e0:	e01c      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f002 f876 	bl	800c2dc <RCCEx_PLL2_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1f6:	e011      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fc:	3328      	adds	r3, #40	@ 0x28
 800a1fe:	2100      	movs	r1, #0
 800a200:	4618      	mov	r0, r3
 800a202:	f002 f91d 	bl	800c440 <RCCEx_PLL3_Config>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a20c:	e006      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a214:	e002      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a216:	bf00      	nop
 800a218:	e000      	b.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a21a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a224:	4b6a      	ldr	r3, [pc, #424]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a228:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a232:	4a67      	ldr	r2, [pc, #412]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a234:	430b      	orrs	r3, r1
 800a236:	6513      	str	r3, [r2, #80]	@ 0x50
 800a238:	e003      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a23e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a24e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a252:	2300      	movs	r3, #0
 800a254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a258:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4313      	orrs	r3, r2
 800a260:	d053      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a26c:	d033      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a26e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a272:	d82c      	bhi.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a274:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a278:	d02f      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a27a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a27e:	d826      	bhi.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a284:	d02b      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a286:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a28a:	d820      	bhi.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a28c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a290:	d012      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a296:	d81a      	bhi.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d022      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a29c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2a0:	d115      	bne.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f002 f816 	bl	800c2dc <RCCEx_PLL2_Config>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2b6:	e015      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2bc:	3328      	adds	r3, #40	@ 0x28
 800a2be:	2101      	movs	r1, #1
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f002 f8bd 	bl	800c440 <RCCEx_PLL3_Config>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2cc:	e00a      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2d4:	e006      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a2d6:	bf00      	nop
 800a2d8:	e004      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10a      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a2ec:	4b38      	ldr	r3, [pc, #224]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2fa:	4a35      	ldr	r2, [pc, #212]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800a300:	e003      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a306:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a31a:	2300      	movs	r3, #0
 800a31c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a320:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a324:	460b      	mov	r3, r1
 800a326:	4313      	orrs	r3, r2
 800a328:	d058      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a336:	d033      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a33c:	d82c      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a342:	d02f      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a348:	d826      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a34a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a34e:	d02b      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a350:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a354:	d820      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a35a:	d012      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a35c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a360:	d81a      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a362:	2b00      	cmp	r3, #0
 800a364:	d022      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a36a:	d115      	bne.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a370:	3308      	adds	r3, #8
 800a372:	2101      	movs	r1, #1
 800a374:	4618      	mov	r0, r3
 800a376:	f001 ffb1 	bl	800c2dc <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a380:	e015      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a386:	3328      	adds	r3, #40	@ 0x28
 800a388:	2101      	movs	r1, #1
 800a38a:	4618      	mov	r0, r3
 800a38c:	f002 f858 	bl	800c440 <RCCEx_PLL3_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a396:	e00a      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a39e:	e006      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a3a0:	bf00      	nop
 800a3a2:	e004      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a3a4:	bf00      	nop
 800a3a6:	e002      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a3a8:	bf00      	nop
 800a3aa:	e000      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10e      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3b6:	4b06      	ldr	r3, [pc, #24]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a3c6:	4a02      	ldr	r2, [pc, #8]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3cc:	e006      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a3ce:	bf00      	nop
 800a3d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a3e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a3f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	d037      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a406:	d00e      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a40c:	d816      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d018      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a416:	d111      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a418:	4bc4      	ldr	r3, [pc, #784]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	4ac3      	ldr	r2, [pc, #780]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a424:	e00f      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42a:	3308      	adds	r3, #8
 800a42c:	2101      	movs	r1, #1
 800a42e:	4618      	mov	r0, r3
 800a430:	f001 ff54 	bl	800c2dc <RCCEx_PLL2_Config>
 800a434:	4603      	mov	r3, r0
 800a436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a43a:	e004      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a442:	e000      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a444:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10a      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a44e:	4bb7      	ldr	r3, [pc, #732]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a452:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a45c:	4ab3      	ldr	r2, [pc, #716]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a45e:	430b      	orrs	r3, r1
 800a460:	6513      	str	r3, [r2, #80]	@ 0x50
 800a462:	e003      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a482:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	d039      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a492:	2b03      	cmp	r3, #3
 800a494:	d81c      	bhi.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a496:	a201      	add	r2, pc, #4	@ (adr r2, 800a49c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a4ad 	.word	0x0800a4ad
 800a4a4:	0800a4bb 	.word	0x0800a4bb
 800a4a8:	0800a4d9 	.word	0x0800a4d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ac:	4b9f      	ldr	r3, [pc, #636]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b0:	4a9e      	ldr	r2, [pc, #632]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4b8:	e00f      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4be:	3308      	adds	r3, #8
 800a4c0:	2102      	movs	r1, #2
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 ff0a 	bl	800c2dc <RCCEx_PLL2_Config>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4ce:	e004      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4d6:	e000      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10a      	bne.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a4e2:	4b92      	ldr	r3, [pc, #584]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e6:	f023 0103 	bic.w	r1, r3, #3
 800a4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4f0:	4a8e      	ldr	r2, [pc, #568]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f2:	430b      	orrs	r3, r1
 800a4f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4f6:	e003      	b.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a50c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a510:	2300      	movs	r3, #0
 800a512:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a516:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4313      	orrs	r3, r2
 800a51e:	f000 8099 	beq.w	800a654 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a522:	4b83      	ldr	r3, [pc, #524]	@ (800a730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a82      	ldr	r2, [pc, #520]	@ (800a730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a52c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a52e:	f7f8 faf9 	bl	8002b24 <HAL_GetTick>
 800a532:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a536:	e00b      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a538:	f7f8 faf4 	bl	8002b24 <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b64      	cmp	r3, #100	@ 0x64
 800a546:	d903      	bls.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a54e:	e005      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a550:	4b77      	ldr	r3, [pc, #476]	@ (800a730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0ed      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a55c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a560:	2b00      	cmp	r3, #0
 800a562:	d173      	bne.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a564:	4b71      	ldr	r3, [pc, #452]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a566:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a570:	4053      	eors	r3, r2
 800a572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a576:	2b00      	cmp	r3, #0
 800a578:	d015      	beq.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a57a:	4b6c      	ldr	r3, [pc, #432]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a57e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a582:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a586:	4b69      	ldr	r3, [pc, #420]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58a:	4a68      	ldr	r2, [pc, #416]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a58c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a590:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a592:	4b66      	ldr	r3, [pc, #408]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a596:	4a65      	ldr	r2, [pc, #404]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a59c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a59e:	4a63      	ldr	r2, [pc, #396]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b2:	d118      	bne.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5b4:	f7f8 fab6 	bl	8002b24 <HAL_GetTick>
 800a5b8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5bc:	e00d      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5be:	f7f8 fab1 	bl	8002b24 <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a5c8:	1ad2      	subs	r2, r2, r3
 800a5ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d903      	bls.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a5d8:	e005      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5da:	4b54      	ldr	r3, [pc, #336]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5de:	f003 0302 	and.w	r3, r3, #2
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d0eb      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d129      	bne.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5fe:	d10e      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a600:	4b4a      	ldr	r3, [pc, #296]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a60c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a610:	091a      	lsrs	r2, r3, #4
 800a612:	4b48      	ldr	r3, [pc, #288]	@ (800a734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a614:	4013      	ands	r3, r2
 800a616:	4a45      	ldr	r2, [pc, #276]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a618:	430b      	orrs	r3, r1
 800a61a:	6113      	str	r3, [r2, #16]
 800a61c:	e005      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a61e:	4b43      	ldr	r3, [pc, #268]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	4a42      	ldr	r2, [pc, #264]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a628:	6113      	str	r3, [r2, #16]
 800a62a:	4b40      	ldr	r3, [pc, #256]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a62c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a63a:	4a3c      	ldr	r2, [pc, #240]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a63c:	430b      	orrs	r3, r1
 800a63e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a640:	e008      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a646:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a64a:	e003      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	f002 0301 	and.w	r3, r2, #1
 800a660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a664:	2300      	movs	r3, #0
 800a666:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a66a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a66e:	460b      	mov	r3, r1
 800a670:	4313      	orrs	r3, r2
 800a672:	f000 808f 	beq.w	800a794 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a67c:	2b28      	cmp	r3, #40	@ 0x28
 800a67e:	d871      	bhi.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a680:	a201      	add	r2, pc, #4	@ (adr r2, 800a688 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a686:	bf00      	nop
 800a688:	0800a76d 	.word	0x0800a76d
 800a68c:	0800a765 	.word	0x0800a765
 800a690:	0800a765 	.word	0x0800a765
 800a694:	0800a765 	.word	0x0800a765
 800a698:	0800a765 	.word	0x0800a765
 800a69c:	0800a765 	.word	0x0800a765
 800a6a0:	0800a765 	.word	0x0800a765
 800a6a4:	0800a765 	.word	0x0800a765
 800a6a8:	0800a739 	.word	0x0800a739
 800a6ac:	0800a765 	.word	0x0800a765
 800a6b0:	0800a765 	.word	0x0800a765
 800a6b4:	0800a765 	.word	0x0800a765
 800a6b8:	0800a765 	.word	0x0800a765
 800a6bc:	0800a765 	.word	0x0800a765
 800a6c0:	0800a765 	.word	0x0800a765
 800a6c4:	0800a765 	.word	0x0800a765
 800a6c8:	0800a74f 	.word	0x0800a74f
 800a6cc:	0800a765 	.word	0x0800a765
 800a6d0:	0800a765 	.word	0x0800a765
 800a6d4:	0800a765 	.word	0x0800a765
 800a6d8:	0800a765 	.word	0x0800a765
 800a6dc:	0800a765 	.word	0x0800a765
 800a6e0:	0800a765 	.word	0x0800a765
 800a6e4:	0800a765 	.word	0x0800a765
 800a6e8:	0800a76d 	.word	0x0800a76d
 800a6ec:	0800a765 	.word	0x0800a765
 800a6f0:	0800a765 	.word	0x0800a765
 800a6f4:	0800a765 	.word	0x0800a765
 800a6f8:	0800a765 	.word	0x0800a765
 800a6fc:	0800a765 	.word	0x0800a765
 800a700:	0800a765 	.word	0x0800a765
 800a704:	0800a765 	.word	0x0800a765
 800a708:	0800a76d 	.word	0x0800a76d
 800a70c:	0800a765 	.word	0x0800a765
 800a710:	0800a765 	.word	0x0800a765
 800a714:	0800a765 	.word	0x0800a765
 800a718:	0800a765 	.word	0x0800a765
 800a71c:	0800a765 	.word	0x0800a765
 800a720:	0800a765 	.word	0x0800a765
 800a724:	0800a765 	.word	0x0800a765
 800a728:	0800a76d 	.word	0x0800a76d
 800a72c:	58024400 	.word	0x58024400
 800a730:	58024800 	.word	0x58024800
 800a734:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73c:	3308      	adds	r3, #8
 800a73e:	2101      	movs	r1, #1
 800a740:	4618      	mov	r0, r3
 800a742:	f001 fdcb 	bl	800c2dc <RCCEx_PLL2_Config>
 800a746:	4603      	mov	r3, r0
 800a748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a74c:	e00f      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a752:	3328      	adds	r3, #40	@ 0x28
 800a754:	2101      	movs	r1, #1
 800a756:	4618      	mov	r0, r3
 800a758:	f001 fe72 	bl	800c440 <RCCEx_PLL3_Config>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a762:	e004      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a76a:	e000      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10a      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a776:	4bbf      	ldr	r3, [pc, #764]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a784:	4abb      	ldr	r2, [pc, #748]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a786:	430b      	orrs	r3, r1
 800a788:	6553      	str	r3, [r2, #84]	@ 0x54
 800a78a:	e003      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f002 0302 	and.w	r3, r2, #2
 800a7a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	d041      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ba:	2b05      	cmp	r3, #5
 800a7bc:	d824      	bhi.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a7be:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c4:	0800a811 	.word	0x0800a811
 800a7c8:	0800a7dd 	.word	0x0800a7dd
 800a7cc:	0800a7f3 	.word	0x0800a7f3
 800a7d0:	0800a811 	.word	0x0800a811
 800a7d4:	0800a811 	.word	0x0800a811
 800a7d8:	0800a811 	.word	0x0800a811
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fd79 	bl	800c2dc <RCCEx_PLL2_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a7f0:	e00f      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f6:	3328      	adds	r3, #40	@ 0x28
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 fe20 	bl	800c440 <RCCEx_PLL3_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a806:	e004      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a80e:	e000      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a810:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10a      	bne.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a81a:	4b96      	ldr	r3, [pc, #600]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a81e:	f023 0107 	bic.w	r1, r3, #7
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a828:	4a92      	ldr	r2, [pc, #584]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a82a:	430b      	orrs	r3, r1
 800a82c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a82e:	e003      	b.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a834:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	f002 0304 	and.w	r3, r2, #4
 800a844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a848:	2300      	movs	r3, #0
 800a84a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a84e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a852:	460b      	mov	r3, r1
 800a854:	4313      	orrs	r3, r2
 800a856:	d044      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a860:	2b05      	cmp	r3, #5
 800a862:	d825      	bhi.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a864:	a201      	add	r2, pc, #4	@ (adr r2, 800a86c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86a:	bf00      	nop
 800a86c:	0800a8b9 	.word	0x0800a8b9
 800a870:	0800a885 	.word	0x0800a885
 800a874:	0800a89b 	.word	0x0800a89b
 800a878:	0800a8b9 	.word	0x0800a8b9
 800a87c:	0800a8b9 	.word	0x0800a8b9
 800a880:	0800a8b9 	.word	0x0800a8b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a888:	3308      	adds	r3, #8
 800a88a:	2101      	movs	r1, #1
 800a88c:	4618      	mov	r0, r3
 800a88e:	f001 fd25 	bl	800c2dc <RCCEx_PLL2_Config>
 800a892:	4603      	mov	r3, r0
 800a894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a898:	e00f      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a89e:	3328      	adds	r3, #40	@ 0x28
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fdcc 	bl	800c440 <RCCEx_PLL3_Config>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8ae:	e004      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8b6:	e000      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a8b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10b      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8c2:	4b6c      	ldr	r3, [pc, #432]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8c6:	f023 0107 	bic.w	r1, r3, #7
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d2:	4a68      	ldr	r2, [pc, #416]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8d8:	e003      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f002 0320 	and.w	r3, r2, #32
 800a8ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a8f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4313      	orrs	r3, r2
 800a900:	d055      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a90a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a90e:	d033      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a914:	d82c      	bhi.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a91a:	d02f      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a91c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a920:	d826      	bhi.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a926:	d02b      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a928:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a92c:	d820      	bhi.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a92e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a932:	d012      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a938:	d81a      	bhi.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d022      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a93e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a942:	d115      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a948:	3308      	adds	r3, #8
 800a94a:	2100      	movs	r1, #0
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 fcc5 	bl	800c2dc <RCCEx_PLL2_Config>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a958:	e015      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95e:	3328      	adds	r3, #40	@ 0x28
 800a960:	2102      	movs	r1, #2
 800a962:	4618      	mov	r0, r3
 800a964:	f001 fd6c 	bl	800c440 <RCCEx_PLL3_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a96e:	e00a      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a976:	e006      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a978:	bf00      	nop
 800a97a:	e004      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a97c:	bf00      	nop
 800a97e:	e002      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a980:	bf00      	nop
 800a982:	e000      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a984:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a986:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10b      	bne.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a98e:	4b39      	ldr	r3, [pc, #228]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a992:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a99e:	4a35      	ldr	r2, [pc, #212]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9a4:	e003      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a9ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	d058      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a9da:	d033      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a9dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a9e0:	d82c      	bhi.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9e6:	d02f      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a9e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ec:	d826      	bhi.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a9ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9f2:	d02b      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a9f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9f8:	d820      	bhi.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a9fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9fe:	d012      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800aa00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa04:	d81a      	bhi.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d022      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aa0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa0e:	d115      	bne.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa14:	3308      	adds	r3, #8
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f001 fc5f 	bl	800c2dc <RCCEx_PLL2_Config>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa24:	e015      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2a:	3328      	adds	r3, #40	@ 0x28
 800aa2c:	2102      	movs	r1, #2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f001 fd06 	bl	800c440 <RCCEx_PLL3_Config>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa3a:	e00a      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa42:	e006      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aa44:	bf00      	nop
 800aa46:	e004      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aa48:	bf00      	nop
 800aa4a:	e002      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aa4c:	bf00      	nop
 800aa4e:	e000      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aa50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10e      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa5a:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa5e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa6a:	4a02      	ldr	r2, [pc, #8]	@ (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa70:	e006      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800aa72:	bf00      	nop
 800aa74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aa8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa90:	2300      	movs	r3, #0
 800aa92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	d055      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aaa8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aaac:	d033      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800aaae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aab2:	d82c      	bhi.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aab8:	d02f      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800aaba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aabe:	d826      	bhi.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aac0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aac4:	d02b      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800aac6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aaca:	d820      	bhi.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aacc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aad0:	d012      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800aad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aad6:	d81a      	bhi.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d022      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800aadc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aae0:	d115      	bne.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae6:	3308      	adds	r3, #8
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 fbf6 	bl	800c2dc <RCCEx_PLL2_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aaf6:	e015      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aafc:	3328      	adds	r3, #40	@ 0x28
 800aafe:	2102      	movs	r1, #2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f001 fc9d 	bl	800c440 <RCCEx_PLL3_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab0c:	e00a      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab14:	e006      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab16:	bf00      	nop
 800ab18:	e004      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab1a:	bf00      	nop
 800ab1c:	e002      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab1e:	bf00      	nop
 800ab20:	e000      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10b      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab2c:	4ba0      	ldr	r3, [pc, #640]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab30:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab3c:	4a9c      	ldr	r2, [pc, #624]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab3e:	430b      	orrs	r3, r1
 800ab40:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab42:	e003      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	f002 0308 	and.w	r3, r2, #8
 800ab58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ab66:	460b      	mov	r3, r1
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	d01e      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab78:	d10c      	bne.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7e:	3328      	adds	r3, #40	@ 0x28
 800ab80:	2102      	movs	r1, #2
 800ab82:	4618      	mov	r0, r3
 800ab84:	f001 fc5c 	bl	800c440 <RCCEx_PLL3_Config>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ab94:	4b86      	ldr	r3, [pc, #536]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab98:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aba4:	4a82      	ldr	r2, [pc, #520]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aba6:	430b      	orrs	r3, r1
 800aba8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f002 0310 	and.w	r3, r2, #16
 800abb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abba:	2300      	movs	r3, #0
 800abbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abc0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800abc4:	460b      	mov	r3, r1
 800abc6:	4313      	orrs	r3, r2
 800abc8:	d01e      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abd6:	d10c      	bne.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abdc:	3328      	adds	r3, #40	@ 0x28
 800abde:	2102      	movs	r1, #2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f001 fc2d 	bl	800c440 <RCCEx_PLL3_Config>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abf2:	4b6f      	ldr	r3, [pc, #444]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac02:	4a6b      	ldr	r2, [pc, #428]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ac14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac16:	2300      	movs	r3, #0
 800ac18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4313      	orrs	r3, r2
 800ac22:	d03e      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac30:	d022      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ac32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac36:	d81b      	bhi.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ac3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac40:	d00b      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ac42:	e015      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac48:	3308      	adds	r3, #8
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f001 fb45 	bl	800c2dc <RCCEx_PLL2_Config>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac58:	e00f      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac5e:	3328      	adds	r3, #40	@ 0x28
 800ac60:	2102      	movs	r1, #2
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 fbec 	bl	800c440 <RCCEx_PLL3_Config>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac6e:	e004      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac76:	e000      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ac78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10b      	bne.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac82:	4b4b      	ldr	r3, [pc, #300]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac92:	4a47      	ldr	r2, [pc, #284]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac98:	e003      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800acae:	673b      	str	r3, [r7, #112]	@ 0x70
 800acb0:	2300      	movs	r3, #0
 800acb2:	677b      	str	r3, [r7, #116]	@ 0x74
 800acb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800acb8:	460b      	mov	r3, r1
 800acba:	4313      	orrs	r3, r2
 800acbc:	d03b      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acca:	d01f      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800accc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acd0:	d818      	bhi.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800acd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acd6:	d003      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800acd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acdc:	d007      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800acde:	e011      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace0:	4b33      	ldr	r3, [pc, #204]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ace2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace4:	4a32      	ldr	r2, [pc, #200]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ace6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800acec:	e00f      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acf2:	3328      	adds	r3, #40	@ 0x28
 800acf4:	2101      	movs	r1, #1
 800acf6:	4618      	mov	r0, r3
 800acf8:	f001 fba2 	bl	800c440 <RCCEx_PLL3_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad02:	e004      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad0a:	e000      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ad0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad16:	4b26      	ldr	r3, [pc, #152]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad26:	4a22      	ldr	r2, [pc, #136]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad28:	430b      	orrs	r3, r1
 800ad2a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad2c:	e003      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ad42:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad44:	2300      	movs	r3, #0
 800ad46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	d034      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ad52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d003      	beq.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ad5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad60:	d007      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ad62:	e011      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad64:	4b12      	ldr	r3, [pc, #72]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad68:	4a11      	ldr	r2, [pc, #68]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad70:	e00e      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad76:	3308      	adds	r3, #8
 800ad78:	2102      	movs	r1, #2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f001 faae 	bl	800c2dc <RCCEx_PLL2_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad86:	e003      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10d      	bne.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad98:	4b05      	ldr	r3, [pc, #20]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ada6:	4a02      	ldr	r2, [pc, #8]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ada8:	430b      	orrs	r3, r1
 800adaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800adac:	e006      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800adae:	bf00      	nop
 800adb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800adc8:	663b      	str	r3, [r7, #96]	@ 0x60
 800adca:	2300      	movs	r3, #0
 800adcc:	667b      	str	r3, [r7, #100]	@ 0x64
 800adce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800add2:	460b      	mov	r3, r1
 800add4:	4313      	orrs	r3, r2
 800add6:	d00c      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800add8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800addc:	3328      	adds	r3, #40	@ 0x28
 800adde:	2102      	movs	r1, #2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fb2d 	bl	800c440 <RCCEx_PLL3_Config>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800adfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae00:	2300      	movs	r3, #0
 800ae02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	d036      	beq.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae18:	d018      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ae1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae1e:	d811      	bhi.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ae20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae24:	d014      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ae26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae2a:	d80b      	bhi.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d011      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ae30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae34:	d106      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae36:	4bb7      	ldr	r3, [pc, #732]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3a:	4ab6      	ldr	r2, [pc, #728]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ae42:	e008      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae4a:	e004      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ae4c:	bf00      	nop
 800ae4e:	e002      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ae50:	bf00      	nop
 800ae52:	e000      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ae54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10a      	bne.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae5e:	4bad      	ldr	r3, [pc, #692]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae6c:	4aa9      	ldr	r2, [pc, #676]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae6e:	430b      	orrs	r3, r1
 800ae70:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae72:	e003      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ae88:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ae92:	460b      	mov	r3, r1
 800ae94:	4313      	orrs	r3, r2
 800ae96:	d009      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae98:	4b9e      	ldr	r3, [pc, #632]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aea6:	4a9b      	ldr	r2, [pc, #620]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aea8:	430b      	orrs	r3, r1
 800aeaa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aeb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aeba:	2300      	movs	r3, #0
 800aebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aebe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aec2:	460b      	mov	r3, r1
 800aec4:	4313      	orrs	r3, r2
 800aec6:	d009      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aec8:	4b92      	ldr	r3, [pc, #584]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aeca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aecc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aed6:	4a8f      	ldr	r2, [pc, #572]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aed8:	430b      	orrs	r3, r1
 800aeda:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aee8:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeea:	2300      	movs	r3, #0
 800aeec:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aef2:	460b      	mov	r3, r1
 800aef4:	4313      	orrs	r3, r2
 800aef6:	d00e      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aef8:	4b86      	ldr	r3, [pc, #536]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	4a85      	ldr	r2, [pc, #532]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aefe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af02:	6113      	str	r3, [r2, #16]
 800af04:	4b83      	ldr	r3, [pc, #524]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af06:	6919      	ldr	r1, [r3, #16]
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af10:	4a80      	ldr	r2, [pc, #512]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af12:	430b      	orrs	r3, r1
 800af14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800af22:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af24:	2300      	movs	r3, #0
 800af26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800af2c:	460b      	mov	r3, r1
 800af2e:	4313      	orrs	r3, r2
 800af30:	d009      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af32:	4b78      	ldr	r3, [pc, #480]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af40:	4a74      	ldr	r2, [pc, #464]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af42:	430b      	orrs	r3, r1
 800af44:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800af52:	633b      	str	r3, [r7, #48]	@ 0x30
 800af54:	2300      	movs	r3, #0
 800af56:	637b      	str	r3, [r7, #52]	@ 0x34
 800af58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800af5c:	460b      	mov	r3, r1
 800af5e:	4313      	orrs	r3, r2
 800af60:	d00a      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af62:	4b6c      	ldr	r3, [pc, #432]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af72:	4a68      	ldr	r2, [pc, #416]	@ (800b114 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af74:	430b      	orrs	r3, r1
 800af76:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800af78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	2100      	movs	r1, #0
 800af82:	62b9      	str	r1, [r7, #40]	@ 0x28
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800af8e:	460b      	mov	r3, r1
 800af90:	4313      	orrs	r3, r2
 800af92:	d011      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af98:	3308      	adds	r3, #8
 800af9a:	2100      	movs	r1, #0
 800af9c:	4618      	mov	r0, r3
 800af9e:	f001 f99d 	bl	800c2dc <RCCEx_PLL2_Config>
 800afa2:	4603      	mov	r3, r0
 800afa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800afa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800afb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc0:	2100      	movs	r1, #0
 800afc2:	6239      	str	r1, [r7, #32]
 800afc4:	f003 0302 	and.w	r3, r3, #2
 800afc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800afca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800afce:	460b      	mov	r3, r1
 800afd0:	4313      	orrs	r3, r2
 800afd2:	d011      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd8:	3308      	adds	r3, #8
 800afda:	2101      	movs	r1, #1
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 f97d 	bl	800c2dc <RCCEx_PLL2_Config>
 800afe2:	4603      	mov	r3, r0
 800afe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800afe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	2100      	movs	r1, #0
 800b002:	61b9      	str	r1, [r7, #24]
 800b004:	f003 0304 	and.w	r3, r3, #4
 800b008:	61fb      	str	r3, [r7, #28]
 800b00a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b00e:	460b      	mov	r3, r1
 800b010:	4313      	orrs	r3, r2
 800b012:	d011      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b018:	3308      	adds	r3, #8
 800b01a:	2102      	movs	r1, #2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f001 f95d 	bl	800c2dc <RCCEx_PLL2_Config>
 800b022:	4603      	mov	r3, r0
 800b024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	2100      	movs	r1, #0
 800b042:	6139      	str	r1, [r7, #16]
 800b044:	f003 0308 	and.w	r3, r3, #8
 800b048:	617b      	str	r3, [r7, #20]
 800b04a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b04e:	460b      	mov	r3, r1
 800b050:	4313      	orrs	r3, r2
 800b052:	d011      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b058:	3328      	adds	r3, #40	@ 0x28
 800b05a:	2100      	movs	r1, #0
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 f9ef 	bl	800c440 <RCCEx_PLL3_Config>
 800b062:	4603      	mov	r3, r0
 800b064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	2100      	movs	r1, #0
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b08e:	460b      	mov	r3, r1
 800b090:	4313      	orrs	r3, r2
 800b092:	d011      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b098:	3328      	adds	r3, #40	@ 0x28
 800b09a:	2101      	movs	r1, #1
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 f9cf 	bl	800c440 <RCCEx_PLL3_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6039      	str	r1, [r7, #0]
 800b0c4:	f003 0320 	and.w	r3, r3, #32
 800b0c8:	607b      	str	r3, [r7, #4]
 800b0ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	d011      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d8:	3328      	adds	r3, #40	@ 0x28
 800b0da:	2102      	movs	r1, #2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f001 f9af 	bl	800c440 <RCCEx_PLL3_Config>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b0f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	e000      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
}
 800b106:	4618      	mov	r0, r3
 800b108:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b10c:	46bd      	mov	sp, r7
 800b10e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b112:	bf00      	nop
 800b114:	58024400 	.word	0x58024400

0800b118 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b090      	sub	sp, #64	@ 0x40
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b126:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b12a:	430b      	orrs	r3, r1
 800b12c:	f040 8094 	bne.w	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b130:	4b9b      	ldr	r3, [pc, #620]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b134:	f003 0307 	and.w	r3, r3, #7
 800b138:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	f200 8087 	bhi.w	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b142:	a201      	add	r2, pc, #4	@ (adr r2, 800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b148:	0800b15d 	.word	0x0800b15d
 800b14c:	0800b185 	.word	0x0800b185
 800b150:	0800b1ad 	.word	0x0800b1ad
 800b154:	0800b249 	.word	0x0800b249
 800b158:	0800b1d5 	.word	0x0800b1d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b15c:	4b90      	ldr	r3, [pc, #576]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b168:	d108      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b16a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 ff62 	bl	800c038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b178:	f000 bc93 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b180:	f000 bc8f 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b184:	4b86      	ldr	r3, [pc, #536]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b18c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b190:	d108      	bne.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b192:	f107 0318 	add.w	r3, r7, #24
 800b196:	4618      	mov	r0, r3
 800b198:	f000 fca6 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a0:	f000 bc7f 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1a8:	f000 bc7b 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1ac:	4b7c      	ldr	r3, [pc, #496]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1b8:	d108      	bne.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ba:	f107 030c 	add.w	r3, r7, #12
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 fde6 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c8:	f000 bc6b 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d0:	f000 bc67 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1d4:	4b72      	ldr	r3, [pc, #456]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1de:	4b70      	ldr	r3, [pc, #448]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d10c      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d109      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1f0:	4b6b      	ldr	r3, [pc, #428]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	08db      	lsrs	r3, r3, #3
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	4a6a      	ldr	r2, [pc, #424]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b202:	e01f      	b.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b204:	4b66      	ldr	r3, [pc, #408]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b20c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b210:	d106      	bne.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b218:	d102      	bne.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b21a:	4b63      	ldr	r3, [pc, #396]	@ (800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b21e:	e011      	b.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b220:	4b5f      	ldr	r3, [pc, #380]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b22c:	d106      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b234:	d102      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b236:	4b5d      	ldr	r3, [pc, #372]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b23a:	e003      	b.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b240:	f000 bc2f 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b244:	f000 bc2d 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b248:	4b59      	ldr	r3, [pc, #356]	@ (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24c:	f000 bc29 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b254:	f000 bc25 	b.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b25c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b260:	430b      	orrs	r3, r1
 800b262:	f040 80a7 	bne.w	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b266:	4b4e      	ldr	r3, [pc, #312]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b26a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b26e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b276:	d054      	beq.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b27e:	f200 808b 	bhi.w	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b288:	f000 8083 	beq.w	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b292:	f200 8081 	bhi.w	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b29c:	d02f      	beq.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b2a4:	d878      	bhi.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2b2:	d012      	beq.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b2b4:	e070      	b.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2b6:	4b3a      	ldr	r3, [pc, #232]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2c2:	d107      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 feb5 	bl	800c038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d2:	e3e6      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d8:	e3e3      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2da:	4b31      	ldr	r3, [pc, #196]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2e6:	d107      	bne.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2e8:	f107 0318 	add.w	r3, r7, #24
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 fbfb 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f6:	e3d4      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2fc:	e3d1      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2fe:	4b28      	ldr	r3, [pc, #160]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b30a:	d107      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b30c:	f107 030c 	add.w	r3, r7, #12
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fd3d 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b31a:	e3c2      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b320:	e3bf      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b322:	4b1f      	ldr	r3, [pc, #124]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b32a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b32c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b04      	cmp	r3, #4
 800b336:	d10c      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b33e:	4b18      	ldr	r3, [pc, #96]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	08db      	lsrs	r3, r3, #3
 800b344:	f003 0303 	and.w	r3, r3, #3
 800b348:	4a16      	ldr	r2, [pc, #88]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b34a:	fa22 f303 	lsr.w	r3, r2, r3
 800b34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b350:	e01e      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b352:	4b13      	ldr	r3, [pc, #76]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b35a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b35e:	d106      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b366:	d102      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b368:	4b0f      	ldr	r3, [pc, #60]	@ (800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b36c:	e010      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b36e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b37a:	d106      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b382:	d102      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b384:	4b09      	ldr	r3, [pc, #36]	@ (800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b388:	e002      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b38e:	e388      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b390:	e387      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b392:	4b07      	ldr	r3, [pc, #28]	@ (800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b396:	e384      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b39c:	e381      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b39e:	bf00      	nop
 800b3a0:	58024400 	.word	0x58024400
 800b3a4:	03d09000 	.word	0x03d09000
 800b3a8:	003d0900 	.word	0x003d0900
 800b3ac:	016e3600 	.word	0x016e3600
 800b3b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3b8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	f040 809c 	bne.w	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b3c2:	4b9e      	ldr	r3, [pc, #632]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3c6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b3ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3d2:	d054      	beq.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b3da:	f200 808b 	bhi.w	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b3e4:	f000 8083 	beq.w	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b3ee:	f200 8081 	bhi.w	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3f8:	d02f      	beq.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b400:	d878      	bhi.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b40e:	d012      	beq.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b410:	e070      	b.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b412:	4b8a      	ldr	r3, [pc, #552]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b41a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b41e:	d107      	bne.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fe07 	bl	800c038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b42e:	e338      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b434:	e335      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b436:	4b81      	ldr	r3, [pc, #516]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b43e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b442:	d107      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b444:	f107 0318 	add.w	r3, r7, #24
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fb4d 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b452:	e326      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b458:	e323      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b45a:	4b78      	ldr	r3, [pc, #480]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b466:	d107      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b468:	f107 030c 	add.w	r3, r7, #12
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fc8f 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b476:	e314      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b47c:	e311      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b47e:	4b6f      	ldr	r3, [pc, #444]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b482:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b486:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b488:	4b6c      	ldr	r3, [pc, #432]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b04      	cmp	r3, #4
 800b492:	d10c      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b49a:	4b68      	ldr	r3, [pc, #416]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	08db      	lsrs	r3, r3, #3
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	4a66      	ldr	r2, [pc, #408]	@ (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b4a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ac:	e01e      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4ae:	4b63      	ldr	r3, [pc, #396]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4ba:	d106      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4c2:	d102      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4c4:	4b5f      	ldr	r3, [pc, #380]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4c8:	e010      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ca:	4b5c      	ldr	r3, [pc, #368]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4d6:	d106      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4de:	d102      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4e0:	4b59      	ldr	r3, [pc, #356]	@ (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4e4:	e002      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4ea:	e2da      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4ec:	e2d9      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4ee:	4b57      	ldr	r3, [pc, #348]	@ (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f2:	e2d6      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f8:	e2d3      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b4fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b502:	430b      	orrs	r3, r1
 800b504:	f040 80a7 	bne.w	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b508:	4b4c      	ldr	r3, [pc, #304]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b50a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b50c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b510:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b518:	d055      	beq.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b520:	f200 8096 	bhi.w	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b526:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b52a:	f000 8084 	beq.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b530:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b534:	f200 808c 	bhi.w	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b53e:	d030      	beq.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b546:	f200 8083 	bhi.w	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d004      	beq.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b556:	d012      	beq.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b558:	e07a      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b55a:	4b38      	ldr	r3, [pc, #224]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b566:	d107      	bne.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fd63 	bl	800c038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b576:	e294      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b57c:	e291      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b57e:	4b2f      	ldr	r3, [pc, #188]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b58a:	d107      	bne.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b58c:	f107 0318 	add.w	r3, r7, #24
 800b590:	4618      	mov	r0, r3
 800b592:	f000 faa9 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b59a:	e282      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a0:	e27f      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5a2:	4b26      	ldr	r3, [pc, #152]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ae:	d107      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5b0:	f107 030c 	add.w	r3, r7, #12
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f000 fbeb 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5be:	e270      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c4:	e26d      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d10c      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d109      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5e2:	4b16      	ldr	r3, [pc, #88]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	08db      	lsrs	r3, r3, #3
 800b5e8:	f003 0303 	and.w	r3, r3, #3
 800b5ec:	4a14      	ldr	r2, [pc, #80]	@ (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5f4:	e01e      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5f6:	4b11      	ldr	r3, [pc, #68]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b602:	d106      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b60a:	d102      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b60c:	4b0d      	ldr	r3, [pc, #52]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b610:	e010      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b612:	4b0a      	ldr	r3, [pc, #40]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b61a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b61e:	d106      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b626:	d102      	bne.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b628:	4b07      	ldr	r3, [pc, #28]	@ (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b62c:	e002      	b.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b632:	e236      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b634:	e235      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b636:	4b05      	ldr	r3, [pc, #20]	@ (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63a:	e232      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b63c:	58024400 	.word	0x58024400
 800b640:	03d09000 	.word	0x03d09000
 800b644:	003d0900 	.word	0x003d0900
 800b648:	016e3600 	.word	0x016e3600
 800b64c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b654:	e225      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b65a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b65e:	430b      	orrs	r3, r1
 800b660:	f040 8085 	bne.w	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b664:	4b9c      	ldr	r3, [pc, #624]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b668:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b66c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b674:	d06b      	beq.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b67c:	d874      	bhi.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b680:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b684:	d056      	beq.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b688:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b68c:	d86c      	bhi.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b690:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b694:	d03b      	beq.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b698:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b69c:	d864      	bhi.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6a4:	d021      	beq.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6ac:	d85c      	bhi.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d004      	beq.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6ba:	d004      	beq.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b6bc:	e054      	b.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b6be:	f7fe fb5f 	bl	8009d80 <HAL_RCC_GetPCLK1Freq>
 800b6c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b6c4:	e1ed      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6c6:	4b84      	ldr	r3, [pc, #528]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6d2:	d107      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6d4:	f107 0318 	add.w	r3, r7, #24
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fa05 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e2:	e1de      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6e8:	e1db      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6ea:	4b7b      	ldr	r3, [pc, #492]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6f6:	d107      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 fb47 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b706:	e1cc      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b708:	2300      	movs	r3, #0
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b70c:	e1c9      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b70e:	4b72      	ldr	r3, [pc, #456]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0304 	and.w	r3, r3, #4
 800b716:	2b04      	cmp	r3, #4
 800b718:	d109      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71a:	4b6f      	ldr	r3, [pc, #444]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	08db      	lsrs	r3, r3, #3
 800b720:	f003 0303 	and.w	r3, r3, #3
 800b724:	4a6d      	ldr	r2, [pc, #436]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b726:	fa22 f303 	lsr.w	r3, r2, r3
 800b72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b72c:	e1b9      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b732:	e1b6      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b734:	4b68      	ldr	r3, [pc, #416]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b73c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b740:	d102      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b742:	4b67      	ldr	r3, [pc, #412]	@ (800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b746:	e1ac      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b74c:	e1a9      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b74e:	4b62      	ldr	r3, [pc, #392]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b75a:	d102      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b75c:	4b61      	ldr	r3, [pc, #388]	@ (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b760:	e19f      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b762:	2300      	movs	r3, #0
 800b764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b766:	e19c      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b768:	2300      	movs	r3, #0
 800b76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b76c:	e199      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b772:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b776:	430b      	orrs	r3, r1
 800b778:	d173      	bne.n	800b862 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b77a:	4b57      	ldr	r3, [pc, #348]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b77c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b77e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b782:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b78a:	d02f      	beq.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b792:	d863      	bhi.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	2b00      	cmp	r3, #0
 800b798:	d004      	beq.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7a0:	d012      	beq.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b7a2:	e05b      	b.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7a4:	4b4c      	ldr	r3, [pc, #304]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7b0:	d107      	bne.n	800b7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7b2:	f107 0318 	add.w	r3, r7, #24
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f000 f996 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7c0:	e16f      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7c6:	e16c      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7c8:	4b43      	ldr	r3, [pc, #268]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7d4:	d107      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7d6:	f107 030c 	add.w	r3, r7, #12
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 fad8 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e4:	e15d      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7ea:	e15a      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b7ec:	4b3a      	ldr	r3, [pc, #232]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b7f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b7f6:	4b38      	ldr	r3, [pc, #224]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f003 0304 	and.w	r3, r3, #4
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d10c      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b808:	4b33      	ldr	r3, [pc, #204]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	08db      	lsrs	r3, r3, #3
 800b80e:	f003 0303 	and.w	r3, r3, #3
 800b812:	4a32      	ldr	r2, [pc, #200]	@ (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b814:	fa22 f303 	lsr.w	r3, r2, r3
 800b818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b81a:	e01e      	b.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b81c:	4b2e      	ldr	r3, [pc, #184]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b828:	d106      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b830:	d102      	bne.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b832:	4b2b      	ldr	r3, [pc, #172]	@ (800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b836:	e010      	b.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b838:	4b27      	ldr	r3, [pc, #156]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b844:	d106      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b84c:	d102      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b84e:	4b25      	ldr	r3, [pc, #148]	@ (800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b852:	e002      	b.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b858:	e123      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b85a:	e122      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b860:	e11f      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b866:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b86a:	430b      	orrs	r3, r1
 800b86c:	d13c      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b86e:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b876:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d004      	beq.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b884:	d012      	beq.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b886:	e023      	b.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b888:	4b13      	ldr	r3, [pc, #76]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b894:	d107      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fbcc 	bl	800c038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8a4:	e0fd      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8aa:	e0fa      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8b8:	d107      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ba:	f107 0318 	add.w	r3, r7, #24
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 f912 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c8:	e0eb      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ce:	e0e8      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8d4:	e0e5      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8d6:	bf00      	nop
 800b8d8:	58024400 	.word	0x58024400
 800b8dc:	03d09000 	.word	0x03d09000
 800b8e0:	003d0900 	.word	0x003d0900
 800b8e4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	f040 8085 	bne.w	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b8f6:	4b6d      	ldr	r3, [pc, #436]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b8fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b906:	d06b      	beq.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b90e:	d874      	bhi.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b916:	d056      	beq.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b91a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b91e:	d86c      	bhi.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b926:	d03b      	beq.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b92e:	d864      	bhi.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b936:	d021      	beq.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b93e:	d85c      	bhi.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b942:	2b00      	cmp	r3, #0
 800b944:	d004      	beq.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b94c:	d004      	beq.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b94e:	e054      	b.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b950:	f000 f8b4 	bl	800babc <HAL_RCCEx_GetD3PCLK1Freq>
 800b954:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b956:	e0a4      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b958:	4b54      	ldr	r3, [pc, #336]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b960:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b964:	d107      	bne.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b966:	f107 0318 	add.w	r3, r7, #24
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 f8bc 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b974:	e095      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b97a:	e092      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b97c:	4b4b      	ldr	r3, [pc, #300]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b988:	d107      	bne.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b98a:	f107 030c 	add.w	r3, r7, #12
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 f9fe 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b998:	e083      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b99e:	e080      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b9a0:	4b42      	ldr	r3, [pc, #264]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b04      	cmp	r3, #4
 800b9aa:	d109      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9ac:	4b3f      	ldr	r3, [pc, #252]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	08db      	lsrs	r3, r3, #3
 800b9b2:	f003 0303 	and.w	r3, r3, #3
 800b9b6:	4a3e      	ldr	r2, [pc, #248]	@ (800bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b9b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9be:	e070      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9c4:	e06d      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9c6:	4b39      	ldr	r3, [pc, #228]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9d2:	d102      	bne.n	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b9d4:	4b37      	ldr	r3, [pc, #220]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d8:	e063      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9de:	e060      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9e0:	4b32      	ldr	r3, [pc, #200]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9ec:	d102      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b9ee:	4b32      	ldr	r3, [pc, #200]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9f2:	e056      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9f8:	e053      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9fe:	e050      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba04:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	d148      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba0c:	4b27      	ldr	r3, [pc, #156]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba14:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba1c:	d02a      	beq.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba24:	d838      	bhi.n	800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ba26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ba2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba32:	d00d      	beq.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ba34:	e030      	b.n	800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba36:	4b1d      	ldr	r3, [pc, #116]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba42:	d102      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ba44:	4b1c      	ldr	r3, [pc, #112]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba48:	e02b      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba4e:	e028      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba50:	4b16      	ldr	r3, [pc, #88]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba5c:	d107      	bne.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 fae8 	bl	800c038 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba6c:	e019      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba72:	e016      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba74:	4b0d      	ldr	r3, [pc, #52]	@ (800baac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba80:	d107      	bne.n	800ba92 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba82:	f107 0318 	add.w	r3, r7, #24
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 f82e 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba90:	e007      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba96:	e004      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba9c:	e001      	b.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800baa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3740      	adds	r7, #64	@ 0x40
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	58024400 	.word	0x58024400
 800bab0:	03d09000 	.word	0x03d09000
 800bab4:	003d0900 	.word	0x003d0900
 800bab8:	016e3600 	.word	0x016e3600

0800babc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bac0:	f7fe f92e 	bl	8009d20 <HAL_RCC_GetHCLKFreq>
 800bac4:	4602      	mov	r2, r0
 800bac6:	4b06      	ldr	r3, [pc, #24]	@ (800bae0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	091b      	lsrs	r3, r3, #4
 800bacc:	f003 0307 	and.w	r3, r3, #7
 800bad0:	4904      	ldr	r1, [pc, #16]	@ (800bae4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bad2:	5ccb      	ldrb	r3, [r1, r3]
 800bad4:	f003 031f 	and.w	r3, r3, #31
 800bad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800badc:	4618      	mov	r0, r3
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	58024400 	.word	0x58024400
 800bae4:	0801244c 	.word	0x0801244c

0800bae8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bae8:	b480      	push	{r7}
 800baea:	b089      	sub	sp, #36	@ 0x24
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800baf0:	4ba1      	ldr	r3, [pc, #644]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bafa:	4b9f      	ldr	r3, [pc, #636]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafe:	0b1b      	lsrs	r3, r3, #12
 800bb00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb06:	4b9c      	ldr	r3, [pc, #624]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0a:	091b      	lsrs	r3, r3, #4
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bb12:	4b99      	ldr	r3, [pc, #612]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb16:	08db      	lsrs	r3, r3, #3
 800bb18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	fb02 f303 	mul.w	r3, r2, r3
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 8111 	beq.w	800bd58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	f000 8083 	beq.w	800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	f200 80a1 	bhi.w	800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d056      	beq.n	800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb52:	e099      	b.n	800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb54:	4b88      	ldr	r3, [pc, #544]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0320 	and.w	r3, r3, #32
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d02d      	beq.n	800bbbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb60:	4b85      	ldr	r3, [pc, #532]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	08db      	lsrs	r3, r3, #3
 800bb66:	f003 0303 	and.w	r3, r3, #3
 800bb6a:	4a84      	ldr	r2, [pc, #528]	@ (800bd7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb6c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	ee07 3a90 	vmov	s15, r3
 800bb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb8a:	4b7b      	ldr	r3, [pc, #492]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bbba:	e087      	b.n	800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bd84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbce:	4b6a      	ldr	r3, [pc, #424]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbe2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbfe:	e065      	b.n	800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	ee07 3a90 	vmov	s15, r3
 800bc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bd88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc12:	4b59      	ldr	r3, [pc, #356]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc42:	e043      	b.n	800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bd8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc56:	4b48      	ldr	r3, [pc, #288]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc86:	e021      	b.n	800bccc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bd88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9a:	4b37      	ldr	r3, [pc, #220]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bccc:	4b2a      	ldr	r3, [pc, #168]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd0:	0a5b      	lsrs	r3, r3, #9
 800bcd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bce6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcf2:	ee17 2a90 	vmov	r2, s15
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bcfa:	4b1f      	ldr	r3, [pc, #124]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfe:	0c1b      	lsrs	r3, r3, #16
 800bd00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd14:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd20:	ee17 2a90 	vmov	r2, s15
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bd28:	4b13      	ldr	r3, [pc, #76]	@ (800bd78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd2c:	0e1b      	lsrs	r3, r3, #24
 800bd2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd42:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd4e:	ee17 2a90 	vmov	r2, s15
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd56:	e008      	b.n	800bd6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	609a      	str	r2, [r3, #8]
}
 800bd6a:	bf00      	nop
 800bd6c:	3724      	adds	r7, #36	@ 0x24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	58024400 	.word	0x58024400
 800bd7c:	03d09000 	.word	0x03d09000
 800bd80:	46000000 	.word	0x46000000
 800bd84:	4c742400 	.word	0x4c742400
 800bd88:	4a742400 	.word	0x4a742400
 800bd8c:	4bb71b00 	.word	0x4bb71b00

0800bd90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b089      	sub	sp, #36	@ 0x24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd98:	4ba1      	ldr	r3, [pc, #644]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9c:	f003 0303 	and.w	r3, r3, #3
 800bda0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bda2:	4b9f      	ldr	r3, [pc, #636]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda6:	0d1b      	lsrs	r3, r3, #20
 800bda8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bdae:	4b9c      	ldr	r3, [pc, #624]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb2:	0a1b      	lsrs	r3, r3, #8
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bdba:	4b99      	ldr	r3, [pc, #612]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdbe:	08db      	lsrs	r3, r3, #3
 800bdc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	fb02 f303 	mul.w	r3, r2, r3
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 8111 	beq.w	800c000 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	f000 8083 	beq.w	800beec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	f200 80a1 	bhi.w	800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d003      	beq.n	800bdfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d056      	beq.n	800bea8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bdfa:	e099      	b.n	800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdfc:	4b88      	ldr	r3, [pc, #544]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 0320 	and.w	r3, r3, #32
 800be04:	2b00      	cmp	r3, #0
 800be06:	d02d      	beq.n	800be64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be08:	4b85      	ldr	r3, [pc, #532]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	08db      	lsrs	r3, r3, #3
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	4a84      	ldr	r2, [pc, #528]	@ (800c024 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be14:	fa22 f303 	lsr.w	r3, r2, r3
 800be18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	ee07 3a90 	vmov	s15, r3
 800be20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	ee07 3a90 	vmov	s15, r3
 800be2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be32:	4b7b      	ldr	r3, [pc, #492]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be42:	ed97 6a03 	vldr	s12, [r7, #12]
 800be46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be62:	e087      	b.n	800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c02c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be76:	4b6a      	ldr	r3, [pc, #424]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be86:	ed97 6a03 	vldr	s12, [r7, #12]
 800be8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bea6:	e065      	b.n	800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800beb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beba:	4b59      	ldr	r3, [pc, #356]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bece:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800beea:	e043      	b.n	800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c034 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800befa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800befe:	4b48      	ldr	r3, [pc, #288]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf2e:	e021      	b.n	800bf74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c030 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf42:	4b37      	ldr	r3, [pc, #220]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c028 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bf74:	4b2a      	ldr	r3, [pc, #168]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf78:	0a5b      	lsrs	r3, r3, #9
 800bf7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf9a:	ee17 2a90 	vmov	r2, s15
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bfa2:	4b1f      	ldr	r3, [pc, #124]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa6:	0c1b      	lsrs	r3, r3, #16
 800bfa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfac:	ee07 3a90 	vmov	s15, r3
 800bfb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfc8:	ee17 2a90 	vmov	r2, s15
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bfd0:	4b13      	ldr	r3, [pc, #76]	@ (800c020 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd4:	0e1b      	lsrs	r3, r3, #24
 800bfd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bfe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfea:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bff6:	ee17 2a90 	vmov	r2, s15
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bffe:	e008      	b.n	800c012 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	609a      	str	r2, [r3, #8]
}
 800c012:	bf00      	nop
 800c014:	3724      	adds	r7, #36	@ 0x24
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	58024400 	.word	0x58024400
 800c024:	03d09000 	.word	0x03d09000
 800c028:	46000000 	.word	0x46000000
 800c02c:	4c742400 	.word	0x4c742400
 800c030:	4a742400 	.word	0x4a742400
 800c034:	4bb71b00 	.word	0x4bb71b00

0800c038 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c038:	b480      	push	{r7}
 800c03a:	b089      	sub	sp, #36	@ 0x24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c040:	4ba0      	ldr	r3, [pc, #640]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c044:	f003 0303 	and.w	r3, r3, #3
 800c048:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c04a:	4b9e      	ldr	r3, [pc, #632]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c04e:	091b      	lsrs	r3, r3, #4
 800c050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c054:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c056:	4b9b      	ldr	r3, [pc, #620]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c060:	4b98      	ldr	r3, [pc, #608]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c064:	08db      	lsrs	r3, r3, #3
 800c066:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	fb02 f303 	mul.w	r3, r2, r3
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c078:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8111 	beq.w	800c2a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b02      	cmp	r3, #2
 800c088:	f000 8083 	beq.w	800c192 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	2b02      	cmp	r3, #2
 800c090:	f200 80a1 	bhi.w	800c1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d056      	beq.n	800c14e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c0a0:	e099      	b.n	800c1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a2:	4b88      	ldr	r3, [pc, #544]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d02d      	beq.n	800c10a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0ae:	4b85      	ldr	r3, [pc, #532]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	08db      	lsrs	r3, r3, #3
 800c0b4:	f003 0303 	and.w	r3, r3, #3
 800c0b8:	4a83      	ldr	r2, [pc, #524]	@ (800c2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c0be:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	ee07 3a90 	vmov	s15, r3
 800c0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d8:	4b7a      	ldr	r3, [pc, #488]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c100:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c104:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c108:	e087      	b.n	800c21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	ee07 3a90 	vmov	s15, r3
 800c110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c114:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c11c:	4b69      	ldr	r3, [pc, #420]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c124:	ee07 3a90 	vmov	s15, r3
 800c128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c12c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c130:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c13c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c144:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c14c:	e065      	b.n	800c21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	ee07 3a90 	vmov	s15, r3
 800c154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c158:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c2d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c15c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c160:	4b58      	ldr	r3, [pc, #352]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c168:	ee07 3a90 	vmov	s15, r3
 800c16c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c170:	ed97 6a03 	vldr	s12, [r7, #12]
 800c174:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c17c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c180:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c18c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c190:	e043      	b.n	800c21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1a4:	4b47      	ldr	r3, [pc, #284]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ac:	ee07 3a90 	vmov	s15, r3
 800c1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1b8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1d4:	e021      	b.n	800c21a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	ee07 3a90 	vmov	s15, r3
 800c1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1e8:	4b36      	ldr	r3, [pc, #216]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1fc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c2cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c218:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c21a:	4b2a      	ldr	r3, [pc, #168]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21e:	0a5b      	lsrs	r3, r3, #9
 800c220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c224:	ee07 3a90 	vmov	s15, r3
 800c228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c230:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c234:	edd7 6a07 	vldr	s13, [r7, #28]
 800c238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c23c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c240:	ee17 2a90 	vmov	r2, s15
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c248:	4b1e      	ldr	r3, [pc, #120]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c24c:	0c1b      	lsrs	r3, r3, #16
 800c24e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c252:	ee07 3a90 	vmov	s15, r3
 800c256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c25a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c262:	edd7 6a07 	vldr	s13, [r7, #28]
 800c266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c26e:	ee17 2a90 	vmov	r2, s15
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c276:	4b13      	ldr	r3, [pc, #76]	@ (800c2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c27a:	0e1b      	lsrs	r3, r3, #24
 800c27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c280:	ee07 3a90 	vmov	s15, r3
 800c284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c290:	edd7 6a07 	vldr	s13, [r7, #28]
 800c294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c29c:	ee17 2a90 	vmov	r2, s15
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c2a4:	e008      	b.n	800c2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	609a      	str	r2, [r3, #8]
}
 800c2b8:	bf00      	nop
 800c2ba:	3724      	adds	r7, #36	@ 0x24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	58024400 	.word	0x58024400
 800c2c8:	03d09000 	.word	0x03d09000
 800c2cc:	46000000 	.word	0x46000000
 800c2d0:	4c742400 	.word	0x4c742400
 800c2d4:	4a742400 	.word	0x4a742400
 800c2d8:	4bb71b00 	.word	0x4bb71b00

0800c2dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2ea:	4b53      	ldr	r3, [pc, #332]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d101      	bne.n	800c2fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e099      	b.n	800c42e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c2fa:	4b4f      	ldr	r3, [pc, #316]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a4e      	ldr	r2, [pc, #312]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c300:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c306:	f7f6 fc0d 	bl	8002b24 <HAL_GetTick>
 800c30a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c30c:	e008      	b.n	800c320 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c30e:	f7f6 fc09 	bl	8002b24 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d901      	bls.n	800c320 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e086      	b.n	800c42e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c320:	4b45      	ldr	r3, [pc, #276]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1f0      	bne.n	800c30e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c32c:	4b42      	ldr	r3, [pc, #264]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c330:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	031b      	lsls	r3, r3, #12
 800c33a:	493f      	ldr	r1, [pc, #252]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c33c:	4313      	orrs	r3, r2
 800c33e:	628b      	str	r3, [r1, #40]	@ 0x28
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	3b01      	subs	r3, #1
 800c346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	3b01      	subs	r3, #1
 800c350:	025b      	lsls	r3, r3, #9
 800c352:	b29b      	uxth	r3, r3
 800c354:	431a      	orrs	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	041b      	lsls	r3, r3, #16
 800c35e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c362:	431a      	orrs	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	3b01      	subs	r3, #1
 800c36a:	061b      	lsls	r3, r3, #24
 800c36c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c370:	4931      	ldr	r1, [pc, #196]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c372:	4313      	orrs	r3, r2
 800c374:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c376:	4b30      	ldr	r3, [pc, #192]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	492d      	ldr	r1, [pc, #180]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c384:	4313      	orrs	r3, r2
 800c386:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c388:	4b2b      	ldr	r3, [pc, #172]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38c:	f023 0220 	bic.w	r2, r3, #32
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	4928      	ldr	r1, [pc, #160]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c396:	4313      	orrs	r3, r2
 800c398:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c39a:	4b27      	ldr	r3, [pc, #156]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39e:	4a26      	ldr	r2, [pc, #152]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3a0:	f023 0310 	bic.w	r3, r3, #16
 800c3a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c3a6:	4b24      	ldr	r3, [pc, #144]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c3aa:	4b24      	ldr	r3, [pc, #144]	@ (800c43c <RCCEx_PLL2_Config+0x160>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	69d2      	ldr	r2, [r2, #28]
 800c3b2:	00d2      	lsls	r2, r2, #3
 800c3b4:	4920      	ldr	r1, [pc, #128]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c3ba:	4b1f      	ldr	r3, [pc, #124]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3be:	4a1e      	ldr	r2, [pc, #120]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3c0:	f043 0310 	orr.w	r3, r3, #16
 800c3c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d106      	bne.n	800c3da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c3cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d0:	4a19      	ldr	r2, [pc, #100]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c3d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3d8:	e00f      	b.n	800c3fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d106      	bne.n	800c3ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c3e0:	4b15      	ldr	r3, [pc, #84]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e4:	4a14      	ldr	r2, [pc, #80]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3ec:	e005      	b.n	800c3fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c3ee:	4b12      	ldr	r3, [pc, #72]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f2:	4a11      	ldr	r2, [pc, #68]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c3f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a0e      	ldr	r2, [pc, #56]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c400:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c406:	f7f6 fb8d 	bl	8002b24 <HAL_GetTick>
 800c40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c40c:	e008      	b.n	800c420 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c40e:	f7f6 fb89 	bl	8002b24 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d901      	bls.n	800c420 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e006      	b.n	800c42e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c420:	4b05      	ldr	r3, [pc, #20]	@ (800c438 <RCCEx_PLL2_Config+0x15c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d0f0      	beq.n	800c40e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	58024400 	.word	0x58024400
 800c43c:	ffff0007 	.word	0xffff0007

0800c440 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c44e:	4b53      	ldr	r3, [pc, #332]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c452:	f003 0303 	and.w	r3, r3, #3
 800c456:	2b03      	cmp	r3, #3
 800c458:	d101      	bne.n	800c45e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e099      	b.n	800c592 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c45e:	4b4f      	ldr	r3, [pc, #316]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a4e      	ldr	r2, [pc, #312]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c464:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c46a:	f7f6 fb5b 	bl	8002b24 <HAL_GetTick>
 800c46e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c470:	e008      	b.n	800c484 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c472:	f7f6 fb57 	bl	8002b24 <HAL_GetTick>
 800c476:	4602      	mov	r2, r0
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d901      	bls.n	800c484 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	e086      	b.n	800c592 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c484:	4b45      	ldr	r3, [pc, #276]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1f0      	bne.n	800c472 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c490:	4b42      	ldr	r3, [pc, #264]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c494:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	051b      	lsls	r3, r3, #20
 800c49e:	493f      	ldr	r1, [pc, #252]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	025b      	lsls	r3, r3, #9
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	041b      	lsls	r3, r3, #16
 800c4c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	061b      	lsls	r3, r3, #24
 800c4d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c4d4:	4931      	ldr	r1, [pc, #196]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c4da:	4b30      	ldr	r3, [pc, #192]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	695b      	ldr	r3, [r3, #20]
 800c4e6:	492d      	ldr	r1, [pc, #180]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c4ec:	4b2b      	ldr	r3, [pc, #172]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	4928      	ldr	r1, [pc, #160]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c4fe:	4b27      	ldr	r3, [pc, #156]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c502:	4a26      	ldr	r2, [pc, #152]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c508:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c50a:	4b24      	ldr	r3, [pc, #144]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c50c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c50e:	4b24      	ldr	r3, [pc, #144]	@ (800c5a0 <RCCEx_PLL3_Config+0x160>)
 800c510:	4013      	ands	r3, r2
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	69d2      	ldr	r2, [r2, #28]
 800c516:	00d2      	lsls	r2, r2, #3
 800c518:	4920      	ldr	r1, [pc, #128]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c51e:	4b1f      	ldr	r3, [pc, #124]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c522:	4a1e      	ldr	r2, [pc, #120]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c528:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d106      	bne.n	800c53e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c530:	4b1a      	ldr	r3, [pc, #104]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c534:	4a19      	ldr	r2, [pc, #100]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c536:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c53a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c53c:	e00f      	b.n	800c55e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d106      	bne.n	800c552 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c544:	4b15      	ldr	r3, [pc, #84]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c548:	4a14      	ldr	r2, [pc, #80]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c54a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c54e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c550:	e005      	b.n	800c55e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c552:	4b12      	ldr	r3, [pc, #72]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c556:	4a11      	ldr	r2, [pc, #68]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c558:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c55c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c55e:	4b0f      	ldr	r3, [pc, #60]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a0e      	ldr	r2, [pc, #56]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c56a:	f7f6 fadb 	bl	8002b24 <HAL_GetTick>
 800c56e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c570:	e008      	b.n	800c584 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c572:	f7f6 fad7 	bl	8002b24 <HAL_GetTick>
 800c576:	4602      	mov	r2, r0
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d901      	bls.n	800c584 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e006      	b.n	800c592 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c584:	4b05      	ldr	r3, [pc, #20]	@ (800c59c <RCCEx_PLL3_Config+0x15c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d0f0      	beq.n	800c572 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	58024400 	.word	0x58024400
 800c5a0:	ffff0007 	.word	0xffff0007

0800c5a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08a      	sub	sp, #40	@ 0x28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e075      	b.n	800c6a2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d105      	bne.n	800c5ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7f5 ff09 	bl	80023e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2204      	movs	r2, #4
 800c5d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f868 	bl	800c6ac <HAL_SD_InitCard>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e05d      	b.n	800c6a2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c5e6:	f107 0308 	add.w	r3, r7, #8
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fdaf 	bl	800d150 <HAL_SD_GetCardStatus>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e052      	b.n	800c6a2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c5fc:	7e3b      	ldrb	r3, [r7, #24]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c602:	7e7b      	ldrb	r3, [r7, #25]
 800c604:	b2db      	uxtb	r3, r3
 800c606:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d10a      	bne.n	800c626 <HAL_SD_Init+0x82>
 800c610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c612:	2b00      	cmp	r3, #0
 800c614:	d102      	bne.n	800c61c <HAL_SD_Init+0x78>
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c622:	659a      	str	r2, [r3, #88]	@ 0x58
 800c624:	e00b      	b.n	800c63e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d104      	bne.n	800c638 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c634:	659a      	str	r2, [r3, #88]	@ 0x58
 800c636:	e002      	b.n	800c63e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fe6d 	bl	800d324 <HAL_SD_ConfigWideBusOperation>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d001      	beq.n	800c654 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e026      	b.n	800c6a2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c654:	f7f6 fa66 	bl	8002b24 <HAL_GetTick>
 800c658:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c65a:	e011      	b.n	800c680 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c65c:	f7f6 fa62 	bl	8002b24 <HAL_GetTick>
 800c660:	4602      	mov	r2, r0
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c66a:	d109      	bne.n	800c680 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c672:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c67c:	2303      	movs	r3, #3
 800c67e:	e010      	b.n	800c6a2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 ff61 	bl	800d548 <HAL_SD_GetCardState>
 800c686:	4603      	mov	r3, r0
 800c688:	2b04      	cmp	r3, #4
 800c68a:	d1e7      	bne.n	800c65c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3728      	adds	r7, #40	@ 0x28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c6ac:	b590      	push	{r4, r7, lr}
 800c6ae:	b08d      	sub	sp, #52	@ 0x34
 800c6b0:	af02      	add	r7, sp, #8
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c6c4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c6c8:	f04f 0100 	mov.w	r1, #0
 800c6cc:	f7fe fd24 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 800c6d0:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d109      	bne.n	800c6ec <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c6e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e070      	b.n	800c7ce <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ee:	0a1b      	lsrs	r3, r3, #8
 800c6f0:	4a39      	ldr	r2, [pc, #228]	@ (800c7d8 <HAL_SD_InitCard+0x12c>)
 800c6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6f6:	091b      	lsrs	r3, r3, #4
 800c6f8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681c      	ldr	r4, [r3, #0]
 800c6fe:	466a      	mov	r2, sp
 800c700:	f107 0318 	add.w	r3, r7, #24
 800c704:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c708:	e882 0003 	stmia.w	r2, {r0, r1}
 800c70c:	f107 030c 	add.w	r3, r7, #12
 800c710:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c712:	4620      	mov	r0, r4
 800c714:	f003 fffe 	bl	8010714 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f004 f841 	bl	80107a4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c732:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c736:	2b00      	cmp	r3, #0
 800c738:	d007      	beq.n	800c74a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c73a:	4a28      	ldr	r2, [pc, #160]	@ (800c7dc <HAL_SD_InitCard+0x130>)
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c742:	3301      	adds	r3, #1
 800c744:	4618      	mov	r0, r3
 800c746:	f7f6 f9f9 	bl	8002b3c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 ffea 	bl	800d724 <SD_PowerON>
 800c750:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00b      	beq.n	800c770 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	431a      	orrs	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e02e      	b.n	800c7ce <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 ff09 	bl	800d588 <SD_InitCard>
 800c776:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00b      	beq.n	800c796 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c78a:	6a3b      	ldr	r3, [r7, #32]
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	e01b      	b.n	800c7ce <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f004 f896 	bl	80108d0 <SDMMC_CmdBlockLength>
 800c7a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7a6:	6a3b      	ldr	r3, [r7, #32]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00f      	beq.n	800c7cc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a0b      	ldr	r2, [pc, #44]	@ (800c7e0 <HAL_SD_InitCard+0x134>)
 800c7b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e000      	b.n	800c7ce <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	372c      	adds	r7, #44	@ 0x2c
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd90      	pop	{r4, r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	014f8b59 	.word	0x014f8b59
 800c7dc:	00012110 	.word	0x00012110
 800c7e0:	1fe00fff 	.word	0x1fe00fff

0800c7e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08c      	sub	sp, #48	@ 0x30
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d107      	bne.n	800c80c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c800:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	e08d      	b.n	800c928 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b01      	cmp	r3, #1
 800c816:	f040 8086 	bne.w	800c926 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	441a      	add	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d907      	bls.n	800c83e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c832:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c83a:	2301      	movs	r3, #1
 800c83c:	e074      	b.n	800c928 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2203      	movs	r2, #3
 800c842:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2200      	movs	r2, #0
 800c84c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	025a      	lsls	r2, r3, #9
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c860:	2b01      	cmp	r3, #1
 800c862:	d002      	beq.n	800c86a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	025b      	lsls	r3, r3, #9
 800c868:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295
 800c86e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	025b      	lsls	r3, r3, #9
 800c874:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c876:	2390      	movs	r3, #144	@ 0x90
 800c878:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c87a:	2302      	movs	r3, #2
 800c87c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c87e:	2300      	movs	r3, #0
 800c880:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c882:	2300      	movs	r3, #0
 800c884:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f107 0210 	add.w	r2, r7, #16
 800c88e:	4611      	mov	r1, r2
 800c890:	4618      	mov	r0, r3
 800c892:	f003 fff1 	bl	8010878 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c8a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d90a      	bls.n	800c8d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2282      	movs	r2, #130	@ 0x82
 800c8c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f004 f847 	bl	801095c <SDMMC_CmdReadMultiBlock>
 800c8ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c8d0:	e009      	b.n	800c8e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2281      	movs	r2, #129	@ 0x81
 800c8d6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f004 f819 	bl	8010916 <SDMMC_CmdReadSingleBlock>
 800c8e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d012      	beq.n	800c912 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800c930 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c8f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e00a      	b.n	800c928 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c920:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	e000      	b.n	800c928 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c926:	2302      	movs	r3, #2
  }
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3730      	adds	r7, #48	@ 0x30
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	1fe00fff 	.word	0x1fe00fff

0800c934 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08c      	sub	sp, #48	@ 0x30
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d107      	bne.n	800c95c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c950:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e08d      	b.n	800ca78 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b01      	cmp	r3, #1
 800c966:	f040 8086 	bne.w	800ca76 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	441a      	add	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d907      	bls.n	800c98e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c982:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e074      	b.n	800ca78 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2203      	movs	r2, #3
 800c992:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2200      	movs	r2, #0
 800c99c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	025a      	lsls	r2, r3, #9
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d002      	beq.n	800c9ba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b6:	025b      	lsls	r3, r3, #9
 800c9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c9be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	025b      	lsls	r3, r3, #9
 800c9c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c9c6:	2390      	movs	r3, #144	@ 0x90
 800c9c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f107 0210 	add.w	r2, r7, #16
 800c9de:	4611      	mov	r1, r2
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f003 ff49 	bl	8010878 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68da      	ldr	r2, [r3, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9f4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2201      	movs	r2, #1
 800ca04:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d90a      	bls.n	800ca22 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	22a0      	movs	r2, #160	@ 0xa0
 800ca10:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f003 ffe5 	bl	80109e8 <SDMMC_CmdWriteMultiBlock>
 800ca1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ca20:	e009      	b.n	800ca36 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2290      	movs	r2, #144	@ 0x90
 800ca26:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f003 ffb7 	bl	80109a2 <SDMMC_CmdWriteSingleBlock>
 800ca34:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d012      	beq.n	800ca62 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a0f      	ldr	r2, [pc, #60]	@ (800ca80 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800ca42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e00a      	b.n	800ca78 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800ca70:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ca72:	2300      	movs	r3, #0
 800ca74:	e000      	b.n	800ca78 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ca76:	2302      	movs	r3, #2
  }
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3730      	adds	r7, #48	@ 0x30
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	1fe00fff 	.word	0x1fe00fff

0800ca84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca90:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d008      	beq.n	800cab2 <HAL_SD_IRQHandler+0x2e>
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f003 0308 	and.w	r3, r3, #8
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f001 f926 	bl	800dcfc <SD_Read_IT>
 800cab0:	e19a      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 80ac 	beq.w	800cc1a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800caca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	4b59      	ldr	r3, [pc, #356]	@ (800cc3c <HAL_SD_IRQHandler+0x1b8>)
 800cad8:	400b      	ands	r3, r1
 800cada:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800caea:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68da      	ldr	r2, [r3, #12]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cafa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f003 0308 	and.w	r3, r3, #8
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d038      	beq.n	800cb78 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d104      	bne.n	800cb1a <HAL_SD_IRQHandler+0x96>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f003 0320 	and.w	r3, r3, #32
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d011      	beq.n	800cb3e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f003 ff86 	bl	8010a30 <SDMMC_CmdStopTransfer>
 800cb24:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d008      	beq.n	800cb3e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	431a      	orrs	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f95b 	bl	800cdf4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a3f      	ldr	r2, [pc, #252]	@ (800cc40 <HAL_SD_IRQHandler+0x1bc>)
 800cb44:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d104      	bne.n	800cb68 <HAL_SD_IRQHandler+0xe4>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d003      	beq.n	800cb70 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f004 fc31 	bl	80113d0 <HAL_SD_RxCpltCallback>
 800cb6e:	e13b      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f004 fc23 	bl	80113bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cb76:	e137      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 8132 	beq.w	800cde8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2200      	movs	r2, #0
 800cb92:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f003 0302 	and.w	r3, r3, #2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d104      	bne.n	800cbb0 <HAL_SD_IRQHandler+0x12c>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f003 0320 	and.w	r3, r3, #32
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d011      	beq.n	800cbd4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f003 ff3b 	bl	8010a30 <SDMMC_CmdStopTransfer>
 800cbba:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d008      	beq.n	800cbd4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f910 	bl	800cdf4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f003 0310 	and.w	r3, r3, #16
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d104      	bne.n	800cbf6 <HAL_SD_IRQHandler+0x172>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f003 0320 	and.w	r3, r3, #32
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f004 fbe0 	bl	80113bc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d105      	bne.n	800cc12 <HAL_SD_IRQHandler+0x18e>
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f003 0302 	and.w	r3, r3, #2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 80eb 	beq.w	800cde8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f004 fbdc 	bl	80113d0 <HAL_SD_RxCpltCallback>
}
 800cc18:	e0e6      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00d      	beq.n	800cc44 <HAL_SD_IRQHandler+0x1c0>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f003 0308 	and.w	r3, r3, #8
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d008      	beq.n	800cc44 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f001 f8a8 	bl	800dd88 <SD_Write_IT>
 800cc38:	e0d6      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
 800cc3a:	bf00      	nop
 800cc3c:	ffff3ec5 	.word	0xffff3ec5
 800cc40:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc4a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f000 809d 	beq.w	800cd8e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5a:	f003 0302 	and.w	r3, r3, #2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d005      	beq.n	800cc6e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc66:	f043 0202 	orr.w	r2, r3, #2
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc74:	f003 0308 	and.w	r3, r3, #8
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d005      	beq.n	800cc88 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc80:	f043 0208 	orr.w	r2, r3, #8
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc8e:	f003 0320 	and.w	r3, r3, #32
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d005      	beq.n	800cca2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc9a:	f043 0220 	orr.w	r2, r3, #32
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca8:	f003 0310 	and.w	r3, r3, #16
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d005      	beq.n	800ccbc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccb4:	f043 0210 	orr.w	r2, r3, #16
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a4b      	ldr	r2, [pc, #300]	@ (800cdf0 <HAL_SD_IRQHandler+0x36c>)
 800ccc2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800ccd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68da      	ldr	r2, [r3, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cce2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ccf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68da      	ldr	r2, [r3, #12]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cd02:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f003 fe91 	bl	8010a30 <SDMMC_CmdStopTransfer>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68da      	ldr	r2, [r3, #12]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd28:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd32:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f003 0308 	and.w	r3, r3, #8
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00a      	beq.n	800cd54 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f851 	bl	800cdf4 <HAL_SD_ErrorCallback>
}
 800cd52:	e049      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d044      	beq.n	800cde8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d040      	beq.n	800cde8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cd74:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f834 	bl	800cdf4 <HAL_SD_ErrorCallback>
}
 800cd8c:	e02c      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d025      	beq.n	800cde8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cda4:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdac:	f003 0304 	and.w	r3, r3, #4
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10c      	bne.n	800cdce <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f003 0320 	and.w	r3, r3, #32
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f001 f84a 	bl	800de58 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cdc4:	e010      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f001 f832 	bl	800de30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cdcc:	e00c      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f003 0320 	and.w	r3, r3, #32
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f001 f833 	bl	800de44 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cdde:	e003      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 f81b 	bl	800de1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cde6:	e7ff      	b.n	800cde8 <HAL_SD_IRQHandler+0x364>
 800cde8:	bf00      	nop
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	18000f3a 	.word	0x18000f3a

0800cdf4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b083      	sub	sp, #12
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce16:	0f9b      	lsrs	r3, r3, #30
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce22:	0e9b      	lsrs	r3, r3, #26
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	f003 030f 	and.w	r3, r3, #15
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce34:	0e1b      	lsrs	r3, r3, #24
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	f003 0303 	and.w	r3, r3, #3
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce46:	0c1b      	lsrs	r3, r3, #16
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce52:	0a1b      	lsrs	r3, r3, #8
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce68:	0d1b      	lsrs	r3, r3, #20
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce74:	0c1b      	lsrs	r3, r3, #16
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	f003 030f 	and.w	r3, r3, #15
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce86:	0bdb      	lsrs	r3, r3, #15
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce98:	0b9b      	lsrs	r3, r3, #14
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ceaa:	0b5b      	lsrs	r3, r3, #13
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	b2da      	uxtb	r2, r3
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cebc:	0b1b      	lsrs	r3, r3, #12
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2200      	movs	r2, #0
 800cece:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d163      	bne.n	800cfa0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cedc:	009a      	lsls	r2, r3, #2
 800cede:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cee2:	4013      	ands	r3, r2
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cee8:	0f92      	lsrs	r2, r2, #30
 800ceea:	431a      	orrs	r2, r3
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cef4:	0edb      	lsrs	r3, r3, #27
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 0307 	and.w	r3, r3, #7
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf06:	0e1b      	lsrs	r3, r3, #24
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	f003 0307 	and.w	r3, r3, #7
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf18:	0d5b      	lsrs	r3, r3, #21
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	f003 0307 	and.w	r3, r3, #7
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf2a:	0c9b      	lsrs	r3, r3, #18
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf3c:	0bdb      	lsrs	r3, r3, #15
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	f003 0307 	and.w	r3, r3, #7
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	7e1b      	ldrb	r3, [r3, #24]
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	f003 0307 	and.w	r3, r3, #7
 800cf5e:	3302      	adds	r3, #2
 800cf60:	2201      	movs	r2, #1
 800cf62:	fa02 f303 	lsl.w	r3, r2, r3
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cf6a:	fb03 f202 	mul.w	r2, r3, r2
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	7a1b      	ldrb	r3, [r3, #8]
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	f003 030f 	and.w	r3, r3, #15
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	409a      	lsls	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cf8c:	0a52      	lsrs	r2, r2, #9
 800cf8e:	fb03 f202 	mul.w	r2, r3, r2
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf9c:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf9e:	e031      	b.n	800d004 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d11d      	bne.n	800cfe4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfac:	041b      	lsls	r3, r3, #16
 800cfae:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfb6:	0c1b      	lsrs	r3, r3, #16
 800cfb8:	431a      	orrs	r2, r3
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	029a      	lsls	r2, r3, #10
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfd8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	655a      	str	r2, [r3, #84]	@ 0x54
 800cfe2:	e00f      	b.n	800d004 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a58      	ldr	r2, [pc, #352]	@ (800d14c <HAL_SD_GetCardCSD+0x344>)
 800cfea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cff0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e09d      	b.n	800d140 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d008:	0b9b      	lsrs	r3, r3, #14
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	f003 0301 	and.w	r3, r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d01a:	09db      	lsrs	r3, r3, #7
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d022:	b2da      	uxtb	r2, r3
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d032:	b2da      	uxtb	r2, r3
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d03c:	0fdb      	lsrs	r3, r3, #31
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d048:	0f5b      	lsrs	r3, r3, #29
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 0303 	and.w	r3, r3, #3
 800d050:	b2da      	uxtb	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d05a:	0e9b      	lsrs	r3, r3, #26
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0307 	and.w	r3, r3, #7
 800d062:	b2da      	uxtb	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d06c:	0d9b      	lsrs	r3, r3, #22
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	f003 030f 	and.w	r3, r3, #15
 800d074:	b2da      	uxtb	r2, r3
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d07e:	0d5b      	lsrs	r3, r3, #21
 800d080:	b2db      	uxtb	r3, r3
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	b2da      	uxtb	r2, r3
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d09a:	0c1b      	lsrs	r3, r3, #16
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0ae:	0bdb      	lsrs	r3, r3, #15
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0c2:	0b9b      	lsrs	r3, r3, #14
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	f003 0301 	and.w	r3, r3, #1
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0d6:	0b5b      	lsrs	r3, r3, #13
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	f003 0301 	and.w	r3, r3, #1
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0ea:	0b1b      	lsrs	r3, r3, #12
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	f003 0301 	and.w	r3, r3, #1
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0fe:	0a9b      	lsrs	r3, r3, #10
 800d100:	b2db      	uxtb	r3, r3
 800d102:	f003 0303 	and.w	r3, r3, #3
 800d106:	b2da      	uxtb	r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d112:	0a1b      	lsrs	r3, r3, #8
 800d114:	b2db      	uxtb	r3, r3
 800d116:	f003 0303 	and.w	r3, r3, #3
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d126:	085b      	lsrs	r3, r3, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2201      	movs	r2, #1
 800d13a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	1fe00fff 	.word	0x1fe00fff

0800d150 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b094      	sub	sp, #80	@ 0x50
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d166:	b2db      	uxtb	r3, r3
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d101      	bne.n	800d170 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e0a7      	b.n	800d2c0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d170:	f107 0308 	add.w	r3, r7, #8
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fb62 	bl	800d840 <SD_SendSDStatus>
 800d17c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d17e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d180:	2b00      	cmp	r3, #0
 800d182:	d011      	beq.n	800d1a8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a4f      	ldr	r2, [pc, #316]	@ (800d2c8 <HAL_SD_GetCardStatus+0x178>)
 800d18a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d192:	431a      	orrs	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d1a6:	e070      	b.n	800d28a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	099b      	lsrs	r3, r3, #6
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	f003 0303 	and.w	r3, r3, #3
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	095b      	lsrs	r3, r3, #5
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	0a1b      	lsrs	r3, r3, #8
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	0e1b      	lsrs	r3, r3, #24
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	b29a      	uxth	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	061a      	lsls	r2, r3, #24
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	021b      	lsls	r3, r3, #8
 800d1ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1ee:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	0a1b      	lsrs	r3, r3, #8
 800d1f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d1f8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	0e1b      	lsrs	r3, r3, #24
 800d1fe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	b2da      	uxtb	r2, r3
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	0a1b      	lsrs	r3, r3, #8
 800d210:	b2da      	uxtb	r2, r3
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	0d1b      	lsrs	r3, r3, #20
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	f003 030f 	and.w	r3, r3, #15
 800d220:	b2da      	uxtb	r2, r3
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	0c1b      	lsrs	r3, r3, #16
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d230:	b29a      	uxth	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	b29b      	uxth	r3, r3
 800d236:	b2db      	uxtb	r3, r3
 800d238:	b29b      	uxth	r3, r3
 800d23a:	4313      	orrs	r3, r2
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	0a9b      	lsrs	r3, r3, #10
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	0a1b      	lsrs	r3, r3, #8
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f003 0303 	and.w	r3, r3, #3
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	091b      	lsrs	r3, r3, #4
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	b2db      	uxtb	r3, r3
 800d276:	f003 030f 	and.w	r3, r3, #15
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	0e1b      	lsrs	r3, r3, #24
 800d284:	b2da      	uxtb	r2, r3
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d292:	4618      	mov	r0, r3
 800d294:	f003 fb1c 	bl	80108d0 <SDMMC_CmdBlockLength>
 800d298:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00d      	beq.n	800d2bc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a08      	ldr	r2, [pc, #32]	@ (800d2c8 <HAL_SD_GetCardStatus+0x178>)
 800d2a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2ac:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d2bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3750      	adds	r7, #80	@ 0x50
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	1fe00fff 	.word	0x1fe00fff

0800d2cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d324:	b590      	push	{r4, r7, lr}
 800d326:	b08d      	sub	sp, #52	@ 0x34
 800d328:	af02      	add	r7, sp, #8
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2203      	movs	r2, #3
 800d338:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d340:	2b03      	cmp	r3, #3
 800d342:	d02e      	beq.n	800d3a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d34a:	d106      	bne.n	800d35a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d350:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	635a      	str	r2, [r3, #52]	@ 0x34
 800d358:	e029      	b.n	800d3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d360:	d10a      	bne.n	800d378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fb64 	bl	800da30 <SD_WideBus_Enable>
 800d368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d36e:	6a3b      	ldr	r3, [r7, #32]
 800d370:	431a      	orrs	r2, r3
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	635a      	str	r2, [r3, #52]	@ 0x34
 800d376:	e01a      	b.n	800d3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fba1 	bl	800dac6 <SD_WideBus_Disable>
 800d384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	431a      	orrs	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	635a      	str	r2, [r3, #52]	@ 0x34
 800d392:	e00c      	b.n	800d3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d398:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d3a0:	e005      	b.n	800d3ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3a6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d007      	beq.n	800d3c6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a5f      	ldr	r2, [pc, #380]	@ (800d538 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d3bc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d3c4:	e096      	b.n	800d4f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d3c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d3ca:	f04f 0100 	mov.w	r1, #0
 800d3ce:	f7fd fea3 	bl	800b118 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3d2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 8083 	beq.w	800d4e2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	691b      	ldr	r3, [r3, #16]
 800d3f0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	695a      	ldr	r2, [r3, #20]
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	4950      	ldr	r1, [pc, #320]	@ (800d53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3fa:	fba1 1303 	umull	r1, r3, r1, r3
 800d3fe:	0e1b      	lsrs	r3, r3, #24
 800d400:	429a      	cmp	r2, r3
 800d402:	d303      	bcc.n	800d40c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	695b      	ldr	r3, [r3, #20]
 800d408:	61bb      	str	r3, [r7, #24]
 800d40a:	e05a      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d414:	d103      	bne.n	800d41e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	61bb      	str	r3, [r7, #24]
 800d41c:	e051      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d426:	d126      	bne.n	800d476 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10e      	bne.n	800d44e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	4a43      	ldr	r2, [pc, #268]	@ (800d540 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d906      	bls.n	800d446 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	4a40      	ldr	r2, [pc, #256]	@ (800d53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d43c:	fba2 2303 	umull	r2, r3, r2, r3
 800d440:	0e5b      	lsrs	r3, r3, #25
 800d442:	61bb      	str	r3, [r7, #24]
 800d444:	e03d      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	61bb      	str	r3, [r7, #24]
 800d44c:	e039      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	69fa      	ldr	r2, [r7, #28]
 800d456:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45a:	4a39      	ldr	r2, [pc, #228]	@ (800d540 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d906      	bls.n	800d46e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	4a36      	ldr	r2, [pc, #216]	@ (800d53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d464:	fba2 2303 	umull	r2, r3, r2, r3
 800d468:	0e5b      	lsrs	r3, r3, #25
 800d46a:	61bb      	str	r3, [r7, #24]
 800d46c:	e029      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	61bb      	str	r3, [r7, #24]
 800d474:	e025      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10e      	bne.n	800d49c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	4a30      	ldr	r2, [pc, #192]	@ (800d544 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d906      	bls.n	800d494 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	4a2c      	ldr	r2, [pc, #176]	@ (800d53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d48a:	fba2 2303 	umull	r2, r3, r2, r3
 800d48e:	0e1b      	lsrs	r3, r3, #24
 800d490:	61bb      	str	r3, [r7, #24]
 800d492:	e016      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	61bb      	str	r3, [r7, #24]
 800d49a:	e012      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	005b      	lsls	r3, r3, #1
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a8:	4a26      	ldr	r2, [pc, #152]	@ (800d544 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d906      	bls.n	800d4bc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	4a22      	ldr	r2, [pc, #136]	@ (800d53c <HAL_SD_ConfigWideBusOperation+0x218>)
 800d4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b6:	0e1b      	lsrs	r3, r3, #24
 800d4b8:	61bb      	str	r3, [r7, #24]
 800d4ba:	e002      	b.n	800d4c2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	695b      	ldr	r3, [r3, #20]
 800d4c0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681c      	ldr	r4, [r3, #0]
 800d4c6:	466a      	mov	r2, sp
 800d4c8:	f107 0314 	add.w	r3, r7, #20
 800d4cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d4d0:	e882 0003 	stmia.w	r2, {r0, r1}
 800d4d4:	f107 0308 	add.w	r3, r7, #8
 800d4d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f003 f91a 	bl	8010714 <SDMMC_Init>
 800d4e0:	e008      	b.n	800d4f4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f003 f9e7 	bl	80108d0 <SDMMC_CmdBlockLength>
 800d502:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00c      	beq.n	800d524 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a0a      	ldr	r2, [pc, #40]	@ (800d538 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d510:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	431a      	orrs	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d530:	4618      	mov	r0, r3
 800d532:	372c      	adds	r7, #44	@ 0x2c
 800d534:	46bd      	mov	sp, r7
 800d536:	bd90      	pop	{r4, r7, pc}
 800d538:	1fe00fff 	.word	0x1fe00fff
 800d53c:	55e63b89 	.word	0x55e63b89
 800d540:	02faf080 	.word	0x02faf080
 800d544:	017d7840 	.word	0x017d7840

0800d548 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d554:	f107 030c 	add.w	r3, r7, #12
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fa40 	bl	800d9e0 <SD_SendStatus>
 800d560:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d005      	beq.n	800d574 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	431a      	orrs	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	0a5b      	lsrs	r3, r3, #9
 800d578:	f003 030f 	and.w	r3, r3, #15
 800d57c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d57e:	693b      	ldr	r3, [r7, #16]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b090      	sub	sp, #64	@ 0x40
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d590:	2300      	movs	r3, #0
 800d592:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d594:	f7f5 fac6 	bl	8002b24 <HAL_GetTick>
 800d598:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f003 f911 	bl	80107c6 <SDMMC_GetPowerState>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d102      	bne.n	800d5b0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d5ae:	e0b5      	b.n	800d71c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d02e      	beq.n	800d616 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f003 fb5c 	bl	8010c7a <SDMMC_CmdSendCID>
 800d5c2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <SD_InitCard+0x46>
    {
      return errorstate;
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5cc:	e0a6      	b.n	800d71c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f003 f93c 	bl	8010852 <SDMMC_GetResponse>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2104      	movs	r1, #4
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f003 f933 	bl	8010852 <SDMMC_GetResponse>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2108      	movs	r1, #8
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f003 f92a 	bl	8010852 <SDMMC_GetResponse>
 800d5fe:	4602      	mov	r2, r0
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	210c      	movs	r1, #12
 800d60a:	4618      	mov	r0, r3
 800d60c:	f003 f921 	bl	8010852 <SDMMC_GetResponse>
 800d610:	4602      	mov	r2, r0
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d01d      	beq.n	800d65a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d61e:	e019      	b.n	800d654 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f107 020a 	add.w	r2, r7, #10
 800d628:	4611      	mov	r1, r2
 800d62a:	4618      	mov	r0, r3
 800d62c:	f003 fb64 	bl	8010cf8 <SDMMC_CmdSetRelAdd>
 800d630:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <SD_InitCard+0xb4>
      {
        return errorstate;
 800d638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d63a:	e06f      	b.n	800d71c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d63c:	f7f5 fa72 	bl	8002b24 <HAL_GetTick>
 800d640:	4602      	mov	r2, r0
 800d642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d902      	bls.n	800d654 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d64e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d652:	e063      	b.n	800d71c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d654:	897b      	ldrh	r3, [r7, #10]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0e2      	beq.n	800d620 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d036      	beq.n	800d6d0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d662:	897b      	ldrh	r3, [r7, #10]
 800d664:	461a      	mov	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d672:	041b      	lsls	r3, r3, #16
 800d674:	4619      	mov	r1, r3
 800d676:	4610      	mov	r0, r2
 800d678:	f003 fb1e 	bl	8010cb8 <SDMMC_CmdSendCSD>
 800d67c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d680:	2b00      	cmp	r3, #0
 800d682:	d001      	beq.n	800d688 <SD_InitCard+0x100>
    {
      return errorstate;
 800d684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d686:	e049      	b.n	800d71c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2100      	movs	r1, #0
 800d68e:	4618      	mov	r0, r3
 800d690:	f003 f8df 	bl	8010852 <SDMMC_GetResponse>
 800d694:	4602      	mov	r2, r0
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2104      	movs	r1, #4
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f003 f8d6 	bl	8010852 <SDMMC_GetResponse>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2108      	movs	r1, #8
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f003 f8cd 	bl	8010852 <SDMMC_GetResponse>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	210c      	movs	r1, #12
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f003 f8c4 	bl	8010852 <SDMMC_GetResponse>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f003 f8bb 	bl	8010852 <SDMMC_GetResponse>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	0d1a      	lsrs	r2, r3, #20
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d6e4:	f107 030c 	add.w	r3, r7, #12
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7ff fb8c 	bl	800ce08 <HAL_SD_GetCardCSD>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d6fa:	e00f      	b.n	800d71c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d704:	041b      	lsls	r3, r3, #16
 800d706:	4619      	mov	r1, r3
 800d708:	4610      	mov	r0, r2
 800d70a:	f003 f9cd 	bl	8010aa8 <SDMMC_CmdSelDesel>
 800d70e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <SD_InitCard+0x192>
  {
    return errorstate;
 800d716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d718:	e000      	b.n	800d71c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3740      	adds	r7, #64	@ 0x40
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d72c:	2300      	movs	r3, #0
 800d72e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d734:	2300      	movs	r3, #0
 800d736:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f003 f9d6 	bl	8010aee <SDMMC_CmdGoIdleState>
 800d742:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d001      	beq.n	800d74e <SD_PowerON+0x2a>
  {
    return errorstate;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	e072      	b.n	800d834 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4618      	mov	r0, r3
 800d754:	f003 f9e9 	bl	8010b2a <SDMMC_CmdOperCond>
 800d758:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d760:	d10d      	bne.n	800d77e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f003 f9be 	bl	8010aee <SDMMC_CmdGoIdleState>
 800d772:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d004      	beq.n	800d784 <SD_PowerON+0x60>
    {
      return errorstate;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	e05a      	b.n	800d834 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d137      	bne.n	800d7fc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f003 f9e9 	bl	8010b6a <SDMMC_CmdAppCommand>
 800d798:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d02d      	beq.n	800d7fc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d7a4:	e046      	b.n	800d834 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f003 f9dc 	bl	8010b6a <SDMMC_CmdAppCommand>
 800d7b2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <SD_PowerON+0x9a>
    {
      return errorstate;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	e03a      	b.n	800d834 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	491e      	ldr	r1, [pc, #120]	@ (800d83c <SD_PowerON+0x118>)
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f003 f9f3 	bl	8010bb0 <SDMMC_CmdAppOperCommand>
 800d7ca:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d7d6:	e02d      	b.n	800d834 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f003 f837 	bl	8010852 <SDMMC_GetResponse>
 800d7e4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	0fdb      	lsrs	r3, r3, #31
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d101      	bne.n	800d7f2 <SD_PowerON+0xce>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <SD_PowerON+0xd0>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	613b      	str	r3, [r7, #16]

    count++;
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d802:	4293      	cmp	r3, r2
 800d804:	d802      	bhi.n	800d80c <SD_PowerON+0xe8>
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0cc      	beq.n	800d7a6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d812:	4293      	cmp	r3, r2
 800d814:	d902      	bls.n	800d81c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d816:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d81a:	e00b      	b.n	800d834 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3718      	adds	r7, #24
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	c1100000 	.word	0xc1100000

0800d840 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08c      	sub	sp, #48	@ 0x30
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d84a:	f7f5 f96b 	bl	8002b24 <HAL_GetTick>
 800d84e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2100      	movs	r1, #0
 800d85a:	4618      	mov	r0, r3
 800d85c:	f002 fff9 	bl	8010852 <SDMMC_GetResponse>
 800d860:	4603      	mov	r3, r0
 800d862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d86a:	d102      	bne.n	800d872 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d86c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d870:	e0b0      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2140      	movs	r1, #64	@ 0x40
 800d878:	4618      	mov	r0, r3
 800d87a:	f003 f829 	bl	80108d0 <SDMMC_CmdBlockLength>
 800d87e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d880:	6a3b      	ldr	r3, [r7, #32]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d005      	beq.n	800d892 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	e0a0      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d89a:	041b      	lsls	r3, r3, #16
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f003 f963 	bl	8010b6a <SDMMC_CmdAppCommand>
 800d8a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d005      	beq.n	800d8b8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	e08d      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8bc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d8be:	2340      	movs	r3, #64	@ 0x40
 800d8c0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d8c2:	2360      	movs	r3, #96	@ 0x60
 800d8c4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f107 0208 	add.w	r2, r7, #8
 800d8da:	4611      	mov	r1, r2
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f002 ffcb 	bl	8010878 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f003 fa4b 	bl	8010d82 <SDMMC_CmdStatusRegister>
 800d8ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d02b      	beq.n	800d94c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	e069      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d013      	beq.n	800d936 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d90e:	2300      	movs	r3, #0
 800d910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d912:	e00d      	b.n	800d930 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4618      	mov	r0, r3
 800d91a:	f002 ff25 	bl	8010768 <SDMMC_ReadFIFO>
 800d91e:	4602      	mov	r2, r0
 800d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d922:	601a      	str	r2, [r3, #0]
        pData++;
 800d924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d926:	3304      	adds	r3, #4
 800d928:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d92c:	3301      	adds	r3, #1
 800d92e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d932:	2b07      	cmp	r3, #7
 800d934:	d9ee      	bls.n	800d914 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d936:	f7f5 f8f5 	bl	8002b24 <HAL_GetTick>
 800d93a:	4602      	mov	r2, r0
 800d93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d944:	d102      	bne.n	800d94c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d946:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d94a:	e043      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d952:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d956:	2b00      	cmp	r3, #0
 800d958:	d0d2      	beq.n	800d900 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d960:	f003 0308 	and.w	r3, r3, #8
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d968:	2308      	movs	r3, #8
 800d96a:	e033      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d972:	f003 0302 	and.w	r3, r3, #2
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d97a:	2302      	movs	r3, #2
 800d97c:	e02a      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d984:	f003 0320 	and.w	r3, r3, #32
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d017      	beq.n	800d9bc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d98c:	2320      	movs	r3, #32
 800d98e:	e021      	b.n	800d9d4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4618      	mov	r0, r3
 800d996:	f002 fee7 	bl	8010768 <SDMMC_ReadFIFO>
 800d99a:	4602      	mov	r2, r0
 800d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99e:	601a      	str	r2, [r3, #0]
    pData++;
 800d9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d9a6:	f7f5 f8bd 	bl	8002b24 <HAL_GetTick>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b4:	d102      	bne.n	800d9bc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d9b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9ba:	e00b      	b.n	800d9d4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1e2      	bne.n	800d990 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a03      	ldr	r2, [pc, #12]	@ (800d9dc <SD_SendSDStatus+0x19c>)
 800d9d0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3730      	adds	r7, #48	@ 0x30
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	18000f3a 	.word	0x18000f3a

0800d9e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d9f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d9f4:	e018      	b.n	800da28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9fe:	041b      	lsls	r3, r3, #16
 800da00:	4619      	mov	r1, r3
 800da02:	4610      	mov	r0, r2
 800da04:	f003 f99a 	bl	8010d3c <SDMMC_CmdSendStatus>
 800da08:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	e009      	b.n	800da28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2100      	movs	r1, #0
 800da1a:	4618      	mov	r0, r3
 800da1c:	f002 ff19 	bl	8010852 <SDMMC_GetResponse>
 800da20:	4602      	mov	r2, r0
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800da38:	2300      	movs	r3, #0
 800da3a:	60fb      	str	r3, [r7, #12]
 800da3c:	2300      	movs	r3, #0
 800da3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2100      	movs	r1, #0
 800da46:	4618      	mov	r0, r3
 800da48:	f002 ff03 	bl	8010852 <SDMMC_GetResponse>
 800da4c:	4603      	mov	r3, r0
 800da4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da56:	d102      	bne.n	800da5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da5c:	e02f      	b.n	800dabe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da5e:	f107 030c 	add.w	r3, r7, #12
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f879 	bl	800db5c <SD_FindSCR>
 800da6a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d001      	beq.n	800da76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	e023      	b.n	800dabe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d01c      	beq.n	800daba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da88:	041b      	lsls	r3, r3, #16
 800da8a:	4619      	mov	r1, r3
 800da8c:	4610      	mov	r0, r2
 800da8e:	f003 f86c 	bl	8010b6a <SDMMC_CmdAppCommand>
 800da92:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	e00f      	b.n	800dabe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2102      	movs	r1, #2
 800daa4:	4618      	mov	r0, r3
 800daa6:	f003 f8a3 	bl	8010bf0 <SDMMC_CmdBusWidth>
 800daaa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d001      	beq.n	800dab6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	e003      	b.n	800dabe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	e001      	b.n	800dabe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800daba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b086      	sub	sp, #24
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dace:	2300      	movs	r3, #0
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	2300      	movs	r3, #0
 800dad4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2100      	movs	r1, #0
 800dadc:	4618      	mov	r0, r3
 800dade:	f002 feb8 	bl	8010852 <SDMMC_GetResponse>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800daec:	d102      	bne.n	800daf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800daee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800daf2:	e02f      	b.n	800db54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800daf4:	f107 030c 	add.w	r3, r7, #12
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f82e 	bl	800db5c <SD_FindSCR>
 800db00:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	e023      	b.n	800db54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800db12:	2b00      	cmp	r3, #0
 800db14:	d01c      	beq.n	800db50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db1e:	041b      	lsls	r3, r3, #16
 800db20:	4619      	mov	r1, r3
 800db22:	4610      	mov	r0, r2
 800db24:	f003 f821 	bl	8010b6a <SDMMC_CmdAppCommand>
 800db28:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	e00f      	b.n	800db54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2100      	movs	r1, #0
 800db3a:	4618      	mov	r0, r3
 800db3c:	f003 f858 	bl	8010bf0 <SDMMC_CmdBusWidth>
 800db40:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	e003      	b.n	800db54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db4c:	2300      	movs	r3, #0
 800db4e:	e001      	b.n	800db54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800db54:	4618      	mov	r0, r3
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b08e      	sub	sp, #56	@ 0x38
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800db66:	f7f4 ffdd 	bl	8002b24 <HAL_GetTick>
 800db6a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800db6c:	2300      	movs	r3, #0
 800db6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800db70:	2300      	movs	r3, #0
 800db72:	60bb      	str	r3, [r7, #8]
 800db74:	2300      	movs	r3, #0
 800db76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2108      	movs	r1, #8
 800db82:	4618      	mov	r0, r3
 800db84:	f002 fea4 	bl	80108d0 <SDMMC_CmdBlockLength>
 800db88:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800db90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db92:	e0ad      	b.n	800dcf0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db9c:	041b      	lsls	r3, r3, #16
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	f002 ffe2 	bl	8010b6a <SDMMC_CmdAppCommand>
 800dba6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb0:	e09e      	b.n	800dcf0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dbb8:	2308      	movs	r3, #8
 800dbba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dbbc:	2330      	movs	r3, #48	@ 0x30
 800dbbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f107 0210 	add.w	r2, r7, #16
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f002 fe4e 	bl	8010878 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f003 f828 	bl	8010c36 <SDMMC_CmdSendSCR>
 800dbe6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d027      	beq.n	800dc3e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf0:	e07e      	b.n	800dcf0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d113      	bne.n	800dc28 <SD_FindSCR+0xcc>
 800dc00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d110      	bne.n	800dc28 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f002 fdac 	bl	8010768 <SDMMC_ReadFIFO>
 800dc10:	4603      	mov	r3, r0
 800dc12:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f002 fda5 	bl	8010768 <SDMMC_ReadFIFO>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	60fb      	str	r3, [r7, #12]
      index++;
 800dc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc24:	3301      	adds	r3, #1
 800dc26:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dc28:	f7f4 ff7c 	bl	8002b24 <HAL_GetTick>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d102      	bne.n	800dc3e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dc38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc3c:	e058      	b.n	800dcf0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc44:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dc48:	4013      	ands	r3, r2
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d0d1      	beq.n	800dbf2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc54:	f003 0308 	and.w	r3, r3, #8
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d005      	beq.n	800dc68 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2208      	movs	r2, #8
 800dc62:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dc64:	2308      	movs	r3, #8
 800dc66:	e043      	b.n	800dcf0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc6e:	f003 0302 	and.w	r3, r3, #2
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d005      	beq.n	800dc82 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2202      	movs	r2, #2
 800dc7c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc7e:	2302      	movs	r3, #2
 800dc80:	e036      	b.n	800dcf0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc88:	f003 0320 	and.w	r3, r3, #32
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2220      	movs	r2, #32
 800dc96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc98:	2320      	movs	r3, #32
 800dc9a:	e029      	b.n	800dcf0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a15      	ldr	r2, [pc, #84]	@ (800dcf8 <SD_FindSCR+0x19c>)
 800dca2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	061a      	lsls	r2, r3, #24
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	021b      	lsls	r3, r3, #8
 800dcac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dcb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	0a1b      	lsrs	r3, r3, #8
 800dcb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dcba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	0e1b      	lsrs	r3, r3, #24
 800dcc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc4:	601a      	str	r2, [r3, #0]
    scr++;
 800dcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc8:	3304      	adds	r3, #4
 800dcca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	061a      	lsls	r2, r3, #24
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	021b      	lsls	r3, r3, #8
 800dcd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dcd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	0a1b      	lsrs	r3, r3, #8
 800dcde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dce2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	0e1b      	lsrs	r3, r3, #24
 800dce8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3738      	adds	r7, #56	@ 0x38
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	18000f3a 	.word	0x18000f3a

0800dcfc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd08:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0e:	2b1f      	cmp	r3, #31
 800dd10:	d936      	bls.n	800dd80 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dd12:	2300      	movs	r3, #0
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	e027      	b.n	800dd68 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f002 fd23 	bl	8010768 <SDMMC_ReadFIFO>
 800dd22:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	0a1b      	lsrs	r3, r3, #8
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	0c1b      	lsrs	r3, r3, #16
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	0e1b      	lsrs	r3, r3, #24
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	3301      	adds	r3, #1
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	2b07      	cmp	r3, #7
 800dd6c:	d9d4      	bls.n	800dd18 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd78:	f1a3 0220 	sub.w	r2, r3, #32
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800dd80:	bf00      	nop
 800dd82:	3718      	adds	r7, #24
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	69db      	ldr	r3, [r3, #28]
 800dd94:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6a1b      	ldr	r3, [r3, #32]
 800dd9a:	2b1f      	cmp	r3, #31
 800dd9c:	d93a      	bls.n	800de14 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800dd9e:	2300      	movs	r3, #0
 800dda0:	617b      	str	r3, [r7, #20]
 800dda2:	e02b      	b.n	800ddfc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	3301      	adds	r3, #1
 800ddae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	021a      	lsls	r2, r3, #8
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	041a      	lsls	r2, r3, #16
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	061a      	lsls	r2, r3, #24
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4313      	orrs	r3, r2
 800ddde:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	3301      	adds	r3, #1
 800dde4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f107 020c 	add.w	r2, r7, #12
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f002 fcc6 	bl	8010782 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2b07      	cmp	r3, #7
 800de00:	d9d0      	bls.n	800dda4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a1b      	ldr	r3, [r3, #32]
 800de0c:	f1a3 0220 	sub.w	r2, r3, #32
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	621a      	str	r2, [r3, #32]
  }
}
 800de14:	bf00      	nop
 800de16:	3718      	adds	r7, #24
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800de38:	bf00      	nop
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800de4c:	bf00      	nop
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d101      	bne.n	800de7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	e049      	b.n	800df12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	d106      	bne.n	800de98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7f4 fb3a 	bl	800250c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2202      	movs	r2, #2
 800de9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4619      	mov	r1, r3
 800deaa:	4610      	mov	r0, r2
 800deac:	f000 fc58 	bl	800e760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2201      	movs	r2, #1
 800ded4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2201      	movs	r2, #1
 800defc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
	...

0800df1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d001      	beq.n	800df34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df30:	2301      	movs	r3, #1
 800df32:	e05e      	b.n	800dff2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2202      	movs	r2, #2
 800df38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68da      	ldr	r2, [r3, #12]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f042 0201 	orr.w	r2, r2, #1
 800df4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a2b      	ldr	r2, [pc, #172]	@ (800e000 <HAL_TIM_Base_Start_IT+0xe4>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d02c      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df5e:	d027      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a27      	ldr	r2, [pc, #156]	@ (800e004 <HAL_TIM_Base_Start_IT+0xe8>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d022      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a26      	ldr	r2, [pc, #152]	@ (800e008 <HAL_TIM_Base_Start_IT+0xec>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d01d      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a24      	ldr	r2, [pc, #144]	@ (800e00c <HAL_TIM_Base_Start_IT+0xf0>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d018      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a23      	ldr	r2, [pc, #140]	@ (800e010 <HAL_TIM_Base_Start_IT+0xf4>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d013      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a21      	ldr	r2, [pc, #132]	@ (800e014 <HAL_TIM_Base_Start_IT+0xf8>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d00e      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a20      	ldr	r2, [pc, #128]	@ (800e018 <HAL_TIM_Base_Start_IT+0xfc>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d009      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a1e      	ldr	r2, [pc, #120]	@ (800e01c <HAL_TIM_Base_Start_IT+0x100>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d004      	beq.n	800dfb0 <HAL_TIM_Base_Start_IT+0x94>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a1d      	ldr	r2, [pc, #116]	@ (800e020 <HAL_TIM_Base_Start_IT+0x104>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d115      	bne.n	800dfdc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	689a      	ldr	r2, [r3, #8]
 800dfb6:	4b1b      	ldr	r3, [pc, #108]	@ (800e024 <HAL_TIM_Base_Start_IT+0x108>)
 800dfb8:	4013      	ands	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2b06      	cmp	r3, #6
 800dfc0:	d015      	beq.n	800dfee <HAL_TIM_Base_Start_IT+0xd2>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfc8:	d011      	beq.n	800dfee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f042 0201 	orr.w	r2, r2, #1
 800dfd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfda:	e008      	b.n	800dfee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f042 0201 	orr.w	r2, r2, #1
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	e000      	b.n	800dff0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	40010000 	.word	0x40010000
 800e004:	40000400 	.word	0x40000400
 800e008:	40000800 	.word	0x40000800
 800e00c:	40000c00 	.word	0x40000c00
 800e010:	40010400 	.word	0x40010400
 800e014:	40001800 	.word	0x40001800
 800e018:	40014000 	.word	0x40014000
 800e01c:	4000e000 	.word	0x4000e000
 800e020:	4000e400 	.word	0x4000e400
 800e024:	00010007 	.word	0x00010007

0800e028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	e049      	b.n	800e0ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 f841 	bl	800e0d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2202      	movs	r2, #2
 800e058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3304      	adds	r3, #4
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f000 fb7a 	bl	800e760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e0d6:	b480      	push	{r7}
 800e0d8:	b083      	sub	sp, #12
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e0de:	bf00      	nop
 800e0e0:	370c      	adds	r7, #12
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr

0800e0ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f003 0302 	and.w	r3, r3, #2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d020      	beq.n	800e14e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f003 0302 	and.w	r3, r3, #2
 800e112:	2b00      	cmp	r3, #0
 800e114:	d01b      	beq.n	800e14e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f06f 0202 	mvn.w	r2, #2
 800e11e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	699b      	ldr	r3, [r3, #24]
 800e12c:	f003 0303 	and.w	r3, r3, #3
 800e130:	2b00      	cmp	r3, #0
 800e132:	d003      	beq.n	800e13c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 faf5 	bl	800e724 <HAL_TIM_IC_CaptureCallback>
 800e13a:	e005      	b.n	800e148 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fae7 	bl	800e710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 faf8 	bl	800e738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	f003 0304 	and.w	r3, r3, #4
 800e154:	2b00      	cmp	r3, #0
 800e156:	d020      	beq.n	800e19a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f003 0304 	and.w	r3, r3, #4
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01b      	beq.n	800e19a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f06f 0204 	mvn.w	r2, #4
 800e16a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2202      	movs	r2, #2
 800e170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	699b      	ldr	r3, [r3, #24]
 800e178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 facf 	bl	800e724 <HAL_TIM_IC_CaptureCallback>
 800e186:	e005      	b.n	800e194 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fac1 	bl	800e710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 fad2 	bl	800e738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	f003 0308 	and.w	r3, r3, #8
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d020      	beq.n	800e1e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f003 0308 	and.w	r3, r3, #8
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d01b      	beq.n	800e1e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f06f 0208 	mvn.w	r2, #8
 800e1b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2204      	movs	r2, #4
 800e1bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	f003 0303 	and.w	r3, r3, #3
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d003      	beq.n	800e1d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 faa9 	bl	800e724 <HAL_TIM_IC_CaptureCallback>
 800e1d2:	e005      	b.n	800e1e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 fa9b 	bl	800e710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 faac 	bl	800e738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	f003 0310 	and.w	r3, r3, #16
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d020      	beq.n	800e232 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f003 0310 	and.w	r3, r3, #16
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d01b      	beq.n	800e232 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f06f 0210 	mvn.w	r2, #16
 800e202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2208      	movs	r2, #8
 800e208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	69db      	ldr	r3, [r3, #28]
 800e210:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e214:	2b00      	cmp	r3, #0
 800e216:	d003      	beq.n	800e220 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 fa83 	bl	800e724 <HAL_TIM_IC_CaptureCallback>
 800e21e:	e005      	b.n	800e22c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fa75 	bl	800e710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fa86 	bl	800e738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00c      	beq.n	800e256 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	2b00      	cmp	r3, #0
 800e244:	d007      	beq.n	800e256 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f06f 0201 	mvn.w	r2, #1
 800e24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7f3 fc9f 	bl	8001b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d104      	bne.n	800e26a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00c      	beq.n	800e284 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e270:	2b00      	cmp	r3, #0
 800e272:	d007      	beq.n	800e284 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 ffc6 	bl	800f210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00c      	beq.n	800e2a8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e294:	2b00      	cmp	r3, #0
 800e296:	d007      	beq.n	800e2a8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 ffbe 	bl	800f224 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00c      	beq.n	800e2cc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d007      	beq.n	800e2cc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fa40 	bl	800e74c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	f003 0320 	and.w	r3, r3, #32
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00c      	beq.n	800e2f0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f003 0320 	and.w	r3, r3, #32
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d007      	beq.n	800e2f0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f06f 0220 	mvn.w	r2, #32
 800e2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 ff86 	bl	800f1fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e2f0:	bf00      	nop
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d101      	bne.n	800e316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e312:	2302      	movs	r3, #2
 800e314:	e0ff      	b.n	800e516 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b14      	cmp	r3, #20
 800e322:	f200 80f0 	bhi.w	800e506 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e326:	a201      	add	r2, pc, #4	@ (adr r2, 800e32c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32c:	0800e381 	.word	0x0800e381
 800e330:	0800e507 	.word	0x0800e507
 800e334:	0800e507 	.word	0x0800e507
 800e338:	0800e507 	.word	0x0800e507
 800e33c:	0800e3c1 	.word	0x0800e3c1
 800e340:	0800e507 	.word	0x0800e507
 800e344:	0800e507 	.word	0x0800e507
 800e348:	0800e507 	.word	0x0800e507
 800e34c:	0800e403 	.word	0x0800e403
 800e350:	0800e507 	.word	0x0800e507
 800e354:	0800e507 	.word	0x0800e507
 800e358:	0800e507 	.word	0x0800e507
 800e35c:	0800e443 	.word	0x0800e443
 800e360:	0800e507 	.word	0x0800e507
 800e364:	0800e507 	.word	0x0800e507
 800e368:	0800e507 	.word	0x0800e507
 800e36c:	0800e485 	.word	0x0800e485
 800e370:	0800e507 	.word	0x0800e507
 800e374:	0800e507 	.word	0x0800e507
 800e378:	0800e507 	.word	0x0800e507
 800e37c:	0800e4c5 	.word	0x0800e4c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	68b9      	ldr	r1, [r7, #8]
 800e386:	4618      	mov	r0, r3
 800e388:	f000 fa9c 	bl	800e8c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	699a      	ldr	r2, [r3, #24]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f042 0208 	orr.w	r2, r2, #8
 800e39a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	699a      	ldr	r2, [r3, #24]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 0204 	bic.w	r2, r2, #4
 800e3aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6999      	ldr	r1, [r3, #24]
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	691a      	ldr	r2, [r3, #16]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	430a      	orrs	r2, r1
 800e3bc:	619a      	str	r2, [r3, #24]
      break;
 800e3be:	e0a5      	b.n	800e50c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68b9      	ldr	r1, [r7, #8]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 fb0c 	bl	800e9e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	699a      	ldr	r2, [r3, #24]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	699a      	ldr	r2, [r3, #24]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6999      	ldr	r1, [r3, #24]
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	021a      	lsls	r2, r3, #8
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	430a      	orrs	r2, r1
 800e3fe:	619a      	str	r2, [r3, #24]
      break;
 800e400:	e084      	b.n	800e50c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68b9      	ldr	r1, [r7, #8]
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 fb75 	bl	800eaf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	69da      	ldr	r2, [r3, #28]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f042 0208 	orr.w	r2, r2, #8
 800e41c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	69da      	ldr	r2, [r3, #28]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f022 0204 	bic.w	r2, r2, #4
 800e42c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	69d9      	ldr	r1, [r3, #28]
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	691a      	ldr	r2, [r3, #16]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	430a      	orrs	r2, r1
 800e43e:	61da      	str	r2, [r3, #28]
      break;
 800e440:	e064      	b.n	800e50c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	68b9      	ldr	r1, [r7, #8]
 800e448:	4618      	mov	r0, r3
 800e44a:	f000 fbdd 	bl	800ec08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	69da      	ldr	r2, [r3, #28]
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e45c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69da      	ldr	r2, [r3, #28]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e46c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	69d9      	ldr	r1, [r3, #28]
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	021a      	lsls	r2, r3, #8
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	430a      	orrs	r2, r1
 800e480:	61da      	str	r2, [r3, #28]
      break;
 800e482:	e043      	b.n	800e50c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	68b9      	ldr	r1, [r7, #8]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 fc26 	bl	800ecdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f042 0208 	orr.w	r2, r2, #8
 800e49e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f022 0204 	bic.w	r2, r2, #4
 800e4ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	691a      	ldr	r2, [r3, #16]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	430a      	orrs	r2, r1
 800e4c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e4c2:	e023      	b.n	800e50c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	68b9      	ldr	r1, [r7, #8]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 fc6a 	bl	800eda4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	021a      	lsls	r2, r3, #8
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	430a      	orrs	r2, r1
 800e502:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e504:	e002      	b.n	800e50c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	75fb      	strb	r3, [r7, #23]
      break;
 800e50a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e514:	7dfb      	ldrb	r3, [r7, #23]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop

0800e520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e52a:	2300      	movs	r3, #0
 800e52c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e534:	2b01      	cmp	r3, #1
 800e536:	d101      	bne.n	800e53c <HAL_TIM_ConfigClockSource+0x1c>
 800e538:	2302      	movs	r3, #2
 800e53a:	e0dc      	b.n	800e6f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2202      	movs	r2, #2
 800e548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e554:	68ba      	ldr	r2, [r7, #8]
 800e556:	4b6a      	ldr	r3, [pc, #424]	@ (800e700 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e558:	4013      	ands	r3, r2
 800e55a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a64      	ldr	r2, [pc, #400]	@ (800e704 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e572:	4293      	cmp	r3, r2
 800e574:	f000 80a9 	beq.w	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e578:	4a62      	ldr	r2, [pc, #392]	@ (800e704 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	f200 80ae 	bhi.w	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e580:	4a61      	ldr	r2, [pc, #388]	@ (800e708 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e582:	4293      	cmp	r3, r2
 800e584:	f000 80a1 	beq.w	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e588:	4a5f      	ldr	r2, [pc, #380]	@ (800e708 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	f200 80a6 	bhi.w	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e590:	4a5e      	ldr	r2, [pc, #376]	@ (800e70c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e592:	4293      	cmp	r3, r2
 800e594:	f000 8099 	beq.w	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e598:	4a5c      	ldr	r2, [pc, #368]	@ (800e70c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	f200 809e 	bhi.w	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e5a4:	f000 8091 	beq.w	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e5a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e5ac:	f200 8096 	bhi.w	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5b4:	f000 8089 	beq.w	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e5b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5bc:	f200 808e 	bhi.w	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5c4:	d03e      	beq.n	800e644 <HAL_TIM_ConfigClockSource+0x124>
 800e5c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e5ca:	f200 8087 	bhi.w	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5d2:	f000 8086 	beq.w	800e6e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800e5d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5da:	d87f      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5dc:	2b70      	cmp	r3, #112	@ 0x70
 800e5de:	d01a      	beq.n	800e616 <HAL_TIM_ConfigClockSource+0xf6>
 800e5e0:	2b70      	cmp	r3, #112	@ 0x70
 800e5e2:	d87b      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5e4:	2b60      	cmp	r3, #96	@ 0x60
 800e5e6:	d050      	beq.n	800e68a <HAL_TIM_ConfigClockSource+0x16a>
 800e5e8:	2b60      	cmp	r3, #96	@ 0x60
 800e5ea:	d877      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5ec:	2b50      	cmp	r3, #80	@ 0x50
 800e5ee:	d03c      	beq.n	800e66a <HAL_TIM_ConfigClockSource+0x14a>
 800e5f0:	2b50      	cmp	r3, #80	@ 0x50
 800e5f2:	d873      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5f4:	2b40      	cmp	r3, #64	@ 0x40
 800e5f6:	d058      	beq.n	800e6aa <HAL_TIM_ConfigClockSource+0x18a>
 800e5f8:	2b40      	cmp	r3, #64	@ 0x40
 800e5fa:	d86f      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e5fc:	2b30      	cmp	r3, #48	@ 0x30
 800e5fe:	d064      	beq.n	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e600:	2b30      	cmp	r3, #48	@ 0x30
 800e602:	d86b      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e604:	2b20      	cmp	r3, #32
 800e606:	d060      	beq.n	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e608:	2b20      	cmp	r3, #32
 800e60a:	d867      	bhi.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d05c      	beq.n	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e610:	2b10      	cmp	r3, #16
 800e612:	d05a      	beq.n	800e6ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e614:	e062      	b.n	800e6dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e626:	f000 fca1 	bl	800ef6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	609a      	str	r2, [r3, #8]
      break;
 800e642:	e04f      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e654:	f000 fc8a 	bl	800ef6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689a      	ldr	r2, [r3, #8]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e666:	609a      	str	r2, [r3, #8]
      break;
 800e668:	e03c      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e676:	461a      	mov	r2, r3
 800e678:	f000 fbfa 	bl	800ee70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2150      	movs	r1, #80	@ 0x50
 800e682:	4618      	mov	r0, r3
 800e684:	f000 fc54 	bl	800ef30 <TIM_ITRx_SetConfig>
      break;
 800e688:	e02c      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e696:	461a      	mov	r2, r3
 800e698:	f000 fc19 	bl	800eece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2160      	movs	r1, #96	@ 0x60
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 fc44 	bl	800ef30 <TIM_ITRx_SetConfig>
      break;
 800e6a8:	e01c      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f000 fbda 	bl	800ee70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2140      	movs	r1, #64	@ 0x40
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fc34 	bl	800ef30 <TIM_ITRx_SetConfig>
      break;
 800e6c8:	e00c      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	f000 fc2b 	bl	800ef30 <TIM_ITRx_SetConfig>
      break;
 800e6da:	e003      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	73fb      	strb	r3, [r7, #15]
      break;
 800e6e0:	e000      	b.n	800e6e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e6e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	ffceff88 	.word	0xffceff88
 800e704:	00100040 	.word	0x00100040
 800e708:	00100030 	.word	0x00100030
 800e70c:	00100020 	.word	0x00100020

0800e710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a4a      	ldr	r2, [pc, #296]	@ (800e89c <TIM_Base_SetConfig+0x13c>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d013      	beq.n	800e7a0 <TIM_Base_SetConfig+0x40>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e77e:	d00f      	beq.n	800e7a0 <TIM_Base_SetConfig+0x40>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4a47      	ldr	r2, [pc, #284]	@ (800e8a0 <TIM_Base_SetConfig+0x140>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d00b      	beq.n	800e7a0 <TIM_Base_SetConfig+0x40>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4a46      	ldr	r2, [pc, #280]	@ (800e8a4 <TIM_Base_SetConfig+0x144>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d007      	beq.n	800e7a0 <TIM_Base_SetConfig+0x40>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4a45      	ldr	r2, [pc, #276]	@ (800e8a8 <TIM_Base_SetConfig+0x148>)
 800e794:	4293      	cmp	r3, r2
 800e796:	d003      	beq.n	800e7a0 <TIM_Base_SetConfig+0x40>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a44      	ldr	r2, [pc, #272]	@ (800e8ac <TIM_Base_SetConfig+0x14c>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d108      	bne.n	800e7b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a39      	ldr	r2, [pc, #228]	@ (800e89c <TIM_Base_SetConfig+0x13c>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d027      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7c0:	d023      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4a36      	ldr	r2, [pc, #216]	@ (800e8a0 <TIM_Base_SetConfig+0x140>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d01f      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4a35      	ldr	r2, [pc, #212]	@ (800e8a4 <TIM_Base_SetConfig+0x144>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d01b      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4a34      	ldr	r2, [pc, #208]	@ (800e8a8 <TIM_Base_SetConfig+0x148>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d017      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4a33      	ldr	r2, [pc, #204]	@ (800e8ac <TIM_Base_SetConfig+0x14c>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d013      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4a32      	ldr	r2, [pc, #200]	@ (800e8b0 <TIM_Base_SetConfig+0x150>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d00f      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4a31      	ldr	r2, [pc, #196]	@ (800e8b4 <TIM_Base_SetConfig+0x154>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d00b      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a30      	ldr	r2, [pc, #192]	@ (800e8b8 <TIM_Base_SetConfig+0x158>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d007      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4a2f      	ldr	r2, [pc, #188]	@ (800e8bc <TIM_Base_SetConfig+0x15c>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d003      	beq.n	800e80a <TIM_Base_SetConfig+0xaa>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a2e      	ldr	r2, [pc, #184]	@ (800e8c0 <TIM_Base_SetConfig+0x160>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d108      	bne.n	800e81c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	4313      	orrs	r3, r2
 800e81a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	4313      	orrs	r3, r2
 800e828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	689a      	ldr	r2, [r3, #8]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a16      	ldr	r2, [pc, #88]	@ (800e89c <TIM_Base_SetConfig+0x13c>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d00f      	beq.n	800e868 <TIM_Base_SetConfig+0x108>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a18      	ldr	r2, [pc, #96]	@ (800e8ac <TIM_Base_SetConfig+0x14c>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d00b      	beq.n	800e868 <TIM_Base_SetConfig+0x108>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a17      	ldr	r2, [pc, #92]	@ (800e8b0 <TIM_Base_SetConfig+0x150>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d007      	beq.n	800e868 <TIM_Base_SetConfig+0x108>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a16      	ldr	r2, [pc, #88]	@ (800e8b4 <TIM_Base_SetConfig+0x154>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d003      	beq.n	800e868 <TIM_Base_SetConfig+0x108>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	4a15      	ldr	r2, [pc, #84]	@ (800e8b8 <TIM_Base_SetConfig+0x158>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d103      	bne.n	800e870 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	691a      	ldr	r2, [r3, #16]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	691b      	ldr	r3, [r3, #16]
 800e87a:	f003 0301 	and.w	r3, r3, #1
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d105      	bne.n	800e88e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	f023 0201 	bic.w	r2, r3, #1
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	611a      	str	r2, [r3, #16]
  }
}
 800e88e:	bf00      	nop
 800e890:	3714      	adds	r7, #20
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	40010000 	.word	0x40010000
 800e8a0:	40000400 	.word	0x40000400
 800e8a4:	40000800 	.word	0x40000800
 800e8a8:	40000c00 	.word	0x40000c00
 800e8ac:	40010400 	.word	0x40010400
 800e8b0:	40014000 	.word	0x40014000
 800e8b4:	40014400 	.word	0x40014400
 800e8b8:	40014800 	.word	0x40014800
 800e8bc:	4000e000 	.word	0x4000e000
 800e8c0:	4000e400 	.word	0x4000e400

0800e8c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b087      	sub	sp, #28
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6a1b      	ldr	r3, [r3, #32]
 800e8d8:	f023 0201 	bic.w	r2, r3, #1
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	699b      	ldr	r3, [r3, #24]
 800e8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8ec:	68fa      	ldr	r2, [r7, #12]
 800e8ee:	4b37      	ldr	r3, [pc, #220]	@ (800e9cc <TIM_OC1_SetConfig+0x108>)
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f023 0303 	bic.w	r3, r3, #3
 800e8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	4313      	orrs	r3, r2
 800e904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f023 0302 	bic.w	r3, r3, #2
 800e90c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	689b      	ldr	r3, [r3, #8]
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	4313      	orrs	r3, r2
 800e916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a2d      	ldr	r2, [pc, #180]	@ (800e9d0 <TIM_OC1_SetConfig+0x10c>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00f      	beq.n	800e940 <TIM_OC1_SetConfig+0x7c>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a2c      	ldr	r2, [pc, #176]	@ (800e9d4 <TIM_OC1_SetConfig+0x110>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d00b      	beq.n	800e940 <TIM_OC1_SetConfig+0x7c>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a2b      	ldr	r2, [pc, #172]	@ (800e9d8 <TIM_OC1_SetConfig+0x114>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d007      	beq.n	800e940 <TIM_OC1_SetConfig+0x7c>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a2a      	ldr	r2, [pc, #168]	@ (800e9dc <TIM_OC1_SetConfig+0x118>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d003      	beq.n	800e940 <TIM_OC1_SetConfig+0x7c>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a29      	ldr	r2, [pc, #164]	@ (800e9e0 <TIM_OC1_SetConfig+0x11c>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d10c      	bne.n	800e95a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	f023 0308 	bic.w	r3, r3, #8
 800e946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	697a      	ldr	r2, [r7, #20]
 800e94e:	4313      	orrs	r3, r2
 800e950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	f023 0304 	bic.w	r3, r3, #4
 800e958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a1c      	ldr	r2, [pc, #112]	@ (800e9d0 <TIM_OC1_SetConfig+0x10c>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d00f      	beq.n	800e982 <TIM_OC1_SetConfig+0xbe>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a1b      	ldr	r2, [pc, #108]	@ (800e9d4 <TIM_OC1_SetConfig+0x110>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d00b      	beq.n	800e982 <TIM_OC1_SetConfig+0xbe>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a1a      	ldr	r2, [pc, #104]	@ (800e9d8 <TIM_OC1_SetConfig+0x114>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d007      	beq.n	800e982 <TIM_OC1_SetConfig+0xbe>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a19      	ldr	r2, [pc, #100]	@ (800e9dc <TIM_OC1_SetConfig+0x118>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d003      	beq.n	800e982 <TIM_OC1_SetConfig+0xbe>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a18      	ldr	r2, [pc, #96]	@ (800e9e0 <TIM_OC1_SetConfig+0x11c>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d111      	bne.n	800e9a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	4313      	orrs	r3, r2
 800e99a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	693a      	ldr	r2, [r7, #16]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	693a      	ldr	r2, [r7, #16]
 800e9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	621a      	str	r2, [r3, #32]
}
 800e9c0:	bf00      	nop
 800e9c2:	371c      	adds	r7, #28
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	fffeff8f 	.word	0xfffeff8f
 800e9d0:	40010000 	.word	0x40010000
 800e9d4:	40010400 	.word	0x40010400
 800e9d8:	40014000 	.word	0x40014000
 800e9dc:	40014400 	.word	0x40014400
 800e9e0:	40014800 	.word	0x40014800

0800e9e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a1b      	ldr	r3, [r3, #32]
 800e9f8:	f023 0210 	bic.w	r2, r3, #16
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	4b34      	ldr	r3, [pc, #208]	@ (800eae0 <TIM_OC2_SetConfig+0xfc>)
 800ea10:	4013      	ands	r3, r2
 800ea12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	f023 0320 	bic.w	r3, r3, #32
 800ea2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	011b      	lsls	r3, r3, #4
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a29      	ldr	r2, [pc, #164]	@ (800eae4 <TIM_OC2_SetConfig+0x100>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d003      	beq.n	800ea4c <TIM_OC2_SetConfig+0x68>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a28      	ldr	r2, [pc, #160]	@ (800eae8 <TIM_OC2_SetConfig+0x104>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d10d      	bne.n	800ea68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	011b      	lsls	r3, r3, #4
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	4a1e      	ldr	r2, [pc, #120]	@ (800eae4 <TIM_OC2_SetConfig+0x100>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d00f      	beq.n	800ea90 <TIM_OC2_SetConfig+0xac>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	4a1d      	ldr	r2, [pc, #116]	@ (800eae8 <TIM_OC2_SetConfig+0x104>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d00b      	beq.n	800ea90 <TIM_OC2_SetConfig+0xac>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4a1c      	ldr	r2, [pc, #112]	@ (800eaec <TIM_OC2_SetConfig+0x108>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d007      	beq.n	800ea90 <TIM_OC2_SetConfig+0xac>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4a1b      	ldr	r2, [pc, #108]	@ (800eaf0 <TIM_OC2_SetConfig+0x10c>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d003      	beq.n	800ea90 <TIM_OC2_SetConfig+0xac>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	4a1a      	ldr	r2, [pc, #104]	@ (800eaf4 <TIM_OC2_SetConfig+0x110>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d113      	bne.n	800eab8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	693a      	ldr	r2, [r7, #16]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	693a      	ldr	r2, [r7, #16]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	693a      	ldr	r2, [r7, #16]
 800eabc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	697a      	ldr	r2, [r7, #20]
 800ead0:	621a      	str	r2, [r3, #32]
}
 800ead2:	bf00      	nop
 800ead4:	371c      	adds	r7, #28
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	feff8fff 	.word	0xfeff8fff
 800eae4:	40010000 	.word	0x40010000
 800eae8:	40010400 	.word	0x40010400
 800eaec:	40014000 	.word	0x40014000
 800eaf0:	40014400 	.word	0x40014400
 800eaf4:	40014800 	.word	0x40014800

0800eaf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a1b      	ldr	r3, [r3, #32]
 800eb0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	69db      	ldr	r3, [r3, #28]
 800eb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	4b33      	ldr	r3, [pc, #204]	@ (800ebf0 <TIM_OC3_SetConfig+0xf8>)
 800eb24:	4013      	ands	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f023 0303 	bic.w	r3, r3, #3
 800eb2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eb40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	021b      	lsls	r3, r3, #8
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a28      	ldr	r2, [pc, #160]	@ (800ebf4 <TIM_OC3_SetConfig+0xfc>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d003      	beq.n	800eb5e <TIM_OC3_SetConfig+0x66>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a27      	ldr	r2, [pc, #156]	@ (800ebf8 <TIM_OC3_SetConfig+0x100>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d10d      	bne.n	800eb7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	021b      	lsls	r3, r3, #8
 800eb6c:	697a      	ldr	r2, [r7, #20]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a1d      	ldr	r2, [pc, #116]	@ (800ebf4 <TIM_OC3_SetConfig+0xfc>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d00f      	beq.n	800eba2 <TIM_OC3_SetConfig+0xaa>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a1c      	ldr	r2, [pc, #112]	@ (800ebf8 <TIM_OC3_SetConfig+0x100>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d00b      	beq.n	800eba2 <TIM_OC3_SetConfig+0xaa>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a1b      	ldr	r2, [pc, #108]	@ (800ebfc <TIM_OC3_SetConfig+0x104>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d007      	beq.n	800eba2 <TIM_OC3_SetConfig+0xaa>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a1a      	ldr	r2, [pc, #104]	@ (800ec00 <TIM_OC3_SetConfig+0x108>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d003      	beq.n	800eba2 <TIM_OC3_SetConfig+0xaa>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a19      	ldr	r2, [pc, #100]	@ (800ec04 <TIM_OC3_SetConfig+0x10c>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d113      	bne.n	800ebca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ebb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	695b      	ldr	r3, [r3, #20]
 800ebb6:	011b      	lsls	r3, r3, #4
 800ebb8:	693a      	ldr	r2, [r7, #16]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	699b      	ldr	r3, [r3, #24]
 800ebc2:	011b      	lsls	r3, r3, #4
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	685a      	ldr	r2, [r3, #4]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	697a      	ldr	r2, [r7, #20]
 800ebe2:	621a      	str	r2, [r3, #32]
}
 800ebe4:	bf00      	nop
 800ebe6:	371c      	adds	r7, #28
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr
 800ebf0:	fffeff8f 	.word	0xfffeff8f
 800ebf4:	40010000 	.word	0x40010000
 800ebf8:	40010400 	.word	0x40010400
 800ebfc:	40014000 	.word	0x40014000
 800ec00:	40014400 	.word	0x40014400
 800ec04:	40014800 	.word	0x40014800

0800ec08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6a1b      	ldr	r3, [r3, #32]
 800ec16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	4b24      	ldr	r3, [pc, #144]	@ (800ecc4 <TIM_OC4_SetConfig+0xbc>)
 800ec34:	4013      	ands	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	021b      	lsls	r3, r3, #8
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	031b      	lsls	r3, r3, #12
 800ec5a:	693a      	ldr	r2, [r7, #16]
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a19      	ldr	r2, [pc, #100]	@ (800ecc8 <TIM_OC4_SetConfig+0xc0>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d00f      	beq.n	800ec88 <TIM_OC4_SetConfig+0x80>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a18      	ldr	r2, [pc, #96]	@ (800eccc <TIM_OC4_SetConfig+0xc4>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d00b      	beq.n	800ec88 <TIM_OC4_SetConfig+0x80>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a17      	ldr	r2, [pc, #92]	@ (800ecd0 <TIM_OC4_SetConfig+0xc8>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d007      	beq.n	800ec88 <TIM_OC4_SetConfig+0x80>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a16      	ldr	r2, [pc, #88]	@ (800ecd4 <TIM_OC4_SetConfig+0xcc>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d003      	beq.n	800ec88 <TIM_OC4_SetConfig+0x80>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a15      	ldr	r2, [pc, #84]	@ (800ecd8 <TIM_OC4_SetConfig+0xd0>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d109      	bne.n	800ec9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ec8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	019b      	lsls	r3, r3, #6
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	697a      	ldr	r2, [r7, #20]
 800eca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	693a      	ldr	r2, [r7, #16]
 800ecb4:	621a      	str	r2, [r3, #32]
}
 800ecb6:	bf00      	nop
 800ecb8:	371c      	adds	r7, #28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	feff8fff 	.word	0xfeff8fff
 800ecc8:	40010000 	.word	0x40010000
 800eccc:	40010400 	.word	0x40010400
 800ecd0:	40014000 	.word	0x40014000
 800ecd4:	40014400 	.word	0x40014400
 800ecd8:	40014800 	.word	0x40014800

0800ecdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	4b21      	ldr	r3, [pc, #132]	@ (800ed8c <TIM_OC5_SetConfig+0xb0>)
 800ed08:	4013      	ands	r3, r2
 800ed0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	4313      	orrs	r3, r2
 800ed14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ed1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	041b      	lsls	r3, r3, #16
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a18      	ldr	r2, [pc, #96]	@ (800ed90 <TIM_OC5_SetConfig+0xb4>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d00f      	beq.n	800ed52 <TIM_OC5_SetConfig+0x76>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a17      	ldr	r2, [pc, #92]	@ (800ed94 <TIM_OC5_SetConfig+0xb8>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d00b      	beq.n	800ed52 <TIM_OC5_SetConfig+0x76>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a16      	ldr	r2, [pc, #88]	@ (800ed98 <TIM_OC5_SetConfig+0xbc>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d007      	beq.n	800ed52 <TIM_OC5_SetConfig+0x76>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a15      	ldr	r2, [pc, #84]	@ (800ed9c <TIM_OC5_SetConfig+0xc0>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d003      	beq.n	800ed52 <TIM_OC5_SetConfig+0x76>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a14      	ldr	r2, [pc, #80]	@ (800eda0 <TIM_OC5_SetConfig+0xc4>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d109      	bne.n	800ed66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	021b      	lsls	r3, r3, #8
 800ed60:	697a      	ldr	r2, [r7, #20]
 800ed62:	4313      	orrs	r3, r2
 800ed64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	697a      	ldr	r2, [r7, #20]
 800ed6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	621a      	str	r2, [r3, #32]
}
 800ed80:	bf00      	nop
 800ed82:	371c      	adds	r7, #28
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr
 800ed8c:	fffeff8f 	.word	0xfffeff8f
 800ed90:	40010000 	.word	0x40010000
 800ed94:	40010400 	.word	0x40010400
 800ed98:	40014000 	.word	0x40014000
 800ed9c:	40014400 	.word	0x40014400
 800eda0:	40014800 	.word	0x40014800

0800eda4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b087      	sub	sp, #28
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a1b      	ldr	r3, [r3, #32]
 800edb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	4b22      	ldr	r3, [pc, #136]	@ (800ee58 <TIM_OC6_SetConfig+0xb4>)
 800edd0:	4013      	ands	r3, r2
 800edd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	021b      	lsls	r3, r3, #8
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	4313      	orrs	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ede6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	051b      	lsls	r3, r3, #20
 800edee:	693a      	ldr	r2, [r7, #16]
 800edf0:	4313      	orrs	r3, r2
 800edf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a19      	ldr	r2, [pc, #100]	@ (800ee5c <TIM_OC6_SetConfig+0xb8>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d00f      	beq.n	800ee1c <TIM_OC6_SetConfig+0x78>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a18      	ldr	r2, [pc, #96]	@ (800ee60 <TIM_OC6_SetConfig+0xbc>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d00b      	beq.n	800ee1c <TIM_OC6_SetConfig+0x78>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4a17      	ldr	r2, [pc, #92]	@ (800ee64 <TIM_OC6_SetConfig+0xc0>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d007      	beq.n	800ee1c <TIM_OC6_SetConfig+0x78>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a16      	ldr	r2, [pc, #88]	@ (800ee68 <TIM_OC6_SetConfig+0xc4>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d003      	beq.n	800ee1c <TIM_OC6_SetConfig+0x78>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a15      	ldr	r2, [pc, #84]	@ (800ee6c <TIM_OC6_SetConfig+0xc8>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d109      	bne.n	800ee30 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	695b      	ldr	r3, [r3, #20]
 800ee28:	029b      	lsls	r3, r3, #10
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	685a      	ldr	r2, [r3, #4]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	621a      	str	r2, [r3, #32]
}
 800ee4a:	bf00      	nop
 800ee4c:	371c      	adds	r7, #28
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	feff8fff 	.word	0xfeff8fff
 800ee5c:	40010000 	.word	0x40010000
 800ee60:	40010400 	.word	0x40010400
 800ee64:	40014000 	.word	0x40014000
 800ee68:	40014400 	.word	0x40014400
 800ee6c:	40014800 	.word	0x40014800

0800ee70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b087      	sub	sp, #28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6a1b      	ldr	r3, [r3, #32]
 800ee80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	f023 0201 	bic.w	r2, r3, #1
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	699b      	ldr	r3, [r3, #24]
 800ee92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	011b      	lsls	r3, r3, #4
 800eea0:	693a      	ldr	r2, [r7, #16]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	f023 030a 	bic.w	r3, r3, #10
 800eeac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	621a      	str	r2, [r3, #32]
}
 800eec2:	bf00      	nop
 800eec4:	371c      	adds	r7, #28
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr

0800eece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eece:	b480      	push	{r7}
 800eed0:	b087      	sub	sp, #28
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	60f8      	str	r0, [r7, #12]
 800eed6:	60b9      	str	r1, [r7, #8]
 800eed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6a1b      	ldr	r3, [r3, #32]
 800eee4:	f023 0210 	bic.w	r2, r3, #16
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	699b      	ldr	r3, [r3, #24]
 800eef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	031b      	lsls	r3, r3, #12
 800eefe:	693a      	ldr	r2, [r7, #16]
 800ef00:	4313      	orrs	r3, r2
 800ef02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ef0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	697a      	ldr	r2, [r7, #20]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	621a      	str	r2, [r3, #32]
}
 800ef22:	bf00      	nop
 800ef24:	371c      	adds	r7, #28
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
	...

0800ef30 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	4b09      	ldr	r3, [pc, #36]	@ (800ef68 <TIM_ITRx_SetConfig+0x38>)
 800ef44:	4013      	ands	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4313      	orrs	r3, r2
 800ef4e:	f043 0307 	orr.w	r3, r3, #7
 800ef52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	609a      	str	r2, [r3, #8]
}
 800ef5a:	bf00      	nop
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	ffcfff8f 	.word	0xffcfff8f

0800ef6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b087      	sub	sp, #28
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	607a      	str	r2, [r7, #4]
 800ef78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	689b      	ldr	r3, [r3, #8]
 800ef7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ef86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	021a      	lsls	r2, r3, #8
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	697a      	ldr	r2, [r7, #20]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	697a      	ldr	r2, [r7, #20]
 800ef9e:	609a      	str	r2, [r3, #8]
}
 800efa0:	bf00      	nop
 800efa2:	371c      	adds	r7, #28
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d101      	bne.n	800efc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800efc0:	2302      	movs	r3, #2
 800efc2:	e077      	b.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2202      	movs	r2, #2
 800efd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a35      	ldr	r2, [pc, #212]	@ (800f0c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d004      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a34      	ldr	r2, [pc, #208]	@ (800f0c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d108      	bne.n	800f00a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800effe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	4313      	orrs	r3, r2
 800f008:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	4313      	orrs	r3, r2
 800f01a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a25      	ldr	r2, [pc, #148]	@ (800f0c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d02c      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f036:	d027      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a22      	ldr	r2, [pc, #136]	@ (800f0c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d022      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a21      	ldr	r2, [pc, #132]	@ (800f0cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d01d      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a1f      	ldr	r2, [pc, #124]	@ (800f0d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d018      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a1a      	ldr	r2, [pc, #104]	@ (800f0c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d013      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a1b      	ldr	r2, [pc, #108]	@ (800f0d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d00e      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4a1a      	ldr	r2, [pc, #104]	@ (800f0d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d009      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a18      	ldr	r2, [pc, #96]	@ (800f0dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d004      	beq.n	800f088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4a17      	ldr	r2, [pc, #92]	@ (800f0e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d10c      	bne.n	800f0a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f08e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	689b      	ldr	r3, [r3, #8]
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	4313      	orrs	r3, r2
 800f098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3714      	adds	r7, #20
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr
 800f0c0:	40010000 	.word	0x40010000
 800f0c4:	40010400 	.word	0x40010400
 800f0c8:	40000400 	.word	0x40000400
 800f0cc:	40000800 	.word	0x40000800
 800f0d0:	40000c00 	.word	0x40000c00
 800f0d4:	40001800 	.word	0x40001800
 800f0d8:	40014000 	.word	0x40014000
 800f0dc:	4000e000 	.word	0x4000e000
 800f0e0:	4000e400 	.word	0x4000e400

0800f0e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d101      	bne.n	800f100 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	e073      	b.n	800f1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	4313      	orrs	r3, r2
 800f114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	4313      	orrs	r3, r2
 800f122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	4313      	orrs	r3, r2
 800f130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	695b      	ldr	r3, [r3, #20]
 800f158:	4313      	orrs	r3, r2
 800f15a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f166:	4313      	orrs	r3, r2
 800f168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	699b      	ldr	r3, [r3, #24]
 800f174:	041b      	lsls	r3, r3, #16
 800f176:	4313      	orrs	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	69db      	ldr	r3, [r3, #28]
 800f184:	4313      	orrs	r3, r2
 800f186:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4a19      	ldr	r2, [pc, #100]	@ (800f1f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d004      	beq.n	800f19c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a18      	ldr	r2, [pc, #96]	@ (800f1f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d11c      	bne.n	800f1d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a6:	051b      	lsls	r3, r3, #20
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	6a1b      	ldr	r3, [r3, #32]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	40010000 	.word	0x40010000
 800f1f8:	40010400 	.word	0x40010400

0800f1fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr

0800f238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f246:	2301      	movs	r3, #1
 800f248:	e042      	b.n	800f2d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f250:	2b00      	cmp	r3, #0
 800f252:	d106      	bne.n	800f262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7f3 f9d1 	bl	8002604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2224      	movs	r2, #36	@ 0x24
 800f266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f022 0201 	bic.w	r2, r2, #1
 800f278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 ff22 	bl	80100cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f8b3 	bl	800f3f4 <UART_SetConfig>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b01      	cmp	r3, #1
 800f292:	d101      	bne.n	800f298 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f294:	2301      	movs	r3, #1
 800f296:	e01b      	b.n	800f2d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f2a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	689a      	ldr	r2, [r3, #8]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f2b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f042 0201 	orr.w	r2, r2, #1
 800f2c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 ffa1 	bl	8010210 <UART_CheckIdleState>
 800f2ce:	4603      	mov	r3, r0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	@ 0x28
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	603b      	str	r3, [r7, #0]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2ee:	2b20      	cmp	r3, #32
 800f2f0:	d17b      	bne.n	800f3ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d002      	beq.n	800f2fe <HAL_UART_Transmit+0x26>
 800f2f8:	88fb      	ldrh	r3, [r7, #6]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d101      	bne.n	800f302 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e074      	b.n	800f3ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	2221      	movs	r2, #33	@ 0x21
 800f30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f312:	f7f3 fc07 	bl	8002b24 <HAL_GetTick>
 800f316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	88fa      	ldrh	r2, [r7, #6]
 800f31c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	88fa      	ldrh	r2, [r7, #6]
 800f324:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f330:	d108      	bne.n	800f344 <HAL_UART_Transmit+0x6c>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d104      	bne.n	800f344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f33a:	2300      	movs	r3, #0
 800f33c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	61bb      	str	r3, [r7, #24]
 800f342:	e003      	b.n	800f34c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f348:	2300      	movs	r3, #0
 800f34a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f34c:	e030      	b.n	800f3b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2200      	movs	r2, #0
 800f356:	2180      	movs	r1, #128	@ 0x80
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f001 f803 	bl	8010364 <UART_WaitOnFlagUntilTimeout>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d005      	beq.n	800f370 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2220      	movs	r2, #32
 800f368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e03d      	b.n	800f3ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10b      	bne.n	800f38e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f384:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	3302      	adds	r3, #2
 800f38a:	61bb      	str	r3, [r7, #24]
 800f38c:	e007      	b.n	800f39e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f38e:	69fb      	ldr	r3, [r7, #28]
 800f390:	781a      	ldrb	r2, [r3, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	3301      	adds	r3, #1
 800f39c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	3b01      	subs	r3, #1
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1c8      	bne.n	800f34e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	2140      	movs	r1, #64	@ 0x40
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f000 ffcc 	bl	8010364 <UART_WaitOnFlagUntilTimeout>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d005      	beq.n	800f3de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2220      	movs	r2, #32
 800f3d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f3da:	2303      	movs	r3, #3
 800f3dc:	e006      	b.n	800f3ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2220      	movs	r2, #32
 800f3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	e000      	b.n	800f3ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f3ea:	2302      	movs	r3, #2
  }
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3720      	adds	r7, #32
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3f8:	b092      	sub	sp, #72	@ 0x48
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3fe:	2300      	movs	r3, #0
 800f400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	689a      	ldr	r2, [r3, #8]
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	431a      	orrs	r2, r3
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	431a      	orrs	r2, r3
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	69db      	ldr	r3, [r3, #28]
 800f418:	4313      	orrs	r3, r2
 800f41a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	4bbe      	ldr	r3, [pc, #760]	@ (800f71c <UART_SetConfig+0x328>)
 800f424:	4013      	ands	r3, r2
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	6812      	ldr	r2, [r2, #0]
 800f42a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f42c:	430b      	orrs	r3, r1
 800f42e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	68da      	ldr	r2, [r3, #12]
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	699b      	ldr	r3, [r3, #24]
 800f44a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4ab3      	ldr	r2, [pc, #716]	@ (800f720 <UART_SetConfig+0x32c>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d004      	beq.n	800f460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f45c:	4313      	orrs	r3, r2
 800f45e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	689a      	ldr	r2, [r3, #8]
 800f466:	4baf      	ldr	r3, [pc, #700]	@ (800f724 <UART_SetConfig+0x330>)
 800f468:	4013      	ands	r3, r2
 800f46a:	697a      	ldr	r2, [r7, #20]
 800f46c:	6812      	ldr	r2, [r2, #0]
 800f46e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f470:	430b      	orrs	r3, r1
 800f472:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f47a:	f023 010f 	bic.w	r1, r3, #15
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	430a      	orrs	r2, r1
 800f488:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4aa6      	ldr	r2, [pc, #664]	@ (800f728 <UART_SetConfig+0x334>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d177      	bne.n	800f584 <UART_SetConfig+0x190>
 800f494:	4ba5      	ldr	r3, [pc, #660]	@ (800f72c <UART_SetConfig+0x338>)
 800f496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f498:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f49c:	2b28      	cmp	r3, #40	@ 0x28
 800f49e:	d86d      	bhi.n	800f57c <UART_SetConfig+0x188>
 800f4a0:	a201      	add	r2, pc, #4	@ (adr r2, 800f4a8 <UART_SetConfig+0xb4>)
 800f4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a6:	bf00      	nop
 800f4a8:	0800f54d 	.word	0x0800f54d
 800f4ac:	0800f57d 	.word	0x0800f57d
 800f4b0:	0800f57d 	.word	0x0800f57d
 800f4b4:	0800f57d 	.word	0x0800f57d
 800f4b8:	0800f57d 	.word	0x0800f57d
 800f4bc:	0800f57d 	.word	0x0800f57d
 800f4c0:	0800f57d 	.word	0x0800f57d
 800f4c4:	0800f57d 	.word	0x0800f57d
 800f4c8:	0800f555 	.word	0x0800f555
 800f4cc:	0800f57d 	.word	0x0800f57d
 800f4d0:	0800f57d 	.word	0x0800f57d
 800f4d4:	0800f57d 	.word	0x0800f57d
 800f4d8:	0800f57d 	.word	0x0800f57d
 800f4dc:	0800f57d 	.word	0x0800f57d
 800f4e0:	0800f57d 	.word	0x0800f57d
 800f4e4:	0800f57d 	.word	0x0800f57d
 800f4e8:	0800f55d 	.word	0x0800f55d
 800f4ec:	0800f57d 	.word	0x0800f57d
 800f4f0:	0800f57d 	.word	0x0800f57d
 800f4f4:	0800f57d 	.word	0x0800f57d
 800f4f8:	0800f57d 	.word	0x0800f57d
 800f4fc:	0800f57d 	.word	0x0800f57d
 800f500:	0800f57d 	.word	0x0800f57d
 800f504:	0800f57d 	.word	0x0800f57d
 800f508:	0800f565 	.word	0x0800f565
 800f50c:	0800f57d 	.word	0x0800f57d
 800f510:	0800f57d 	.word	0x0800f57d
 800f514:	0800f57d 	.word	0x0800f57d
 800f518:	0800f57d 	.word	0x0800f57d
 800f51c:	0800f57d 	.word	0x0800f57d
 800f520:	0800f57d 	.word	0x0800f57d
 800f524:	0800f57d 	.word	0x0800f57d
 800f528:	0800f56d 	.word	0x0800f56d
 800f52c:	0800f57d 	.word	0x0800f57d
 800f530:	0800f57d 	.word	0x0800f57d
 800f534:	0800f57d 	.word	0x0800f57d
 800f538:	0800f57d 	.word	0x0800f57d
 800f53c:	0800f57d 	.word	0x0800f57d
 800f540:	0800f57d 	.word	0x0800f57d
 800f544:	0800f57d 	.word	0x0800f57d
 800f548:	0800f575 	.word	0x0800f575
 800f54c:	2301      	movs	r3, #1
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f552:	e326      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f554:	2304      	movs	r3, #4
 800f556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55a:	e322      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f55c:	2308      	movs	r3, #8
 800f55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f562:	e31e      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f564:	2310      	movs	r3, #16
 800f566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56a:	e31a      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f56c:	2320      	movs	r3, #32
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f572:	e316      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f574:	2340      	movs	r3, #64	@ 0x40
 800f576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57a:	e312      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f57c:	2380      	movs	r3, #128	@ 0x80
 800f57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f582:	e30e      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a69      	ldr	r2, [pc, #420]	@ (800f730 <UART_SetConfig+0x33c>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d130      	bne.n	800f5f0 <UART_SetConfig+0x1fc>
 800f58e:	4b67      	ldr	r3, [pc, #412]	@ (800f72c <UART_SetConfig+0x338>)
 800f590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	2b05      	cmp	r3, #5
 800f598:	d826      	bhi.n	800f5e8 <UART_SetConfig+0x1f4>
 800f59a:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a0 <UART_SetConfig+0x1ac>)
 800f59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a0:	0800f5b9 	.word	0x0800f5b9
 800f5a4:	0800f5c1 	.word	0x0800f5c1
 800f5a8:	0800f5c9 	.word	0x0800f5c9
 800f5ac:	0800f5d1 	.word	0x0800f5d1
 800f5b0:	0800f5d9 	.word	0x0800f5d9
 800f5b4:	0800f5e1 	.word	0x0800f5e1
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5be:	e2f0      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5c0:	2304      	movs	r3, #4
 800f5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5c6:	e2ec      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5c8:	2308      	movs	r3, #8
 800f5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ce:	e2e8      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5d0:	2310      	movs	r3, #16
 800f5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5d6:	e2e4      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5d8:	2320      	movs	r3, #32
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5de:	e2e0      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5e0:	2340      	movs	r3, #64	@ 0x40
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e6:	e2dc      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5e8:	2380      	movs	r3, #128	@ 0x80
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ee:	e2d8      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a4f      	ldr	r2, [pc, #316]	@ (800f734 <UART_SetConfig+0x340>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d130      	bne.n	800f65c <UART_SetConfig+0x268>
 800f5fa:	4b4c      	ldr	r3, [pc, #304]	@ (800f72c <UART_SetConfig+0x338>)
 800f5fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5fe:	f003 0307 	and.w	r3, r3, #7
 800f602:	2b05      	cmp	r3, #5
 800f604:	d826      	bhi.n	800f654 <UART_SetConfig+0x260>
 800f606:	a201      	add	r2, pc, #4	@ (adr r2, 800f60c <UART_SetConfig+0x218>)
 800f608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60c:	0800f625 	.word	0x0800f625
 800f610:	0800f62d 	.word	0x0800f62d
 800f614:	0800f635 	.word	0x0800f635
 800f618:	0800f63d 	.word	0x0800f63d
 800f61c:	0800f645 	.word	0x0800f645
 800f620:	0800f64d 	.word	0x0800f64d
 800f624:	2300      	movs	r3, #0
 800f626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62a:	e2ba      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f62c:	2304      	movs	r3, #4
 800f62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f632:	e2b6      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f634:	2308      	movs	r3, #8
 800f636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f63a:	e2b2      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f63c:	2310      	movs	r3, #16
 800f63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f642:	e2ae      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f644:	2320      	movs	r3, #32
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64a:	e2aa      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f64c:	2340      	movs	r3, #64	@ 0x40
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f652:	e2a6      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f654:	2380      	movs	r3, #128	@ 0x80
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f65a:	e2a2      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a35      	ldr	r2, [pc, #212]	@ (800f738 <UART_SetConfig+0x344>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d130      	bne.n	800f6c8 <UART_SetConfig+0x2d4>
 800f666:	4b31      	ldr	r3, [pc, #196]	@ (800f72c <UART_SetConfig+0x338>)
 800f668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f66a:	f003 0307 	and.w	r3, r3, #7
 800f66e:	2b05      	cmp	r3, #5
 800f670:	d826      	bhi.n	800f6c0 <UART_SetConfig+0x2cc>
 800f672:	a201      	add	r2, pc, #4	@ (adr r2, 800f678 <UART_SetConfig+0x284>)
 800f674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f678:	0800f691 	.word	0x0800f691
 800f67c:	0800f699 	.word	0x0800f699
 800f680:	0800f6a1 	.word	0x0800f6a1
 800f684:	0800f6a9 	.word	0x0800f6a9
 800f688:	0800f6b1 	.word	0x0800f6b1
 800f68c:	0800f6b9 	.word	0x0800f6b9
 800f690:	2300      	movs	r3, #0
 800f692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f696:	e284      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f698:	2304      	movs	r3, #4
 800f69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f69e:	e280      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f6a0:	2308      	movs	r3, #8
 800f6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a6:	e27c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f6a8:	2310      	movs	r3, #16
 800f6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ae:	e278      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f6b0:	2320      	movs	r3, #32
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b6:	e274      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f6b8:	2340      	movs	r3, #64	@ 0x40
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e270      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f6c0:	2380      	movs	r3, #128	@ 0x80
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c6:	e26c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a1b      	ldr	r2, [pc, #108]	@ (800f73c <UART_SetConfig+0x348>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d142      	bne.n	800f758 <UART_SetConfig+0x364>
 800f6d2:	4b16      	ldr	r3, [pc, #88]	@ (800f72c <UART_SetConfig+0x338>)
 800f6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6d6:	f003 0307 	and.w	r3, r3, #7
 800f6da:	2b05      	cmp	r3, #5
 800f6dc:	d838      	bhi.n	800f750 <UART_SetConfig+0x35c>
 800f6de:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e4 <UART_SetConfig+0x2f0>)
 800f6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e4:	0800f6fd 	.word	0x0800f6fd
 800f6e8:	0800f705 	.word	0x0800f705
 800f6ec:	0800f70d 	.word	0x0800f70d
 800f6f0:	0800f715 	.word	0x0800f715
 800f6f4:	0800f741 	.word	0x0800f741
 800f6f8:	0800f749 	.word	0x0800f749
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f702:	e24e      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f704:	2304      	movs	r3, #4
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70a:	e24a      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f70c:	2308      	movs	r3, #8
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f712:	e246      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f714:	2310      	movs	r3, #16
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71a:	e242      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f71c:	cfff69f3 	.word	0xcfff69f3
 800f720:	58000c00 	.word	0x58000c00
 800f724:	11fff4ff 	.word	0x11fff4ff
 800f728:	40011000 	.word	0x40011000
 800f72c:	58024400 	.word	0x58024400
 800f730:	40004400 	.word	0x40004400
 800f734:	40004800 	.word	0x40004800
 800f738:	40004c00 	.word	0x40004c00
 800f73c:	40005000 	.word	0x40005000
 800f740:	2320      	movs	r3, #32
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f746:	e22c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f748:	2340      	movs	r3, #64	@ 0x40
 800f74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f74e:	e228      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f750:	2380      	movs	r3, #128	@ 0x80
 800f752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f756:	e224      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4ab1      	ldr	r2, [pc, #708]	@ (800fa24 <UART_SetConfig+0x630>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d176      	bne.n	800f850 <UART_SetConfig+0x45c>
 800f762:	4bb1      	ldr	r3, [pc, #708]	@ (800fa28 <UART_SetConfig+0x634>)
 800f764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f76a:	2b28      	cmp	r3, #40	@ 0x28
 800f76c:	d86c      	bhi.n	800f848 <UART_SetConfig+0x454>
 800f76e:	a201      	add	r2, pc, #4	@ (adr r2, 800f774 <UART_SetConfig+0x380>)
 800f770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f774:	0800f819 	.word	0x0800f819
 800f778:	0800f849 	.word	0x0800f849
 800f77c:	0800f849 	.word	0x0800f849
 800f780:	0800f849 	.word	0x0800f849
 800f784:	0800f849 	.word	0x0800f849
 800f788:	0800f849 	.word	0x0800f849
 800f78c:	0800f849 	.word	0x0800f849
 800f790:	0800f849 	.word	0x0800f849
 800f794:	0800f821 	.word	0x0800f821
 800f798:	0800f849 	.word	0x0800f849
 800f79c:	0800f849 	.word	0x0800f849
 800f7a0:	0800f849 	.word	0x0800f849
 800f7a4:	0800f849 	.word	0x0800f849
 800f7a8:	0800f849 	.word	0x0800f849
 800f7ac:	0800f849 	.word	0x0800f849
 800f7b0:	0800f849 	.word	0x0800f849
 800f7b4:	0800f829 	.word	0x0800f829
 800f7b8:	0800f849 	.word	0x0800f849
 800f7bc:	0800f849 	.word	0x0800f849
 800f7c0:	0800f849 	.word	0x0800f849
 800f7c4:	0800f849 	.word	0x0800f849
 800f7c8:	0800f849 	.word	0x0800f849
 800f7cc:	0800f849 	.word	0x0800f849
 800f7d0:	0800f849 	.word	0x0800f849
 800f7d4:	0800f831 	.word	0x0800f831
 800f7d8:	0800f849 	.word	0x0800f849
 800f7dc:	0800f849 	.word	0x0800f849
 800f7e0:	0800f849 	.word	0x0800f849
 800f7e4:	0800f849 	.word	0x0800f849
 800f7e8:	0800f849 	.word	0x0800f849
 800f7ec:	0800f849 	.word	0x0800f849
 800f7f0:	0800f849 	.word	0x0800f849
 800f7f4:	0800f839 	.word	0x0800f839
 800f7f8:	0800f849 	.word	0x0800f849
 800f7fc:	0800f849 	.word	0x0800f849
 800f800:	0800f849 	.word	0x0800f849
 800f804:	0800f849 	.word	0x0800f849
 800f808:	0800f849 	.word	0x0800f849
 800f80c:	0800f849 	.word	0x0800f849
 800f810:	0800f849 	.word	0x0800f849
 800f814:	0800f841 	.word	0x0800f841
 800f818:	2301      	movs	r3, #1
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81e:	e1c0      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f820:	2304      	movs	r3, #4
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f826:	e1bc      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f828:	2308      	movs	r3, #8
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82e:	e1b8      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f830:	2310      	movs	r3, #16
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f836:	e1b4      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f838:	2320      	movs	r3, #32
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e1b0      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f840:	2340      	movs	r3, #64	@ 0x40
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e1ac      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f848:	2380      	movs	r3, #128	@ 0x80
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84e:	e1a8      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a75      	ldr	r2, [pc, #468]	@ (800fa2c <UART_SetConfig+0x638>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d130      	bne.n	800f8bc <UART_SetConfig+0x4c8>
 800f85a:	4b73      	ldr	r3, [pc, #460]	@ (800fa28 <UART_SetConfig+0x634>)
 800f85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f85e:	f003 0307 	and.w	r3, r3, #7
 800f862:	2b05      	cmp	r3, #5
 800f864:	d826      	bhi.n	800f8b4 <UART_SetConfig+0x4c0>
 800f866:	a201      	add	r2, pc, #4	@ (adr r2, 800f86c <UART_SetConfig+0x478>)
 800f868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f86c:	0800f885 	.word	0x0800f885
 800f870:	0800f88d 	.word	0x0800f88d
 800f874:	0800f895 	.word	0x0800f895
 800f878:	0800f89d 	.word	0x0800f89d
 800f87c:	0800f8a5 	.word	0x0800f8a5
 800f880:	0800f8ad 	.word	0x0800f8ad
 800f884:	2300      	movs	r3, #0
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88a:	e18a      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f88c:	2304      	movs	r3, #4
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f892:	e186      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f894:	2308      	movs	r3, #8
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89a:	e182      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f89c:	2310      	movs	r3, #16
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a2:	e17e      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f8a4:	2320      	movs	r3, #32
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8aa:	e17a      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f8ac:	2340      	movs	r3, #64	@ 0x40
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b2:	e176      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f8b4:	2380      	movs	r3, #128	@ 0x80
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ba:	e172      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a5b      	ldr	r2, [pc, #364]	@ (800fa30 <UART_SetConfig+0x63c>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d130      	bne.n	800f928 <UART_SetConfig+0x534>
 800f8c6:	4b58      	ldr	r3, [pc, #352]	@ (800fa28 <UART_SetConfig+0x634>)
 800f8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ca:	f003 0307 	and.w	r3, r3, #7
 800f8ce:	2b05      	cmp	r3, #5
 800f8d0:	d826      	bhi.n	800f920 <UART_SetConfig+0x52c>
 800f8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8d8 <UART_SetConfig+0x4e4>)
 800f8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d8:	0800f8f1 	.word	0x0800f8f1
 800f8dc:	0800f8f9 	.word	0x0800f8f9
 800f8e0:	0800f901 	.word	0x0800f901
 800f8e4:	0800f909 	.word	0x0800f909
 800f8e8:	0800f911 	.word	0x0800f911
 800f8ec:	0800f919 	.word	0x0800f919
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f6:	e154      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f8f8:	2304      	movs	r3, #4
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fe:	e150      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f900:	2308      	movs	r3, #8
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f906:	e14c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f908:	2310      	movs	r3, #16
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90e:	e148      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f910:	2320      	movs	r3, #32
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f916:	e144      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f918:	2340      	movs	r3, #64	@ 0x40
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91e:	e140      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f920:	2380      	movs	r3, #128	@ 0x80
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f926:	e13c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a41      	ldr	r2, [pc, #260]	@ (800fa34 <UART_SetConfig+0x640>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	f040 8082 	bne.w	800fa38 <UART_SetConfig+0x644>
 800f934:	4b3c      	ldr	r3, [pc, #240]	@ (800fa28 <UART_SetConfig+0x634>)
 800f936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f938:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f93c:	2b28      	cmp	r3, #40	@ 0x28
 800f93e:	d86d      	bhi.n	800fa1c <UART_SetConfig+0x628>
 800f940:	a201      	add	r2, pc, #4	@ (adr r2, 800f948 <UART_SetConfig+0x554>)
 800f942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f946:	bf00      	nop
 800f948:	0800f9ed 	.word	0x0800f9ed
 800f94c:	0800fa1d 	.word	0x0800fa1d
 800f950:	0800fa1d 	.word	0x0800fa1d
 800f954:	0800fa1d 	.word	0x0800fa1d
 800f958:	0800fa1d 	.word	0x0800fa1d
 800f95c:	0800fa1d 	.word	0x0800fa1d
 800f960:	0800fa1d 	.word	0x0800fa1d
 800f964:	0800fa1d 	.word	0x0800fa1d
 800f968:	0800f9f5 	.word	0x0800f9f5
 800f96c:	0800fa1d 	.word	0x0800fa1d
 800f970:	0800fa1d 	.word	0x0800fa1d
 800f974:	0800fa1d 	.word	0x0800fa1d
 800f978:	0800fa1d 	.word	0x0800fa1d
 800f97c:	0800fa1d 	.word	0x0800fa1d
 800f980:	0800fa1d 	.word	0x0800fa1d
 800f984:	0800fa1d 	.word	0x0800fa1d
 800f988:	0800f9fd 	.word	0x0800f9fd
 800f98c:	0800fa1d 	.word	0x0800fa1d
 800f990:	0800fa1d 	.word	0x0800fa1d
 800f994:	0800fa1d 	.word	0x0800fa1d
 800f998:	0800fa1d 	.word	0x0800fa1d
 800f99c:	0800fa1d 	.word	0x0800fa1d
 800f9a0:	0800fa1d 	.word	0x0800fa1d
 800f9a4:	0800fa1d 	.word	0x0800fa1d
 800f9a8:	0800fa05 	.word	0x0800fa05
 800f9ac:	0800fa1d 	.word	0x0800fa1d
 800f9b0:	0800fa1d 	.word	0x0800fa1d
 800f9b4:	0800fa1d 	.word	0x0800fa1d
 800f9b8:	0800fa1d 	.word	0x0800fa1d
 800f9bc:	0800fa1d 	.word	0x0800fa1d
 800f9c0:	0800fa1d 	.word	0x0800fa1d
 800f9c4:	0800fa1d 	.word	0x0800fa1d
 800f9c8:	0800fa0d 	.word	0x0800fa0d
 800f9cc:	0800fa1d 	.word	0x0800fa1d
 800f9d0:	0800fa1d 	.word	0x0800fa1d
 800f9d4:	0800fa1d 	.word	0x0800fa1d
 800f9d8:	0800fa1d 	.word	0x0800fa1d
 800f9dc:	0800fa1d 	.word	0x0800fa1d
 800f9e0:	0800fa1d 	.word	0x0800fa1d
 800f9e4:	0800fa1d 	.word	0x0800fa1d
 800f9e8:	0800fa15 	.word	0x0800fa15
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f2:	e0d6      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f9f4:	2304      	movs	r3, #4
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fa:	e0d2      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800f9fc:	2308      	movs	r3, #8
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa02:	e0ce      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fa04:	2310      	movs	r3, #16
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa0a:	e0ca      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fa0c:	2320      	movs	r3, #32
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa12:	e0c6      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fa14:	2340      	movs	r3, #64	@ 0x40
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa1a:	e0c2      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fa1c:	2380      	movs	r3, #128	@ 0x80
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa22:	e0be      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fa24:	40011400 	.word	0x40011400
 800fa28:	58024400 	.word	0x58024400
 800fa2c:	40007800 	.word	0x40007800
 800fa30:	40007c00 	.word	0x40007c00
 800fa34:	40011800 	.word	0x40011800
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4aad      	ldr	r2, [pc, #692]	@ (800fcf4 <UART_SetConfig+0x900>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d176      	bne.n	800fb30 <UART_SetConfig+0x73c>
 800fa42:	4bad      	ldr	r3, [pc, #692]	@ (800fcf8 <UART_SetConfig+0x904>)
 800fa44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa4a:	2b28      	cmp	r3, #40	@ 0x28
 800fa4c:	d86c      	bhi.n	800fb28 <UART_SetConfig+0x734>
 800fa4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa54 <UART_SetConfig+0x660>)
 800fa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa54:	0800faf9 	.word	0x0800faf9
 800fa58:	0800fb29 	.word	0x0800fb29
 800fa5c:	0800fb29 	.word	0x0800fb29
 800fa60:	0800fb29 	.word	0x0800fb29
 800fa64:	0800fb29 	.word	0x0800fb29
 800fa68:	0800fb29 	.word	0x0800fb29
 800fa6c:	0800fb29 	.word	0x0800fb29
 800fa70:	0800fb29 	.word	0x0800fb29
 800fa74:	0800fb01 	.word	0x0800fb01
 800fa78:	0800fb29 	.word	0x0800fb29
 800fa7c:	0800fb29 	.word	0x0800fb29
 800fa80:	0800fb29 	.word	0x0800fb29
 800fa84:	0800fb29 	.word	0x0800fb29
 800fa88:	0800fb29 	.word	0x0800fb29
 800fa8c:	0800fb29 	.word	0x0800fb29
 800fa90:	0800fb29 	.word	0x0800fb29
 800fa94:	0800fb09 	.word	0x0800fb09
 800fa98:	0800fb29 	.word	0x0800fb29
 800fa9c:	0800fb29 	.word	0x0800fb29
 800faa0:	0800fb29 	.word	0x0800fb29
 800faa4:	0800fb29 	.word	0x0800fb29
 800faa8:	0800fb29 	.word	0x0800fb29
 800faac:	0800fb29 	.word	0x0800fb29
 800fab0:	0800fb29 	.word	0x0800fb29
 800fab4:	0800fb11 	.word	0x0800fb11
 800fab8:	0800fb29 	.word	0x0800fb29
 800fabc:	0800fb29 	.word	0x0800fb29
 800fac0:	0800fb29 	.word	0x0800fb29
 800fac4:	0800fb29 	.word	0x0800fb29
 800fac8:	0800fb29 	.word	0x0800fb29
 800facc:	0800fb29 	.word	0x0800fb29
 800fad0:	0800fb29 	.word	0x0800fb29
 800fad4:	0800fb19 	.word	0x0800fb19
 800fad8:	0800fb29 	.word	0x0800fb29
 800fadc:	0800fb29 	.word	0x0800fb29
 800fae0:	0800fb29 	.word	0x0800fb29
 800fae4:	0800fb29 	.word	0x0800fb29
 800fae8:	0800fb29 	.word	0x0800fb29
 800faec:	0800fb29 	.word	0x0800fb29
 800faf0:	0800fb29 	.word	0x0800fb29
 800faf4:	0800fb21 	.word	0x0800fb21
 800faf8:	2301      	movs	r3, #1
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafe:	e050      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb00:	2304      	movs	r3, #4
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb06:	e04c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb08:	2308      	movs	r3, #8
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e048      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb10:	2310      	movs	r3, #16
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e044      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb18:	2320      	movs	r3, #32
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1e:	e040      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb20:	2340      	movs	r3, #64	@ 0x40
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb26:	e03c      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb28:	2380      	movs	r3, #128	@ 0x80
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2e:	e038      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a71      	ldr	r2, [pc, #452]	@ (800fcfc <UART_SetConfig+0x908>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d130      	bne.n	800fb9c <UART_SetConfig+0x7a8>
 800fb3a:	4b6f      	ldr	r3, [pc, #444]	@ (800fcf8 <UART_SetConfig+0x904>)
 800fb3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fb3e:	f003 0307 	and.w	r3, r3, #7
 800fb42:	2b05      	cmp	r3, #5
 800fb44:	d826      	bhi.n	800fb94 <UART_SetConfig+0x7a0>
 800fb46:	a201      	add	r2, pc, #4	@ (adr r2, 800fb4c <UART_SetConfig+0x758>)
 800fb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb4c:	0800fb65 	.word	0x0800fb65
 800fb50:	0800fb6d 	.word	0x0800fb6d
 800fb54:	0800fb75 	.word	0x0800fb75
 800fb58:	0800fb7d 	.word	0x0800fb7d
 800fb5c:	0800fb85 	.word	0x0800fb85
 800fb60:	0800fb8d 	.word	0x0800fb8d
 800fb64:	2302      	movs	r3, #2
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb6a:	e01a      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb6c:	2304      	movs	r3, #4
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb72:	e016      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb74:	2308      	movs	r3, #8
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7a:	e012      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb7c:	2310      	movs	r3, #16
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb82:	e00e      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb84:	2320      	movs	r3, #32
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8a:	e00a      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb8c:	2340      	movs	r3, #64	@ 0x40
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb92:	e006      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb94:	2380      	movs	r3, #128	@ 0x80
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9a:	e002      	b.n	800fba2 <UART_SetConfig+0x7ae>
 800fb9c:	2380      	movs	r3, #128	@ 0x80
 800fb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a55      	ldr	r2, [pc, #340]	@ (800fcfc <UART_SetConfig+0x908>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	f040 80f8 	bne.w	800fd9e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fbae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fbb2:	2b20      	cmp	r3, #32
 800fbb4:	dc46      	bgt.n	800fc44 <UART_SetConfig+0x850>
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	db75      	blt.n	800fca6 <UART_SetConfig+0x8b2>
 800fbba:	3b02      	subs	r3, #2
 800fbbc:	2b1e      	cmp	r3, #30
 800fbbe:	d872      	bhi.n	800fca6 <UART_SetConfig+0x8b2>
 800fbc0:	a201      	add	r2, pc, #4	@ (adr r2, 800fbc8 <UART_SetConfig+0x7d4>)
 800fbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc6:	bf00      	nop
 800fbc8:	0800fc4b 	.word	0x0800fc4b
 800fbcc:	0800fca7 	.word	0x0800fca7
 800fbd0:	0800fc53 	.word	0x0800fc53
 800fbd4:	0800fca7 	.word	0x0800fca7
 800fbd8:	0800fca7 	.word	0x0800fca7
 800fbdc:	0800fca7 	.word	0x0800fca7
 800fbe0:	0800fc63 	.word	0x0800fc63
 800fbe4:	0800fca7 	.word	0x0800fca7
 800fbe8:	0800fca7 	.word	0x0800fca7
 800fbec:	0800fca7 	.word	0x0800fca7
 800fbf0:	0800fca7 	.word	0x0800fca7
 800fbf4:	0800fca7 	.word	0x0800fca7
 800fbf8:	0800fca7 	.word	0x0800fca7
 800fbfc:	0800fca7 	.word	0x0800fca7
 800fc00:	0800fc73 	.word	0x0800fc73
 800fc04:	0800fca7 	.word	0x0800fca7
 800fc08:	0800fca7 	.word	0x0800fca7
 800fc0c:	0800fca7 	.word	0x0800fca7
 800fc10:	0800fca7 	.word	0x0800fca7
 800fc14:	0800fca7 	.word	0x0800fca7
 800fc18:	0800fca7 	.word	0x0800fca7
 800fc1c:	0800fca7 	.word	0x0800fca7
 800fc20:	0800fca7 	.word	0x0800fca7
 800fc24:	0800fca7 	.word	0x0800fca7
 800fc28:	0800fca7 	.word	0x0800fca7
 800fc2c:	0800fca7 	.word	0x0800fca7
 800fc30:	0800fca7 	.word	0x0800fca7
 800fc34:	0800fca7 	.word	0x0800fca7
 800fc38:	0800fca7 	.word	0x0800fca7
 800fc3c:	0800fca7 	.word	0x0800fca7
 800fc40:	0800fc99 	.word	0x0800fc99
 800fc44:	2b40      	cmp	r3, #64	@ 0x40
 800fc46:	d02a      	beq.n	800fc9e <UART_SetConfig+0x8aa>
 800fc48:	e02d      	b.n	800fca6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fc4a:	f7fb ff37 	bl	800babc <HAL_RCCEx_GetD3PCLK1Freq>
 800fc4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fc50:	e02f      	b.n	800fcb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fb ff46 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc60:	e027      	b.n	800fcb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc62:	f107 0318 	add.w	r3, r7, #24
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fc f892 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc70:	e01f      	b.n	800fcb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc72:	4b21      	ldr	r3, [pc, #132]	@ (800fcf8 <UART_SetConfig+0x904>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f003 0320 	and.w	r3, r3, #32
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d009      	beq.n	800fc92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc7e:	4b1e      	ldr	r3, [pc, #120]	@ (800fcf8 <UART_SetConfig+0x904>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	08db      	lsrs	r3, r3, #3
 800fc84:	f003 0303 	and.w	r3, r3, #3
 800fc88:	4a1d      	ldr	r2, [pc, #116]	@ (800fd00 <UART_SetConfig+0x90c>)
 800fc8a:	fa22 f303 	lsr.w	r3, r2, r3
 800fc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc90:	e00f      	b.n	800fcb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc92:	4b1b      	ldr	r3, [pc, #108]	@ (800fd00 <UART_SetConfig+0x90c>)
 800fc94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc96:	e00c      	b.n	800fcb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc98:	4b1a      	ldr	r3, [pc, #104]	@ (800fd04 <UART_SetConfig+0x910>)
 800fc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc9c:	e009      	b.n	800fcb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fca4:	e005      	b.n	800fcb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fca6:	2300      	movs	r3, #0
 800fca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fcb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fcb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 81ee 	beq.w	8010096 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcbe:	4a12      	ldr	r2, [pc, #72]	@ (800fd08 <UART_SetConfig+0x914>)
 800fcc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fccc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	005b      	lsls	r3, r3, #1
 800fcd6:	4413      	add	r3, r2
 800fcd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d305      	bcc.n	800fcea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d910      	bls.n	800fd0c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fcea:	2301      	movs	r3, #1
 800fcec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fcf0:	e1d1      	b.n	8010096 <UART_SetConfig+0xca2>
 800fcf2:	bf00      	nop
 800fcf4:	40011c00 	.word	0x40011c00
 800fcf8:	58024400 	.word	0x58024400
 800fcfc:	58000c00 	.word	0x58000c00
 800fd00:	03d09000 	.word	0x03d09000
 800fd04:	003d0900 	.word	0x003d0900
 800fd08:	08012474 	.word	0x08012474
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd0e:	2200      	movs	r2, #0
 800fd10:	60bb      	str	r3, [r7, #8]
 800fd12:	60fa      	str	r2, [r7, #12]
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd18:	4ac0      	ldr	r2, [pc, #768]	@ (801001c <UART_SetConfig+0xc28>)
 800fd1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	2200      	movs	r2, #0
 800fd22:	603b      	str	r3, [r7, #0]
 800fd24:	607a      	str	r2, [r7, #4]
 800fd26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd2e:	f7f0 fb47 	bl	80003c0 <__aeabi_uldivmod>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	4610      	mov	r0, r2
 800fd38:	4619      	mov	r1, r3
 800fd3a:	f04f 0200 	mov.w	r2, #0
 800fd3e:	f04f 0300 	mov.w	r3, #0
 800fd42:	020b      	lsls	r3, r1, #8
 800fd44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd48:	0202      	lsls	r2, r0, #8
 800fd4a:	6979      	ldr	r1, [r7, #20]
 800fd4c:	6849      	ldr	r1, [r1, #4]
 800fd4e:	0849      	lsrs	r1, r1, #1
 800fd50:	2000      	movs	r0, #0
 800fd52:	460c      	mov	r4, r1
 800fd54:	4605      	mov	r5, r0
 800fd56:	eb12 0804 	adds.w	r8, r2, r4
 800fd5a:	eb43 0905 	adc.w	r9, r3, r5
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	2200      	movs	r2, #0
 800fd64:	469a      	mov	sl, r3
 800fd66:	4693      	mov	fp, r2
 800fd68:	4652      	mov	r2, sl
 800fd6a:	465b      	mov	r3, fp
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	4649      	mov	r1, r9
 800fd70:	f7f0 fb26 	bl	80003c0 <__aeabi_uldivmod>
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	4613      	mov	r3, r2
 800fd7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fd82:	d308      	bcc.n	800fd96 <UART_SetConfig+0x9a2>
 800fd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd8a:	d204      	bcs.n	800fd96 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd92:	60da      	str	r2, [r3, #12]
 800fd94:	e17f      	b.n	8010096 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fd96:	2301      	movs	r3, #1
 800fd98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd9c:	e17b      	b.n	8010096 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	69db      	ldr	r3, [r3, #28]
 800fda2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fda6:	f040 80bd 	bne.w	800ff24 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fdaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fdae:	2b20      	cmp	r3, #32
 800fdb0:	dc48      	bgt.n	800fe44 <UART_SetConfig+0xa50>
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	db7b      	blt.n	800feae <UART_SetConfig+0xaba>
 800fdb6:	2b20      	cmp	r3, #32
 800fdb8:	d879      	bhi.n	800feae <UART_SetConfig+0xaba>
 800fdba:	a201      	add	r2, pc, #4	@ (adr r2, 800fdc0 <UART_SetConfig+0x9cc>)
 800fdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc0:	0800fe4b 	.word	0x0800fe4b
 800fdc4:	0800fe53 	.word	0x0800fe53
 800fdc8:	0800feaf 	.word	0x0800feaf
 800fdcc:	0800feaf 	.word	0x0800feaf
 800fdd0:	0800fe5b 	.word	0x0800fe5b
 800fdd4:	0800feaf 	.word	0x0800feaf
 800fdd8:	0800feaf 	.word	0x0800feaf
 800fddc:	0800feaf 	.word	0x0800feaf
 800fde0:	0800fe6b 	.word	0x0800fe6b
 800fde4:	0800feaf 	.word	0x0800feaf
 800fde8:	0800feaf 	.word	0x0800feaf
 800fdec:	0800feaf 	.word	0x0800feaf
 800fdf0:	0800feaf 	.word	0x0800feaf
 800fdf4:	0800feaf 	.word	0x0800feaf
 800fdf8:	0800feaf 	.word	0x0800feaf
 800fdfc:	0800feaf 	.word	0x0800feaf
 800fe00:	0800fe7b 	.word	0x0800fe7b
 800fe04:	0800feaf 	.word	0x0800feaf
 800fe08:	0800feaf 	.word	0x0800feaf
 800fe0c:	0800feaf 	.word	0x0800feaf
 800fe10:	0800feaf 	.word	0x0800feaf
 800fe14:	0800feaf 	.word	0x0800feaf
 800fe18:	0800feaf 	.word	0x0800feaf
 800fe1c:	0800feaf 	.word	0x0800feaf
 800fe20:	0800feaf 	.word	0x0800feaf
 800fe24:	0800feaf 	.word	0x0800feaf
 800fe28:	0800feaf 	.word	0x0800feaf
 800fe2c:	0800feaf 	.word	0x0800feaf
 800fe30:	0800feaf 	.word	0x0800feaf
 800fe34:	0800feaf 	.word	0x0800feaf
 800fe38:	0800feaf 	.word	0x0800feaf
 800fe3c:	0800feaf 	.word	0x0800feaf
 800fe40:	0800fea1 	.word	0x0800fea1
 800fe44:	2b40      	cmp	r3, #64	@ 0x40
 800fe46:	d02e      	beq.n	800fea6 <UART_SetConfig+0xab2>
 800fe48:	e031      	b.n	800feae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe4a:	f7f9 ff99 	bl	8009d80 <HAL_RCC_GetPCLK1Freq>
 800fe4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe50:	e033      	b.n	800feba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe52:	f7f9 ffab 	bl	8009dac <HAL_RCC_GetPCLK2Freq>
 800fe56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fe58:	e02f      	b.n	800feba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fb fe42 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe68:	e027      	b.n	800feba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe6a:	f107 0318 	add.w	r3, r7, #24
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fb ff8e 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe78:	e01f      	b.n	800feba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe7a:	4b69      	ldr	r3, [pc, #420]	@ (8010020 <UART_SetConfig+0xc2c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f003 0320 	and.w	r3, r3, #32
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d009      	beq.n	800fe9a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe86:	4b66      	ldr	r3, [pc, #408]	@ (8010020 <UART_SetConfig+0xc2c>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	08db      	lsrs	r3, r3, #3
 800fe8c:	f003 0303 	and.w	r3, r3, #3
 800fe90:	4a64      	ldr	r2, [pc, #400]	@ (8010024 <UART_SetConfig+0xc30>)
 800fe92:	fa22 f303 	lsr.w	r3, r2, r3
 800fe96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe98:	e00f      	b.n	800feba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fe9a:	4b62      	ldr	r3, [pc, #392]	@ (8010024 <UART_SetConfig+0xc30>)
 800fe9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe9e:	e00c      	b.n	800feba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fea0:	4b61      	ldr	r3, [pc, #388]	@ (8010028 <UART_SetConfig+0xc34>)
 800fea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fea4:	e009      	b.n	800feba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800feaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800feac:	e005      	b.n	800feba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800feae:	2300      	movs	r3, #0
 800feb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800feb2:	2301      	movs	r3, #1
 800feb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800feb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800feba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800febc:	2b00      	cmp	r3, #0
 800febe:	f000 80ea 	beq.w	8010096 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fec6:	4a55      	ldr	r2, [pc, #340]	@ (801001c <UART_SetConfig+0xc28>)
 800fec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fecc:	461a      	mov	r2, r3
 800fece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fed0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fed4:	005a      	lsls	r2, r3, #1
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	085b      	lsrs	r3, r3, #1
 800fedc:	441a      	add	r2, r3
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fee6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feea:	2b0f      	cmp	r3, #15
 800feec:	d916      	bls.n	800ff1c <UART_SetConfig+0xb28>
 800feee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fef4:	d212      	bcs.n	800ff1c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	f023 030f 	bic.w	r3, r3, #15
 800fefe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff02:	085b      	lsrs	r3, r3, #1
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	f003 0307 	and.w	r3, r3, #7
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ff18:	60da      	str	r2, [r3, #12]
 800ff1a:	e0bc      	b.n	8010096 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff22:	e0b8      	b.n	8010096 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ff24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff28:	2b20      	cmp	r3, #32
 800ff2a:	dc4b      	bgt.n	800ffc4 <UART_SetConfig+0xbd0>
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f2c0 8087 	blt.w	8010040 <UART_SetConfig+0xc4c>
 800ff32:	2b20      	cmp	r3, #32
 800ff34:	f200 8084 	bhi.w	8010040 <UART_SetConfig+0xc4c>
 800ff38:	a201      	add	r2, pc, #4	@ (adr r2, 800ff40 <UART_SetConfig+0xb4c>)
 800ff3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff3e:	bf00      	nop
 800ff40:	0800ffcb 	.word	0x0800ffcb
 800ff44:	0800ffd3 	.word	0x0800ffd3
 800ff48:	08010041 	.word	0x08010041
 800ff4c:	08010041 	.word	0x08010041
 800ff50:	0800ffdb 	.word	0x0800ffdb
 800ff54:	08010041 	.word	0x08010041
 800ff58:	08010041 	.word	0x08010041
 800ff5c:	08010041 	.word	0x08010041
 800ff60:	0800ffeb 	.word	0x0800ffeb
 800ff64:	08010041 	.word	0x08010041
 800ff68:	08010041 	.word	0x08010041
 800ff6c:	08010041 	.word	0x08010041
 800ff70:	08010041 	.word	0x08010041
 800ff74:	08010041 	.word	0x08010041
 800ff78:	08010041 	.word	0x08010041
 800ff7c:	08010041 	.word	0x08010041
 800ff80:	0800fffb 	.word	0x0800fffb
 800ff84:	08010041 	.word	0x08010041
 800ff88:	08010041 	.word	0x08010041
 800ff8c:	08010041 	.word	0x08010041
 800ff90:	08010041 	.word	0x08010041
 800ff94:	08010041 	.word	0x08010041
 800ff98:	08010041 	.word	0x08010041
 800ff9c:	08010041 	.word	0x08010041
 800ffa0:	08010041 	.word	0x08010041
 800ffa4:	08010041 	.word	0x08010041
 800ffa8:	08010041 	.word	0x08010041
 800ffac:	08010041 	.word	0x08010041
 800ffb0:	08010041 	.word	0x08010041
 800ffb4:	08010041 	.word	0x08010041
 800ffb8:	08010041 	.word	0x08010041
 800ffbc:	08010041 	.word	0x08010041
 800ffc0:	08010033 	.word	0x08010033
 800ffc4:	2b40      	cmp	r3, #64	@ 0x40
 800ffc6:	d037      	beq.n	8010038 <UART_SetConfig+0xc44>
 800ffc8:	e03a      	b.n	8010040 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffca:	f7f9 fed9 	bl	8009d80 <HAL_RCC_GetPCLK1Freq>
 800ffce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ffd0:	e03c      	b.n	801004c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffd2:	f7f9 feeb 	bl	8009dac <HAL_RCC_GetPCLK2Freq>
 800ffd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ffd8:	e038      	b.n	801004c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fb fd82 	bl	800bae8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ffe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffe8:	e030      	b.n	801004c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffea:	f107 0318 	add.w	r3, r7, #24
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fb fece 	bl	800bd90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fff8:	e028      	b.n	801004c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fffa:	4b09      	ldr	r3, [pc, #36]	@ (8010020 <UART_SetConfig+0xc2c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f003 0320 	and.w	r3, r3, #32
 8010002:	2b00      	cmp	r3, #0
 8010004:	d012      	beq.n	801002c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010006:	4b06      	ldr	r3, [pc, #24]	@ (8010020 <UART_SetConfig+0xc2c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	08db      	lsrs	r3, r3, #3
 801000c:	f003 0303 	and.w	r3, r3, #3
 8010010:	4a04      	ldr	r2, [pc, #16]	@ (8010024 <UART_SetConfig+0xc30>)
 8010012:	fa22 f303 	lsr.w	r3, r2, r3
 8010016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010018:	e018      	b.n	801004c <UART_SetConfig+0xc58>
 801001a:	bf00      	nop
 801001c:	08012474 	.word	0x08012474
 8010020:	58024400 	.word	0x58024400
 8010024:	03d09000 	.word	0x03d09000
 8010028:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801002c:	4b24      	ldr	r3, [pc, #144]	@ (80100c0 <UART_SetConfig+0xccc>)
 801002e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010030:	e00c      	b.n	801004c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010032:	4b24      	ldr	r3, [pc, #144]	@ (80100c4 <UART_SetConfig+0xcd0>)
 8010034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010036:	e009      	b.n	801004c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010038:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801003c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801003e:	e005      	b.n	801004c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010040:	2300      	movs	r3, #0
 8010042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010044:	2301      	movs	r3, #1
 8010046:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801004a:	bf00      	nop
    }

    if (pclk != 0U)
 801004c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801004e:	2b00      	cmp	r3, #0
 8010050:	d021      	beq.n	8010096 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010056:	4a1c      	ldr	r2, [pc, #112]	@ (80100c8 <UART_SetConfig+0xcd4>)
 8010058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801005c:	461a      	mov	r2, r3
 801005e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010060:	fbb3 f2f2 	udiv	r2, r3, r2
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	085b      	lsrs	r3, r3, #1
 801006a:	441a      	add	r2, r3
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	fbb2 f3f3 	udiv	r3, r2, r3
 8010074:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010078:	2b0f      	cmp	r3, #15
 801007a:	d909      	bls.n	8010090 <UART_SetConfig+0xc9c>
 801007c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801007e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010082:	d205      	bcs.n	8010090 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010086:	b29a      	uxth	r2, r3
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	60da      	str	r2, [r3, #12]
 801008e:	e002      	b.n	8010096 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	2201      	movs	r2, #1
 801009a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	2201      	movs	r2, #1
 80100a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	2200      	movs	r2, #0
 80100aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	2200      	movs	r2, #0
 80100b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80100b2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3748      	adds	r7, #72	@ 0x48
 80100ba:	46bd      	mov	sp, r7
 80100bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80100c0:	03d09000 	.word	0x03d09000
 80100c4:	003d0900 	.word	0x003d0900
 80100c8:	08012474 	.word	0x08012474

080100cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d8:	f003 0308 	and.w	r3, r3, #8
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00a      	beq.n	80100f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	430a      	orrs	r2, r1
 80100f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100fa:	f003 0301 	and.w	r3, r3, #1
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00a      	beq.n	8010118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	430a      	orrs	r2, r1
 8010116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801011c:	f003 0302 	and.w	r3, r3, #2
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00a      	beq.n	801013a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	430a      	orrs	r2, r1
 8010138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801013e:	f003 0304 	and.w	r3, r3, #4
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00a      	beq.n	801015c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	430a      	orrs	r2, r1
 801015a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010160:	f003 0310 	and.w	r3, r3, #16
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00a      	beq.n	801017e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	430a      	orrs	r2, r1
 801017c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010182:	f003 0320 	and.w	r3, r3, #32
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00a      	beq.n	80101a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	430a      	orrs	r2, r1
 801019e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01a      	beq.n	80101e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	430a      	orrs	r2, r1
 80101c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80101ca:	d10a      	bne.n	80101e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	430a      	orrs	r2, r1
 80101e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00a      	beq.n	8010204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	430a      	orrs	r2, r1
 8010202:	605a      	str	r2, [r3, #4]
  }
}
 8010204:	bf00      	nop
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b098      	sub	sp, #96	@ 0x60
 8010214:	af02      	add	r7, sp, #8
 8010216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010220:	f7f2 fc80 	bl	8002b24 <HAL_GetTick>
 8010224:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f003 0308 	and.w	r3, r3, #8
 8010230:	2b08      	cmp	r3, #8
 8010232:	d12f      	bne.n	8010294 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010234:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801023c:	2200      	movs	r2, #0
 801023e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 f88e 	bl	8010364 <UART_WaitOnFlagUntilTimeout>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d022      	beq.n	8010294 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010256:	e853 3f00 	ldrex	r3, [r3]
 801025a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801025c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801025e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010262:	653b      	str	r3, [r7, #80]	@ 0x50
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	461a      	mov	r2, r3
 801026a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801026c:	647b      	str	r3, [r7, #68]	@ 0x44
 801026e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010274:	e841 2300 	strex	r3, r2, [r1]
 8010278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801027a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1e6      	bne.n	801024e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2220      	movs	r2, #32
 8010284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010290:	2303      	movs	r3, #3
 8010292:	e063      	b.n	801035c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f003 0304 	and.w	r3, r3, #4
 801029e:	2b04      	cmp	r3, #4
 80102a0:	d149      	bne.n	8010336 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102aa:	2200      	movs	r2, #0
 80102ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 f857 	bl	8010364 <UART_WaitOnFlagUntilTimeout>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d03c      	beq.n	8010336 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c4:	e853 3f00 	ldrex	r3, [r3]
 80102c8:	623b      	str	r3, [r7, #32]
   return(result);
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	461a      	mov	r2, r3
 80102d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102da:	633b      	str	r3, [r7, #48]	@ 0x30
 80102dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102e2:	e841 2300 	strex	r3, r2, [r1]
 80102e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80102e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1e6      	bne.n	80102bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	3308      	adds	r3, #8
 80102f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	e853 3f00 	ldrex	r3, [r3]
 80102fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f023 0301 	bic.w	r3, r3, #1
 8010304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	3308      	adds	r3, #8
 801030c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801030e:	61fa      	str	r2, [r7, #28]
 8010310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010312:	69b9      	ldr	r1, [r7, #24]
 8010314:	69fa      	ldr	r2, [r7, #28]
 8010316:	e841 2300 	strex	r3, r2, [r1]
 801031a:	617b      	str	r3, [r7, #20]
   return(result);
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1e5      	bne.n	80102ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2220      	movs	r2, #32
 8010326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010332:	2303      	movs	r3, #3
 8010334:	e012      	b.n	801035c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2220      	movs	r2, #32
 801033a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2220      	movs	r2, #32
 8010342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801035a:	2300      	movs	r3, #0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3758      	adds	r7, #88	@ 0x58
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	603b      	str	r3, [r7, #0]
 8010370:	4613      	mov	r3, r2
 8010372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010374:	e04f      	b.n	8010416 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037c:	d04b      	beq.n	8010416 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801037e:	f7f2 fbd1 	bl	8002b24 <HAL_GetTick>
 8010382:	4602      	mov	r2, r0
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	1ad3      	subs	r3, r2, r3
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	429a      	cmp	r2, r3
 801038c:	d302      	bcc.n	8010394 <UART_WaitOnFlagUntilTimeout+0x30>
 801038e:	69bb      	ldr	r3, [r7, #24]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d101      	bne.n	8010398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010394:	2303      	movs	r3, #3
 8010396:	e04e      	b.n	8010436 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f003 0304 	and.w	r3, r3, #4
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d037      	beq.n	8010416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2b80      	cmp	r3, #128	@ 0x80
 80103aa:	d034      	beq.n	8010416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2b40      	cmp	r3, #64	@ 0x40
 80103b0:	d031      	beq.n	8010416 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	69db      	ldr	r3, [r3, #28]
 80103b8:	f003 0308 	and.w	r3, r3, #8
 80103bc:	2b08      	cmp	r3, #8
 80103be:	d110      	bne.n	80103e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2208      	movs	r2, #8
 80103c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f000 f839 	bl	8010440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2208      	movs	r2, #8
 80103d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80103de:	2301      	movs	r3, #1
 80103e0:	e029      	b.n	8010436 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	69db      	ldr	r3, [r3, #28]
 80103e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80103ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80103f0:	d111      	bne.n	8010416 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80103fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f000 f81f 	bl	8010440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2220      	movs	r2, #32
 8010406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2200      	movs	r2, #0
 801040e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010412:	2303      	movs	r3, #3
 8010414:	e00f      	b.n	8010436 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	69da      	ldr	r2, [r3, #28]
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	4013      	ands	r3, r2
 8010420:	68ba      	ldr	r2, [r7, #8]
 8010422:	429a      	cmp	r2, r3
 8010424:	bf0c      	ite	eq
 8010426:	2301      	moveq	r3, #1
 8010428:	2300      	movne	r3, #0
 801042a:	b2db      	uxtb	r3, r3
 801042c:	461a      	mov	r2, r3
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	429a      	cmp	r2, r3
 8010432:	d0a0      	beq.n	8010376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
	...

08010440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010440:	b480      	push	{r7}
 8010442:	b095      	sub	sp, #84	@ 0x54
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801044e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010450:	e853 3f00 	ldrex	r3, [r3]
 8010454:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801045c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	461a      	mov	r2, r3
 8010464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010466:	643b      	str	r3, [r7, #64]	@ 0x40
 8010468:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801046a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801046c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801046e:	e841 2300 	strex	r3, r2, [r1]
 8010472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010476:	2b00      	cmp	r3, #0
 8010478:	d1e6      	bne.n	8010448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	3308      	adds	r3, #8
 8010480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010482:	6a3b      	ldr	r3, [r7, #32]
 8010484:	e853 3f00 	ldrex	r3, [r3]
 8010488:	61fb      	str	r3, [r7, #28]
   return(result);
 801048a:	69fa      	ldr	r2, [r7, #28]
 801048c:	4b1e      	ldr	r3, [pc, #120]	@ (8010508 <UART_EndRxTransfer+0xc8>)
 801048e:	4013      	ands	r3, r2
 8010490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3308      	adds	r3, #8
 8010498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801049a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801049c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801049e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80104a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104a2:	e841 2300 	strex	r3, r2, [r1]
 80104a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80104a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1e5      	bne.n	801047a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d118      	bne.n	80104e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	e853 3f00 	ldrex	r3, [r3]
 80104c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	f023 0310 	bic.w	r3, r3, #16
 80104ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	461a      	mov	r2, r3
 80104d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104d4:	61bb      	str	r3, [r7, #24]
 80104d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d8:	6979      	ldr	r1, [r7, #20]
 80104da:	69ba      	ldr	r2, [r7, #24]
 80104dc:	e841 2300 	strex	r3, r2, [r1]
 80104e0:	613b      	str	r3, [r7, #16]
   return(result);
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1e6      	bne.n	80104b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2220      	movs	r2, #32
 80104ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80104fc:	bf00      	nop
 80104fe:	3754      	adds	r7, #84	@ 0x54
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr
 8010508:	effffffe 	.word	0xeffffffe

0801050c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801050c:	b480      	push	{r7}
 801050e:	b085      	sub	sp, #20
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801051a:	2b01      	cmp	r3, #1
 801051c:	d101      	bne.n	8010522 <HAL_UARTEx_DisableFifoMode+0x16>
 801051e:	2302      	movs	r3, #2
 8010520:	e027      	b.n	8010572 <HAL_UARTEx_DisableFifoMode+0x66>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2201      	movs	r2, #1
 8010526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2224      	movs	r2, #36	@ 0x24
 801052e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f022 0201 	bic.w	r2, r2, #1
 8010548:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010550:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2220      	movs	r2, #32
 8010564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3714      	adds	r7, #20
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801058e:	2b01      	cmp	r3, #1
 8010590:	d101      	bne.n	8010596 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010592:	2302      	movs	r3, #2
 8010594:	e02d      	b.n	80105f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2224      	movs	r2, #36	@ 0x24
 80105a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f022 0201 	bic.w	r2, r2, #1
 80105bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	683a      	ldr	r2, [r7, #0]
 80105ce:	430a      	orrs	r2, r1
 80105d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 f850 	bl	8010678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2220      	movs	r2, #32
 80105e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3710      	adds	r7, #16
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b084      	sub	sp, #16
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801060a:	2b01      	cmp	r3, #1
 801060c:	d101      	bne.n	8010612 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801060e:	2302      	movs	r3, #2
 8010610:	e02d      	b.n	801066e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2201      	movs	r2, #1
 8010616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2224      	movs	r2, #36	@ 0x24
 801061e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f022 0201 	bic.w	r2, r2, #1
 8010638:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	689b      	ldr	r3, [r3, #8]
 8010640:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	683a      	ldr	r2, [r7, #0]
 801064a:	430a      	orrs	r2, r1
 801064c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 f812 	bl	8010678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	68fa      	ldr	r2, [r7, #12]
 801065a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2220      	movs	r2, #32
 8010660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801066c:	2300      	movs	r3, #0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010684:	2b00      	cmp	r3, #0
 8010686:	d108      	bne.n	801069a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2201      	movs	r2, #1
 801068c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2201      	movs	r2, #1
 8010694:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010698:	e031      	b.n	80106fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801069a:	2310      	movs	r3, #16
 801069c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801069e:	2310      	movs	r3, #16
 80106a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	0e5b      	lsrs	r3, r3, #25
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	f003 0307 	and.w	r3, r3, #7
 80106b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	0f5b      	lsrs	r3, r3, #29
 80106ba:	b2db      	uxtb	r3, r3
 80106bc:	f003 0307 	and.w	r3, r3, #7
 80106c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106c2:	7bbb      	ldrb	r3, [r7, #14]
 80106c4:	7b3a      	ldrb	r2, [r7, #12]
 80106c6:	4911      	ldr	r1, [pc, #68]	@ (801070c <UARTEx_SetNbDataToProcess+0x94>)
 80106c8:	5c8a      	ldrb	r2, [r1, r2]
 80106ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80106ce:	7b3a      	ldrb	r2, [r7, #12]
 80106d0:	490f      	ldr	r1, [pc, #60]	@ (8010710 <UARTEx_SetNbDataToProcess+0x98>)
 80106d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80106d8:	b29a      	uxth	r2, r3
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
 80106e2:	7b7a      	ldrb	r2, [r7, #13]
 80106e4:	4909      	ldr	r1, [pc, #36]	@ (801070c <UARTEx_SetNbDataToProcess+0x94>)
 80106e6:	5c8a      	ldrb	r2, [r1, r2]
 80106e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80106ec:	7b7a      	ldrb	r2, [r7, #13]
 80106ee:	4908      	ldr	r1, [pc, #32]	@ (8010710 <UARTEx_SetNbDataToProcess+0x98>)
 80106f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80106f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80106fe:	bf00      	nop
 8010700:	3714      	adds	r7, #20
 8010702:	46bd      	mov	sp, r7
 8010704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop
 801070c:	0801248c 	.word	0x0801248c
 8010710:	08012494 	.word	0x08012494

08010714 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010714:	b084      	sub	sp, #16
 8010716:	b480      	push	{r7}
 8010718:	b085      	sub	sp, #20
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
 801071e:	f107 001c 	add.w	r0, r7, #28
 8010722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010726:	2300      	movs	r3, #0
 8010728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801072a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801072c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801072e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8010732:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8010736:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801073a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	4313      	orrs	r3, r2
 8010740:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	4b07      	ldr	r3, [pc, #28]	@ (8010764 <SDMMC_Init+0x50>)
 8010748:	4013      	ands	r3, r2
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	431a      	orrs	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010752:	2300      	movs	r3, #0
}
 8010754:	4618      	mov	r0, r3
 8010756:	3714      	adds	r7, #20
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	b004      	add	sp, #16
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	ffc02c00 	.word	0xffc02c00

08010768 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010776:	4618      	mov	r0, r3
 8010778:	370c      	adds	r7, #12
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr

08010782 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010782:	b480      	push	{r7}
 8010784:	b083      	sub	sp, #12
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	681a      	ldr	r2, [r3, #0]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f043 0203 	orr.w	r2, r3, #3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	370c      	adds	r7, #12
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr

080107c6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80107c6:	b480      	push	{r7}
 80107c8:	b083      	sub	sp, #12
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f003 0303 	and.w	r3, r3, #3
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	370c      	adds	r7, #12
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr
	...

080107e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010802:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010808:	431a      	orrs	r2, r3
                       Command->CPSM);
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801080e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	4313      	orrs	r3, r2
 8010814:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68da      	ldr	r2, [r3, #12]
 801081a:	4b06      	ldr	r3, [pc, #24]	@ (8010834 <SDMMC_SendCommand+0x50>)
 801081c:	4013      	ands	r3, r2
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	431a      	orrs	r2, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3714      	adds	r7, #20
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr
 8010834:	fffee0c0 	.word	0xfffee0c0

08010838 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	691b      	ldr	r3, [r3, #16]
 8010844:	b2db      	uxtb	r3, r3
}
 8010846:	4618      	mov	r0, r3
 8010848:	370c      	adds	r7, #12
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr

08010852 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010852:	b480      	push	{r7}
 8010854:	b085      	sub	sp, #20
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
 801085a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	3314      	adds	r3, #20
 8010860:	461a      	mov	r2, r3
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	4413      	add	r3, r2
 8010866:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010882:	2300      	movs	r3, #0
 8010884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	685a      	ldr	r2, [r3, #4]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801089e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80108a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80108aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	431a      	orrs	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80108c2:	2300      	movs	r3, #0

}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b088      	sub	sp, #32
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80108de:	2310      	movs	r3, #16
 80108e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108e8:	2300      	movs	r3, #0
 80108ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108f2:	f107 0308 	add.w	r3, r7, #8
 80108f6:	4619      	mov	r1, r3
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff ff73 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80108fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010902:	2110      	movs	r1, #16
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f000 fa5f 	bl	8010dc8 <SDMMC_GetCmdResp1>
 801090a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801090c:	69fb      	ldr	r3, [r7, #28]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3720      	adds	r7, #32
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010916:	b580      	push	{r7, lr}
 8010918:	b088      	sub	sp, #32
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
 801091e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010924:	2311      	movs	r3, #17
 8010926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801092c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801092e:	2300      	movs	r3, #0
 8010930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010938:	f107 0308 	add.w	r3, r7, #8
 801093c:	4619      	mov	r1, r3
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7ff ff50 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010944:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010948:	2111      	movs	r1, #17
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f000 fa3c 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010952:	69fb      	ldr	r3, [r7, #28]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3720      	adds	r7, #32
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b088      	sub	sp, #32
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801096a:	2312      	movs	r3, #18
 801096c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801096e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010972:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010974:	2300      	movs	r3, #0
 8010976:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801097c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801097e:	f107 0308 	add.w	r3, r7, #8
 8010982:	4619      	mov	r1, r3
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff ff2d 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801098a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801098e:	2112      	movs	r1, #18
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 fa19 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010998:	69fb      	ldr	r3, [r7, #28]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3720      	adds	r7, #32
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b088      	sub	sp, #32
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
 80109aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80109b0:	2318      	movs	r3, #24
 80109b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109ba:	2300      	movs	r3, #0
 80109bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109c4:	f107 0308 	add.w	r3, r7, #8
 80109c8:	4619      	mov	r1, r3
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff ff0a 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80109d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109d4:	2118      	movs	r1, #24
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 f9f6 	bl	8010dc8 <SDMMC_GetCmdResp1>
 80109dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109de:	69fb      	ldr	r3, [r7, #28]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3720      	adds	r7, #32
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80109f6:	2319      	movs	r3, #25
 80109f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a00:	2300      	movs	r3, #0
 8010a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a0a:	f107 0308 	add.w	r3, r7, #8
 8010a0e:	4619      	mov	r1, r3
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7ff fee7 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a1a:	2119      	movs	r1, #25
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 f9d3 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a24:	69fb      	ldr	r3, [r7, #28]
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3720      	adds	r7, #32
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
	...

08010a30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010a3c:	230c      	movs	r3, #12
 8010a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a46:	2300      	movs	r3, #0
 8010a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a4e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a68:	f107 0308 	add.w	r3, r7, #8
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f7ff feb8 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010a74:	4a0b      	ldr	r2, [pc, #44]	@ (8010aa4 <SDMMC_CmdStopTransfer+0x74>)
 8010a76:	210c      	movs	r1, #12
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f9a5 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010a7e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010a92:	d101      	bne.n	8010a98 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010a94:	2300      	movs	r3, #0
 8010a96:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010a98:	69fb      	ldr	r3, [r7, #28]
}
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	3720      	adds	r7, #32
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	05f5e100 	.word	0x05f5e100

08010aa8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b088      	sub	sp, #32
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010ab6:	2307      	movs	r3, #7
 8010ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ac8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010aca:	f107 0308 	add.w	r3, r7, #8
 8010ace:	4619      	mov	r1, r3
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f7ff fe87 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ada:	2107      	movs	r1, #7
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f973 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010ae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ae4:	69fb      	ldr	r3, [r7, #28]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3720      	adds	r7, #32
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b088      	sub	sp, #32
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010af6:	2300      	movs	r3, #0
 8010af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010afa:	2300      	movs	r3, #0
 8010afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010afe:	2300      	movs	r3, #0
 8010b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b02:	2300      	movs	r3, #0
 8010b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b0c:	f107 0308 	add.w	r3, r7, #8
 8010b10:	4619      	mov	r1, r3
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff fe66 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 fb97 	bl	801124c <SDMMC_GetCmdError>
 8010b1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b20:	69fb      	ldr	r3, [r7, #28]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3720      	adds	r7, #32
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b088      	sub	sp, #32
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010b32:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010b36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010b38:	2308      	movs	r3, #8
 8010b3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b42:	2300      	movs	r3, #0
 8010b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b4c:	f107 0308 	add.w	r3, r7, #8
 8010b50:	4619      	mov	r1, r3
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7ff fe46 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f000 fb29 	bl	80111b0 <SDMMC_GetCmdResp7>
 8010b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b60:	69fb      	ldr	r3, [r7, #28]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3720      	adds	r7, #32
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b088      	sub	sp, #32
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
 8010b72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010b78:	2337      	movs	r3, #55	@ 0x37
 8010b7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b82:	2300      	movs	r3, #0
 8010b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b8c:	f107 0308 	add.w	r3, r7, #8
 8010b90:	4619      	mov	r1, r3
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7ff fe26 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b9c:	2137      	movs	r1, #55	@ 0x37
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f000 f912 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ba6:	69fb      	ldr	r3, [r7, #28]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3720      	adds	r7, #32
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b088      	sub	sp, #32
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010bbe:	2329      	movs	r3, #41	@ 0x29
 8010bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bd2:	f107 0308 	add.w	r3, r7, #8
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7ff fe03 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fa2e 	bl	8011040 <SDMMC_GetCmdResp3>
 8010be4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010be6:	69fb      	ldr	r3, [r7, #28]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3720      	adds	r7, #32
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010bfe:	2306      	movs	r3, #6
 8010c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c12:	f107 0308 	add.w	r3, r7, #8
 8010c16:	4619      	mov	r1, r3
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff fde3 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c22:	2106      	movs	r1, #6
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 f8cf 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c2c:	69fb      	ldr	r3, [r7, #28]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3720      	adds	r7, #32
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}

08010c36 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010c36:	b580      	push	{r7, lr}
 8010c38:	b088      	sub	sp, #32
 8010c3a:	af00      	add	r7, sp, #0
 8010c3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010c42:	2333      	movs	r3, #51	@ 0x33
 8010c44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c56:	f107 0308 	add.w	r3, r7, #8
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff fdc1 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c66:	2133      	movs	r1, #51	@ 0x33
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 f8ad 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c70:	69fb      	ldr	r3, [r7, #28]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3720      	adds	r7, #32
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b088      	sub	sp, #32
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010c82:	2300      	movs	r3, #0
 8010c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010c86:	2302      	movs	r3, #2
 8010c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010c8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c90:	2300      	movs	r3, #0
 8010c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c9a:	f107 0308 	add.w	r3, r7, #8
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff fd9f 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 f980 	bl	8010fac <SDMMC_GetCmdResp2>
 8010cac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cae:	69fb      	ldr	r3, [r7, #28]
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3720      	adds	r7, #32
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b088      	sub	sp, #32
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010cc6:	2309      	movs	r3, #9
 8010cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010cd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cda:	f107 0308 	add.w	r3, r7, #8
 8010cde:	4619      	mov	r1, r3
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7ff fd7f 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f960 	bl	8010fac <SDMMC_GetCmdResp2>
 8010cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cee:	69fb      	ldr	r3, [r7, #28]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3720      	adds	r7, #32
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d02:	2300      	movs	r3, #0
 8010d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d06:	2303      	movs	r3, #3
 8010d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d10:	2300      	movs	r3, #0
 8010d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d1a:	f107 0308 	add.w	r3, r7, #8
 8010d1e:	4619      	mov	r1, r3
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f7ff fd5f 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010d26:	683a      	ldr	r2, [r7, #0]
 8010d28:	2103      	movs	r1, #3
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 f9c8 	bl	80110c0 <SDMMC_GetCmdResp6>
 8010d30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d32:	69fb      	ldr	r3, [r7, #28]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3720      	adds	r7, #32
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b088      	sub	sp, #32
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010d4a:	230d      	movs	r3, #13
 8010d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d54:	2300      	movs	r3, #0
 8010d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d5e:	f107 0308 	add.w	r3, r7, #8
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fd3d 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d6e:	210d      	movs	r1, #13
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 f829 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d78:	69fb      	ldr	r3, [r7, #28]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3720      	adds	r7, #32
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b088      	sub	sp, #32
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010d8e:	230d      	movs	r3, #13
 8010d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010da0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010da2:	f107 0308 	add.w	r3, r7, #8
 8010da6:	4619      	mov	r1, r3
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7ff fd1b 	bl	80107e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010db2:	210d      	movs	r1, #13
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 f807 	bl	8010dc8 <SDMMC_GetCmdResp1>
 8010dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dbc:	69fb      	ldr	r3, [r7, #28]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3720      	adds	r7, #32
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
	...

08010dc8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b088      	sub	sp, #32
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	607a      	str	r2, [r7, #4]
 8010dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010dd6:	4b70      	ldr	r3, [pc, #448]	@ (8010f98 <SDMMC_GetCmdResp1+0x1d0>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4a70      	ldr	r2, [pc, #448]	@ (8010f9c <SDMMC_GetCmdResp1+0x1d4>)
 8010ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8010de0:	0a5a      	lsrs	r2, r3, #9
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	fb02 f303 	mul.w	r3, r2, r3
 8010de8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	1e5a      	subs	r2, r3, #1
 8010dee:	61fa      	str	r2, [r7, #28]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d102      	bne.n	8010dfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010df4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010df8:	e0c9      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dfe:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010e00:	69ba      	ldr	r2, [r7, #24]
 8010e02:	4b67      	ldr	r3, [pc, #412]	@ (8010fa0 <SDMMC_GetCmdResp1+0x1d8>)
 8010e04:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d0ef      	beq.n	8010dea <SDMMC_GetCmdResp1+0x22>
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d1ea      	bne.n	8010dea <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e18:	f003 0304 	and.w	r3, r3, #4
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d004      	beq.n	8010e2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2204      	movs	r2, #4
 8010e24:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e26:	2304      	movs	r3, #4
 8010e28:	e0b1      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d004      	beq.n	8010e40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2201      	movs	r2, #1
 8010e3a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e0a6      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	4a58      	ldr	r2, [pc, #352]	@ (8010fa4 <SDMMC_GetCmdResp1+0x1dc>)
 8010e44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f7ff fcf6 	bl	8010838 <SDMMC_GetCommandResponse>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	7afb      	ldrb	r3, [r7, #11]
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d001      	beq.n	8010e5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e56:	2301      	movs	r3, #1
 8010e58:	e099      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010e5a:	2100      	movs	r1, #0
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f7ff fcf8 	bl	8010852 <SDMMC_GetResponse>
 8010e62:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010e64:	697a      	ldr	r2, [r7, #20]
 8010e66:	4b50      	ldr	r3, [pc, #320]	@ (8010fa8 <SDMMC_GetCmdResp1+0x1e0>)
 8010e68:	4013      	ands	r3, r2
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e08d      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	da02      	bge.n	8010e7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010e7c:	e087      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d001      	beq.n	8010e8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e88:	2340      	movs	r3, #64	@ 0x40
 8010e8a:	e080      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d001      	beq.n	8010e9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e96:	2380      	movs	r3, #128	@ 0x80
 8010e98:	e079      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ea8:	e071      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d002      	beq.n	8010eba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010eb8:	e069      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010ec4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ec8:	e061      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010ed4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010ed8:	e059      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ee8:	e051      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ef4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010ef8:	e049      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010f08:	e041      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f18:	e039      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010f28:	e031      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010f34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010f38:	e029      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010f44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010f48:	e021      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010f54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010f58:	e019      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d002      	beq.n	8010f6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010f64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010f68:	e011      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d002      	beq.n	8010f7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010f74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010f78:	e009      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f003 0308 	and.w	r3, r3, #8
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d002      	beq.n	8010f8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010f84:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010f88:	e001      	b.n	8010f8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3720      	adds	r7, #32
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	2400000c 	.word	0x2400000c
 8010f9c:	10624dd3 	.word	0x10624dd3
 8010fa0:	00200045 	.word	0x00200045
 8010fa4:	002000c5 	.word	0x002000c5
 8010fa8:	fdffe008 	.word	0xfdffe008

08010fac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8011034 <SDMMC_GetCmdResp2+0x88>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8011038 <SDMMC_GetCmdResp2+0x8c>)
 8010fba:	fba2 2303 	umull	r2, r3, r2, r3
 8010fbe:	0a5b      	lsrs	r3, r3, #9
 8010fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fc4:	fb02 f303 	mul.w	r3, r2, r3
 8010fc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	1e5a      	subs	r2, r3, #1
 8010fce:	60fa      	str	r2, [r7, #12]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d102      	bne.n	8010fda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010fd8:	e026      	b.n	8011028 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fde:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d0ef      	beq.n	8010fca <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010fea:	68bb      	ldr	r3, [r7, #8]
 8010fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d1ea      	bne.n	8010fca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ff8:	f003 0304 	and.w	r3, r3, #4
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d004      	beq.n	801100a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2204      	movs	r2, #4
 8011004:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011006:	2304      	movs	r3, #4
 8011008:	e00e      	b.n	8011028 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801100e:	f003 0301 	and.w	r3, r3, #1
 8011012:	2b00      	cmp	r3, #0
 8011014:	d004      	beq.n	8011020 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801101c:	2301      	movs	r3, #1
 801101e:	e003      	b.n	8011028 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	4a06      	ldr	r2, [pc, #24]	@ (801103c <SDMMC_GetCmdResp2+0x90>)
 8011024:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011026:	2300      	movs	r3, #0
}
 8011028:	4618      	mov	r0, r3
 801102a:	3714      	adds	r7, #20
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr
 8011034:	2400000c 	.word	0x2400000c
 8011038:	10624dd3 	.word	0x10624dd3
 801103c:	002000c5 	.word	0x002000c5

08011040 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011048:	4b1a      	ldr	r3, [pc, #104]	@ (80110b4 <SDMMC_GetCmdResp3+0x74>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	4a1a      	ldr	r2, [pc, #104]	@ (80110b8 <SDMMC_GetCmdResp3+0x78>)
 801104e:	fba2 2303 	umull	r2, r3, r2, r3
 8011052:	0a5b      	lsrs	r3, r3, #9
 8011054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011058:	fb02 f303 	mul.w	r3, r2, r3
 801105c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	1e5a      	subs	r2, r3, #1
 8011062:	60fa      	str	r2, [r7, #12]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d102      	bne.n	801106e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011068:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801106c:	e01b      	b.n	80110a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011072:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801107a:	2b00      	cmp	r3, #0
 801107c:	d0ef      	beq.n	801105e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1ea      	bne.n	801105e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801108c:	f003 0304 	and.w	r3, r3, #4
 8011090:	2b00      	cmp	r3, #0
 8011092:	d004      	beq.n	801109e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2204      	movs	r2, #4
 8011098:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801109a:	2304      	movs	r3, #4
 801109c:	e003      	b.n	80110a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4a06      	ldr	r2, [pc, #24]	@ (80110bc <SDMMC_GetCmdResp3+0x7c>)
 80110a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80110a4:	2300      	movs	r3, #0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3714      	adds	r7, #20
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
 80110b2:	bf00      	nop
 80110b4:	2400000c 	.word	0x2400000c
 80110b8:	10624dd3 	.word	0x10624dd3
 80110bc:	002000c5 	.word	0x002000c5

080110c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b088      	sub	sp, #32
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	460b      	mov	r3, r1
 80110ca:	607a      	str	r2, [r7, #4]
 80110cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80110ce:	4b35      	ldr	r3, [pc, #212]	@ (80111a4 <SDMMC_GetCmdResp6+0xe4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4a35      	ldr	r2, [pc, #212]	@ (80111a8 <SDMMC_GetCmdResp6+0xe8>)
 80110d4:	fba2 2303 	umull	r2, r3, r2, r3
 80110d8:	0a5b      	lsrs	r3, r3, #9
 80110da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110de:	fb02 f303 	mul.w	r3, r2, r3
 80110e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	1e5a      	subs	r2, r3, #1
 80110e8:	61fa      	str	r2, [r7, #28]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d102      	bne.n	80110f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110f2:	e052      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110f8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011100:	2b00      	cmp	r3, #0
 8011102:	d0ef      	beq.n	80110e4 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801110a:	2b00      	cmp	r3, #0
 801110c:	d1ea      	bne.n	80110e4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011112:	f003 0304 	and.w	r3, r3, #4
 8011116:	2b00      	cmp	r3, #0
 8011118:	d004      	beq.n	8011124 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2204      	movs	r2, #4
 801111e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011120:	2304      	movs	r3, #4
 8011122:	e03a      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011128:	f003 0301 	and.w	r3, r3, #1
 801112c:	2b00      	cmp	r3, #0
 801112e:	d004      	beq.n	801113a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2201      	movs	r2, #1
 8011134:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011136:	2301      	movs	r3, #1
 8011138:	e02f      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f7ff fb7c 	bl	8010838 <SDMMC_GetCommandResponse>
 8011140:	4603      	mov	r3, r0
 8011142:	461a      	mov	r2, r3
 8011144:	7afb      	ldrb	r3, [r7, #11]
 8011146:	4293      	cmp	r3, r2
 8011148:	d001      	beq.n	801114e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801114a:	2301      	movs	r3, #1
 801114c:	e025      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	4a16      	ldr	r2, [pc, #88]	@ (80111ac <SDMMC_GetCmdResp6+0xec>)
 8011152:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011154:	2100      	movs	r1, #0
 8011156:	68f8      	ldr	r0, [r7, #12]
 8011158:	f7ff fb7b 	bl	8010852 <SDMMC_GetResponse>
 801115c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011164:	2b00      	cmp	r3, #0
 8011166:	d106      	bne.n	8011176 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	0c1b      	lsrs	r3, r3, #16
 801116c:	b29a      	uxth	r2, r3
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011172:	2300      	movs	r3, #0
 8011174:	e011      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801117c:	2b00      	cmp	r3, #0
 801117e:	d002      	beq.n	8011186 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011180:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011184:	e009      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801118c:	2b00      	cmp	r3, #0
 801118e:	d002      	beq.n	8011196 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011194:	e001      	b.n	801119a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801119a:	4618      	mov	r0, r3
 801119c:	3720      	adds	r7, #32
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	2400000c 	.word	0x2400000c
 80111a8:	10624dd3 	.word	0x10624dd3
 80111ac:	002000c5 	.word	0x002000c5

080111b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80111b8:	4b22      	ldr	r3, [pc, #136]	@ (8011244 <SDMMC_GetCmdResp7+0x94>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4a22      	ldr	r2, [pc, #136]	@ (8011248 <SDMMC_GetCmdResp7+0x98>)
 80111be:	fba2 2303 	umull	r2, r3, r2, r3
 80111c2:	0a5b      	lsrs	r3, r3, #9
 80111c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111c8:	fb02 f303 	mul.w	r3, r2, r3
 80111cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	1e5a      	subs	r2, r3, #1
 80111d2:	60fa      	str	r2, [r7, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d102      	bne.n	80111de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80111dc:	e02c      	b.n	8011238 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0ef      	beq.n	80111ce <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1ea      	bne.n	80111ce <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111fc:	f003 0304 	and.w	r3, r3, #4
 8011200:	2b00      	cmp	r3, #0
 8011202:	d004      	beq.n	801120e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2204      	movs	r2, #4
 8011208:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801120a:	2304      	movs	r3, #4
 801120c:	e014      	b.n	8011238 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011212:	f003 0301 	and.w	r3, r3, #1
 8011216:	2b00      	cmp	r3, #0
 8011218:	d004      	beq.n	8011224 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2201      	movs	r2, #1
 801121e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011220:	2301      	movs	r3, #1
 8011222:	e009      	b.n	8011238 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801122c:	2b00      	cmp	r3, #0
 801122e:	d002      	beq.n	8011236 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2240      	movs	r2, #64	@ 0x40
 8011234:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011236:	2300      	movs	r3, #0

}
 8011238:	4618      	mov	r0, r3
 801123a:	3714      	adds	r7, #20
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr
 8011244:	2400000c 	.word	0x2400000c
 8011248:	10624dd3 	.word	0x10624dd3

0801124c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011254:	4b11      	ldr	r3, [pc, #68]	@ (801129c <SDMMC_GetCmdError+0x50>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	4a11      	ldr	r2, [pc, #68]	@ (80112a0 <SDMMC_GetCmdError+0x54>)
 801125a:	fba2 2303 	umull	r2, r3, r2, r3
 801125e:	0a5b      	lsrs	r3, r3, #9
 8011260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011264:	fb02 f303 	mul.w	r3, r2, r3
 8011268:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	1e5a      	subs	r2, r3, #1
 801126e:	60fa      	str	r2, [r7, #12]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d102      	bne.n	801127a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011274:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011278:	e009      	b.n	801128e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011282:	2b00      	cmp	r3, #0
 8011284:	d0f1      	beq.n	801126a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4a06      	ldr	r2, [pc, #24]	@ (80112a4 <SDMMC_GetCmdError+0x58>)
 801128a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	2400000c 	.word	0x2400000c
 80112a0:	10624dd3 	.word	0x10624dd3
 80112a4:	002000c5 	.word	0x002000c5

080112a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80112ac:	4904      	ldr	r1, [pc, #16]	@ (80112c0 <MX_FATFS_Init+0x18>)
 80112ae:	4805      	ldr	r0, [pc, #20]	@ (80112c4 <MX_FATFS_Init+0x1c>)
 80112b0:	f000 fa8e 	bl	80117d0 <FATFS_LinkDriver>
 80112b4:	4603      	mov	r3, r0
 80112b6:	461a      	mov	r2, r3
 80112b8:	4b03      	ldr	r3, [pc, #12]	@ (80112c8 <MX_FATFS_Init+0x20>)
 80112ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80112bc:	bf00      	nop
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	240008a0 	.word	0x240008a0
 80112c4:	0801249c 	.word	0x0801249c
 80112c8:	2400089c 	.word	0x2400089c

080112cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80112d2:	2300      	movs	r3, #0
 80112d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80112d6:	f000 f885 	bl	80113e4 <BSP_SD_IsDetected>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b01      	cmp	r3, #1
 80112de:	d001      	beq.n	80112e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80112e0:	2302      	movs	r3, #2
 80112e2:	e012      	b.n	801130a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80112e4:	480b      	ldr	r0, [pc, #44]	@ (8011314 <BSP_SD_Init+0x48>)
 80112e6:	f7fb f95d 	bl	800c5a4 <HAL_SD_Init>
 80112ea:	4603      	mov	r3, r0
 80112ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80112ee:	79fb      	ldrb	r3, [r7, #7]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d109      	bne.n	8011308 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80112f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80112f8:	4806      	ldr	r0, [pc, #24]	@ (8011314 <BSP_SD_Init+0x48>)
 80112fa:	f7fc f813 	bl	800d324 <HAL_SD_ConfigWideBusOperation>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d001      	beq.n	8011308 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011304:	2301      	movs	r3, #1
 8011306:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011308:	79fb      	ldrb	r3, [r7, #7]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	240003cc 	.word	0x240003cc

08011318 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011324:	2300      	movs	r3, #0
 8011326:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68ba      	ldr	r2, [r7, #8]
 801132c:	68f9      	ldr	r1, [r7, #12]
 801132e:	4806      	ldr	r0, [pc, #24]	@ (8011348 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011330:	f7fb fa58 	bl	800c7e4 <HAL_SD_ReadBlocks_DMA>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d001      	beq.n	801133e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801133a:	2301      	movs	r3, #1
 801133c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801133e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011340:	4618      	mov	r0, r3
 8011342:	3718      	adds	r7, #24
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	240003cc 	.word	0x240003cc

0801134c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b086      	sub	sp, #24
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	68f9      	ldr	r1, [r7, #12]
 8011362:	4806      	ldr	r0, [pc, #24]	@ (801137c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011364:	f7fb fae6 	bl	800c934 <HAL_SD_WriteBlocks_DMA>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d001      	beq.n	8011372 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011372:	7dfb      	ldrb	r3, [r7, #23]
}
 8011374:	4618      	mov	r0, r3
 8011376:	3718      	adds	r7, #24
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	240003cc 	.word	0x240003cc

08011380 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011384:	4805      	ldr	r0, [pc, #20]	@ (801139c <BSP_SD_GetCardState+0x1c>)
 8011386:	f7fc f8df 	bl	800d548 <HAL_SD_GetCardState>
 801138a:	4603      	mov	r3, r0
 801138c:	2b04      	cmp	r3, #4
 801138e:	bf14      	ite	ne
 8011390:	2301      	movne	r3, #1
 8011392:	2300      	moveq	r3, #0
 8011394:	b2db      	uxtb	r3, r3
}
 8011396:	4618      	mov	r0, r3
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	240003cc 	.word	0x240003cc

080113a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80113a8:	6879      	ldr	r1, [r7, #4]
 80113aa:	4803      	ldr	r0, [pc, #12]	@ (80113b8 <BSP_SD_GetCardInfo+0x18>)
 80113ac:	f7fb ff8e 	bl	800d2cc <HAL_SD_GetCardInfo>
}
 80113b0:	bf00      	nop
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	240003cc 	.word	0x240003cc

080113bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80113c4:	f000 f9a0 	bl	8011708 <BSP_SD_WriteCpltCallback>
}
 80113c8:	bf00      	nop
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}

080113d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80113d8:	f000 f9a2 	bl	8011720 <BSP_SD_ReadCpltCallback>
}
 80113dc:	bf00      	nop
 80113de:	3708      	adds	r7, #8
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80113ea:	2301      	movs	r3, #1
 80113ec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80113ee:	f000 f80b 	bl	8011408 <BSP_PlatformIsDetected>
 80113f2:	4603      	mov	r3, r0
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d101      	bne.n	80113fc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80113f8:	2300      	movs	r3, #0
 80113fa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80113fc:	79fb      	ldrb	r3, [r7, #7]
 80113fe:	b2db      	uxtb	r3, r3
}
 8011400:	4618      	mov	r0, r3
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801140e:	2301      	movs	r3, #1
 8011410:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011416:	4806      	ldr	r0, [pc, #24]	@ (8011430 <BSP_PlatformIsDetected+0x28>)
 8011418:	f7f7 fd0c 	bl	8008e34 <HAL_GPIO_ReadPin>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011422:	2300      	movs	r3, #0
 8011424:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011426:	79fb      	ldrb	r3, [r7, #7]
}
 8011428:	4618      	mov	r0, r3
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}
 8011430:	58021400 	.word	0x58021400

08011434 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801143c:	f7f1 fb72 	bl	8002b24 <HAL_GetTick>
 8011440:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011442:	e006      	b.n	8011452 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011444:	f7ff ff9c 	bl	8011380 <BSP_SD_GetCardState>
 8011448:	4603      	mov	r3, r0
 801144a:	2b00      	cmp	r3, #0
 801144c:	d101      	bne.n	8011452 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801144e:	2300      	movs	r3, #0
 8011450:	e009      	b.n	8011466 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011452:	f7f1 fb67 	bl	8002b24 <HAL_GetTick>
 8011456:	4602      	mov	r2, r0
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	429a      	cmp	r2, r3
 8011460:	d8f0      	bhi.n	8011444 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
	...

08011470 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	4603      	mov	r3, r0
 8011478:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801147a:	4b0b      	ldr	r3, [pc, #44]	@ (80114a8 <SD_CheckStatus+0x38>)
 801147c:	2201      	movs	r2, #1
 801147e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011480:	f7ff ff7e 	bl	8011380 <BSP_SD_GetCardState>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d107      	bne.n	801149a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801148a:	4b07      	ldr	r3, [pc, #28]	@ (80114a8 <SD_CheckStatus+0x38>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	b2db      	uxtb	r3, r3
 8011490:	f023 0301 	bic.w	r3, r3, #1
 8011494:	b2da      	uxtb	r2, r3
 8011496:	4b04      	ldr	r3, [pc, #16]	@ (80114a8 <SD_CheckStatus+0x38>)
 8011498:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801149a:	4b03      	ldr	r3, [pc, #12]	@ (80114a8 <SD_CheckStatus+0x38>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	b2db      	uxtb	r3, r3
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	24000019 	.word	0x24000019

080114ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	4603      	mov	r3, r0
 80114b4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80114b6:	f7ff ff09 	bl	80112cc <BSP_SD_Init>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d107      	bne.n	80114d0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7ff ffd4 	bl	8011470 <SD_CheckStatus>
 80114c8:	4603      	mov	r3, r0
 80114ca:	461a      	mov	r2, r3
 80114cc:	4b04      	ldr	r3, [pc, #16]	@ (80114e0 <SD_initialize+0x34>)
 80114ce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80114d0:	4b03      	ldr	r3, [pc, #12]	@ (80114e0 <SD_initialize+0x34>)
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	b2db      	uxtb	r3, r3
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3708      	adds	r7, #8
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	24000019 	.word	0x24000019

080114e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80114ee:	79fb      	ldrb	r3, [r7, #7]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7ff ffbd 	bl	8011470 <SD_CheckStatus>
 80114f6:	4603      	mov	r3, r0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3708      	adds	r7, #8
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b086      	sub	sp, #24
 8011504:	af00      	add	r7, sp, #0
 8011506:	60b9      	str	r1, [r7, #8]
 8011508:	607a      	str	r2, [r7, #4]
 801150a:	603b      	str	r3, [r7, #0]
 801150c:	4603      	mov	r3, r0
 801150e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011510:	2301      	movs	r3, #1
 8011512:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011514:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011518:	f7ff ff8c 	bl	8011434 <SD_CheckStatusWithTimeout>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	da01      	bge.n	8011526 <SD_read+0x26>
  {
    return res;
 8011522:	7dfb      	ldrb	r3, [r7, #23]
 8011524:	e03b      	b.n	801159e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011526:	683a      	ldr	r2, [r7, #0]
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	68b8      	ldr	r0, [r7, #8]
 801152c:	f7ff fef4 	bl	8011318 <BSP_SD_ReadBlocks_DMA>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d132      	bne.n	801159c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011536:	4b1c      	ldr	r3, [pc, #112]	@ (80115a8 <SD_read+0xa8>)
 8011538:	2200      	movs	r2, #0
 801153a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801153c:	f7f1 faf2 	bl	8002b24 <HAL_GetTick>
 8011540:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011542:	bf00      	nop
 8011544:	4b18      	ldr	r3, [pc, #96]	@ (80115a8 <SD_read+0xa8>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d108      	bne.n	801155e <SD_read+0x5e>
 801154c:	f7f1 faea 	bl	8002b24 <HAL_GetTick>
 8011550:	4602      	mov	r2, r0
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	f247 522f 	movw	r2, #29999	@ 0x752f
 801155a:	4293      	cmp	r3, r2
 801155c:	d9f2      	bls.n	8011544 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801155e:	4b12      	ldr	r3, [pc, #72]	@ (80115a8 <SD_read+0xa8>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d102      	bne.n	801156c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011566:	2301      	movs	r3, #1
 8011568:	75fb      	strb	r3, [r7, #23]
 801156a:	e017      	b.n	801159c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801156c:	4b0e      	ldr	r3, [pc, #56]	@ (80115a8 <SD_read+0xa8>)
 801156e:	2200      	movs	r2, #0
 8011570:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011572:	f7f1 fad7 	bl	8002b24 <HAL_GetTick>
 8011576:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011578:	e007      	b.n	801158a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801157a:	f7ff ff01 	bl	8011380 <BSP_SD_GetCardState>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <SD_read+0x8a>
          {
            res = RES_OK;
 8011584:	2300      	movs	r3, #0
 8011586:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011588:	e008      	b.n	801159c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801158a:	f7f1 facb 	bl	8002b24 <HAL_GetTick>
 801158e:	4602      	mov	r2, r0
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	1ad3      	subs	r3, r2, r3
 8011594:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011598:	4293      	cmp	r3, r2
 801159a:	d9ee      	bls.n	801157a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801159c:	7dfb      	ldrb	r3, [r7, #23]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3718      	adds	r7, #24
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop
 80115a8:	240008a8 	.word	0x240008a8

080115ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b086      	sub	sp, #24
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60b9      	str	r1, [r7, #8]
 80115b4:	607a      	str	r2, [r7, #4]
 80115b6:	603b      	str	r3, [r7, #0]
 80115b8:	4603      	mov	r3, r0
 80115ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80115c0:	4b24      	ldr	r3, [pc, #144]	@ (8011654 <SD_write+0xa8>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80115c6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80115ca:	f7ff ff33 	bl	8011434 <SD_CheckStatusWithTimeout>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	da01      	bge.n	80115d8 <SD_write+0x2c>
  {
    return res;
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
 80115d6:	e038      	b.n	801164a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80115d8:	683a      	ldr	r2, [r7, #0]
 80115da:	6879      	ldr	r1, [r7, #4]
 80115dc:	68b8      	ldr	r0, [r7, #8]
 80115de:	f7ff feb5 	bl	801134c <BSP_SD_WriteBlocks_DMA>
 80115e2:	4603      	mov	r3, r0
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d12f      	bne.n	8011648 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80115e8:	f7f1 fa9c 	bl	8002b24 <HAL_GetTick>
 80115ec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80115ee:	bf00      	nop
 80115f0:	4b18      	ldr	r3, [pc, #96]	@ (8011654 <SD_write+0xa8>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d108      	bne.n	801160a <SD_write+0x5e>
 80115f8:	f7f1 fa94 	bl	8002b24 <HAL_GetTick>
 80115fc:	4602      	mov	r2, r0
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011606:	4293      	cmp	r3, r2
 8011608:	d9f2      	bls.n	80115f0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801160a:	4b12      	ldr	r3, [pc, #72]	@ (8011654 <SD_write+0xa8>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d102      	bne.n	8011618 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	75fb      	strb	r3, [r7, #23]
 8011616:	e017      	b.n	8011648 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011618:	4b0e      	ldr	r3, [pc, #56]	@ (8011654 <SD_write+0xa8>)
 801161a:	2200      	movs	r2, #0
 801161c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801161e:	f7f1 fa81 	bl	8002b24 <HAL_GetTick>
 8011622:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011624:	e007      	b.n	8011636 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011626:	f7ff feab 	bl	8011380 <BSP_SD_GetCardState>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d102      	bne.n	8011636 <SD_write+0x8a>
          {
            res = RES_OK;
 8011630:	2300      	movs	r3, #0
 8011632:	75fb      	strb	r3, [r7, #23]
            break;
 8011634:	e008      	b.n	8011648 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011636:	f7f1 fa75 	bl	8002b24 <HAL_GetTick>
 801163a:	4602      	mov	r2, r0
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011644:	4293      	cmp	r3, r2
 8011646:	d9ee      	bls.n	8011626 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011648:	7dfb      	ldrb	r3, [r7, #23]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3718      	adds	r7, #24
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	240008a4 	.word	0x240008a4

08011658 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b08c      	sub	sp, #48	@ 0x30
 801165c:	af00      	add	r7, sp, #0
 801165e:	4603      	mov	r3, r0
 8011660:	603a      	str	r2, [r7, #0]
 8011662:	71fb      	strb	r3, [r7, #7]
 8011664:	460b      	mov	r3, r1
 8011666:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011668:	2301      	movs	r3, #1
 801166a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801166e:	4b25      	ldr	r3, [pc, #148]	@ (8011704 <SD_ioctl+0xac>)
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	b2db      	uxtb	r3, r3
 8011674:	f003 0301 	and.w	r3, r3, #1
 8011678:	2b00      	cmp	r3, #0
 801167a:	d001      	beq.n	8011680 <SD_ioctl+0x28>
 801167c:	2303      	movs	r3, #3
 801167e:	e03c      	b.n	80116fa <SD_ioctl+0xa2>

  switch (cmd)
 8011680:	79bb      	ldrb	r3, [r7, #6]
 8011682:	2b03      	cmp	r3, #3
 8011684:	d834      	bhi.n	80116f0 <SD_ioctl+0x98>
 8011686:	a201      	add	r2, pc, #4	@ (adr r2, 801168c <SD_ioctl+0x34>)
 8011688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168c:	0801169d 	.word	0x0801169d
 8011690:	080116a5 	.word	0x080116a5
 8011694:	080116bd 	.word	0x080116bd
 8011698:	080116d7 	.word	0x080116d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80116a2:	e028      	b.n	80116f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80116a4:	f107 0308 	add.w	r3, r7, #8
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7ff fe79 	bl	80113a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80116ae:	6a3a      	ldr	r2, [r7, #32]
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80116b4:	2300      	movs	r3, #0
 80116b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80116ba:	e01c      	b.n	80116f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80116bc:	f107 0308 	add.w	r3, r7, #8
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7ff fe6d 	bl	80113a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80116c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80116ce:	2300      	movs	r3, #0
 80116d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80116d4:	e00f      	b.n	80116f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80116d6:	f107 0308 	add.w	r3, r7, #8
 80116da:	4618      	mov	r0, r3
 80116dc:	f7ff fe60 	bl	80113a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80116e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116e2:	0a5a      	lsrs	r2, r3, #9
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80116e8:	2300      	movs	r3, #0
 80116ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80116ee:	e002      	b.n	80116f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80116f0:	2304      	movs	r3, #4
 80116f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80116f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3730      	adds	r7, #48	@ 0x30
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	24000019 	.word	0x24000019

08011708 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011708:	b480      	push	{r7}
 801170a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801170c:	4b03      	ldr	r3, [pc, #12]	@ (801171c <BSP_SD_WriteCpltCallback+0x14>)
 801170e:	2201      	movs	r2, #1
 8011710:	601a      	str	r2, [r3, #0]
}
 8011712:	bf00      	nop
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	240008a4 	.word	0x240008a4

08011720 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011720:	b480      	push	{r7}
 8011722:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011724:	4b03      	ldr	r3, [pc, #12]	@ (8011734 <BSP_SD_ReadCpltCallback+0x14>)
 8011726:	2201      	movs	r2, #1
 8011728:	601a      	str	r2, [r3, #0]
}
 801172a:	bf00      	nop
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	240008a8 	.word	0x240008a8

08011738 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011738:	b480      	push	{r7}
 801173a:	b087      	sub	sp, #28
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011746:	2301      	movs	r3, #1
 8011748:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801174e:	4b1f      	ldr	r3, [pc, #124]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011750:	7a5b      	ldrb	r3, [r3, #9]
 8011752:	b2db      	uxtb	r3, r3
 8011754:	2b00      	cmp	r3, #0
 8011756:	d131      	bne.n	80117bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011758:	4b1c      	ldr	r3, [pc, #112]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 801175a:	7a5b      	ldrb	r3, [r3, #9]
 801175c:	b2db      	uxtb	r3, r3
 801175e:	461a      	mov	r2, r3
 8011760:	4b1a      	ldr	r3, [pc, #104]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011762:	2100      	movs	r1, #0
 8011764:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011766:	4b19      	ldr	r3, [pc, #100]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011768:	7a5b      	ldrb	r3, [r3, #9]
 801176a:	b2db      	uxtb	r3, r3
 801176c:	4a17      	ldr	r2, [pc, #92]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4413      	add	r3, r2
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011776:	4b15      	ldr	r3, [pc, #84]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011778:	7a5b      	ldrb	r3, [r3, #9]
 801177a:	b2db      	uxtb	r3, r3
 801177c:	461a      	mov	r2, r3
 801177e:	4b13      	ldr	r3, [pc, #76]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011780:	4413      	add	r3, r2
 8011782:	79fa      	ldrb	r2, [r7, #7]
 8011784:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011786:	4b11      	ldr	r3, [pc, #68]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011788:	7a5b      	ldrb	r3, [r3, #9]
 801178a:	b2db      	uxtb	r3, r3
 801178c:	1c5a      	adds	r2, r3, #1
 801178e:	b2d1      	uxtb	r1, r2
 8011790:	4a0e      	ldr	r2, [pc, #56]	@ (80117cc <FATFS_LinkDriverEx+0x94>)
 8011792:	7251      	strb	r1, [r2, #9]
 8011794:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011796:	7dbb      	ldrb	r3, [r7, #22]
 8011798:	3330      	adds	r3, #48	@ 0x30
 801179a:	b2da      	uxtb	r2, r3
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	3301      	adds	r3, #1
 80117a4:	223a      	movs	r2, #58	@ 0x3a
 80117a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	3302      	adds	r3, #2
 80117ac:	222f      	movs	r2, #47	@ 0x2f
 80117ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	3303      	adds	r3, #3
 80117b4:	2200      	movs	r2, #0
 80117b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80117b8:	2300      	movs	r3, #0
 80117ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	371c      	adds	r7, #28
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	240008ac 	.word	0x240008ac

080117d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80117da:	2200      	movs	r2, #0
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f7ff ffaa 	bl	8011738 <FATFS_LinkDriverEx>
 80117e4:	4603      	mov	r3, r0
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3708      	adds	r7, #8
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
	...

080117f0 <siprintf>:
 80117f0:	b40e      	push	{r1, r2, r3}
 80117f2:	b510      	push	{r4, lr}
 80117f4:	b09d      	sub	sp, #116	@ 0x74
 80117f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80117f8:	9002      	str	r0, [sp, #8]
 80117fa:	9006      	str	r0, [sp, #24]
 80117fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011800:	480a      	ldr	r0, [pc, #40]	@ (801182c <siprintf+0x3c>)
 8011802:	9107      	str	r1, [sp, #28]
 8011804:	9104      	str	r1, [sp, #16]
 8011806:	490a      	ldr	r1, [pc, #40]	@ (8011830 <siprintf+0x40>)
 8011808:	f853 2b04 	ldr.w	r2, [r3], #4
 801180c:	9105      	str	r1, [sp, #20]
 801180e:	2400      	movs	r4, #0
 8011810:	a902      	add	r1, sp, #8
 8011812:	6800      	ldr	r0, [r0, #0]
 8011814:	9301      	str	r3, [sp, #4]
 8011816:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011818:	f000 f9a2 	bl	8011b60 <_svfiprintf_r>
 801181c:	9b02      	ldr	r3, [sp, #8]
 801181e:	701c      	strb	r4, [r3, #0]
 8011820:	b01d      	add	sp, #116	@ 0x74
 8011822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011826:	b003      	add	sp, #12
 8011828:	4770      	bx	lr
 801182a:	bf00      	nop
 801182c:	2400001c 	.word	0x2400001c
 8011830:	ffff0208 	.word	0xffff0208

08011834 <memset>:
 8011834:	4402      	add	r2, r0
 8011836:	4603      	mov	r3, r0
 8011838:	4293      	cmp	r3, r2
 801183a:	d100      	bne.n	801183e <memset+0xa>
 801183c:	4770      	bx	lr
 801183e:	f803 1b01 	strb.w	r1, [r3], #1
 8011842:	e7f9      	b.n	8011838 <memset+0x4>

08011844 <__errno>:
 8011844:	4b01      	ldr	r3, [pc, #4]	@ (801184c <__errno+0x8>)
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	2400001c 	.word	0x2400001c

08011850 <__libc_init_array>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	4d0d      	ldr	r5, [pc, #52]	@ (8011888 <__libc_init_array+0x38>)
 8011854:	4c0d      	ldr	r4, [pc, #52]	@ (801188c <__libc_init_array+0x3c>)
 8011856:	1b64      	subs	r4, r4, r5
 8011858:	10a4      	asrs	r4, r4, #2
 801185a:	2600      	movs	r6, #0
 801185c:	42a6      	cmp	r6, r4
 801185e:	d109      	bne.n	8011874 <__libc_init_array+0x24>
 8011860:	4d0b      	ldr	r5, [pc, #44]	@ (8011890 <__libc_init_array+0x40>)
 8011862:	4c0c      	ldr	r4, [pc, #48]	@ (8011894 <__libc_init_array+0x44>)
 8011864:	f000 fc64 	bl	8012130 <_init>
 8011868:	1b64      	subs	r4, r4, r5
 801186a:	10a4      	asrs	r4, r4, #2
 801186c:	2600      	movs	r6, #0
 801186e:	42a6      	cmp	r6, r4
 8011870:	d105      	bne.n	801187e <__libc_init_array+0x2e>
 8011872:	bd70      	pop	{r4, r5, r6, pc}
 8011874:	f855 3b04 	ldr.w	r3, [r5], #4
 8011878:	4798      	blx	r3
 801187a:	3601      	adds	r6, #1
 801187c:	e7ee      	b.n	801185c <__libc_init_array+0xc>
 801187e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011882:	4798      	blx	r3
 8011884:	3601      	adds	r6, #1
 8011886:	e7f2      	b.n	801186e <__libc_init_array+0x1e>
 8011888:	080124ec 	.word	0x080124ec
 801188c:	080124ec 	.word	0x080124ec
 8011890:	080124ec 	.word	0x080124ec
 8011894:	080124f0 	.word	0x080124f0

08011898 <__retarget_lock_acquire_recursive>:
 8011898:	4770      	bx	lr

0801189a <__retarget_lock_release_recursive>:
 801189a:	4770      	bx	lr

0801189c <memcpy>:
 801189c:	440a      	add	r2, r1
 801189e:	4291      	cmp	r1, r2
 80118a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80118a4:	d100      	bne.n	80118a8 <memcpy+0xc>
 80118a6:	4770      	bx	lr
 80118a8:	b510      	push	{r4, lr}
 80118aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118b2:	4291      	cmp	r1, r2
 80118b4:	d1f9      	bne.n	80118aa <memcpy+0xe>
 80118b6:	bd10      	pop	{r4, pc}

080118b8 <_free_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4605      	mov	r5, r0
 80118bc:	2900      	cmp	r1, #0
 80118be:	d041      	beq.n	8011944 <_free_r+0x8c>
 80118c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118c4:	1f0c      	subs	r4, r1, #4
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	bfb8      	it	lt
 80118ca:	18e4      	addlt	r4, r4, r3
 80118cc:	f000 f8e0 	bl	8011a90 <__malloc_lock>
 80118d0:	4a1d      	ldr	r2, [pc, #116]	@ (8011948 <_free_r+0x90>)
 80118d2:	6813      	ldr	r3, [r2, #0]
 80118d4:	b933      	cbnz	r3, 80118e4 <_free_r+0x2c>
 80118d6:	6063      	str	r3, [r4, #4]
 80118d8:	6014      	str	r4, [r2, #0]
 80118da:	4628      	mov	r0, r5
 80118dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118e0:	f000 b8dc 	b.w	8011a9c <__malloc_unlock>
 80118e4:	42a3      	cmp	r3, r4
 80118e6:	d908      	bls.n	80118fa <_free_r+0x42>
 80118e8:	6820      	ldr	r0, [r4, #0]
 80118ea:	1821      	adds	r1, r4, r0
 80118ec:	428b      	cmp	r3, r1
 80118ee:	bf01      	itttt	eq
 80118f0:	6819      	ldreq	r1, [r3, #0]
 80118f2:	685b      	ldreq	r3, [r3, #4]
 80118f4:	1809      	addeq	r1, r1, r0
 80118f6:	6021      	streq	r1, [r4, #0]
 80118f8:	e7ed      	b.n	80118d6 <_free_r+0x1e>
 80118fa:	461a      	mov	r2, r3
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	b10b      	cbz	r3, 8011904 <_free_r+0x4c>
 8011900:	42a3      	cmp	r3, r4
 8011902:	d9fa      	bls.n	80118fa <_free_r+0x42>
 8011904:	6811      	ldr	r1, [r2, #0]
 8011906:	1850      	adds	r0, r2, r1
 8011908:	42a0      	cmp	r0, r4
 801190a:	d10b      	bne.n	8011924 <_free_r+0x6c>
 801190c:	6820      	ldr	r0, [r4, #0]
 801190e:	4401      	add	r1, r0
 8011910:	1850      	adds	r0, r2, r1
 8011912:	4283      	cmp	r3, r0
 8011914:	6011      	str	r1, [r2, #0]
 8011916:	d1e0      	bne.n	80118da <_free_r+0x22>
 8011918:	6818      	ldr	r0, [r3, #0]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	6053      	str	r3, [r2, #4]
 801191e:	4408      	add	r0, r1
 8011920:	6010      	str	r0, [r2, #0]
 8011922:	e7da      	b.n	80118da <_free_r+0x22>
 8011924:	d902      	bls.n	801192c <_free_r+0x74>
 8011926:	230c      	movs	r3, #12
 8011928:	602b      	str	r3, [r5, #0]
 801192a:	e7d6      	b.n	80118da <_free_r+0x22>
 801192c:	6820      	ldr	r0, [r4, #0]
 801192e:	1821      	adds	r1, r4, r0
 8011930:	428b      	cmp	r3, r1
 8011932:	bf04      	itt	eq
 8011934:	6819      	ldreq	r1, [r3, #0]
 8011936:	685b      	ldreq	r3, [r3, #4]
 8011938:	6063      	str	r3, [r4, #4]
 801193a:	bf04      	itt	eq
 801193c:	1809      	addeq	r1, r1, r0
 801193e:	6021      	streq	r1, [r4, #0]
 8011940:	6054      	str	r4, [r2, #4]
 8011942:	e7ca      	b.n	80118da <_free_r+0x22>
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	bf00      	nop
 8011948:	240009fc 	.word	0x240009fc

0801194c <sbrk_aligned>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	4e0f      	ldr	r6, [pc, #60]	@ (801198c <sbrk_aligned+0x40>)
 8011950:	460c      	mov	r4, r1
 8011952:	6831      	ldr	r1, [r6, #0]
 8011954:	4605      	mov	r5, r0
 8011956:	b911      	cbnz	r1, 801195e <sbrk_aligned+0x12>
 8011958:	f000 fba4 	bl	80120a4 <_sbrk_r>
 801195c:	6030      	str	r0, [r6, #0]
 801195e:	4621      	mov	r1, r4
 8011960:	4628      	mov	r0, r5
 8011962:	f000 fb9f 	bl	80120a4 <_sbrk_r>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	d103      	bne.n	8011972 <sbrk_aligned+0x26>
 801196a:	f04f 34ff 	mov.w	r4, #4294967295
 801196e:	4620      	mov	r0, r4
 8011970:	bd70      	pop	{r4, r5, r6, pc}
 8011972:	1cc4      	adds	r4, r0, #3
 8011974:	f024 0403 	bic.w	r4, r4, #3
 8011978:	42a0      	cmp	r0, r4
 801197a:	d0f8      	beq.n	801196e <sbrk_aligned+0x22>
 801197c:	1a21      	subs	r1, r4, r0
 801197e:	4628      	mov	r0, r5
 8011980:	f000 fb90 	bl	80120a4 <_sbrk_r>
 8011984:	3001      	adds	r0, #1
 8011986:	d1f2      	bne.n	801196e <sbrk_aligned+0x22>
 8011988:	e7ef      	b.n	801196a <sbrk_aligned+0x1e>
 801198a:	bf00      	nop
 801198c:	240009f8 	.word	0x240009f8

08011990 <_malloc_r>:
 8011990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011994:	1ccd      	adds	r5, r1, #3
 8011996:	f025 0503 	bic.w	r5, r5, #3
 801199a:	3508      	adds	r5, #8
 801199c:	2d0c      	cmp	r5, #12
 801199e:	bf38      	it	cc
 80119a0:	250c      	movcc	r5, #12
 80119a2:	2d00      	cmp	r5, #0
 80119a4:	4606      	mov	r6, r0
 80119a6:	db01      	blt.n	80119ac <_malloc_r+0x1c>
 80119a8:	42a9      	cmp	r1, r5
 80119aa:	d904      	bls.n	80119b6 <_malloc_r+0x26>
 80119ac:	230c      	movs	r3, #12
 80119ae:	6033      	str	r3, [r6, #0]
 80119b0:	2000      	movs	r0, #0
 80119b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a8c <_malloc_r+0xfc>
 80119ba:	f000 f869 	bl	8011a90 <__malloc_lock>
 80119be:	f8d8 3000 	ldr.w	r3, [r8]
 80119c2:	461c      	mov	r4, r3
 80119c4:	bb44      	cbnz	r4, 8011a18 <_malloc_r+0x88>
 80119c6:	4629      	mov	r1, r5
 80119c8:	4630      	mov	r0, r6
 80119ca:	f7ff ffbf 	bl	801194c <sbrk_aligned>
 80119ce:	1c43      	adds	r3, r0, #1
 80119d0:	4604      	mov	r4, r0
 80119d2:	d158      	bne.n	8011a86 <_malloc_r+0xf6>
 80119d4:	f8d8 4000 	ldr.w	r4, [r8]
 80119d8:	4627      	mov	r7, r4
 80119da:	2f00      	cmp	r7, #0
 80119dc:	d143      	bne.n	8011a66 <_malloc_r+0xd6>
 80119de:	2c00      	cmp	r4, #0
 80119e0:	d04b      	beq.n	8011a7a <_malloc_r+0xea>
 80119e2:	6823      	ldr	r3, [r4, #0]
 80119e4:	4639      	mov	r1, r7
 80119e6:	4630      	mov	r0, r6
 80119e8:	eb04 0903 	add.w	r9, r4, r3
 80119ec:	f000 fb5a 	bl	80120a4 <_sbrk_r>
 80119f0:	4581      	cmp	r9, r0
 80119f2:	d142      	bne.n	8011a7a <_malloc_r+0xea>
 80119f4:	6821      	ldr	r1, [r4, #0]
 80119f6:	1a6d      	subs	r5, r5, r1
 80119f8:	4629      	mov	r1, r5
 80119fa:	4630      	mov	r0, r6
 80119fc:	f7ff ffa6 	bl	801194c <sbrk_aligned>
 8011a00:	3001      	adds	r0, #1
 8011a02:	d03a      	beq.n	8011a7a <_malloc_r+0xea>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	442b      	add	r3, r5
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8011a0e:	685a      	ldr	r2, [r3, #4]
 8011a10:	bb62      	cbnz	r2, 8011a6c <_malloc_r+0xdc>
 8011a12:	f8c8 7000 	str.w	r7, [r8]
 8011a16:	e00f      	b.n	8011a38 <_malloc_r+0xa8>
 8011a18:	6822      	ldr	r2, [r4, #0]
 8011a1a:	1b52      	subs	r2, r2, r5
 8011a1c:	d420      	bmi.n	8011a60 <_malloc_r+0xd0>
 8011a1e:	2a0b      	cmp	r2, #11
 8011a20:	d917      	bls.n	8011a52 <_malloc_r+0xc2>
 8011a22:	1961      	adds	r1, r4, r5
 8011a24:	42a3      	cmp	r3, r4
 8011a26:	6025      	str	r5, [r4, #0]
 8011a28:	bf18      	it	ne
 8011a2a:	6059      	strne	r1, [r3, #4]
 8011a2c:	6863      	ldr	r3, [r4, #4]
 8011a2e:	bf08      	it	eq
 8011a30:	f8c8 1000 	streq.w	r1, [r8]
 8011a34:	5162      	str	r2, [r4, r5]
 8011a36:	604b      	str	r3, [r1, #4]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f000 f82f 	bl	8011a9c <__malloc_unlock>
 8011a3e:	f104 000b 	add.w	r0, r4, #11
 8011a42:	1d23      	adds	r3, r4, #4
 8011a44:	f020 0007 	bic.w	r0, r0, #7
 8011a48:	1ac2      	subs	r2, r0, r3
 8011a4a:	bf1c      	itt	ne
 8011a4c:	1a1b      	subne	r3, r3, r0
 8011a4e:	50a3      	strne	r3, [r4, r2]
 8011a50:	e7af      	b.n	80119b2 <_malloc_r+0x22>
 8011a52:	6862      	ldr	r2, [r4, #4]
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	bf0c      	ite	eq
 8011a58:	f8c8 2000 	streq.w	r2, [r8]
 8011a5c:	605a      	strne	r2, [r3, #4]
 8011a5e:	e7eb      	b.n	8011a38 <_malloc_r+0xa8>
 8011a60:	4623      	mov	r3, r4
 8011a62:	6864      	ldr	r4, [r4, #4]
 8011a64:	e7ae      	b.n	80119c4 <_malloc_r+0x34>
 8011a66:	463c      	mov	r4, r7
 8011a68:	687f      	ldr	r7, [r7, #4]
 8011a6a:	e7b6      	b.n	80119da <_malloc_r+0x4a>
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	d1fb      	bne.n	8011a6c <_malloc_r+0xdc>
 8011a74:	2300      	movs	r3, #0
 8011a76:	6053      	str	r3, [r2, #4]
 8011a78:	e7de      	b.n	8011a38 <_malloc_r+0xa8>
 8011a7a:	230c      	movs	r3, #12
 8011a7c:	6033      	str	r3, [r6, #0]
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f000 f80c 	bl	8011a9c <__malloc_unlock>
 8011a84:	e794      	b.n	80119b0 <_malloc_r+0x20>
 8011a86:	6005      	str	r5, [r0, #0]
 8011a88:	e7d6      	b.n	8011a38 <_malloc_r+0xa8>
 8011a8a:	bf00      	nop
 8011a8c:	240009fc 	.word	0x240009fc

08011a90 <__malloc_lock>:
 8011a90:	4801      	ldr	r0, [pc, #4]	@ (8011a98 <__malloc_lock+0x8>)
 8011a92:	f7ff bf01 	b.w	8011898 <__retarget_lock_acquire_recursive>
 8011a96:	bf00      	nop
 8011a98:	240009f4 	.word	0x240009f4

08011a9c <__malloc_unlock>:
 8011a9c:	4801      	ldr	r0, [pc, #4]	@ (8011aa4 <__malloc_unlock+0x8>)
 8011a9e:	f7ff befc 	b.w	801189a <__retarget_lock_release_recursive>
 8011aa2:	bf00      	nop
 8011aa4:	240009f4 	.word	0x240009f4

08011aa8 <__ssputs_r>:
 8011aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aac:	688e      	ldr	r6, [r1, #8]
 8011aae:	461f      	mov	r7, r3
 8011ab0:	42be      	cmp	r6, r7
 8011ab2:	680b      	ldr	r3, [r1, #0]
 8011ab4:	4682      	mov	sl, r0
 8011ab6:	460c      	mov	r4, r1
 8011ab8:	4690      	mov	r8, r2
 8011aba:	d82d      	bhi.n	8011b18 <__ssputs_r+0x70>
 8011abc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ac0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ac4:	d026      	beq.n	8011b14 <__ssputs_r+0x6c>
 8011ac6:	6965      	ldr	r5, [r4, #20]
 8011ac8:	6909      	ldr	r1, [r1, #16]
 8011aca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ace:	eba3 0901 	sub.w	r9, r3, r1
 8011ad2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ad6:	1c7b      	adds	r3, r7, #1
 8011ad8:	444b      	add	r3, r9
 8011ada:	106d      	asrs	r5, r5, #1
 8011adc:	429d      	cmp	r5, r3
 8011ade:	bf38      	it	cc
 8011ae0:	461d      	movcc	r5, r3
 8011ae2:	0553      	lsls	r3, r2, #21
 8011ae4:	d527      	bpl.n	8011b36 <__ssputs_r+0x8e>
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	f7ff ff52 	bl	8011990 <_malloc_r>
 8011aec:	4606      	mov	r6, r0
 8011aee:	b360      	cbz	r0, 8011b4a <__ssputs_r+0xa2>
 8011af0:	6921      	ldr	r1, [r4, #16]
 8011af2:	464a      	mov	r2, r9
 8011af4:	f7ff fed2 	bl	801189c <memcpy>
 8011af8:	89a3      	ldrh	r3, [r4, #12]
 8011afa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b02:	81a3      	strh	r3, [r4, #12]
 8011b04:	6126      	str	r6, [r4, #16]
 8011b06:	6165      	str	r5, [r4, #20]
 8011b08:	444e      	add	r6, r9
 8011b0a:	eba5 0509 	sub.w	r5, r5, r9
 8011b0e:	6026      	str	r6, [r4, #0]
 8011b10:	60a5      	str	r5, [r4, #8]
 8011b12:	463e      	mov	r6, r7
 8011b14:	42be      	cmp	r6, r7
 8011b16:	d900      	bls.n	8011b1a <__ssputs_r+0x72>
 8011b18:	463e      	mov	r6, r7
 8011b1a:	6820      	ldr	r0, [r4, #0]
 8011b1c:	4632      	mov	r2, r6
 8011b1e:	4641      	mov	r1, r8
 8011b20:	f000 faa6 	bl	8012070 <memmove>
 8011b24:	68a3      	ldr	r3, [r4, #8]
 8011b26:	1b9b      	subs	r3, r3, r6
 8011b28:	60a3      	str	r3, [r4, #8]
 8011b2a:	6823      	ldr	r3, [r4, #0]
 8011b2c:	4433      	add	r3, r6
 8011b2e:	6023      	str	r3, [r4, #0]
 8011b30:	2000      	movs	r0, #0
 8011b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b36:	462a      	mov	r2, r5
 8011b38:	f000 fac4 	bl	80120c4 <_realloc_r>
 8011b3c:	4606      	mov	r6, r0
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	d1e0      	bne.n	8011b04 <__ssputs_r+0x5c>
 8011b42:	6921      	ldr	r1, [r4, #16]
 8011b44:	4650      	mov	r0, sl
 8011b46:	f7ff feb7 	bl	80118b8 <_free_r>
 8011b4a:	230c      	movs	r3, #12
 8011b4c:	f8ca 3000 	str.w	r3, [sl]
 8011b50:	89a3      	ldrh	r3, [r4, #12]
 8011b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b56:	81a3      	strh	r3, [r4, #12]
 8011b58:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5c:	e7e9      	b.n	8011b32 <__ssputs_r+0x8a>
	...

08011b60 <_svfiprintf_r>:
 8011b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b64:	4698      	mov	r8, r3
 8011b66:	898b      	ldrh	r3, [r1, #12]
 8011b68:	061b      	lsls	r3, r3, #24
 8011b6a:	b09d      	sub	sp, #116	@ 0x74
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	460d      	mov	r5, r1
 8011b70:	4614      	mov	r4, r2
 8011b72:	d510      	bpl.n	8011b96 <_svfiprintf_r+0x36>
 8011b74:	690b      	ldr	r3, [r1, #16]
 8011b76:	b973      	cbnz	r3, 8011b96 <_svfiprintf_r+0x36>
 8011b78:	2140      	movs	r1, #64	@ 0x40
 8011b7a:	f7ff ff09 	bl	8011990 <_malloc_r>
 8011b7e:	6028      	str	r0, [r5, #0]
 8011b80:	6128      	str	r0, [r5, #16]
 8011b82:	b930      	cbnz	r0, 8011b92 <_svfiprintf_r+0x32>
 8011b84:	230c      	movs	r3, #12
 8011b86:	603b      	str	r3, [r7, #0]
 8011b88:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8c:	b01d      	add	sp, #116	@ 0x74
 8011b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b92:	2340      	movs	r3, #64	@ 0x40
 8011b94:	616b      	str	r3, [r5, #20]
 8011b96:	2300      	movs	r3, #0
 8011b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b9a:	2320      	movs	r3, #32
 8011b9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ba4:	2330      	movs	r3, #48	@ 0x30
 8011ba6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011d44 <_svfiprintf_r+0x1e4>
 8011baa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011bae:	f04f 0901 	mov.w	r9, #1
 8011bb2:	4623      	mov	r3, r4
 8011bb4:	469a      	mov	sl, r3
 8011bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bba:	b10a      	cbz	r2, 8011bc0 <_svfiprintf_r+0x60>
 8011bbc:	2a25      	cmp	r2, #37	@ 0x25
 8011bbe:	d1f9      	bne.n	8011bb4 <_svfiprintf_r+0x54>
 8011bc0:	ebba 0b04 	subs.w	fp, sl, r4
 8011bc4:	d00b      	beq.n	8011bde <_svfiprintf_r+0x7e>
 8011bc6:	465b      	mov	r3, fp
 8011bc8:	4622      	mov	r2, r4
 8011bca:	4629      	mov	r1, r5
 8011bcc:	4638      	mov	r0, r7
 8011bce:	f7ff ff6b 	bl	8011aa8 <__ssputs_r>
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	f000 80a7 	beq.w	8011d26 <_svfiprintf_r+0x1c6>
 8011bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bda:	445a      	add	r2, fp
 8011bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bde:	f89a 3000 	ldrb.w	r3, [sl]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f000 809f 	beq.w	8011d26 <_svfiprintf_r+0x1c6>
 8011be8:	2300      	movs	r3, #0
 8011bea:	f04f 32ff 	mov.w	r2, #4294967295
 8011bee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011bf2:	f10a 0a01 	add.w	sl, sl, #1
 8011bf6:	9304      	str	r3, [sp, #16]
 8011bf8:	9307      	str	r3, [sp, #28]
 8011bfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011bfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c00:	4654      	mov	r4, sl
 8011c02:	2205      	movs	r2, #5
 8011c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c08:	484e      	ldr	r0, [pc, #312]	@ (8011d44 <_svfiprintf_r+0x1e4>)
 8011c0a:	f7ee fb89 	bl	8000320 <memchr>
 8011c0e:	9a04      	ldr	r2, [sp, #16]
 8011c10:	b9d8      	cbnz	r0, 8011c4a <_svfiprintf_r+0xea>
 8011c12:	06d0      	lsls	r0, r2, #27
 8011c14:	bf44      	itt	mi
 8011c16:	2320      	movmi	r3, #32
 8011c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c1c:	0711      	lsls	r1, r2, #28
 8011c1e:	bf44      	itt	mi
 8011c20:	232b      	movmi	r3, #43	@ 0x2b
 8011c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c26:	f89a 3000 	ldrb.w	r3, [sl]
 8011c2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c2c:	d015      	beq.n	8011c5a <_svfiprintf_r+0xfa>
 8011c2e:	9a07      	ldr	r2, [sp, #28]
 8011c30:	4654      	mov	r4, sl
 8011c32:	2000      	movs	r0, #0
 8011c34:	f04f 0c0a 	mov.w	ip, #10
 8011c38:	4621      	mov	r1, r4
 8011c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c3e:	3b30      	subs	r3, #48	@ 0x30
 8011c40:	2b09      	cmp	r3, #9
 8011c42:	d94b      	bls.n	8011cdc <_svfiprintf_r+0x17c>
 8011c44:	b1b0      	cbz	r0, 8011c74 <_svfiprintf_r+0x114>
 8011c46:	9207      	str	r2, [sp, #28]
 8011c48:	e014      	b.n	8011c74 <_svfiprintf_r+0x114>
 8011c4a:	eba0 0308 	sub.w	r3, r0, r8
 8011c4e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c52:	4313      	orrs	r3, r2
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	46a2      	mov	sl, r4
 8011c58:	e7d2      	b.n	8011c00 <_svfiprintf_r+0xa0>
 8011c5a:	9b03      	ldr	r3, [sp, #12]
 8011c5c:	1d19      	adds	r1, r3, #4
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	9103      	str	r1, [sp, #12]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	bfbb      	ittet	lt
 8011c66:	425b      	neglt	r3, r3
 8011c68:	f042 0202 	orrlt.w	r2, r2, #2
 8011c6c:	9307      	strge	r3, [sp, #28]
 8011c6e:	9307      	strlt	r3, [sp, #28]
 8011c70:	bfb8      	it	lt
 8011c72:	9204      	strlt	r2, [sp, #16]
 8011c74:	7823      	ldrb	r3, [r4, #0]
 8011c76:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c78:	d10a      	bne.n	8011c90 <_svfiprintf_r+0x130>
 8011c7a:	7863      	ldrb	r3, [r4, #1]
 8011c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c7e:	d132      	bne.n	8011ce6 <_svfiprintf_r+0x186>
 8011c80:	9b03      	ldr	r3, [sp, #12]
 8011c82:	1d1a      	adds	r2, r3, #4
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	9203      	str	r2, [sp, #12]
 8011c88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c8c:	3402      	adds	r4, #2
 8011c8e:	9305      	str	r3, [sp, #20]
 8011c90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011d54 <_svfiprintf_r+0x1f4>
 8011c94:	7821      	ldrb	r1, [r4, #0]
 8011c96:	2203      	movs	r2, #3
 8011c98:	4650      	mov	r0, sl
 8011c9a:	f7ee fb41 	bl	8000320 <memchr>
 8011c9e:	b138      	cbz	r0, 8011cb0 <_svfiprintf_r+0x150>
 8011ca0:	9b04      	ldr	r3, [sp, #16]
 8011ca2:	eba0 000a 	sub.w	r0, r0, sl
 8011ca6:	2240      	movs	r2, #64	@ 0x40
 8011ca8:	4082      	lsls	r2, r0
 8011caa:	4313      	orrs	r3, r2
 8011cac:	3401      	adds	r4, #1
 8011cae:	9304      	str	r3, [sp, #16]
 8011cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb4:	4824      	ldr	r0, [pc, #144]	@ (8011d48 <_svfiprintf_r+0x1e8>)
 8011cb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011cba:	2206      	movs	r2, #6
 8011cbc:	f7ee fb30 	bl	8000320 <memchr>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d036      	beq.n	8011d32 <_svfiprintf_r+0x1d2>
 8011cc4:	4b21      	ldr	r3, [pc, #132]	@ (8011d4c <_svfiprintf_r+0x1ec>)
 8011cc6:	bb1b      	cbnz	r3, 8011d10 <_svfiprintf_r+0x1b0>
 8011cc8:	9b03      	ldr	r3, [sp, #12]
 8011cca:	3307      	adds	r3, #7
 8011ccc:	f023 0307 	bic.w	r3, r3, #7
 8011cd0:	3308      	adds	r3, #8
 8011cd2:	9303      	str	r3, [sp, #12]
 8011cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cd6:	4433      	add	r3, r6
 8011cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cda:	e76a      	b.n	8011bb2 <_svfiprintf_r+0x52>
 8011cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ce0:	460c      	mov	r4, r1
 8011ce2:	2001      	movs	r0, #1
 8011ce4:	e7a8      	b.n	8011c38 <_svfiprintf_r+0xd8>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	3401      	adds	r4, #1
 8011cea:	9305      	str	r3, [sp, #20]
 8011cec:	4619      	mov	r1, r3
 8011cee:	f04f 0c0a 	mov.w	ip, #10
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cf8:	3a30      	subs	r2, #48	@ 0x30
 8011cfa:	2a09      	cmp	r2, #9
 8011cfc:	d903      	bls.n	8011d06 <_svfiprintf_r+0x1a6>
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d0c6      	beq.n	8011c90 <_svfiprintf_r+0x130>
 8011d02:	9105      	str	r1, [sp, #20]
 8011d04:	e7c4      	b.n	8011c90 <_svfiprintf_r+0x130>
 8011d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	e7f0      	b.n	8011cf2 <_svfiprintf_r+0x192>
 8011d10:	ab03      	add	r3, sp, #12
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	462a      	mov	r2, r5
 8011d16:	4b0e      	ldr	r3, [pc, #56]	@ (8011d50 <_svfiprintf_r+0x1f0>)
 8011d18:	a904      	add	r1, sp, #16
 8011d1a:	4638      	mov	r0, r7
 8011d1c:	f3af 8000 	nop.w
 8011d20:	1c42      	adds	r2, r0, #1
 8011d22:	4606      	mov	r6, r0
 8011d24:	d1d6      	bne.n	8011cd4 <_svfiprintf_r+0x174>
 8011d26:	89ab      	ldrh	r3, [r5, #12]
 8011d28:	065b      	lsls	r3, r3, #25
 8011d2a:	f53f af2d 	bmi.w	8011b88 <_svfiprintf_r+0x28>
 8011d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011d30:	e72c      	b.n	8011b8c <_svfiprintf_r+0x2c>
 8011d32:	ab03      	add	r3, sp, #12
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	462a      	mov	r2, r5
 8011d38:	4b05      	ldr	r3, [pc, #20]	@ (8011d50 <_svfiprintf_r+0x1f0>)
 8011d3a:	a904      	add	r1, sp, #16
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	f000 f879 	bl	8011e34 <_printf_i>
 8011d42:	e7ed      	b.n	8011d20 <_svfiprintf_r+0x1c0>
 8011d44:	080124b0 	.word	0x080124b0
 8011d48:	080124ba 	.word	0x080124ba
 8011d4c:	00000000 	.word	0x00000000
 8011d50:	08011aa9 	.word	0x08011aa9
 8011d54:	080124b6 	.word	0x080124b6

08011d58 <_printf_common>:
 8011d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d5c:	4616      	mov	r6, r2
 8011d5e:	4698      	mov	r8, r3
 8011d60:	688a      	ldr	r2, [r1, #8]
 8011d62:	690b      	ldr	r3, [r1, #16]
 8011d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	bfb8      	it	lt
 8011d6c:	4613      	movlt	r3, r2
 8011d6e:	6033      	str	r3, [r6, #0]
 8011d70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011d74:	4607      	mov	r7, r0
 8011d76:	460c      	mov	r4, r1
 8011d78:	b10a      	cbz	r2, 8011d7e <_printf_common+0x26>
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	6033      	str	r3, [r6, #0]
 8011d7e:	6823      	ldr	r3, [r4, #0]
 8011d80:	0699      	lsls	r1, r3, #26
 8011d82:	bf42      	ittt	mi
 8011d84:	6833      	ldrmi	r3, [r6, #0]
 8011d86:	3302      	addmi	r3, #2
 8011d88:	6033      	strmi	r3, [r6, #0]
 8011d8a:	6825      	ldr	r5, [r4, #0]
 8011d8c:	f015 0506 	ands.w	r5, r5, #6
 8011d90:	d106      	bne.n	8011da0 <_printf_common+0x48>
 8011d92:	f104 0a19 	add.w	sl, r4, #25
 8011d96:	68e3      	ldr	r3, [r4, #12]
 8011d98:	6832      	ldr	r2, [r6, #0]
 8011d9a:	1a9b      	subs	r3, r3, r2
 8011d9c:	42ab      	cmp	r3, r5
 8011d9e:	dc26      	bgt.n	8011dee <_printf_common+0x96>
 8011da0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011da4:	6822      	ldr	r2, [r4, #0]
 8011da6:	3b00      	subs	r3, #0
 8011da8:	bf18      	it	ne
 8011daa:	2301      	movne	r3, #1
 8011dac:	0692      	lsls	r2, r2, #26
 8011dae:	d42b      	bmi.n	8011e08 <_printf_common+0xb0>
 8011db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011db4:	4641      	mov	r1, r8
 8011db6:	4638      	mov	r0, r7
 8011db8:	47c8      	blx	r9
 8011dba:	3001      	adds	r0, #1
 8011dbc:	d01e      	beq.n	8011dfc <_printf_common+0xa4>
 8011dbe:	6823      	ldr	r3, [r4, #0]
 8011dc0:	6922      	ldr	r2, [r4, #16]
 8011dc2:	f003 0306 	and.w	r3, r3, #6
 8011dc6:	2b04      	cmp	r3, #4
 8011dc8:	bf02      	ittt	eq
 8011dca:	68e5      	ldreq	r5, [r4, #12]
 8011dcc:	6833      	ldreq	r3, [r6, #0]
 8011dce:	1aed      	subeq	r5, r5, r3
 8011dd0:	68a3      	ldr	r3, [r4, #8]
 8011dd2:	bf0c      	ite	eq
 8011dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011dd8:	2500      	movne	r5, #0
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	bfc4      	itt	gt
 8011dde:	1a9b      	subgt	r3, r3, r2
 8011de0:	18ed      	addgt	r5, r5, r3
 8011de2:	2600      	movs	r6, #0
 8011de4:	341a      	adds	r4, #26
 8011de6:	42b5      	cmp	r5, r6
 8011de8:	d11a      	bne.n	8011e20 <_printf_common+0xc8>
 8011dea:	2000      	movs	r0, #0
 8011dec:	e008      	b.n	8011e00 <_printf_common+0xa8>
 8011dee:	2301      	movs	r3, #1
 8011df0:	4652      	mov	r2, sl
 8011df2:	4641      	mov	r1, r8
 8011df4:	4638      	mov	r0, r7
 8011df6:	47c8      	blx	r9
 8011df8:	3001      	adds	r0, #1
 8011dfa:	d103      	bne.n	8011e04 <_printf_common+0xac>
 8011dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e04:	3501      	adds	r5, #1
 8011e06:	e7c6      	b.n	8011d96 <_printf_common+0x3e>
 8011e08:	18e1      	adds	r1, r4, r3
 8011e0a:	1c5a      	adds	r2, r3, #1
 8011e0c:	2030      	movs	r0, #48	@ 0x30
 8011e0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011e12:	4422      	add	r2, r4
 8011e14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011e18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011e1c:	3302      	adds	r3, #2
 8011e1e:	e7c7      	b.n	8011db0 <_printf_common+0x58>
 8011e20:	2301      	movs	r3, #1
 8011e22:	4622      	mov	r2, r4
 8011e24:	4641      	mov	r1, r8
 8011e26:	4638      	mov	r0, r7
 8011e28:	47c8      	blx	r9
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	d0e6      	beq.n	8011dfc <_printf_common+0xa4>
 8011e2e:	3601      	adds	r6, #1
 8011e30:	e7d9      	b.n	8011de6 <_printf_common+0x8e>
	...

08011e34 <_printf_i>:
 8011e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e38:	7e0f      	ldrb	r7, [r1, #24]
 8011e3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e3c:	2f78      	cmp	r7, #120	@ 0x78
 8011e3e:	4691      	mov	r9, r2
 8011e40:	4680      	mov	r8, r0
 8011e42:	460c      	mov	r4, r1
 8011e44:	469a      	mov	sl, r3
 8011e46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011e4a:	d807      	bhi.n	8011e5c <_printf_i+0x28>
 8011e4c:	2f62      	cmp	r7, #98	@ 0x62
 8011e4e:	d80a      	bhi.n	8011e66 <_printf_i+0x32>
 8011e50:	2f00      	cmp	r7, #0
 8011e52:	f000 80d1 	beq.w	8011ff8 <_printf_i+0x1c4>
 8011e56:	2f58      	cmp	r7, #88	@ 0x58
 8011e58:	f000 80b8 	beq.w	8011fcc <_printf_i+0x198>
 8011e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011e64:	e03a      	b.n	8011edc <_printf_i+0xa8>
 8011e66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011e6a:	2b15      	cmp	r3, #21
 8011e6c:	d8f6      	bhi.n	8011e5c <_printf_i+0x28>
 8011e6e:	a101      	add	r1, pc, #4	@ (adr r1, 8011e74 <_printf_i+0x40>)
 8011e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011e74:	08011ecd 	.word	0x08011ecd
 8011e78:	08011ee1 	.word	0x08011ee1
 8011e7c:	08011e5d 	.word	0x08011e5d
 8011e80:	08011e5d 	.word	0x08011e5d
 8011e84:	08011e5d 	.word	0x08011e5d
 8011e88:	08011e5d 	.word	0x08011e5d
 8011e8c:	08011ee1 	.word	0x08011ee1
 8011e90:	08011e5d 	.word	0x08011e5d
 8011e94:	08011e5d 	.word	0x08011e5d
 8011e98:	08011e5d 	.word	0x08011e5d
 8011e9c:	08011e5d 	.word	0x08011e5d
 8011ea0:	08011fdf 	.word	0x08011fdf
 8011ea4:	08011f0b 	.word	0x08011f0b
 8011ea8:	08011f99 	.word	0x08011f99
 8011eac:	08011e5d 	.word	0x08011e5d
 8011eb0:	08011e5d 	.word	0x08011e5d
 8011eb4:	08012001 	.word	0x08012001
 8011eb8:	08011e5d 	.word	0x08011e5d
 8011ebc:	08011f0b 	.word	0x08011f0b
 8011ec0:	08011e5d 	.word	0x08011e5d
 8011ec4:	08011e5d 	.word	0x08011e5d
 8011ec8:	08011fa1 	.word	0x08011fa1
 8011ecc:	6833      	ldr	r3, [r6, #0]
 8011ece:	1d1a      	adds	r2, r3, #4
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	6032      	str	r2, [r6, #0]
 8011ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011edc:	2301      	movs	r3, #1
 8011ede:	e09c      	b.n	801201a <_printf_i+0x1e6>
 8011ee0:	6833      	ldr	r3, [r6, #0]
 8011ee2:	6820      	ldr	r0, [r4, #0]
 8011ee4:	1d19      	adds	r1, r3, #4
 8011ee6:	6031      	str	r1, [r6, #0]
 8011ee8:	0606      	lsls	r6, r0, #24
 8011eea:	d501      	bpl.n	8011ef0 <_printf_i+0xbc>
 8011eec:	681d      	ldr	r5, [r3, #0]
 8011eee:	e003      	b.n	8011ef8 <_printf_i+0xc4>
 8011ef0:	0645      	lsls	r5, r0, #25
 8011ef2:	d5fb      	bpl.n	8011eec <_printf_i+0xb8>
 8011ef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ef8:	2d00      	cmp	r5, #0
 8011efa:	da03      	bge.n	8011f04 <_printf_i+0xd0>
 8011efc:	232d      	movs	r3, #45	@ 0x2d
 8011efe:	426d      	negs	r5, r5
 8011f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f04:	4858      	ldr	r0, [pc, #352]	@ (8012068 <_printf_i+0x234>)
 8011f06:	230a      	movs	r3, #10
 8011f08:	e011      	b.n	8011f2e <_printf_i+0xfa>
 8011f0a:	6821      	ldr	r1, [r4, #0]
 8011f0c:	6833      	ldr	r3, [r6, #0]
 8011f0e:	0608      	lsls	r0, r1, #24
 8011f10:	f853 5b04 	ldr.w	r5, [r3], #4
 8011f14:	d402      	bmi.n	8011f1c <_printf_i+0xe8>
 8011f16:	0649      	lsls	r1, r1, #25
 8011f18:	bf48      	it	mi
 8011f1a:	b2ad      	uxthmi	r5, r5
 8011f1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8011f1e:	4852      	ldr	r0, [pc, #328]	@ (8012068 <_printf_i+0x234>)
 8011f20:	6033      	str	r3, [r6, #0]
 8011f22:	bf14      	ite	ne
 8011f24:	230a      	movne	r3, #10
 8011f26:	2308      	moveq	r3, #8
 8011f28:	2100      	movs	r1, #0
 8011f2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011f2e:	6866      	ldr	r6, [r4, #4]
 8011f30:	60a6      	str	r6, [r4, #8]
 8011f32:	2e00      	cmp	r6, #0
 8011f34:	db05      	blt.n	8011f42 <_printf_i+0x10e>
 8011f36:	6821      	ldr	r1, [r4, #0]
 8011f38:	432e      	orrs	r6, r5
 8011f3a:	f021 0104 	bic.w	r1, r1, #4
 8011f3e:	6021      	str	r1, [r4, #0]
 8011f40:	d04b      	beq.n	8011fda <_printf_i+0x1a6>
 8011f42:	4616      	mov	r6, r2
 8011f44:	fbb5 f1f3 	udiv	r1, r5, r3
 8011f48:	fb03 5711 	mls	r7, r3, r1, r5
 8011f4c:	5dc7      	ldrb	r7, [r0, r7]
 8011f4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011f52:	462f      	mov	r7, r5
 8011f54:	42bb      	cmp	r3, r7
 8011f56:	460d      	mov	r5, r1
 8011f58:	d9f4      	bls.n	8011f44 <_printf_i+0x110>
 8011f5a:	2b08      	cmp	r3, #8
 8011f5c:	d10b      	bne.n	8011f76 <_printf_i+0x142>
 8011f5e:	6823      	ldr	r3, [r4, #0]
 8011f60:	07df      	lsls	r7, r3, #31
 8011f62:	d508      	bpl.n	8011f76 <_printf_i+0x142>
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	6861      	ldr	r1, [r4, #4]
 8011f68:	4299      	cmp	r1, r3
 8011f6a:	bfde      	ittt	le
 8011f6c:	2330      	movle	r3, #48	@ 0x30
 8011f6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011f72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011f76:	1b92      	subs	r2, r2, r6
 8011f78:	6122      	str	r2, [r4, #16]
 8011f7a:	f8cd a000 	str.w	sl, [sp]
 8011f7e:	464b      	mov	r3, r9
 8011f80:	aa03      	add	r2, sp, #12
 8011f82:	4621      	mov	r1, r4
 8011f84:	4640      	mov	r0, r8
 8011f86:	f7ff fee7 	bl	8011d58 <_printf_common>
 8011f8a:	3001      	adds	r0, #1
 8011f8c:	d14a      	bne.n	8012024 <_printf_i+0x1f0>
 8011f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f92:	b004      	add	sp, #16
 8011f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	f043 0320 	orr.w	r3, r3, #32
 8011f9e:	6023      	str	r3, [r4, #0]
 8011fa0:	4832      	ldr	r0, [pc, #200]	@ (801206c <_printf_i+0x238>)
 8011fa2:	2778      	movs	r7, #120	@ 0x78
 8011fa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011fa8:	6823      	ldr	r3, [r4, #0]
 8011faa:	6831      	ldr	r1, [r6, #0]
 8011fac:	061f      	lsls	r7, r3, #24
 8011fae:	f851 5b04 	ldr.w	r5, [r1], #4
 8011fb2:	d402      	bmi.n	8011fba <_printf_i+0x186>
 8011fb4:	065f      	lsls	r7, r3, #25
 8011fb6:	bf48      	it	mi
 8011fb8:	b2ad      	uxthmi	r5, r5
 8011fba:	6031      	str	r1, [r6, #0]
 8011fbc:	07d9      	lsls	r1, r3, #31
 8011fbe:	bf44      	itt	mi
 8011fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8011fc4:	6023      	strmi	r3, [r4, #0]
 8011fc6:	b11d      	cbz	r5, 8011fd0 <_printf_i+0x19c>
 8011fc8:	2310      	movs	r3, #16
 8011fca:	e7ad      	b.n	8011f28 <_printf_i+0xf4>
 8011fcc:	4826      	ldr	r0, [pc, #152]	@ (8012068 <_printf_i+0x234>)
 8011fce:	e7e9      	b.n	8011fa4 <_printf_i+0x170>
 8011fd0:	6823      	ldr	r3, [r4, #0]
 8011fd2:	f023 0320 	bic.w	r3, r3, #32
 8011fd6:	6023      	str	r3, [r4, #0]
 8011fd8:	e7f6      	b.n	8011fc8 <_printf_i+0x194>
 8011fda:	4616      	mov	r6, r2
 8011fdc:	e7bd      	b.n	8011f5a <_printf_i+0x126>
 8011fde:	6833      	ldr	r3, [r6, #0]
 8011fe0:	6825      	ldr	r5, [r4, #0]
 8011fe2:	6961      	ldr	r1, [r4, #20]
 8011fe4:	1d18      	adds	r0, r3, #4
 8011fe6:	6030      	str	r0, [r6, #0]
 8011fe8:	062e      	lsls	r6, r5, #24
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	d501      	bpl.n	8011ff2 <_printf_i+0x1be>
 8011fee:	6019      	str	r1, [r3, #0]
 8011ff0:	e002      	b.n	8011ff8 <_printf_i+0x1c4>
 8011ff2:	0668      	lsls	r0, r5, #25
 8011ff4:	d5fb      	bpl.n	8011fee <_printf_i+0x1ba>
 8011ff6:	8019      	strh	r1, [r3, #0]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6123      	str	r3, [r4, #16]
 8011ffc:	4616      	mov	r6, r2
 8011ffe:	e7bc      	b.n	8011f7a <_printf_i+0x146>
 8012000:	6833      	ldr	r3, [r6, #0]
 8012002:	1d1a      	adds	r2, r3, #4
 8012004:	6032      	str	r2, [r6, #0]
 8012006:	681e      	ldr	r6, [r3, #0]
 8012008:	6862      	ldr	r2, [r4, #4]
 801200a:	2100      	movs	r1, #0
 801200c:	4630      	mov	r0, r6
 801200e:	f7ee f987 	bl	8000320 <memchr>
 8012012:	b108      	cbz	r0, 8012018 <_printf_i+0x1e4>
 8012014:	1b80      	subs	r0, r0, r6
 8012016:	6060      	str	r0, [r4, #4]
 8012018:	6863      	ldr	r3, [r4, #4]
 801201a:	6123      	str	r3, [r4, #16]
 801201c:	2300      	movs	r3, #0
 801201e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012022:	e7aa      	b.n	8011f7a <_printf_i+0x146>
 8012024:	6923      	ldr	r3, [r4, #16]
 8012026:	4632      	mov	r2, r6
 8012028:	4649      	mov	r1, r9
 801202a:	4640      	mov	r0, r8
 801202c:	47d0      	blx	sl
 801202e:	3001      	adds	r0, #1
 8012030:	d0ad      	beq.n	8011f8e <_printf_i+0x15a>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	079b      	lsls	r3, r3, #30
 8012036:	d413      	bmi.n	8012060 <_printf_i+0x22c>
 8012038:	68e0      	ldr	r0, [r4, #12]
 801203a:	9b03      	ldr	r3, [sp, #12]
 801203c:	4298      	cmp	r0, r3
 801203e:	bfb8      	it	lt
 8012040:	4618      	movlt	r0, r3
 8012042:	e7a6      	b.n	8011f92 <_printf_i+0x15e>
 8012044:	2301      	movs	r3, #1
 8012046:	4632      	mov	r2, r6
 8012048:	4649      	mov	r1, r9
 801204a:	4640      	mov	r0, r8
 801204c:	47d0      	blx	sl
 801204e:	3001      	adds	r0, #1
 8012050:	d09d      	beq.n	8011f8e <_printf_i+0x15a>
 8012052:	3501      	adds	r5, #1
 8012054:	68e3      	ldr	r3, [r4, #12]
 8012056:	9903      	ldr	r1, [sp, #12]
 8012058:	1a5b      	subs	r3, r3, r1
 801205a:	42ab      	cmp	r3, r5
 801205c:	dcf2      	bgt.n	8012044 <_printf_i+0x210>
 801205e:	e7eb      	b.n	8012038 <_printf_i+0x204>
 8012060:	2500      	movs	r5, #0
 8012062:	f104 0619 	add.w	r6, r4, #25
 8012066:	e7f5      	b.n	8012054 <_printf_i+0x220>
 8012068:	080124c1 	.word	0x080124c1
 801206c:	080124d2 	.word	0x080124d2

08012070 <memmove>:
 8012070:	4288      	cmp	r0, r1
 8012072:	b510      	push	{r4, lr}
 8012074:	eb01 0402 	add.w	r4, r1, r2
 8012078:	d902      	bls.n	8012080 <memmove+0x10>
 801207a:	4284      	cmp	r4, r0
 801207c:	4623      	mov	r3, r4
 801207e:	d807      	bhi.n	8012090 <memmove+0x20>
 8012080:	1e43      	subs	r3, r0, #1
 8012082:	42a1      	cmp	r1, r4
 8012084:	d008      	beq.n	8012098 <memmove+0x28>
 8012086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801208a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801208e:	e7f8      	b.n	8012082 <memmove+0x12>
 8012090:	4402      	add	r2, r0
 8012092:	4601      	mov	r1, r0
 8012094:	428a      	cmp	r2, r1
 8012096:	d100      	bne.n	801209a <memmove+0x2a>
 8012098:	bd10      	pop	{r4, pc}
 801209a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801209e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120a2:	e7f7      	b.n	8012094 <memmove+0x24>

080120a4 <_sbrk_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4d06      	ldr	r5, [pc, #24]	@ (80120c0 <_sbrk_r+0x1c>)
 80120a8:	2300      	movs	r3, #0
 80120aa:	4604      	mov	r4, r0
 80120ac:	4608      	mov	r0, r1
 80120ae:	602b      	str	r3, [r5, #0]
 80120b0:	f7f0 fbda 	bl	8002868 <_sbrk>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d102      	bne.n	80120be <_sbrk_r+0x1a>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	b103      	cbz	r3, 80120be <_sbrk_r+0x1a>
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	bd38      	pop	{r3, r4, r5, pc}
 80120c0:	240009f0 	.word	0x240009f0

080120c4 <_realloc_r>:
 80120c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120c8:	4607      	mov	r7, r0
 80120ca:	4614      	mov	r4, r2
 80120cc:	460d      	mov	r5, r1
 80120ce:	b921      	cbnz	r1, 80120da <_realloc_r+0x16>
 80120d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120d4:	4611      	mov	r1, r2
 80120d6:	f7ff bc5b 	b.w	8011990 <_malloc_r>
 80120da:	b92a      	cbnz	r2, 80120e8 <_realloc_r+0x24>
 80120dc:	f7ff fbec 	bl	80118b8 <_free_r>
 80120e0:	4625      	mov	r5, r4
 80120e2:	4628      	mov	r0, r5
 80120e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e8:	f000 f81a 	bl	8012120 <_malloc_usable_size_r>
 80120ec:	4284      	cmp	r4, r0
 80120ee:	4606      	mov	r6, r0
 80120f0:	d802      	bhi.n	80120f8 <_realloc_r+0x34>
 80120f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80120f6:	d8f4      	bhi.n	80120e2 <_realloc_r+0x1e>
 80120f8:	4621      	mov	r1, r4
 80120fa:	4638      	mov	r0, r7
 80120fc:	f7ff fc48 	bl	8011990 <_malloc_r>
 8012100:	4680      	mov	r8, r0
 8012102:	b908      	cbnz	r0, 8012108 <_realloc_r+0x44>
 8012104:	4645      	mov	r5, r8
 8012106:	e7ec      	b.n	80120e2 <_realloc_r+0x1e>
 8012108:	42b4      	cmp	r4, r6
 801210a:	4622      	mov	r2, r4
 801210c:	4629      	mov	r1, r5
 801210e:	bf28      	it	cs
 8012110:	4632      	movcs	r2, r6
 8012112:	f7ff fbc3 	bl	801189c <memcpy>
 8012116:	4629      	mov	r1, r5
 8012118:	4638      	mov	r0, r7
 801211a:	f7ff fbcd 	bl	80118b8 <_free_r>
 801211e:	e7f1      	b.n	8012104 <_realloc_r+0x40>

08012120 <_malloc_usable_size_r>:
 8012120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012124:	1f18      	subs	r0, r3, #4
 8012126:	2b00      	cmp	r3, #0
 8012128:	bfbc      	itt	lt
 801212a:	580b      	ldrlt	r3, [r1, r0]
 801212c:	18c0      	addlt	r0, r0, r3
 801212e:	4770      	bx	lr

08012130 <_init>:
 8012130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012132:	bf00      	nop
 8012134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012136:	bc08      	pop	{r3}
 8012138:	469e      	mov	lr, r3
 801213a:	4770      	bx	lr

0801213c <_fini>:
 801213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801213e:	bf00      	nop
 8012140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012142:	bc08      	pop	{r3}
 8012144:	469e      	mov	lr, r3
 8012146:	4770      	bx	lr
