
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011de8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080120b8  080120b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012454  08012454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801245c  0801245c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012460  08012460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08012464  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000990  2400006c  080124d0  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240009fc  080124d0  000149fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000257ef  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  00039889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003d528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  00040a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000266e2  00000000  00000000  00079ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179299  00000000  00000000  000a03c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00219661  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  002196a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00221d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080120a0 	.word	0x080120a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	080120a0 	.word	0x080120a0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f94a 	bl	8002988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f9d6 	bl	8000aa4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa42 	bl	8000b80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fea6 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 fe84 	bl	800140c <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 fa6e 	bl	8000be4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb08 	bl	8000d1c <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fb6e 	bl	8000dec <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fbea 	bl	8000ee8 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd02 	bl	800111c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe2c 	bl	8001374 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fdb6 	bl	800128c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fddc 	bl	80012dc <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fcdc 	bl	80010e0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 fd76 	bl	8011218 <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc5a 	bl	8000fe4 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	49a2      	ldr	r1, [pc, #648]	@ (80009bc <main+0x2d0>)
 8000734:	48a2      	ldr	r0, [pc, #648]	@ (80009c0 <main+0x2d4>)
 8000736:	f003 f913 	bl	8003960 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	48a0      	ldr	r0, [pc, #640]	@ (80009c4 <main+0x2d8>)
 8000742:	f000 ff55 	bl	80015f0 <print>
#endif
		Error_Handler();
 8000746:	f001 fb61 	bl	8001e0c <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	489f      	ldr	r0, [pc, #636]	@ (80009c8 <main+0x2dc>)
 800074c:	f007 fa14 	bl	8007b78 <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	489d      	ldr	r0, [pc, #628]	@ (80009cc <main+0x2e0>)
 8000758:	f000 ff4a 	bl	80015f0 <print>
#endif
		Error_Handler();
 800075c:	f001 fb56 	bl	8001e0c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	4898      	ldr	r0, [pc, #608]	@ (80009c8 <main+0x2dc>)
 8000766:	f007 fbf9 	bl	8007f5c <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	4897      	ldr	r0, [pc, #604]	@ (80009d0 <main+0x2e4>)
 8000772:	f000 ff3d 	bl	80015f0 <print>
#endif
		Error_Handler();
 8000776:	f001 fb49 	bl	8001e0c <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	4896      	ldr	r0, [pc, #600]	@ (80009d4 <main+0x2e8>)
 800077c:	f007 f9fc 	bl	8007b78 <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	4894      	ldr	r0, [pc, #592]	@ (80009d8 <main+0x2ec>)
 8000788:	f000 ff32 	bl	80015f0 <print>

#endif
		Error_Handler();
 800078c:	f001 fb3e 	bl	8001e0c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	488f      	ldr	r0, [pc, #572]	@ (80009d4 <main+0x2e8>)
 8000796:	f007 fbe1 	bl	8007f5c <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	488e      	ldr	r0, [pc, #568]	@ (80009dc <main+0x2f0>)
 80007a2:	f000 ff25 	bl	80015f0 <print>
#endif
		Error_Handler();
 80007a6:	f001 fb31 	bl	8001e0c <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	488d      	ldr	r0, [pc, #564]	@ (80009e0 <main+0x2f4>)
 80007ac:	f007 f9e4 	bl	8007b78 <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	488b      	ldr	r0, [pc, #556]	@ (80009e4 <main+0x2f8>)
 80007b8:	f000 ff1a 	bl	80015f0 <print>

#endif
		Error_Handler();
 80007bc:	f001 fb26 	bl	8001e0c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4886      	ldr	r0, [pc, #536]	@ (80009e0 <main+0x2f4>)
 80007c6:	f007 fbc9 	bl	8007f5c <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	4885      	ldr	r0, [pc, #532]	@ (80009e8 <main+0x2fc>)
 80007d2:	f000 ff0d 	bl	80015f0 <print>
#endif
		Error_Handler();
 80007d6:	f001 fb19 	bl	8001e0c <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	4884      	ldr	r0, [pc, #528]	@ (80009ec <main+0x300>)
 80007dc:	f000 ff08 	bl	80015f0 <print>
	 * TIM16 -> APB2 => 264MHzw
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
	HAL_TIM_Base_Start_IT(&htim16);
 80007e0:	4883      	ldr	r0, [pc, #524]	@ (80009f0 <main+0x304>)
 80007e2:	f00d fb53 	bl	800de8c <HAL_TIM_Base_Start_IT>


	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e6:	e006      	b.n	80007f6 <main+0x10a>
	{
		//print("Solicitar tensión inversor");
		if (config_inv_lectura_v == 1)
 80007e8:	4b82      	ldr	r3, [pc, #520]	@ (80009f4 <main+0x308>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4881      	ldr	r0, [pc, #516]	@ (80009f8 <main+0x30c>)
 80007f2:	f000 fefd 	bl	80015f0 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b7f      	ldr	r3, [pc, #508]	@ (80009f4 <main+0x308>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f4      	beq.n	80007e8 <main+0xfc>
	}

#if !CALIBRATION

	// Estado STAND BY inversor
	while (state != 3)
 80007fe:	e006      	b.n	800080e <main+0x122>
	{
		if (state == 3)
 8000800:	4b7e      	ldr	r3, [pc, #504]	@ (80009fc <main+0x310>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d102      	bne.n	800080e <main+0x122>
		{
#if DEBUG
			print("Precarga");
 8000808:	487d      	ldr	r0, [pc, #500]	@ (8000a00 <main+0x314>)
 800080a:	f000 fef1 	bl	80015f0 <print>
	while (state != 3)
 800080e:	4b7b      	ldr	r3, [pc, #492]	@ (80009fc <main+0x310>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d1f4      	bne.n	8000800 <main+0x114>
#endif
		}
	}
	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 8000816:	e031      	b.n	800087c <main+0x190>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000818:	4b7a      	ldr	r3, [pc, #488]	@ (8000a04 <main+0x318>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	497a      	ldr	r1, [pc, #488]	@ (8000a08 <main+0x31c>)
 8000820:	487a      	ldr	r0, [pc, #488]	@ (8000a0c <main+0x320>)
 8000822:	f010 ff9d 	bl	8011760 <siprintf>
		print(TxBuffer);
 8000826:	4879      	ldr	r0, [pc, #484]	@ (8000a0c <main+0x320>)
 8000828:	f000 fee2 	bl	80015f0 <print>
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800082c:	4b78      	ldr	r3, [pc, #480]	@ (8000a10 <main+0x324>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a78      	ldr	r2, [pc, #480]	@ (8000a14 <main+0x328>)
 8000832:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000834:	4b77      	ldr	r3, [pc, #476]	@ (8000a14 <main+0x328>)
 8000836:	2202      	movs	r2, #2
 8000838:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800083a:	4b76      	ldr	r3, [pc, #472]	@ (8000a14 <main+0x328>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000840:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000842:	4b74      	ldr	r3, [pc, #464]	@ (8000a14 <main+0x328>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000848:	4b72      	ldr	r3, [pc, #456]	@ (8000a14 <main+0x328>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 800084e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a04 <main+0x318>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b70      	ldr	r3, [pc, #448]	@ (8000a18 <main+0x32c>)
 8000856:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8000858:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <main+0x318>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	121b      	asrs	r3, r3, #8
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b6d      	ldr	r3, [pc, #436]	@ (8000a18 <main+0x32c>)
 8000862:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000864:	4a6c      	ldr	r2, [pc, #432]	@ (8000a18 <main+0x32c>)
 8000866:	496b      	ldr	r1, [pc, #428]	@ (8000a14 <main+0x328>)
 8000868:	485a      	ldr	r0, [pc, #360]	@ (80009d4 <main+0x2e8>)
 800086a:	f007 f9b0 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		if (precarga_inv == 1)
 800086e:	4b6b      	ldr	r3, [pc, #428]	@ (8000a1c <main+0x330>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d102      	bne.n	800087c <main+0x190>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 8000876:	486a      	ldr	r0, [pc, #424]	@ (8000a20 <main+0x334>)
 8000878:	f000 feba 	bl	80015f0 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 800087c:	4b67      	ldr	r3, [pc, #412]	@ (8000a1c <main+0x330>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d104      	bne.n	800088e <main+0x1a2>
 8000884:	4b5f      	ldr	r3, [pc, #380]	@ (8000a04 <main+0x318>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800088c:	dbc4      	blt.n	8000818 <main+0x12c>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800088e:	4b60      	ldr	r3, [pc, #384]	@ (8000a10 <main+0x324>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a60      	ldr	r2, [pc, #384]	@ (8000a14 <main+0x328>)
 8000894:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 8000896:	4b5f      	ldr	r3, [pc, #380]	@ (8000a14 <main+0x328>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800089c:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <main+0x328>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a2:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a14 <main+0x328>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000a14 <main+0x328>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008b0:	4b54      	ldr	r3, [pc, #336]	@ (8000a04 <main+0x318>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b58      	ldr	r3, [pc, #352]	@ (8000a18 <main+0x32c>)
 80008b8:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008ba:	4b52      	ldr	r3, [pc, #328]	@ (8000a04 <main+0x318>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	121b      	asrs	r3, r3, #8
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b55      	ldr	r3, [pc, #340]	@ (8000a18 <main+0x32c>)
 80008c4:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008c6:	4a54      	ldr	r2, [pc, #336]	@ (8000a18 <main+0x32c>)
 80008c8:	4952      	ldr	r1, [pc, #328]	@ (8000a14 <main+0x328>)
 80008ca:	4842      	ldr	r0, [pc, #264]	@ (80009d4 <main+0x2e8>)
 80008cc:	f007 f97f 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
		//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
	}

#if DEBUG
	print("state : stand by");
 80008d0:	4854      	ldr	r0, [pc, #336]	@ (8000a24 <main+0x338>)
 80008d2:	f000 fe8d 	bl	80015f0 <print>
#endif

	while (state != 4)
 80008d6:	e037      	b.n	8000948 <main+0x25c>
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80008d8:	4b53      	ldr	r3, [pc, #332]	@ (8000a28 <main+0x33c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a53      	ldr	r2, [pc, #332]	@ (8000a2c <main+0x340>)
 80008de:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 80008e0:	4b52      	ldr	r3, [pc, #328]	@ (8000a2c <main+0x340>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80008e6:	4b51      	ldr	r3, [pc, #324]	@ (8000a2c <main+0x340>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 80008ec:	4b50      	ldr	r3, [pc, #320]	@ (8000a30 <main+0x344>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 80008f2:	4b4f      	ldr	r3, [pc, #316]	@ (8000a30 <main+0x344>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 80008f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000a30 <main+0x344>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008fe:	4a4c      	ldr	r2, [pc, #304]	@ (8000a30 <main+0x344>)
 8000900:	494a      	ldr	r1, [pc, #296]	@ (8000a2c <main+0x340>)
 8000902:	4831      	ldr	r0, [pc, #196]	@ (80009c8 <main+0x2dc>)
 8000904:	f007 f963 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000908:	4b48      	ldr	r3, [pc, #288]	@ (8000a2c <main+0x340>)
 800090a:	f240 3262 	movw	r2, #866	@ 0x362
 800090e:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000910:	4b46      	ldr	r3, [pc, #280]	@ (8000a2c <main+0x340>)
 8000912:	2204      	movs	r2, #4
 8000914:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000916:	4b47      	ldr	r3, [pc, #284]	@ (8000a34 <main+0x348>)
 8000918:	2200      	movs	r2, #0
 800091a:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 800091c:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <main+0x344>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000922:	4b43      	ldr	r3, [pc, #268]	@ (8000a30 <main+0x344>)
 8000924:	2200      	movs	r2, #0
 8000926:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000928:	4b42      	ldr	r3, [pc, #264]	@ (8000a34 <main+0x348>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b40      	ldr	r3, [pc, #256]	@ (8000a30 <main+0x344>)
 8000930:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000932:	4b3f      	ldr	r3, [pc, #252]	@ (8000a30 <main+0x344>)
 8000934:	2200      	movs	r2, #0
 8000936:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000938:	4a3d      	ldr	r2, [pc, #244]	@ (8000a30 <main+0x344>)
 800093a:	493c      	ldr	r1, [pc, #240]	@ (8000a2c <main+0x340>)
 800093c:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <main+0x2dc>)
 800093e:	f007 f946 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f002 f8b2 	bl	8002aac <HAL_Delay>
	while (state != 4)
 8000948:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <main+0x310>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d1c3      	bne.n	80008d8 <main+0x1ec>

	}

#if DEBUG
	print("state: ready");
 8000950:	4839      	ldr	r0, [pc, #228]	@ (8000a38 <main+0x34c>)
 8000952:	f000 fe4d 	bl	80015f0 <print>

#endif

#if !CALIBRATION
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000956:	e080      	b.n	8000a5a <main+0x36e>
	{
		HAL_ADC_Start(&hadc1);
 8000958:	4819      	ldr	r0, [pc, #100]	@ (80009c0 <main+0x2d4>)
 800095a:	f002 fe0f 	bl	800357c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800095e:	f04f 31ff 	mov.w	r1, #4294967295
 8000962:	4817      	ldr	r0, [pc, #92]	@ (80009c0 <main+0x2d4>)
 8000964:	f002 ff08 	bl	8003778 <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 8000968:	4815      	ldr	r0, [pc, #84]	@ (80009c0 <main+0x2d4>)
 800096a:	f003 f8d5 	bl	8003b18 <HAL_ADC_GetValue>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b32      	ldr	r3, [pc, #200]	@ (8000a3c <main+0x350>)
 8000974:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000976:	4812      	ldr	r0, [pc, #72]	@ (80009c0 <main+0x2d4>)
 8000978:	f002 feca 	bl	8003710 <HAL_ADC_Stop>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	4830      	ldr	r0, [pc, #192]	@ (8000a40 <main+0x354>)
 8000980:	f008 fa10 	bl	8008da4 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <main+0x358>)
 800098a:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (start_button_act == 1)
 800098c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a44 <main+0x358>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d162      	bne.n	8000a5a <main+0x36e>
		{

#if DEBUG
			print("Botón Start + Freno:");
 8000994:	482c      	ldr	r0, [pc, #176]	@ (8000a48 <main+0x35c>)
 8000996:	f000 fe2b 	bl	80015f0 <print>
			printValue(s_freno);
 800099a:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <main+0x350>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 fe44 	bl	800162c <printValue>
#endif
			if (s_freno > UMBRAL_FRENO)
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <main+0x350>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80009ac:	dd52      	ble.n	8000a54 <main+0x368>
			{
				boton_arranque = 1;
 80009ae:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <main+0x360>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 80009b4:	4826      	ldr	r0, [pc, #152]	@ (8000a50 <main+0x364>)
 80009b6:	f000 fe1b 	bl	80015f0 <print>
 80009ba:	e04e      	b.n	8000a5a <main+0x36e>
 80009bc:	240006fc 	.word	0x240006fc
 80009c0:	24000094 	.word	0x24000094
 80009c4:	080120b8 	.word	0x080120b8
 80009c8:	240001ec 	.word	0x240001ec
 80009cc:	080120d8 	.word	0x080120d8
 80009d0:	080120f8 	.word	0x080120f8
 80009d4:	2400028c 	.word	0x2400028c
 80009d8:	08012120 	.word	0x08012120
 80009dc:	08012140 	.word	0x08012140
 80009e0:	2400032c 	.word	0x2400032c
 80009e4:	08012168 	.word	0x08012168
 80009e8:	08012188 	.word	0x08012188
 80009ec:	080121b0 	.word	0x080121b0
 80009f0:	24000494 	.word	0x24000494
 80009f4:	2400008c 	.word	0x2400008c
 80009f8:	080121cc 	.word	0x080121cc
 80009fc:	2400071a 	.word	0x2400071a
 8000a00:	08012200 	.word	0x08012200
 8000a04:	240006f4 	.word	0x240006f4
 8000a08:	0801220c 	.word	0x0801220c
 8000a0c:	2400078c 	.word	0x2400078c
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000654 	.word	0x24000654
 8000a18:	240006d8 	.word	0x240006d8
 8000a1c:	24000088 	.word	0x24000088
 8000a20:	08012224 	.word	0x08012224
 8000a24:	08012240 	.word	0x08012240
 8000a28:	24000000 	.word	0x24000000
 8000a2c:	24000608 	.word	0x24000608
 8000a30:	240006c8 	.word	0x240006c8
 8000a34:	24000718 	.word	0x24000718
 8000a38:	08012254 	.word	0x08012254
 8000a3c:	2400070c 	.word	0x2400070c
 8000a40:	58021800 	.word	0x58021800
 8000a44:	240006f0 	.word	0x240006f0
 8000a48:	08012264 	.word	0x08012264
 8000a4c:	24000090 	.word	0x24000090
 8000a50:	0801227c 	.word	0x0801227c
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <main+0x3a4>)
 8000a56:	f000 fdcb 	bl	80015f0 <print>
	while (boton_arranque == 0)
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <main+0x3a8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f43f af7a 	beq.w	8000958 <main+0x26c>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <main+0x3ac>)
 8000a66:	f000 fdc3 	bl	80015f0 <print>
#endif
#if !CALIBRATION

	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <main+0x3b0>)
 8000a70:	f008 f9b0 	bl	8008dd4 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000a74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a78:	f002 f818 	bl	8002aac <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <main+0x3b0>)
 8000a82:	f008 f9a7 	bl	8008dd4 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <main+0x3b4>)
 8000a88:	f000 fdb2 	bl	80015f0 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <main+0x3a0>
 8000a90:	0801229c 	.word	0x0801229c
 8000a94:	24000090 	.word	0x24000090
 8000a98:	080122b8 	.word	0x080122b8
 8000a9c:	58020800 	.word	0x58020800
 8000aa0:	080122c8 	.word	0x080122c8

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09c      	sub	sp, #112	@ 0x70
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aae:	224c      	movs	r2, #76	@ 0x4c
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f010 fe76 	bl	80117a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2220      	movs	r2, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f010 fe70 	bl	80117a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f008 f99f 	bl	8008e08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <SystemClock_Config+0xd8>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b7c <SystemClock_Config+0xd8>)
 8000ad4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b28      	ldr	r3, [pc, #160]	@ (8000b7c <SystemClock_Config+0xd8>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ae6:	bf00      	nop
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <SystemClock_Config+0xd8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000af4:	d1f8      	bne.n	8000ae8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b0c:	232c      	movs	r3, #44	@ 0x2c
 8000b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 f9a5 	bl	8008e7c <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b38:	f001 f968 	bl	8001e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	233f      	movs	r3, #63	@ 0x3f
 8000b3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2303      	movs	r3, #3
 8000b42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b4c:	2340      	movs	r3, #64	@ 0x40
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b50:	2340      	movs	r3, #64	@ 0x40
 8000b52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b5a:	2340      	movs	r3, #64	@ 0x40
 8000b5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2103      	movs	r1, #3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 fd64 	bl	8009630 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b6e:	f001 f94d 	bl	8001e0c <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3770      	adds	r7, #112	@ 0x70
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58024800 	.word	0x58024800

08000b80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b0ae      	sub	sp, #184	@ 0xb8
 8000b84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	22b8      	movs	r2, #184	@ 0xb8
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f010 fe09 	bl	80117a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000b92:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bb2:	23c0      	movs	r3, #192	@ 0xc0
 8000bb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc2:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f009 f8bb 	bl	8009d48 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000bd8:	f001 f918 	bl	8001e0c <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	37b8      	adds	r7, #184	@ 0xb8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	@ 0x30
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	2224      	movs	r2, #36	@ 0x24
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f010 fdd1 	bl	80117a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c02:	4b41      	ldr	r3, [pc, #260]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c04:	4a41      	ldr	r2, [pc, #260]	@ (8000d0c <MX_ADC1_Init+0x128>)
 8000c06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c08:	4b3f      	ldr	r3, [pc, #252]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c0a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c10:	4b3d      	ldr	r3, [pc, #244]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c16:	4b3c      	ldr	r3, [pc, #240]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c1e:	2208      	movs	r2, #8
 8000c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c22:	4b39      	ldr	r3, [pc, #228]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c28:	4b37      	ldr	r3, [pc, #220]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c2e:	4b36      	ldr	r3, [pc, #216]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c30:	2203      	movs	r2, #3
 8000c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c34:	4b34      	ldr	r3, [pc, #208]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3c:	4b32      	ldr	r3, [pc, #200]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000c62:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	4827      	ldr	r0, [pc, #156]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c6a:	f002 fa7f 	bl	800316c <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c74:	f001 f8ca 	bl	8001e0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4821      	ldr	r0, [pc, #132]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000c84:	f004 fa5e 	bl	8005144 <HAL_ADCEx_MultiModeConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c8e:	f001 f8bd 	bl	8001e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <MX_ADC1_Init+0x12c>)
 8000c94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c96:	2306      	movs	r3, #6
 8000c98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c9e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ca2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000cb8:	f003 f994 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000cc2:	f001 f8a3 	bl	8001e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_ADC1_Init+0x130>)
 8000cc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000cd4:	f003 f986 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000cde:	f001 f895 	bl	8001e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_ADC1_Init+0x134>)
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ce6:	2312      	movs	r3, #18
 8000ce8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_ADC1_Init+0x124>)
 8000cf0:	f003 f978 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000cfa:	f001 f887 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	@ 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000094 	.word	0x24000094
 8000d0c:	40022000 	.word	0x40022000
 8000d10:	10c00010 	.word	0x10c00010
 8000d14:	14f00020 	.word	0x14f00020
 8000d18:	08600004 	.word	0x08600004

08000d1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2224      	movs	r2, #36	@ 0x24
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f010 fd3b 	bl	80117a4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d30:	4a2c      	ldr	r2, [pc, #176]	@ (8000de4 <MX_ADC2_Init+0xc8>)
 8000d32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d34:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d36:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d42:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d48:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d60:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000d96:	f002 f9e9 	bl	800316c <HAL_ADC_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000da0:	f001 f834 	bl	8001e0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000da4:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <MX_ADC2_Init+0xcc>)
 8000da6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da8:	2306      	movs	r3, #6
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000db4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db6:	2304      	movs	r3, #4
 8000db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_ADC2_Init+0xc4>)
 8000dca:	f003 f90b 	bl	8003fe4 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000dd4:	f001 f81a 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	@ 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	24000104 	.word	0x24000104
 8000de4:	40022100 	.word	0x40022100
 8000de8:	25b00200 	.word	0x25b00200

08000dec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000df2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000df4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee4 <MX_FDCAN1_Init+0xf8>)
 8000df6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000df8:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dfe:	4b38      	ldr	r3, [pc, #224]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e04:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e0a:	4b35      	ldr	r3, [pc, #212]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e10:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e18:	2206      	movs	r2, #6
 8000e1a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e24:	2202      	movs	r2, #2
 8000e26:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e52:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e9a:	4811      	ldr	r0, [pc, #68]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000e9c:	f006 fc18 	bl	80076d0 <HAL_FDCAN_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000ea6:	f000 ffb1 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <MX_FDCAN1_Init+0xf4>)
 8000ec8:	f006 fde0 	bl	8007a8c <HAL_FDCAN_ConfigFilter>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000ed2:	f000 ff9b 	bl	8001e0c <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	240001ec 	.word	0x240001ec
 8000ee4:	4000a000 	.word	0x4000a000

08000ee8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000eee:	4b3b      	ldr	r3, [pc, #236]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000ef0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fe0 <MX_FDCAN2_Init+0xf8>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ef4:	4b39      	ldr	r3, [pc, #228]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000efa:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f00:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f06:	4b35      	ldr	r3, [pc, #212]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f0c:	4b33      	ldr	r3, [pc, #204]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f14:	2206      	movs	r2, #6
 8000f16:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f18:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f26:	2205      	movs	r2, #5
 8000f28:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f30:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f54:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f56:	2210      	movs	r2, #16
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f62:	2210      	movs	r2, #16
 8000f64:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f96:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000f98:	f006 fb9a 	bl	80076d0 <HAL_FDCAN_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000fa2:	f000 ff33 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000faa:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_FDCAN2_Init+0xf4>)
 8000fc6:	f006 fd61 	bl	8007a8c <HAL_FDCAN_ConfigFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8000fd0:	f000 ff1c 	bl	8001e0c <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2400028c 	.word	0x2400028c
 8000fe0:	4000a400 	.word	0x4000a400

08000fe4 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000fea:	4b3b      	ldr	r3, [pc, #236]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8000fec:	4a3b      	ldr	r2, [pc, #236]	@ (80010dc <MX_FDCAN3_Init+0xf8>)
 8000fee:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000ff6:	4b38      	ldr	r3, [pc, #224]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000ffc:	4b36      	ldr	r3, [pc, #216]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001002:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001004:	2200      	movs	r2, #0
 8001006:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001008:	4b33      	ldr	r3, [pc, #204]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800100a:	2200      	movs	r2, #0
 800100c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 800100e:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001010:	2206      	movs	r2, #6
 8001012:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001014:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001016:	2201      	movs	r2, #1
 8001018:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800101a:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800101c:	2202      	movs	r2, #2
 800101e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001020:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001022:	2205      	movs	r2, #5
 8001024:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001026:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001028:	2201      	movs	r2, #1
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800102c:	4b2a      	ldr	r3, [pc, #168]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800102e:	2201      	movs	r2, #1
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001032:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001034:	2201      	movs	r2, #1
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001038:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800103a:	2201      	movs	r2, #1
 800103c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001044:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001046:	2201      	movs	r2, #1
 8001048:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 800104a:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800104c:	2201      	movs	r2, #1
 800104e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 8001050:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001052:	2210      	movs	r2, #16
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001056:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001058:	2204      	movs	r2, #4
 800105a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 800105c:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800105e:	2210      	movs	r2, #16
 8001060:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001064:	2204      	movs	r2, #4
 8001066:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800106a:	2200      	movs	r2, #0
 800106c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001070:	2204      	movs	r2, #4
 8001072:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001076:	2200      	movs	r2, #0
 8001078:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800107c:	2200      	movs	r2, #0
 800107e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001082:	2210      	movs	r2, #16
 8001084:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001086:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001088:	2200      	movs	r2, #0
 800108a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 800108e:	2204      	movs	r2, #4
 8001090:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001092:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 8001094:	f006 fb1c 	bl	80076d0 <HAL_FDCAN_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 800109e:	f000 feb5 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 80010a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_FDCAN3_Init+0xf4>)
 80010c2:	f006 fce3 	bl	8007a8c <HAL_FDCAN_ConfigFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 80010cc:	f000 fe9e 	bl	8001e0c <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2400032c 	.word	0x2400032c
 80010dc:	4000d400 	.word	0x4000d400

080010e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <MX_SDMMC1_SD_Init+0x34>)
 80010e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001118 <MX_SDMMC1_SD_Init+0x38>)
 80010e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <MX_SDMMC1_SD_Init+0x34>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_SDMMC1_SD_Init+0x34>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <MX_SDMMC1_SD_Init+0x34>)
 80010f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <MX_SDMMC1_SD_Init+0x34>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <MX_SDMMC1_SD_Init+0x34>)
 8001106:	2202      	movs	r2, #2
 8001108:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	240003cc 	.word	0x240003cc
 8001118:	52007000 	.word	0x52007000

0800111c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2234      	movs	r2, #52	@ 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f010 fb24 	bl	80117a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115c:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <MX_TIM1_Init+0x168>)
 800115e:	4a4a      	ldr	r2, [pc, #296]	@ (8001288 <MX_TIM1_Init+0x16c>)
 8001160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001162:	4b48      	ldr	r3, [pc, #288]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <MX_TIM1_Init+0x168>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800116e:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001170:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117c:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <MX_TIM1_Init+0x168>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001182:	4b40      	ldr	r3, [pc, #256]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001188:	483e      	ldr	r0, [pc, #248]	@ (8001284 <MX_TIM1_Init+0x168>)
 800118a:	f00c fe27 	bl	800dddc <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001194:	f000 fe3a 	bl	8001e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011a2:	4619      	mov	r1, r3
 80011a4:	4837      	ldr	r0, [pc, #220]	@ (8001284 <MX_TIM1_Init+0x168>)
 80011a6:	f00d f973 	bl	800e490 <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011b0:	f000 fe2c 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b4:	4833      	ldr	r0, [pc, #204]	@ (8001284 <MX_TIM1_Init+0x168>)
 80011b6:	f00c feef 	bl	800df98 <HAL_TIM_PWM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011c0:	f000 fe24 	bl	8001e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d4:	4619      	mov	r1, r3
 80011d6:	482b      	ldr	r0, [pc, #172]	@ (8001284 <MX_TIM1_Init+0x168>)
 80011d8:	f00d fea0 	bl	800ef1c <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011e2:	f000 fe13 	bl	8001e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	@ 0x60
 80011e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	481e      	ldr	r0, [pc, #120]	@ (8001284 <MX_TIM1_Init+0x168>)
 800120c:	f00d f82c 	bl	800e268 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001216:	f000 fdf9 	bl	8001e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800121a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800121e:	2204      	movs	r2, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4818      	ldr	r0, [pc, #96]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001224:	f00d f820 	bl	800e268 <HAL_TIM_PWM_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800122e:	f000 fded 	bl	8001e0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001268:	f00d fef4 	bl	800f054 <HAL_TIMEx_ConfigBreakDeadTime>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001272:	f000 fdcb 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <MX_TIM1_Init+0x168>)
 8001278:	f001 f940 	bl	80024fc <HAL_TIM_MspPostInit>

}
 800127c:	bf00      	nop
 800127e:	3770      	adds	r7, #112	@ 0x70
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	24000448 	.word	0x24000448
 8001288:	40010000 	.word	0x40010000

0800128c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001290:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <MX_TIM16_Init+0x48>)
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <MX_TIM16_Init+0x4c>)
 8001294:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_TIM16_Init+0x48>)
 8001298:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800129c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012a6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_TIM16_Init+0x48>)
 80012c0:	f00c fd8c 	bl	800dddc <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80012ca:	f000 fd9f 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	24000494 	.word	0x24000494
 80012d8:	40014400 	.word	0x40014400

080012dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012e0:	4b22      	ldr	r3, [pc, #136]	@ (800136c <MX_USART1_UART_Init+0x90>)
 80012e2:	4a23      	ldr	r2, [pc, #140]	@ (8001370 <MX_USART1_UART_Init+0x94>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e6:	4b21      	ldr	r3, [pc, #132]	@ (800136c <MX_USART1_UART_Init+0x90>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_USART1_UART_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_USART1_UART_Init+0x90>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_USART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_USART1_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001324:	4811      	ldr	r0, [pc, #68]	@ (800136c <MX_USART1_UART_Init+0x90>)
 8001326:	f00d ff3f 	bl	800f1a8 <HAL_UART_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001330:	f000 fd6c 	bl	8001e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_USART1_UART_Init+0x90>)
 8001338:	f00f f8d9 	bl	80104ee <HAL_UARTEx_SetTxFifoThreshold>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001342:	f000 fd63 	bl	8001e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4808      	ldr	r0, [pc, #32]	@ (800136c <MX_USART1_UART_Init+0x90>)
 800134a:	f00f f90e 	bl	801056a <HAL_UARTEx_SetRxFifoThreshold>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001354:	f000 fd5a 	bl	8001e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	@ (800136c <MX_USART1_UART_Init+0x90>)
 800135a:	f00f f88f 	bl	801047c <HAL_UARTEx_DisableFifoMode>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001364:	f000 fd52 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	240004e0 	.word	0x240004e0
 8001370:	40011000 	.word	0x40011000

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 800137a:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <MX_USART2_UART_Init+0x94>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b21      	ldr	r3, [pc, #132]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013aa:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013bc:	4811      	ldr	r0, [pc, #68]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013be:	f00d fef3 	bl	800f1a8 <HAL_UART_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013c8:	f000 fd20 	bl	8001e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	480d      	ldr	r0, [pc, #52]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013d0:	f00f f88d 	bl	80104ee <HAL_UARTEx_SetTxFifoThreshold>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013da:	f000 fd17 	bl	8001e0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013de:	2100      	movs	r1, #0
 80013e0:	4808      	ldr	r0, [pc, #32]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013e2:	f00f f8c2 	bl	801056a <HAL_UARTEx_SetRxFifoThreshold>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013ec:	f000 fd0e 	bl	8001e0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_USART2_UART_Init+0x90>)
 80013f2:	f00f f843 	bl	801047c <HAL_UARTEx_DisableFifoMode>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013fc:	f000 fd06 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	24000574 	.word	0x24000574
 8001408:	40004400 	.word	0x40004400

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <MX_DMA_Init+0x3c>)
 8001414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001418:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <MX_DMA_Init+0x3c>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_DMA_Init+0x3c>)
 8001424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	200b      	movs	r0, #11
 8001436:	f004 f842 	bl	80054be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800143a:	200b      	movs	r0, #11
 800143c:	f004 f859 	bl	80054f2 <HAL_NVIC_EnableIRQ>

}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	58024400 	.word	0x58024400

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	@ 0x38
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	4b5e      	ldr	r3, [pc, #376]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001468:	4a5c      	ldr	r2, [pc, #368]	@ (80015dc <MX_GPIO_Init+0x190>)
 800146a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001472:	4b5a      	ldr	r3, [pc, #360]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001480:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001486:	4a55      	ldr	r2, [pc, #340]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001490:	4b52      	ldr	r3, [pc, #328]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b4f      	ldr	r3, [pc, #316]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a4:	4a4d      	ldr	r2, [pc, #308]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ae:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	4a46      	ldr	r2, [pc, #280]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014da:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a3e      	ldr	r2, [pc, #248]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014e2:	f043 0320 	orr.w	r3, r3, #32
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b3c      	ldr	r3, [pc, #240]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f8:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <MX_GPIO_Init+0x190>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fe:	4a37      	ldr	r2, [pc, #220]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001508:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <MX_GPIO_Init+0x190>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <MX_GPIO_Init+0x190>)
 800151e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001526:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153a:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <MX_GPIO_Init+0x190>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <MX_GPIO_Init+0x190>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2103      	movs	r1, #3
 8001556:	4822      	ldr	r0, [pc, #136]	@ (80015e0 <MX_GPIO_Init+0x194>)
 8001558:	f007 fc3c 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001562:	4820      	ldr	r0, [pc, #128]	@ (80015e4 <MX_GPIO_Init+0x198>)
 8001564:	f007 fc36 	bl	8008dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 8001568:	2303      	movs	r3, #3
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156c:	2301      	movs	r3, #1
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4818      	ldr	r0, [pc, #96]	@ (80015e0 <MX_GPIO_Init+0x194>)
 8001580:	f007 fa68 	bl	8008a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	4813      	ldr	r0, [pc, #76]	@ (80015e8 <MX_GPIO_Init+0x19c>)
 800159a:	f007 fa5b 	bl	8008a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800159e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <MX_GPIO_Init+0x198>)
 80015b8:	f007 fa4c 	bl	8008a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c4:	2302      	movs	r3, #2
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	@ (80015ec <MX_GPIO_Init+0x1a0>)
 80015d0:	f007 fa40 	bl	8008a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d4:	bf00      	nop
 80015d6:	3738      	adds	r7, #56	@ 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58020800 	.word	0x58020800
 80015e4:	58021000 	.word	0x58021000
 80015e8:	58021400 	.word	0x58021400
 80015ec:	58021800 	.word	0x58021800

080015f0 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4909      	ldr	r1, [pc, #36]	@ (8001620 <print+0x30>)
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <print+0x34>)
 80015fe:	f010 f8af 	bl	8011760 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001602:	4808      	ldr	r0, [pc, #32]	@ (8001624 <print+0x34>)
 8001604:	f7fe fe84 	bl	8000310 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	4904      	ldr	r1, [pc, #16]	@ (8001624 <print+0x34>)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <print+0x38>)
 8001614:	f00d fe18 	bl	800f248 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	080122d8 	.word	0x080122d8
 8001624:	24000728 	.word	0x24000728
 8001628:	24000574 	.word	0x24000574

0800162c <printValue>:

void printValue(int value)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4909      	ldr	r1, [pc, #36]	@ (800165c <printValue+0x30>)
 8001638:	4809      	ldr	r0, [pc, #36]	@ (8001660 <printValue+0x34>)
 800163a:	f010 f891 	bl	8011760 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 800163e:	4808      	ldr	r0, [pc, #32]	@ (8001660 <printValue+0x34>)
 8001640:	f7fe fe66 	bl	8000310 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	4904      	ldr	r1, [pc, #16]	@ (8001660 <printValue+0x34>)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <printValue+0x38>)
 8001650:	f00d fdfa 	bl	800f248 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	080122e0 	.word	0x080122e0
 8001660:	24000728 	.word	0x24000728
 8001664:	24000574 	.word	0x24000574

08001668 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80ca 	beq.w	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a66      	ldr	r2, [pc, #408]	@ (8001830 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d162      	bne.n	8001762 <HAL_FDCAN_RxFifo0Callback+0xe6>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 800169c:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800169e:	4a66      	ldr	r2, [pc, #408]	@ (8001838 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016a0:	2140      	movs	r1, #64	@ 0x40
 80016a2:	4866      	ldr	r0, [pc, #408]	@ (800183c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80016a4:	f006 faee 	bl	8007c84 <HAL_FDCAN_GetRxMessage>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80bb 	bne.w	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 80016b0:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f240 4266 	movw	r2, #1126	@ 0x466
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d03c      	beq.n	8001736 <HAL_FDCAN_RxFifo0Callback+0xba>
 80016bc:	f240 4266 	movw	r2, #1126	@ 0x466
 80016c0:	4293      	cmp	r3, r2
 80016c2:	f200 80b0 	bhi.w	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
 80016c6:	f240 4261 	movw	r2, #1121	@ 0x461
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d004      	beq.n	80016d8 <HAL_FDCAN_RxFifo0Callback+0x5c>
 80016ce:	f240 4263 	movw	r2, #1123	@ 0x463
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d015      	beq.n	8001702 <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 80016d6:	e0a6      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					state = RxData_Inv[4] & 0xF;
 80016d8:	4b56      	ldr	r3, [pc, #344]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b57      	ldr	r3, [pc, #348]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016e4:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 80016e6:	4b56      	ldr	r3, [pc, #344]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b0a      	cmp	r3, #10
 80016ec:	d004      	beq.n	80016f8 <HAL_FDCAN_RxFifo0Callback+0x7c>
 80016ee:	4b54      	ldr	r3, [pc, #336]	@ (8001840 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b0b      	cmp	r3, #11
 80016f4:	f040 8090 	bne.w	8001818 <HAL_FDCAN_RxFifo0Callback+0x19c>
						error = RxData_Inv[2];
 80016f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80016fa:	789a      	ldrb	r2, [r3, #2]
 80016fc:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80016fe:	701a      	strb	r2, [r3, #0]
					break;
 8001700:	e08a      	b.n	8001818 <HAL_FDCAN_RxFifo0Callback+0x19c>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001702:	4b4c      	ldr	r3, [pc, #304]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001704:	79db      	ldrb	r3, [r3, #7]
 8001706:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800170c:	7a1b      	ldrb	r3, [r3, #8]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	4313      	orrs	r3, r2
 8001712:	4a48      	ldr	r2, [pc, #288]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001714:	7952      	ldrb	r2, [r2, #5]
 8001716:	4313      	orrs	r3, r2
 8001718:	4a4b      	ldr	r2, [pc, #300]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800171a:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 800171c:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d079      	beq.n	800181c <HAL_FDCAN_RxFifo0Callback+0x1a0>
						e_machine_rpm |= 0xFFF0000;
 8001728:	4b47      	ldr	r3, [pc, #284]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800172e:	4313      	orrs	r3, r2
 8001730:	4a45      	ldr	r2, [pc, #276]	@ (8001848 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8001732:	6013      	str	r3, [r2, #0]
					break;
 8001734:	e072      	b.n	800181c <HAL_FDCAN_RxFifo0Callback+0x1a0>
					if (RxHeader_Inv.DataLength == 6)
 8001736:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b06      	cmp	r3, #6
 800173c:	d170      	bne.n	8001820 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						if (config_inv_lectura_v == 0)
 800173e:	4b44      	ldr	r3, [pc, #272]	@ (8001850 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <HAL_FDCAN_RxFifo0Callback+0xd2>
							config_inv_lectura_v = 1;
 8001746:	4b42      	ldr	r3, [pc, #264]	@ (8001850 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
					break;
 800174c:	e068      	b.n	8001820 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						else if (config_inv_lectura_v == 1)
 800174e:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d164      	bne.n	8001820 <HAL_FDCAN_RxFifo0Callback+0x1a4>
							inv_dc_bus_voltage = RxData_Inv[2];
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001758:	789b      	ldrb	r3, [r3, #2]
 800175a:	461a      	mov	r2, r3
 800175c:	4b3d      	ldr	r3, [pc, #244]	@ (8001854 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 800175e:	601a      	str	r2, [r3, #0]
					break;
 8001760:	e05e      	b.n	8001820 <HAL_FDCAN_RxFifo0Callback+0x1a4>
		else if (hfdcan->Instance == FDCAN2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3c      	ldr	r2, [pc, #240]	@ (8001858 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d126      	bne.n	80017ba <HAL_FDCAN_RxFifo0Callback+0x13e>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 800176c:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 800176e:	4a3c      	ldr	r2, [pc, #240]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001770:	2140      	movs	r1, #64	@ 0x40
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f006 fa86 	bl	8007c84 <HAL_FDCAN_GetRxMessage>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d153      	bne.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
				switch (RxHeader_Acu.Identifier)
 800177e:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b20      	cmp	r3, #32
 8001784:	d003      	beq.n	800178e <HAL_FDCAN_RxFifo0Callback+0x112>
 8001786:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800178a:	d008      	beq.n	800179e <HAL_FDCAN_RxFifo0Callback+0x122>
}
 800178c:	e04b      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					if (RxData_Acu[0] == 0)
 800178e:	4b33      	ldr	r3, [pc, #204]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d146      	bne.n	8001824 <HAL_FDCAN_RxFifo0Callback+0x1a8>
						precarga_inv = 1;
 8001796:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
					break;
 800179c:	e042      	b.n	8001824 <HAL_FDCAN_RxFifo0Callback+0x1a8>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 800179e:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	4a2d      	ldr	r2, [pc, #180]	@ (800185c <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017a6:	7852      	ldrb	r2, [r2, #1]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 80017b4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80017b8:	e035      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
		else if (hfdcan->Instance == FDCAN3)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a2b      	ldr	r2, [pc, #172]	@ (800186c <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d130      	bne.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017c8:	2140      	movs	r1, #64	@ 0x40
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f006 fa5a 	bl	8007c84 <HAL_FDCAN_GetRxMessage>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d127      	bne.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
				switch (RxHeader_Dash.Identifier)
 80017d6:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f240 1233 	movw	r2, #307	@ 0x133
 80017de:	4293      	cmp	r3, r2
 80017e0:	d121      	bne.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 80017e2:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 80017fa:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	b21b      	sxth	r3, r3
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b21a      	sxth	r2, r3
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001808:	78db      	ldrb	r3, [r3, #3]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <HAL_FDCAN_RxFifo0Callback+0x200>)
 8001814:	801a      	strh	r2, [r3, #0]
}
 8001816:	e006      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001818:	bf00      	nop
 800181a:	e004      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 800181c:	bf00      	nop
 800181e:	e002      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001820:	bf00      	nop
 8001822:	e000      	b.n	8001826 <HAL_FDCAN_RxFifo0Callback+0x1aa>
					break;
 8001824:	bf00      	nop
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	4000a000 	.word	0x4000a000
 8001834:	240006d0 	.word	0x240006d0
 8001838:	2400062c 	.word	0x2400062c
 800183c:	240001ec 	.word	0x240001ec
 8001840:	2400071a 	.word	0x2400071a
 8001844:	24000886 	.word	0x24000886
 8001848:	240006f8 	.word	0x240006f8
 800184c:	0fff0000 	.word	0x0fff0000
 8001850:	2400008c 	.word	0x2400008c
 8001854:	240006f4 	.word	0x240006f4
 8001858:	4000a400 	.word	0x4000a400
 800185c:	240006e0 	.word	0x240006e0
 8001860:	24000678 	.word	0x24000678
 8001864:	24000088 	.word	0x24000088
 8001868:	24000008 	.word	0x24000008
 800186c:	4000d400 	.word	0x4000d400
 8001870:	240006e8 	.word	0x240006e8
 8001874:	240006a0 	.word	0x240006a0
 8001878:	24000702 	.word	0x24000702
 800187c:	24000704 	.word	0x24000704

08001880 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a03      	ldr	r2, [pc, #12]	@ (800189c <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 800188e:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	2400028c 	.word	0x2400028c

080018a0 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 80018a6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b18 <setTorque+0x278>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018b6:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 80018ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018c2:	ee17 3a90 	vmov	r3, s15
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b94      	ldr	r3, [pc, #592]	@ (8001b1c <setTorque+0x27c>)
 80018ca:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 80018cc:	4b93      	ldr	r3, [pc, #588]	@ (8001b1c <setTorque+0x27c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2b64      	cmp	r3, #100	@ 0x64
 80018d2:	d902      	bls.n	80018da <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 80018d4:	4b91      	ldr	r3, [pc, #580]	@ (8001b1c <setTorque+0x27c>)
 80018d6:	2264      	movs	r2, #100	@ 0x64
 80018d8:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 80018da:	4b91      	ldr	r3, [pc, #580]	@ (8001b20 <setTorque+0x280>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018ea:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001af0 <setTorque+0x250>
 80018ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018f6:	ee17 3a90 	vmov	r3, s15
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b89      	ldr	r3, [pc, #548]	@ (8001b24 <setTorque+0x284>)
 80018fe:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001900:	4b88      	ldr	r3, [pc, #544]	@ (8001b24 <setTorque+0x284>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b64      	cmp	r3, #100	@ 0x64
 8001906:	d902      	bls.n	800190e <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001908:	4b86      	ldr	r3, [pc, #536]	@ (8001b24 <setTorque+0x284>)
 800190a:	2264      	movs	r2, #100	@ 0x64
 800190c:	801a      	strh	r2, [r3, #0]
	}

#if 1
	print("Sensor % 1: ");
 800190e:	4886      	ldr	r0, [pc, #536]	@ (8001b28 <setTorque+0x288>)
 8001910:	f7ff fe6e 	bl	80015f0 <print>
	printValue(s1_aceleracion_aux);
 8001914:	4b81      	ldr	r3, [pc, #516]	@ (8001b1c <setTorque+0x27c>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fe87 	bl	800162c <printValue>
	print("");
 800191e:	4883      	ldr	r0, [pc, #524]	@ (8001b2c <setTorque+0x28c>)
 8001920:	f7ff fe66 	bl	80015f0 <print>
	print("Sensor % 2: ");
 8001924:	4882      	ldr	r0, [pc, #520]	@ (8001b30 <setTorque+0x290>)
 8001926:	f7ff fe63 	bl	80015f0 <print>
	printValue(s2_aceleracion_aux);
 800192a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b24 <setTorque+0x284>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe7c 	bl	800162c <printValue>
	print("");
 8001934:	487d      	ldr	r0, [pc, #500]	@ (8001b2c <setTorque+0x28c>)
 8001936:	f7ff fe5b 	bl	80015f0 <print>
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 800193a:	4b78      	ldr	r3, [pc, #480]	@ (8001b1c <setTorque+0x27c>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	2b08      	cmp	r3, #8
 8001940:	d911      	bls.n	8001966 <setTorque+0xc6>
 8001942:	4b78      	ldr	r3, [pc, #480]	@ (8001b24 <setTorque+0x284>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2b08      	cmp	r3, #8
 8001948:	d90d      	bls.n	8001966 <setTorque+0xc6>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 800194a:	4b74      	ldr	r3, [pc, #464]	@ (8001b1c <setTorque+0x27c>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	4b74      	ldr	r3, [pc, #464]	@ (8001b24 <setTorque+0x284>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4413      	add	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	da00      	bge.n	800195c <setTorque+0xbc>
 800195a:	3301      	adds	r3, #1
 800195c:	105b      	asrs	r3, r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <setTorque+0x294>)
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	e002      	b.n	800196c <setTorque+0xcc>
	}
	else
	{
		torque_total = 0;
 8001966:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <setTorque+0x294>)
 8001968:	2200      	movs	r2, #0
 800196a:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 800196c:	4b71      	ldr	r3, [pc, #452]	@ (8001b34 <setTorque+0x294>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d803      	bhi.n	800197c <setTorque+0xdc>
	{
		torque_total = 0;
 8001974:	4b6f      	ldr	r3, [pc, #444]	@ (8001b34 <setTorque+0x294>)
 8001976:	2200      	movs	r2, #0
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	e006      	b.n	800198a <setTorque+0xea>
	}
	else if (torque_total > 90)
 800197c:	4b6d      	ldr	r3, [pc, #436]	@ (8001b34 <setTorque+0x294>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2b5a      	cmp	r3, #90	@ 0x5a
 8001982:	d902      	bls.n	800198a <setTorque+0xea>
	{
		torque_total = 100;
 8001984:	4b6b      	ldr	r3, [pc, #428]	@ (8001b34 <setTorque+0x294>)
 8001986:	2264      	movs	r2, #100	@ 0x64
 8001988:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 800198a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b38 <setTorque+0x298>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001992:	4293      	cmp	r3, r2
 8001994:	dd0a      	ble.n	80019ac <setTorque+0x10c>
 8001996:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <setTorque+0x294>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2b19      	cmp	r3, #25
 800199c:	d906      	bls.n	80019ac <setTorque+0x10c>
	{
		print("EV_2_3");
 800199e:	4867      	ldr	r0, [pc, #412]	@ (8001b3c <setTorque+0x29c>)
 80019a0:	f7ff fe26 	bl	80015f0 <print>
		flag_EV_2_3 = 1;
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <setTorque+0x2a0>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	e00c      	b.n	80019c6 <setTorque+0x126>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 80019ac:	4b62      	ldr	r3, [pc, #392]	@ (8001b38 <setTorque+0x298>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019b4:	4293      	cmp	r3, r2
 80019b6:	dc06      	bgt.n	80019c6 <setTorque+0x126>
 80019b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <setTorque+0x294>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d802      	bhi.n	80019c6 <setTorque+0x126>
	{
		flag_EV_2_3 = 0;
 80019c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <setTorque+0x2a0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 80019c6:	4b55      	ldr	r3, [pc, #340]	@ (8001b1c <setTorque+0x27c>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b55      	ldr	r3, [pc, #340]	@ (8001b24 <setTorque+0x284>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bfb8      	it	lt
 80019d6:	425b      	neglt	r3, r3
 80019d8:	2b0a      	cmp	r3, #10
 80019da:	dd06      	ble.n	80019ea <setTorque+0x14a>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 80019dc:	4859      	ldr	r0, [pc, #356]	@ (8001b44 <setTorque+0x2a4>)
 80019de:	f7ff fe07 	bl	80015f0 <print>
		flag_T11_8_9 = 1;
 80019e2:	4b59      	ldr	r3, [pc, #356]	@ (8001b48 <setTorque+0x2a8>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e007      	b.n	80019fa <setTorque+0x15a>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 80019ea:	f001 f853 	bl	8002a94 <HAL_GetTick>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <setTorque+0x2ac>)
 80019f2:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 80019f4:	4b54      	ldr	r3, [pc, #336]	@ (8001b48 <setTorque+0x2a8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 80019fa:	4b51      	ldr	r3, [pc, #324]	@ (8001b40 <setTorque+0x2a0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d103      	bne.n	8001a0a <setTorque+0x16a>
 8001a02:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <setTorque+0x2a8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <setTorque+0x170>
	{
		torque_total = 0;
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <setTorque+0x294>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a10:	4b4f      	ldr	r3, [pc, #316]	@ (8001b50 <setTorque+0x2b0>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001b54 <setTorque+0x2b4>
 8001a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	d53a      	bpl.n	8001a9a <setTorque+0x1fa>
	{
		if (v_celda_min > 2800)
 8001a24:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <setTorque+0x2b0>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001b58 <setTorque+0x2b8>
 8001a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd1f      	ble.n	8001a78 <setTorque+0x1d8>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a38:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <setTorque+0x294>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a44:	4b42      	ldr	r3, [pc, #264]	@ (8001b50 <setTorque+0x2b0>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a4e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001af8 <setTorque+0x258>
 8001a52:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a56:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8001b00 <setTorque+0x260>
 8001a5a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001a5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a62:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b08 <setTorque+0x268>
 8001a66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a6a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a6e:	ee17 2a90 	vmov	r2, s15
 8001a72:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <setTorque+0x2bc>)
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e015      	b.n	8001aa4 <setTorque+0x204>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001a78:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <setTorque+0x294>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a84:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001b10 <setTorque+0x270>
 8001a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a90:	ee17 2a90 	vmov	r2, s15
 8001a94:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <setTorque+0x2bc>)
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e004      	b.n	8001aa4 <setTorque+0x204>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001a9a:	4b26      	ldr	r3, [pc, #152]	@ (8001b34 <setTorque+0x294>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <setTorque+0x2bc>)
 8001aa2:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <setTorque+0x294>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	d912      	bls.n	8001ad2 <setTorque+0x232>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001aac:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <setTorque+0x294>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4a29      	ldr	r2, [pc, #164]	@ (8001b60 <setTorque+0x2c0>)
 8001abc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac0:	441a      	add	r2, r3
 8001ac2:	1192      	asrs	r2, r2, #6
 8001ac4:	17db      	asrs	r3, r3, #31
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b1a      	subs	r3, #26
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <setTorque+0x294>)
 8001ad0:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <setTorque+0x294>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	3301      	adds	r3, #1
 8001ade:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	33333334 	.word	0x33333334
 8001af4:	401a3333 	.word	0x401a3333
 8001af8:	a1cac083 	.word	0xa1cac083
 8001afc:	3ff5b645 	.word	0x3ff5b645
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40ad4c00 	.word	0x40ad4c00
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	408f4000 	.word	0x408f4000
 8001b10:	9999999a 	.word	0x9999999a
 8001b14:	3fa99999 	.word	0x3fa99999
 8001b18:	24000702 	.word	0x24000702
 8001b1c:	24000706 	.word	0x24000706
 8001b20:	24000704 	.word	0x24000704
 8001b24:	24000708 	.word	0x24000708
 8001b28:	080122f4 	.word	0x080122f4
 8001b2c:	08012304 	.word	0x08012304
 8001b30:	08012308 	.word	0x08012308
 8001b34:	24000710 	.word	0x24000710
 8001b38:	2400070c 	.word	0x2400070c
 8001b3c:	08012318 	.word	0x08012318
 8001b40:	24000720 	.word	0x24000720
 8001b44:	08012320 	.word	0x08012320
 8001b48:	24000724 	.word	0x24000724
 8001b4c:	2400071c 	.word	0x2400071c
 8001b50:	24000008 	.word	0x24000008
 8001b54:	455ac000 	.word	0x455ac000
 8001b58:	452f0000 	.word	0x452f0000
 8001b5c:	24000714 	.word	0x24000714
 8001b60:	b60b60b7 	.word	0xb60b60b7

08001b64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a97      	ldr	r2, [pc, #604]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 8126 	bne.w	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x25e>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if (state == 4 || state == 6)
 8001b76:	4b96      	ldr	r3, [pc, #600]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x22>
 8001b7e:	4b94      	ldr	r3, [pc, #592]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d117      	bne.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001b86:	4b93      	ldr	r3, [pc, #588]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a93      	ldr	r2, [pc, #588]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b8c:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001b8e:	4b92      	ldr	r3, [pc, #584]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b90:	2203      	movs	r2, #3
 8001b92:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001b94:	4b90      	ldr	r3, [pc, #576]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001b9a:	4b90      	ldr	r3, [pc, #576]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ba8:	2206      	movs	r2, #6
 8001baa:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001bac:	4a8b      	ldr	r2, [pc, #556]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bae:	498a      	ldr	r1, [pc, #552]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001bb0:	488b      	ldr	r0, [pc, #556]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001bb2:	f006 f80c 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		switch (state)
 8001bb6:	4b86      	ldr	r3, [pc, #536]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b0d      	cmp	r3, #13
 8001bbc:	f200 8101 	bhi.w	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x25e>
 8001bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001c01 	.word	0x08001c01
 8001bcc:	08001dc3 	.word	0x08001dc3
 8001bd0:	08001dc3 	.word	0x08001dc3
 8001bd4:	08001c31 	.word	0x08001c31
 8001bd8:	08001c67 	.word	0x08001c67
 8001bdc:	08001dc3 	.word	0x08001dc3
 8001be0:	08001caf 	.word	0x08001caf
 8001be4:	08001dc3 	.word	0x08001dc3
 8001be8:	08001dc3 	.word	0x08001dc3
 8001bec:	08001dc3 	.word	0x08001dc3
 8001bf0:	08001d0f 	.word	0x08001d0f
 8001bf4:	08001d4f 	.word	0x08001d4f
 8001bf8:	08001dc3 	.word	0x08001dc3
 8001bfc:	08001d8b 	.word	0x08001d8b
		{
		case 0:
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c00:	4b74      	ldr	r3, [pc, #464]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a74      	ldr	r2, [pc, #464]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c06:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c08:	4b73      	ldr	r3, [pc, #460]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c0e:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c14:	4b71      	ldr	r3, [pc, #452]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c1a:	4b70      	ldr	r3, [pc, #448]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001c20:	4b6e      	ldr	r3, [pc, #440]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c26:	4a6d      	ldr	r2, [pc, #436]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c28:	496b      	ldr	r1, [pc, #428]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c2a:	486d      	ldr	r0, [pc, #436]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c2c:	f005 ffcf 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
		case 3:
#if DEBUG
			//print("state: standby");
#endif

			flag_react = 0;
 8001c30:	4b6c      	ldr	r3, [pc, #432]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c36:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a67      	ldr	r2, [pc, #412]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c3c:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c3e:	4b66      	ldr	r3, [pc, #408]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c40:	2203      	movs	r2, #3
 8001c42:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c44:	4b64      	ldr	r3, [pc, #400]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c4a:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c50:	4b62      	ldr	r3, [pc, #392]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x4;
 8001c56:	4b61      	ldr	r3, [pc, #388]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c58:	2204      	movs	r2, #4
 8001c5a:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c5e:	495e      	ldr	r1, [pc, #376]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c60:	485f      	ldr	r0, [pc, #380]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001c62:	f005 ffb4 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
			//}

		case 4:

#if DEBUG
			print("state: ready");
 8001c66:	4860      	ldr	r0, [pc, #384]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001c68:	f7ff fcc2 	bl	80015f0 <print>
#endif
			TxHeader_Inv.Identifier = 0x362;
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c6e:	f240 3262 	movw	r2, #866	@ 0x362
 8001c72:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001c74:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001c76:	2204      	movs	r2, #4
 8001c78:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001c80:	4b56      	ldr	r3, [pc, #344]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c86:	4b55      	ldr	r3, [pc, #340]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 8001c8c:	4b57      	ldr	r3, [pc, #348]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b52      	ldr	r3, [pc, #328]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c94:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001c96:	4b51      	ldr	r3, [pc, #324]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001c9e:	494e      	ldr	r1, [pc, #312]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ca0:	484f      	ldr	r0, [pc, #316]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ca2:	f005 ff94 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
			flag_react = 0; // Reactivado
 8001ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

			break;
 8001cac:	e089      	b.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x25e>
		case 6:
			print("state: torque");
 8001cae:	4850      	ldr	r0, [pc, #320]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cb0:	f7ff fc9e 	bl	80015f0 <print>

			// Request TORQUE inversor

			// flag_react = 1;

			real_torque = setTorque();
 8001cb4:	f7ff fdf4 	bl	80018a0 <setTorque>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001cbe:	801a      	strh	r2, [r3, #0]

			TxHeader_Inv.Identifier = 0x362;
 8001cc0:	4b45      	ldr	r3, [pc, #276]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cc2:	f240 3262 	movw	r2, #866	@ 0x362
 8001cc6:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001cc8:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001cca:	2204      	movs	r2, #4
 8001ccc:	60da      	str	r2, [r3, #12]

			// real_torque = 0;
			byte_torque_1 = real_torque & 0xFF;
 8001cce:	4b47      	ldr	r3, [pc, #284]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cd6:	701a      	strb	r2, [r3, #0]
			byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001cd8:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b45      	ldr	r3, [pc, #276]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ce4:	701a      	strb	r2, [r3, #0]
			TxData_Inv[0] = 0x00;
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x00;
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	705a      	strb	r2, [r3, #1]
				if(frena > 500){
					acelera = 1;
					frena = 0;
				}
			}*/
			TxData_Inv[2] = byte_torque_1;
 8001cf2:	4b40      	ldr	r3, [pc, #256]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cf8:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = byte_torque_2;
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b37      	ldr	r3, [pc, #220]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d00:	70da      	strb	r2, [r3, #3]
			// TxData_Inv[2] = 0xFE;
			// TxData_Inv[3] = 0xFF;
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d02:	4a36      	ldr	r2, [pc, #216]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d04:	4934      	ldr	r1, [pc, #208]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d06:	4836      	ldr	r0, [pc, #216]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d08:	f005 ff61 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
			//CAN_bus_off_check_reset(&hfdcan1);

			break;
 8001d0c:	e059      	b.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x25e>

		case 10:
			print("state: soft fault");
 8001d0e:	483b      	ldr	r0, [pc, #236]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d10:	f7ff fc6e 	bl	80015f0 <print>
			printValue(error);
 8001d14:	4b3a      	ldr	r3, [pc, #232]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fc87 	bl	800162c <printValue>

			// Estado READY inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d24:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d26:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d28:	2203      	movs	r2, #3
 8001d2a:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d38:	4b28      	ldr	r3, [pc, #160]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x13;
 8001d3e:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d40:	2213      	movs	r2, #19
 8001d42:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d44:	4a25      	ldr	r2, [pc, #148]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d46:	4924      	ldr	r1, [pc, #144]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d48:	4825      	ldr	r0, [pc, #148]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d4a:	f005 ff40 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
												  TxData_Inv);
				}*/

		case 11:
			print("state: hard fault");
 8001d4e:	482d      	ldr	r0, [pc, #180]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d50:	f7ff fc4e 	bl	80015f0 <print>
			flag_react = 1;
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d60:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d62:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d64:	2203      	movs	r2, #3
 8001d66:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 13;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d7c:	220d      	movs	r2, #13
 8001d7e:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d80:	4a16      	ldr	r2, [pc, #88]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d82:	4915      	ldr	r1, [pc, #84]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d84:	4816      	ldr	r0, [pc, #88]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d86:	f005 ff22 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>

		case 13:
			print("state: shutdown");
 8001d8a:	481f      	ldr	r0, [pc, #124]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d8c:	f7ff fc30 	bl	80015f0 <print>
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d90:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d96:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x1;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001db6:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001db8:	4907      	ldr	r1, [pc, #28]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001dba:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001dbc:	f005 ff07 	bl	8007bce <HAL_FDCAN_AddMessageToTxFifoQ>


			break;
 8001dc0:	bf00      	nop
		}
#endif
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	24000494 	.word	0x24000494
 8001dd0:	2400071a 	.word	0x2400071a
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	24000608 	.word	0x24000608
 8001ddc:	240006c8 	.word	0x240006c8
 8001de0:	240001ec 	.word	0x240001ec
 8001de4:	24000887 	.word	0x24000887
 8001de8:	08012254 	.word	0x08012254
 8001dec:	24000718 	.word	0x24000718
 8001df0:	08012328 	.word	0x08012328
 8001df4:	24000712 	.word	0x24000712
 8001df8:	24000713 	.word	0x24000713
 8001dfc:	08012338 	.word	0x08012338
 8001e00:	24000886 	.word	0x24000886
 8001e04:	0801234c 	.word	0x0801234c
 8001e08:	08012360 	.word	0x08012360

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <Error_Handler+0x8>

08001e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_MspInit+0x30>)
 8001e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e24:	4a08      	ldr	r2, [pc, #32]	@ (8001e48 <HAL_MspInit+0x30>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_MspInit+0x30>)
 8001e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	58024400 	.word	0x58024400

08001e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b090      	sub	sp, #64	@ 0x40
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a90      	ldr	r2, [pc, #576]	@ (80020ac <HAL_ADC_MspInit+0x260>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	f040 80a3 	bne.w	8001fb6 <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e70:	4b8f      	ldr	r3, [pc, #572]	@ (80020b0 <HAL_ADC_MspInit+0x264>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a8e      	ldr	r2, [pc, #568]	@ (80020b0 <HAL_ADC_MspInit+0x264>)
 8001e78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	@ (80020b0 <HAL_ADC_MspInit+0x264>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10e      	bne.n	8001ea0 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e82:	4b8c      	ldr	r3, [pc, #560]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e88:	4a8a      	ldr	r2, [pc, #552]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001e8a:	f043 0320 	orr.w	r3, r3, #32
 8001e8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e92:	4b88      	ldr	r3, [pc, #544]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001e94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	4b84      	ldr	r3, [pc, #528]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea6:	4a83      	ldr	r2, [pc, #524]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb0:	4b80      	ldr	r3, [pc, #512]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b7d      	ldr	r3, [pc, #500]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	4a7b      	ldr	r2, [pc, #492]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ece:	4b79      	ldr	r3, [pc, #484]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001edc:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee2:	4a74      	ldr	r2, [pc, #464]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eec:	4b71      	ldr	r3, [pc, #452]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 8001efa:	2330      	movs	r3, #48	@ 0x30
 8001efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	486a      	ldr	r0, [pc, #424]	@ (80020b8 <HAL_ADC_MspInit+0x26c>)
 8001f0e:	f006 fda1 	bl	8008a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8001f12:	2303      	movs	r3, #3
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f16:	2303      	movs	r3, #3
 8001f18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f22:	4619      	mov	r1, r3
 8001f24:	4865      	ldr	r0, [pc, #404]	@ (80020bc <HAL_ADC_MspInit+0x270>)
 8001f26:	f006 fd95 	bl	8008a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001f2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f30:	2303      	movs	r3, #3
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4860      	ldr	r0, [pc, #384]	@ (80020c0 <HAL_ADC_MspInit+0x274>)
 8001f40:	f006 fd88 	bl	8008a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001f44:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f46:	4a60      	ldr	r2, [pc, #384]	@ (80020c8 <HAL_ADC_MspInit+0x27c>)
 8001f48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f4c:	2209      	movs	r2, #9
 8001f4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f50:	4b5c      	ldr	r3, [pc, #368]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f56:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f5c:	4b59      	ldr	r3, [pc, #356]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f64:	4b57      	ldr	r3, [pc, #348]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f6c:	4b55      	ldr	r3, [pc, #340]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f72:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f74:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f7c:	4b51      	ldr	r3, [pc, #324]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f82:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f88:	484e      	ldr	r0, [pc, #312]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f8a:	f003 facd 	bl	8005528 <HAL_DMA_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 8001f94:	f7ff ff3a 	bl	8001e0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001f9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f9e:	4a49      	ldr	r2, [pc, #292]	@ (80020c4 <HAL_ADC_MspInit+0x278>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2012      	movs	r0, #18
 8001faa:	f003 fa88 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fae:	2012      	movs	r0, #18
 8001fb0:	f003 fa9f 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001fb4:	e076      	b.n	80020a4 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a44      	ldr	r2, [pc, #272]	@ (80020cc <HAL_ADC_MspInit+0x280>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d171      	bne.n	80020a4 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <HAL_ADC_MspInit+0x264>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80020b0 <HAL_ADC_MspInit+0x264>)
 8001fc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fca:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_ADC_MspInit+0x264>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fd2:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fd8:	4a36      	ldr	r2, [pc, #216]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fe2:	4b34      	ldr	r3, [pc, #208]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002000:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8002010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002014:	4a27      	ldr	r2, [pc, #156]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800201e:	4b25      	ldr	r3, [pc, #148]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8002020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002032:	4a20      	ldr	r2, [pc, #128]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 8002034:	f043 0320 	orr.w	r3, r3, #32
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800203c:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <HAL_ADC_MspInit+0x268>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 800204a:	2320      	movs	r3, #32
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800204e:	2303      	movs	r3, #3
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 8002056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205a:	4619      	mov	r1, r3
 800205c:	4816      	ldr	r0, [pc, #88]	@ (80020b8 <HAL_ADC_MspInit+0x26c>)
 800205e:	f006 fcf9 	bl	8008a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 8002062:	2301      	movs	r3, #1
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4811      	ldr	r0, [pc, #68]	@ (80020bc <HAL_ADC_MspInit+0x270>)
 8002076:	f006 fced 	bl	8008a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 800207a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002080:	2303      	movs	r3, #3
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208c:	4619      	mov	r1, r3
 800208e:	480c      	ldr	r0, [pc, #48]	@ (80020c0 <HAL_ADC_MspInit+0x274>)
 8002090:	f006 fce0 	bl	8008a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	2100      	movs	r1, #0
 8002098:	2012      	movs	r0, #18
 800209a:	f003 fa10 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800209e:	2012      	movs	r0, #18
 80020a0:	f003 fa27 	bl	80054f2 <HAL_NVIC_EnableIRQ>
}
 80020a4:	bf00      	nop
 80020a6:	3740      	adds	r7, #64	@ 0x40
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40022000 	.word	0x40022000
 80020b0:	24000888 	.word	0x24000888
 80020b4:	58024400 	.word	0x58024400
 80020b8:	58020800 	.word	0x58020800
 80020bc:	58020400 	.word	0x58020400
 80020c0:	58021400 	.word	0x58021400
 80020c4:	24000174 	.word	0x24000174
 80020c8:	40020010 	.word	0x40020010
 80020cc:	40022100 	.word	0x40022100

080020d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0bc      	sub	sp, #240	@ 0xf0
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	22b8      	movs	r2, #184	@ 0xb8
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00f fb57 	bl	80117a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a8d      	ldr	r2, [pc, #564]	@ (8002330 <HAL_FDCAN_MspInit+0x260>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d157      	bne.n	80021b0 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002100:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002112:	f107 0320 	add.w	r3, r7, #32
 8002116:	4618      	mov	r0, r3
 8002118:	f007 fe16 	bl	8009d48 <HAL_RCCEx_PeriphCLKConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002122:	f7ff fe73 	bl	8001e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002126:	4b83      	ldr	r3, [pc, #524]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	3301      	adds	r3, #1
 800212c:	4a81      	ldr	r2, [pc, #516]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 800212e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002130:	4b80      	ldr	r3, [pc, #512]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10e      	bne.n	8002156 <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002138:	4b7f      	ldr	r3, [pc, #508]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 800213a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800213e:	4a7e      	ldr	r2, [pc, #504]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002144:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002148:	4b7b      	ldr	r3, [pc, #492]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 800214a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002156:	4b78      	ldr	r3, [pc, #480]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215c:	4a76      	ldr	r2, [pc, #472]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002166:	4b74      	ldr	r3, [pc, #464]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002174:	2303      	movs	r3, #3
 8002176:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800218c:	2309      	movs	r3, #9
 800218e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002192:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002196:	4619      	mov	r1, r3
 8002198:	4868      	ldr	r0, [pc, #416]	@ (800233c <HAL_FDCAN_MspInit+0x26c>)
 800219a:	f006 fc5b 	bl	8008a54 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2101      	movs	r1, #1
 80021a2:	2013      	movs	r0, #19
 80021a4:	f003 f98b 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80021a8:	2013      	movs	r0, #19
 80021aa:	f003 f9a2 	bl	80054f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80021ae:	e0ba      	b.n	8002326 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a62      	ldr	r2, [pc, #392]	@ (8002340 <HAL_FDCAN_MspInit+0x270>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d158      	bne.n	800226c <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021cc:	f107 0320 	add.w	r3, r7, #32
 80021d0:	4618      	mov	r0, r3
 80021d2:	f007 fdb9 	bl	8009d48 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 80021dc:	f7ff fe16 	bl	8001e0c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021e0:	4b54      	ldr	r3, [pc, #336]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	4a53      	ldr	r2, [pc, #332]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 80021e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021ea:	4b52      	ldr	r3, [pc, #328]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10e      	bne.n	8002210 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021f2:	4b51      	ldr	r3, [pc, #324]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80021f4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80021f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fe:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002202:	4b4d      	ldr	r3, [pc, #308]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002204:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002210:	4b49      	ldr	r3, [pc, #292]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002216:	4a48      	ldr	r2, [pc, #288]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002220:	4b45      	ldr	r3, [pc, #276]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800222e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002232:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002248:	2309      	movs	r3, #9
 800224a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002252:	4619      	mov	r1, r3
 8002254:	483b      	ldr	r0, [pc, #236]	@ (8002344 <HAL_FDCAN_MspInit+0x274>)
 8002256:	f006 fbfd 	bl	8008a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2102      	movs	r1, #2
 800225e:	2014      	movs	r0, #20
 8002260:	f003 f92d 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002264:	2014      	movs	r0, #20
 8002266:	f003 f944 	bl	80054f2 <HAL_NVIC_EnableIRQ>
}
 800226a:	e05c      	b.n	8002326 <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a35      	ldr	r2, [pc, #212]	@ (8002348 <HAL_FDCAN_MspInit+0x278>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d157      	bne.n	8002326 <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002276:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002288:	f107 0320 	add.w	r3, r7, #32
 800228c:	4618      	mov	r0, r3
 800228e:	f007 fd5b 	bl	8009d48 <HAL_RCCEx_PeriphCLKConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 8002298:	f7ff fdb8 	bl	8001e0c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a24      	ldr	r2, [pc, #144]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 80022a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80022a6:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <HAL_FDCAN_MspInit+0x264>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10e      	bne.n	80022cc <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80022ae:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80022b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022b4:	4a20      	ldr	r2, [pc, #128]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ba:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80022c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80022d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_FDCAN_MspInit+0x268>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800230a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800230e:	4619      	mov	r1, r3
 8002310:	480e      	ldr	r0, [pc, #56]	@ (800234c <HAL_FDCAN_MspInit+0x27c>)
 8002312:	f006 fb9f 	bl	8008a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	209f      	movs	r0, #159	@ 0x9f
 800231c:	f003 f8cf 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002320:	209f      	movs	r0, #159	@ 0x9f
 8002322:	f003 f8e6 	bl	80054f2 <HAL_NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	37f0      	adds	r7, #240	@ 0xf0
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	4000a000 	.word	0x4000a000
 8002334:	2400088c 	.word	0x2400088c
 8002338:	58024400 	.word	0x58024400
 800233c:	58020c00 	.word	0x58020c00
 8002340:	4000a400 	.word	0x4000a400
 8002344:	58020400 	.word	0x58020400
 8002348:	4000d400 	.word	0x4000d400
 800234c:	58021800 	.word	0x58021800

08002350 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	@ 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3e      	ldr	r2, [pc, #248]	@ (8002468 <HAL_SD_MspInit+0x118>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d175      	bne.n	800245e <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <HAL_SD_MspInit+0x11c>)
 8002374:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002378:	4a3c      	ldr	r2, [pc, #240]	@ (800246c <HAL_SD_MspInit+0x11c>)
 800237a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002382:	4b3a      	ldr	r3, [pc, #232]	@ (800246c <HAL_SD_MspInit+0x11c>)
 8002384:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <HAL_SD_MspInit+0x11c>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002396:	4a35      	ldr	r2, [pc, #212]	@ (800246c <HAL_SD_MspInit+0x11c>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023a0:	4b32      	ldr	r3, [pc, #200]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ae:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b4:	4a2d      	ldr	r2, [pc, #180]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023b6:	f043 0308 	orr.w	r3, r3, #8
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023be:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d2:	4a26      	ldr	r2, [pc, #152]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023dc:	4b23      	ldr	r3, [pc, #140]	@ (800246c <HAL_SD_MspInit+0x11c>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023ea:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80023ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023fc:	230c      	movs	r3, #12
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	4619      	mov	r1, r3
 8002406:	481a      	ldr	r0, [pc, #104]	@ (8002470 <HAL_SD_MspInit+0x120>)
 8002408:	f006 fb24 	bl	8008a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800240c:	2304      	movs	r3, #4
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800241c:	230c      	movs	r3, #12
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4813      	ldr	r0, [pc, #76]	@ (8002474 <HAL_SD_MspInit+0x124>)
 8002428:	f006 fb14 	bl	8008a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800242c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 800243e:	2307      	movs	r3, #7
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	480b      	ldr	r0, [pc, #44]	@ (8002478 <HAL_SD_MspInit+0x128>)
 800244a:	f006 fb03 	bl	8008a54 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2031      	movs	r0, #49	@ 0x31
 8002454:	f003 f833 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002458:	2031      	movs	r0, #49	@ 0x31
 800245a:	f003 f84a 	bl	80054f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800245e:	bf00      	nop
 8002460:	3730      	adds	r7, #48	@ 0x30
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	52007000 	.word	0x52007000
 800246c:	58024400 	.word	0x58024400
 8002470:	58020800 	.word	0x58020800
 8002474:	58020c00 	.word	0x58020c00
 8002478:	58020400 	.word	0x58020400

0800247c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_TIM_Base_MspInit+0x74>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10f      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800248e:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_TIM_Base_MspInit+0x78>)
 8002490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002494:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <HAL_TIM_Base_MspInit+0x78>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_TIM_Base_MspInit+0x78>)
 80024a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024ac:	e01b      	b.n	80024e6 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_TIM_Base_MspInit+0x7c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d116      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024b8:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_TIM_Base_MspInit+0x78>)
 80024ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024be:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <HAL_TIM_Base_MspInit+0x78>)
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_TIM_Base_MspInit+0x78>)
 80024ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2075      	movs	r0, #117	@ 0x75
 80024dc:	f002 ffef 	bl	80054be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80024e0:	2075      	movs	r0, #117	@ 0x75
 80024e2:	f003 f806 	bl	80054f2 <HAL_NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	58024400 	.word	0x58024400
 80024f8:	40014400 	.word	0x40014400

080024fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <HAL_TIM_MspPostInit+0x6c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d11f      	bne.n	800255e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800251e:	4b13      	ldr	r3, [pc, #76]	@ (800256c <HAL_TIM_MspPostInit+0x70>)
 8002520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002524:	4a11      	ldr	r2, [pc, #68]	@ (800256c <HAL_TIM_MspPostInit+0x70>)
 8002526:	f043 0310 	orr.w	r3, r3, #16
 800252a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800252e:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_TIM_MspPostInit+0x70>)
 8002530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 800253c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002540:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	@ (8002570 <HAL_TIM_MspPostInit+0x74>)
 800255a:	f006 fa7b 	bl	8008a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800255e:	bf00      	nop
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	58024400 	.word	0x58024400
 8002570:	58021000 	.word	0x58021000

08002574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0ba      	sub	sp, #232	@ 0xe8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800258c:	f107 0318 	add.w	r3, r7, #24
 8002590:	22b8      	movs	r2, #184	@ 0xb8
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f00f f905 	bl	80117a4 <memset>
  if(huart->Instance==USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a4d      	ldr	r2, [pc, #308]	@ (80026d4 <HAL_UART_MspInit+0x160>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d147      	bne.n	8002634 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025a4:	f04f 0201 	mov.w	r2, #1
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f007 fbc4 	bl	8009d48 <HAL_RCCEx_PeriphCLKConfig>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025c6:	f7ff fc21 	bl	8001e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ca:	4b43      	ldr	r3, [pc, #268]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 80025cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025d0:	4a41      	ldr	r2, [pc, #260]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 80025dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e8:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 80025ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ee:	4a3a      	ldr	r2, [pc, #232]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025f8:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 80025fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8002606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800260a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002620:	2307      	movs	r3, #7
 8002622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800262a:	4619      	mov	r1, r3
 800262c:	482b      	ldr	r0, [pc, #172]	@ (80026dc <HAL_UART_MspInit+0x168>)
 800262e:	f006 fa11 	bl	8008a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002632:	e04a      	b.n	80026ca <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a29      	ldr	r2, [pc, #164]	@ (80026e0 <HAL_UART_MspInit+0x16c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d145      	bne.n	80026ca <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800263e:	f04f 0202 	mov.w	r2, #2
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	4618      	mov	r0, r3
 8002656:	f007 fb77 	bl	8009d48 <HAL_RCCEx_PeriphCLKConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002660:	f7ff fbd4 	bl	8001e0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002664:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	4a1b      	ldr	r2, [pc, #108]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 800266c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002670:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 8002676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800267a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002688:	4a13      	ldr	r2, [pc, #76]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_UART_MspInit+0x164>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a0:	230c      	movs	r3, #12
 80026a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b8:	2307      	movs	r3, #7
 80026ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	@ (80026dc <HAL_UART_MspInit+0x168>)
 80026c6:	f006 f9c5 	bl	8008a54 <HAL_GPIO_Init>
}
 80026ca:	bf00      	nop
 80026cc:	37e8      	adds	r7, #232	@ 0xe8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40011000 	.word	0x40011000
 80026d8:	58024400 	.word	0x58024400
 80026dc:	58020000 	.word	0x58020000
 80026e0:	40004400 	.word	0x40004400

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <NMI_Handler+0x4>

080026ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273a:	f000 f997 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <DMA1_Stream0_IRQHandler+0x10>)
 800274a:	f003 fcaf 	bl	80060ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	24000174 	.word	0x24000174

08002758 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800275c:	4803      	ldr	r0, [pc, #12]	@ (800276c <ADC_IRQHandler+0x14>)
 800275e:	f001 f9e9 	bl	8003b34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002762:	4803      	ldr	r0, [pc, #12]	@ (8002770 <ADC_IRQHandler+0x18>)
 8002764:	f001 f9e6 	bl	8003b34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	24000094 	.word	0x24000094
 8002770:	24000104 	.word	0x24000104

08002774 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <FDCAN1_IT0_IRQHandler+0x10>)
 800277a:	f005 fc69 	bl	8008050 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	240001ec 	.word	0x240001ec

08002788 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <FDCAN2_IT0_IRQHandler+0x10>)
 800278e:	f005 fc5f 	bl	8008050 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2400028c 	.word	0x2400028c

0800279c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <SDMMC1_IRQHandler+0x10>)
 80027a2:	f00a f927 	bl	800c9f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	240003cc 	.word	0x240003cc

080027b0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <TIM16_IRQHandler+0x10>)
 80027b6:	f00b fc50 	bl	800e05a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	24000494 	.word	0x24000494

080027c4 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80027c8:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <FDCAN3_IT0_IRQHandler+0x10>)
 80027ca:	f005 fc41 	bl	8008050 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2400032c 	.word	0x2400032c

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	@ (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	@ (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	@ (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f00e ffd4 	bl	80117b4 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	24050000 	.word	0x24050000
 8002838:	00000400 	.word	0x00000400
 800283c:	24000890 	.word	0x24000890
 8002840:	24000a00 	.word	0x24000a00

08002844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002848:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <SystemInit+0xd0>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	4a31      	ldr	r2, [pc, #196]	@ (8002914 <SystemInit+0xd0>)
 8002850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002858:	4b2f      	ldr	r3, [pc, #188]	@ (8002918 <SystemInit+0xd4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	2b06      	cmp	r3, #6
 8002862:	d807      	bhi.n	8002874 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002864:	4b2c      	ldr	r3, [pc, #176]	@ (8002918 <SystemInit+0xd4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 030f 	bic.w	r3, r3, #15
 800286c:	4a2a      	ldr	r2, [pc, #168]	@ (8002918 <SystemInit+0xd4>)
 800286e:	f043 0307 	orr.w	r3, r3, #7
 8002872:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002874:	4b29      	ldr	r3, [pc, #164]	@ (800291c <SystemInit+0xd8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a28      	ldr	r2, [pc, #160]	@ (800291c <SystemInit+0xd8>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002880:	4b26      	ldr	r3, [pc, #152]	@ (800291c <SystemInit+0xd8>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002886:	4b25      	ldr	r3, [pc, #148]	@ (800291c <SystemInit+0xd8>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4924      	ldr	r1, [pc, #144]	@ (800291c <SystemInit+0xd8>)
 800288c:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <SystemInit+0xdc>)
 800288e:	4013      	ands	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002892:	4b21      	ldr	r3, [pc, #132]	@ (8002918 <SystemInit+0xd4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <SystemInit+0xd4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 030f 	bic.w	r3, r3, #15
 80028a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002918 <SystemInit+0xd4>)
 80028a8:	f043 0307 	orr.w	r3, r3, #7
 80028ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80028ae:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <SystemInit+0xd8>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <SystemInit+0xd8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80028ba:	4b18      	ldr	r3, [pc, #96]	@ (800291c <SystemInit+0xd8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <SystemInit+0xd8>)
 80028c2:	4a18      	ldr	r2, [pc, #96]	@ (8002924 <SystemInit+0xe0>)
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <SystemInit+0xd8>)
 80028c8:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <SystemInit+0xe4>)
 80028ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <SystemInit+0xd8>)
 80028ce:	4a17      	ldr	r2, [pc, #92]	@ (800292c <SystemInit+0xe8>)
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <SystemInit+0xd8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <SystemInit+0xd8>)
 80028da:	4a14      	ldr	r2, [pc, #80]	@ (800292c <SystemInit+0xe8>)
 80028dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028de:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <SystemInit+0xd8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <SystemInit+0xd8>)
 80028e6:	4a11      	ldr	r2, [pc, #68]	@ (800292c <SystemInit+0xe8>)
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028ea:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <SystemInit+0xd8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <SystemInit+0xd8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a09      	ldr	r2, [pc, #36]	@ (800291c <SystemInit+0xd8>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028fc:	4b07      	ldr	r3, [pc, #28]	@ (800291c <SystemInit+0xd8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <SystemInit+0xec>)
 8002904:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002908:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00
 8002918:	52002000 	.word	0x52002000
 800291c:	58024400 	.word	0x58024400
 8002920:	eaf6ed7f 	.word	0xeaf6ed7f
 8002924:	02020200 	.word	0x02020200
 8002928:	01ff0000 	.word	0x01ff0000
 800292c:	01010280 	.word	0x01010280
 8002930:	52004000 	.word	0x52004000

08002934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800296c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002938:	f7ff ff84 	bl	8002844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480c      	ldr	r0, [pc, #48]	@ (8002970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800293e:	490d      	ldr	r1, [pc, #52]	@ (8002974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002954:	4c0a      	ldr	r4, [pc, #40]	@ (8002980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002962:	f00e ff2d 	bl	80117c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002966:	f7fd fec1 	bl	80006ec <main>
  bx  lr
 800296a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800296c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002970:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002974:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002978:	08012464 	.word	0x08012464
  ldr r2, =_sbss
 800297c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002980:	240009fc 	.word	0x240009fc

08002984 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC3_IRQHandler>
	...

08002988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298e:	2003      	movs	r0, #3
 8002990:	f002 fd8a 	bl	80054a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002994:	f007 f802 	bl	800999c <HAL_RCC_GetSysClockFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_Init+0x68>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	4913      	ldr	r1, [pc, #76]	@ (80029f4 <HAL_Init+0x6c>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
 80029b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029b2:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_Init+0x68>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <HAL_Init+0x6c>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	4a0b      	ldr	r2, [pc, #44]	@ (80029f8 <HAL_Init+0x70>)
 80029ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029cc:	4a0b      	ldr	r2, [pc, #44]	@ (80029fc <HAL_Init+0x74>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029d2:	200f      	movs	r0, #15
 80029d4:	f000 f814 	bl	8002a00 <HAL_InitTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e002      	b.n	80029e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029e2:	f7ff fa19 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	58024400 	.word	0x58024400
 80029f4:	080123bc 	.word	0x080123bc
 80029f8:	24000010 	.word	0x24000010
 80029fc:	2400000c 	.word	0x2400000c

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a08:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_InitTick+0x60>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e021      	b.n	8002a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a14:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <HAL_InitTick+0x64>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_InitTick+0x60>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fd6f 	bl	800550e <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00e      	b.n	8002a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d80a      	bhi.n	8002a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f002 fd39 	bl	80054be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	@ (8002a68 <HAL_InitTick+0x68>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	24000018 	.word	0x24000018
 8002a64:	2400000c 	.word	0x2400000c
 8002a68:	24000014 	.word	0x24000014

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	24000018 	.word	0x24000018
 8002a90:	24000894 	.word	0x24000894

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	24000894 	.word	0x24000894

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_Delay+0x44>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	24000018 	.word	0x24000018

08002af4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3360      	adds	r3, #96	@ 0x60
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <LL_ADC_SetOffset+0x60>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10b      	bne.n	8002b98 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b96:	e00b      	b.n	8002bb0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	58026000 	.word	0x58026000

08002bc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3360      	adds	r3, #96	@ 0x60
 8002bce:	461a      	mov	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	611a      	str	r2, [r3, #16]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c60 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3360      	adds	r3, #96	@ 0x60
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
  }
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	58026000 	.word	0x58026000

08002c64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10e      	bne.n	8002c96 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3360      	adds	r3, #96	@ 0x60
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	58026000 	.word	0x58026000

08002ca8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce8 <LL_ADC_SetOffsetSign+0x40>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d10e      	bne.n	8002cda <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3360      	adds	r3, #96	@ 0x60
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	58026000 	.word	0x58026000

08002cec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3360      	adds	r3, #96	@ 0x60
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a0c      	ldr	r2, [pc, #48]	@ (8002d3c <LL_ADC_SetOffsetState+0x50>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d1e:	e007      	b.n	8002d30 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	601a      	str	r2, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	58026000 	.word	0x58026000

08002d40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3330      	adds	r3, #48	@ 0x30
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	4413      	add	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	211f      	movs	r1, #31
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	f003 011f 	and.w	r1, r3, #31
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f023 0203 	bic.w	r2, r3, #3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d107      	bne.n	8002e26 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60da      	str	r2, [r3, #12]
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	58026000 	.word	0x58026000

08002e38 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e44:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	0e5b      	lsrs	r3, r3, #25
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	0d1b      	lsrs	r3, r3, #20
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2107      	movs	r1, #7
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	0d1b      	lsrs	r3, r3, #20
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f2c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d115      	bne.n	8002ef4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0318 	and.w	r3, r3, #24
 8002ede:	4914      	ldr	r1, [pc, #80]	@ (8002f30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ee0:	40d9      	lsrs	r1, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ef2:	e014      	b.n	8002f1e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0318 	and.w	r3, r3, #24
 8002f0a:	4909      	ldr	r1, [pc, #36]	@ (8002f30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f0c:	40d9      	lsrs	r1, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	400b      	ands	r3, r1
 8002f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	58026000 	.word	0x58026000
 8002f30:	000fffff 	.word	0x000fffff

08002f34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 031f 	and.w	r3, r3, #31
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b04      	ldr	r3, [pc, #16]	@ (8002f8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6093      	str	r3, [r2, #8]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	5fffffc0 	.word	0x5fffffc0

08002f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	6fffffc0 	.word	0x6fffffc0

08002fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <LL_ADC_Enable+0x24>)
 8003016:	4013      	ands	r3, r2
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	7fffffc0 	.word	0x7fffffc0

08003030 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <LL_ADC_Disable+0x24>)
 800303e:	4013      	ands	r3, r2
 8003040:	f043 0202 	orr.w	r2, r3, #2
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	7fffffc0 	.word	0x7fffffc0

08003058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <LL_ADC_IsEnabled+0x18>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <LL_ADC_IsEnabled+0x1a>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d101      	bne.n	8003096 <LL_ADC_IsDisableOngoing+0x18>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <LL_ADC_IsDisableOngoing+0x1a>
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <LL_ADC_REG_StartConversion+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	f043 0204 	orr.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	7fffffc0 	.word	0x7fffffc0

080030cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <LL_ADC_REG_StopConversion+0x24>)
 80030da:	4013      	ands	r3, r2
 80030dc:	f043 0210 	orr.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	7fffffc0 	.word	0x7fffffc0

080030f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b04      	cmp	r3, #4
 8003106:	d101      	bne.n	800310c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <LL_ADC_INJ_StopConversion+0x24>)
 800312a:	4013      	ands	r3, r2
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	7fffffc0 	.word	0x7fffffc0

08003144 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b08      	cmp	r3, #8
 8003156:	d101      	bne.n	800315c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1ee      	b.n	8003564 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fe fe59 	bl	8001e4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff feef 	bl	8002f90 <LL_ADC_IsDeepPowerDownEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fed5 	bl	8002f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff0a 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d114      	bne.n	80031fc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff feee 	bl	8002fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003418 <HAL_ADC_Init+0x2ac>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	4a8e      	ldr	r2, [pc, #568]	@ (800341c <HAL_ADC_Init+0x2b0>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031ee:	e002      	b.n	80031f6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff feed 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10d      	bne.n	8003228 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003210:	f043 0210 	orr.w	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800321c:	f043 0201 	orr.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff61 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8003232:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8188 	bne.w	8003552 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 8184 	bne.w	8003552 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fefa 	bl	8003058 <LL_ADC_IsEnabled>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d136      	bne.n	80032d8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6c      	ldr	r2, [pc, #432]	@ (8003420 <HAL_ADC_Init+0x2b4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_ADC_Init+0x112>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6a      	ldr	r2, [pc, #424]	@ (8003424 <HAL_ADC_Init+0x2b8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10e      	bne.n	800329c <HAL_ADC_Init+0x130>
 800327e:	4868      	ldr	r0, [pc, #416]	@ (8003420 <HAL_ADC_Init+0x2b4>)
 8003280:	f7ff feea 	bl	8003058 <LL_ADC_IsEnabled>
 8003284:	4604      	mov	r4, r0
 8003286:	4867      	ldr	r0, [pc, #412]	@ (8003424 <HAL_ADC_Init+0x2b8>)
 8003288:	f7ff fee6 	bl	8003058 <LL_ADC_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	4323      	orrs	r3, r4
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e008      	b.n	80032ae <HAL_ADC_Init+0x142>
 800329c:	4862      	ldr	r0, [pc, #392]	@ (8003428 <HAL_ADC_Init+0x2bc>)
 800329e:	f7ff fedb 	bl	8003058 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003420 <HAL_ADC_Init+0x2b4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_ADC_Init+0x15a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a58      	ldr	r2, [pc, #352]	@ (8003424 <HAL_ADC_Init+0x2b8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Init+0x15e>
 80032c6:	4a59      	ldr	r2, [pc, #356]	@ (800342c <HAL_ADC_Init+0x2c0>)
 80032c8:	e000      	b.n	80032cc <HAL_ADC_Init+0x160>
 80032ca:	4a59      	ldr	r2, [pc, #356]	@ (8003430 <HAL_ADC_Init+0x2c4>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7ff fc0e 	bl	8002af4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a52      	ldr	r2, [pc, #328]	@ (8003428 <HAL_ADC_Init+0x2bc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d129      	bne.n	8003336 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7e5b      	ldrb	r3, [r3, #25]
 80032e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032ec:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80032f2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d013      	beq.n	8003324 <HAL_ADC_Init+0x1b8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d00d      	beq.n	8003320 <HAL_ADC_Init+0x1b4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b1c      	cmp	r3, #28
 800330a:	d007      	beq.n	800331c <HAL_ADC_Init+0x1b0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b18      	cmp	r3, #24
 8003312:	d101      	bne.n	8003318 <HAL_ADC_Init+0x1ac>
 8003314:	2318      	movs	r3, #24
 8003316:	e006      	b.n	8003326 <HAL_ADC_Init+0x1ba>
 8003318:	2300      	movs	r3, #0
 800331a:	e004      	b.n	8003326 <HAL_ADC_Init+0x1ba>
 800331c:	2310      	movs	r3, #16
 800331e:	e002      	b.n	8003326 <HAL_ADC_Init+0x1ba>
 8003320:	2308      	movs	r3, #8
 8003322:	e000      	b.n	8003326 <HAL_ADC_Init+0x1ba>
 8003324:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003326:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e00e      	b.n	8003354 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7e5b      	ldrb	r3, [r3, #25]
 800333a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003340:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003346:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d106      	bne.n	800336c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	3b01      	subs	r3, #1
 8003364:	045b      	lsls	r3, r3, #17
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a26      	ldr	r2, [pc, #152]	@ (8003428 <HAL_ADC_Init+0x2bc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d115      	bne.n	80033be <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4b26      	ldr	r3, [pc, #152]	@ (8003434 <HAL_ADC_Init+0x2c8>)
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	69b9      	ldr	r1, [r7, #24]
 80033a2:	430b      	orrs	r3, r1
 80033a4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	611a      	str	r2, [r3, #16]
 80033bc:	e009      	b.n	80033d2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <HAL_ADC_Init+0x2cc>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	69b9      	ldr	r1, [r7, #24]
 80033ce:	430b      	orrs	r3, r1
 80033d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fe8c 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 80033dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff feae 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 80033e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 808e 	bne.w	800350e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 808a 	bne.w	800350e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003428 <HAL_ADC_Init+0x2bc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d11b      	bne.n	800343c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7e1b      	ldrb	r3, [r3, #24]
 8003408:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003410:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	e018      	b.n	800344a <HAL_ADC_Init+0x2de>
 8003418:	2400000c 	.word	0x2400000c
 800341c:	053e2d63 	.word	0x053e2d63
 8003420:	40022000 	.word	0x40022000
 8003424:	40022100 	.word	0x40022100
 8003428:	58026000 	.word	0x58026000
 800342c:	40022300 	.word	0x40022300
 8003430:	58026300 	.word	0x58026300
 8003434:	fff04007 	.word	0xfff04007
 8003438:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e1b      	ldrb	r3, [r3, #24]
 8003440:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4b46      	ldr	r3, [pc, #280]	@ (800356c <HAL_ADC_Init+0x400>)
 8003452:	4013      	ands	r3, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	69b9      	ldr	r1, [r7, #24]
 800345a:	430b      	orrs	r3, r1
 800345c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003464:	2b01      	cmp	r3, #1
 8003466:	d137      	bne.n	80034d8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3f      	ldr	r2, [pc, #252]	@ (8003570 <HAL_ADC_Init+0x404>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d116      	bne.n	80034a6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	4b3d      	ldr	r3, [pc, #244]	@ (8003574 <HAL_ADC_Init+0x408>)
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003496:	430a      	orrs	r2, r1
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	611a      	str	r2, [r3, #16]
 80034a4:	e020      	b.n	80034e8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_ADC_Init+0x40c>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0411      	lsls	r1, r2, #16
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034c8:	430a      	orrs	r2, r1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	611a      	str	r2, [r3, #16]
 80034d6:	e007      	b.n	80034e8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1b      	ldr	r2, [pc, #108]	@ (8003570 <HAL_ADC_Init+0x404>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d002      	beq.n	800350e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 fcd5 	bl	8004eb8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10c      	bne.n	8003530 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	f023 010f 	bic.w	r1, r3, #15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	631a      	str	r2, [r3, #48]	@ 0x30
 800352e:	e007      	b.n	8003540 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020f 	bic.w	r2, r2, #15
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003544:	f023 0303 	bic.w	r3, r3, #3
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003550:	e007      	b.n	8003562 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003562:	7ffb      	ldrb	r3, [r7, #31]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3724      	adds	r7, #36	@ 0x24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd90      	pop	{r4, r7, pc}
 800356c:	ffffbffc 	.word	0xffffbffc
 8003570:	58026000 	.word	0x58026000
 8003574:	fc00f81f 	.word	0xfc00f81f
 8003578:	fc00f81e 	.word	0xfc00f81e

0800357c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a5c      	ldr	r2, [pc, #368]	@ (80036fc <HAL_ADC_Start+0x180>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_ADC_Start+0x1c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5b      	ldr	r2, [pc, #364]	@ (8003700 <HAL_ADC_Start+0x184>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_ADC_Start+0x20>
 8003598:	4b5a      	ldr	r3, [pc, #360]	@ (8003704 <HAL_ADC_Start+0x188>)
 800359a:	e000      	b.n	800359e <HAL_ADC_Start+0x22>
 800359c:	4b5a      	ldr	r3, [pc, #360]	@ (8003708 <HAL_ADC_Start+0x18c>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fcc8 	bl	8002f34 <LL_ADC_GetMultimode>
 80035a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fda2 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 809a 	bne.w	80036ec <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_Start+0x4a>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e095      	b.n	80036f2 <HAL_ADC_Start+0x176>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f001 faf4 	bl	8004bbc <ADC_Enable>
 80035d4:	4603      	mov	r3, r0
 80035d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 8081 	bne.w	80036e2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035e4:	4b49      	ldr	r3, [pc, #292]	@ (800370c <HAL_ADC_Start+0x190>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a42      	ldr	r2, [pc, #264]	@ (8003700 <HAL_ADC_Start+0x184>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d002      	beq.n	8003600 <HAL_ADC_Start+0x84>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	e000      	b.n	8003602 <HAL_ADC_Start+0x86>
 8003600:	4b3e      	ldr	r3, [pc, #248]	@ (80036fc <HAL_ADC_Start+0x180>)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4293      	cmp	r3, r2
 8003608:	d002      	beq.n	8003610 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003614:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d106      	bne.n	8003638 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362e:	f023 0206 	bic.w	r2, r3, #6
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	665a      	str	r2, [r3, #100]	@ 0x64
 8003636:	e002      	b.n	800363e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	221c      	movs	r2, #28
 8003644:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2b      	ldr	r2, [pc, #172]	@ (8003700 <HAL_ADC_Start+0x184>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d002      	beq.n	800365e <HAL_ADC_Start+0xe2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e000      	b.n	8003660 <HAL_ADC_Start+0xe4>
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_ADC_Start+0x180>)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4293      	cmp	r3, r2
 8003666:	d008      	beq.n	800367a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d002      	beq.n	800367a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b09      	cmp	r3, #9
 8003678:	d114      	bne.n	80036a4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003690:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fd01 	bl	80030a4 <LL_ADC_REG_StartConversion>
 80036a2:	e025      	b.n	80036f0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <HAL_ADC_Start+0x184>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_Start+0x144>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e000      	b.n	80036c2 <HAL_ADC_Start+0x146>
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_ADC_Start+0x180>)
 80036c2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00f      	beq.n	80036f0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	661a      	str	r2, [r3, #96]	@ 0x60
 80036e0:	e006      	b.n	80036f0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80036ea:	e001      	b.n	80036f0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40022000 	.word	0x40022000
 8003700:	40022100 	.word	0x40022100
 8003704:	40022300 	.word	0x40022300
 8003708:	58026300 	.word	0x58026300
 800370c:	fffff0fe 	.word	0xfffff0fe

08003710 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_ADC_Stop+0x16>
 8003722:	2302      	movs	r3, #2
 8003724:	e021      	b.n	800376a <HAL_ADC_Stop+0x5a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800372e:	2103      	movs	r1, #3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f001 f987 	bl	8004a44 <ADC_ConversionStop>
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10f      	bne.n	8003760 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 fac5 	bl	8004cd0 <ADC_Disable>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003754:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <HAL_ADC_Stop+0x64>)
 8003756:	4013      	ands	r3, r2
 8003758:	f043 0201 	orr.w	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003768:	7bfb      	ldrb	r3, [r7, #15]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	ffffeefe 	.word	0xffffeefe

08003778 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a72      	ldr	r2, [pc, #456]	@ (8003950 <HAL_ADC_PollForConversion+0x1d8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <HAL_ADC_PollForConversion+0x1e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a70      	ldr	r2, [pc, #448]	@ (8003954 <HAL_ADC_PollForConversion+0x1dc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_ADC_PollForConversion+0x22>
 8003796:	4b70      	ldr	r3, [pc, #448]	@ (8003958 <HAL_ADC_PollForConversion+0x1e0>)
 8003798:	e000      	b.n	800379c <HAL_ADC_PollForConversion+0x24>
 800379a:	4b70      	ldr	r3, [pc, #448]	@ (800395c <HAL_ADC_PollForConversion+0x1e4>)
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fbc9 	bl	8002f34 <LL_ADC_GetMultimode>
 80037a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d102      	bne.n	80037b2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80037ac:	2308      	movs	r3, #8
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e037      	b.n	8003822 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d002      	beq.n	80037c4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	d111      	bne.n	80037e8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0b1      	b.n	8003946 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037e2:	2304      	movs	r3, #4
 80037e4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037e6:	e01c      	b.n	8003822 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_ADC_PollForConversion+0x1d8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_ADC_PollForConversion+0x84>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a57      	ldr	r2, [pc, #348]	@ (8003954 <HAL_ADC_PollForConversion+0x1dc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_PollForConversion+0x88>
 80037fc:	4b56      	ldr	r3, [pc, #344]	@ (8003958 <HAL_ADC_PollForConversion+0x1e0>)
 80037fe:	e000      	b.n	8003802 <HAL_ADC_PollForConversion+0x8a>
 8003800:	4b56      	ldr	r3, [pc, #344]	@ (800395c <HAL_ADC_PollForConversion+0x1e4>)
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fba4 	bl	8002f50 <LL_ADC_GetMultiDMATransfer>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f043 0220 	orr.w	r2, r3, #32
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e093      	b.n	8003946 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800381e:	2304      	movs	r3, #4
 8003820:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003822:	f7ff f937 	bl	8002a94 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003828:	e021      	b.n	800386e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d01d      	beq.n	800386e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003832:	f7ff f92f 	bl	8002a94 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <HAL_ADC_PollForConversion+0xd0>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d112      	bne.n	800386e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e06b      	b.n	8003946 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0d6      	beq.n	800382a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003880:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fa57 	bl	8002d40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01c      	beq.n	80038d2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7e5b      	ldrb	r3, [r3, #25]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d118      	bne.n	80038d2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d111      	bne.n	80038d2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_ADC_PollForConversion+0x1dc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d002      	beq.n	80038e2 <HAL_ADC_PollForConversion+0x16a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	e000      	b.n	80038e4 <HAL_ADC_PollForConversion+0x16c>
 80038e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003950 <HAL_ADC_PollForConversion+0x1d8>)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d008      	beq.n	80038fe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d002      	beq.n	80038fe <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b09      	cmp	r3, #9
 80038fc:	d104      	bne.n	8003908 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e00c      	b.n	8003922 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a11      	ldr	r2, [pc, #68]	@ (8003954 <HAL_ADC_PollForConversion+0x1dc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d002      	beq.n	8003918 <HAL_ADC_PollForConversion+0x1a0>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e000      	b.n	800391a <HAL_ADC_PollForConversion+0x1a2>
 8003918:	4b0d      	ldr	r3, [pc, #52]	@ (8003950 <HAL_ADC_PollForConversion+0x1d8>)
 800391a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d104      	bne.n	8003932 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e008      	b.n	8003944 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d103      	bne.n	8003944 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	220c      	movs	r2, #12
 8003942:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40022000 	.word	0x40022000
 8003954:	40022100 	.word	0x40022100
 8003958:	40022300 	.word	0x40022300
 800395c:	58026300 	.word	0x58026300

08003960 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a60      	ldr	r2, [pc, #384]	@ (8003af4 <HAL_ADC_Start_DMA+0x194>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_ADC_Start_DMA+0x20>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a5f      	ldr	r2, [pc, #380]	@ (8003af8 <HAL_ADC_Start_DMA+0x198>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_ADC_Start_DMA+0x24>
 8003980:	4b5e      	ldr	r3, [pc, #376]	@ (8003afc <HAL_ADC_Start_DMA+0x19c>)
 8003982:	e000      	b.n	8003986 <HAL_ADC_Start_DMA+0x26>
 8003984:	4b5e      	ldr	r3, [pc, #376]	@ (8003b00 <HAL_ADC_Start_DMA+0x1a0>)
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fad4 	bl	8002f34 <LL_ADC_GetMultimode>
 800398c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fbae 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 80a2 	bne.w	8003ae4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_Start_DMA+0x4e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e09d      	b.n	8003aea <HAL_ADC_Start_DMA+0x18a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d003      	beq.n	80039ca <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	f040 8086 	bne.w	8003ad6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f001 f8f6 	bl	8004bbc <ADC_Enable>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d178      	bne.n	8003acc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039de:	4b49      	ldr	r3, [pc, #292]	@ (8003b04 <HAL_ADC_Start_DMA+0x1a4>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a42      	ldr	r2, [pc, #264]	@ (8003af8 <HAL_ADC_Start_DMA+0x198>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_Start_DMA+0x9a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e000      	b.n	80039fc <HAL_ADC_Start_DMA+0x9c>
 80039fa:	4b3e      	ldr	r3, [pc, #248]	@ (8003af4 <HAL_ADC_Start_DMA+0x194>)
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d002      	beq.n	8003a0a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a26:	f023 0206 	bic.w	r2, r3, #6
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	665a      	str	r2, [r3, #100]	@ 0x64
 8003a2e:	e002      	b.n	8003a36 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3a:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <HAL_ADC_Start_DMA+0x1a8>)
 8003a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_ADC_Start_DMA+0x1ac>)
 8003a44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	4a31      	ldr	r2, [pc, #196]	@ (8003b10 <HAL_ADC_Start_DMA+0x1b0>)
 8003a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	221c      	movs	r2, #28
 8003a54:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0210 	orr.w	r2, r2, #16
 8003a6c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a28      	ldr	r2, [pc, #160]	@ (8003b14 <HAL_ADC_Start_DMA+0x1b4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d10f      	bne.n	8003a98 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7ff f9bc 	bl	8002e04 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff f9a7 	bl	8002de4 <LL_ADC_EnableDMAReq>
 8003a96:	e007      	b.n	8003aa8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7ff f98b 	bl	8002dbe <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3340      	adds	r3, #64	@ 0x40
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f002 f88e 	bl	8005bd8 <HAL_DMA_Start_IT>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff faed 	bl	80030a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003aca:	e00d      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003ad4:	e008      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003ae2:	e001      	b.n	8003ae8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40022100 	.word	0x40022100
 8003afc:	40022300 	.word	0x40022300
 8003b00:	58026300 	.word	0x58026300
 8003b04:	fffff0fe 	.word	0xfffff0fe
 8003b08:	08004d8f 	.word	0x08004d8f
 8003b0c:	08004e67 	.word	0x08004e67
 8003b10:	08004e83 	.word	0x08004e83
 8003b14:	58026000 	.word	0x58026000

08003b18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	@ 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a87      	ldr	r2, [pc, #540]	@ (8003d74 <HAL_ADC_IRQHandler+0x240>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_IRQHandler+0x30>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a86      	ldr	r2, [pc, #536]	@ (8003d78 <HAL_ADC_IRQHandler+0x244>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_IRQHandler+0x34>
 8003b64:	4b85      	ldr	r3, [pc, #532]	@ (8003d7c <HAL_ADC_IRQHandler+0x248>)
 8003b66:	e000      	b.n	8003b6a <HAL_ADC_IRQHandler+0x36>
 8003b68:	4b85      	ldr	r3, [pc, #532]	@ (8003d80 <HAL_ADC_IRQHandler+0x24c>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f9e2 	bl	8002f34 <LL_ADC_GetMultimode>
 8003b70:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_ADC_IRQHandler+0x78>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f001 fac6 	bl	8005130 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <HAL_ADC_IRQHandler+0x8c>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8083 	beq.w	8003cd2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07d      	beq.n	8003cd2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f8a4 	bl	8002d40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d062      	beq.n	8003cc4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5d      	ldr	r2, [pc, #372]	@ (8003d78 <HAL_ADC_IRQHandler+0x244>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d002      	beq.n	8003c0e <HAL_ADC_IRQHandler+0xda>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	e000      	b.n	8003c10 <HAL_ADC_IRQHandler+0xdc>
 8003c0e:	4b59      	ldr	r3, [pc, #356]	@ (8003d74 <HAL_ADC_IRQHandler+0x240>)
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d008      	beq.n	8003c2a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d002      	beq.n	8003c2a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b09      	cmp	r3, #9
 8003c28:	d104      	bne.n	8003c34 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	623b      	str	r3, [r7, #32]
 8003c32:	e00c      	b.n	8003c4e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4f      	ldr	r2, [pc, #316]	@ (8003d78 <HAL_ADC_IRQHandler+0x244>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d002      	beq.n	8003c44 <HAL_ADC_IRQHandler+0x110>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	e000      	b.n	8003c46 <HAL_ADC_IRQHandler+0x112>
 8003c44:	4b4b      	ldr	r3, [pc, #300]	@ (8003d74 <HAL_ADC_IRQHandler+0x240>)
 8003c46:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d135      	bne.n	8003cc4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d12e      	bne.n	8003cc4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fa42 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11a      	bne.n	8003cac <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 020c 	bic.w	r2, r2, #12
 8003c84:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d112      	bne.n	8003cc4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	661a      	str	r2, [r3, #96]	@ 0x60
 8003caa:	e00b      	b.n	8003cc4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	f043 0210 	orr.w	r2, r3, #16
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7fd fccf 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	220c      	movs	r2, #12
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_ADC_IRQHandler+0x1b2>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a0 	beq.w	8003e32 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 809a 	beq.w	8003e32 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f88c 	bl	8002e38 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d20:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff f80a 	bl	8002d40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d2c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a11      	ldr	r2, [pc, #68]	@ (8003d78 <HAL_ADC_IRQHandler+0x244>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d002      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x20a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	e000      	b.n	8003d40 <HAL_ADC_IRQHandler+0x20c>
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d74 <HAL_ADC_IRQHandler+0x240>)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d008      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d002      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	d104      	bne.n	8003d64 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	e014      	b.n	8003d8e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a03      	ldr	r2, [pc, #12]	@ (8003d78 <HAL_ADC_IRQHandler+0x244>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00a      	beq.n	8003d84 <HAL_ADC_IRQHandler+0x250>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e008      	b.n	8003d86 <HAL_ADC_IRQHandler+0x252>
 8003d74:	40022000 	.word	0x40022000
 8003d78:	40022100 	.word	0x40022100
 8003d7c:	40022300 	.word	0x40022300
 8003d80:	58026300 	.word	0x58026300
 8003d84:	4b84      	ldr	r3, [pc, #528]	@ (8003f98 <HAL_ADC_IRQHandler+0x464>)
 8003d86:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d047      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_ADC_IRQHandler+0x27a>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d03f      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d13a      	bne.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d133      	bne.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d12e      	bne.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f9ba 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11a      	bne.n	8003e0c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003de4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d112      	bne.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e0a:	e00b      	b.n	8003e24 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e1c:	f043 0201 	orr.w	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f001 f95b 	bl	80050e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2260      	movs	r2, #96	@ 0x60
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d011      	beq.n	8003e60 <HAL_ADC_IRQHandler+0x32c>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8b2 	bl	8003fbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2280      	movs	r2, #128	@ 0x80
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d012      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x35c>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 f941 	bl	8005108 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x38c>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 f933 	bl	800511c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d043      	beq.n	8003f52 <HAL_ADC_IRQHandler+0x41e>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d03e      	beq.n	8003f52 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003edc:	2301      	movs	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee0:	e021      	b.n	8003f26 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d015      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <HAL_ADC_IRQHandler+0x464>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_ADC_IRQHandler+0x3c8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	@ (8003f9c <HAL_ADC_IRQHandler+0x468>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_IRQHandler+0x3cc>
 8003efc:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <HAL_ADC_IRQHandler+0x46c>)
 8003efe:	e000      	b.n	8003f02 <HAL_ADC_IRQHandler+0x3ce>
 8003f00:	4b28      	ldr	r3, [pc, #160]	@ (8003fa4 <HAL_ADC_IRQHandler+0x470>)
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff f824 	bl	8002f50 <LL_ADC_GetMultiDMATransfer>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f12:	e008      	b.n	8003f26 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f22:	2301      	movs	r3, #1
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10e      	bne.n	8003f4a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f30:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f3c:	f043 0202 	orr.w	r2, r3, #2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f843 	bl	8003fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2210      	movs	r2, #16
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d018      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x45a>
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d013      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f76:	f043 0208 	orr.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f86:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 f8b3 	bl	80050f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f8e:	bf00      	nop
 8003f90:	3728      	adds	r7, #40	@ 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	40022100 	.word	0x40022100
 8003fa0:	40022300 	.word	0x40022300
 8003fa4:	58026300 	.word	0x58026300

08003fa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b0b9      	sub	sp, #228	@ 0xe4
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ffe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4aab      	ldr	r2, [pc, #684]	@ (80042b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8004006:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d102      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x34>
 8004012:	2302      	movs	r3, #2
 8004014:	f000 bcfe 	b.w	8004a14 <HAL_ADC_ConfigChannel+0xa30>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f865 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 84e2 	bne.w	80049f6 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	db38      	blt.n	80040ac <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a9e      	ldr	r2, [pc, #632]	@ (80042b8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d033      	beq.n	80040ac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800404c:	2b00      	cmp	r3, #0
 800404e:	d108      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x7e>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	0e9b      	lsrs	r3, r3, #26
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2201      	movs	r2, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	e01d      	b.n	800409e <HAL_ADC_ConfigChannel+0xba>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800407a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800407e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004086:	2320      	movs	r3, #32
 8004088:	e004      	b.n	8004094 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800408a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2201      	movs	r2, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	69d1      	ldr	r1, [r2, #28]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	f7fe fe54 	bl	8002d66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff f816 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 80040c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff f837 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 80040d6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 8270 	bne.w	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f040 826b 	bne.w	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fe feaf 	bl	8002e5e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6c      	ldr	r2, [pc, #432]	@ (80042b8 <HAL_ADC_ConfigChannel+0x2d4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10d      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	08db      	lsrs	r3, r3, #3
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004124:	e032      	b.n	800418c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004126:	4b65      	ldr	r3, [pc, #404]	@ (80042bc <HAL_ADC_ConfigChannel+0x2d8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800412e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004132:	d10b      	bne.n	800414c <HAL_ADC_ConfigChannel+0x168>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	e01d      	b.n	8004188 <HAL_ADC_ConfigChannel+0x1a4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x18e>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	e00a      	b.n	8004188 <HAL_ADC_ConfigChannel+0x1a4>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d048      	beq.n	8004226 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6919      	ldr	r1, [r3, #16]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041a4:	f7fe fcda 	bl	8002b5c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a42      	ldr	r2, [pc, #264]	@ (80042b8 <HAL_ADC_ConfigChannel+0x2d4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d119      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6919      	ldr	r1, [r3, #16]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	461a      	mov	r2, r3
 80041c0:	f7fe fd72 	bl	8002ca8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6919      	ldr	r1, [r3, #16]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1f8>
 80041d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041da:	e000      	b.n	80041de <HAL_ADC_ConfigChannel+0x1fa>
 80041dc:	2300      	movs	r3, #0
 80041de:	461a      	mov	r2, r3
 80041e0:	f7fe fd40 	bl	8002c64 <LL_ADC_SetOffsetSaturation>
 80041e4:	e1ee      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6919      	ldr	r1, [r3, #16]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x21a>
 80041f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80041fc:	e000      	b.n	8004200 <HAL_ADC_ConfigChannel+0x21c>
 80041fe:	2300      	movs	r3, #0
 8004200:	461a      	mov	r2, r3
 8004202:	f7fe fd0d 	bl	8002c20 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6919      	ldr	r1, [r3, #16]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	7e1b      	ldrb	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d102      	bne.n	800421c <HAL_ADC_ConfigChannel+0x238>
 8004216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800421a:	e000      	b.n	800421e <HAL_ADC_ConfigChannel+0x23a>
 800421c:	2300      	movs	r3, #0
 800421e:	461a      	mov	r2, r3
 8004220:	f7fe fce4 	bl	8002bec <LL_ADC_SetDataRightShift>
 8004224:	e1ce      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a23      	ldr	r2, [pc, #140]	@ (80042b8 <HAL_ADC_ConfigChannel+0x2d4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	f040 8181 	bne.w	8004534 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fcc1 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 800423e:	4603      	mov	r3, r0
 8004240:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_ADC_ConfigChannel+0x27a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fcb6 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	0e9b      	lsrs	r3, r3, #26
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	e01e      	b.n	800429c <HAL_ADC_ConfigChannel+0x2b8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fcab 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 800426a:	4603      	mov	r3, r0
 800426c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 800427c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004280:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8004284:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 800428c:	2320      	movs	r3, #32
 800428e:	e004      	b.n	800429a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004290:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x2dc>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0e9b      	lsrs	r3, r3, #26
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	e01e      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x30e>
 80042b4:	47ff0000 	.word	0x47ff0000
 80042b8:	58026000 	.word	0x58026000
 80042bc:	5c001000 	.word	0x5c001000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80042d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80042d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80042dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80042e4:	2320      	movs	r3, #32
 80042e6:	e004      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80042e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d106      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe fcf4 	bl	8002cec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fc58 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8004310:	4603      	mov	r3, r0
 8004312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x34c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fc4d 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	f003 021f 	and.w	r2, r3, #31
 800432e:	e01e      	b.n	800436e <HAL_ADC_ConfigChannel+0x38a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fc42 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800434e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e004      	b.n	800436c <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	461a      	mov	r2, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x3a2>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0e9b      	lsrs	r3, r3, #26
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	e018      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x3d4>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800439a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800439e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80043a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80043aa:	2320      	movs	r3, #32
 80043ac:	e004      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80043ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d106      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fc91 	bl	8002cec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2102      	movs	r1, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fbf5 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x412>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2102      	movs	r1, #2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fbea 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 80043ec:	4603      	mov	r3, r0
 80043ee:	0e9b      	lsrs	r3, r3, #26
 80043f0:	f003 021f 	and.w	r2, r3, #31
 80043f4:	e01e      	b.n	8004434 <HAL_ADC_ConfigChannel+0x450>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2102      	movs	r1, #2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fbdf 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8004402:	4603      	mov	r3, r0
 8004404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004418:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800441c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004424:	2320      	movs	r3, #32
 8004426:	e004      	b.n	8004432 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800442c:	fab3 f383 	clz	r3, r3
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_ADC_ConfigChannel+0x468>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e9b      	lsrs	r3, r3, #26
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	e014      	b.n	8004476 <HAL_ADC_ConfigChannel+0x492>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800445a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800445c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004460:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004468:	2320      	movs	r3, #32
 800446a:	e004      	b.n	8004476 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800446c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	429a      	cmp	r2, r3
 8004478:	d106      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fc32 	bl	8002cec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2103      	movs	r1, #3
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fb96 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 8004494:	4603      	mov	r3, r0
 8004496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x4d0>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2103      	movs	r1, #3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fb8b 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 80044aa:	4603      	mov	r3, r0
 80044ac:	0e9b      	lsrs	r3, r3, #26
 80044ae:	f003 021f 	and.w	r2, r3, #31
 80044b2:	e017      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x500>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2103      	movs	r1, #3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fb80 	bl	8002bc0 <LL_ADC_GetOffsetChannel>
 80044c0:	4603      	mov	r3, r0
 80044c2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80044cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ce:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80044d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e003      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80044da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x518>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0e9b      	lsrs	r3, r3, #26
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	e011      	b.n	8004520 <HAL_ADC_ConfigChannel+0x53c>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004504:	fa93 f3a3 	rbit	r3, r3
 8004508:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800450a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800450c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800450e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004514:	2320      	movs	r3, #32
 8004516:	e003      	b.n	8004520 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	429a      	cmp	r2, r3
 8004522:	d14f      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2200      	movs	r2, #0
 800452a:	2103      	movs	r1, #3
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fbdd 	bl	8002cec <LL_ADC_SetOffsetState>
 8004532:	e047      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	069b      	lsls	r3, r3, #26
 8004544:	429a      	cmp	r2, r3
 8004546:	d107      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004556:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800455e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	069b      	lsls	r3, r3, #26
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800457a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004582:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	069b      	lsls	r3, r3, #26
 800458c:	429a      	cmp	r2, r3
 800458e:	d107      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800459e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	069b      	lsls	r3, r3, #26
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d107      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80045c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fd45 	bl	8003058 <LL_ADC_IsEnabled>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 8219 	bne.w	8004a08 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f7fe fc66 	bl	8002eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4aa1      	ldr	r2, [pc, #644]	@ (8004874 <HAL_ADC_ConfigChannel+0x890>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f040 812e 	bne.w	8004850 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_ADC_ConfigChannel+0x638>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	3301      	adds	r3, #1
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2b09      	cmp	r3, #9
 8004612:	bf94      	ite	ls
 8004614:	2301      	movls	r3, #1
 8004616:	2300      	movhi	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e019      	b.n	8004650 <HAL_ADC_ConfigChannel+0x66c>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004624:	fa93 f3a3 	rbit	r3, r3
 8004628:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800462a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800462c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800462e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004634:	2320      	movs	r3, #32
 8004636:	e003      	b.n	8004640 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	3301      	adds	r3, #1
 8004642:	f003 031f 	and.w	r3, r3, #31
 8004646:	2b09      	cmp	r3, #9
 8004648:	bf94      	ite	ls
 800464a:	2301      	movls	r3, #1
 800464c:	2300      	movhi	r3, #0
 800464e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004650:	2b00      	cmp	r3, #0
 8004652:	d079      	beq.n	8004748 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x68c>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0e9b      	lsrs	r3, r3, #26
 8004666:	3301      	adds	r3, #1
 8004668:	069b      	lsls	r3, r3, #26
 800466a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800466e:	e015      	b.n	800469c <HAL_ADC_ConfigChannel+0x6b8>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800467e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004680:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004688:	2320      	movs	r3, #32
 800468a:	e003      	b.n	8004694 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800468c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800468e:	fab3 f383 	clz	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	3301      	adds	r3, #1
 8004696:	069b      	lsls	r3, r3, #26
 8004698:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x6d8>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0e9b      	lsrs	r3, r3, #26
 80046ae:	3301      	adds	r3, #1
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	e017      	b.n	80046ec <HAL_ADC_ConfigChannel+0x708>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80046ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80046ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80046d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	ea42 0103 	orr.w	r1, r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x72e>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	3301      	adds	r3, #1
 8004704:	f003 021f 	and.w	r2, r3, #31
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	051b      	lsls	r3, r3, #20
 8004710:	e018      	b.n	8004744 <HAL_ADC_ConfigChannel+0x760>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800472a:	2320      	movs	r3, #32
 800472c:	e003      	b.n	8004736 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800472e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
 8004736:	3301      	adds	r3, #1
 8004738:	f003 021f 	and.w	r2, r3, #31
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004744:	430b      	orrs	r3, r1
 8004746:	e07e      	b.n	8004846 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x780>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	0e9b      	lsrs	r3, r3, #26
 800475a:	3301      	adds	r3, #1
 800475c:	069b      	lsls	r3, r3, #26
 800475e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004762:	e015      	b.n	8004790 <HAL_ADC_ConfigChannel+0x7ac>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e003      	b.n	8004788 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	3301      	adds	r3, #1
 800478a:	069b      	lsls	r3, r3, #26
 800478c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x7cc>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0e9b      	lsrs	r3, r3, #26
 80047a2:	3301      	adds	r3, #1
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	e017      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x7fc>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	61bb      	str	r3, [r7, #24]
  return result;
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e003      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2101      	movs	r1, #1
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	ea42 0103 	orr.w	r1, r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10d      	bne.n	800480c <HAL_ADC_ConfigChannel+0x828>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	0e9b      	lsrs	r3, r3, #26
 80047f6:	3301      	adds	r3, #1
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	3b1e      	subs	r3, #30
 8004804:	051b      	lsls	r3, r3, #20
 8004806:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800480a:	e01b      	b.n	8004844 <HAL_ADC_ConfigChannel+0x860>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	60fb      	str	r3, [r7, #12]
  return result;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004824:	2320      	movs	r3, #32
 8004826:	e003      	b.n	8004830 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	3301      	adds	r3, #1
 8004832:	f003 021f 	and.w	r2, r3, #31
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	3b1e      	subs	r3, #30
 800483e:	051b      	lsls	r3, r3, #20
 8004840:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004844:	430b      	orrs	r3, r1
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	4619      	mov	r1, r3
 800484c:	f7fe fb07 	bl	8002e5e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f280 80d7 	bge.w	8004a08 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a06      	ldr	r2, [pc, #24]	@ (8004878 <HAL_ADC_ConfigChannel+0x894>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_ADC_ConfigChannel+0x88a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a04      	ldr	r2, [pc, #16]	@ (800487c <HAL_ADC_ConfigChannel+0x898>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10a      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x8a0>
 800486e:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <HAL_ADC_ConfigChannel+0x89c>)
 8004870:	e009      	b.n	8004886 <HAL_ADC_ConfigChannel+0x8a2>
 8004872:	bf00      	nop
 8004874:	47ff0000 	.word	0x47ff0000
 8004878:	40022000 	.word	0x40022000
 800487c:	40022100 	.word	0x40022100
 8004880:	40022300 	.word	0x40022300
 8004884:	4b65      	ldr	r3, [pc, #404]	@ (8004a1c <HAL_ADC_ConfigChannel+0xa38>)
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe f95a 	bl	8002b40 <LL_ADC_GetCommonPathInternalCh>
 800488c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a62      	ldr	r2, [pc, #392]	@ (8004a20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_ADC_ConfigChannel+0x8c0>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a61      	ldr	r2, [pc, #388]	@ (8004a24 <HAL_ADC_ConfigChannel+0xa40>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10e      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x8de>
 80048a4:	485e      	ldr	r0, [pc, #376]	@ (8004a20 <HAL_ADC_ConfigChannel+0xa3c>)
 80048a6:	f7fe fbd7 	bl	8003058 <LL_ADC_IsEnabled>
 80048aa:	4604      	mov	r4, r0
 80048ac:	485d      	ldr	r0, [pc, #372]	@ (8004a24 <HAL_ADC_ConfigChannel+0xa40>)
 80048ae:	f7fe fbd3 	bl	8003058 <LL_ADC_IsEnabled>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4323      	orrs	r3, r4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e008      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x8f0>
 80048c2:	4859      	ldr	r0, [pc, #356]	@ (8004a28 <HAL_ADC_ConfigChannel+0xa44>)
 80048c4:	f7fe fbc8 	bl	8003058 <LL_ADC_IsEnabled>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8084 	beq.w	80049e2 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a53      	ldr	r2, [pc, #332]	@ (8004a2c <HAL_ADC_ConfigChannel+0xa48>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d132      	bne.n	800494a <HAL_ADC_ConfigChannel+0x966>
 80048e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d12c      	bne.n	800494a <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004a28 <HAL_ADC_ConfigChannel+0xa44>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f040 8086 	bne.w	8004a08 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a47      	ldr	r2, [pc, #284]	@ (8004a20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_ADC_ConfigChannel+0x92c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a46      	ldr	r2, [pc, #280]	@ (8004a24 <HAL_ADC_ConfigChannel+0xa40>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x930>
 8004910:	4a47      	ldr	r2, [pc, #284]	@ (8004a30 <HAL_ADC_ConfigChannel+0xa4c>)
 8004912:	e000      	b.n	8004916 <HAL_ADC_ConfigChannel+0x932>
 8004914:	4a41      	ldr	r2, [pc, #260]	@ (8004a1c <HAL_ADC_ConfigChannel+0xa38>)
 8004916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800491a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f7fe f8fa 	bl	8002b1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004926:	4b43      	ldr	r3, [pc, #268]	@ (8004a34 <HAL_ADC_ConfigChannel+0xa50>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	099b      	lsrs	r3, r3, #6
 800492c:	4a42      	ldr	r2, [pc, #264]	@ (8004a38 <HAL_ADC_ConfigChannel+0xa54>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	099b      	lsrs	r3, r3, #6
 8004934:	3301      	adds	r3, #1
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800493a:	e002      	b.n	8004942 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	3b01      	subs	r3, #1
 8004940:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f9      	bne.n	800493c <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004948:	e05e      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a3c <HAL_ADC_ConfigChannel+0xa58>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d120      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x9b2>
 8004954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11a      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a30      	ldr	r2, [pc, #192]	@ (8004a28 <HAL_ADC_ConfigChannel+0xa44>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d14e      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a20 <HAL_ADC_ConfigChannel+0xa3c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_ADC_ConfigChannel+0x99a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a2a      	ldr	r2, [pc, #168]	@ (8004a24 <HAL_ADC_ConfigChannel+0xa40>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x99e>
 800497e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a30 <HAL_ADC_ConfigChannel+0xa4c>)
 8004980:	e000      	b.n	8004984 <HAL_ADC_ConfigChannel+0x9a0>
 8004982:	4a26      	ldr	r2, [pc, #152]	@ (8004a1c <HAL_ADC_ConfigChannel+0xa38>)
 8004984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004988:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe f8c3 	bl	8002b1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004994:	e038      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a29      	ldr	r2, [pc, #164]	@ (8004a40 <HAL_ADC_ConfigChannel+0xa5c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d133      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
 80049a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d12d      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <HAL_ADC_ConfigChannel+0xa44>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d128      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a19      	ldr	r2, [pc, #100]	@ (8004a20 <HAL_ADC_ConfigChannel+0xa3c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x9e6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a17      	ldr	r2, [pc, #92]	@ (8004a24 <HAL_ADC_ConfigChannel+0xa40>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x9ea>
 80049ca:	4a19      	ldr	r2, [pc, #100]	@ (8004a30 <HAL_ADC_ConfigChannel+0xa4c>)
 80049cc:	e000      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x9ec>
 80049ce:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <HAL_ADC_ConfigChannel+0xa38>)
 80049d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe f89d 	bl	8002b1a <LL_ADC_SetCommonPathInternalCh>
 80049e0:	e012      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e6:	f043 0220 	orr.w	r2, r3, #32
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80049f4:	e008      	b.n	8004a08 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a10:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	37e4      	adds	r7, #228	@ 0xe4
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}
 8004a1c:	58026300 	.word	0x58026300
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40022100 	.word	0x40022100
 8004a28:	58026000 	.word	0x58026000
 8004a2c:	c7520000 	.word	0xc7520000
 8004a30:	40022300 	.word	0x40022300
 8004a34:	2400000c 	.word	0x2400000c
 8004a38:	053e2d63 	.word	0x053e2d63
 8004a3c:	c3210000 	.word	0xc3210000
 8004a40:	cb840000 	.word	0xcb840000

08004a44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fb4a 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8004a60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fb6c 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 8004a6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8098 	beq.w	8004bac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02a      	beq.n	8004ae0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7e5b      	ldrb	r3, [r3, #25]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d126      	bne.n	8004ae0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	7e1b      	ldrb	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d122      	bne.n	8004ae0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004a9e:	e014      	b.n	8004aca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	4a45      	ldr	r2, [pc, #276]	@ (8004bb8 <ADC_ConversionStop+0x174>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d90d      	bls.n	8004ac4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aac:	f043 0210 	orr.w	r2, r3, #16
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ab8:	f043 0201 	orr.w	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e074      	b.n	8004bae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d1e3      	bne.n	8004aa0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2240      	movs	r2, #64	@ 0x40
 8004ade:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d014      	beq.n	8004b10 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fb02 	bl	80030f4 <LL_ADC_REG_IsConversionOngoing>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00c      	beq.n	8004b10 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fabf 	bl	800307e <LL_ADC_IsDisableOngoing>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fade 	bl	80030cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d014      	beq.n	8004b40 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe fb12 	bl	8003144 <LL_ADC_INJ_IsConversionOngoing>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe faa7 	bl	800307e <LL_ADC_IsDisableOngoing>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe faee 	bl	800311c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d005      	beq.n	8004b52 <ADC_ConversionStop+0x10e>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d105      	bne.n	8004b58 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	617b      	str	r3, [r7, #20]
        break;
 8004b50:	e005      	b.n	8004b5e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004b52:	2308      	movs	r3, #8
 8004b54:	617b      	str	r3, [r7, #20]
        break;
 8004b56:	e002      	b.n	8004b5e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004b58:	2304      	movs	r3, #4
 8004b5a:	617b      	str	r3, [r7, #20]
        break;
 8004b5c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004b5e:	f7fd ff99 	bl	8002a94 <HAL_GetTick>
 8004b62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b64:	e01b      	b.n	8004b9e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004b66:	f7fd ff95 	bl	8002a94 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d914      	bls.n	8004b9e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b86:	f043 0210 	orr.w	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b92:	f043 0201 	orr.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e007      	b.n	8004bae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1dc      	bne.n	8004b66 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	000cdbff 	.word	0x000cdbff

08004bbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe fa45 	bl	8003058 <LL_ADC_IsEnabled>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d16e      	bne.n	8004cb2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	4b38      	ldr	r3, [pc, #224]	@ (8004cbc <ADC_Enable+0x100>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00d      	beq.n	8004bfe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be6:	f043 0210 	orr.w	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e05a      	b.n	8004cb4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe fa00 	bl	8003008 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c08:	f7fd ff44 	bl	8002a94 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2b      	ldr	r2, [pc, #172]	@ (8004cc0 <ADC_Enable+0x104>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <ADC_Enable+0x66>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a29      	ldr	r2, [pc, #164]	@ (8004cc4 <ADC_Enable+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d101      	bne.n	8004c26 <ADC_Enable+0x6a>
 8004c22:	4b29      	ldr	r3, [pc, #164]	@ (8004cc8 <ADC_Enable+0x10c>)
 8004c24:	e000      	b.n	8004c28 <ADC_Enable+0x6c>
 8004c26:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <ADC_Enable+0x110>)
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe f983 	bl	8002f34 <LL_ADC_GetMultimode>
 8004c2e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a23      	ldr	r2, [pc, #140]	@ (8004cc4 <ADC_Enable+0x108>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d002      	beq.n	8004c40 <ADC_Enable+0x84>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	e000      	b.n	8004c42 <ADC_Enable+0x86>
 8004c40:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <ADC_Enable+0x104>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d02c      	beq.n	8004ca4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d130      	bne.n	8004cb2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c50:	e028      	b.n	8004ca4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe f9fe 	bl	8003058 <LL_ADC_IsEnabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe f9ce 	bl	8003008 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c6c:	f7fd ff12 	bl	8002a94 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d914      	bls.n	8004ca4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d00d      	beq.n	8004ca4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8c:	f043 0210 	orr.w	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e007      	b.n	8004cb4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d1cf      	bne.n	8004c52 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	8000003f 	.word	0x8000003f
 8004cc0:	40022000 	.word	0x40022000
 8004cc4:	40022100 	.word	0x40022100
 8004cc8:	40022300 	.word	0x40022300
 8004ccc:	58026300 	.word	0x58026300

08004cd0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fe f9ce 	bl	800307e <LL_ADC_IsDisableOngoing>
 8004ce2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe f9b5 	bl	8003058 <LL_ADC_IsEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d047      	beq.n	8004d84 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d144      	bne.n	8004d84 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030d 	and.w	r3, r3, #13
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10c      	bne.n	8004d22 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f98f 	bl	8003030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2203      	movs	r2, #3
 8004d18:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d1a:	f7fd febb 	bl	8002a94 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d20:	e029      	b.n	8004d76 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d26:	f043 0210 	orr.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e023      	b.n	8004d86 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d3e:	f7fd fea9 	bl	8002a94 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d914      	bls.n	8004d76 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d5e:	f043 0210 	orr.w	r2, r3, #16
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e007      	b.n	8004d86 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1dc      	bne.n	8004d3e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d14b      	bne.n	8004e40 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d021      	beq.n	8004e06 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fd ffba 	bl	8002d40 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d032      	beq.n	8004e38 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d12b      	bne.n	8004e38 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d11f      	bne.n	8004e38 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e04:	e018      	b.n	8004e38 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d111      	bne.n	8004e38 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7fc fc15 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e3e:	e00e      	b.n	8004e5e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff f8bf 	bl	8003fd0 <HAL_ADC_ErrorCallback>
}
 8004e52:	e004      	b.n	8004e5e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	4798      	blx	r3
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff f897 	bl	8003fa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ea0:	f043 0204 	orr.w	r2, r3, #4
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff f891 	bl	8003fd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6c      	ldr	r2, [pc, #432]	@ (8005078 <ADC_ConfigureBoostMode+0x1c0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d004      	beq.n	8004ed4 <ADC_ConfigureBoostMode+0x1c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6b      	ldr	r2, [pc, #428]	@ (800507c <ADC_ConfigureBoostMode+0x1c4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d109      	bne.n	8004ee8 <ADC_ConfigureBoostMode+0x30>
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8005080 <ADC_ConfigureBoostMode+0x1c8>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e008      	b.n	8004efa <ADC_ConfigureBoostMode+0x42>
 8004ee8:	4b66      	ldr	r3, [pc, #408]	@ (8005084 <ADC_ConfigureBoostMode+0x1cc>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01c      	beq.n	8004f38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004efe:	f004 fec7 	bl	8009c90 <HAL_RCC_GetHCLKFreq>
 8004f02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f0c:	d010      	beq.n	8004f30 <ADC_ConfigureBoostMode+0x78>
 8004f0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f12:	d873      	bhi.n	8004ffc <ADC_ConfigureBoostMode+0x144>
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f18:	d002      	beq.n	8004f20 <ADC_ConfigureBoostMode+0x68>
 8004f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f1e:	d16d      	bne.n	8004ffc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	60fb      	str	r3, [r7, #12]
        break;
 8004f2e:	e068      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	60fb      	str	r3, [r7, #12]
        break;
 8004f36:	e064      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f38:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004f3c:	f04f 0100 	mov.w	r1, #0
 8004f40:	f006 f8a2 	bl	800b088 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f4e:	d051      	beq.n	8004ff4 <ADC_ConfigureBoostMode+0x13c>
 8004f50:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004f54:	d854      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f56:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f5a:	d047      	beq.n	8004fec <ADC_ConfigureBoostMode+0x134>
 8004f5c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004f60:	d84e      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f62:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f66:	d03d      	beq.n	8004fe4 <ADC_ConfigureBoostMode+0x12c>
 8004f68:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004f6c:	d848      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f72:	d033      	beq.n	8004fdc <ADC_ConfigureBoostMode+0x124>
 8004f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f78:	d842      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f7a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004f7e:	d029      	beq.n	8004fd4 <ADC_ConfigureBoostMode+0x11c>
 8004f80:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004f84:	d83c      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f86:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f8a:	d01a      	beq.n	8004fc2 <ADC_ConfigureBoostMode+0x10a>
 8004f8c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004f90:	d836      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f92:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f96:	d014      	beq.n	8004fc2 <ADC_ConfigureBoostMode+0x10a>
 8004f98:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004f9c:	d830      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa2:	d00e      	beq.n	8004fc2 <ADC_ConfigureBoostMode+0x10a>
 8004fa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa8:	d82a      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004faa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fae:	d008      	beq.n	8004fc2 <ADC_ConfigureBoostMode+0x10a>
 8004fb0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fb4:	d824      	bhi.n	8005000 <ADC_ConfigureBoostMode+0x148>
 8004fb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fba:	d002      	beq.n	8004fc2 <ADC_ConfigureBoostMode+0x10a>
 8004fbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fc0:	d11e      	bne.n	8005000 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	0c9b      	lsrs	r3, r3, #18
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	60fb      	str	r3, [r7, #12]
        break;
 8004fd2:	e016      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	60fb      	str	r3, [r7, #12]
        break;
 8004fda:	e012      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	60fb      	str	r3, [r7, #12]
        break;
 8004fe2:	e00e      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	099b      	lsrs	r3, r3, #6
 8004fe8:	60fb      	str	r3, [r7, #12]
        break;
 8004fea:	e00a      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	60fb      	str	r3, [r7, #12]
        break;
 8004ff2:	e006      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	60fb      	str	r3, [r7, #12]
        break;
 8004ffa:	e002      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005000:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <ADC_ConfigureBoostMode+0x1d0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d808      	bhi.n	8005022 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800501e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005020:	e025      	b.n	800506e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a19      	ldr	r2, [pc, #100]	@ (800508c <ADC_ConfigureBoostMode+0x1d4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d80a      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	e016      	b.n	800506e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a13      	ldr	r2, [pc, #76]	@ (8005090 <ADC_ConfigureBoostMode+0x1d8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d80a      	bhi.n	800505e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	e007      	b.n	800506e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800506c:	609a      	str	r2, [r3, #8]
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40022000 	.word	0x40022000
 800507c:	40022100 	.word	0x40022100
 8005080:	40022300 	.word	0x40022300
 8005084:	58026300 	.word	0x58026300
 8005088:	005f5e10 	.word	0x005f5e10
 800508c:	00bebc20 	.word	0x00bebc20
 8005090:	017d7840 	.word	0x017d7840

08005094 <LL_ADC_IsEnabled>:
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <LL_ADC_IsEnabled+0x18>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <LL_ADC_IsEnabled+0x1a>
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_ADC_REG_IsConversionOngoing>:
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d101      	bne.n	80050d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b0a3      	sub	sp, #140	@ 0x8c
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800515e:	2302      	movs	r3, #2
 8005160:	e0c1      	b.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800516a:	2300      	movs	r3, #0
 800516c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800516e:	2300      	movs	r3, #0
 8005170:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5e      	ldr	r2, [pc, #376]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d102      	bne.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800517c:	4b5d      	ldr	r3, [pc, #372]	@ (80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e001      	b.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0a0      	b.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff87 	bl	80050ba <LL_ADC_REG_IsConversionOngoing>
 80051ac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff80 	bl	80050ba <LL_ADC_REG_IsConversionOngoing>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8081 	bne.w	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d17c      	bne.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a48      	ldr	r2, [pc, #288]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a46      	ldr	r2, [pc, #280]	@ (80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80051de:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051e0:	e000      	b.n	80051e4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80051e2:	4b46      	ldr	r3, [pc, #280]	@ (80052fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051e4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d039      	beq.n	8005262 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80051ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a3a      	ldr	r2, [pc, #232]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a39      	ldr	r2, [pc, #228]	@ (80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10e      	bne.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005214:	4836      	ldr	r0, [pc, #216]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005216:	f7ff ff3d 	bl	8005094 <LL_ADC_IsEnabled>
 800521a:	4604      	mov	r4, r0
 800521c:	4835      	ldr	r0, [pc, #212]	@ (80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800521e:	f7ff ff39 	bl	8005094 <LL_ADC_IsEnabled>
 8005222:	4603      	mov	r3, r0
 8005224:	4323      	orrs	r3, r4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e008      	b.n	8005244 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005232:	4833      	ldr	r0, [pc, #204]	@ (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005234:	f7ff ff2e 	bl	8005094 <LL_ADC_IsEnabled>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d047      	beq.n	80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	4b2d      	ldr	r3, [pc, #180]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800524e:	4013      	ands	r3, r2
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	6811      	ldr	r1, [r2, #0]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	6892      	ldr	r2, [r2, #8]
 8005258:	430a      	orrs	r2, r1
 800525a:	431a      	orrs	r2, r3
 800525c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800525e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005260:	e03a      	b.n	80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800526a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800526c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1f      	ldr	r2, [pc, #124]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10e      	bne.n	80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005282:	481b      	ldr	r0, [pc, #108]	@ (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005284:	f7ff ff06 	bl	8005094 <LL_ADC_IsEnabled>
 8005288:	4604      	mov	r4, r0
 800528a:	481a      	ldr	r0, [pc, #104]	@ (80052f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800528c:	f7ff ff02 	bl	8005094 <LL_ADC_IsEnabled>
 8005290:	4603      	mov	r3, r0
 8005292:	4323      	orrs	r3, r4
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e008      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80052a0:	4817      	ldr	r0, [pc, #92]	@ (8005300 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80052a2:	f7ff fef7 	bl	8005094 <LL_ADC_IsEnabled>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	4b12      	ldr	r3, [pc, #72]	@ (8005304 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052bc:	4013      	ands	r3, r2
 80052be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80052c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052c2:	e009      	b.n	80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c8:	f043 0220 	orr.w	r2, r3, #32
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80052d6:	e000      	b.n	80052da <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80052e2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	378c      	adds	r7, #140	@ 0x8c
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd90      	pop	{r4, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40022000 	.word	0x40022000
 80052f4:	40022100 	.word	0x40022100
 80052f8:	40022300 	.word	0x40022300
 80052fc:	58026300 	.word	0x58026300
 8005300:	58026000 	.word	0x58026000
 8005304:	fffff0e0 	.word	0xfffff0e0

08005308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <__NVIC_SetPriorityGrouping+0x40>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005324:	4013      	ands	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005330:	4b06      	ldr	r3, [pc, #24]	@ (800534c <__NVIC_SetPriorityGrouping+0x44>)
 8005332:	4313      	orrs	r3, r2
 8005334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005336:	4a04      	ldr	r2, [pc, #16]	@ (8005348 <__NVIC_SetPriorityGrouping+0x40>)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	60d3      	str	r3, [r2, #12]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	e000ed00 	.word	0xe000ed00
 800534c:	05fa0000 	.word	0x05fa0000

08005350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005354:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <__NVIC_GetPriorityGrouping+0x18>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	f003 0307 	and.w	r3, r3, #7
}
 800535e:	4618      	mov	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537a:	2b00      	cmp	r3, #0
 800537c:	db0b      	blt.n	8005396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	f003 021f 	and.w	r2, r3, #31
 8005384:	4907      	ldr	r1, [pc, #28]	@ (80053a4 <__NVIC_EnableIRQ+0x38>)
 8005386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2001      	movs	r0, #1
 800538e:	fa00 f202 	lsl.w	r2, r0, r2
 8005392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	e000e100 	.word	0xe000e100

080053a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	6039      	str	r1, [r7, #0]
 80053b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	db0a      	blt.n	80053d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	490c      	ldr	r1, [pc, #48]	@ (80053f4 <__NVIC_SetPriority+0x4c>)
 80053c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053c6:	0112      	lsls	r2, r2, #4
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	440b      	add	r3, r1
 80053cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053d0:	e00a      	b.n	80053e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4908      	ldr	r1, [pc, #32]	@ (80053f8 <__NVIC_SetPriority+0x50>)
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	3b04      	subs	r3, #4
 80053e0:	0112      	lsls	r2, r2, #4
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	440b      	add	r3, r1
 80053e6:	761a      	strb	r2, [r3, #24]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000e100 	.word	0xe000e100
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	@ 0x24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f1c3 0307 	rsb	r3, r3, #7
 8005416:	2b04      	cmp	r3, #4
 8005418:	bf28      	it	cs
 800541a:	2304      	movcs	r3, #4
 800541c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3304      	adds	r3, #4
 8005422:	2b06      	cmp	r3, #6
 8005424:	d902      	bls.n	800542c <NVIC_EncodePriority+0x30>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3b03      	subs	r3, #3
 800542a:	e000      	b.n	800542e <NVIC_EncodePriority+0x32>
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43da      	mvns	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	401a      	ands	r2, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005444:	f04f 31ff 	mov.w	r1, #4294967295
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	43d9      	mvns	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005454:	4313      	orrs	r3, r2
         );
}
 8005456:	4618      	mov	r0, r3
 8005458:	3724      	adds	r7, #36	@ 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3b01      	subs	r3, #1
 8005470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005474:	d301      	bcc.n	800547a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005476:	2301      	movs	r3, #1
 8005478:	e00f      	b.n	800549a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800547a:	4a0a      	ldr	r2, [pc, #40]	@ (80054a4 <SysTick_Config+0x40>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3b01      	subs	r3, #1
 8005480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005482:	210f      	movs	r1, #15
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	f7ff ff8e 	bl	80053a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800548c:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <SysTick_Config+0x40>)
 800548e:	2200      	movs	r2, #0
 8005490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005492:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <SysTick_Config+0x40>)
 8005494:	2207      	movs	r2, #7
 8005496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	e000e010 	.word	0xe000e010

080054a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff29 	bl	8005308 <__NVIC_SetPriorityGrouping>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b086      	sub	sp, #24
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	4603      	mov	r3, r0
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054cc:	f7ff ff40 	bl	8005350 <__NVIC_GetPriorityGrouping>
 80054d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f7ff ff90 	bl	80053fc <NVIC_EncodePriority>
 80054dc:	4602      	mov	r2, r0
 80054de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054e2:	4611      	mov	r1, r2
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff ff5f 	bl	80053a8 <__NVIC_SetPriority>
}
 80054ea:	bf00      	nop
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	4603      	mov	r3, r0
 80054fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff33 	bl	800536c <__NVIC_EnableIRQ>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff ffa4 	bl	8005464 <SysTick_Config>
 800551c:	4603      	mov	r3, r0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005530:	f7fd fab0 	bl	8002a94 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e312      	b.n	8005b66 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a66      	ldr	r2, [pc, #408]	@ (80056e0 <HAL_DMA_Init+0x1b8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d04a      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a65      	ldr	r2, [pc, #404]	@ (80056e4 <HAL_DMA_Init+0x1bc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d045      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a63      	ldr	r2, [pc, #396]	@ (80056e8 <HAL_DMA_Init+0x1c0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d040      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a62      	ldr	r2, [pc, #392]	@ (80056ec <HAL_DMA_Init+0x1c4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d03b      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a60      	ldr	r2, [pc, #384]	@ (80056f0 <HAL_DMA_Init+0x1c8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d036      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a5f      	ldr	r2, [pc, #380]	@ (80056f4 <HAL_DMA_Init+0x1cc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d031      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5d      	ldr	r2, [pc, #372]	@ (80056f8 <HAL_DMA_Init+0x1d0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02c      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a5c      	ldr	r2, [pc, #368]	@ (80056fc <HAL_DMA_Init+0x1d4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d027      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a5a      	ldr	r2, [pc, #360]	@ (8005700 <HAL_DMA_Init+0x1d8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d022      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a59      	ldr	r2, [pc, #356]	@ (8005704 <HAL_DMA_Init+0x1dc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01d      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a57      	ldr	r2, [pc, #348]	@ (8005708 <HAL_DMA_Init+0x1e0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d018      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a56      	ldr	r2, [pc, #344]	@ (800570c <HAL_DMA_Init+0x1e4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a54      	ldr	r2, [pc, #336]	@ (8005710 <HAL_DMA_Init+0x1e8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a53      	ldr	r2, [pc, #332]	@ (8005714 <HAL_DMA_Init+0x1ec>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a51      	ldr	r2, [pc, #324]	@ (8005718 <HAL_DMA_Init+0x1f0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_DMA_Init+0xb8>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a50      	ldr	r2, [pc, #320]	@ (800571c <HAL_DMA_Init+0x1f4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_DMA_Init+0xbc>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_DMA_Init+0xbe>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 813c 	beq.w	8005864 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a37      	ldr	r2, [pc, #220]	@ (80056e0 <HAL_DMA_Init+0x1b8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d04a      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a36      	ldr	r2, [pc, #216]	@ (80056e4 <HAL_DMA_Init+0x1bc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d045      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a34      	ldr	r2, [pc, #208]	@ (80056e8 <HAL_DMA_Init+0x1c0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d040      	beq.n	800569c <HAL_DMA_Init+0x174>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a33      	ldr	r2, [pc, #204]	@ (80056ec <HAL_DMA_Init+0x1c4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d03b      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a31      	ldr	r2, [pc, #196]	@ (80056f0 <HAL_DMA_Init+0x1c8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d036      	beq.n	800569c <HAL_DMA_Init+0x174>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a30      	ldr	r2, [pc, #192]	@ (80056f4 <HAL_DMA_Init+0x1cc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d031      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <HAL_DMA_Init+0x1d0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02c      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2d      	ldr	r2, [pc, #180]	@ (80056fc <HAL_DMA_Init+0x1d4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d027      	beq.n	800569c <HAL_DMA_Init+0x174>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2b      	ldr	r2, [pc, #172]	@ (8005700 <HAL_DMA_Init+0x1d8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d022      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2a      	ldr	r2, [pc, #168]	@ (8005704 <HAL_DMA_Init+0x1dc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d01d      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <HAL_DMA_Init+0x1e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d018      	beq.n	800569c <HAL_DMA_Init+0x174>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a27      	ldr	r2, [pc, #156]	@ (800570c <HAL_DMA_Init+0x1e4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d013      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a25      	ldr	r2, [pc, #148]	@ (8005710 <HAL_DMA_Init+0x1e8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00e      	beq.n	800569c <HAL_DMA_Init+0x174>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a24      	ldr	r2, [pc, #144]	@ (8005714 <HAL_DMA_Init+0x1ec>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d009      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a22      	ldr	r2, [pc, #136]	@ (8005718 <HAL_DMA_Init+0x1f0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_DMA_Init+0x174>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a21      	ldr	r2, [pc, #132]	@ (800571c <HAL_DMA_Init+0x1f4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d108      	bne.n	80056ae <HAL_DMA_Init+0x186>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e007      	b.n	80056be <HAL_DMA_Init+0x196>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056be:	e02f      	b.n	8005720 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056c0:	f7fd f9e8 	bl	8002a94 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	d928      	bls.n	8005720 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2203      	movs	r2, #3
 80056d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e242      	b.n	8005b66 <HAL_DMA_Init+0x63e>
 80056e0:	40020010 	.word	0x40020010
 80056e4:	40020028 	.word	0x40020028
 80056e8:	40020040 	.word	0x40020040
 80056ec:	40020058 	.word	0x40020058
 80056f0:	40020070 	.word	0x40020070
 80056f4:	40020088 	.word	0x40020088
 80056f8:	400200a0 	.word	0x400200a0
 80056fc:	400200b8 	.word	0x400200b8
 8005700:	40020410 	.word	0x40020410
 8005704:	40020428 	.word	0x40020428
 8005708:	40020440 	.word	0x40020440
 800570c:	40020458 	.word	0x40020458
 8005710:	40020470 	.word	0x40020470
 8005714:	40020488 	.word	0x40020488
 8005718:	400204a0 	.word	0x400204a0
 800571c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1c8      	bne.n	80056c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4b83      	ldr	r3, [pc, #524]	@ (8005948 <HAL_DMA_Init+0x420>)
 800573a:	4013      	ands	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005746:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005752:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	2b04      	cmp	r3, #4
 8005772:	d107      	bne.n	8005784 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	4313      	orrs	r3, r2
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b28      	cmp	r3, #40	@ 0x28
 800578a:	d903      	bls.n	8005794 <HAL_DMA_Init+0x26c>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b2e      	cmp	r3, #46	@ 0x2e
 8005792:	d91f      	bls.n	80057d4 <HAL_DMA_Init+0x2ac>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b3e      	cmp	r3, #62	@ 0x3e
 800579a:	d903      	bls.n	80057a4 <HAL_DMA_Init+0x27c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b42      	cmp	r3, #66	@ 0x42
 80057a2:	d917      	bls.n	80057d4 <HAL_DMA_Init+0x2ac>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b46      	cmp	r3, #70	@ 0x46
 80057aa:	d903      	bls.n	80057b4 <HAL_DMA_Init+0x28c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b48      	cmp	r3, #72	@ 0x48
 80057b2:	d90f      	bls.n	80057d4 <HAL_DMA_Init+0x2ac>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80057ba:	d903      	bls.n	80057c4 <HAL_DMA_Init+0x29c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b52      	cmp	r3, #82	@ 0x52
 80057c2:	d907      	bls.n	80057d4 <HAL_DMA_Init+0x2ac>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b73      	cmp	r3, #115	@ 0x73
 80057ca:	d905      	bls.n	80057d8 <HAL_DMA_Init+0x2b0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b77      	cmp	r3, #119	@ 0x77
 80057d2:	d801      	bhi.n	80057d8 <HAL_DMA_Init+0x2b0>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_DMA_Init+0x2b2>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0307 	bic.w	r3, r3, #7
 80057fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	2b04      	cmp	r3, #4
 800580e:	d117      	bne.n	8005840 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fdca 	bl	80073bc <DMA_CheckFifoParam>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2240      	movs	r2, #64	@ 0x40
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e192      	b.n	8005b66 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 fd05 	bl	8007258 <DMA_CalcBaseAndBitshift>
 800584e:	4603      	mov	r3, r0
 8005850:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	223f      	movs	r2, #63	@ 0x3f
 800585c:	409a      	lsls	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	609a      	str	r2, [r3, #8]
 8005862:	e0c8      	b.n	80059f6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a38      	ldr	r2, [pc, #224]	@ (800594c <HAL_DMA_Init+0x424>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d022      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <HAL_DMA_Init+0x428>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d01d      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a35      	ldr	r2, [pc, #212]	@ (8005954 <HAL_DMA_Init+0x42c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d018      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a34      	ldr	r2, [pc, #208]	@ (8005958 <HAL_DMA_Init+0x430>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a32      	ldr	r2, [pc, #200]	@ (800595c <HAL_DMA_Init+0x434>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a31      	ldr	r2, [pc, #196]	@ (8005960 <HAL_DMA_Init+0x438>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d009      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <HAL_DMA_Init+0x43c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_DMA_Init+0x38c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005968 <HAL_DMA_Init+0x440>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d101      	bne.n	80058b8 <HAL_DMA_Init+0x390>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <HAL_DMA_Init+0x392>
 80058b8:	2300      	movs	r3, #0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 8092 	beq.w	80059e4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_DMA_Init+0x424>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d021      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a20      	ldr	r2, [pc, #128]	@ (8005950 <HAL_DMA_Init+0x428>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d01c      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005954 <HAL_DMA_Init+0x42c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d017      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005958 <HAL_DMA_Init+0x430>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d012      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <HAL_DMA_Init+0x434>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00d      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005960 <HAL_DMA_Init+0x438>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d008      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <HAL_DMA_Init+0x43c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <HAL_DMA_Init+0x3e6>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a17      	ldr	r2, [pc, #92]	@ (8005968 <HAL_DMA_Init+0x440>)
 800590c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4b10      	ldr	r3, [pc, #64]	@ (800596c <HAL_DMA_Init+0x444>)
 800592a:	4013      	ands	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	d01c      	beq.n	8005970 <HAL_DMA_Init+0x448>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b80      	cmp	r3, #128	@ 0x80
 800593c:	d102      	bne.n	8005944 <HAL_DMA_Init+0x41c>
 800593e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005942:	e016      	b.n	8005972 <HAL_DMA_Init+0x44a>
 8005944:	2300      	movs	r3, #0
 8005946:	e014      	b.n	8005972 <HAL_DMA_Init+0x44a>
 8005948:	fe10803f 	.word	0xfe10803f
 800594c:	58025408 	.word	0x58025408
 8005950:	5802541c 	.word	0x5802541c
 8005954:	58025430 	.word	0x58025430
 8005958:	58025444 	.word	0x58025444
 800595c:	58025458 	.word	0x58025458
 8005960:	5802546c 	.word	0x5802546c
 8005964:	58025480 	.word	0x58025480
 8005968:	58025494 	.word	0x58025494
 800596c:	fffe000f 	.word	0xfffe000f
 8005970:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68d2      	ldr	r2, [r2, #12]
 8005976:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80059a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005b70 <HAL_DMA_Init+0x648>)
 80059b8:	4413      	add	r3, r2
 80059ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005b74 <HAL_DMA_Init+0x64c>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fc45 	bl	8007258 <DMA_CalcBaseAndBitshift>
 80059ce:	4603      	mov	r3, r0
 80059d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2201      	movs	r2, #1
 80059dc:	409a      	lsls	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	e008      	b.n	80059f6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2240      	movs	r2, #64	@ 0x40
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0b7      	b.n	8005b66 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a5f      	ldr	r2, [pc, #380]	@ (8005b78 <HAL_DMA_Init+0x650>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d072      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5d      	ldr	r2, [pc, #372]	@ (8005b7c <HAL_DMA_Init+0x654>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d06d      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8005b80 <HAL_DMA_Init+0x658>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d068      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a5a      	ldr	r2, [pc, #360]	@ (8005b84 <HAL_DMA_Init+0x65c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d063      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a59      	ldr	r2, [pc, #356]	@ (8005b88 <HAL_DMA_Init+0x660>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d05e      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a57      	ldr	r2, [pc, #348]	@ (8005b8c <HAL_DMA_Init+0x664>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d059      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a56      	ldr	r2, [pc, #344]	@ (8005b90 <HAL_DMA_Init+0x668>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d054      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a54      	ldr	r2, [pc, #336]	@ (8005b94 <HAL_DMA_Init+0x66c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d04f      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a53      	ldr	r2, [pc, #332]	@ (8005b98 <HAL_DMA_Init+0x670>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a51      	ldr	r2, [pc, #324]	@ (8005b9c <HAL_DMA_Init+0x674>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a50      	ldr	r2, [pc, #320]	@ (8005ba0 <HAL_DMA_Init+0x678>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a4e      	ldr	r2, [pc, #312]	@ (8005ba4 <HAL_DMA_Init+0x67c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a4d      	ldr	r2, [pc, #308]	@ (8005ba8 <HAL_DMA_Init+0x680>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8005bac <HAL_DMA_Init+0x684>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb0 <HAL_DMA_Init+0x688>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a48      	ldr	r2, [pc, #288]	@ (8005bb4 <HAL_DMA_Init+0x68c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a47      	ldr	r2, [pc, #284]	@ (8005bb8 <HAL_DMA_Init+0x690>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a45      	ldr	r2, [pc, #276]	@ (8005bbc <HAL_DMA_Init+0x694>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a44      	ldr	r2, [pc, #272]	@ (8005bc0 <HAL_DMA_Init+0x698>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a42      	ldr	r2, [pc, #264]	@ (8005bc4 <HAL_DMA_Init+0x69c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a41      	ldr	r2, [pc, #260]	@ (8005bc8 <HAL_DMA_Init+0x6a0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a3f      	ldr	r2, [pc, #252]	@ (8005bcc <HAL_DMA_Init+0x6a4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8005bd0 <HAL_DMA_Init+0x6a8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_Init+0x5be>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8005bd4 <HAL_DMA_Init+0x6ac>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d101      	bne.n	8005aea <HAL_DMA_Init+0x5c2>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <HAL_DMA_Init+0x5c4>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d032      	beq.n	8005b56 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 fcdf 	bl	80074b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b80      	cmp	r3, #128	@ 0x80
 8005afc:	d102      	bne.n	8005b04 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d010      	beq.n	8005b44 <HAL_DMA_Init+0x61c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d80c      	bhi.n	8005b44 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fd5c 	bl	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	e008      	b.n	8005b56 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	a7fdabf8 	.word	0xa7fdabf8
 8005b74:	cccccccd 	.word	0xcccccccd
 8005b78:	40020010 	.word	0x40020010
 8005b7c:	40020028 	.word	0x40020028
 8005b80:	40020040 	.word	0x40020040
 8005b84:	40020058 	.word	0x40020058
 8005b88:	40020070 	.word	0x40020070
 8005b8c:	40020088 	.word	0x40020088
 8005b90:	400200a0 	.word	0x400200a0
 8005b94:	400200b8 	.word	0x400200b8
 8005b98:	40020410 	.word	0x40020410
 8005b9c:	40020428 	.word	0x40020428
 8005ba0:	40020440 	.word	0x40020440
 8005ba4:	40020458 	.word	0x40020458
 8005ba8:	40020470 	.word	0x40020470
 8005bac:	40020488 	.word	0x40020488
 8005bb0:	400204a0 	.word	0x400204a0
 8005bb4:	400204b8 	.word	0x400204b8
 8005bb8:	58025408 	.word	0x58025408
 8005bbc:	5802541c 	.word	0x5802541c
 8005bc0:	58025430 	.word	0x58025430
 8005bc4:	58025444 	.word	0x58025444
 8005bc8:	58025458 	.word	0x58025458
 8005bcc:	5802546c 	.word	0x5802546c
 8005bd0:	58025480 	.word	0x58025480
 8005bd4:	58025494 	.word	0x58025494

08005bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e226      	b.n	8006042 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_DMA_Start_IT+0x2a>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e21f      	b.n	8006042 <HAL_DMA_Start_IT+0x46a>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	f040 820a 	bne.w	800602c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a68      	ldr	r2, [pc, #416]	@ (8005dcc <HAL_DMA_Start_IT+0x1f4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d04a      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a66      	ldr	r2, [pc, #408]	@ (8005dd0 <HAL_DMA_Start_IT+0x1f8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d045      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a65      	ldr	r2, [pc, #404]	@ (8005dd4 <HAL_DMA_Start_IT+0x1fc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d040      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a63      	ldr	r2, [pc, #396]	@ (8005dd8 <HAL_DMA_Start_IT+0x200>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d03b      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a62      	ldr	r2, [pc, #392]	@ (8005ddc <HAL_DMA_Start_IT+0x204>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d036      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a60      	ldr	r2, [pc, #384]	@ (8005de0 <HAL_DMA_Start_IT+0x208>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d031      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a5f      	ldr	r2, [pc, #380]	@ (8005de4 <HAL_DMA_Start_IT+0x20c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d02c      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a5d      	ldr	r2, [pc, #372]	@ (8005de8 <HAL_DMA_Start_IT+0x210>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d027      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a5c      	ldr	r2, [pc, #368]	@ (8005dec <HAL_DMA_Start_IT+0x214>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d022      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a5a      	ldr	r2, [pc, #360]	@ (8005df0 <HAL_DMA_Start_IT+0x218>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01d      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a59      	ldr	r2, [pc, #356]	@ (8005df4 <HAL_DMA_Start_IT+0x21c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a57      	ldr	r2, [pc, #348]	@ (8005df8 <HAL_DMA_Start_IT+0x220>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a56      	ldr	r2, [pc, #344]	@ (8005dfc <HAL_DMA_Start_IT+0x224>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a54      	ldr	r2, [pc, #336]	@ (8005e00 <HAL_DMA_Start_IT+0x228>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a53      	ldr	r2, [pc, #332]	@ (8005e04 <HAL_DMA_Start_IT+0x22c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_DMA_Start_IT+0xee>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a51      	ldr	r2, [pc, #324]	@ (8005e08 <HAL_DMA_Start_IT+0x230>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <HAL_DMA_Start_IT+0x100>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e007      	b.n	8005ce8 <HAL_DMA_Start_IT+0x110>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f001 f906 	bl	8006f00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a34      	ldr	r2, [pc, #208]	@ (8005dcc <HAL_DMA_Start_IT+0x1f4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d04a      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	@ (8005dd0 <HAL_DMA_Start_IT+0x1f8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d045      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a31      	ldr	r2, [pc, #196]	@ (8005dd4 <HAL_DMA_Start_IT+0x1fc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d040      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a30      	ldr	r2, [pc, #192]	@ (8005dd8 <HAL_DMA_Start_IT+0x200>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d03b      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a2e      	ldr	r2, [pc, #184]	@ (8005ddc <HAL_DMA_Start_IT+0x204>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d036      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005de0 <HAL_DMA_Start_IT+0x208>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d031      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	@ (8005de4 <HAL_DMA_Start_IT+0x20c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d02c      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005de8 <HAL_DMA_Start_IT+0x210>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d027      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a28      	ldr	r2, [pc, #160]	@ (8005dec <HAL_DMA_Start_IT+0x214>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d022      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a27      	ldr	r2, [pc, #156]	@ (8005df0 <HAL_DMA_Start_IT+0x218>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d01d      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a25      	ldr	r2, [pc, #148]	@ (8005df4 <HAL_DMA_Start_IT+0x21c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d018      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a24      	ldr	r2, [pc, #144]	@ (8005df8 <HAL_DMA_Start_IT+0x220>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a22      	ldr	r2, [pc, #136]	@ (8005dfc <HAL_DMA_Start_IT+0x224>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00e      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a21      	ldr	r2, [pc, #132]	@ (8005e00 <HAL_DMA_Start_IT+0x228>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1f      	ldr	r2, [pc, #124]	@ (8005e04 <HAL_DMA_Start_IT+0x22c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_DMA_Start_IT+0x1bc>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e08 <HAL_DMA_Start_IT+0x230>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d101      	bne.n	8005d98 <HAL_DMA_Start_IT+0x1c0>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_DMA_Start_IT+0x1c2>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d036      	beq.n	8005e0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f023 021e 	bic.w	r2, r3, #30
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0216 	orr.w	r2, r2, #22
 8005db0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d03e      	beq.n	8005e38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0208 	orr.w	r2, r2, #8
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e035      	b.n	8005e38 <HAL_DMA_Start_IT+0x260>
 8005dcc:	40020010 	.word	0x40020010
 8005dd0:	40020028 	.word	0x40020028
 8005dd4:	40020040 	.word	0x40020040
 8005dd8:	40020058 	.word	0x40020058
 8005ddc:	40020070 	.word	0x40020070
 8005de0:	40020088 	.word	0x40020088
 8005de4:	400200a0 	.word	0x400200a0
 8005de8:	400200b8 	.word	0x400200b8
 8005dec:	40020410 	.word	0x40020410
 8005df0:	40020428 	.word	0x40020428
 8005df4:	40020440 	.word	0x40020440
 8005df8:	40020458 	.word	0x40020458
 8005dfc:	40020470 	.word	0x40020470
 8005e00:	40020488 	.word	0x40020488
 8005e04:	400204a0 	.word	0x400204a0
 8005e08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f023 020e 	bic.w	r2, r3, #14
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 020a 	orr.w	r2, r2, #10
 8005e1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0204 	orr.w	r2, r2, #4
 8005e36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a83      	ldr	r2, [pc, #524]	@ (800604c <HAL_DMA_Start_IT+0x474>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d072      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a82      	ldr	r2, [pc, #520]	@ (8006050 <HAL_DMA_Start_IT+0x478>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d06d      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a80      	ldr	r2, [pc, #512]	@ (8006054 <HAL_DMA_Start_IT+0x47c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d068      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8006058 <HAL_DMA_Start_IT+0x480>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d063      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7d      	ldr	r2, [pc, #500]	@ (800605c <HAL_DMA_Start_IT+0x484>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d05e      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8006060 <HAL_DMA_Start_IT+0x488>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d059      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a7a      	ldr	r2, [pc, #488]	@ (8006064 <HAL_DMA_Start_IT+0x48c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d054      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a79      	ldr	r2, [pc, #484]	@ (8006068 <HAL_DMA_Start_IT+0x490>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d04f      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a77      	ldr	r2, [pc, #476]	@ (800606c <HAL_DMA_Start_IT+0x494>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d04a      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a76      	ldr	r2, [pc, #472]	@ (8006070 <HAL_DMA_Start_IT+0x498>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d045      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a74      	ldr	r2, [pc, #464]	@ (8006074 <HAL_DMA_Start_IT+0x49c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d040      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a73      	ldr	r2, [pc, #460]	@ (8006078 <HAL_DMA_Start_IT+0x4a0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d03b      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a71      	ldr	r2, [pc, #452]	@ (800607c <HAL_DMA_Start_IT+0x4a4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d036      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a70      	ldr	r2, [pc, #448]	@ (8006080 <HAL_DMA_Start_IT+0x4a8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d031      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8006084 <HAL_DMA_Start_IT+0x4ac>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d02c      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8006088 <HAL_DMA_Start_IT+0x4b0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d027      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6b      	ldr	r2, [pc, #428]	@ (800608c <HAL_DMA_Start_IT+0x4b4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d022      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8006090 <HAL_DMA_Start_IT+0x4b8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d01d      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a68      	ldr	r2, [pc, #416]	@ (8006094 <HAL_DMA_Start_IT+0x4bc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d018      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a67      	ldr	r2, [pc, #412]	@ (8006098 <HAL_DMA_Start_IT+0x4c0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a65      	ldr	r2, [pc, #404]	@ (800609c <HAL_DMA_Start_IT+0x4c4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00e      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a64      	ldr	r2, [pc, #400]	@ (80060a0 <HAL_DMA_Start_IT+0x4c8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d009      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a62      	ldr	r2, [pc, #392]	@ (80060a4 <HAL_DMA_Start_IT+0x4cc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d004      	beq.n	8005f28 <HAL_DMA_Start_IT+0x350>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a61      	ldr	r2, [pc, #388]	@ (80060a8 <HAL_DMA_Start_IT+0x4d0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d101      	bne.n	8005f2c <HAL_DMA_Start_IT+0x354>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <HAL_DMA_Start_IT+0x356>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a37      	ldr	r2, [pc, #220]	@ (800604c <HAL_DMA_Start_IT+0x474>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d04a      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a36      	ldr	r2, [pc, #216]	@ (8006050 <HAL_DMA_Start_IT+0x478>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d045      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a34      	ldr	r2, [pc, #208]	@ (8006054 <HAL_DMA_Start_IT+0x47c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d040      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a33      	ldr	r2, [pc, #204]	@ (8006058 <HAL_DMA_Start_IT+0x480>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d03b      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a31      	ldr	r2, [pc, #196]	@ (800605c <HAL_DMA_Start_IT+0x484>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d036      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a30      	ldr	r2, [pc, #192]	@ (8006060 <HAL_DMA_Start_IT+0x488>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d031      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8006064 <HAL_DMA_Start_IT+0x48c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d02c      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8006068 <HAL_DMA_Start_IT+0x490>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d027      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800606c <HAL_DMA_Start_IT+0x494>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d022      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8006070 <HAL_DMA_Start_IT+0x498>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d01d      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a28      	ldr	r2, [pc, #160]	@ (8006074 <HAL_DMA_Start_IT+0x49c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d018      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a27      	ldr	r2, [pc, #156]	@ (8006078 <HAL_DMA_Start_IT+0x4a0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a25      	ldr	r2, [pc, #148]	@ (800607c <HAL_DMA_Start_IT+0x4a4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00e      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a24      	ldr	r2, [pc, #144]	@ (8006080 <HAL_DMA_Start_IT+0x4a8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d009      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a22      	ldr	r2, [pc, #136]	@ (8006084 <HAL_DMA_Start_IT+0x4ac>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_DMA_Start_IT+0x430>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a21      	ldr	r2, [pc, #132]	@ (8006088 <HAL_DMA_Start_IT+0x4b0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d108      	bne.n	800601a <HAL_DMA_Start_IT+0x442>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	e012      	b.n	8006040 <HAL_DMA_Start_IT+0x468>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f042 0201 	orr.w	r2, r2, #1
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e009      	b.n	8006040 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006032:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006040:	7dfb      	ldrb	r3, [r7, #23]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40020010 	.word	0x40020010
 8006050:	40020028 	.word	0x40020028
 8006054:	40020040 	.word	0x40020040
 8006058:	40020058 	.word	0x40020058
 800605c:	40020070 	.word	0x40020070
 8006060:	40020088 	.word	0x40020088
 8006064:	400200a0 	.word	0x400200a0
 8006068:	400200b8 	.word	0x400200b8
 800606c:	40020410 	.word	0x40020410
 8006070:	40020428 	.word	0x40020428
 8006074:	40020440 	.word	0x40020440
 8006078:	40020458 	.word	0x40020458
 800607c:	40020470 	.word	0x40020470
 8006080:	40020488 	.word	0x40020488
 8006084:	400204a0 	.word	0x400204a0
 8006088:	400204b8 	.word	0x400204b8
 800608c:	58025408 	.word	0x58025408
 8006090:	5802541c 	.word	0x5802541c
 8006094:	58025430 	.word	0x58025430
 8006098:	58025444 	.word	0x58025444
 800609c:	58025458 	.word	0x58025458
 80060a0:	5802546c 	.word	0x5802546c
 80060a4:	58025480 	.word	0x58025480
 80060a8:	58025494 	.word	0x58025494

080060ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060b8:	4b67      	ldr	r3, [pc, #412]	@ (8006258 <HAL_DMA_IRQHandler+0x1ac>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a67      	ldr	r2, [pc, #412]	@ (800625c <HAL_DMA_IRQHandler+0x1b0>)
 80060be:	fba2 2303 	umull	r2, r3, r2, r3
 80060c2:	0a9b      	lsrs	r3, r3, #10
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a5f      	ldr	r2, [pc, #380]	@ (8006260 <HAL_DMA_IRQHandler+0x1b4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d04a      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006264 <HAL_DMA_IRQHandler+0x1b8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d045      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a5c      	ldr	r2, [pc, #368]	@ (8006268 <HAL_DMA_IRQHandler+0x1bc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d040      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a5a      	ldr	r2, [pc, #360]	@ (800626c <HAL_DMA_IRQHandler+0x1c0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d03b      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a59      	ldr	r2, [pc, #356]	@ (8006270 <HAL_DMA_IRQHandler+0x1c4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d036      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a57      	ldr	r2, [pc, #348]	@ (8006274 <HAL_DMA_IRQHandler+0x1c8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d031      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a56      	ldr	r2, [pc, #344]	@ (8006278 <HAL_DMA_IRQHandler+0x1cc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d02c      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a54      	ldr	r2, [pc, #336]	@ (800627c <HAL_DMA_IRQHandler+0x1d0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d027      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a53      	ldr	r2, [pc, #332]	@ (8006280 <HAL_DMA_IRQHandler+0x1d4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d022      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a51      	ldr	r2, [pc, #324]	@ (8006284 <HAL_DMA_IRQHandler+0x1d8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01d      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a50      	ldr	r2, [pc, #320]	@ (8006288 <HAL_DMA_IRQHandler+0x1dc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d018      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4e      	ldr	r2, [pc, #312]	@ (800628c <HAL_DMA_IRQHandler+0x1e0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4d      	ldr	r2, [pc, #308]	@ (8006290 <HAL_DMA_IRQHandler+0x1e4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00e      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a4b      	ldr	r2, [pc, #300]	@ (8006294 <HAL_DMA_IRQHandler+0x1e8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a4a      	ldr	r2, [pc, #296]	@ (8006298 <HAL_DMA_IRQHandler+0x1ec>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_DMA_IRQHandler+0xd2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a48      	ldr	r2, [pc, #288]	@ (800629c <HAL_DMA_IRQHandler+0x1f0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <HAL_DMA_IRQHandler+0xd6>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <HAL_DMA_IRQHandler+0xd8>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 842b 	beq.w	80069e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	2208      	movs	r2, #8
 8006194:	409a      	lsls	r2, r3
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80a2 	beq.w	80062e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006260 <HAL_DMA_IRQHandler+0x1b4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d04a      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006264 <HAL_DMA_IRQHandler+0x1b8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d045      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006268 <HAL_DMA_IRQHandler+0x1bc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d040      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2a      	ldr	r2, [pc, #168]	@ (800626c <HAL_DMA_IRQHandler+0x1c0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d03b      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a28      	ldr	r2, [pc, #160]	@ (8006270 <HAL_DMA_IRQHandler+0x1c4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d036      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a27      	ldr	r2, [pc, #156]	@ (8006274 <HAL_DMA_IRQHandler+0x1c8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d031      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a25      	ldr	r2, [pc, #148]	@ (8006278 <HAL_DMA_IRQHandler+0x1cc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02c      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a24      	ldr	r2, [pc, #144]	@ (800627c <HAL_DMA_IRQHandler+0x1d0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d027      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a22      	ldr	r2, [pc, #136]	@ (8006280 <HAL_DMA_IRQHandler+0x1d4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d022      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a21      	ldr	r2, [pc, #132]	@ (8006284 <HAL_DMA_IRQHandler+0x1d8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01d      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1f      	ldr	r2, [pc, #124]	@ (8006288 <HAL_DMA_IRQHandler+0x1dc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1e      	ldr	r2, [pc, #120]	@ (800628c <HAL_DMA_IRQHandler+0x1e0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1c      	ldr	r2, [pc, #112]	@ (8006290 <HAL_DMA_IRQHandler+0x1e4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1b      	ldr	r2, [pc, #108]	@ (8006294 <HAL_DMA_IRQHandler+0x1e8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <HAL_DMA_IRQHandler+0x1ec>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_DMA_IRQHandler+0x194>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a18      	ldr	r2, [pc, #96]	@ (800629c <HAL_DMA_IRQHandler+0x1f0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d12f      	bne.n	80062a0 <HAL_DMA_IRQHandler+0x1f4>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	e02e      	b.n	80062b4 <HAL_DMA_IRQHandler+0x208>
 8006256:	bf00      	nop
 8006258:	2400000c 	.word	0x2400000c
 800625c:	1b4e81b5 	.word	0x1b4e81b5
 8006260:	40020010 	.word	0x40020010
 8006264:	40020028 	.word	0x40020028
 8006268:	40020040 	.word	0x40020040
 800626c:	40020058 	.word	0x40020058
 8006270:	40020070 	.word	0x40020070
 8006274:	40020088 	.word	0x40020088
 8006278:	400200a0 	.word	0x400200a0
 800627c:	400200b8 	.word	0x400200b8
 8006280:	40020410 	.word	0x40020410
 8006284:	40020428 	.word	0x40020428
 8006288:	40020440 	.word	0x40020440
 800628c:	40020458 	.word	0x40020458
 8006290:	40020470 	.word	0x40020470
 8006294:	40020488 	.word	0x40020488
 8006298:	400204a0 	.word	0x400204a0
 800629c:	400204b8 	.word	0x400204b8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf14      	ite	ne
 80062ae:	2301      	movne	r3, #1
 80062b0:	2300      	moveq	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d015      	beq.n	80062e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0204 	bic.w	r2, r2, #4
 80062c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2208      	movs	r2, #8
 80062d2:	409a      	lsls	r2, r3
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062dc:	f043 0201 	orr.w	r2, r3, #1
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d06e      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a69      	ldr	r2, [pc, #420]	@ (80064a4 <HAL_DMA_IRQHandler+0x3f8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d04a      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a67      	ldr	r2, [pc, #412]	@ (80064a8 <HAL_DMA_IRQHandler+0x3fc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d045      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a66      	ldr	r2, [pc, #408]	@ (80064ac <HAL_DMA_IRQHandler+0x400>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d040      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a64      	ldr	r2, [pc, #400]	@ (80064b0 <HAL_DMA_IRQHandler+0x404>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d03b      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a63      	ldr	r2, [pc, #396]	@ (80064b4 <HAL_DMA_IRQHandler+0x408>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d036      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a61      	ldr	r2, [pc, #388]	@ (80064b8 <HAL_DMA_IRQHandler+0x40c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d031      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a60      	ldr	r2, [pc, #384]	@ (80064bc <HAL_DMA_IRQHandler+0x410>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d02c      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a5e      	ldr	r2, [pc, #376]	@ (80064c0 <HAL_DMA_IRQHandler+0x414>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d027      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a5d      	ldr	r2, [pc, #372]	@ (80064c4 <HAL_DMA_IRQHandler+0x418>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d022      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5b      	ldr	r2, [pc, #364]	@ (80064c8 <HAL_DMA_IRQHandler+0x41c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01d      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5a      	ldr	r2, [pc, #360]	@ (80064cc <HAL_DMA_IRQHandler+0x420>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d018      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a58      	ldr	r2, [pc, #352]	@ (80064d0 <HAL_DMA_IRQHandler+0x424>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a57      	ldr	r2, [pc, #348]	@ (80064d4 <HAL_DMA_IRQHandler+0x428>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00e      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a55      	ldr	r2, [pc, #340]	@ (80064d8 <HAL_DMA_IRQHandler+0x42c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d009      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a54      	ldr	r2, [pc, #336]	@ (80064dc <HAL_DMA_IRQHandler+0x430>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d004      	beq.n	800639a <HAL_DMA_IRQHandler+0x2ee>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a52      	ldr	r2, [pc, #328]	@ (80064e0 <HAL_DMA_IRQHandler+0x434>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10a      	bne.n	80063b0 <HAL_DMA_IRQHandler+0x304>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bf14      	ite	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	2300      	moveq	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e003      	b.n	80063b8 <HAL_DMA_IRQHandler+0x30c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00d      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2201      	movs	r2, #1
 80063c6:	409a      	lsls	r2, r3
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d0:	f043 0202 	orr.w	r2, r3, #2
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2204      	movs	r2, #4
 80063e2:	409a      	lsls	r2, r3
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 808f 	beq.w	800650c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a2c      	ldr	r2, [pc, #176]	@ (80064a4 <HAL_DMA_IRQHandler+0x3f8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d04a      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2a      	ldr	r2, [pc, #168]	@ (80064a8 <HAL_DMA_IRQHandler+0x3fc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d045      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a29      	ldr	r2, [pc, #164]	@ (80064ac <HAL_DMA_IRQHandler+0x400>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d040      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a27      	ldr	r2, [pc, #156]	@ (80064b0 <HAL_DMA_IRQHandler+0x404>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a26      	ldr	r2, [pc, #152]	@ (80064b4 <HAL_DMA_IRQHandler+0x408>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d036      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a24      	ldr	r2, [pc, #144]	@ (80064b8 <HAL_DMA_IRQHandler+0x40c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a23      	ldr	r2, [pc, #140]	@ (80064bc <HAL_DMA_IRQHandler+0x410>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d02c      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a21      	ldr	r2, [pc, #132]	@ (80064c0 <HAL_DMA_IRQHandler+0x414>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d027      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a20      	ldr	r2, [pc, #128]	@ (80064c4 <HAL_DMA_IRQHandler+0x418>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1e      	ldr	r2, [pc, #120]	@ (80064c8 <HAL_DMA_IRQHandler+0x41c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1d      	ldr	r2, [pc, #116]	@ (80064cc <HAL_DMA_IRQHandler+0x420>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1b      	ldr	r2, [pc, #108]	@ (80064d0 <HAL_DMA_IRQHandler+0x424>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1a      	ldr	r2, [pc, #104]	@ (80064d4 <HAL_DMA_IRQHandler+0x428>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a18      	ldr	r2, [pc, #96]	@ (80064d8 <HAL_DMA_IRQHandler+0x42c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a17      	ldr	r2, [pc, #92]	@ (80064dc <HAL_DMA_IRQHandler+0x430>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_DMA_IRQHandler+0x3e2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <HAL_DMA_IRQHandler+0x434>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d12a      	bne.n	80064e4 <HAL_DMA_IRQHandler+0x438>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e023      	b.n	80064ec <HAL_DMA_IRQHandler+0x440>
 80064a4:	40020010 	.word	0x40020010
 80064a8:	40020028 	.word	0x40020028
 80064ac:	40020040 	.word	0x40020040
 80064b0:	40020058 	.word	0x40020058
 80064b4:	40020070 	.word	0x40020070
 80064b8:	40020088 	.word	0x40020088
 80064bc:	400200a0 	.word	0x400200a0
 80064c0:	400200b8 	.word	0x400200b8
 80064c4:	40020410 	.word	0x40020410
 80064c8:	40020428 	.word	0x40020428
 80064cc:	40020440 	.word	0x40020440
 80064d0:	40020458 	.word	0x40020458
 80064d4:	40020470 	.word	0x40020470
 80064d8:	40020488 	.word	0x40020488
 80064dc:	400204a0 	.word	0x400204a0
 80064e0:	400204b8 	.word	0x400204b8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00d      	beq.n	800650c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2204      	movs	r2, #4
 80064fa:	409a      	lsls	r2, r3
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006504:	f043 0204 	orr.w	r2, r3, #4
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	2210      	movs	r2, #16
 8006516:	409a      	lsls	r2, r3
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80a6 	beq.w	800666e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a85      	ldr	r2, [pc, #532]	@ (800673c <HAL_DMA_IRQHandler+0x690>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d04a      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a83      	ldr	r2, [pc, #524]	@ (8006740 <HAL_DMA_IRQHandler+0x694>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d045      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a82      	ldr	r2, [pc, #520]	@ (8006744 <HAL_DMA_IRQHandler+0x698>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d040      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a80      	ldr	r2, [pc, #512]	@ (8006748 <HAL_DMA_IRQHandler+0x69c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d03b      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a7f      	ldr	r2, [pc, #508]	@ (800674c <HAL_DMA_IRQHandler+0x6a0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d036      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a7d      	ldr	r2, [pc, #500]	@ (8006750 <HAL_DMA_IRQHandler+0x6a4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d031      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a7c      	ldr	r2, [pc, #496]	@ (8006754 <HAL_DMA_IRQHandler+0x6a8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d02c      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a7a      	ldr	r2, [pc, #488]	@ (8006758 <HAL_DMA_IRQHandler+0x6ac>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d027      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a79      	ldr	r2, [pc, #484]	@ (800675c <HAL_DMA_IRQHandler+0x6b0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d022      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a77      	ldr	r2, [pc, #476]	@ (8006760 <HAL_DMA_IRQHandler+0x6b4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01d      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a76      	ldr	r2, [pc, #472]	@ (8006764 <HAL_DMA_IRQHandler+0x6b8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d018      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a74      	ldr	r2, [pc, #464]	@ (8006768 <HAL_DMA_IRQHandler+0x6bc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a73      	ldr	r2, [pc, #460]	@ (800676c <HAL_DMA_IRQHandler+0x6c0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a71      	ldr	r2, [pc, #452]	@ (8006770 <HAL_DMA_IRQHandler+0x6c4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a70      	ldr	r2, [pc, #448]	@ (8006774 <HAL_DMA_IRQHandler+0x6c8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_DMA_IRQHandler+0x516>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a6e      	ldr	r2, [pc, #440]	@ (8006778 <HAL_DMA_IRQHandler+0x6cc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10a      	bne.n	80065d8 <HAL_DMA_IRQHandler+0x52c>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e009      	b.n	80065ec <HAL_DMA_IRQHandler+0x540>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d03e      	beq.n	800666e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2210      	movs	r2, #16
 80065fa:	409a      	lsls	r2, r3
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d018      	beq.n	8006640 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d108      	bne.n	800662e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d024      	beq.n	800666e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	4798      	blx	r3
 800662c:	e01f      	b.n	800666e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01b      	beq.n	800666e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
 800663e:	e016      	b.n	800666e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d107      	bne.n	800665e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0208 	bic.w	r2, r2, #8
 800665c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	2220      	movs	r2, #32
 8006678:	409a      	lsls	r2, r3
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8110 	beq.w	80068a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2c      	ldr	r2, [pc, #176]	@ (800673c <HAL_DMA_IRQHandler+0x690>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d04a      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2b      	ldr	r2, [pc, #172]	@ (8006740 <HAL_DMA_IRQHandler+0x694>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d045      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a29      	ldr	r2, [pc, #164]	@ (8006744 <HAL_DMA_IRQHandler+0x698>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d040      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a28      	ldr	r2, [pc, #160]	@ (8006748 <HAL_DMA_IRQHandler+0x69c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d03b      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a26      	ldr	r2, [pc, #152]	@ (800674c <HAL_DMA_IRQHandler+0x6a0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d036      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a25      	ldr	r2, [pc, #148]	@ (8006750 <HAL_DMA_IRQHandler+0x6a4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d031      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a23      	ldr	r2, [pc, #140]	@ (8006754 <HAL_DMA_IRQHandler+0x6a8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d02c      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a22      	ldr	r2, [pc, #136]	@ (8006758 <HAL_DMA_IRQHandler+0x6ac>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d027      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a20      	ldr	r2, [pc, #128]	@ (800675c <HAL_DMA_IRQHandler+0x6b0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d022      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006760 <HAL_DMA_IRQHandler+0x6b4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01d      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006764 <HAL_DMA_IRQHandler+0x6b8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d018      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006768 <HAL_DMA_IRQHandler+0x6bc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1a      	ldr	r2, [pc, #104]	@ (800676c <HAL_DMA_IRQHandler+0x6c0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a19      	ldr	r2, [pc, #100]	@ (8006770 <HAL_DMA_IRQHandler+0x6c4>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <HAL_DMA_IRQHandler+0x6c8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_DMA_IRQHandler+0x678>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <HAL_DMA_IRQHandler+0x6cc>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d12b      	bne.n	800677c <HAL_DMA_IRQHandler+0x6d0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	e02a      	b.n	8006790 <HAL_DMA_IRQHandler+0x6e4>
 800673a:	bf00      	nop
 800673c:	40020010 	.word	0x40020010
 8006740:	40020028 	.word	0x40020028
 8006744:	40020040 	.word	0x40020040
 8006748:	40020058 	.word	0x40020058
 800674c:	40020070 	.word	0x40020070
 8006750:	40020088 	.word	0x40020088
 8006754:	400200a0 	.word	0x400200a0
 8006758:	400200b8 	.word	0x400200b8
 800675c:	40020410 	.word	0x40020410
 8006760:	40020428 	.word	0x40020428
 8006764:	40020440 	.word	0x40020440
 8006768:	40020458 	.word	0x40020458
 800676c:	40020470 	.word	0x40020470
 8006770:	40020488 	.word	0x40020488
 8006774:	400204a0 	.word	0x400204a0
 8006778:	400204b8 	.word	0x400204b8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8087 	beq.w	80068a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800679a:	f003 031f 	and.w	r3, r3, #31
 800679e:	2220      	movs	r2, #32
 80067a0:	409a      	lsls	r2, r3
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d139      	bne.n	8006826 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0216 	bic.w	r2, r2, #22
 80067c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695a      	ldr	r2, [r3, #20]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <HAL_DMA_IRQHandler+0x736>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0208 	bic.w	r2, r2, #8
 80067f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	223f      	movs	r2, #63	@ 0x3f
 80067fc:	409a      	lsls	r2, r3
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 834a 	beq.w	8006eb0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
          }
          return;
 8006824:	e344      	b.n	8006eb0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d018      	beq.n	8006866 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d108      	bne.n	8006854 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02c      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
 8006852:	e027      	b.n	80068a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d023      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
 8006864:	e01e      	b.n	80068a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10f      	bne.n	8006894 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0210 	bic.w	r2, r2, #16
 8006882:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8306 	beq.w	8006eba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8088 	beq.w	80069cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2204      	movs	r2, #4
 80068c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a7a      	ldr	r2, [pc, #488]	@ (8006ab4 <HAL_DMA_IRQHandler+0xa08>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d04a      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a79      	ldr	r2, [pc, #484]	@ (8006ab8 <HAL_DMA_IRQHandler+0xa0c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d045      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a77      	ldr	r2, [pc, #476]	@ (8006abc <HAL_DMA_IRQHandler+0xa10>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d040      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a76      	ldr	r2, [pc, #472]	@ (8006ac0 <HAL_DMA_IRQHandler+0xa14>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d03b      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a74      	ldr	r2, [pc, #464]	@ (8006ac4 <HAL_DMA_IRQHandler+0xa18>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d036      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a73      	ldr	r2, [pc, #460]	@ (8006ac8 <HAL_DMA_IRQHandler+0xa1c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d031      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a71      	ldr	r2, [pc, #452]	@ (8006acc <HAL_DMA_IRQHandler+0xa20>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02c      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a70      	ldr	r2, [pc, #448]	@ (8006ad0 <HAL_DMA_IRQHandler+0xa24>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d027      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a6e      	ldr	r2, [pc, #440]	@ (8006ad4 <HAL_DMA_IRQHandler+0xa28>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d022      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a6d      	ldr	r2, [pc, #436]	@ (8006ad8 <HAL_DMA_IRQHandler+0xa2c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d01d      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6b      	ldr	r2, [pc, #428]	@ (8006adc <HAL_DMA_IRQHandler+0xa30>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d018      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a6a      	ldr	r2, [pc, #424]	@ (8006ae0 <HAL_DMA_IRQHandler+0xa34>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d013      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a68      	ldr	r2, [pc, #416]	@ (8006ae4 <HAL_DMA_IRQHandler+0xa38>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00e      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a67      	ldr	r2, [pc, #412]	@ (8006ae8 <HAL_DMA_IRQHandler+0xa3c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a65      	ldr	r2, [pc, #404]	@ (8006aec <HAL_DMA_IRQHandler+0xa40>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_DMA_IRQHandler+0x8b8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a64      	ldr	r2, [pc, #400]	@ (8006af0 <HAL_DMA_IRQHandler+0xa44>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d108      	bne.n	8006976 <HAL_DMA_IRQHandler+0x8ca>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e007      	b.n	8006986 <HAL_DMA_IRQHandler+0x8da>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	429a      	cmp	r2, r3
 8006990:	d307      	bcc.n	80069a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f2      	bne.n	8006986 <HAL_DMA_IRQHandler+0x8da>
 80069a0:	e000      	b.n	80069a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d004      	beq.n	80069bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2203      	movs	r2, #3
 80069b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80069ba:	e003      	b.n	80069c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8272 	beq.w	8006eba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
 80069de:	e26c      	b.n	8006eba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a43      	ldr	r2, [pc, #268]	@ (8006af4 <HAL_DMA_IRQHandler+0xa48>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d022      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a42      	ldr	r2, [pc, #264]	@ (8006af8 <HAL_DMA_IRQHandler+0xa4c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d01d      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a40      	ldr	r2, [pc, #256]	@ (8006afc <HAL_DMA_IRQHandler+0xa50>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d018      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a3f      	ldr	r2, [pc, #252]	@ (8006b00 <HAL_DMA_IRQHandler+0xa54>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b04 <HAL_DMA_IRQHandler+0xa58>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00e      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a3c      	ldr	r2, [pc, #240]	@ (8006b08 <HAL_DMA_IRQHandler+0xa5c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d009      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a3a      	ldr	r2, [pc, #232]	@ (8006b0c <HAL_DMA_IRQHandler+0xa60>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x984>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a39      	ldr	r2, [pc, #228]	@ (8006b10 <HAL_DMA_IRQHandler+0xa64>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d101      	bne.n	8006a34 <HAL_DMA_IRQHandler+0x988>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <HAL_DMA_IRQHandler+0x98a>
 8006a34:	2300      	movs	r3, #0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 823f 	beq.w	8006eba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80cd 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xb48>
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80c7 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2204      	movs	r2, #4
 8006a70:	409a      	lsls	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d049      	beq.n	8006b14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8210 	beq.w	8006eb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a9c:	e20a      	b.n	8006eb4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8206 	beq.w	8006eb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab0:	e200      	b.n	8006eb4 <HAL_DMA_IRQHandler+0xe08>
 8006ab2:	bf00      	nop
 8006ab4:	40020010 	.word	0x40020010
 8006ab8:	40020028 	.word	0x40020028
 8006abc:	40020040 	.word	0x40020040
 8006ac0:	40020058 	.word	0x40020058
 8006ac4:	40020070 	.word	0x40020070
 8006ac8:	40020088 	.word	0x40020088
 8006acc:	400200a0 	.word	0x400200a0
 8006ad0:	400200b8 	.word	0x400200b8
 8006ad4:	40020410 	.word	0x40020410
 8006ad8:	40020428 	.word	0x40020428
 8006adc:	40020440 	.word	0x40020440
 8006ae0:	40020458 	.word	0x40020458
 8006ae4:	40020470 	.word	0x40020470
 8006ae8:	40020488 	.word	0x40020488
 8006aec:	400204a0 	.word	0x400204a0
 8006af0:	400204b8 	.word	0x400204b8
 8006af4:	58025408 	.word	0x58025408
 8006af8:	5802541c 	.word	0x5802541c
 8006afc:	58025430 	.word	0x58025430
 8006b00:	58025444 	.word	0x58025444
 8006b04:	58025458 	.word	0x58025458
 8006b08:	5802546c 	.word	0x5802546c
 8006b0c:	58025480 	.word	0x58025480
 8006b10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d160      	bne.n	8006be0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a7f      	ldr	r2, [pc, #508]	@ (8006d20 <HAL_DMA_IRQHandler+0xc74>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d24 <HAL_DMA_IRQHandler+0xc78>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a7c      	ldr	r2, [pc, #496]	@ (8006d28 <HAL_DMA_IRQHandler+0xc7c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a7a      	ldr	r2, [pc, #488]	@ (8006d2c <HAL_DMA_IRQHandler+0xc80>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a79      	ldr	r2, [pc, #484]	@ (8006d30 <HAL_DMA_IRQHandler+0xc84>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a77      	ldr	r2, [pc, #476]	@ (8006d34 <HAL_DMA_IRQHandler+0xc88>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a76      	ldr	r2, [pc, #472]	@ (8006d38 <HAL_DMA_IRQHandler+0xc8c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a74      	ldr	r2, [pc, #464]	@ (8006d3c <HAL_DMA_IRQHandler+0xc90>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a73      	ldr	r2, [pc, #460]	@ (8006d40 <HAL_DMA_IRQHandler+0xc94>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a71      	ldr	r2, [pc, #452]	@ (8006d44 <HAL_DMA_IRQHandler+0xc98>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a70      	ldr	r2, [pc, #448]	@ (8006d48 <HAL_DMA_IRQHandler+0xc9c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a6e      	ldr	r2, [pc, #440]	@ (8006d4c <HAL_DMA_IRQHandler+0xca0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8006d50 <HAL_DMA_IRQHandler+0xca4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6b      	ldr	r2, [pc, #428]	@ (8006d54 <HAL_DMA_IRQHandler+0xca8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a6a      	ldr	r2, [pc, #424]	@ (8006d58 <HAL_DMA_IRQHandler+0xcac>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xb12>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a68      	ldr	r2, [pc, #416]	@ (8006d5c <HAL_DMA_IRQHandler+0xcb0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_DMA_IRQHandler+0xb24>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0208 	bic.w	r2, r2, #8
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e007      	b.n	8006be0 <HAL_DMA_IRQHandler+0xb34>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0204 	bic.w	r2, r2, #4
 8006bde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8165 	beq.w	8006eb4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf2:	e15f      	b.n	8006eb4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80c5 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xce8>
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 80bf 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c1a:	f003 031f 	and.w	r3, r3, #31
 8006c1e:	2202      	movs	r2, #2
 8006c20:	409a      	lsls	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d018      	beq.n	8006c62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 813a 	beq.w	8006eb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c4c:	e134      	b.n	8006eb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8130 	beq.w	8006eb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c60:	e12a      	b.n	8006eb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 8089 	bne.w	8006d80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2b      	ldr	r2, [pc, #172]	@ (8006d20 <HAL_DMA_IRQHandler+0xc74>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d04a      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a29      	ldr	r2, [pc, #164]	@ (8006d24 <HAL_DMA_IRQHandler+0xc78>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d045      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a28      	ldr	r2, [pc, #160]	@ (8006d28 <HAL_DMA_IRQHandler+0xc7c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d040      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a26      	ldr	r2, [pc, #152]	@ (8006d2c <HAL_DMA_IRQHandler+0xc80>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d03b      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a25      	ldr	r2, [pc, #148]	@ (8006d30 <HAL_DMA_IRQHandler+0xc84>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d036      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a23      	ldr	r2, [pc, #140]	@ (8006d34 <HAL_DMA_IRQHandler+0xc88>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d031      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a22      	ldr	r2, [pc, #136]	@ (8006d38 <HAL_DMA_IRQHandler+0xc8c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d02c      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a20      	ldr	r2, [pc, #128]	@ (8006d3c <HAL_DMA_IRQHandler+0xc90>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d027      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d40 <HAL_DMA_IRQHandler+0xc94>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d022      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d44 <HAL_DMA_IRQHandler+0xc98>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d01d      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d48 <HAL_DMA_IRQHandler+0xc9c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d018      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d4c <HAL_DMA_IRQHandler+0xca0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a19      	ldr	r2, [pc, #100]	@ (8006d50 <HAL_DMA_IRQHandler+0xca4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00e      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a17      	ldr	r2, [pc, #92]	@ (8006d54 <HAL_DMA_IRQHandler+0xca8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a16      	ldr	r2, [pc, #88]	@ (8006d58 <HAL_DMA_IRQHandler+0xcac>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d004      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xc62>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a14      	ldr	r2, [pc, #80]	@ (8006d5c <HAL_DMA_IRQHandler+0xcb0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d128      	bne.n	8006d60 <HAL_DMA_IRQHandler+0xcb4>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0214 	bic.w	r2, r2, #20
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e027      	b.n	8006d70 <HAL_DMA_IRQHandler+0xcc4>
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 020a 	bic.w	r2, r2, #10
 8006d6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8097 	beq.w	8006eb8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d92:	e091      	b.n	8006eb8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8088 	beq.w	8006eba <HAL_DMA_IRQHandler+0xe0e>
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8082 	beq.w	8006eba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a41      	ldr	r2, [pc, #260]	@ (8006ec0 <HAL_DMA_IRQHandler+0xe14>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a3f      	ldr	r2, [pc, #252]	@ (8006ec4 <HAL_DMA_IRQHandler+0xe18>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec8 <HAL_DMA_IRQHandler+0xe1c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8006ecc <HAL_DMA_IRQHandler+0xe20>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3b      	ldr	r2, [pc, #236]	@ (8006ed0 <HAL_DMA_IRQHandler+0xe24>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a39      	ldr	r2, [pc, #228]	@ (8006ed4 <HAL_DMA_IRQHandler+0xe28>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a38      	ldr	r2, [pc, #224]	@ (8006ed8 <HAL_DMA_IRQHandler+0xe2c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a36      	ldr	r2, [pc, #216]	@ (8006edc <HAL_DMA_IRQHandler+0xe30>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a35      	ldr	r2, [pc, #212]	@ (8006ee0 <HAL_DMA_IRQHandler+0xe34>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a33      	ldr	r2, [pc, #204]	@ (8006ee4 <HAL_DMA_IRQHandler+0xe38>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a32      	ldr	r2, [pc, #200]	@ (8006ee8 <HAL_DMA_IRQHandler+0xe3c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a30      	ldr	r2, [pc, #192]	@ (8006eec <HAL_DMA_IRQHandler+0xe40>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2f      	ldr	r2, [pc, #188]	@ (8006ef0 <HAL_DMA_IRQHandler+0xe44>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef4 <HAL_DMA_IRQHandler+0xe48>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2c      	ldr	r2, [pc, #176]	@ (8006ef8 <HAL_DMA_IRQHandler+0xe4c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xdaa>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2a      	ldr	r2, [pc, #168]	@ (8006efc <HAL_DMA_IRQHandler+0xe50>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d108      	bne.n	8006e68 <HAL_DMA_IRQHandler+0xdbc>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 021c 	bic.w	r2, r2, #28
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e007      	b.n	8006e78 <HAL_DMA_IRQHandler+0xdcc>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 020e 	bic.w	r2, r2, #14
 8006e76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	e004      	b.n	8006eba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006eb0:	bf00      	nop
 8006eb2:	e002      	b.n	8006eba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb4:	bf00      	nop
 8006eb6:	e000      	b.n	8006eba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006eba:	3728      	adds	r7, #40	@ 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8

08006f00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a7f      	ldr	r2, [pc, #508]	@ (800711c <DMA_SetConfig+0x21c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d072      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a7d      	ldr	r2, [pc, #500]	@ (8007120 <DMA_SetConfig+0x220>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d06d      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a7c      	ldr	r2, [pc, #496]	@ (8007124 <DMA_SetConfig+0x224>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d068      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a7a      	ldr	r2, [pc, #488]	@ (8007128 <DMA_SetConfig+0x228>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d063      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a79      	ldr	r2, [pc, #484]	@ (800712c <DMA_SetConfig+0x22c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d05e      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a77      	ldr	r2, [pc, #476]	@ (8007130 <DMA_SetConfig+0x230>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d059      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a76      	ldr	r2, [pc, #472]	@ (8007134 <DMA_SetConfig+0x234>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d054      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a74      	ldr	r2, [pc, #464]	@ (8007138 <DMA_SetConfig+0x238>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d04f      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a73      	ldr	r2, [pc, #460]	@ (800713c <DMA_SetConfig+0x23c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d04a      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a71      	ldr	r2, [pc, #452]	@ (8007140 <DMA_SetConfig+0x240>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d045      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a70      	ldr	r2, [pc, #448]	@ (8007144 <DMA_SetConfig+0x244>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d040      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8007148 <DMA_SetConfig+0x248>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d03b      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a6d      	ldr	r2, [pc, #436]	@ (800714c <DMA_SetConfig+0x24c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d036      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8007150 <DMA_SetConfig+0x250>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d031      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a6a      	ldr	r2, [pc, #424]	@ (8007154 <DMA_SetConfig+0x254>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d02c      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a68      	ldr	r2, [pc, #416]	@ (8007158 <DMA_SetConfig+0x258>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d027      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a67      	ldr	r2, [pc, #412]	@ (800715c <DMA_SetConfig+0x25c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d022      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a65      	ldr	r2, [pc, #404]	@ (8007160 <DMA_SetConfig+0x260>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01d      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a64      	ldr	r2, [pc, #400]	@ (8007164 <DMA_SetConfig+0x264>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d018      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a62      	ldr	r2, [pc, #392]	@ (8007168 <DMA_SetConfig+0x268>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a61      	ldr	r2, [pc, #388]	@ (800716c <DMA_SetConfig+0x26c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00e      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8007170 <DMA_SetConfig+0x270>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d009      	beq.n	800700a <DMA_SetConfig+0x10a>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8007174 <DMA_SetConfig+0x274>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d004      	beq.n	800700a <DMA_SetConfig+0x10a>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a5c      	ldr	r2, [pc, #368]	@ (8007178 <DMA_SetConfig+0x278>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d101      	bne.n	800700e <DMA_SetConfig+0x10e>
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <DMA_SetConfig+0x110>
 800700e:	2300      	movs	r3, #0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00d      	beq.n	8007030 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800701c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800702e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a39      	ldr	r2, [pc, #228]	@ (800711c <DMA_SetConfig+0x21c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d04a      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a38      	ldr	r2, [pc, #224]	@ (8007120 <DMA_SetConfig+0x220>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d045      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a36      	ldr	r2, [pc, #216]	@ (8007124 <DMA_SetConfig+0x224>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d040      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a35      	ldr	r2, [pc, #212]	@ (8007128 <DMA_SetConfig+0x228>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d03b      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a33      	ldr	r2, [pc, #204]	@ (800712c <DMA_SetConfig+0x22c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d036      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a32      	ldr	r2, [pc, #200]	@ (8007130 <DMA_SetConfig+0x230>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d031      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a30      	ldr	r2, [pc, #192]	@ (8007134 <DMA_SetConfig+0x234>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d02c      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2f      	ldr	r2, [pc, #188]	@ (8007138 <DMA_SetConfig+0x238>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d027      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2d      	ldr	r2, [pc, #180]	@ (800713c <DMA_SetConfig+0x23c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2c      	ldr	r2, [pc, #176]	@ (8007140 <DMA_SetConfig+0x240>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d01d      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2a      	ldr	r2, [pc, #168]	@ (8007144 <DMA_SetConfig+0x244>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a29      	ldr	r2, [pc, #164]	@ (8007148 <DMA_SetConfig+0x248>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a27      	ldr	r2, [pc, #156]	@ (800714c <DMA_SetConfig+0x24c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a26      	ldr	r2, [pc, #152]	@ (8007150 <DMA_SetConfig+0x250>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a24      	ldr	r2, [pc, #144]	@ (8007154 <DMA_SetConfig+0x254>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <DMA_SetConfig+0x1d0>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a23      	ldr	r2, [pc, #140]	@ (8007158 <DMA_SetConfig+0x258>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d101      	bne.n	80070d4 <DMA_SetConfig+0x1d4>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <DMA_SetConfig+0x1d6>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d059      	beq.n	800718e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	223f      	movs	r2, #63	@ 0x3f
 80070e4:	409a      	lsls	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80070f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b40      	cmp	r3, #64	@ 0x40
 8007108:	d138      	bne.n	800717c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800711a:	e086      	b.n	800722a <DMA_SetConfig+0x32a>
 800711c:	40020010 	.word	0x40020010
 8007120:	40020028 	.word	0x40020028
 8007124:	40020040 	.word	0x40020040
 8007128:	40020058 	.word	0x40020058
 800712c:	40020070 	.word	0x40020070
 8007130:	40020088 	.word	0x40020088
 8007134:	400200a0 	.word	0x400200a0
 8007138:	400200b8 	.word	0x400200b8
 800713c:	40020410 	.word	0x40020410
 8007140:	40020428 	.word	0x40020428
 8007144:	40020440 	.word	0x40020440
 8007148:	40020458 	.word	0x40020458
 800714c:	40020470 	.word	0x40020470
 8007150:	40020488 	.word	0x40020488
 8007154:	400204a0 	.word	0x400204a0
 8007158:	400204b8 	.word	0x400204b8
 800715c:	58025408 	.word	0x58025408
 8007160:	5802541c 	.word	0x5802541c
 8007164:	58025430 	.word	0x58025430
 8007168:	58025444 	.word	0x58025444
 800716c:	58025458 	.word	0x58025458
 8007170:	5802546c 	.word	0x5802546c
 8007174:	58025480 	.word	0x58025480
 8007178:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]
}
 800718c:	e04d      	b.n	800722a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a29      	ldr	r2, [pc, #164]	@ (8007238 <DMA_SetConfig+0x338>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d022      	beq.n	80071de <DMA_SetConfig+0x2de>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a27      	ldr	r2, [pc, #156]	@ (800723c <DMA_SetConfig+0x33c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01d      	beq.n	80071de <DMA_SetConfig+0x2de>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a26      	ldr	r2, [pc, #152]	@ (8007240 <DMA_SetConfig+0x340>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d018      	beq.n	80071de <DMA_SetConfig+0x2de>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a24      	ldr	r2, [pc, #144]	@ (8007244 <DMA_SetConfig+0x344>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <DMA_SetConfig+0x2de>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a23      	ldr	r2, [pc, #140]	@ (8007248 <DMA_SetConfig+0x348>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <DMA_SetConfig+0x2de>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a21      	ldr	r2, [pc, #132]	@ (800724c <DMA_SetConfig+0x34c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <DMA_SetConfig+0x2de>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a20      	ldr	r2, [pc, #128]	@ (8007250 <DMA_SetConfig+0x350>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <DMA_SetConfig+0x2de>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1e      	ldr	r2, [pc, #120]	@ (8007254 <DMA_SetConfig+0x354>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <DMA_SetConfig+0x2e2>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <DMA_SetConfig+0x2e4>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d020      	beq.n	800722a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ec:	f003 031f 	and.w	r3, r3, #31
 80071f0:	2201      	movs	r2, #1
 80071f2:	409a      	lsls	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	d108      	bne.n	800721a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	60da      	str	r2, [r3, #12]
}
 8007218:	e007      	b.n	800722a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	60da      	str	r2, [r3, #12]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	58025408 	.word	0x58025408
 800723c:	5802541c 	.word	0x5802541c
 8007240:	58025430 	.word	0x58025430
 8007244:	58025444 	.word	0x58025444
 8007248:	58025458 	.word	0x58025458
 800724c:	5802546c 	.word	0x5802546c
 8007250:	58025480 	.word	0x58025480
 8007254:	58025494 	.word	0x58025494

08007258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a42      	ldr	r2, [pc, #264]	@ (8007370 <DMA_CalcBaseAndBitshift+0x118>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d04a      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a41      	ldr	r2, [pc, #260]	@ (8007374 <DMA_CalcBaseAndBitshift+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d045      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a3f      	ldr	r2, [pc, #252]	@ (8007378 <DMA_CalcBaseAndBitshift+0x120>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d040      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3e      	ldr	r2, [pc, #248]	@ (800737c <DMA_CalcBaseAndBitshift+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d03b      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3c      	ldr	r2, [pc, #240]	@ (8007380 <DMA_CalcBaseAndBitshift+0x128>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d036      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a3b      	ldr	r2, [pc, #236]	@ (8007384 <DMA_CalcBaseAndBitshift+0x12c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d031      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a39      	ldr	r2, [pc, #228]	@ (8007388 <DMA_CalcBaseAndBitshift+0x130>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d02c      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a38      	ldr	r2, [pc, #224]	@ (800738c <DMA_CalcBaseAndBitshift+0x134>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d027      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a36      	ldr	r2, [pc, #216]	@ (8007390 <DMA_CalcBaseAndBitshift+0x138>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d022      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a35      	ldr	r2, [pc, #212]	@ (8007394 <DMA_CalcBaseAndBitshift+0x13c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d01d      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a33      	ldr	r2, [pc, #204]	@ (8007398 <DMA_CalcBaseAndBitshift+0x140>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d018      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a32      	ldr	r2, [pc, #200]	@ (800739c <DMA_CalcBaseAndBitshift+0x144>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d013      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a30      	ldr	r2, [pc, #192]	@ (80073a0 <DMA_CalcBaseAndBitshift+0x148>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00e      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2f      	ldr	r2, [pc, #188]	@ (80073a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2d      	ldr	r2, [pc, #180]	@ (80073a8 <DMA_CalcBaseAndBitshift+0x150>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <DMA_CalcBaseAndBitshift+0xa8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2c      	ldr	r2, [pc, #176]	@ (80073ac <DMA_CalcBaseAndBitshift+0x154>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <DMA_CalcBaseAndBitshift+0xac>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <DMA_CalcBaseAndBitshift+0xae>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d024      	beq.n	8007354 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	3b10      	subs	r3, #16
 8007312:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <DMA_CalcBaseAndBitshift+0x158>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	091b      	lsrs	r3, r3, #4
 800731a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	4a24      	ldr	r2, [pc, #144]	@ (80073b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007324:	5cd3      	ldrb	r3, [r2, r3]
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b03      	cmp	r3, #3
 8007330:	d908      	bls.n	8007344 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	4b1f      	ldr	r3, [pc, #124]	@ (80073b8 <DMA_CalcBaseAndBitshift+0x160>)
 800733a:	4013      	ands	r3, r2
 800733c:	1d1a      	adds	r2, r3, #4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	659a      	str	r2, [r3, #88]	@ 0x58
 8007342:	e00d      	b.n	8007360 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	4b1b      	ldr	r3, [pc, #108]	@ (80073b8 <DMA_CalcBaseAndBitshift+0x160>)
 800734c:	4013      	ands	r3, r2
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6593      	str	r3, [r2, #88]	@ 0x58
 8007352:	e005      	b.n	8007360 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40020010 	.word	0x40020010
 8007374:	40020028 	.word	0x40020028
 8007378:	40020040 	.word	0x40020040
 800737c:	40020058 	.word	0x40020058
 8007380:	40020070 	.word	0x40020070
 8007384:	40020088 	.word	0x40020088
 8007388:	400200a0 	.word	0x400200a0
 800738c:	400200b8 	.word	0x400200b8
 8007390:	40020410 	.word	0x40020410
 8007394:	40020428 	.word	0x40020428
 8007398:	40020440 	.word	0x40020440
 800739c:	40020458 	.word	0x40020458
 80073a0:	40020470 	.word	0x40020470
 80073a4:	40020488 	.word	0x40020488
 80073a8:	400204a0 	.word	0x400204a0
 80073ac:	400204b8 	.word	0x400204b8
 80073b0:	aaaaaaab 	.word	0xaaaaaaab
 80073b4:	080123cc 	.word	0x080123cc
 80073b8:	fffffc00 	.word	0xfffffc00

080073bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d120      	bne.n	8007412 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d858      	bhi.n	800748a <DMA_CheckFifoParam+0xce>
 80073d8:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <DMA_CheckFifoParam+0x24>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	080073f1 	.word	0x080073f1
 80073e4:	08007403 	.word	0x08007403
 80073e8:	080073f1 	.word	0x080073f1
 80073ec:	0800748b 	.word	0x0800748b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d048      	beq.n	800748e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007400:	e045      	b.n	800748e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800740a:	d142      	bne.n	8007492 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007410:	e03f      	b.n	8007492 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800741a:	d123      	bne.n	8007464 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007420:	2b03      	cmp	r3, #3
 8007422:	d838      	bhi.n	8007496 <DMA_CheckFifoParam+0xda>
 8007424:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <DMA_CheckFifoParam+0x70>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	0800743d 	.word	0x0800743d
 8007430:	08007443 	.word	0x08007443
 8007434:	0800743d 	.word	0x0800743d
 8007438:	08007455 	.word	0x08007455
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
        break;
 8007440:	e030      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d025      	beq.n	800749a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007452:	e022      	b.n	800749a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800745c:	d11f      	bne.n	800749e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007462:	e01c      	b.n	800749e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007468:	2b02      	cmp	r3, #2
 800746a:	d902      	bls.n	8007472 <DMA_CheckFifoParam+0xb6>
 800746c:	2b03      	cmp	r3, #3
 800746e:	d003      	beq.n	8007478 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007470:	e018      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	73fb      	strb	r3, [r7, #15]
        break;
 8007476:	e015      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00e      	beq.n	80074a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
    break;
 8007488:	e00b      	b.n	80074a2 <DMA_CheckFifoParam+0xe6>
        break;
 800748a:	bf00      	nop
 800748c:	e00a      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        break;
 800748e:	bf00      	nop
 8007490:	e008      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        break;
 8007492:	bf00      	nop
 8007494:	e006      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        break;
 8007496:	bf00      	nop
 8007498:	e004      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        break;
 800749a:	bf00      	nop
 800749c:	e002      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
        break;
 800749e:	bf00      	nop
 80074a0:	e000      	b.n	80074a4 <DMA_CheckFifoParam+0xe8>
    break;
 80074a2:	bf00      	nop
    }
  }

  return status;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop

080074b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a38      	ldr	r2, [pc, #224]	@ (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a36      	ldr	r2, [pc, #216]	@ (80075ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01d      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a35      	ldr	r2, [pc, #212]	@ (80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a33      	ldr	r2, [pc, #204]	@ (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a32      	ldr	r2, [pc, #200]	@ (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a30      	ldr	r2, [pc, #192]	@ (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a2f      	ldr	r2, [pc, #188]	@ (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2d      	ldr	r2, [pc, #180]	@ (80075c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d101      	bne.n	8007516 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007516:	2300      	movs	r3, #0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	3b08      	subs	r3, #8
 8007524:	4a28      	ldr	r2, [pc, #160]	@ (80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007526:	fba2 2303 	umull	r2, r3, r2, r3
 800752a:	091b      	lsrs	r3, r3, #4
 800752c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	4b26      	ldr	r3, [pc, #152]	@ (80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	461a      	mov	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a24      	ldr	r2, [pc, #144]	@ (80075d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007540:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f003 031f 	and.w	r3, r3, #31
 8007548:	2201      	movs	r2, #1
 800754a:	409a      	lsls	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007550:	e024      	b.n	800759c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	3b10      	subs	r3, #16
 800755a:	4a1e      	ldr	r2, [pc, #120]	@ (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800755c:	fba2 2303 	umull	r2, r3, r2, r3
 8007560:	091b      	lsrs	r3, r3, #4
 8007562:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4a1c      	ldr	r2, [pc, #112]	@ (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d806      	bhi.n	800757a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4a1b      	ldr	r2, [pc, #108]	@ (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d902      	bls.n	800757a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3308      	adds	r3, #8
 8007578:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4b18      	ldr	r3, [pc, #96]	@ (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a16      	ldr	r2, [pc, #88]	@ (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800758c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2201      	movs	r2, #1
 8007596:	409a      	lsls	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	58025408 	.word	0x58025408
 80075ac:	5802541c 	.word	0x5802541c
 80075b0:	58025430 	.word	0x58025430
 80075b4:	58025444 	.word	0x58025444
 80075b8:	58025458 	.word	0x58025458
 80075bc:	5802546c 	.word	0x5802546c
 80075c0:	58025480 	.word	0x58025480
 80075c4:	58025494 	.word	0x58025494
 80075c8:	cccccccd 	.word	0xcccccccd
 80075cc:	16009600 	.word	0x16009600
 80075d0:	58025880 	.word	0x58025880
 80075d4:	aaaaaaab 	.word	0xaaaaaaab
 80075d8:	400204b8 	.word	0x400204b8
 80075dc:	4002040f 	.word	0x4002040f
 80075e0:	10008200 	.word	0x10008200
 80075e4:	40020880 	.word	0x40020880

080075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d04a      	beq.n	8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b08      	cmp	r3, #8
 8007602:	d847      	bhi.n	8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a25      	ldr	r2, [pc, #148]	@ (80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d022      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a24      	ldr	r2, [pc, #144]	@ (80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d01d      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a22      	ldr	r2, [pc, #136]	@ (80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d018      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a21      	ldr	r2, [pc, #132]	@ (80076ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1f      	ldr	r2, [pc, #124]	@ (80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d00e      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1e      	ldr	r2, [pc, #120]	@ (80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d009      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d004      	beq.n	8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d101      	bne.n	8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4b17      	ldr	r3, [pc, #92]	@ (80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	461a      	mov	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a15      	ldr	r2, [pc, #84]	@ (80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007670:	671a      	str	r2, [r3, #112]	@ 0x70
 8007672:	e009      	b.n	8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4b14      	ldr	r3, [pc, #80]	@ (80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a11      	ldr	r2, [pc, #68]	@ (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007686:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3b01      	subs	r3, #1
 800768c:	2201      	movs	r2, #1
 800768e:	409a      	lsls	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007694:	bf00      	nop
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	58025408 	.word	0x58025408
 80076a4:	5802541c 	.word	0x5802541c
 80076a8:	58025430 	.word	0x58025430
 80076ac:	58025444 	.word	0x58025444
 80076b0:	58025458 	.word	0x58025458
 80076b4:	5802546c 	.word	0x5802546c
 80076b8:	58025480 	.word	0x58025480
 80076bc:	58025494 	.word	0x58025494
 80076c0:	1600963f 	.word	0x1600963f
 80076c4:	58025940 	.word	0x58025940
 80076c8:	1000823f 	.word	0x1000823f
 80076cc:	40020940 	.word	0x40020940

080076d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b098      	sub	sp, #96	@ 0x60
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80076d8:	4a84      	ldr	r2, [pc, #528]	@ (80078ec <HAL_FDCAN_Init+0x21c>)
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	4611      	mov	r1, r2
 80076e0:	224c      	movs	r2, #76	@ 0x4c
 80076e2:	4618      	mov	r0, r3
 80076e4:	f00a f892 	bl	801180c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e1c6      	b.n	8007a80 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a7e      	ldr	r2, [pc, #504]	@ (80078f0 <HAL_FDCAN_Init+0x220>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d106      	bne.n	800770a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fa fcd6 	bl	80020d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0210 	bic.w	r2, r2, #16
 8007732:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007734:	f7fb f9ae 	bl	8002a94 <HAL_GetTick>
 8007738:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800773a:	e014      	b.n	8007766 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800773c:	f7fb f9aa 	bl	8002a94 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b0a      	cmp	r3, #10
 8007748:	d90d      	bls.n	8007766 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007750:	f043 0201 	orr.w	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2203      	movs	r2, #3
 800775e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e18c      	b.n	8007a80 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d0e3      	beq.n	800773c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0201 	orr.w	r2, r2, #1
 8007782:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007784:	f7fb f986 	bl	8002a94 <HAL_GetTick>
 8007788:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800778a:	e014      	b.n	80077b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800778c:	f7fb f982 	bl	8002a94 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b0a      	cmp	r3, #10
 8007798:	d90d      	bls.n	80077b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077a0:	f043 0201 	orr.w	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2203      	movs	r2, #3
 80077ae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e164      	b.n	8007a80 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d0e3      	beq.n	800778c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0202 	orr.w	r2, r2, #2
 80077d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c1b      	ldrb	r3, [r3, #16]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d108      	bne.n	80077ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ea:	619a      	str	r2, [r3, #24]
 80077ec:	e007      	b.n	80077fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7c5b      	ldrb	r3, [r3, #17]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d108      	bne.n	8007818 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007814:	619a      	str	r2, [r3, #24]
 8007816:	e007      	b.n	8007828 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007826:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7c9b      	ldrb	r3, [r3, #18]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d108      	bne.n	8007842 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800783e:	619a      	str	r2, [r3, #24]
 8007840:	e007      	b.n	8007852 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007850:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699a      	ldr	r2, [r3, #24]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007876:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0210 	bic.w	r2, r2, #16
 8007886:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d108      	bne.n	80078a2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0204 	orr.w	r2, r2, #4
 800789e:	619a      	str	r2, [r3, #24]
 80078a0:	e030      	b.n	8007904 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02c      	beq.n	8007904 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d020      	beq.n	80078f4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078c0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0210 	orr.w	r2, r2, #16
 80078d0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d114      	bne.n	8007904 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699a      	ldr	r2, [r3, #24]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0220 	orr.w	r2, r2, #32
 80078e8:	619a      	str	r2, [r3, #24]
 80078ea:	e00b      	b.n	8007904 <HAL_FDCAN_Init+0x234>
 80078ec:	08012370 	.word	0x08012370
 80078f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0220 	orr.w	r2, r2, #32
 8007902:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	3b01      	subs	r3, #1
 800790a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	3b01      	subs	r3, #1
 8007912:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007914:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800791c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	3b01      	subs	r3, #1
 8007926:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800792c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800792e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007938:	d115      	bne.n	8007966 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	3b01      	subs	r3, #1
 8007946:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007948:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800794e:	3b01      	subs	r3, #1
 8007950:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007952:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795a:	3b01      	subs	r3, #1
 800795c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007962:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007964:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798c:	4413      	add	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d011      	beq.n	80079b6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800799a:	f023 0107 	bic.w	r1, r3, #7
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	3360      	adds	r3, #96	@ 0x60
 80079a6:	443b      	add	r3, r7
 80079a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d011      	beq.n	80079e2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079c6:	f023 0107 	bic.w	r1, r3, #7
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	3360      	adds	r3, #96	@ 0x60
 80079d2:	443b      	add	r3, r7
 80079d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d012      	beq.n	8007a10 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079f2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	3360      	adds	r3, #96	@ 0x60
 80079fe:	443b      	add	r3, r7
 8007a00:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a04:	011a      	lsls	r2, r3, #4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d012      	beq.n	8007a3e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a20:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	3360      	adds	r3, #96	@ 0x60
 8007a2c:	443b      	add	r3, r7
 8007a2e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a32:	021a      	lsls	r2, r3, #8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a11      	ldr	r2, [pc, #68]	@ (8007a88 <HAL_FDCAN_Init+0x3b8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d107      	bne.n	8007a58 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f022 0203 	bic.w	r2, r2, #3
 8007a56:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fdeb 	bl	800864c <FDCAN_CalcultateRamBlockAddresses>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007a7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3760      	adds	r7, #96	@ 0x60
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	4000a000 	.word	0x4000a000

08007a8c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007a9c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d002      	beq.n	8007aaa <HAL_FDCAN_ConfigFilter+0x1e>
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d157      	bne.n	8007b5a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d12b      	bne.n	8007b0a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b07      	cmp	r3, #7
 8007ab8:	d10d      	bne.n	8007ad6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007ac6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007acc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007ace:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e00e      	b.n	8007af4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007ae2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007aea:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	e025      	b.n	8007b56 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	075a      	lsls	r2, r3, #29
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	2b07      	cmp	r3, #7
 8007b1e:	d103      	bne.n	8007b28 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	613b      	str	r3, [r7, #16]
 8007b26:	e006      	b.n	8007b36 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	079a      	lsls	r2, r3, #30
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4413      	add	r3, r2
 8007b42:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e008      	b.n	8007b6c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b60:	f043 0202 	orr.w	r2, r3, #2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d111      	bne.n	8007bb0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699a      	ldr	r2, [r3, #24]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0201 	bic.w	r2, r2, #1
 8007ba2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	e008      	b.n	8007bc2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
  }
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d141      	bne.n	8007c6a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007bee:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bfc:	f043 0220 	orr.w	r2, r3, #32
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e038      	b.n	8007c7c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e026      	b.n	8007c7c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007c36:	0c1b      	lsrs	r3, r3, #16
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fe87 	bl	8008958 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2101      	movs	r1, #1
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	fa01 f202 	lsl.w	r2, r1, r2
 8007c56:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	409a      	lsls	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e008      	b.n	8007c7c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c70:	f043 0208 	orr.w	r2, r3, #8
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
  }
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b08b      	sub	sp, #44	@ 0x2c
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c9c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007c9e:	7efb      	ldrb	r3, [r7, #27]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f040 8149 	bne.w	8007f38 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b40      	cmp	r3, #64	@ 0x40
 8007caa:	d14c      	bne.n	8007d46 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cb4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d109      	bne.n	8007cd0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cc2:	f043 0220 	orr.w	r2, r3, #32
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e13c      	b.n	8007f4a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ce6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e12a      	b.n	8007f4a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d04:	d10a      	bne.n	8007d1c <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d16:	d101      	bne.n	8007d1c <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d38:	69f9      	ldr	r1, [r7, #28]
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d44:	e068      	b.n	8007e18 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b41      	cmp	r3, #65	@ 0x41
 8007d4a:	d14c      	bne.n	8007de6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d62:	f043 0220 	orr.w	r2, r3, #32
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e0ec      	b.n	8007f4a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d109      	bne.n	8007d94 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e0da      	b.n	8007f4a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007da4:	d10a      	bne.n	8007dbc <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007dae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007db2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db6:	d101      	bne.n	8007dbc <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007db8:	2301      	movs	r3, #1
 8007dba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dc4:	0a1b      	lsrs	r3, r3, #8
 8007dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dd8:	69f9      	ldr	r1, [r7, #28]
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de4:	e018      	b.n	8007e18 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d309      	bcc.n	8007e04 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df6:	f043 0220 	orr.w	r2, r3, #32
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0a2      	b.n	8007f4a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	fb01 f303 	mul.w	r3, r1, r3
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d107      	bne.n	8007e3c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	0c9b      	lsrs	r3, r3, #18
 8007e32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	e005      	b.n	8007e48 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	3304      	adds	r3, #4
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	0c1b      	lsrs	r3, r3, #16
 8007e76:	f003 020f 	and.w	r2, r3, #15
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	0e1b      	lsrs	r3, r3, #24
 8007e9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	0fda      	lsrs	r2, r3, #31
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	623b      	str	r3, [r7, #32]
 8007ebc:	e00a      	b.n	8007ed4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	440b      	add	r3, r1
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	623b      	str	r3, [r7, #32]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8007f58 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007eda:	5cd3      	ldrb	r3, [r2, r3]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d3ec      	bcc.n	8007ebe <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b40      	cmp	r3, #64	@ 0x40
 8007ee8:	d105      	bne.n	8007ef6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007ef4:	e01e      	b.n	8007f34 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b41      	cmp	r3, #65	@ 0x41
 8007efa:	d105      	bne.n	8007f08 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007f06:	e015      	b.n	8007f34 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b1f      	cmp	r3, #31
 8007f0c:	d808      	bhi.n	8007f20 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2101      	movs	r1, #1
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	fa01 f202 	lsl.w	r2, r1, r2
 8007f1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007f1e:	e009      	b.n	8007f34 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 021f 	and.w	r2, r3, #31
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e008      	b.n	8007f4a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f3e:	f043 0208 	orr.w	r2, r3, #8
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
  }
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	372c      	adds	r7, #44	@ 0x2c
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	080123d4 	.word	0x080123d4

08007f5c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f6e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d002      	beq.n	8007f7c <HAL_FDCAN_ActivateNotification+0x20>
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d155      	bne.n	8008028 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d108      	bne.n	8007f9c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f9a:	e014      	b.n	8007fc6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d108      	bne.n	8007fbe <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0202 	orr.w	r2, r2, #2
 8007fba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007fbc:	e003      	b.n	8007fc6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d009      	beq.n	8007fe4 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	4b0f      	ldr	r3, [pc, #60]	@ (8008048 <HAL_FDCAN_ActivateNotification+0xec>)
 800800c:	4013      	ands	r3, r2
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	430b      	orrs	r3, r1
 8008014:	6553      	str	r3, [r2, #84]	@ 0x54
 8008016:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <HAL_FDCAN_ActivateNotification+0xf0>)
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	0f9b      	lsrs	r3, r3, #30
 800801e:	490b      	ldr	r1, [pc, #44]	@ (800804c <HAL_FDCAN_ActivateNotification+0xf0>)
 8008020:	4313      	orrs	r3, r2
 8008022:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	e008      	b.n	800803a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800802e:	f043 0202 	orr.w	r2, r3, #2
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	3fcfffff 	.word	0x3fcfffff
 800804c:	4000a800 	.word	0x4000a800

08008050 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b096      	sub	sp, #88	@ 0x58
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008058:	4b9a      	ldr	r3, [pc, #616]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	079b      	lsls	r3, r3, #30
 800805e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8008060:	4b98      	ldr	r3, [pc, #608]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	079b      	lsls	r3, r3, #30
 8008066:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008068:	4013      	ands	r3, r2
 800806a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008072:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008076:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008080:	4013      	ands	r3, r2
 8008082:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008096:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008098:	4013      	ands	r3, r2
 800809a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080b0:	4013      	ands	r3, r2
 80080b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ba:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80080be:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080c8:	4013      	ands	r3, r2
 80080ca:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80080d6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080e0:	4013      	ands	r3, r2
 80080e2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80080f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d010      	beq.n	8008122 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008114:	651a      	str	r2, [r3, #80]	@ 0x50
 8008116:	4b6b      	ldr	r3, [pc, #428]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 8008118:	2200      	movs	r2, #0
 800811a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa54 	bl	80085ca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008124:	0a9b      	lsrs	r3, r3, #10
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01d      	beq.n	800816a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	0a9b      	lsrs	r3, r3, #10
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d017      	beq.n	800816a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008142:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800814c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800814e:	4013      	ands	r3, r2
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800815a:	651a      	str	r2, [r3, #80]	@ 0x50
 800815c:	4b59      	ldr	r3, [pc, #356]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 800815e:	2200      	movs	r2, #0
 8008160:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008162:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fa07 	bl	8008578 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800816a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00d      	beq.n	800818c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008176:	4b54      	ldr	r3, [pc, #336]	@ (80082c8 <HAL_FDCAN_IRQHandler+0x278>)
 8008178:	400b      	ands	r3, r1
 800817a:	6513      	str	r3, [r2, #80]	@ 0x50
 800817c:	4a51      	ldr	r2, [pc, #324]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 800817e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008180:	0f9b      	lsrs	r3, r3, #30
 8008182:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8008184:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9c0 	bl	800850c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800818c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008198:	4b4b      	ldr	r3, [pc, #300]	@ (80082c8 <HAL_FDCAN_IRQHandler+0x278>)
 800819a:	400b      	ands	r3, r1
 800819c:	6513      	str	r3, [r2, #80]	@ 0x50
 800819e:	4a49      	ldr	r2, [pc, #292]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 80081a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a2:	0f9b      	lsrs	r3, r3, #30
 80081a4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80081a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f9ba 	bl	8008522 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80081ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00d      	beq.n	80081d0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80081ba:	4b43      	ldr	r3, [pc, #268]	@ (80082c8 <HAL_FDCAN_IRQHandler+0x278>)
 80081bc:	400b      	ands	r3, r1
 80081be:	6513      	str	r3, [r2, #80]	@ 0x50
 80081c0:	4a40      	ldr	r2, [pc, #256]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 80081c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081c4:	0f9b      	lsrs	r3, r3, #30
 80081c6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80081c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f9 fa56 	bl	800167c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80081d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00d      	beq.n	80081f2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80081dc:	4b3a      	ldr	r3, [pc, #232]	@ (80082c8 <HAL_FDCAN_IRQHandler+0x278>)
 80081de:	400b      	ands	r3, r1
 80081e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80081e2:	4a38      	ldr	r2, [pc, #224]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 80081e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e6:	0f9b      	lsrs	r3, r3, #30
 80081e8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80081ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f9a3 	bl	8008538 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80081f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f4:	0adb      	lsrs	r3, r3, #11
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d010      	beq.n	8008220 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80081fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008200:	0adb      	lsrs	r3, r3, #11
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008212:	651a      	str	r2, [r3, #80]	@ 0x50
 8008214:	4b2b      	ldr	r3, [pc, #172]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 8008216:	2200      	movs	r2, #0
 8008218:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f997 	bl	800854e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8008220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008222:	0a5b      	lsrs	r3, r3, #9
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01d      	beq.n	8008268 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	0a5b      	lsrs	r3, r3, #9
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d017      	beq.n	8008268 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008240:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800824a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800824c:	4013      	ands	r3, r2
 800824e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008258:	651a      	str	r2, [r3, #80]	@ 0x50
 800825a:	4b1a      	ldr	r3, [pc, #104]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 800825c:	2200      	movs	r2, #0
 800825e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008260:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f97d 	bl	8008562 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800826a:	0cdb      	lsrs	r3, r3, #19
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008276:	0cdb      	lsrs	r3, r3, #19
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008288:	651a      	str	r2, [r3, #80]	@ 0x50
 800828a:	4b0e      	ldr	r3, [pc, #56]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 800828c:	2200      	movs	r2, #0
 800828e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f97c 	bl	800858e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	0c1b      	lsrs	r3, r3, #16
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d010      	beq.n	80082d0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80082b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80082b8:	4b02      	ldr	r3, [pc, #8]	@ (80082c4 <HAL_FDCAN_IRQHandler+0x274>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	e004      	b.n	80082cc <HAL_FDCAN_IRQHandler+0x27c>
 80082c2:	bf00      	nop
 80082c4:	4000a800 	.word	0x4000a800
 80082c8:	3fcfffff 	.word	0x3fcfffff
 80082cc:	f000 f969 	bl	80085a2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80082d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082d2:	0c9b      	lsrs	r3, r3, #18
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d010      	beq.n	80082fe <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80082dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082de:	0c9b      	lsrs	r3, r3, #18
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80082f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80082f2:	4b83      	ldr	r3, [pc, #524]	@ (8008500 <HAL_FDCAN_IRQHandler+0x4b0>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f95c 	bl	80085b6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80082fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008300:	0c5b      	lsrs	r3, r3, #17
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d015      	beq.n	8008336 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	0c5b      	lsrs	r3, r3, #17
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800831e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008320:	4b77      	ldr	r3, [pc, #476]	@ (8008500 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008322:	2200      	movs	r2, #0
 8008324:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800832c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00d      	beq.n	8008358 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008342:	4b70      	ldr	r3, [pc, #448]	@ (8008504 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008344:	400b      	ands	r3, r1
 8008346:	6513      	str	r3, [r2, #80]	@ 0x50
 8008348:	4a6d      	ldr	r2, [pc, #436]	@ (8008500 <HAL_FDCAN_IRQHandler+0x4b0>)
 800834a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800834c:	0f9b      	lsrs	r3, r3, #30
 800834e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008350:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7f9 fa94 	bl	8001880 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800835a:	2b00      	cmp	r3, #0
 800835c:	d011      	beq.n	8008382 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008364:	4b67      	ldr	r3, [pc, #412]	@ (8008504 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008366:	400b      	ands	r3, r1
 8008368:	6513      	str	r3, [r2, #80]	@ 0x50
 800836a:	4a65      	ldr	r2, [pc, #404]	@ (8008500 <HAL_FDCAN_IRQHandler+0x4b0>)
 800836c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800836e:	0f9b      	lsrs	r3, r3, #30
 8008370:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a60      	ldr	r2, [pc, #384]	@ (8008508 <HAL_FDCAN_IRQHandler+0x4b8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	f040 80ac 	bne.w	80084e6 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80a4 	beq.w	80084e6 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083b2:	4013      	ands	r3, r2
 80083b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083ca:	4013      	ands	r3, r2
 80083cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e2:	4013      	ands	r3, r2
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80083f0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	6a3a      	ldr	r2, [r7, #32]
 80083fa:	4013      	ands	r3, r2
 80083fc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8008408:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	4013      	ands	r3, r2
 8008414:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8008426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008432:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f8db 	bl	80085f2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800843c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d007      	beq.n	8008452 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008448:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800844a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f8db 	bl	8008608 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	099b      	lsrs	r3, r3, #6
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d01a      	beq.n	8008494 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	099b      	lsrs	r3, r3, #6
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d014      	beq.n	8008494 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008470:	0c1b      	lsrs	r3, r3, #16
 8008472:	b29b      	uxth	r3, r3
 8008474:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008480:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2240      	movs	r2, #64	@ 0x40
 8008488:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	6939      	ldr	r1, [r7, #16]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f8c5 	bl	800861e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80084a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f8c6 	bl	8008636 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00b      	beq.n	80084e6 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f874 	bl	80085de <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80084f6:	bf00      	nop
 80084f8:	3758      	adds	r7, #88	@ 0x58
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	4000a800 	.word	0x4000a800
 8008504:	3fcfffff 	.word	0x3fcfffff
 8008508:	4000a000 	.word	0x4000a000

0800850c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800861e:	b480      	push	{r7}
 8008620:	b085      	sub	sp, #20
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008658:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008662:	4ba7      	ldr	r3, [pc, #668]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008664:	4013      	ands	r3, r2
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	0091      	lsls	r1, r2, #2
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6812      	ldr	r2, [r2, #0]
 800866e:	430b      	orrs	r3, r1
 8008670:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800867c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008684:	041a      	lsls	r2, r3, #16
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80086a2:	4b97      	ldr	r3, [pc, #604]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	0091      	lsls	r1, r2, #2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	430b      	orrs	r3, r1
 80086b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086bc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c4:	041a      	lsls	r2, r3, #16
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	4413      	add	r3, r2
 80086da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80086e4:	4b86      	ldr	r3, [pc, #536]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	0091      	lsls	r1, r2, #2
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	430b      	orrs	r3, r1
 80086f2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086fe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	041a      	lsls	r2, r3, #16
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800871a:	fb02 f303 	mul.w	r3, r2, r3
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800872c:	4b74      	ldr	r3, [pc, #464]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800872e:	4013      	ands	r3, r2
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	0091      	lsls	r1, r2, #2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6812      	ldr	r2, [r2, #0]
 8008738:	430b      	orrs	r3, r1
 800873a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008746:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800874e:	041a      	lsls	r2, r3, #16
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	4413      	add	r3, r2
 800876a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008774:	4b62      	ldr	r3, [pc, #392]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008776:	4013      	ands	r3, r2
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	0091      	lsls	r1, r2, #2
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	430b      	orrs	r3, r1
 8008782:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800878e:	fb02 f303 	mul.w	r3, r2, r3
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	4413      	add	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80087a0:	4b57      	ldr	r3, [pc, #348]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	0091      	lsls	r1, r2, #2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	430b      	orrs	r3, r1
 80087ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ba:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087c2:	041a      	lsls	r2, r3, #16
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	4413      	add	r3, r2
 80087d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80087e2:	4b47      	ldr	r3, [pc, #284]	@ (8008900 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	0091      	lsls	r1, r2, #2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6812      	ldr	r2, [r2, #0]
 80087ee:	430b      	orrs	r3, r1
 80087f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80087fc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008804:	041a      	lsls	r2, r3, #16
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008818:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008820:	061a      	lsls	r2, r3, #24
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008830:	4b34      	ldr	r3, [pc, #208]	@ (8008904 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008832:	4413      	add	r3, r2
 8008834:	009a      	lsls	r2, r3, #2
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	441a      	add	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008866:	fb01 f303 	mul.w	r3, r1, r3
 800886a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800886c:	441a      	add	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800887e:	fb01 f303 	mul.w	r3, r1, r3
 8008882:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008896:	fb01 f303 	mul.w	r3, r1, r3
 800889a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800889c:	441a      	add	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	441a      	add	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80088c6:	fb01 f303 	mul.w	r3, r1, r3
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	441a      	add	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80088e8:	441a      	add	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f6:	4a04      	ldr	r2, [pc, #16]	@ (8008908 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d915      	bls.n	8008928 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80088fc:	e006      	b.n	800890c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80088fe:	bf00      	nop
 8008900:	ffff0003 	.word	0xffff0003
 8008904:	10002b00 	.word	0x10002b00
 8008908:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008912:	f043 0220 	orr.w	r2, r3, #32
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2203      	movs	r2, #3
 8008920:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e010      	b.n	800894a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	e005      	b.n	800893c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3304      	adds	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	429a      	cmp	r2, r3
 8008946:	d3f3      	bcc.n	8008930 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	@ 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008976:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800897e:	4313      	orrs	r3, r2
 8008980:	61fb      	str	r3, [r7, #28]
 8008982:	e00a      	b.n	800899a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800898c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008992:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008998:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80089a4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80089aa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80089b0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80089b8:	4313      	orrs	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	fb01 f303 	mul.w	r3, r1, r3
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	3304      	adds	r3, #4
 80089dc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	3304      	adds	r3, #4
 80089e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	e020      	b.n	8008a32 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	3303      	adds	r3, #3
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	3302      	adds	r3, #2
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	440b      	add	r3, r1
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a08:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	440b      	add	r3, r1
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008a16:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008a20:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	4a06      	ldr	r2, [pc, #24]	@ (8008a50 <FDCAN_CopyMessageToRAM+0xf8>)
 8008a38:	5cd3      	ldrb	r3, [r2, r3]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d3d6      	bcc.n	80089f0 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	3724      	adds	r7, #36	@ 0x24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	080123d4 	.word	0x080123d4

08008a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b089      	sub	sp, #36	@ 0x24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a62:	4b86      	ldr	r3, [pc, #536]	@ (8008c7c <HAL_GPIO_Init+0x228>)
 8008a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a66:	e18c      	b.n	8008d82 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	fa01 f303 	lsl.w	r3, r1, r3
 8008a74:	4013      	ands	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 817e 	beq.w	8008d7c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d005      	beq.n	8008a98 <HAL_GPIO_Init+0x44>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d130      	bne.n	8008afa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa8:	43db      	mvns	r3, r3
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4013      	ands	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ace:	2201      	movs	r2, #1
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad6:	43db      	mvns	r3, r3
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	4013      	ands	r3, r2
 8008adc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	091b      	lsrs	r3, r3, #4
 8008ae4:	f003 0201 	and.w	r2, r3, #1
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d017      	beq.n	8008b36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	2203      	movs	r2, #3
 8008b12:	fa02 f303 	lsl.w	r3, r2, r3
 8008b16:	43db      	mvns	r3, r3
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d123      	bne.n	8008b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	08da      	lsrs	r2, r3, #3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3208      	adds	r2, #8
 8008b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	220f      	movs	r2, #15
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	4013      	ands	r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f003 0307 	and.w	r3, r3, #7
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	08da      	lsrs	r2, r3, #3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3208      	adds	r2, #8
 8008b84:	69b9      	ldr	r1, [r7, #24]
 8008b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	2203      	movs	r2, #3
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	43db      	mvns	r3, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f003 0203 	and.w	r2, r3, #3
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80d8 	beq.w	8008d7c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8008c80 <HAL_GPIO_Init+0x22c>)
 8008bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8008c80 <HAL_GPIO_Init+0x22c>)
 8008bd4:	f043 0302 	orr.w	r3, r3, #2
 8008bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008bdc:	4b28      	ldr	r3, [pc, #160]	@ (8008c80 <HAL_GPIO_Init+0x22c>)
 8008bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bea:	4a26      	ldr	r2, [pc, #152]	@ (8008c84 <HAL_GPIO_Init+0x230>)
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	089b      	lsrs	r3, r3, #2
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	220f      	movs	r2, #15
 8008c02:	fa02 f303 	lsl.w	r3, r2, r3
 8008c06:	43db      	mvns	r3, r3
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1d      	ldr	r2, [pc, #116]	@ (8008c88 <HAL_GPIO_Init+0x234>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d04a      	beq.n	8008cac <HAL_GPIO_Init+0x258>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a1c      	ldr	r2, [pc, #112]	@ (8008c8c <HAL_GPIO_Init+0x238>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d02b      	beq.n	8008c76 <HAL_GPIO_Init+0x222>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a1b      	ldr	r2, [pc, #108]	@ (8008c90 <HAL_GPIO_Init+0x23c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d025      	beq.n	8008c72 <HAL_GPIO_Init+0x21e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a1a      	ldr	r2, [pc, #104]	@ (8008c94 <HAL_GPIO_Init+0x240>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d01f      	beq.n	8008c6e <HAL_GPIO_Init+0x21a>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a19      	ldr	r2, [pc, #100]	@ (8008c98 <HAL_GPIO_Init+0x244>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d019      	beq.n	8008c6a <HAL_GPIO_Init+0x216>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a18      	ldr	r2, [pc, #96]	@ (8008c9c <HAL_GPIO_Init+0x248>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d013      	beq.n	8008c66 <HAL_GPIO_Init+0x212>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a17      	ldr	r2, [pc, #92]	@ (8008ca0 <HAL_GPIO_Init+0x24c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00d      	beq.n	8008c62 <HAL_GPIO_Init+0x20e>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a16      	ldr	r2, [pc, #88]	@ (8008ca4 <HAL_GPIO_Init+0x250>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d007      	beq.n	8008c5e <HAL_GPIO_Init+0x20a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a15      	ldr	r2, [pc, #84]	@ (8008ca8 <HAL_GPIO_Init+0x254>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d101      	bne.n	8008c5a <HAL_GPIO_Init+0x206>
 8008c56:	2309      	movs	r3, #9
 8008c58:	e029      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	e027      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c5e:	2307      	movs	r3, #7
 8008c60:	e025      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c62:	2306      	movs	r3, #6
 8008c64:	e023      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c66:	2305      	movs	r3, #5
 8008c68:	e021      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c6a:	2304      	movs	r3, #4
 8008c6c:	e01f      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e01d      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c72:	2302      	movs	r3, #2
 8008c74:	e01b      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e019      	b.n	8008cae <HAL_GPIO_Init+0x25a>
 8008c7a:	bf00      	nop
 8008c7c:	58000080 	.word	0x58000080
 8008c80:	58024400 	.word	0x58024400
 8008c84:	58000400 	.word	0x58000400
 8008c88:	58020000 	.word	0x58020000
 8008c8c:	58020400 	.word	0x58020400
 8008c90:	58020800 	.word	0x58020800
 8008c94:	58020c00 	.word	0x58020c00
 8008c98:	58021000 	.word	0x58021000
 8008c9c:	58021400 	.word	0x58021400
 8008ca0:	58021800 	.word	0x58021800
 8008ca4:	58021c00 	.word	0x58021c00
 8008ca8:	58022400 	.word	0x58022400
 8008cac:	2300      	movs	r3, #0
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	f002 0203 	and.w	r2, r2, #3
 8008cb4:	0092      	lsls	r2, r2, #2
 8008cb6:	4093      	lsls	r3, r2
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cbe:	4938      	ldr	r1, [pc, #224]	@ (8008da0 <HAL_GPIO_Init+0x34c>)
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	089b      	lsrs	r3, r3, #2
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	43db      	mvns	r3, r3
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	43db      	mvns	r3, r3
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	4013      	ands	r3, r2
 8008d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d003      	beq.n	8008d4c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	43db      	mvns	r3, r3
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f47f ae6b 	bne.w	8008a68 <HAL_GPIO_Init+0x14>
  }
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	3724      	adds	r7, #36	@ 0x24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	58000400 	.word	0x58000400

08008da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	887b      	ldrh	r3, [r7, #2]
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e001      	b.n	8008dc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
 8008de0:	4613      	mov	r3, r2
 8008de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008de4:	787b      	ldrb	r3, [r7, #1]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008dea:	887a      	ldrh	r2, [r7, #2]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008df0:	e003      	b.n	8008dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008df2:	887b      	ldrh	r3, [r7, #2]
 8008df4:	041a      	lsls	r2, r3, #16
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	619a      	str	r2, [r3, #24]
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e10:	4b19      	ldr	r3, [pc, #100]	@ (8008e78 <HAL_PWREx_ConfigSupply+0x70>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d00a      	beq.n	8008e32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e1c:	4b16      	ldr	r3, [pc, #88]	@ (8008e78 <HAL_PWREx_ConfigSupply+0x70>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d001      	beq.n	8008e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e01f      	b.n	8008e6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e01d      	b.n	8008e6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e32:	4b11      	ldr	r3, [pc, #68]	@ (8008e78 <HAL_PWREx_ConfigSupply+0x70>)
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f023 0207 	bic.w	r2, r3, #7
 8008e3a:	490f      	ldr	r1, [pc, #60]	@ (8008e78 <HAL_PWREx_ConfigSupply+0x70>)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e42:	f7f9 fe27 	bl	8002a94 <HAL_GetTick>
 8008e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e48:	e009      	b.n	8008e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e4a:	f7f9 fe23 	bl	8002a94 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e58:	d901      	bls.n	8008e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e007      	b.n	8008e6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e5e:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <HAL_PWREx_ConfigSupply+0x70>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e6a:	d1ee      	bne.n	8008e4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	58024800 	.word	0x58024800

08008e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08c      	sub	sp, #48	@ 0x30
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e3c8      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8087 	beq.w	8008faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e9c:	4b88      	ldr	r3, [pc, #544]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ea6:	4b86      	ldr	r3, [pc, #536]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d007      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x46>
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	2b18      	cmp	r3, #24
 8008eb6:	d110      	bne.n	8008eda <HAL_RCC_OscConfig+0x5e>
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d10b      	bne.n	8008eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d06c      	beq.n	8008fa8 <HAL_RCC_OscConfig+0x12c>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d168      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e3a2      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ee2:	d106      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x76>
 8008ee4:	4b76      	ldr	r3, [pc, #472]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a75      	ldr	r2, [pc, #468]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	e02e      	b.n	8008f50 <HAL_RCC_OscConfig+0xd4>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCC_OscConfig+0x98>
 8008efa:	4b71      	ldr	r3, [pc, #452]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a70      	ldr	r2, [pc, #448]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	4b6e      	ldr	r3, [pc, #440]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f10:	6013      	str	r3, [r2, #0]
 8008f12:	e01d      	b.n	8008f50 <HAL_RCC_OscConfig+0xd4>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f1c:	d10c      	bne.n	8008f38 <HAL_RCC_OscConfig+0xbc>
 8008f1e:	4b68      	ldr	r3, [pc, #416]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a67      	ldr	r2, [pc, #412]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	4b65      	ldr	r3, [pc, #404]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a64      	ldr	r2, [pc, #400]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	e00b      	b.n	8008f50 <HAL_RCC_OscConfig+0xd4>
 8008f38:	4b61      	ldr	r3, [pc, #388]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a60      	ldr	r2, [pc, #384]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	4b5e      	ldr	r3, [pc, #376]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a5d      	ldr	r2, [pc, #372]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d013      	beq.n	8008f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f58:	f7f9 fd9c 	bl	8002a94 <HAL_GetTick>
 8008f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f60:	f7f9 fd98 	bl	8002a94 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b64      	cmp	r3, #100	@ 0x64
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e356      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f72:	4b53      	ldr	r3, [pc, #332]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f0      	beq.n	8008f60 <HAL_RCC_OscConfig+0xe4>
 8008f7e:	e014      	b.n	8008faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f80:	f7f9 fd88 	bl	8002a94 <HAL_GetTick>
 8008f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f86:	e008      	b.n	8008f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f88:	f7f9 fd84 	bl	8002a94 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	2b64      	cmp	r3, #100	@ 0x64
 8008f94:	d901      	bls.n	8008f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e342      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f9a:	4b49      	ldr	r3, [pc, #292]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1f0      	bne.n	8008f88 <HAL_RCC_OscConfig+0x10c>
 8008fa6:	e000      	b.n	8008faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 808c 	beq.w	80090d0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb8:	4b41      	ldr	r3, [pc, #260]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <HAL_RCC_OscConfig+0x162>
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	2b18      	cmp	r3, #24
 8008fd2:	d137      	bne.n	8009044 <HAL_RCC_OscConfig+0x1c8>
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d132      	bne.n	8009044 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fde:	4b38      	ldr	r3, [pc, #224]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x17a>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e314      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ff6:	4b32      	ldr	r3, [pc, #200]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f023 0219 	bic.w	r2, r3, #25
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	492f      	ldr	r1, [pc, #188]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8009004:	4313      	orrs	r3, r2
 8009006:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009008:	f7f9 fd44 	bl	8002a94 <HAL_GetTick>
 800900c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900e:	e008      	b.n	8009022 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009010:	f7f9 fd40 	bl	8002a94 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e2fe      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009022:	4b27      	ldr	r3, [pc, #156]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f0      	beq.n	8009010 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800902e:	4b24      	ldr	r3, [pc, #144]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	061b      	lsls	r3, r3, #24
 800903c:	4920      	ldr	r1, [pc, #128]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 800903e:	4313      	orrs	r3, r2
 8009040:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009042:	e045      	b.n	80090d0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d026      	beq.n	800909a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800904c:	4b1c      	ldr	r3, [pc, #112]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f023 0219 	bic.w	r2, r3, #25
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	4919      	ldr	r1, [pc, #100]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 800905a:	4313      	orrs	r3, r2
 800905c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905e:	f7f9 fd19 	bl	8002a94 <HAL_GetTick>
 8009062:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009066:	f7f9 fd15 	bl	8002a94 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e2d3      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009078:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0f0      	beq.n	8009066 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009084:	4b0e      	ldr	r3, [pc, #56]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	061b      	lsls	r3, r3, #24
 8009092:	490b      	ldr	r1, [pc, #44]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 8009094:	4313      	orrs	r3, r2
 8009096:	604b      	str	r3, [r1, #4]
 8009098:	e01a      	b.n	80090d0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800909a:	4b09      	ldr	r3, [pc, #36]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a08      	ldr	r2, [pc, #32]	@ (80090c0 <HAL_RCC_OscConfig+0x244>)
 80090a0:	f023 0301 	bic.w	r3, r3, #1
 80090a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a6:	f7f9 fcf5 	bl	8002a94 <HAL_GetTick>
 80090aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090ae:	f7f9 fcf1 	bl	8002a94 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d903      	bls.n	80090c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e2af      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
 80090c0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090c4:	4b96      	ldr	r3, [pc, #600]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1ee      	bne.n	80090ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0310 	and.w	r3, r3, #16
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d06a      	beq.n	80091b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090dc:	4b90      	ldr	r3, [pc, #576]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090e4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090e6:	4b8e      	ldr	r3, [pc, #568]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80090e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d007      	beq.n	8009102 <HAL_RCC_OscConfig+0x286>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b18      	cmp	r3, #24
 80090f6:	d11b      	bne.n	8009130 <HAL_RCC_OscConfig+0x2b4>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d116      	bne.n	8009130 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009102:	4b87      	ldr	r3, [pc, #540]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <HAL_RCC_OscConfig+0x29e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	2b80      	cmp	r3, #128	@ 0x80
 8009114:	d001      	beq.n	800911a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e282      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800911a:	4b81      	ldr	r3, [pc, #516]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	061b      	lsls	r3, r3, #24
 8009128:	497d      	ldr	r1, [pc, #500]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800912a:	4313      	orrs	r3, r2
 800912c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800912e:	e040      	b.n	80091b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d023      	beq.n	8009180 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009138:	4b79      	ldr	r3, [pc, #484]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a78      	ldr	r2, [pc, #480]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800913e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7f9 fca6 	bl	8002a94 <HAL_GetTick>
 8009148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800914c:	f7f9 fca2 	bl	8002a94 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e260      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800915e:	4b70      	ldr	r3, [pc, #448]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d0f0      	beq.n	800914c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800916a:	4b6d      	ldr	r3, [pc, #436]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	061b      	lsls	r3, r3, #24
 8009178:	4969      	ldr	r1, [pc, #420]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800917a:	4313      	orrs	r3, r2
 800917c:	60cb      	str	r3, [r1, #12]
 800917e:	e018      	b.n	80091b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009180:	4b67      	ldr	r3, [pc, #412]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a66      	ldr	r2, [pc, #408]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800918a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800918c:	f7f9 fc82 	bl	8002a94 <HAL_GetTick>
 8009190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009192:	e008      	b.n	80091a6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009194:	f7f9 fc7e 	bl	8002a94 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d901      	bls.n	80091a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e23c      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091a6:	4b5e      	ldr	r3, [pc, #376]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1f0      	bne.n	8009194 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d036      	beq.n	800922c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d019      	beq.n	80091fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091c6:	4b56      	ldr	r3, [pc, #344]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80091c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ca:	4a55      	ldr	r2, [pc, #340]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80091cc:	f043 0301 	orr.w	r3, r3, #1
 80091d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091d2:	f7f9 fc5f 	bl	8002a94 <HAL_GetTick>
 80091d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091d8:	e008      	b.n	80091ec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091da:	f7f9 fc5b 	bl	8002a94 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e219      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091ec:	4b4c      	ldr	r3, [pc, #304]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80091ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0f0      	beq.n	80091da <HAL_RCC_OscConfig+0x35e>
 80091f8:	e018      	b.n	800922c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091fa:	4b49      	ldr	r3, [pc, #292]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80091fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091fe:	4a48      	ldr	r2, [pc, #288]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009206:	f7f9 fc45 	bl	8002a94 <HAL_GetTick>
 800920a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800920e:	f7f9 fc41 	bl	8002a94 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e1ff      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009220:	4b3f      	ldr	r3, [pc, #252]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1f0      	bne.n	800920e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d036      	beq.n	80092a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d019      	beq.n	8009274 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009240:	4b37      	ldr	r3, [pc, #220]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a36      	ldr	r2, [pc, #216]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009246:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800924a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800924c:	f7f9 fc22 	bl	8002a94 <HAL_GetTick>
 8009250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009254:	f7f9 fc1e 	bl	8002a94 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e1dc      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009266:	4b2e      	ldr	r3, [pc, #184]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f0      	beq.n	8009254 <HAL_RCC_OscConfig+0x3d8>
 8009272:	e018      	b.n	80092a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009274:	4b2a      	ldr	r3, [pc, #168]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a29      	ldr	r2, [pc, #164]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800927a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800927e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009280:	f7f9 fc08 	bl	8002a94 <HAL_GetTick>
 8009284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009286:	e008      	b.n	800929a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009288:	f7f9 fc04 	bl	8002a94 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e1c2      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800929a:	4b21      	ldr	r3, [pc, #132]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1f0      	bne.n	8009288 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 8086 	beq.w	80093c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009324 <HAL_RCC_OscConfig+0x4a8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009324 <HAL_RCC_OscConfig+0x4a8>)
 80092ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092c0:	f7f9 fbe8 	bl	8002a94 <HAL_GetTick>
 80092c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092c6:	e008      	b.n	80092da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c8:	f7f9 fbe4 	bl	8002a94 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b64      	cmp	r3, #100	@ 0x64
 80092d4:	d901      	bls.n	80092da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e1a2      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092da:	4b12      	ldr	r3, [pc, #72]	@ (8009324 <HAL_RCC_OscConfig+0x4a8>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f0      	beq.n	80092c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d106      	bne.n	80092fc <HAL_RCC_OscConfig+0x480>
 80092ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80092f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f2:	4a0b      	ldr	r2, [pc, #44]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 80092f4:	f043 0301 	orr.w	r3, r3, #1
 80092f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80092fa:	e032      	b.n	8009362 <HAL_RCC_OscConfig+0x4e6>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d111      	bne.n	8009328 <HAL_RCC_OscConfig+0x4ac>
 8009304:	4b06      	ldr	r3, [pc, #24]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009308:	4a05      	ldr	r2, [pc, #20]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 800930a:	f023 0301 	bic.w	r3, r3, #1
 800930e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009310:	4b03      	ldr	r3, [pc, #12]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009314:	4a02      	ldr	r2, [pc, #8]	@ (8009320 <HAL_RCC_OscConfig+0x4a4>)
 8009316:	f023 0304 	bic.w	r3, r3, #4
 800931a:	6713      	str	r3, [r2, #112]	@ 0x70
 800931c:	e021      	b.n	8009362 <HAL_RCC_OscConfig+0x4e6>
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
 8009324:	58024800 	.word	0x58024800
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b05      	cmp	r3, #5
 800932e:	d10c      	bne.n	800934a <HAL_RCC_OscConfig+0x4ce>
 8009330:	4b83      	ldr	r3, [pc, #524]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009334:	4a82      	ldr	r2, [pc, #520]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009336:	f043 0304 	orr.w	r3, r3, #4
 800933a:	6713      	str	r3, [r2, #112]	@ 0x70
 800933c:	4b80      	ldr	r3, [pc, #512]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800933e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009340:	4a7f      	ldr	r2, [pc, #508]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	6713      	str	r3, [r2, #112]	@ 0x70
 8009348:	e00b      	b.n	8009362 <HAL_RCC_OscConfig+0x4e6>
 800934a:	4b7d      	ldr	r3, [pc, #500]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800934c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934e:	4a7c      	ldr	r2, [pc, #496]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	6713      	str	r3, [r2, #112]	@ 0x70
 8009356:	4b7a      	ldr	r3, [pc, #488]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935a:	4a79      	ldr	r2, [pc, #484]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800935c:	f023 0304 	bic.w	r3, r3, #4
 8009360:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d015      	beq.n	8009396 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800936a:	f7f9 fb93 	bl	8002a94 <HAL_GetTick>
 800936e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009370:	e00a      	b.n	8009388 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009372:	f7f9 fb8f 	bl	8002a94 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009380:	4293      	cmp	r3, r2
 8009382:	d901      	bls.n	8009388 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e14b      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009388:	4b6d      	ldr	r3, [pc, #436]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800938a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0ee      	beq.n	8009372 <HAL_RCC_OscConfig+0x4f6>
 8009394:	e014      	b.n	80093c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009396:	f7f9 fb7d 	bl	8002a94 <HAL_GetTick>
 800939a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800939c:	e00a      	b.n	80093b4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800939e:	f7f9 fb79 	bl	8002a94 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d901      	bls.n	80093b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e135      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093b4:	4b62      	ldr	r3, [pc, #392]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1ee      	bne.n	800939e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 812a 	beq.w	800961e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093d2:	2b18      	cmp	r3, #24
 80093d4:	f000 80ba 	beq.w	800954c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093dc:	2b02      	cmp	r3, #2
 80093de:	f040 8095 	bne.w	800950c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093e2:	4b57      	ldr	r3, [pc, #348]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a56      	ldr	r2, [pc, #344]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80093e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ee:	f7f9 fb51 	bl	8002a94 <HAL_GetTick>
 80093f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f6:	f7f9 fb4d 	bl	8002a94 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e10b      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009408:	4b4d      	ldr	r3, [pc, #308]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f0      	bne.n	80093f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009414:	4b4a      	ldr	r3, [pc, #296]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009418:	4b4a      	ldr	r3, [pc, #296]	@ (8009544 <HAL_RCC_OscConfig+0x6c8>)
 800941a:	4013      	ands	r3, r2
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009424:	0112      	lsls	r2, r2, #4
 8009426:	430a      	orrs	r2, r1
 8009428:	4945      	ldr	r1, [pc, #276]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800942a:	4313      	orrs	r3, r2
 800942c:	628b      	str	r3, [r1, #40]	@ 0x28
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009432:	3b01      	subs	r3, #1
 8009434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800943c:	3b01      	subs	r3, #1
 800943e:	025b      	lsls	r3, r3, #9
 8009440:	b29b      	uxth	r3, r3
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009448:	3b01      	subs	r3, #1
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009456:	3b01      	subs	r3, #1
 8009458:	061b      	lsls	r3, r3, #24
 800945a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800945e:	4938      	ldr	r1, [pc, #224]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009460:	4313      	orrs	r3, r2
 8009462:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009464:	4b36      	ldr	r3, [pc, #216]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	4a35      	ldr	r2, [pc, #212]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800946a:	f023 0301 	bic.w	r3, r3, #1
 800946e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009470:	4b33      	ldr	r3, [pc, #204]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009474:	4b34      	ldr	r3, [pc, #208]	@ (8009548 <HAL_RCC_OscConfig+0x6cc>)
 8009476:	4013      	ands	r3, r2
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800947c:	00d2      	lsls	r2, r2, #3
 800947e:	4930      	ldr	r1, [pc, #192]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009480:	4313      	orrs	r3, r2
 8009482:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009484:	4b2e      	ldr	r3, [pc, #184]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	f023 020c 	bic.w	r2, r3, #12
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009490:	492b      	ldr	r1, [pc, #172]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009492:	4313      	orrs	r3, r2
 8009494:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009496:	4b2a      	ldr	r3, [pc, #168]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949a:	f023 0202 	bic.w	r2, r3, #2
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094a2:	4927      	ldr	r1, [pc, #156]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094a8:	4b25      	ldr	r3, [pc, #148]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ac:	4a24      	ldr	r2, [pc, #144]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b4:	4b22      	ldr	r3, [pc, #136]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	4a21      	ldr	r2, [pc, #132]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80094cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094d2:	f043 0301 	orr.w	r3, r3, #1
 80094d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094d8:	4b19      	ldr	r3, [pc, #100]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a18      	ldr	r2, [pc, #96]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 80094de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e4:	f7f9 fad6 	bl	8002a94 <HAL_GetTick>
 80094e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094ea:	e008      	b.n	80094fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ec:	f7f9 fad2 	bl	8002a94 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e090      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0f0      	beq.n	80094ec <HAL_RCC_OscConfig+0x670>
 800950a:	e088      	b.n	800961e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800950c:	4b0c      	ldr	r3, [pc, #48]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0b      	ldr	r2, [pc, #44]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009518:	f7f9 fabc 	bl	8002a94 <HAL_GetTick>
 800951c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009520:	f7f9 fab8 	bl	8002a94 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e076      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009532:	4b03      	ldr	r3, [pc, #12]	@ (8009540 <HAL_RCC_OscConfig+0x6c4>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f0      	bne.n	8009520 <HAL_RCC_OscConfig+0x6a4>
 800953e:	e06e      	b.n	800961e <HAL_RCC_OscConfig+0x7a2>
 8009540:	58024400 	.word	0x58024400
 8009544:	fffffc0c 	.word	0xfffffc0c
 8009548:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800954c:	4b36      	ldr	r3, [pc, #216]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009552:	4b35      	ldr	r3, [pc, #212]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 8009554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009556:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955c:	2b01      	cmp	r3, #1
 800955e:	d031      	beq.n	80095c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f003 0203 	and.w	r2, r3, #3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800956a:	429a      	cmp	r2, r3
 800956c:	d12a      	bne.n	80095c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	091b      	lsrs	r3, r3, #4
 8009572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800957a:	429a      	cmp	r2, r3
 800957c:	d122      	bne.n	80095c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009588:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800958a:	429a      	cmp	r2, r3
 800958c:	d11a      	bne.n	80095c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	0a5b      	lsrs	r3, r3, #9
 8009592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800959a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800959c:	429a      	cmp	r2, r3
 800959e:	d111      	bne.n	80095c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d108      	bne.n	80095c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	0e1b      	lsrs	r3, r3, #24
 80095b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d001      	beq.n	80095c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e02b      	b.n	8009620 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095c8:	4b17      	ldr	r3, [pc, #92]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 80095ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095cc:	08db      	lsrs	r3, r3, #3
 80095ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d01f      	beq.n	800961e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80095de:	4b12      	ldr	r3, [pc, #72]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e2:	4a11      	ldr	r2, [pc, #68]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095ea:	f7f9 fa53 	bl	8002a94 <HAL_GetTick>
 80095ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80095f0:	bf00      	nop
 80095f2:	f7f9 fa4f 	bl	8002a94 <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d0f9      	beq.n	80095f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 8009600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009602:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <HAL_RCC_OscConfig+0x7b0>)
 8009604:	4013      	ands	r3, r2
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800960a:	00d2      	lsls	r2, r2, #3
 800960c:	4906      	ldr	r1, [pc, #24]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 800960e:	4313      	orrs	r3, r2
 8009610:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009612:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	4a04      	ldr	r2, [pc, #16]	@ (8009628 <HAL_RCC_OscConfig+0x7ac>)
 8009618:	f043 0301 	orr.w	r3, r3, #1
 800961c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3730      	adds	r7, #48	@ 0x30
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	58024400 	.word	0x58024400
 800962c:	ffff0007 	.word	0xffff0007

08009630 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e19c      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009644:	4b8a      	ldr	r3, [pc, #552]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 030f 	and.w	r3, r3, #15
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d910      	bls.n	8009674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009652:	4b87      	ldr	r3, [pc, #540]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f023 020f 	bic.w	r2, r3, #15
 800965a:	4985      	ldr	r1, [pc, #532]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	4313      	orrs	r3, r2
 8009660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009662:	4b83      	ldr	r3, [pc, #524]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d001      	beq.n	8009674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e184      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	d010      	beq.n	80096a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	4b7b      	ldr	r3, [pc, #492]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800968c:	429a      	cmp	r2, r3
 800968e:	d908      	bls.n	80096a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009690:	4b78      	ldr	r3, [pc, #480]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	4975      	ldr	r1, [pc, #468]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0308 	and.w	r3, r3, #8
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d010      	beq.n	80096d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695a      	ldr	r2, [r3, #20]
 80096b2:	4b70      	ldr	r3, [pc, #448]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d908      	bls.n	80096d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096be:	4b6d      	ldr	r3, [pc, #436]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	496a      	ldr	r1, [pc, #424]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	4b64      	ldr	r3, [pc, #400]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d908      	bls.n	80096fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096ec:	4b61      	ldr	r3, [pc, #388]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	495e      	ldr	r1, [pc, #376]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d010      	beq.n	800972c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69da      	ldr	r2, [r3, #28]
 800970e:	4b59      	ldr	r3, [pc, #356]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009716:	429a      	cmp	r2, r3
 8009718:	d908      	bls.n	800972c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800971a:	4b56      	ldr	r3, [pc, #344]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	4953      	ldr	r1, [pc, #332]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009728:	4313      	orrs	r3, r2
 800972a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d010      	beq.n	800975a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	4b4d      	ldr	r3, [pc, #308]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	429a      	cmp	r2, r3
 8009746:	d908      	bls.n	800975a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009748:	4b4a      	ldr	r3, [pc, #296]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	f023 020f 	bic.w	r2, r3, #15
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	4947      	ldr	r1, [pc, #284]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009756:	4313      	orrs	r3, r2
 8009758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d055      	beq.n	8009812 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009766:	4b43      	ldr	r3, [pc, #268]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	4940      	ldr	r1, [pc, #256]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009774:	4313      	orrs	r3, r2
 8009776:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d107      	bne.n	8009790 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009780:	4b3c      	ldr	r3, [pc, #240]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d121      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e0f6      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d107      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009798:	4b36      	ldr	r3, [pc, #216]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d115      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e0ea      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d107      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097b0:	4b30      	ldr	r3, [pc, #192]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d109      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0de      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e0d6      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097d0:	4b28      	ldr	r3, [pc, #160]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	f023 0207 	bic.w	r2, r3, #7
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4925      	ldr	r1, [pc, #148]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e2:	f7f9 f957 	bl	8002a94 <HAL_GetTick>
 80097e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097e8:	e00a      	b.n	8009800 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097ea:	f7f9 f953 	bl	8002a94 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e0be      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009800:	4b1c      	ldr	r3, [pc, #112]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	429a      	cmp	r2, r3
 8009810:	d1eb      	bne.n	80097ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	d010      	beq.n	8009840 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	4b14      	ldr	r3, [pc, #80]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	f003 030f 	and.w	r3, r3, #15
 800982a:	429a      	cmp	r2, r3
 800982c:	d208      	bcs.n	8009840 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800982e:	4b11      	ldr	r3, [pc, #68]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f023 020f 	bic.w	r2, r3, #15
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	490e      	ldr	r1, [pc, #56]	@ (8009874 <HAL_RCC_ClockConfig+0x244>)
 800983c:	4313      	orrs	r3, r2
 800983e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009840:	4b0b      	ldr	r3, [pc, #44]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 030f 	and.w	r3, r3, #15
 8009848:	683a      	ldr	r2, [r7, #0]
 800984a:	429a      	cmp	r2, r3
 800984c:	d214      	bcs.n	8009878 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800984e:	4b08      	ldr	r3, [pc, #32]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f023 020f 	bic.w	r2, r3, #15
 8009856:	4906      	ldr	r1, [pc, #24]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	4313      	orrs	r3, r2
 800985c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800985e:	4b04      	ldr	r3, [pc, #16]	@ (8009870 <HAL_RCC_ClockConfig+0x240>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d005      	beq.n	8009878 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e086      	b.n	800997e <HAL_RCC_ClockConfig+0x34e>
 8009870:	52002000 	.word	0x52002000
 8009874:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d010      	beq.n	80098a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	691a      	ldr	r2, [r3, #16]
 8009888:	4b3f      	ldr	r3, [pc, #252]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009890:	429a      	cmp	r2, r3
 8009892:	d208      	bcs.n	80098a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009894:	4b3c      	ldr	r3, [pc, #240]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	4939      	ldr	r1, [pc, #228]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0308 	and.w	r3, r3, #8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d010      	beq.n	80098d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695a      	ldr	r2, [r3, #20]
 80098b6:	4b34      	ldr	r3, [pc, #208]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098be:	429a      	cmp	r2, r3
 80098c0:	d208      	bcs.n	80098d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098c2:	4b31      	ldr	r3, [pc, #196]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	492e      	ldr	r1, [pc, #184]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0310 	and.w	r3, r3, #16
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d010      	beq.n	8009902 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699a      	ldr	r2, [r3, #24]
 80098e4:	4b28      	ldr	r3, [pc, #160]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d208      	bcs.n	8009902 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098f0:	4b25      	ldr	r3, [pc, #148]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	4922      	ldr	r1, [pc, #136]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d010      	beq.n	8009930 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69da      	ldr	r2, [r3, #28]
 8009912:	4b1d      	ldr	r3, [pc, #116]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800991a:	429a      	cmp	r2, r3
 800991c:	d208      	bcs.n	8009930 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800991e:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69db      	ldr	r3, [r3, #28]
 800992a:	4917      	ldr	r1, [pc, #92]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 800992c:	4313      	orrs	r3, r2
 800992e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009930:	f000 f834 	bl	800999c <HAL_RCC_GetSysClockFreq>
 8009934:	4602      	mov	r2, r0
 8009936:	4b14      	ldr	r3, [pc, #80]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	0a1b      	lsrs	r3, r3, #8
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	4912      	ldr	r1, [pc, #72]	@ (800998c <HAL_RCC_ClockConfig+0x35c>)
 8009942:	5ccb      	ldrb	r3, [r1, r3]
 8009944:	f003 031f 	and.w	r3, r3, #31
 8009948:	fa22 f303 	lsr.w	r3, r2, r3
 800994c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800994e:	4b0e      	ldr	r3, [pc, #56]	@ (8009988 <HAL_RCC_ClockConfig+0x358>)
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	f003 030f 	and.w	r3, r3, #15
 8009956:	4a0d      	ldr	r2, [pc, #52]	@ (800998c <HAL_RCC_ClockConfig+0x35c>)
 8009958:	5cd3      	ldrb	r3, [r2, r3]
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
 8009964:	4a0a      	ldr	r2, [pc, #40]	@ (8009990 <HAL_RCC_ClockConfig+0x360>)
 8009966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009968:	4a0a      	ldr	r2, [pc, #40]	@ (8009994 <HAL_RCC_ClockConfig+0x364>)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800996e:	4b0a      	ldr	r3, [pc, #40]	@ (8009998 <HAL_RCC_ClockConfig+0x368>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f7f9 f844 	bl	8002a00 <HAL_InitTick>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
 800998c:	080123bc 	.word	0x080123bc
 8009990:	24000010 	.word	0x24000010
 8009994:	2400000c 	.word	0x2400000c
 8009998:	24000014 	.word	0x24000014

0800999c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800999c:	b480      	push	{r7}
 800999e:	b089      	sub	sp, #36	@ 0x24
 80099a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099a2:	4bb3      	ldr	r3, [pc, #716]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099aa:	2b18      	cmp	r3, #24
 80099ac:	f200 8155 	bhi.w	8009c5a <HAL_RCC_GetSysClockFreq+0x2be>
 80099b0:	a201      	add	r2, pc, #4	@ (adr r2, 80099b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	08009a1d 	.word	0x08009a1d
 80099bc:	08009c5b 	.word	0x08009c5b
 80099c0:	08009c5b 	.word	0x08009c5b
 80099c4:	08009c5b 	.word	0x08009c5b
 80099c8:	08009c5b 	.word	0x08009c5b
 80099cc:	08009c5b 	.word	0x08009c5b
 80099d0:	08009c5b 	.word	0x08009c5b
 80099d4:	08009c5b 	.word	0x08009c5b
 80099d8:	08009a43 	.word	0x08009a43
 80099dc:	08009c5b 	.word	0x08009c5b
 80099e0:	08009c5b 	.word	0x08009c5b
 80099e4:	08009c5b 	.word	0x08009c5b
 80099e8:	08009c5b 	.word	0x08009c5b
 80099ec:	08009c5b 	.word	0x08009c5b
 80099f0:	08009c5b 	.word	0x08009c5b
 80099f4:	08009c5b 	.word	0x08009c5b
 80099f8:	08009a49 	.word	0x08009a49
 80099fc:	08009c5b 	.word	0x08009c5b
 8009a00:	08009c5b 	.word	0x08009c5b
 8009a04:	08009c5b 	.word	0x08009c5b
 8009a08:	08009c5b 	.word	0x08009c5b
 8009a0c:	08009c5b 	.word	0x08009c5b
 8009a10:	08009c5b 	.word	0x08009c5b
 8009a14:	08009c5b 	.word	0x08009c5b
 8009a18:	08009a4f 	.word	0x08009a4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a1c:	4b94      	ldr	r3, [pc, #592]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0320 	and.w	r3, r3, #32
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d009      	beq.n	8009a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a28:	4b91      	ldr	r3, [pc, #580]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	08db      	lsrs	r3, r3, #3
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	4a90      	ldr	r2, [pc, #576]	@ (8009c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
 8009a38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a3a:	e111      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a3c:	4b8d      	ldr	r3, [pc, #564]	@ (8009c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a3e:	61bb      	str	r3, [r7, #24]
      break;
 8009a40:	e10e      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a42:	4b8d      	ldr	r3, [pc, #564]	@ (8009c78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a44:	61bb      	str	r3, [r7, #24]
      break;
 8009a46:	e10b      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a48:	4b8c      	ldr	r3, [pc, #560]	@ (8009c7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a4a:	61bb      	str	r3, [r7, #24]
      break;
 8009a4c:	e108      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a4e:	4b88      	ldr	r3, [pc, #544]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a58:	4b85      	ldr	r3, [pc, #532]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5c:	091b      	lsrs	r3, r3, #4
 8009a5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a64:	4b82      	ldr	r3, [pc, #520]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a6e:	4b80      	ldr	r3, [pc, #512]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a72:	08db      	lsrs	r3, r3, #3
 8009a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80e1 	beq.w	8009c54 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	f000 8083 	beq.w	8009ba0 <HAL_RCC_GetSysClockFreq+0x204>
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	f200 80a1 	bhi.w	8009be4 <HAL_RCC_GetSysClockFreq+0x248>
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <HAL_RCC_GetSysClockFreq+0x114>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d056      	beq.n	8009b5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8009aae:	e099      	b.n	8009be4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02d      	beq.n	8009b18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009abc:	4b6c      	ldr	r3, [pc, #432]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	08db      	lsrs	r3, r3, #3
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8009c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b62      	ldr	r3, [pc, #392]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009afa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b16:	e087      	b.n	8009c28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009c84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b51      	ldr	r3, [pc, #324]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b5a:	e065      	b.n	8009c28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009c88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b40      	ldr	r3, [pc, #256]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b9e:	e043      	b.n	8009c28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009c8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009be2:	e021      	b.n	8009c28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009c88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c28:	4b11      	ldr	r3, [pc, #68]	@ (8009c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2c:	0a5b      	lsrs	r3, r3, #9
 8009c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c32:	3301      	adds	r3, #1
 8009c34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	ee07 3a90 	vmov	s15, r3
 8009c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c4c:	ee17 3a90 	vmov	r3, s15
 8009c50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c52:	e005      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	61bb      	str	r3, [r7, #24]
      break;
 8009c58:	e002      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c5a:	4b07      	ldr	r3, [pc, #28]	@ (8009c78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c5c:	61bb      	str	r3, [r7, #24]
      break;
 8009c5e:	bf00      	nop
  }

  return sysclockfreq;
 8009c60:	69bb      	ldr	r3, [r7, #24]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3724      	adds	r7, #36	@ 0x24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	58024400 	.word	0x58024400
 8009c74:	03d09000 	.word	0x03d09000
 8009c78:	003d0900 	.word	0x003d0900
 8009c7c:	016e3600 	.word	0x016e3600
 8009c80:	46000000 	.word	0x46000000
 8009c84:	4c742400 	.word	0x4c742400
 8009c88:	4a742400 	.word	0x4a742400
 8009c8c:	4bb71b00 	.word	0x4bb71b00

08009c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c96:	f7ff fe81 	bl	800999c <HAL_RCC_GetSysClockFreq>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	4b10      	ldr	r3, [pc, #64]	@ (8009ce0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	0a1b      	lsrs	r3, r3, #8
 8009ca2:	f003 030f 	and.w	r3, r3, #15
 8009ca6:	490f      	ldr	r1, [pc, #60]	@ (8009ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ca8:	5ccb      	ldrb	r3, [r1, r3]
 8009caa:	f003 031f 	and.w	r3, r3, #31
 8009cae:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	f003 030f 	and.w	r3, r3, #15
 8009cbc:	4a09      	ldr	r2, [pc, #36]	@ (8009ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cbe:	5cd3      	ldrb	r3, [r2, r3]
 8009cc0:	f003 031f 	and.w	r3, r3, #31
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cca:	4a07      	ldr	r2, [pc, #28]	@ (8009ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ccc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cce:	4a07      	ldr	r2, [pc, #28]	@ (8009cec <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cd4:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	58024400 	.word	0x58024400
 8009ce4:	080123bc 	.word	0x080123bc
 8009ce8:	24000010 	.word	0x24000010
 8009cec:	2400000c 	.word	0x2400000c

08009cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009cf4:	f7ff ffcc 	bl	8009c90 <HAL_RCC_GetHCLKFreq>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4b06      	ldr	r3, [pc, #24]	@ (8009d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	091b      	lsrs	r3, r3, #4
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	4904      	ldr	r1, [pc, #16]	@ (8009d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d06:	5ccb      	ldrb	r3, [r1, r3]
 8009d08:	f003 031f 	and.w	r3, r3, #31
 8009d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	58024400 	.word	0x58024400
 8009d18:	080123bc 	.word	0x080123bc

08009d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d20:	f7ff ffb6 	bl	8009c90 <HAL_RCC_GetHCLKFreq>
 8009d24:	4602      	mov	r2, r0
 8009d26:	4b06      	ldr	r3, [pc, #24]	@ (8009d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	0a1b      	lsrs	r3, r3, #8
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	4904      	ldr	r1, [pc, #16]	@ (8009d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d32:	5ccb      	ldrb	r3, [r1, r3]
 8009d34:	f003 031f 	and.w	r3, r3, #31
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	58024400 	.word	0x58024400
 8009d44:	080123bc 	.word	0x080123bc

08009d48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d4c:	b0c6      	sub	sp, #280	@ 0x118
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d6c:	2500      	movs	r5, #0
 8009d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8009d72:	d049      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d7e:	d02f      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d84:	d828      	bhi.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d8a:	d01a      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d90:	d822      	bhi.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d9a:	d007      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d9c:	e01c      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d9e:	4bab      	ldr	r3, [pc, #684]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da2:	4aaa      	ldr	r2, [pc, #680]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009daa:	e01a      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	3308      	adds	r3, #8
 8009db2:	2102      	movs	r1, #2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 fa49 	bl	800c24c <RCCEx_PLL2_Config>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dc0:	e00f      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	3328      	adds	r3, #40	@ 0x28
 8009dc8:	2102      	movs	r1, #2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f002 faf0 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dd6:	e004      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dde:	e000      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009dea:	4b98      	ldr	r3, [pc, #608]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009df8:	4a94      	ldr	r2, [pc, #592]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dfe:	e003      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e14:	f04f 0900 	mov.w	r9, #0
 8009e18:	ea58 0309 	orrs.w	r3, r8, r9
 8009e1c:	d047      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d82a      	bhi.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e28:	a201      	add	r2, pc, #4	@ (adr r2, 8009e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e45 	.word	0x08009e45
 8009e34:	08009e53 	.word	0x08009e53
 8009e38:	08009e69 	.word	0x08009e69
 8009e3c:	08009e87 	.word	0x08009e87
 8009e40:	08009e87 	.word	0x08009e87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e44:	4b81      	ldr	r3, [pc, #516]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	4a80      	ldr	r2, [pc, #512]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e50:	e01a      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e56:	3308      	adds	r3, #8
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 f9f6 	bl	800c24c <RCCEx_PLL2_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e66:	e00f      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6c:	3328      	adds	r3, #40	@ 0x28
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f002 fa9d 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e7c:	e004      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e84:	e000      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e90:	4b6e      	ldr	r3, [pc, #440]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e94:	f023 0107 	bic.w	r1, r3, #7
 8009e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ea4:	e003      	b.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009eba:	f04f 0b00 	mov.w	fp, #0
 8009ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ec2:	d05b      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ecc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009ed0:	d03b      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009ed2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009ed6:	d834      	bhi.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009edc:	d037      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ee2:	d82e      	bhi.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ee4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009ee8:	d033      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009eea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009eee:	d828      	bhi.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ef4:	d01a      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009efa:	d822      	bhi.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d003      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f04:	d007      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009f06:	e01c      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f08:	4b50      	ldr	r3, [pc, #320]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f14:	e01e      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f002 f994 	bl	800c24c <RCCEx_PLL2_Config>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f2a:	e013      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f30:	3328      	adds	r3, #40	@ 0x28
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f002 fa3b 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f40:	e008      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f48:	e004      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f4a:	bf00      	nop
 8009f4c:	e002      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f4e:	bf00      	nop
 8009f50:	e000      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f6c:	4a37      	ldr	r2, [pc, #220]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f72:	e003      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009f96:	460b      	mov	r3, r1
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	d05d      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009fa4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fa8:	d03b      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009faa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009fae:	d834      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fb4:	d037      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fba:	d82e      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fc0:	d033      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009fc6:	d828      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fcc:	d01a      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fd2:	d822      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fdc:	d007      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009fde:	e01c      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	4a19      	ldr	r2, [pc, #100]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fec:	e01e      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff2:	3308      	adds	r3, #8
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f002 f928 	bl	800c24c <RCCEx_PLL2_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a002:	e013      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a008:	3328      	adds	r3, #40	@ 0x28
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f002 f9cf 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a012:	4603      	mov	r3, r0
 800a014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a018:	e008      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a020:	e004      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a022:	bf00      	nop
 800a024:	e002      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a02c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10d      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a034:	4b05      	ldr	r3, [pc, #20]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a038:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a044:	4a01      	ldr	r2, [pc, #4]	@ (800a04c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a046:	430b      	orrs	r3, r1
 800a048:	6593      	str	r3, [r2, #88]	@ 0x58
 800a04a:	e005      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a04c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a064:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a06e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a072:	460b      	mov	r3, r1
 800a074:	4313      	orrs	r3, r2
 800a076:	d03a      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07e:	2b30      	cmp	r3, #48	@ 0x30
 800a080:	d01f      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a082:	2b30      	cmp	r3, #48	@ 0x30
 800a084:	d819      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a086:	2b20      	cmp	r3, #32
 800a088:	d00c      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a08a:	2b20      	cmp	r3, #32
 800a08c:	d815      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d019      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a092:	2b10      	cmp	r3, #16
 800a094:	d111      	bne.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a096:	4baa      	ldr	r3, [pc, #680]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a09a:	4aa9      	ldr	r2, [pc, #676]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a09c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a0a2:	e011      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	2102      	movs	r1, #2
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 f8cd 	bl	800c24c <RCCEx_PLL2_Config>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a0b8:	e006      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0c0:	e002      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a0c2:	bf00      	nop
 800a0c4:	e000      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a0c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a0d0:	4b9b      	ldr	r3, [pc, #620]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0de:	4a98      	ldr	r2, [pc, #608]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0e4:	e003      	b.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a0fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0fe:	2300      	movs	r3, #0
 800a100:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a104:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a108:	460b      	mov	r3, r1
 800a10a:	4313      	orrs	r3, r2
 800a10c:	d051      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a118:	d035      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a11a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a11e:	d82e      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a124:	d031      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a12a:	d828      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a12c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a130:	d01a      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a136:	d822      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a13c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a140:	d007      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a142:	e01c      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a144:	4b7e      	ldr	r3, [pc, #504]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	4a7d      	ldr	r2, [pc, #500]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a14a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a14e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a150:	e01c      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a156:	3308      	adds	r3, #8
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 f876 	bl	800c24c <RCCEx_PLL2_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a166:	e011      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16c:	3328      	adds	r3, #40	@ 0x28
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f002 f91d 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a17c:	e006      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a184:	e002      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a186:	bf00      	nop
 800a188:	e000      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a18a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a18c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a194:	4b6a      	ldr	r3, [pc, #424]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a198:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a2:	4a67      	ldr	r2, [pc, #412]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1a4:	430b      	orrs	r3, r1
 800a1a6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1a8:	e003      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a1be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d053      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1dc:	d033      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a1de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1e2:	d82c      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1e8:	d02f      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a1ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1ee:	d826      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1f4:	d02b      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a1f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1fa:	d820      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a1fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a200:	d012      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a206:	d81a      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d022      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a210:	d115      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a216:	3308      	adds	r3, #8
 800a218:	2101      	movs	r1, #1
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 f816 	bl	800c24c <RCCEx_PLL2_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a226:	e015      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22c:	3328      	adds	r3, #40	@ 0x28
 800a22e:	2101      	movs	r1, #1
 800a230:	4618      	mov	r0, r3
 800a232:	f002 f8bd 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a23c:	e00a      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a244:	e006      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a246:	bf00      	nop
 800a248:	e004      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a24a:	bf00      	nop
 800a24c:	e002      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a24e:	bf00      	nop
 800a250:	e000      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a252:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a25c:	4b38      	ldr	r3, [pc, #224]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a25e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a26a:	4a35      	ldr	r2, [pc, #212]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a270:	e003      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a276:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a28a:	2300      	movs	r3, #0
 800a28c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a290:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a294:	460b      	mov	r3, r1
 800a296:	4313      	orrs	r3, r2
 800a298:	d058      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2a6:	d033      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2ac:	d82c      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b2:	d02f      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b8:	d826      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2be:	d02b      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a2c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2c4:	d820      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ca:	d012      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d0:	d81a      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d022      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a2d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2da:	d115      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 ffb1 	bl	800c24c <RCCEx_PLL2_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2f0:	e015      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f6:	3328      	adds	r3, #40	@ 0x28
 800a2f8:	2101      	movs	r1, #1
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f002 f858 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a306:	e00a      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a30e:	e006      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a310:	bf00      	nop
 800a312:	e004      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a314:	bf00      	nop
 800a316:	e002      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10e      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a326:	4b06      	ldr	r3, [pc, #24]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a32a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a336:	4a02      	ldr	r2, [pc, #8]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a338:	430b      	orrs	r3, r1
 800a33a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a33c:	e006      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a33e:	bf00      	nop
 800a340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a35c:	2300      	movs	r3, #0
 800a35e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a362:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a366:	460b      	mov	r3, r1
 800a368:	4313      	orrs	r3, r2
 800a36a:	d037      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a376:	d00e      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a37c:	d816      	bhi.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d018      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a386:	d111      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a388:	4bc4      	ldr	r3, [pc, #784]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	4ac3      	ldr	r2, [pc, #780]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a38e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a394:	e00f      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39a:	3308      	adds	r3, #8
 800a39c:	2101      	movs	r1, #1
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 ff54 	bl	800c24c <RCCEx_PLL2_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a3aa:	e004      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3b2:	e000      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3be:	4bb7      	ldr	r3, [pc, #732]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3cc:	4ab3      	ldr	r2, [pc, #716]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3d2:	e003      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a3f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	d039      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a402:	2b03      	cmp	r3, #3
 800a404:	d81c      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a406:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a449 	.word	0x0800a449
 800a410:	0800a41d 	.word	0x0800a41d
 800a414:	0800a42b 	.word	0x0800a42b
 800a418:	0800a449 	.word	0x0800a449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a41c:	4b9f      	ldr	r3, [pc, #636]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	4a9e      	ldr	r2, [pc, #632]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a428:	e00f      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42e:	3308      	adds	r3, #8
 800a430:	2102      	movs	r1, #2
 800a432:	4618      	mov	r0, r3
 800a434:	f001 ff0a 	bl	800c24c <RCCEx_PLL2_Config>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a43e:	e004      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a446:	e000      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a44a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a452:	4b92      	ldr	r3, [pc, #584]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a456:	f023 0103 	bic.w	r1, r3, #3
 800a45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a460:	4a8e      	ldr	r2, [pc, #568]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a462:	430b      	orrs	r3, r1
 800a464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a466:	e003      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a46c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a47c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a480:	2300      	movs	r3, #0
 800a482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4313      	orrs	r3, r2
 800a48e:	f000 8099 	beq.w	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a492:	4b83      	ldr	r3, [pc, #524]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a82      	ldr	r2, [pc, #520]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a49c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a49e:	f7f8 faf9 	bl	8002a94 <HAL_GetTick>
 800a4a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4a6:	e00b      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4a8:	f7f8 faf4 	bl	8002a94 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b64      	cmp	r3, #100	@ 0x64
 800a4b6:	d903      	bls.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4be:	e005      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4c0:	4b77      	ldr	r3, [pc, #476]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0ed      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a4cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d173      	bne.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a4d4:	4b71      	ldr	r3, [pc, #452]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4e0:	4053      	eors	r3, r2
 800a4e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d015      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4ea:	4b6c      	ldr	r3, [pc, #432]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4f6:	4b69      	ldr	r3, [pc, #420]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4fa:	4a68      	ldr	r2, [pc, #416]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a500:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a502:	4b66      	ldr	r3, [pc, #408]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a506:	4a65      	ldr	r2, [pc, #404]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a50c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a50e:	4a63      	ldr	r2, [pc, #396]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a514:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a51a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a51e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a522:	d118      	bne.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a524:	f7f8 fab6 	bl	8002a94 <HAL_GetTick>
 800a528:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a52c:	e00d      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a52e:	f7f8 fab1 	bl	8002a94 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a538:	1ad2      	subs	r2, r2, r3
 800a53a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a53e:	429a      	cmp	r2, r3
 800a540:	d903      	bls.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a548:	e005      	b.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a54a:	4b54      	ldr	r3, [pc, #336]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a54c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a54e:	f003 0302 	and.w	r3, r3, #2
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0eb      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d129      	bne.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a56a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a56e:	d10e      	bne.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a570:	4b4a      	ldr	r3, [pc, #296]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a580:	091a      	lsrs	r2, r3, #4
 800a582:	4b48      	ldr	r3, [pc, #288]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a584:	4013      	ands	r3, r2
 800a586:	4a45      	ldr	r2, [pc, #276]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a588:	430b      	orrs	r3, r1
 800a58a:	6113      	str	r3, [r2, #16]
 800a58c:	e005      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a58e:	4b43      	ldr	r3, [pc, #268]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	4a42      	ldr	r2, [pc, #264]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a598:	6113      	str	r3, [r2, #16]
 800a59a:	4b40      	ldr	r3, [pc, #256]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a59c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5aa:	4a3c      	ldr	r2, [pc, #240]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5b0:	e008      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a5ba:	e003      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f002 0301 	and.w	r3, r2, #1
 800a5d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a5da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	f000 808f 	beq.w	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ec:	2b28      	cmp	r3, #40	@ 0x28
 800a5ee:	d871      	bhi.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a5f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f6:	bf00      	nop
 800a5f8:	0800a6dd 	.word	0x0800a6dd
 800a5fc:	0800a6d5 	.word	0x0800a6d5
 800a600:	0800a6d5 	.word	0x0800a6d5
 800a604:	0800a6d5 	.word	0x0800a6d5
 800a608:	0800a6d5 	.word	0x0800a6d5
 800a60c:	0800a6d5 	.word	0x0800a6d5
 800a610:	0800a6d5 	.word	0x0800a6d5
 800a614:	0800a6d5 	.word	0x0800a6d5
 800a618:	0800a6a9 	.word	0x0800a6a9
 800a61c:	0800a6d5 	.word	0x0800a6d5
 800a620:	0800a6d5 	.word	0x0800a6d5
 800a624:	0800a6d5 	.word	0x0800a6d5
 800a628:	0800a6d5 	.word	0x0800a6d5
 800a62c:	0800a6d5 	.word	0x0800a6d5
 800a630:	0800a6d5 	.word	0x0800a6d5
 800a634:	0800a6d5 	.word	0x0800a6d5
 800a638:	0800a6bf 	.word	0x0800a6bf
 800a63c:	0800a6d5 	.word	0x0800a6d5
 800a640:	0800a6d5 	.word	0x0800a6d5
 800a644:	0800a6d5 	.word	0x0800a6d5
 800a648:	0800a6d5 	.word	0x0800a6d5
 800a64c:	0800a6d5 	.word	0x0800a6d5
 800a650:	0800a6d5 	.word	0x0800a6d5
 800a654:	0800a6d5 	.word	0x0800a6d5
 800a658:	0800a6dd 	.word	0x0800a6dd
 800a65c:	0800a6d5 	.word	0x0800a6d5
 800a660:	0800a6d5 	.word	0x0800a6d5
 800a664:	0800a6d5 	.word	0x0800a6d5
 800a668:	0800a6d5 	.word	0x0800a6d5
 800a66c:	0800a6d5 	.word	0x0800a6d5
 800a670:	0800a6d5 	.word	0x0800a6d5
 800a674:	0800a6d5 	.word	0x0800a6d5
 800a678:	0800a6dd 	.word	0x0800a6dd
 800a67c:	0800a6d5 	.word	0x0800a6d5
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a6d5 	.word	0x0800a6d5
 800a688:	0800a6d5 	.word	0x0800a6d5
 800a68c:	0800a6d5 	.word	0x0800a6d5
 800a690:	0800a6d5 	.word	0x0800a6d5
 800a694:	0800a6d5 	.word	0x0800a6d5
 800a698:	0800a6dd 	.word	0x0800a6dd
 800a69c:	58024400 	.word	0x58024400
 800a6a0:	58024800 	.word	0x58024800
 800a6a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f001 fdcb 	bl	800c24c <RCCEx_PLL2_Config>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6bc:	e00f      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c2:	3328      	adds	r3, #40	@ 0x28
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f001 fe72 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6d2:	e004      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6da:	e000      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a6dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a6e6:	4bbf      	ldr	r3, [pc, #764]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6f4:	4abb      	ldr	r2, [pc, #748]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a6f6:	430b      	orrs	r3, r1
 800a6f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6fa:	e003      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a700:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f002 0302 	and.w	r3, r2, #2
 800a710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a714:	2300      	movs	r3, #0
 800a716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a71a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a71e:	460b      	mov	r3, r1
 800a720:	4313      	orrs	r3, r2
 800a722:	d041      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	d824      	bhi.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a72e:	a201      	add	r2, pc, #4	@ (adr r2, 800a734 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a781 	.word	0x0800a781
 800a738:	0800a74d 	.word	0x0800a74d
 800a73c:	0800a763 	.word	0x0800a763
 800a740:	0800a781 	.word	0x0800a781
 800a744:	0800a781 	.word	0x0800a781
 800a748:	0800a781 	.word	0x0800a781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a750:	3308      	adds	r3, #8
 800a752:	2101      	movs	r1, #1
 800a754:	4618      	mov	r0, r3
 800a756:	f001 fd79 	bl	800c24c <RCCEx_PLL2_Config>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a760:	e00f      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a766:	3328      	adds	r3, #40	@ 0x28
 800a768:	2101      	movs	r1, #1
 800a76a:	4618      	mov	r0, r3
 800a76c:	f001 fe20 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a776:	e004      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a77e:	e000      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a78a:	4b96      	ldr	r3, [pc, #600]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a78e:	f023 0107 	bic.w	r1, r3, #7
 800a792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a798:	4a92      	ldr	r2, [pc, #584]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a79a:	430b      	orrs	r3, r1
 800a79c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a79e:	e003      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f002 0304 	and.w	r3, r2, #4
 800a7b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	d044      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7d0:	2b05      	cmp	r3, #5
 800a7d2:	d825      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a829 	.word	0x0800a829
 800a7e0:	0800a7f5 	.word	0x0800a7f5
 800a7e4:	0800a80b 	.word	0x0800a80b
 800a7e8:	0800a829 	.word	0x0800a829
 800a7ec:	0800a829 	.word	0x0800a829
 800a7f0:	0800a829 	.word	0x0800a829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f001 fd25 	bl	800c24c <RCCEx_PLL2_Config>
 800a802:	4603      	mov	r3, r0
 800a804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a808:	e00f      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80e:	3328      	adds	r3, #40	@ 0x28
 800a810:	2101      	movs	r1, #1
 800a812:	4618      	mov	r0, r3
 800a814:	f001 fdcc 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a818:	4603      	mov	r3, r0
 800a81a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a81e:	e004      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a826:	e000      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a82a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10b      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a832:	4b6c      	ldr	r3, [pc, #432]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a836:	f023 0107 	bic.w	r1, r3, #7
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a842:	4a68      	ldr	r2, [pc, #416]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a844:	430b      	orrs	r3, r1
 800a846:	6593      	str	r3, [r2, #88]	@ 0x58
 800a848:	e003      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a84e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f002 0320 	and.w	r3, r2, #32
 800a85e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a862:	2300      	movs	r3, #0
 800a864:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a868:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4313      	orrs	r3, r2
 800a870:	d055      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a87a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a87e:	d033      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a884:	d82c      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a88a:	d02f      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a88c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a890:	d826      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a896:	d02b      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a89c:	d820      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a89e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a2:	d012      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a8a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a8:	d81a      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d022      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a8ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8b2:	d115      	bne.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f001 fcc5 	bl	800c24c <RCCEx_PLL2_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8c8:	e015      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ce:	3328      	adds	r3, #40	@ 0x28
 800a8d0:	2102      	movs	r1, #2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 fd6c 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a8de:	e00a      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8e6:	e006      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8e8:	bf00      	nop
 800a8ea:	e004      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8ec:	bf00      	nop
 800a8ee:	e002      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8f0:	bf00      	nop
 800a8f2:	e000      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a8f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8fe:	4b39      	ldr	r3, [pc, #228]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a902:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a90e:	4a35      	ldr	r2, [pc, #212]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a910:	430b      	orrs	r3, r1
 800a912:	6553      	str	r3, [r2, #84]	@ 0x54
 800a914:	e003      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a91a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a92a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a92e:	2300      	movs	r3, #0
 800a930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a934:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a938:	460b      	mov	r3, r1
 800a93a:	4313      	orrs	r3, r2
 800a93c:	d058      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a946:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a94a:	d033      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a94c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a950:	d82c      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a956:	d02f      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a95c:	d826      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a95e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a962:	d02b      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a968:	d820      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a96a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a96e:	d012      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a974:	d81a      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d022      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a97a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a97e:	d115      	bne.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a984:	3308      	adds	r3, #8
 800a986:	2100      	movs	r1, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 fc5f 	bl	800c24c <RCCEx_PLL2_Config>
 800a98e:	4603      	mov	r3, r0
 800a990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a994:	e015      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99a:	3328      	adds	r3, #40	@ 0x28
 800a99c:	2102      	movs	r1, #2
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 fd06 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a9aa:	e00a      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9b2:	e006      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9b4:	bf00      	nop
 800a9b6:	e004      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9b8:	bf00      	nop
 800a9ba:	e002      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9bc:	bf00      	nop
 800a9be:	e000      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10e      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9ca:	4b06      	ldr	r3, [pc, #24]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9da:	4a02      	ldr	r2, [pc, #8]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9e0:	e006      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a9e2:	bf00      	nop
 800a9e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a9fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa00:	2300      	movs	r3, #0
 800aa02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	d055      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa1c:	d033      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800aa1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa22:	d82c      	bhi.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa28:	d02f      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800aa2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa2e:	d826      	bhi.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa34:	d02b      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800aa36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa3a:	d820      	bhi.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa40:	d012      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800aa42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa46:	d81a      	bhi.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d022      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800aa4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa50:	d115      	bne.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa56:	3308      	adds	r3, #8
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fbf6 	bl	800c24c <RCCEx_PLL2_Config>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa66:	e015      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6c:	3328      	adds	r3, #40	@ 0x28
 800aa6e:	2102      	movs	r1, #2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f001 fc9d 	bl	800c3b0 <RCCEx_PLL3_Config>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa7c:	e00a      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa84:	e006      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa86:	bf00      	nop
 800aa88:	e004      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa8a:	bf00      	nop
 800aa8c:	e002      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa8e:	bf00      	nop
 800aa90:	e000      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aa92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10b      	bne.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa9c:	4ba0      	ldr	r3, [pc, #640]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aaac:	4a9c      	ldr	r2, [pc, #624]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaae:	430b      	orrs	r3, r1
 800aab0:	6593      	str	r3, [r2, #88]	@ 0x58
 800aab2:	e003      	b.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f002 0308 	and.w	r3, r2, #8
 800aac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aacc:	2300      	movs	r3, #0
 800aace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aad2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aad6:	460b      	mov	r3, r1
 800aad8:	4313      	orrs	r3, r2
 800aada:	d01e      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800aadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aae8:	d10c      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaee:	3328      	adds	r3, #40	@ 0x28
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 fc5c 	bl	800c3b0 <RCCEx_PLL3_Config>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ab04:	4b86      	ldr	r3, [pc, #536]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab14:	4a82      	ldr	r2, [pc, #520]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab16:	430b      	orrs	r3, r1
 800ab18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f002 0310 	and.w	r3, r2, #16
 800ab26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ab34:	460b      	mov	r3, r1
 800ab36:	4313      	orrs	r3, r2
 800ab38:	d01e      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ab3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab46:	d10c      	bne.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4c:	3328      	adds	r3, #40	@ 0x28
 800ab4e:	2102      	movs	r1, #2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f001 fc2d 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab62:	4b6f      	ldr	r3, [pc, #444]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab72:	4a6b      	ldr	r2, [pc, #428]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab74:	430b      	orrs	r3, r1
 800ab76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ab84:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab86:	2300      	movs	r3, #0
 800ab88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4313      	orrs	r3, r2
 800ab92:	d03e      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aba0:	d022      	beq.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aba6:	d81b      	bhi.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800abac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abb0:	d00b      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800abb2:	e015      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb8:	3308      	adds	r3, #8
 800abba:	2100      	movs	r1, #0
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 fb45 	bl	800c24c <RCCEx_PLL2_Config>
 800abc2:	4603      	mov	r3, r0
 800abc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abc8:	e00f      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abce:	3328      	adds	r3, #40	@ 0x28
 800abd0:	2102      	movs	r1, #2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f001 fbec 	bl	800c3b0 <RCCEx_PLL3_Config>
 800abd8:	4603      	mov	r3, r0
 800abda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800abde:	e004      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abe6:	e000      	b.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800abe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10b      	bne.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abf2:	4b4b      	ldr	r3, [pc, #300]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800abfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac02:	4a47      	ldr	r2, [pc, #284]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac04:	430b      	orrs	r3, r1
 800ac06:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac08:	e003      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ac1e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac20:	2300      	movs	r3, #0
 800ac22:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	d03b      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ac2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac3a:	d01f      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ac3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac40:	d818      	bhi.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ac42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ac48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac4c:	d007      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ac4e:	e011      	b.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac50:	4b33      	ldr	r3, [pc, #204]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac54:	4a32      	ldr	r2, [pc, #200]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac5c:	e00f      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac62:	3328      	adds	r3, #40	@ 0x28
 800ac64:	2101      	movs	r1, #1
 800ac66:	4618      	mov	r0, r3
 800ac68:	f001 fba2 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac72:	e004      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac7a:	e000      	b.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ac7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10b      	bne.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac86:	4b26      	ldr	r3, [pc, #152]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ac8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac96:	4a22      	ldr	r2, [pc, #136]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac9c:	e003      	b.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aca2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800acb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acb4:	2300      	movs	r3, #0
 800acb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800acbc:	460b      	mov	r3, r1
 800acbe:	4313      	orrs	r3, r2
 800acc0:	d034      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800acc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800accc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acd0:	d007      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800acd2:	e011      	b.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd4:	4b12      	ldr	r3, [pc, #72]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd8:	4a11      	ldr	r2, [pc, #68]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ace0:	e00e      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ace2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace6:	3308      	adds	r3, #8
 800ace8:	2102      	movs	r1, #2
 800acea:	4618      	mov	r0, r3
 800acec:	f001 faae 	bl	800c24c <RCCEx_PLL2_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800acf6:	e003      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10d      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad08:	4b05      	ldr	r3, [pc, #20]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad16:	4a02      	ldr	r2, [pc, #8]	@ (800ad20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad1c:	e006      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ad1e:	bf00      	nop
 800ad20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ad38:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ad42:	460b      	mov	r3, r1
 800ad44:	4313      	orrs	r3, r2
 800ad46:	d00c      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad4c:	3328      	adds	r3, #40	@ 0x28
 800ad4e:	2102      	movs	r1, #2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 fb2d 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ad6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad70:	2300      	movs	r3, #0
 800ad72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	d036      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad88:	d018      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ad8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad8e:	d811      	bhi.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad94:	d014      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ad96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad9a:	d80b      	bhi.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d011      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ada0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ada4:	d106      	bne.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada6:	4bb7      	ldr	r3, [pc, #732]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ada8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adaa:	4ab6      	ldr	r2, [pc, #728]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800adb2:	e008      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adba:	e004      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adbc:	bf00      	nop
 800adbe:	e002      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adc0:	bf00      	nop
 800adc2:	e000      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800adc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adce:	4bad      	ldr	r3, [pc, #692]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800add0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800add2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800add6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800addc:	4aa9      	ldr	r2, [pc, #676]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adde:	430b      	orrs	r3, r1
 800ade0:	6553      	str	r3, [r2, #84]	@ 0x54
 800ade2:	e003      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ade8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800adf8:	653b      	str	r3, [r7, #80]	@ 0x50
 800adfa:	2300      	movs	r3, #0
 800adfc:	657b      	str	r3, [r7, #84]	@ 0x54
 800adfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ae02:	460b      	mov	r3, r1
 800ae04:	4313      	orrs	r3, r2
 800ae06:	d009      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae08:	4b9e      	ldr	r3, [pc, #632]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae16:	4a9b      	ldr	r2, [pc, #620]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ae28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ae32:	460b      	mov	r3, r1
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d009      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae38:	4b92      	ldr	r3, [pc, #584]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ae40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae46:	4a8f      	ldr	r2, [pc, #572]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ae58:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ae62:	460b      	mov	r3, r1
 800ae64:	4313      	orrs	r3, r2
 800ae66:	d00e      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae68:	4b86      	ldr	r3, [pc, #536]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	4a85      	ldr	r2, [pc, #532]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae72:	6113      	str	r3, [r2, #16]
 800ae74:	4b83      	ldr	r3, [pc, #524]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae76:	6919      	ldr	r1, [r3, #16]
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ae80:	4a80      	ldr	r2, [pc, #512]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ae82:	430b      	orrs	r3, r1
 800ae84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ae92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae94:	2300      	movs	r3, #0
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	d009      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aea2:	4b78      	ldr	r3, [pc, #480]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aea6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aeaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb0:	4a74      	ldr	r2, [pc, #464]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aeb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aec2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aec4:	2300      	movs	r3, #0
 800aec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aecc:	460b      	mov	r3, r1
 800aece:	4313      	orrs	r3, r2
 800aed0:	d00a      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aed2:	4b6c      	ldr	r3, [pc, #432]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aeda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee2:	4a68      	ldr	r2, [pc, #416]	@ (800b084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aee4:	430b      	orrs	r3, r1
 800aee6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	2100      	movs	r1, #0
 800aef2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aefa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aefe:	460b      	mov	r3, r1
 800af00:	4313      	orrs	r3, r2
 800af02:	d011      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af08:	3308      	adds	r3, #8
 800af0a:	2100      	movs	r1, #0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f99d 	bl	800c24c <RCCEx_PLL2_Config>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	2100      	movs	r1, #0
 800af32:	6239      	str	r1, [r7, #32]
 800af34:	f003 0302 	and.w	r3, r3, #2
 800af38:	627b      	str	r3, [r7, #36]	@ 0x24
 800af3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af3e:	460b      	mov	r3, r1
 800af40:	4313      	orrs	r3, r2
 800af42:	d011      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af48:	3308      	adds	r3, #8
 800af4a:	2101      	movs	r1, #1
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 f97d 	bl	800c24c <RCCEx_PLL2_Config>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	2100      	movs	r1, #0
 800af72:	61b9      	str	r1, [r7, #24]
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	61fb      	str	r3, [r7, #28]
 800af7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af7e:	460b      	mov	r3, r1
 800af80:	4313      	orrs	r3, r2
 800af82:	d011      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af88:	3308      	adds	r3, #8
 800af8a:	2102      	movs	r1, #2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 f95d 	bl	800c24c <RCCEx_PLL2_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800af98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800afa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	2100      	movs	r1, #0
 800afb2:	6139      	str	r1, [r7, #16]
 800afb4:	f003 0308 	and.w	r3, r3, #8
 800afb8:	617b      	str	r3, [r7, #20]
 800afba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800afbe:	460b      	mov	r3, r1
 800afc0:	4313      	orrs	r3, r2
 800afc2:	d011      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afc8:	3328      	adds	r3, #40	@ 0x28
 800afca:	2100      	movs	r1, #0
 800afcc:	4618      	mov	r0, r3
 800afce:	f001 f9ef 	bl	800c3b0 <RCCEx_PLL3_Config>
 800afd2:	4603      	mov	r3, r0
 800afd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800afd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800afe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800afe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	2100      	movs	r1, #0
 800aff2:	60b9      	str	r1, [r7, #8]
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800affe:	460b      	mov	r3, r1
 800b000:	4313      	orrs	r3, r2
 800b002:	d011      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b008:	3328      	adds	r3, #40	@ 0x28
 800b00a:	2101      	movs	r1, #1
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 f9cf 	bl	800c3b0 <RCCEx_PLL3_Config>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	2100      	movs	r1, #0
 800b032:	6039      	str	r1, [r7, #0]
 800b034:	f003 0320 	and.w	r3, r3, #32
 800b038:	607b      	str	r3, [r7, #4]
 800b03a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b03e:	460b      	mov	r3, r1
 800b040:	4313      	orrs	r3, r2
 800b042:	d011      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b048:	3328      	adds	r3, #40	@ 0x28
 800b04a:	2102      	movs	r1, #2
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 f9af 	bl	800c3b0 <RCCEx_PLL3_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b068:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	e000      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
}
 800b076:	4618      	mov	r0, r3
 800b078:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b07c:	46bd      	mov	sp, r7
 800b07e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b082:	bf00      	nop
 800b084:	58024400 	.word	0x58024400

0800b088 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b090      	sub	sp, #64	@ 0x40
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b096:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b09a:	430b      	orrs	r3, r1
 800b09c:	f040 8094 	bne.w	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b0a0:	4b9b      	ldr	r3, [pc, #620]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0a4:	f003 0307 	and.w	r3, r3, #7
 800b0a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	f200 8087 	bhi.w	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0cd 	.word	0x0800b0cd
 800b0bc:	0800b0f5 	.word	0x0800b0f5
 800b0c0:	0800b11d 	.word	0x0800b11d
 800b0c4:	0800b1b9 	.word	0x0800b1b9
 800b0c8:	0800b145 	.word	0x0800b145
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0cc:	4b90      	ldr	r3, [pc, #576]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0d8:	d108      	bne.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 ff62 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0e8:	f000 bc93 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f0:	f000 bc8f 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0f4:	4b86      	ldr	r3, [pc, #536]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b100:	d108      	bne.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b102:	f107 0318 	add.w	r3, r7, #24
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fca6 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b110:	f000 bc7f 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b114:	2300      	movs	r3, #0
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b118:	f000 bc7b 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b11c:	4b7c      	ldr	r3, [pc, #496]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b128:	d108      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b12a:	f107 030c 	add.w	r3, r7, #12
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fde6 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b138:	f000 bc6b 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b140:	f000 bc67 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b144:	4b72      	ldr	r3, [pc, #456]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b14c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b14e:	4b70      	ldr	r3, [pc, #448]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 0304 	and.w	r3, r3, #4
 800b156:	2b04      	cmp	r3, #4
 800b158:	d10c      	bne.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d109      	bne.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b160:	4b6b      	ldr	r3, [pc, #428]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	08db      	lsrs	r3, r3, #3
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	4a6a      	ldr	r2, [pc, #424]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b16c:	fa22 f303 	lsr.w	r3, r2, r3
 800b170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b172:	e01f      	b.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b174:	4b66      	ldr	r3, [pc, #408]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b17c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b180:	d106      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b188:	d102      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b18a:	4b63      	ldr	r3, [pc, #396]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b18e:	e011      	b.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b190:	4b5f      	ldr	r3, [pc, #380]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b19c:	d106      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1a4:	d102      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1a6:	4b5d      	ldr	r3, [pc, #372]	@ (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1aa:	e003      	b.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1b0:	f000 bc2f 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1b4:	f000 bc2d 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1b8:	4b59      	ldr	r3, [pc, #356]	@ (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1bc:	f000 bc29 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c4:	f000 bc25 	b.w	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b1d0:	430b      	orrs	r3, r1
 800b1d2:	f040 80a7 	bne.w	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b1d6:	4b4e      	ldr	r3, [pc, #312]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b1de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1e6:	d054      	beq.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1ee:	f200 808b 	bhi.w	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b1f8:	f000 8083 	beq.w	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b202:	f200 8081 	bhi.w	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b20c:	d02f      	beq.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b214:	d878      	bhi.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b222:	d012      	beq.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b224:	e070      	b.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b226:	4b3a      	ldr	r3, [pc, #232]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b22e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b232:	d107      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 feb5 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b242:	e3e6      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b248:	e3e3      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b24a:	4b31      	ldr	r3, [pc, #196]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b256:	d107      	bne.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b258:	f107 0318 	add.w	r3, r7, #24
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 fbfb 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b266:	e3d4      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b26c:	e3d1      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b26e:	4b28      	ldr	r3, [pc, #160]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b27a:	d107      	bne.n	800b28c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b27c:	f107 030c 	add.w	r3, r7, #12
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fd3d 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b28a:	e3c2      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b290:	e3bf      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b292:	4b1f      	ldr	r3, [pc, #124]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b296:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b29c:	4b1c      	ldr	r3, [pc, #112]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0304 	and.w	r3, r3, #4
 800b2a4:	2b04      	cmp	r3, #4
 800b2a6:	d10c      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d109      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ae:	4b18      	ldr	r3, [pc, #96]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	08db      	lsrs	r3, r3, #3
 800b2b4:	f003 0303 	and.w	r3, r3, #3
 800b2b8:	4a16      	ldr	r2, [pc, #88]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2c0:	e01e      	b.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2c2:	4b13      	ldr	r3, [pc, #76]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2ce:	d106      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b2d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2d6:	d102      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2dc:	e010      	b.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2de:	4b0c      	ldr	r3, [pc, #48]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2ea:	d106      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2f2:	d102      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2f4:	4b09      	ldr	r3, [pc, #36]	@ (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2f8:	e002      	b.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2fe:	e388      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b300:	e387      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b302:	4b07      	ldr	r3, [pc, #28]	@ (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b306:	e384      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b30c:	e381      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b30e:	bf00      	nop
 800b310:	58024400 	.word	0x58024400
 800b314:	03d09000 	.word	0x03d09000
 800b318:	003d0900 	.word	0x003d0900
 800b31c:	016e3600 	.word	0x016e3600
 800b320:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b328:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b32c:	430b      	orrs	r3, r1
 800b32e:	f040 809c 	bne.w	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b332:	4b9e      	ldr	r3, [pc, #632]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b336:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b33a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b342:	d054      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b34a:	f200 808b 	bhi.w	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b354:	f000 8083 	beq.w	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b35e:	f200 8081 	bhi.w	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b368:	d02f      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b370:	d878      	bhi.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	2b00      	cmp	r3, #0
 800b376:	d004      	beq.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b37e:	d012      	beq.n	800b3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b380:	e070      	b.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b382:	4b8a      	ldr	r3, [pc, #552]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b38a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b38e:	d107      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b394:	4618      	mov	r0, r3
 800b396:	f000 fe07 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39e:	e338      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3a4:	e335      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3a6:	4b81      	ldr	r3, [pc, #516]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3b2:	d107      	bne.n	800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3b4:	f107 0318 	add.w	r3, r7, #24
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 fb4d 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c2:	e326      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3c8:	e323      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3ca:	4b78      	ldr	r3, [pc, #480]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3d6:	d107      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3d8:	f107 030c 	add.w	r3, r7, #12
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 fc8f 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e6:	e314      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ec:	e311      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3ee:	4b6f      	ldr	r3, [pc, #444]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3f8:	4b6c      	ldr	r3, [pc, #432]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b04      	cmp	r3, #4
 800b402:	d10c      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b406:	2b00      	cmp	r3, #0
 800b408:	d109      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b40a:	4b68      	ldr	r3, [pc, #416]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	08db      	lsrs	r3, r3, #3
 800b410:	f003 0303 	and.w	r3, r3, #3
 800b414:	4a66      	ldr	r2, [pc, #408]	@ (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b416:	fa22 f303 	lsr.w	r3, r2, r3
 800b41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b41c:	e01e      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b41e:	4b63      	ldr	r3, [pc, #396]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b42a:	d106      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b432:	d102      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b434:	4b5f      	ldr	r3, [pc, #380]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b438:	e010      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b43a:	4b5c      	ldr	r3, [pc, #368]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b446:	d106      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b44a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b44e:	d102      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b450:	4b59      	ldr	r3, [pc, #356]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b454:	e002      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b45a:	e2da      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b45c:	e2d9      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b45e:	4b57      	ldr	r3, [pc, #348]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b462:	e2d6      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b468:	e2d3      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b46e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b472:	430b      	orrs	r3, r1
 800b474:	f040 80a7 	bne.w	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b478:	4b4c      	ldr	r3, [pc, #304]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b47a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b47c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b480:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b488:	d055      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b490:	f200 8096 	bhi.w	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b49a:	f000 8084 	beq.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b4a4:	f200 808c 	bhi.w	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4ae:	d030      	beq.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b4b6:	f200 8083 	bhi.w	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4c6:	d012      	beq.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b4c8:	e07a      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4ca:	4b38      	ldr	r3, [pc, #224]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4d6:	d107      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fd63 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e6:	e294      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ec:	e291      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4fa:	d107      	bne.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4fc:	f107 0318 	add.w	r3, r7, #24
 800b500:	4618      	mov	r0, r3
 800b502:	f000 faa9 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b50a:	e282      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b510:	e27f      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b512:	4b26      	ldr	r3, [pc, #152]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b51a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b51e:	d107      	bne.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b520:	f107 030c 	add.w	r3, r7, #12
 800b524:	4618      	mov	r0, r3
 800b526:	f000 fbeb 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b52e:	e270      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b534:	e26d      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b536:	4b1d      	ldr	r3, [pc, #116]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b53a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b53e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b540:	4b1a      	ldr	r3, [pc, #104]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 0304 	and.w	r3, r3, #4
 800b548:	2b04      	cmp	r3, #4
 800b54a:	d10c      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b552:	4b16      	ldr	r3, [pc, #88]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	08db      	lsrs	r3, r3, #3
 800b558:	f003 0303 	and.w	r3, r3, #3
 800b55c:	4a14      	ldr	r2, [pc, #80]	@ (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b55e:	fa22 f303 	lsr.w	r3, r2, r3
 800b562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b564:	e01e      	b.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b566:	4b11      	ldr	r3, [pc, #68]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b572:	d106      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b57a:	d102      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b57c:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b580:	e010      	b.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b582:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b58a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b58e:	d106      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b596:	d102      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b598:	4b07      	ldr	r3, [pc, #28]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b59c:	e002      	b.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b5a2:	e236      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5a4:	e235      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5a6:	4b05      	ldr	r3, [pc, #20]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5aa:	e232      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5ac:	58024400 	.word	0x58024400
 800b5b0:	03d09000 	.word	0x03d09000
 800b5b4:	003d0900 	.word	0x003d0900
 800b5b8:	016e3600 	.word	0x016e3600
 800b5bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c4:	e225      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b5c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b5ce:	430b      	orrs	r3, r1
 800b5d0:	f040 8085 	bne.w	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b5d4:	4b9c      	ldr	r3, [pc, #624]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b5dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5e4:	d06b      	beq.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5ec:	d874      	bhi.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5f4:	d056      	beq.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5fc:	d86c      	bhi.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b600:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b604:	d03b      	beq.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b608:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b60c:	d864      	bhi.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b614:	d021      	beq.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b61c:	d85c      	bhi.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b62a:	d004      	beq.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b62c:	e054      	b.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b62e:	f7fe fb5f 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800b632:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b634:	e1ed      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b636:	4b84      	ldr	r3, [pc, #528]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b63e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b642:	d107      	bne.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b644:	f107 0318 	add.w	r3, r7, #24
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fa05 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b652:	e1de      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b654:	2300      	movs	r3, #0
 800b656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b658:	e1db      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b65a:	4b7b      	ldr	r3, [pc, #492]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b666:	d107      	bne.n	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b668:	f107 030c 	add.w	r3, r7, #12
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fb47 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b676:	e1cc      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b67c:	e1c9      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b67e:	4b72      	ldr	r3, [pc, #456]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	2b04      	cmp	r3, #4
 800b688:	d109      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b68a:	4b6f      	ldr	r3, [pc, #444]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	08db      	lsrs	r3, r3, #3
 800b690:	f003 0303 	and.w	r3, r3, #3
 800b694:	4a6d      	ldr	r2, [pc, #436]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b696:	fa22 f303 	lsr.w	r3, r2, r3
 800b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b69c:	e1b9      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6a2:	e1b6      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b6a4:	4b68      	ldr	r3, [pc, #416]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6b0:	d102      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b6b2:	4b67      	ldr	r3, [pc, #412]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b6:	e1ac      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6bc:	e1a9      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6be:	4b62      	ldr	r3, [pc, #392]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6ca:	d102      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b6cc:	4b61      	ldr	r3, [pc, #388]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d0:	e19f      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d6:	e19c      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6dc:	e199      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6e2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	d173      	bne.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b6ea:	4b57      	ldr	r3, [pc, #348]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b6f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6fa:	d02f      	beq.n	800b75c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b702:	d863      	bhi.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b706:	2b00      	cmp	r3, #0
 800b708:	d004      	beq.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b710:	d012      	beq.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b712:	e05b      	b.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b714:	4b4c      	ldr	r3, [pc, #304]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b71c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b720:	d107      	bne.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b722:	f107 0318 	add.w	r3, r7, #24
 800b726:	4618      	mov	r0, r3
 800b728:	f000 f996 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b730:	e16f      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b736:	e16c      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b738:	4b43      	ldr	r3, [pc, #268]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b744:	d107      	bne.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b746:	f107 030c 	add.w	r3, r7, #12
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 fad8 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b754:	e15d      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b75a:	e15a      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b75c:	4b3a      	ldr	r3, [pc, #232]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b75e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b760:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b764:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b766:	4b38      	ldr	r3, [pc, #224]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0304 	and.w	r3, r3, #4
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d10c      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b774:	2b00      	cmp	r3, #0
 800b776:	d109      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b778:	4b33      	ldr	r3, [pc, #204]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	08db      	lsrs	r3, r3, #3
 800b77e:	f003 0303 	and.w	r3, r3, #3
 800b782:	4a32      	ldr	r2, [pc, #200]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b784:	fa22 f303 	lsr.w	r3, r2, r3
 800b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b78a:	e01e      	b.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b78c:	4b2e      	ldr	r3, [pc, #184]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b798:	d106      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7a0:	d102      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7a2:	4b2b      	ldr	r3, [pc, #172]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7a6:	e010      	b.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7a8:	4b27      	ldr	r3, [pc, #156]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7b4:	d106      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7bc:	d102      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7be:	4b25      	ldr	r3, [pc, #148]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7c2:	e002      	b.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7c8:	e123      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7ca:	e122      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7d0:	e11f      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b7da:	430b      	orrs	r3, r1
 800b7dc:	d13c      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b7de:	4b1a      	ldr	r3, [pc, #104]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7f4:	d012      	beq.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b7f6:	e023      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7f8:	4b13      	ldr	r3, [pc, #76]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b804:	d107      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 fbcc 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b814:	e0fd      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b81a:	e0fa      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b81c:	4b0a      	ldr	r3, [pc, #40]	@ (800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b828:	d107      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b82a:	f107 0318 	add.w	r3, r7, #24
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f912 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b838:	e0eb      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b83e:	e0e8      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b844:	e0e5      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b846:	bf00      	nop
 800b848:	58024400 	.word	0x58024400
 800b84c:	03d09000 	.word	0x03d09000
 800b850:	003d0900 	.word	0x003d0900
 800b854:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b85c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b860:	430b      	orrs	r3, r1
 800b862:	f040 8085 	bne.w	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b866:	4b6d      	ldr	r3, [pc, #436]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b86a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b86e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b876:	d06b      	beq.n	800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b87e:	d874      	bhi.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b886:	d056      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b88e:	d86c      	bhi.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b896:	d03b      	beq.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b89e:	d864      	bhi.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a6:	d021      	beq.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8ae:	d85c      	bhi.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8bc:	d004      	beq.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b8be:	e054      	b.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b8c0:	f000 f8b4 	bl	800ba2c <HAL_RCCEx_GetD3PCLK1Freq>
 800b8c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8c6:	e0a4      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8c8:	4b54      	ldr	r3, [pc, #336]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8d4:	d107      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d6:	f107 0318 	add.w	r3, r7, #24
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f8bc 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e4:	e095      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ea:	e092      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8ec:	4b4b      	ldr	r3, [pc, #300]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8f8:	d107      	bne.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8fa:	f107 030c 	add.w	r3, r7, #12
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f9fe 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b908:	e083      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90e:	e080      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b910:	4b42      	ldr	r3, [pc, #264]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b04      	cmp	r3, #4
 800b91a:	d109      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b91c:	4b3f      	ldr	r3, [pc, #252]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	08db      	lsrs	r3, r3, #3
 800b922:	f003 0303 	and.w	r3, r3, #3
 800b926:	4a3e      	ldr	r2, [pc, #248]	@ (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b928:	fa22 f303 	lsr.w	r3, r2, r3
 800b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b92e:	e070      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b934:	e06d      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b936:	4b39      	ldr	r3, [pc, #228]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b942:	d102      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b944:	4b37      	ldr	r3, [pc, #220]	@ (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b948:	e063      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b94e:	e060      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b950:	4b32      	ldr	r3, [pc, #200]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b95c:	d102      	bne.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b95e:	4b32      	ldr	r3, [pc, #200]	@ (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b962:	e056      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b968:	e053      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b96e:	e050      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b970:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b974:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b978:	430b      	orrs	r3, r1
 800b97a:	d148      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b97c:	4b27      	ldr	r3, [pc, #156]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b97e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b980:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b984:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b98c:	d02a      	beq.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b994:	d838      	bhi.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9a2:	d00d      	beq.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b9a4:	e030      	b.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9a6:	4b1d      	ldr	r3, [pc, #116]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9b2:	d102      	bne.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b8:	e02b      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9be:	e028      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9c0:	4b16      	ldr	r3, [pc, #88]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9cc:	d107      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f000 fae8 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9dc:	e019      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9e2:	e016      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9e4:	4b0d      	ldr	r3, [pc, #52]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9f0:	d107      	bne.n	800ba02 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9f2:	f107 0318 	add.w	r3, r7, #24
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 f82e 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba00:	e007      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba06:	e004      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba0c:	e001      	b.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ba12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3740      	adds	r7, #64	@ 0x40
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	58024400 	.word	0x58024400
 800ba20:	03d09000 	.word	0x03d09000
 800ba24:	003d0900 	.word	0x003d0900
 800ba28:	016e3600 	.word	0x016e3600

0800ba2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ba30:	f7fe f92e 	bl	8009c90 <HAL_RCC_GetHCLKFreq>
 800ba34:	4602      	mov	r2, r0
 800ba36:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	091b      	lsrs	r3, r3, #4
 800ba3c:	f003 0307 	and.w	r3, r3, #7
 800ba40:	4904      	ldr	r1, [pc, #16]	@ (800ba54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba42:	5ccb      	ldrb	r3, [r1, r3]
 800ba44:	f003 031f 	and.w	r3, r3, #31
 800ba48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	58024400 	.word	0x58024400
 800ba54:	080123bc 	.word	0x080123bc

0800ba58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b089      	sub	sp, #36	@ 0x24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba60:	4ba1      	ldr	r3, [pc, #644]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba64:	f003 0303 	and.w	r3, r3, #3
 800ba68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba6a:	4b9f      	ldr	r3, [pc, #636]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6e:	0b1b      	lsrs	r3, r3, #12
 800ba70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba76:	4b9c      	ldr	r3, [pc, #624]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba7a:	091b      	lsrs	r3, r3, #4
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba82:	4b99      	ldr	r3, [pc, #612]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba86:	08db      	lsrs	r3, r3, #3
 800ba88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	fb02 f303 	mul.w	r3, r2, r3
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 8111 	beq.w	800bcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	f000 8083 	beq.w	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	f200 80a1 	bhi.w	800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d056      	beq.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bac2:	e099      	b.n	800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bac4:	4b88      	ldr	r3, [pc, #544]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0320 	and.w	r3, r3, #32
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d02d      	beq.n	800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bad0:	4b85      	ldr	r3, [pc, #532]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	08db      	lsrs	r3, r3, #3
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	4a84      	ldr	r2, [pc, #528]	@ (800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800badc:	fa22 f303 	lsr.w	r3, r2, r3
 800bae0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafa:	4b7b      	ldr	r3, [pc, #492]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb2a:	e087      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3e:	4b6a      	ldr	r3, [pc, #424]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb6e:	e065      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb82:	4b59      	ldr	r3, [pc, #356]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8a:	ee07 3a90 	vmov	s15, r3
 800bb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb2:	e043      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bbc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc6:	4b48      	ldr	r3, [pc, #288]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf6:	e021      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0a:	4b37      	ldr	r3, [pc, #220]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bc3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc40:	0a5b      	lsrs	r3, r3, #9
 800bc42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc62:	ee17 2a90 	vmov	r2, s15
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6e:	0c1b      	lsrs	r3, r3, #16
 800bc70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc84:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc90:	ee17 2a90 	vmov	r2, s15
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc98:	4b13      	ldr	r3, [pc, #76]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9c:	0e1b      	lsrs	r3, r3, #24
 800bc9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcbe:	ee17 2a90 	vmov	r2, s15
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bcc6:	e008      	b.n	800bcda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	609a      	str	r2, [r3, #8]
}
 800bcda:	bf00      	nop
 800bcdc:	3724      	adds	r7, #36	@ 0x24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	58024400 	.word	0x58024400
 800bcec:	03d09000 	.word	0x03d09000
 800bcf0:	46000000 	.word	0x46000000
 800bcf4:	4c742400 	.word	0x4c742400
 800bcf8:	4a742400 	.word	0x4a742400
 800bcfc:	4bb71b00 	.word	0x4bb71b00

0800bd00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b089      	sub	sp, #36	@ 0x24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd08:	4ba1      	ldr	r3, [pc, #644]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0c:	f003 0303 	and.w	r3, r3, #3
 800bd10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd12:	4b9f      	ldr	r3, [pc, #636]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	0d1b      	lsrs	r3, r3, #20
 800bd18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd1e:	4b9c      	ldr	r3, [pc, #624]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd2a:	4b99      	ldr	r3, [pc, #612]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2e:	08db      	lsrs	r3, r3, #3
 800bd30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	fb02 f303 	mul.w	r3, r2, r3
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 8111 	beq.w	800bf70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	f000 8083 	beq.w	800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	f200 80a1 	bhi.w	800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d056      	beq.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd6a:	e099      	b.n	800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd6c:	4b88      	ldr	r3, [pc, #544]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d02d      	beq.n	800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd78:	4b85      	ldr	r3, [pc, #532]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	08db      	lsrs	r3, r3, #3
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	4a84      	ldr	r2, [pc, #528]	@ (800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd84:	fa22 f303 	lsr.w	r3, r2, r3
 800bd88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	ee07 3a90 	vmov	s15, r3
 800bd90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	ee07 3a90 	vmov	s15, r3
 800bd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b7b      	ldr	r3, [pc, #492]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bdd2:	e087      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde6:	4b6a      	ldr	r3, [pc, #424]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be16:	e065      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2a:	4b59      	ldr	r3, [pc, #356]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be32:	ee07 3a90 	vmov	s15, r3
 800be36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be5a:	e043      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be6e:	4b48      	ldr	r3, [pc, #288]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be9e:	e021      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800beae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beb2:	4b37      	ldr	r3, [pc, #220]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beba:	ee07 3a90 	vmov	s15, r3
 800bebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bec6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bee2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bee4:	4b2a      	ldr	r3, [pc, #168]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee8:	0a5b      	lsrs	r3, r3, #9
 800beea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800befa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800befe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf0a:	ee17 2a90 	vmov	r2, s15
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf12:	4b1f      	ldr	r3, [pc, #124]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf16:	0c1b      	lsrs	r3, r3, #16
 800bf18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1c:	ee07 3a90 	vmov	s15, r3
 800bf20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf38:	ee17 2a90 	vmov	r2, s15
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bf40:	4b13      	ldr	r3, [pc, #76]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf44:	0e1b      	lsrs	r3, r3, #24
 800bf46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf66:	ee17 2a90 	vmov	r2, s15
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf6e:	e008      	b.n	800bf82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	609a      	str	r2, [r3, #8]
}
 800bf82:	bf00      	nop
 800bf84:	3724      	adds	r7, #36	@ 0x24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	58024400 	.word	0x58024400
 800bf94:	03d09000 	.word	0x03d09000
 800bf98:	46000000 	.word	0x46000000
 800bf9c:	4c742400 	.word	0x4c742400
 800bfa0:	4a742400 	.word	0x4a742400
 800bfa4:	4bb71b00 	.word	0x4bb71b00

0800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b089      	sub	sp, #36	@ 0x24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfb0:	4ba0      	ldr	r3, [pc, #640]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bfba:	4b9e      	ldr	r3, [pc, #632]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbe:	091b      	lsrs	r3, r3, #4
 800bfc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bfc6:	4b9b      	ldr	r3, [pc, #620]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bfd0:	4b98      	ldr	r3, [pc, #608]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd4:	08db      	lsrs	r3, r3, #3
 800bfd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 8111 	beq.w	800c216 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	f000 8083 	beq.w	800c102 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	f200 80a1 	bhi.w	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d056      	beq.n	800c0be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c010:	e099      	b.n	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c012:	4b88      	ldr	r3, [pc, #544]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0320 	and.w	r3, r3, #32
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d02d      	beq.n	800c07a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c01e:	4b85      	ldr	r3, [pc, #532]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	08db      	lsrs	r3, r3, #3
 800c024:	f003 0303 	and.w	r3, r3, #3
 800c028:	4a83      	ldr	r2, [pc, #524]	@ (800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c02a:	fa22 f303 	lsr.w	r3, r2, r3
 800c02e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	ee07 3a90 	vmov	s15, r3
 800c040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c048:	4b7a      	ldr	r3, [pc, #488]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c058:	ed97 6a03 	vldr	s12, [r7, #12]
 800c05c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c06c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c070:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c074:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c078:	e087      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	ee07 3a90 	vmov	s15, r3
 800c080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c084:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08c:	4b69      	ldr	r3, [pc, #420]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c094:	ee07 3a90 	vmov	s15, r3
 800c098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0a0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0bc:	e065      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c244 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c0cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d0:	4b58      	ldr	r3, [pc, #352]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d8:	ee07 3a90 	vmov	s15, r3
 800c0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0e4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c100:	e043      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	ee07 3a90 	vmov	s15, r3
 800c108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c114:	4b47      	ldr	r3, [pc, #284]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11c:	ee07 3a90 	vmov	s15, r3
 800c120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c124:	ed97 6a03 	vldr	s12, [r7, #12]
 800c128:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c134:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c144:	e021      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c150:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c158:	4b36      	ldr	r3, [pc, #216]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c160:	ee07 3a90 	vmov	s15, r3
 800c164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c168:	ed97 6a03 	vldr	s12, [r7, #12]
 800c16c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c188:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c18a:	4b2a      	ldr	r3, [pc, #168]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18e:	0a5b      	lsrs	r3, r3, #9
 800c190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b0:	ee17 2a90 	vmov	r2, s15
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c1b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1bc:	0c1b      	lsrs	r3, r3, #16
 800c1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1de:	ee17 2a90 	vmov	r2, s15
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c1e6:	4b13      	ldr	r3, [pc, #76]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ea:	0e1b      	lsrs	r3, r3, #24
 800c1ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c200:	edd7 6a07 	vldr	s13, [r7, #28]
 800c204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c20c:	ee17 2a90 	vmov	r2, s15
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c214:	e008      	b.n	800c228 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	609a      	str	r2, [r3, #8]
}
 800c228:	bf00      	nop
 800c22a:	3724      	adds	r7, #36	@ 0x24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	58024400 	.word	0x58024400
 800c238:	03d09000 	.word	0x03d09000
 800c23c:	46000000 	.word	0x46000000
 800c240:	4c742400 	.word	0x4c742400
 800c244:	4a742400 	.word	0x4a742400
 800c248:	4bb71b00 	.word	0x4bb71b00

0800c24c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c25a:	4b53      	ldr	r3, [pc, #332]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b03      	cmp	r3, #3
 800c264:	d101      	bne.n	800c26a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e099      	b.n	800c39e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c26a:	4b4f      	ldr	r3, [pc, #316]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a4e      	ldr	r2, [pc, #312]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c270:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c276:	f7f6 fc0d 	bl	8002a94 <HAL_GetTick>
 800c27a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c27c:	e008      	b.n	800c290 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c27e:	f7f6 fc09 	bl	8002a94 <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d901      	bls.n	800c290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e086      	b.n	800c39e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c290:	4b45      	ldr	r3, [pc, #276]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1f0      	bne.n	800c27e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c29c:	4b42      	ldr	r3, [pc, #264]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	031b      	lsls	r3, r3, #12
 800c2aa:	493f      	ldr	r1, [pc, #252]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	025b      	lsls	r3, r3, #9
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	041b      	lsls	r3, r3, #16
 800c2ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	061b      	lsls	r3, r3, #24
 800c2dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c2e0:	4931      	ldr	r1, [pc, #196]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c2e6:	4b30      	ldr	r3, [pc, #192]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	492d      	ldr	r1, [pc, #180]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c2f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fc:	f023 0220 	bic.w	r2, r3, #32
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	4928      	ldr	r1, [pc, #160]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c306:	4313      	orrs	r3, r2
 800c308:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c30a:	4b27      	ldr	r3, [pc, #156]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30e:	4a26      	ldr	r2, [pc, #152]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c310:	f023 0310 	bic.w	r3, r3, #16
 800c314:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c316:	4b24      	ldr	r3, [pc, #144]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c31a:	4b24      	ldr	r3, [pc, #144]	@ (800c3ac <RCCEx_PLL2_Config+0x160>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	69d2      	ldr	r2, [r2, #28]
 800c322:	00d2      	lsls	r2, r2, #3
 800c324:	4920      	ldr	r1, [pc, #128]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c326:	4313      	orrs	r3, r2
 800c328:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c32a:	4b1f      	ldr	r3, [pc, #124]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32e:	4a1e      	ldr	r2, [pc, #120]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c330:	f043 0310 	orr.w	r3, r3, #16
 800c334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d106      	bne.n	800c34a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c33c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	4a19      	ldr	r2, [pc, #100]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c342:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c346:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c348:	e00f      	b.n	800c36a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d106      	bne.n	800c35e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c350:	4b15      	ldr	r3, [pc, #84]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c354:	4a14      	ldr	r2, [pc, #80]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c35a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c35c:	e005      	b.n	800c36a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c35e:	4b12      	ldr	r3, [pc, #72]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c362:	4a11      	ldr	r2, [pc, #68]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c368:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c36a:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a0e      	ldr	r2, [pc, #56]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c376:	f7f6 fb8d 	bl	8002a94 <HAL_GetTick>
 800c37a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c37c:	e008      	b.n	800c390 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c37e:	f7f6 fb89 	bl	8002a94 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d901      	bls.n	800c390 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e006      	b.n	800c39e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c390:	4b05      	ldr	r3, [pc, #20]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d0f0      	beq.n	800c37e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	58024400 	.word	0x58024400
 800c3ac:	ffff0007 	.word	0xffff0007

0800c3b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3be:	4b53      	ldr	r3, [pc, #332]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d101      	bne.n	800c3ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e099      	b.n	800c502 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c3ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a4e      	ldr	r2, [pc, #312]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3da:	f7f6 fb5b 	bl	8002a94 <HAL_GetTick>
 800c3de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3e0:	e008      	b.n	800c3f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3e2:	f7f6 fb57 	bl	8002a94 <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d901      	bls.n	800c3f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e086      	b.n	800c502 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3f4:	4b45      	ldr	r3, [pc, #276]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1f0      	bne.n	800c3e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c400:	4b42      	ldr	r3, [pc, #264]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	051b      	lsls	r3, r3, #20
 800c40e:	493f      	ldr	r1, [pc, #252]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c410:	4313      	orrs	r3, r2
 800c412:	628b      	str	r3, [r1, #40]	@ 0x28
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	3b01      	subs	r3, #1
 800c41a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	025b      	lsls	r3, r3, #9
 800c426:	b29b      	uxth	r3, r3
 800c428:	431a      	orrs	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	3b01      	subs	r3, #1
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c436:	431a      	orrs	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	061b      	lsls	r3, r3, #24
 800c440:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c444:	4931      	ldr	r1, [pc, #196]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c446:	4313      	orrs	r3, r2
 800c448:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c44a:	4b30      	ldr	r3, [pc, #192]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	492d      	ldr	r1, [pc, #180]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c45c:	4b2b      	ldr	r3, [pc, #172]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c460:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	4928      	ldr	r1, [pc, #160]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c46e:	4b27      	ldr	r3, [pc, #156]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c472:	4a26      	ldr	r2, [pc, #152]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c478:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c47a:	4b24      	ldr	r3, [pc, #144]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c47c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c47e:	4b24      	ldr	r3, [pc, #144]	@ (800c510 <RCCEx_PLL3_Config+0x160>)
 800c480:	4013      	ands	r3, r2
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	69d2      	ldr	r2, [r2, #28]
 800c486:	00d2      	lsls	r2, r2, #3
 800c488:	4920      	ldr	r1, [pc, #128]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c48a:	4313      	orrs	r3, r2
 800c48c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c48e:	4b1f      	ldr	r3, [pc, #124]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c492:	4a1e      	ldr	r2, [pc, #120]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a4:	4a19      	ldr	r2, [pc, #100]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c4aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4ac:	e00f      	b.n	800c4ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d106      	bne.n	800c4c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4b4:	4b15      	ldr	r3, [pc, #84]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b8:	4a14      	ldr	r2, [pc, #80]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c4be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4c0:	e005      	b.n	800c4ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c4c2:	4b12      	ldr	r3, [pc, #72]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c6:	4a11      	ldr	r2, [pc, #68]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4da:	f7f6 fadb 	bl	8002a94 <HAL_GetTick>
 800c4de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4e0:	e008      	b.n	800c4f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4e2:	f7f6 fad7 	bl	8002a94 <HAL_GetTick>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d901      	bls.n	800c4f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e006      	b.n	800c502 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4f4:	4b05      	ldr	r3, [pc, #20]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0f0      	beq.n	800c4e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	58024400 	.word	0x58024400
 800c510:	ffff0007 	.word	0xffff0007

0800c514 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08a      	sub	sp, #40	@ 0x28
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e075      	b.n	800c612 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7f5 ff09 	bl	8002350 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2204      	movs	r2, #4
 800c542:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f868 	bl	800c61c <HAL_SD_InitCard>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e05d      	b.n	800c612 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c556:	f107 0308 	add.w	r3, r7, #8
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fdaf 	bl	800d0c0 <HAL_SD_GetCardStatus>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	e052      	b.n	800c612 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c56c:	7e3b      	ldrb	r3, [r7, #24]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c572:	7e7b      	ldrb	r3, [r7, #25]
 800c574:	b2db      	uxtb	r3, r3
 800c576:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d10a      	bne.n	800c596 <HAL_SD_Init+0x82>
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d102      	bne.n	800c58c <HAL_SD_Init+0x78>
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d004      	beq.n	800c596 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c592:	659a      	str	r2, [r3, #88]	@ 0x58
 800c594:	e00b      	b.n	800c5ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d104      	bne.n	800c5a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5a4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c5a6:	e002      	b.n	800c5ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fe6d 	bl	800d294 <HAL_SD_ConfigWideBusOperation>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e026      	b.n	800c612 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c5c4:	f7f6 fa66 	bl	8002a94 <HAL_GetTick>
 800c5c8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c5ca:	e011      	b.n	800c5f0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c5cc:	f7f6 fa62 	bl	8002a94 <HAL_GetTick>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d109      	bne.n	800c5f0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c5e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e010      	b.n	800c612 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 ff61 	bl	800d4b8 <HAL_SD_GetCardState>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b04      	cmp	r3, #4
 800c5fa:	d1e7      	bne.n	800c5cc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3728      	adds	r7, #40	@ 0x28
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b08d      	sub	sp, #52	@ 0x34
 800c620:	af02      	add	r7, sp, #8
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c624:	2300      	movs	r3, #0
 800c626:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c628:	2300      	movs	r3, #0
 800c62a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c630:	2300      	movs	r3, #0
 800c632:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c634:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c638:	f04f 0100 	mov.w	r1, #0
 800c63c:	f7fe fd24 	bl	800b088 <HAL_RCCEx_GetPeriphCLKFreq>
 800c640:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	2b00      	cmp	r3, #0
 800c646:	d109      	bne.n	800c65c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c656:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e070      	b.n	800c73e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65e:	0a1b      	lsrs	r3, r3, #8
 800c660:	4a39      	ldr	r2, [pc, #228]	@ (800c748 <HAL_SD_InitCard+0x12c>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	091b      	lsrs	r3, r3, #4
 800c668:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681c      	ldr	r4, [r3, #0]
 800c66e:	466a      	mov	r2, sp
 800c670:	f107 0318 	add.w	r3, r7, #24
 800c674:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c678:	e882 0003 	stmia.w	r2, {r0, r1}
 800c67c:	f107 030c 	add.w	r3, r7, #12
 800c680:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c682:	4620      	mov	r0, r4
 800c684:	f003 fffe 	bl	8010684 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4618      	mov	r0, r3
 800c68e:	f004 f841 	bl	8010714 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d005      	beq.n	800c6a4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d007      	beq.n	800c6ba <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c6aa:	4a28      	ldr	r2, [pc, #160]	@ (800c74c <HAL_SD_InitCard+0x130>)
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7f6 f9f9 	bl	8002aac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 ffea 	bl	800d694 <SD_PowerON>
 800c6c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	431a      	orrs	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e02e      	b.n	800c73e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 ff09 	bl	800d4f8 <SD_InitCard>
 800c6e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00b      	beq.n	800c706 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e01b      	b.n	800c73e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c70e:	4618      	mov	r0, r3
 800c710:	f004 f896 	bl	8010840 <SDMMC_CmdBlockLength>
 800c714:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00f      	beq.n	800c73c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a0b      	ldr	r2, [pc, #44]	@ (800c750 <HAL_SD_InitCard+0x134>)
 800c722:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	431a      	orrs	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e000      	b.n	800c73e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	372c      	adds	r7, #44	@ 0x2c
 800c742:	46bd      	mov	sp, r7
 800c744:	bd90      	pop	{r4, r7, pc}
 800c746:	bf00      	nop
 800c748:	014f8b59 	.word	0x014f8b59
 800c74c:	00012110 	.word	0x00012110
 800c750:	1fe00fff 	.word	0x1fe00fff

0800c754 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08c      	sub	sp, #48	@ 0x30
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
 800c760:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d107      	bne.n	800c77c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c770:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	e08d      	b.n	800c898 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b01      	cmp	r3, #1
 800c786:	f040 8086 	bne.w	800c896 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	441a      	add	r2, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d907      	bls.n	800c7ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7a2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e074      	b.n	800c898 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2203      	movs	r2, #3
 800c7b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	68ba      	ldr	r2, [r7, #8]
 800c7c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	025a      	lsls	r2, r3, #9
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d002      	beq.n	800c7da <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d6:	025b      	lsls	r3, r3, #9
 800c7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295
 800c7de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	025b      	lsls	r3, r3, #9
 800c7e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c7e6:	2390      	movs	r3, #144	@ 0x90
 800c7e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c7ea:	2302      	movs	r3, #2
 800c7ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f107 0210 	add.w	r2, r7, #16
 800c7fe:	4611      	mov	r1, r2
 800c800:	4618      	mov	r0, r3
 800c802:	f003 fff1 	bl	80107e8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	68da      	ldr	r2, [r3, #12]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c814:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2201      	movs	r2, #1
 800c824:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d90a      	bls.n	800c842 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2282      	movs	r2, #130	@ 0x82
 800c830:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c838:	4618      	mov	r0, r3
 800c83a:	f004 f847 	bl	80108cc <SDMMC_CmdReadMultiBlock>
 800c83e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c840:	e009      	b.n	800c856 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2281      	movs	r2, #129	@ 0x81
 800c846:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c84e:	4618      	mov	r0, r3
 800c850:	f004 f819 	bl	8010886 <SDMMC_CmdReadSingleBlock>
 800c854:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d012      	beq.n	800c882 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a0f      	ldr	r2, [pc, #60]	@ (800c8a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c862:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	431a      	orrs	r2, r3
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	e00a      	b.n	800c898 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c890:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c892:	2300      	movs	r3, #0
 800c894:	e000      	b.n	800c898 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c896:	2302      	movs	r3, #2
  }
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3730      	adds	r7, #48	@ 0x30
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	1fe00fff 	.word	0x1fe00fff

0800c8a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08c      	sub	sp, #48	@ 0x30
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d107      	bne.n	800c8cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e08d      	b.n	800c9e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	f040 8086 	bne.w	800c9e6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c8e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	441a      	add	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d907      	bls.n	800c8fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	e074      	b.n	800c9e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2203      	movs	r2, #3
 800c902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2200      	movs	r2, #0
 800c90c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	025a      	lsls	r2, r3, #9
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c920:	2b01      	cmp	r3, #1
 800c922:	d002      	beq.n	800c92a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c926:	025b      	lsls	r3, r3, #9
 800c928:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c92a:	f04f 33ff 	mov.w	r3, #4294967295
 800c92e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	025b      	lsls	r3, r3, #9
 800c934:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c936:	2390      	movs	r3, #144	@ 0x90
 800c938:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c93a:	2300      	movs	r3, #0
 800c93c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c93e:	2300      	movs	r3, #0
 800c940:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c942:	2300      	movs	r3, #0
 800c944:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f107 0210 	add.w	r2, r7, #16
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f003 ff49 	bl	80107e8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c964:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2201      	movs	r2, #1
 800c974:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d90a      	bls.n	800c992 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	22a0      	movs	r2, #160	@ 0xa0
 800c980:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c988:	4618      	mov	r0, r3
 800c98a:	f003 ffe5 	bl	8010958 <SDMMC_CmdWriteMultiBlock>
 800c98e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c990:	e009      	b.n	800c9a6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2290      	movs	r2, #144	@ 0x90
 800c996:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f003 ffb7 	bl	8010912 <SDMMC_CmdWriteSingleBlock>
 800c9a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d012      	beq.n	800c9d2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a0f      	ldr	r2, [pc, #60]	@ (800c9f0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c9b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e00a      	b.n	800c9e8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c9e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e000      	b.n	800c9e8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c9e6:	2302      	movs	r3, #2
  }
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3730      	adds	r7, #48	@ 0x30
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	1fe00fff 	.word	0x1fe00fff

0800c9f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d008      	beq.n	800ca22 <HAL_SD_IRQHandler+0x2e>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f003 0308 	and.w	r3, r3, #8
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f001 f926 	bl	800dc6c <SD_Read_IT>
 800ca20:	e19a      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 80ac 	beq.w	800cb8a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca3a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	4b59      	ldr	r3, [pc, #356]	@ (800cbac <HAL_SD_IRQHandler+0x1b8>)
 800ca48:	400b      	ands	r3, r1
 800ca4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ca5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca6a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f003 0308 	and.w	r3, r3, #8
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d038      	beq.n	800cae8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f003 0302 	and.w	r3, r3, #2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d104      	bne.n	800ca8a <HAL_SD_IRQHandler+0x96>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f003 0320 	and.w	r3, r3, #32
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d011      	beq.n	800caae <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f003 ff86 	bl	80109a0 <SDMMC_CmdStopTransfer>
 800ca94:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d008      	beq.n	800caae <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	431a      	orrs	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f95b 	bl	800cd64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a3f      	ldr	r2, [pc, #252]	@ (800cbb0 <HAL_SD_IRQHandler+0x1bc>)
 800cab4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d104      	bne.n	800cad8 <HAL_SD_IRQHandler+0xe4>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f003 0302 	and.w	r3, r3, #2
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d003      	beq.n	800cae0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f004 fc31 	bl	8011340 <HAL_SD_RxCpltCallback>
 800cade:	e13b      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f004 fc23 	bl	801132c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cae6:	e137      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 8132 	beq.w	800cd58 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2200      	movs	r2, #0
 800cafa:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2200      	movs	r2, #0
 800cb02:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d104      	bne.n	800cb20 <HAL_SD_IRQHandler+0x12c>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f003 0320 	and.w	r3, r3, #32
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d011      	beq.n	800cb44 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f003 ff3b 	bl	80109a0 <SDMMC_CmdStopTransfer>
 800cb2a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d008      	beq.n	800cb44 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	431a      	orrs	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f910 	bl	800cd64 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f003 0310 	and.w	r3, r3, #16
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d104      	bne.n	800cb66 <HAL_SD_IRQHandler+0x172>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f003 0320 	and.w	r3, r3, #32
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d002      	beq.n	800cb6c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f004 fbe0 	bl	801132c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d105      	bne.n	800cb82 <HAL_SD_IRQHandler+0x18e>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 80eb 	beq.w	800cd58 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f004 fbdc 	bl	8011340 <HAL_SD_RxCpltCallback>
}
 800cb88:	e0e6      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00d      	beq.n	800cbb4 <HAL_SD_IRQHandler+0x1c0>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f003 0308 	and.w	r3, r3, #8
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d008      	beq.n	800cbb4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f001 f8a8 	bl	800dcf8 <SD_Write_IT>
 800cba8:	e0d6      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
 800cbaa:	bf00      	nop
 800cbac:	ffff3ec5 	.word	0xffff3ec5
 800cbb0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbba:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f000 809d 	beq.w	800ccfe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbca:	f003 0302 	and.w	r3, r3, #2
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d005      	beq.n	800cbde <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbd6:	f043 0202 	orr.w	r2, r3, #2
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe4:	f003 0308 	and.w	r3, r3, #8
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d005      	beq.n	800cbf8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf0:	f043 0208 	orr.w	r2, r3, #8
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbfe:	f003 0320 	and.w	r3, r3, #32
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d005      	beq.n	800cc12 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc0a:	f043 0220 	orr.w	r2, r3, #32
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc18:	f003 0310 	and.w	r3, r3, #16
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d005      	beq.n	800cc2c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc24:	f043 0210 	orr.w	r2, r3, #16
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a4b      	ldr	r2, [pc, #300]	@ (800cd60 <HAL_SD_IRQHandler+0x36c>)
 800cc32:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800cc42:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68da      	ldr	r2, [r3, #12]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc52:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cc62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cc72:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f003 fe91 	bl	80109a0 <SDMMC_CmdStopTransfer>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc84:	431a      	orrs	r2, r3
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68da      	ldr	r2, [r3, #12]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc98:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cca2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f003 0308 	and.w	r3, r3, #8
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00a      	beq.n	800ccc4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 f851 	bl	800cd64 <HAL_SD_ErrorCallback>
}
 800ccc2:	e049      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d044      	beq.n	800cd58 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d040      	beq.n	800cd58 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cce4:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2200      	movs	r2, #0
 800ccec:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f834 	bl	800cd64 <HAL_SD_ErrorCallback>
}
 800ccfc:	e02c      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d025      	beq.n	800cd58 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd14:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10c      	bne.n	800cd3e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f003 0320 	and.w	r3, r3, #32
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d003      	beq.n	800cd36 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f001 f84a 	bl	800ddc8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cd34:	e010      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f001 f832 	bl	800dda0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cd3c:	e00c      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f003 0320 	and.w	r3, r3, #32
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d003      	beq.n	800cd50 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f001 f833 	bl	800ddb4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cd4e:	e003      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 f81b 	bl	800dd8c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cd56:	e7ff      	b.n	800cd58 <HAL_SD_IRQHandler+0x364>
 800cd58:	bf00      	nop
 800cd5a:	3710      	adds	r7, #16
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	18000f3a 	.word	0x18000f3a

0800cd64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cd6c:	bf00      	nop
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd86:	0f9b      	lsrs	r3, r3, #30
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd92:	0e9b      	lsrs	r3, r3, #26
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cda4:	0e1b      	lsrs	r3, r3, #24
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	f003 0303 	and.w	r3, r3, #3
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdb6:	0c1b      	lsrs	r3, r3, #16
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdc2:	0a1b      	lsrs	r3, r3, #8
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdd8:	0d1b      	lsrs	r3, r3, #20
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cde4:	0c1b      	lsrs	r3, r3, #16
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	f003 030f 	and.w	r3, r3, #15
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdf6:	0bdb      	lsrs	r3, r3, #15
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce08:	0b9b      	lsrs	r3, r3, #14
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce1a:	0b5b      	lsrs	r3, r3, #13
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	b2da      	uxtb	r2, r3
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce2c:	0b1b      	lsrs	r3, r3, #12
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f003 0301 	and.w	r3, r3, #1
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d163      	bne.n	800cf10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce4c:	009a      	lsls	r2, r3, #2
 800ce4e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800ce52:	4013      	ands	r3, r2
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800ce58:	0f92      	lsrs	r2, r2, #30
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce64:	0edb      	lsrs	r3, r3, #27
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce76:	0e1b      	lsrs	r3, r3, #24
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	f003 0307 	and.w	r3, r3, #7
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce88:	0d5b      	lsrs	r3, r3, #21
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	f003 0307 	and.w	r3, r3, #7
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce9a:	0c9b      	lsrs	r3, r3, #18
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	f003 0307 	and.w	r3, r3, #7
 800cea2:	b2da      	uxtb	r2, r3
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceac:	0bdb      	lsrs	r3, r3, #15
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f003 0307 	and.w	r3, r3, #7
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	7e1b      	ldrb	r3, [r3, #24]
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	3302      	adds	r3, #2
 800ced0:	2201      	movs	r2, #1
 800ced2:	fa02 f303 	lsl.w	r3, r2, r3
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ceda:	fb03 f202 	mul.w	r2, r3, r2
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	7a1b      	ldrb	r3, [r3, #8]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 030f 	and.w	r3, r3, #15
 800ceec:	2201      	movs	r2, #1
 800ceee:	409a      	lsls	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cefc:	0a52      	lsrs	r2, r2, #9
 800cefe:	fb03 f202 	mul.w	r2, r3, r2
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf0c:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf0e:	e031      	b.n	800cf74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d11d      	bne.n	800cf54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf1c:	041b      	lsls	r3, r3, #16
 800cf1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf26:	0c1b      	lsrs	r3, r3, #16
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	3301      	adds	r3, #1
 800cf34:	029a      	lsls	r2, r3, #10
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf48:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	655a      	str	r2, [r3, #84]	@ 0x54
 800cf52:	e00f      	b.n	800cf74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a58      	ldr	r2, [pc, #352]	@ (800d0bc <HAL_SD_GetCardCSD+0x344>)
 800cf5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e09d      	b.n	800d0b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf78:	0b9b      	lsrs	r3, r3, #14
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf8a:	09db      	lsrs	r3, r3, #7
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfac:	0fdb      	lsrs	r3, r3, #31
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfb8:	0f5b      	lsrs	r3, r3, #29
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	f003 0303 	and.w	r3, r3, #3
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfca:	0e9b      	lsrs	r3, r3, #26
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	f003 0307 	and.w	r3, r3, #7
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfdc:	0d9b      	lsrs	r3, r3, #22
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 030f 	and.w	r3, r3, #15
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfee:	0d5b      	lsrs	r3, r3, #21
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d00a:	0c1b      	lsrs	r3, r3, #16
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	f003 0301 	and.w	r3, r3, #1
 800d012:	b2da      	uxtb	r2, r3
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d01e:	0bdb      	lsrs	r3, r3, #15
 800d020:	b2db      	uxtb	r3, r3
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d032:	0b9b      	lsrs	r3, r3, #14
 800d034:	b2db      	uxtb	r3, r3
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d046:	0b5b      	lsrs	r3, r3, #13
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d05a:	0b1b      	lsrs	r3, r3, #12
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	b2da      	uxtb	r2, r3
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d06e:	0a9b      	lsrs	r3, r3, #10
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 0303 	and.w	r3, r3, #3
 800d076:	b2da      	uxtb	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d082:	0a1b      	lsrs	r3, r3, #8
 800d084:	b2db      	uxtb	r3, r3
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	1fe00fff 	.word	0x1fe00fff

0800d0c0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b094      	sub	sp, #80	@ 0x50
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d101      	bne.n	800d0e0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e0a7      	b.n	800d230 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d0e0:	f107 0308 	add.w	r3, r7, #8
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fb62 	bl	800d7b0 <SD_SendSDStatus>
 800d0ec:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d011      	beq.n	800d118 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a4f      	ldr	r2, [pc, #316]	@ (800d238 <HAL_SD_GetCardStatus+0x178>)
 800d0fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d102:	431a      	orrs	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d116:	e070      	b.n	800d1fa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	099b      	lsrs	r3, r3, #6
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 0303 	and.w	r3, r3, #3
 800d122:	b2da      	uxtb	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	095b      	lsrs	r3, r3, #5
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	b2da      	uxtb	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	0a1b      	lsrs	r3, r3, #8
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d142:	b29a      	uxth	r2, r3
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	0e1b      	lsrs	r3, r3, #24
 800d148:	b29b      	uxth	r3, r3
 800d14a:	4313      	orrs	r3, r2
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	061a      	lsls	r2, r3, #24
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	021b      	lsls	r3, r3, #8
 800d15a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d15e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	0a1b      	lsrs	r3, r3, #8
 800d164:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d168:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	0e1b      	lsrs	r3, r3, #24
 800d16e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	b2da      	uxtb	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	0a1b      	lsrs	r3, r3, #8
 800d180:	b2da      	uxtb	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	0d1b      	lsrs	r3, r3, #20
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	f003 030f 	and.w	r3, r3, #15
 800d190:	b2da      	uxtb	r2, r3
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	0c1b      	lsrs	r3, r3, #16
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	0a9b      	lsrs	r3, r3, #10
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	0a1b      	lsrs	r3, r3, #8
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	091b      	lsrs	r3, r3, #4
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	f003 030f 	and.w	r3, r3, #15
 800d1dc:	b2da      	uxtb	r2, r3
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	0e1b      	lsrs	r3, r3, #24
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d202:	4618      	mov	r0, r3
 800d204:	f003 fb1c 	bl	8010840 <SDMMC_CmdBlockLength>
 800d208:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00d      	beq.n	800d22c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a08      	ldr	r2, [pc, #32]	@ (800d238 <HAL_SD_GetCardStatus+0x178>)
 800d216:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d21c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d22c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d230:	4618      	mov	r0, r3
 800d232:	3750      	adds	r7, #80	@ 0x50
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	1fe00fff 	.word	0x1fe00fff

0800d23c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d294:	b590      	push	{r4, r7, lr}
 800d296:	b08d      	sub	sp, #52	@ 0x34
 800d298:	af02      	add	r7, sp, #8
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2203      	movs	r2, #3
 800d2a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d02e      	beq.n	800d312 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2ba:	d106      	bne.n	800d2ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	635a      	str	r2, [r3, #52]	@ 0x34
 800d2c8:	e029      	b.n	800d31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2d0:	d10a      	bne.n	800d2e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fb64 	bl	800d9a0 <SD_WideBus_Enable>
 800d2d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	635a      	str	r2, [r3, #52]	@ 0x34
 800d2e6:	e01a      	b.n	800d31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fba1 	bl	800da36 <SD_WideBus_Disable>
 800d2f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	431a      	orrs	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	635a      	str	r2, [r3, #52]	@ 0x34
 800d302:	e00c      	b.n	800d31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d308:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d310:	e005      	b.n	800d31e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d316:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d322:	2b00      	cmp	r3, #0
 800d324:	d007      	beq.n	800d336 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a5f      	ldr	r2, [pc, #380]	@ (800d4a8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d32c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d334:	e096      	b.n	800d464 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d336:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d33a:	f04f 0100 	mov.w	r1, #0
 800d33e:	f7fd fea3 	bl	800b088 <HAL_RCCEx_GetPeriphCLKFreq>
 800d342:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 8083 	beq.w	800d452 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	695a      	ldr	r2, [r3, #20]
 800d366:	69fb      	ldr	r3, [r7, #28]
 800d368:	4950      	ldr	r1, [pc, #320]	@ (800d4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800d36a:	fba1 1303 	umull	r1, r3, r1, r3
 800d36e:	0e1b      	lsrs	r3, r3, #24
 800d370:	429a      	cmp	r2, r3
 800d372:	d303      	bcc.n	800d37c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	61bb      	str	r3, [r7, #24]
 800d37a:	e05a      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d384:	d103      	bne.n	800d38e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	61bb      	str	r3, [r7, #24]
 800d38c:	e051      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d396:	d126      	bne.n	800d3e6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10e      	bne.n	800d3be <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	4a43      	ldr	r2, [pc, #268]	@ (800d4b0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d906      	bls.n	800d3b6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	4a40      	ldr	r2, [pc, #256]	@ (800d4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b0:	0e5b      	lsrs	r3, r3, #25
 800d3b2:	61bb      	str	r3, [r7, #24]
 800d3b4:	e03d      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	61bb      	str	r3, [r7, #24]
 800d3bc:	e039      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	695b      	ldr	r3, [r3, #20]
 800d3c2:	005b      	lsls	r3, r3, #1
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ca:	4a39      	ldr	r2, [pc, #228]	@ (800d4b0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d906      	bls.n	800d3de <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	4a36      	ldr	r2, [pc, #216]	@ (800d4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3d8:	0e5b      	lsrs	r3, r3, #25
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	e029      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	61bb      	str	r3, [r7, #24]
 800d3e4:	e025      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10e      	bne.n	800d40c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	4a30      	ldr	r2, [pc, #192]	@ (800d4b4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d906      	bls.n	800d404 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	4a2c      	ldr	r2, [pc, #176]	@ (800d4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d3fe:	0e1b      	lsrs	r3, r3, #24
 800d400:	61bb      	str	r3, [r7, #24]
 800d402:	e016      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	695b      	ldr	r3, [r3, #20]
 800d408:	61bb      	str	r3, [r7, #24]
 800d40a:	e012      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	695b      	ldr	r3, [r3, #20]
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	69fa      	ldr	r2, [r7, #28]
 800d414:	fbb2 f3f3 	udiv	r3, r2, r3
 800d418:	4a26      	ldr	r2, [pc, #152]	@ (800d4b4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d906      	bls.n	800d42c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	4a22      	ldr	r2, [pc, #136]	@ (800d4ac <HAL_SD_ConfigWideBusOperation+0x218>)
 800d422:	fba2 2303 	umull	r2, r3, r2, r3
 800d426:	0e1b      	lsrs	r3, r3, #24
 800d428:	61bb      	str	r3, [r7, #24]
 800d42a:	e002      	b.n	800d432 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681c      	ldr	r4, [r3, #0]
 800d436:	466a      	mov	r2, sp
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d440:	e882 0003 	stmia.w	r2, {r0, r1}
 800d444:	f107 0308 	add.w	r3, r7, #8
 800d448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d44a:	4620      	mov	r0, r4
 800d44c:	f003 f91a 	bl	8010684 <SDMMC_Init>
 800d450:	e008      	b.n	800d464 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d456:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d46c:	4618      	mov	r0, r3
 800d46e:	f003 f9e7 	bl	8010840 <SDMMC_CmdBlockLength>
 800d472:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00c      	beq.n	800d494 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a0a      	ldr	r2, [pc, #40]	@ (800d4a8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d480:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	431a      	orrs	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	372c      	adds	r7, #44	@ 0x2c
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd90      	pop	{r4, r7, pc}
 800d4a8:	1fe00fff 	.word	0x1fe00fff
 800d4ac:	55e63b89 	.word	0x55e63b89
 800d4b0:	02faf080 	.word	0x02faf080
 800d4b4:	017d7840 	.word	0x017d7840

0800d4b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d4c4:	f107 030c 	add.w	r3, r7, #12
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fa40 	bl	800d950 <SD_SendStatus>
 800d4d0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d005      	beq.n	800d4e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	0a5b      	lsrs	r3, r3, #9
 800d4e8:	f003 030f 	and.w	r3, r3, #15
 800d4ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d4ee:	693b      	ldr	r3, [r7, #16]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b090      	sub	sp, #64	@ 0x40
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d504:	f7f5 fac6 	bl	8002a94 <HAL_GetTick>
 800d508:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4618      	mov	r0, r3
 800d510:	f003 f911 	bl	8010736 <SDMMC_GetPowerState>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d51a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d51e:	e0b5      	b.n	800d68c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d524:	2b03      	cmp	r3, #3
 800d526:	d02e      	beq.n	800d586 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f003 fb5c 	bl	8010bea <SDMMC_CmdSendCID>
 800d532:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <SD_InitCard+0x46>
    {
      return errorstate;
 800d53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53c:	e0a6      	b.n	800d68c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2100      	movs	r1, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f003 f93c 	bl	80107c2 <SDMMC_GetResponse>
 800d54a:	4602      	mov	r2, r0
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2104      	movs	r1, #4
 800d556:	4618      	mov	r0, r3
 800d558:	f003 f933 	bl	80107c2 <SDMMC_GetResponse>
 800d55c:	4602      	mov	r2, r0
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2108      	movs	r1, #8
 800d568:	4618      	mov	r0, r3
 800d56a:	f003 f92a 	bl	80107c2 <SDMMC_GetResponse>
 800d56e:	4602      	mov	r2, r0
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	210c      	movs	r1, #12
 800d57a:	4618      	mov	r0, r3
 800d57c:	f003 f921 	bl	80107c2 <SDMMC_GetResponse>
 800d580:	4602      	mov	r2, r0
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d01d      	beq.n	800d5ca <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d58e:	e019      	b.n	800d5c4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f107 020a 	add.w	r2, r7, #10
 800d598:	4611      	mov	r1, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f003 fb64 	bl	8010c68 <SDMMC_CmdSetRelAdd>
 800d5a0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <SD_InitCard+0xb4>
      {
        return errorstate;
 800d5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5aa:	e06f      	b.n	800d68c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d5ac:	f7f5 fa72 	bl	8002a94 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d902      	bls.n	800d5c4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d5be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d5c2:	e063      	b.n	800d68c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d5c4:	897b      	ldrh	r3, [r7, #10]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d0e2      	beq.n	800d590 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ce:	2b03      	cmp	r3, #3
 800d5d0:	d036      	beq.n	800d640 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d5d2:	897b      	ldrh	r3, [r7, #10]
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5e2:	041b      	lsls	r3, r3, #16
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	f003 fb1e 	bl	8010c28 <SDMMC_CmdSendCSD>
 800d5ec:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <SD_InitCard+0x100>
    {
      return errorstate;
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	e049      	b.n	800d68c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	4618      	mov	r0, r3
 800d600:	f003 f8df 	bl	80107c2 <SDMMC_GetResponse>
 800d604:	4602      	mov	r2, r0
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2104      	movs	r1, #4
 800d610:	4618      	mov	r0, r3
 800d612:	f003 f8d6 	bl	80107c2 <SDMMC_GetResponse>
 800d616:	4602      	mov	r2, r0
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2108      	movs	r1, #8
 800d622:	4618      	mov	r0, r3
 800d624:	f003 f8cd 	bl	80107c2 <SDMMC_GetResponse>
 800d628:	4602      	mov	r2, r0
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	210c      	movs	r1, #12
 800d634:	4618      	mov	r0, r3
 800d636:	f003 f8c4 	bl	80107c2 <SDMMC_GetResponse>
 800d63a:	4602      	mov	r2, r0
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2104      	movs	r1, #4
 800d646:	4618      	mov	r0, r3
 800d648:	f003 f8bb 	bl	80107c2 <SDMMC_GetResponse>
 800d64c:	4603      	mov	r3, r0
 800d64e:	0d1a      	lsrs	r2, r3, #20
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d654:	f107 030c 	add.w	r3, r7, #12
 800d658:	4619      	mov	r1, r3
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7ff fb8c 	bl	800cd78 <HAL_SD_GetCardCSD>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d002      	beq.n	800d66c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d666:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d66a:	e00f      	b.n	800d68c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d674:	041b      	lsls	r3, r3, #16
 800d676:	4619      	mov	r1, r3
 800d678:	4610      	mov	r0, r2
 800d67a:	f003 f9cd 	bl	8010a18 <SDMMC_CmdSelDesel>
 800d67e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <SD_InitCard+0x192>
  {
    return errorstate;
 800d686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d688:	e000      	b.n	800d68c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3740      	adds	r7, #64	@ 0x40
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f003 f9d6 	bl	8010a5e <SDMMC_CmdGoIdleState>
 800d6b2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <SD_PowerON+0x2a>
  {
    return errorstate;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	e072      	b.n	800d7a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f003 f9e9 	bl	8010a9a <SDMMC_CmdOperCond>
 800d6c8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6d0:	d10d      	bne.n	800d6ee <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f003 f9be 	bl	8010a5e <SDMMC_CmdGoIdleState>
 800d6e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d004      	beq.n	800d6f4 <SD_PowerON+0x60>
    {
      return errorstate;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	e05a      	b.n	800d7a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d137      	bne.n	800d76c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2100      	movs	r1, #0
 800d702:	4618      	mov	r0, r3
 800d704:	f003 f9e9 	bl	8010ada <SDMMC_CmdAppCommand>
 800d708:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d02d      	beq.n	800d76c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d710:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d714:	e046      	b.n	800d7a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2100      	movs	r1, #0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f003 f9dc 	bl	8010ada <SDMMC_CmdAppCommand>
 800d722:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <SD_PowerON+0x9a>
    {
      return errorstate;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	e03a      	b.n	800d7a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	491e      	ldr	r1, [pc, #120]	@ (800d7ac <SD_PowerON+0x118>)
 800d734:	4618      	mov	r0, r3
 800d736:	f003 f9f3 	bl	8010b20 <SDMMC_CmdAppOperCommand>
 800d73a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d742:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d746:	e02d      	b.n	800d7a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2100      	movs	r1, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f003 f837 	bl	80107c2 <SDMMC_GetResponse>
 800d754:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	0fdb      	lsrs	r3, r3, #31
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d101      	bne.n	800d762 <SD_PowerON+0xce>
 800d75e:	2301      	movs	r3, #1
 800d760:	e000      	b.n	800d764 <SD_PowerON+0xd0>
 800d762:	2300      	movs	r3, #0
 800d764:	613b      	str	r3, [r7, #16]

    count++;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	3301      	adds	r3, #1
 800d76a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d772:	4293      	cmp	r3, r2
 800d774:	d802      	bhi.n	800d77c <SD_PowerON+0xe8>
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d0cc      	beq.n	800d716 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d782:	4293      	cmp	r3, r2
 800d784:	d902      	bls.n	800d78c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d786:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d78a:	e00b      	b.n	800d7a4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	c1100000 	.word	0xc1100000

0800d7b0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b08c      	sub	sp, #48	@ 0x30
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d7ba:	f7f5 f96b 	bl	8002a94 <HAL_GetTick>
 800d7be:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f002 fff9 	bl	80107c2 <SDMMC_GetResponse>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d7da:	d102      	bne.n	800d7e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d7dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d7e0:	e0b0      	b.n	800d944 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2140      	movs	r1, #64	@ 0x40
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f003 f829 	bl	8010840 <SDMMC_CmdBlockLength>
 800d7ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7f0:	6a3b      	ldr	r3, [r7, #32]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d005      	beq.n	800d802 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d7fe:	6a3b      	ldr	r3, [r7, #32]
 800d800:	e0a0      	b.n	800d944 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d80a:	041b      	lsls	r3, r3, #16
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f003 f963 	bl	8010ada <SDMMC_CmdAppCommand>
 800d814:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	e08d      	b.n	800d944 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d828:	f04f 33ff 	mov.w	r3, #4294967295
 800d82c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d82e:	2340      	movs	r3, #64	@ 0x40
 800d830:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d832:	2360      	movs	r3, #96	@ 0x60
 800d834:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d836:	2302      	movs	r3, #2
 800d838:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d83a:	2300      	movs	r3, #0
 800d83c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d83e:	2301      	movs	r3, #1
 800d840:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f107 0208 	add.w	r2, r7, #8
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f002 ffcb 	bl	80107e8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f003 fa4b 	bl	8010cf2 <SDMMC_CmdStatusRegister>
 800d85c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d85e:	6a3b      	ldr	r3, [r7, #32]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d02b      	beq.n	800d8bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	e069      	b.n	800d944 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d013      	beq.n	800d8a6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d87e:	2300      	movs	r3, #0
 800d880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d882:	e00d      	b.n	800d8a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4618      	mov	r0, r3
 800d88a:	f002 ff25 	bl	80106d8 <SDMMC_ReadFIFO>
 800d88e:	4602      	mov	r2, r0
 800d890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d892:	601a      	str	r2, [r3, #0]
        pData++;
 800d894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d896:	3304      	adds	r3, #4
 800d898:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89c:	3301      	adds	r3, #1
 800d89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a2:	2b07      	cmp	r3, #7
 800d8a4:	d9ee      	bls.n	800d884 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8a6:	f7f5 f8f5 	bl	8002a94 <HAL_GetTick>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b4:	d102      	bne.n	800d8bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d8b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8ba:	e043      	b.n	800d944 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0d2      	beq.n	800d870 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8d0:	f003 0308 	and.w	r3, r3, #8
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d001      	beq.n	800d8dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d8d8:	2308      	movs	r3, #8
 800d8da:	e033      	b.n	800d944 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e2:	f003 0302 	and.w	r3, r3, #2
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d001      	beq.n	800d8ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d8ea:	2302      	movs	r3, #2
 800d8ec:	e02a      	b.n	800d944 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f4:	f003 0320 	and.w	r3, r3, #32
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d017      	beq.n	800d92c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	e021      	b.n	800d944 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f002 fee7 	bl	80106d8 <SDMMC_ReadFIFO>
 800d90a:	4602      	mov	r2, r0
 800d90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90e:	601a      	str	r2, [r3, #0]
    pData++;
 800d910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d912:	3304      	adds	r3, #4
 800d914:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d916:	f7f5 f8bd 	bl	8002a94 <HAL_GetTick>
 800d91a:	4602      	mov	r2, r0
 800d91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d924:	d102      	bne.n	800d92c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d926:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d92a:	e00b      	b.n	800d944 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1e2      	bne.n	800d900 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a03      	ldr	r2, [pc, #12]	@ (800d94c <SD_SendSDStatus+0x19c>)
 800d940:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	3730      	adds	r7, #48	@ 0x30
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	18000f3a 	.word	0x18000f3a

0800d950 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d960:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d964:	e018      	b.n	800d998 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	4619      	mov	r1, r3
 800d972:	4610      	mov	r0, r2
 800d974:	f003 f99a 	bl	8010cac <SDMMC_CmdSendStatus>
 800d978:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	e009      	b.n	800d998 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2100      	movs	r1, #0
 800d98a:	4618      	mov	r0, r3
 800d98c:	f002 ff19 	bl	80107c2 <SDMMC_GetResponse>
 800d990:	4602      	mov	r2, r0
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b086      	sub	sp, #24
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f002 ff03 	bl	80107c2 <SDMMC_GetResponse>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9c6:	d102      	bne.n	800d9ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9cc:	e02f      	b.n	800da2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9ce:	f107 030c 	add.w	r3, r7, #12
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f879 	bl	800dacc <SD_FindSCR>
 800d9da:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	e023      	b.n	800da2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d01c      	beq.n	800da2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9f8:	041b      	lsls	r3, r3, #16
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4610      	mov	r0, r2
 800d9fe:	f003 f86c 	bl	8010ada <SDMMC_CmdAppCommand>
 800da02:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d001      	beq.n	800da0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	e00f      	b.n	800da2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2102      	movs	r1, #2
 800da14:	4618      	mov	r0, r3
 800da16:	f003 f8a3 	bl	8010b60 <SDMMC_CmdBusWidth>
 800da1a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	e003      	b.n	800da2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da26:	2300      	movs	r3, #0
 800da28:	e001      	b.n	800da2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b086      	sub	sp, #24
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800da3e:	2300      	movs	r3, #0
 800da40:	60fb      	str	r3, [r7, #12]
 800da42:	2300      	movs	r3, #0
 800da44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2100      	movs	r1, #0
 800da4c:	4618      	mov	r0, r3
 800da4e:	f002 feb8 	bl	80107c2 <SDMMC_GetResponse>
 800da52:	4603      	mov	r3, r0
 800da54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da5c:	d102      	bne.n	800da64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da62:	e02f      	b.n	800dac4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da64:	f107 030c 	add.w	r3, r7, #12
 800da68:	4619      	mov	r1, r3
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f82e 	bl	800dacc <SD_FindSCR>
 800da70:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d001      	beq.n	800da7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	e023      	b.n	800dac4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da82:	2b00      	cmp	r3, #0
 800da84:	d01c      	beq.n	800dac0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da8e:	041b      	lsls	r3, r3, #16
 800da90:	4619      	mov	r1, r3
 800da92:	4610      	mov	r0, r2
 800da94:	f003 f821 	bl	8010ada <SDMMC_CmdAppCommand>
 800da98:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	e00f      	b.n	800dac4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2100      	movs	r1, #0
 800daaa:	4618      	mov	r0, r3
 800daac:	f003 f858 	bl	8010b60 <SDMMC_CmdBusWidth>
 800dab0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	e003      	b.n	800dac4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	e001      	b.n	800dac4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dac0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	@ 0x38
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dad6:	f7f4 ffdd 	bl	8002a94 <HAL_GetTick>
 800dada:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dadc:	2300      	movs	r3, #0
 800dade:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dae0:	2300      	movs	r3, #0
 800dae2:	60bb      	str	r3, [r7, #8]
 800dae4:	2300      	movs	r3, #0
 800dae6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2108      	movs	r1, #8
 800daf2:	4618      	mov	r0, r3
 800daf4:	f002 fea4 	bl	8010840 <SDMMC_CmdBlockLength>
 800daf8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d001      	beq.n	800db04 <SD_FindSCR+0x38>
  {
    return errorstate;
 800db00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db02:	e0ad      	b.n	800dc60 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db0c:	041b      	lsls	r3, r3, #16
 800db0e:	4619      	mov	r1, r3
 800db10:	4610      	mov	r0, r2
 800db12:	f002 ffe2 	bl	8010ada <SDMMC_CmdAppCommand>
 800db16:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <SD_FindSCR+0x56>
  {
    return errorstate;
 800db1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db20:	e09e      	b.n	800dc60 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db22:	f04f 33ff 	mov.w	r3, #4294967295
 800db26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800db28:	2308      	movs	r3, #8
 800db2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800db2c:	2330      	movs	r3, #48	@ 0x30
 800db2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800db30:	2302      	movs	r3, #2
 800db32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db34:	2300      	movs	r3, #0
 800db36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800db38:	2301      	movs	r3, #1
 800db3a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f107 0210 	add.w	r2, r7, #16
 800db44:	4611      	mov	r1, r2
 800db46:	4618      	mov	r0, r3
 800db48:	f002 fe4e 	bl	80107e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4618      	mov	r0, r3
 800db52:	f003 f828 	bl	8010ba6 <SDMMC_CmdSendSCR>
 800db56:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800db58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d027      	beq.n	800dbae <SD_FindSCR+0xe2>
  {
    return errorstate;
 800db5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db60:	e07e      	b.n	800dc60 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d113      	bne.n	800db98 <SD_FindSCR+0xcc>
 800db70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db72:	2b00      	cmp	r3, #0
 800db74:	d110      	bne.n	800db98 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4618      	mov	r0, r3
 800db7c:	f002 fdac 	bl	80106d8 <SDMMC_ReadFIFO>
 800db80:	4603      	mov	r3, r0
 800db82:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4618      	mov	r0, r3
 800db8a:	f002 fda5 	bl	80106d8 <SDMMC_ReadFIFO>
 800db8e:	4603      	mov	r3, r0
 800db90:	60fb      	str	r3, [r7, #12]
      index++;
 800db92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db94:	3301      	adds	r3, #1
 800db96:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db98:	f7f4 ff7c 	bl	8002a94 <HAL_GetTick>
 800db9c:	4602      	mov	r2, r0
 800db9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba6:	d102      	bne.n	800dbae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dba8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbac:	e058      	b.n	800dc60 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbb4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dbb8:	4013      	ands	r3, r2
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0d1      	beq.n	800db62 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc4:	f003 0308 	and.w	r3, r3, #8
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d005      	beq.n	800dbd8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2208      	movs	r2, #8
 800dbd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dbd4:	2308      	movs	r3, #8
 800dbd6:	e043      	b.n	800dc60 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbde:	f003 0302 	and.w	r3, r3, #2
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d005      	beq.n	800dbf2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2202      	movs	r2, #2
 800dbec:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dbee:	2302      	movs	r3, #2
 800dbf0:	e036      	b.n	800dc60 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf8:	f003 0320 	and.w	r3, r3, #32
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d005      	beq.n	800dc0c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2220      	movs	r2, #32
 800dc06:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dc08:	2320      	movs	r3, #32
 800dc0a:	e029      	b.n	800dc60 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a15      	ldr	r2, [pc, #84]	@ (800dc68 <SD_FindSCR+0x19c>)
 800dc12:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	061a      	lsls	r2, r3, #24
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	0a1b      	lsrs	r3, r3, #8
 800dc26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	0e1b      	lsrs	r3, r3, #24
 800dc30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc34:	601a      	str	r2, [r3, #0]
    scr++;
 800dc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc38:	3304      	adds	r3, #4
 800dc3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	061a      	lsls	r2, r3, #24
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	021b      	lsls	r3, r3, #8
 800dc44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	0a1b      	lsrs	r3, r3, #8
 800dc4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	0e1b      	lsrs	r3, r3, #24
 800dc58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dc5e:	2300      	movs	r3, #0
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3738      	adds	r7, #56	@ 0x38
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	18000f3a 	.word	0x18000f3a

0800dc6c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc78:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7e:	2b1f      	cmp	r3, #31
 800dc80:	d936      	bls.n	800dcf0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dc82:	2300      	movs	r3, #0
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	e027      	b.n	800dcd8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f002 fd23 	bl	80106d8 <SDMMC_ReadFIFO>
 800dc92:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	3301      	adds	r3, #1
 800dca0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	0a1b      	lsrs	r3, r3, #8
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	0c1b      	lsrs	r3, r3, #16
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	0e1b      	lsrs	r3, r3, #24
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	617b      	str	r3, [r7, #20]
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	2b07      	cmp	r3, #7
 800dcdc:	d9d4      	bls.n	800dc88 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce8:	f1a3 0220 	sub.w	r2, r3, #32
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800dcf0:	bf00      	nop
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	2b1f      	cmp	r3, #31
 800dd0c:	d93a      	bls.n	800dd84 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	617b      	str	r3, [r7, #20]
 800dd12:	e02b      	b.n	800dd6c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	021a      	lsls	r2, r3, #8
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	041a      	lsls	r2, r3, #16
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	3301      	adds	r3, #1
 800dd42:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	061a      	lsls	r2, r3, #24
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	3301      	adds	r3, #1
 800dd54:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f107 020c 	add.w	r2, r7, #12
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f002 fcc6 	bl	80106f2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	617b      	str	r3, [r7, #20]
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2b07      	cmp	r3, #7
 800dd70:	d9d0      	bls.n	800dd14 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	693a      	ldr	r2, [r7, #16]
 800dd76:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6a1b      	ldr	r3, [r3, #32]
 800dd7c:	f1a3 0220 	sub.w	r2, r3, #32
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	621a      	str	r2, [r3, #32]
  }
}
 800dd84:	bf00      	nop
 800dd86:	3718      	adds	r7, #24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dda8:	bf00      	nop
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ddd0:	bf00      	nop
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e049      	b.n	800de82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7f4 fb3a 	bl	800247c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2202      	movs	r2, #2
 800de0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f000 fc58 	bl	800e6d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d001      	beq.n	800dea4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dea0:	2301      	movs	r3, #1
 800dea2:	e05e      	b.n	800df62 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2202      	movs	r2, #2
 800dea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	68da      	ldr	r2, [r3, #12]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f042 0201 	orr.w	r2, r2, #1
 800deba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a2b      	ldr	r2, [pc, #172]	@ (800df70 <HAL_TIM_Base_Start_IT+0xe4>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d02c      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dece:	d027      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a27      	ldr	r2, [pc, #156]	@ (800df74 <HAL_TIM_Base_Start_IT+0xe8>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d022      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a26      	ldr	r2, [pc, #152]	@ (800df78 <HAL_TIM_Base_Start_IT+0xec>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d01d      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a24      	ldr	r2, [pc, #144]	@ (800df7c <HAL_TIM_Base_Start_IT+0xf0>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d018      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a23      	ldr	r2, [pc, #140]	@ (800df80 <HAL_TIM_Base_Start_IT+0xf4>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d013      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a21      	ldr	r2, [pc, #132]	@ (800df84 <HAL_TIM_Base_Start_IT+0xf8>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d00e      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a20      	ldr	r2, [pc, #128]	@ (800df88 <HAL_TIM_Base_Start_IT+0xfc>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d009      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a1e      	ldr	r2, [pc, #120]	@ (800df8c <HAL_TIM_Base_Start_IT+0x100>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d004      	beq.n	800df20 <HAL_TIM_Base_Start_IT+0x94>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a1d      	ldr	r2, [pc, #116]	@ (800df90 <HAL_TIM_Base_Start_IT+0x104>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d115      	bne.n	800df4c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689a      	ldr	r2, [r3, #8]
 800df26:	4b1b      	ldr	r3, [pc, #108]	@ (800df94 <HAL_TIM_Base_Start_IT+0x108>)
 800df28:	4013      	ands	r3, r2
 800df2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2b06      	cmp	r3, #6
 800df30:	d015      	beq.n	800df5e <HAL_TIM_Base_Start_IT+0xd2>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df38:	d011      	beq.n	800df5e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f042 0201 	orr.w	r2, r2, #1
 800df48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df4a:	e008      	b.n	800df5e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f042 0201 	orr.w	r2, r2, #1
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	e000      	b.n	800df60 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	40010000 	.word	0x40010000
 800df74:	40000400 	.word	0x40000400
 800df78:	40000800 	.word	0x40000800
 800df7c:	40000c00 	.word	0x40000c00
 800df80:	40010400 	.word	0x40010400
 800df84:	40001800 	.word	0x40001800
 800df88:	40014000 	.word	0x40014000
 800df8c:	4000e000 	.word	0x4000e000
 800df90:	4000e400 	.word	0x4000e400
 800df94:	00010007 	.word	0x00010007

0800df98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e049      	b.n	800e03e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f841 	bl	800e046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	f000 fb7a 	bl	800e6d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e046:	b480      	push	{r7}
 800e048:	b083      	sub	sp, #12
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e04e:	bf00      	nop
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b084      	sub	sp, #16
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	691b      	ldr	r3, [r3, #16]
 800e070:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f003 0302 	and.w	r3, r3, #2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d020      	beq.n	800e0be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f003 0302 	and.w	r3, r3, #2
 800e082:	2b00      	cmp	r3, #0
 800e084:	d01b      	beq.n	800e0be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f06f 0202 	mvn.w	r2, #2
 800e08e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	f003 0303 	and.w	r3, r3, #3
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d003      	beq.n	800e0ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 faf5 	bl	800e694 <HAL_TIM_IC_CaptureCallback>
 800e0aa:	e005      	b.n	800e0b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fae7 	bl	800e680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 faf8 	bl	800e6a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	f003 0304 	and.w	r3, r3, #4
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d020      	beq.n	800e10a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f003 0304 	and.w	r3, r3, #4
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d01b      	beq.n	800e10a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f06f 0204 	mvn.w	r2, #4
 800e0da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2202      	movs	r2, #2
 800e0e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d003      	beq.n	800e0f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 facf 	bl	800e694 <HAL_TIM_IC_CaptureCallback>
 800e0f6:	e005      	b.n	800e104 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fac1 	bl	800e680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 fad2 	bl	800e6a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	f003 0308 	and.w	r3, r3, #8
 800e110:	2b00      	cmp	r3, #0
 800e112:	d020      	beq.n	800e156 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f003 0308 	and.w	r3, r3, #8
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d01b      	beq.n	800e156 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f06f 0208 	mvn.w	r2, #8
 800e126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2204      	movs	r2, #4
 800e12c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	69db      	ldr	r3, [r3, #28]
 800e134:	f003 0303 	and.w	r3, r3, #3
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d003      	beq.n	800e144 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 faa9 	bl	800e694 <HAL_TIM_IC_CaptureCallback>
 800e142:	e005      	b.n	800e150 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 fa9b 	bl	800e680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 faac 	bl	800e6a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	f003 0310 	and.w	r3, r3, #16
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d020      	beq.n	800e1a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f003 0310 	and.w	r3, r3, #16
 800e166:	2b00      	cmp	r3, #0
 800e168:	d01b      	beq.n	800e1a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f06f 0210 	mvn.w	r2, #16
 800e172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2208      	movs	r2, #8
 800e178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	69db      	ldr	r3, [r3, #28]
 800e180:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e184:	2b00      	cmp	r3, #0
 800e186:	d003      	beq.n	800e190 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 fa83 	bl	800e694 <HAL_TIM_IC_CaptureCallback>
 800e18e:	e005      	b.n	800e19c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 fa75 	bl	800e680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 fa86 	bl	800e6a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	f003 0301 	and.w	r3, r3, #1
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00c      	beq.n	800e1c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d007      	beq.n	800e1c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f06f 0201 	mvn.w	r2, #1
 800e1be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7f3 fccf 	bl	8001b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d104      	bne.n	800e1da <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00c      	beq.n	800e1f4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d007      	beq.n	800e1f4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e1ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 ffc6 	bl	800f180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00c      	beq.n	800e218 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e204:	2b00      	cmp	r3, #0
 800e206:	d007      	beq.n	800e218 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 ffbe 	bl	800f194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00c      	beq.n	800e23c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d007      	beq.n	800e23c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fa40 	bl	800e6bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00c      	beq.n	800e260 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f003 0320 	and.w	r3, r3, #32
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d007      	beq.n	800e260 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f06f 0220 	mvn.w	r2, #32
 800e258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 ff86 	bl	800f16c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e260:	bf00      	nop
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d101      	bne.n	800e286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e282:	2302      	movs	r3, #2
 800e284:	e0ff      	b.n	800e486 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2201      	movs	r2, #1
 800e28a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b14      	cmp	r3, #20
 800e292:	f200 80f0 	bhi.w	800e476 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e296:	a201      	add	r2, pc, #4	@ (adr r2, 800e29c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29c:	0800e2f1 	.word	0x0800e2f1
 800e2a0:	0800e477 	.word	0x0800e477
 800e2a4:	0800e477 	.word	0x0800e477
 800e2a8:	0800e477 	.word	0x0800e477
 800e2ac:	0800e331 	.word	0x0800e331
 800e2b0:	0800e477 	.word	0x0800e477
 800e2b4:	0800e477 	.word	0x0800e477
 800e2b8:	0800e477 	.word	0x0800e477
 800e2bc:	0800e373 	.word	0x0800e373
 800e2c0:	0800e477 	.word	0x0800e477
 800e2c4:	0800e477 	.word	0x0800e477
 800e2c8:	0800e477 	.word	0x0800e477
 800e2cc:	0800e3b3 	.word	0x0800e3b3
 800e2d0:	0800e477 	.word	0x0800e477
 800e2d4:	0800e477 	.word	0x0800e477
 800e2d8:	0800e477 	.word	0x0800e477
 800e2dc:	0800e3f5 	.word	0x0800e3f5
 800e2e0:	0800e477 	.word	0x0800e477
 800e2e4:	0800e477 	.word	0x0800e477
 800e2e8:	0800e477 	.word	0x0800e477
 800e2ec:	0800e435 	.word	0x0800e435
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68b9      	ldr	r1, [r7, #8]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 fa9c 	bl	800e834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	699a      	ldr	r2, [r3, #24]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f042 0208 	orr.w	r2, r2, #8
 800e30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	699a      	ldr	r2, [r3, #24]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f022 0204 	bic.w	r2, r2, #4
 800e31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6999      	ldr	r1, [r3, #24]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	691a      	ldr	r2, [r3, #16]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	430a      	orrs	r2, r1
 800e32c:	619a      	str	r2, [r3, #24]
      break;
 800e32e:	e0a5      	b.n	800e47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68b9      	ldr	r1, [r7, #8]
 800e336:	4618      	mov	r0, r3
 800e338:	f000 fb0c 	bl	800e954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	699a      	ldr	r2, [r3, #24]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e34a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	699a      	ldr	r2, [r3, #24]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e35a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6999      	ldr	r1, [r3, #24]
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	691b      	ldr	r3, [r3, #16]
 800e366:	021a      	lsls	r2, r3, #8
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	430a      	orrs	r2, r1
 800e36e:	619a      	str	r2, [r3, #24]
      break;
 800e370:	e084      	b.n	800e47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	68b9      	ldr	r1, [r7, #8]
 800e378:	4618      	mov	r0, r3
 800e37a:	f000 fb75 	bl	800ea68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	69da      	ldr	r2, [r3, #28]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f042 0208 	orr.w	r2, r2, #8
 800e38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	69da      	ldr	r2, [r3, #28]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f022 0204 	bic.w	r2, r2, #4
 800e39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	69d9      	ldr	r1, [r3, #28]
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	691a      	ldr	r2, [r3, #16]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	430a      	orrs	r2, r1
 800e3ae:	61da      	str	r2, [r3, #28]
      break;
 800e3b0:	e064      	b.n	800e47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	68b9      	ldr	r1, [r7, #8]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f000 fbdd 	bl	800eb78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	69da      	ldr	r2, [r3, #28]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	69da      	ldr	r2, [r3, #28]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e3dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	69d9      	ldr	r1, [r3, #28]
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	021a      	lsls	r2, r3, #8
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	430a      	orrs	r2, r1
 800e3f0:	61da      	str	r2, [r3, #28]
      break;
 800e3f2:	e043      	b.n	800e47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68b9      	ldr	r1, [r7, #8]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fc26 	bl	800ec4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f042 0208 	orr.w	r2, r2, #8
 800e40e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f022 0204 	bic.w	r2, r2, #4
 800e41e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	691a      	ldr	r2, [r3, #16]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	430a      	orrs	r2, r1
 800e430:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e432:	e023      	b.n	800e47c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68b9      	ldr	r1, [r7, #8]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 fc6a 	bl	800ed14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e44e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e45e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	691b      	ldr	r3, [r3, #16]
 800e46a:	021a      	lsls	r2, r3, #8
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	430a      	orrs	r2, r1
 800e472:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e474:	e002      	b.n	800e47c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e476:	2301      	movs	r3, #1
 800e478:	75fb      	strb	r3, [r7, #23]
      break;
 800e47a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e484:	7dfb      	ldrb	r3, [r7, #23]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop

0800e490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d101      	bne.n	800e4ac <HAL_TIM_ConfigClockSource+0x1c>
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	e0dc      	b.n	800e666 <HAL_TIM_ConfigClockSource+0x1d6>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	689b      	ldr	r3, [r3, #8]
 800e4c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	4b6a      	ldr	r3, [pc, #424]	@ (800e670 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e4c8:	4013      	ands	r3, r2
 800e4ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e4d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a64      	ldr	r2, [pc, #400]	@ (800e674 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	f000 80a9 	beq.w	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e4e8:	4a62      	ldr	r2, [pc, #392]	@ (800e674 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	f200 80ae 	bhi.w	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e4f0:	4a61      	ldr	r2, [pc, #388]	@ (800e678 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	f000 80a1 	beq.w	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e4f8:	4a5f      	ldr	r2, [pc, #380]	@ (800e678 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	f200 80a6 	bhi.w	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e500:	4a5e      	ldr	r2, [pc, #376]	@ (800e67c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e502:	4293      	cmp	r3, r2
 800e504:	f000 8099 	beq.w	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e508:	4a5c      	ldr	r2, [pc, #368]	@ (800e67c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	f200 809e 	bhi.w	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e510:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e514:	f000 8091 	beq.w	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e518:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e51c:	f200 8096 	bhi.w	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e524:	f000 8089 	beq.w	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e52c:	f200 808e 	bhi.w	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e534:	d03e      	beq.n	800e5b4 <HAL_TIM_ConfigClockSource+0x124>
 800e536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e53a:	f200 8087 	bhi.w	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e53e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e542:	f000 8086 	beq.w	800e652 <HAL_TIM_ConfigClockSource+0x1c2>
 800e546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e54a:	d87f      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e54c:	2b70      	cmp	r3, #112	@ 0x70
 800e54e:	d01a      	beq.n	800e586 <HAL_TIM_ConfigClockSource+0xf6>
 800e550:	2b70      	cmp	r3, #112	@ 0x70
 800e552:	d87b      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e554:	2b60      	cmp	r3, #96	@ 0x60
 800e556:	d050      	beq.n	800e5fa <HAL_TIM_ConfigClockSource+0x16a>
 800e558:	2b60      	cmp	r3, #96	@ 0x60
 800e55a:	d877      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e55c:	2b50      	cmp	r3, #80	@ 0x50
 800e55e:	d03c      	beq.n	800e5da <HAL_TIM_ConfigClockSource+0x14a>
 800e560:	2b50      	cmp	r3, #80	@ 0x50
 800e562:	d873      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e564:	2b40      	cmp	r3, #64	@ 0x40
 800e566:	d058      	beq.n	800e61a <HAL_TIM_ConfigClockSource+0x18a>
 800e568:	2b40      	cmp	r3, #64	@ 0x40
 800e56a:	d86f      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e56c:	2b30      	cmp	r3, #48	@ 0x30
 800e56e:	d064      	beq.n	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e570:	2b30      	cmp	r3, #48	@ 0x30
 800e572:	d86b      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e574:	2b20      	cmp	r3, #32
 800e576:	d060      	beq.n	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e578:	2b20      	cmp	r3, #32
 800e57a:	d867      	bhi.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d05c      	beq.n	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e580:	2b10      	cmp	r3, #16
 800e582:	d05a      	beq.n	800e63a <HAL_TIM_ConfigClockSource+0x1aa>
 800e584:	e062      	b.n	800e64c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e596:	f000 fca1 	bl	800eedc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e5a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	609a      	str	r2, [r3, #8]
      break;
 800e5b2:	e04f      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e5c4:	f000 fc8a 	bl	800eedc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	689a      	ldr	r2, [r3, #8]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e5d6:	609a      	str	r2, [r3, #8]
      break;
 800e5d8:	e03c      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	f000 fbfa 	bl	800ede0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2150      	movs	r1, #80	@ 0x50
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fc54 	bl	800eea0 <TIM_ITRx_SetConfig>
      break;
 800e5f8:	e02c      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e606:	461a      	mov	r2, r3
 800e608:	f000 fc19 	bl	800ee3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2160      	movs	r1, #96	@ 0x60
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fc44 	bl	800eea0 <TIM_ITRx_SetConfig>
      break;
 800e618:	e01c      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e626:	461a      	mov	r2, r3
 800e628:	f000 fbda 	bl	800ede0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2140      	movs	r1, #64	@ 0x40
 800e632:	4618      	mov	r0, r3
 800e634:	f000 fc34 	bl	800eea0 <TIM_ITRx_SetConfig>
      break;
 800e638:	e00c      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4619      	mov	r1, r3
 800e644:	4610      	mov	r0, r2
 800e646:	f000 fc2b 	bl	800eea0 <TIM_ITRx_SetConfig>
      break;
 800e64a:	e003      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e64c:	2301      	movs	r3, #1
 800e64e:	73fb      	strb	r3, [r7, #15]
      break;
 800e650:	e000      	b.n	800e654 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e664:	7bfb      	ldrb	r3, [r7, #15]
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	ffceff88 	.word	0xffceff88
 800e674:	00100040 	.word	0x00100040
 800e678:	00100030 	.word	0x00100030
 800e67c:	00100020 	.word	0x00100020

0800e680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e69c:	bf00      	nop
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6c4:	bf00      	nop
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr

0800e6d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a4a      	ldr	r2, [pc, #296]	@ (800e80c <TIM_Base_SetConfig+0x13c>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d013      	beq.n	800e710 <TIM_Base_SetConfig+0x40>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ee:	d00f      	beq.n	800e710 <TIM_Base_SetConfig+0x40>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4a47      	ldr	r2, [pc, #284]	@ (800e810 <TIM_Base_SetConfig+0x140>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d00b      	beq.n	800e710 <TIM_Base_SetConfig+0x40>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a46      	ldr	r2, [pc, #280]	@ (800e814 <TIM_Base_SetConfig+0x144>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d007      	beq.n	800e710 <TIM_Base_SetConfig+0x40>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a45      	ldr	r2, [pc, #276]	@ (800e818 <TIM_Base_SetConfig+0x148>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d003      	beq.n	800e710 <TIM_Base_SetConfig+0x40>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a44      	ldr	r2, [pc, #272]	@ (800e81c <TIM_Base_SetConfig+0x14c>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d108      	bne.n	800e722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	4313      	orrs	r3, r2
 800e720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a39      	ldr	r2, [pc, #228]	@ (800e80c <TIM_Base_SetConfig+0x13c>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d027      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e730:	d023      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	4a36      	ldr	r2, [pc, #216]	@ (800e810 <TIM_Base_SetConfig+0x140>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d01f      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4a35      	ldr	r2, [pc, #212]	@ (800e814 <TIM_Base_SetConfig+0x144>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d01b      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	4a34      	ldr	r2, [pc, #208]	@ (800e818 <TIM_Base_SetConfig+0x148>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d017      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4a33      	ldr	r2, [pc, #204]	@ (800e81c <TIM_Base_SetConfig+0x14c>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d013      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4a32      	ldr	r2, [pc, #200]	@ (800e820 <TIM_Base_SetConfig+0x150>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d00f      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4a31      	ldr	r2, [pc, #196]	@ (800e824 <TIM_Base_SetConfig+0x154>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d00b      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	4a30      	ldr	r2, [pc, #192]	@ (800e828 <TIM_Base_SetConfig+0x158>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d007      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	4a2f      	ldr	r2, [pc, #188]	@ (800e82c <TIM_Base_SetConfig+0x15c>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d003      	beq.n	800e77a <TIM_Base_SetConfig+0xaa>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a2e      	ldr	r2, [pc, #184]	@ (800e830 <TIM_Base_SetConfig+0x160>)
 800e776:	4293      	cmp	r3, r2
 800e778:	d108      	bne.n	800e78c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	4313      	orrs	r3, r2
 800e78a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	695b      	ldr	r3, [r3, #20]
 800e796:	4313      	orrs	r3, r2
 800e798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	689a      	ldr	r2, [r3, #8]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	4a16      	ldr	r2, [pc, #88]	@ (800e80c <TIM_Base_SetConfig+0x13c>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d00f      	beq.n	800e7d8 <TIM_Base_SetConfig+0x108>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a18      	ldr	r2, [pc, #96]	@ (800e81c <TIM_Base_SetConfig+0x14c>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d00b      	beq.n	800e7d8 <TIM_Base_SetConfig+0x108>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	4a17      	ldr	r2, [pc, #92]	@ (800e820 <TIM_Base_SetConfig+0x150>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d007      	beq.n	800e7d8 <TIM_Base_SetConfig+0x108>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4a16      	ldr	r2, [pc, #88]	@ (800e824 <TIM_Base_SetConfig+0x154>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d003      	beq.n	800e7d8 <TIM_Base_SetConfig+0x108>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4a15      	ldr	r2, [pc, #84]	@ (800e828 <TIM_Base_SetConfig+0x158>)
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d103      	bne.n	800e7e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	691a      	ldr	r2, [r3, #16]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	691b      	ldr	r3, [r3, #16]
 800e7ea:	f003 0301 	and.w	r3, r3, #1
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d105      	bne.n	800e7fe <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	f023 0201 	bic.w	r2, r3, #1
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	611a      	str	r2, [r3, #16]
  }
}
 800e7fe:	bf00      	nop
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	40010000 	.word	0x40010000
 800e810:	40000400 	.word	0x40000400
 800e814:	40000800 	.word	0x40000800
 800e818:	40000c00 	.word	0x40000c00
 800e81c:	40010400 	.word	0x40010400
 800e820:	40014000 	.word	0x40014000
 800e824:	40014400 	.word	0x40014400
 800e828:	40014800 	.word	0x40014800
 800e82c:	4000e000 	.word	0x4000e000
 800e830:	4000e400 	.word	0x4000e400

0800e834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e834:	b480      	push	{r7}
 800e836:	b087      	sub	sp, #28
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a1b      	ldr	r3, [r3, #32]
 800e848:	f023 0201 	bic.w	r2, r3, #1
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	699b      	ldr	r3, [r3, #24]
 800e85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	4b37      	ldr	r3, [pc, #220]	@ (800e93c <TIM_OC1_SetConfig+0x108>)
 800e860:	4013      	ands	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f023 0303 	bic.w	r3, r3, #3
 800e86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4313      	orrs	r3, r2
 800e874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f023 0302 	bic.w	r3, r3, #2
 800e87c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	4313      	orrs	r3, r2
 800e886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4a2d      	ldr	r2, [pc, #180]	@ (800e940 <TIM_OC1_SetConfig+0x10c>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d00f      	beq.n	800e8b0 <TIM_OC1_SetConfig+0x7c>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	4a2c      	ldr	r2, [pc, #176]	@ (800e944 <TIM_OC1_SetConfig+0x110>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d00b      	beq.n	800e8b0 <TIM_OC1_SetConfig+0x7c>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a2b      	ldr	r2, [pc, #172]	@ (800e948 <TIM_OC1_SetConfig+0x114>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d007      	beq.n	800e8b0 <TIM_OC1_SetConfig+0x7c>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a2a      	ldr	r2, [pc, #168]	@ (800e94c <TIM_OC1_SetConfig+0x118>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d003      	beq.n	800e8b0 <TIM_OC1_SetConfig+0x7c>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4a29      	ldr	r2, [pc, #164]	@ (800e950 <TIM_OC1_SetConfig+0x11c>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d10c      	bne.n	800e8ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	f023 0308 	bic.w	r3, r3, #8
 800e8b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	697a      	ldr	r2, [r7, #20]
 800e8be:	4313      	orrs	r3, r2
 800e8c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f023 0304 	bic.w	r3, r3, #4
 800e8c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a1c      	ldr	r2, [pc, #112]	@ (800e940 <TIM_OC1_SetConfig+0x10c>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d00f      	beq.n	800e8f2 <TIM_OC1_SetConfig+0xbe>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	4a1b      	ldr	r2, [pc, #108]	@ (800e944 <TIM_OC1_SetConfig+0x110>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d00b      	beq.n	800e8f2 <TIM_OC1_SetConfig+0xbe>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	4a1a      	ldr	r2, [pc, #104]	@ (800e948 <TIM_OC1_SetConfig+0x114>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d007      	beq.n	800e8f2 <TIM_OC1_SetConfig+0xbe>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4a19      	ldr	r2, [pc, #100]	@ (800e94c <TIM_OC1_SetConfig+0x118>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d003      	beq.n	800e8f2 <TIM_OC1_SetConfig+0xbe>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4a18      	ldr	r2, [pc, #96]	@ (800e950 <TIM_OC1_SetConfig+0x11c>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d111      	bne.n	800e916 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	695b      	ldr	r3, [r3, #20]
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	4313      	orrs	r3, r2
 800e90a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	699b      	ldr	r3, [r3, #24]
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	4313      	orrs	r3, r2
 800e914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	693a      	ldr	r2, [r7, #16]
 800e91a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	685a      	ldr	r2, [r3, #4]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	621a      	str	r2, [r3, #32]
}
 800e930:	bf00      	nop
 800e932:	371c      	adds	r7, #28
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	fffeff8f 	.word	0xfffeff8f
 800e940:	40010000 	.word	0x40010000
 800e944:	40010400 	.word	0x40010400
 800e948:	40014000 	.word	0x40014000
 800e94c:	40014400 	.word	0x40014400
 800e950:	40014800 	.word	0x40014800

0800e954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6a1b      	ldr	r3, [r3, #32]
 800e968:	f023 0210 	bic.w	r2, r3, #16
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	4b34      	ldr	r3, [pc, #208]	@ (800ea50 <TIM_OC2_SetConfig+0xfc>)
 800e980:	4013      	ands	r3, r2
 800e982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e98a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	021b      	lsls	r3, r3, #8
 800e992:	68fa      	ldr	r2, [r7, #12]
 800e994:	4313      	orrs	r3, r2
 800e996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	f023 0320 	bic.w	r3, r3, #32
 800e99e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	011b      	lsls	r3, r3, #4
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a29      	ldr	r2, [pc, #164]	@ (800ea54 <TIM_OC2_SetConfig+0x100>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d003      	beq.n	800e9bc <TIM_OC2_SetConfig+0x68>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4a28      	ldr	r2, [pc, #160]	@ (800ea58 <TIM_OC2_SetConfig+0x104>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d10d      	bne.n	800e9d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	011b      	lsls	r3, r3, #4
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a1e      	ldr	r2, [pc, #120]	@ (800ea54 <TIM_OC2_SetConfig+0x100>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00f      	beq.n	800ea00 <TIM_OC2_SetConfig+0xac>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a1d      	ldr	r2, [pc, #116]	@ (800ea58 <TIM_OC2_SetConfig+0x104>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d00b      	beq.n	800ea00 <TIM_OC2_SetConfig+0xac>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a1c      	ldr	r2, [pc, #112]	@ (800ea5c <TIM_OC2_SetConfig+0x108>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d007      	beq.n	800ea00 <TIM_OC2_SetConfig+0xac>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4a1b      	ldr	r2, [pc, #108]	@ (800ea60 <TIM_OC2_SetConfig+0x10c>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d003      	beq.n	800ea00 <TIM_OC2_SetConfig+0xac>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	4a1a      	ldr	r2, [pc, #104]	@ (800ea64 <TIM_OC2_SetConfig+0x110>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d113      	bne.n	800ea28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	693a      	ldr	r2, [r7, #16]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	693a      	ldr	r2, [r7, #16]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	693a      	ldr	r2, [r7, #16]
 800ea2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	621a      	str	r2, [r3, #32]
}
 800ea42:	bf00      	nop
 800ea44:	371c      	adds	r7, #28
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr
 800ea4e:	bf00      	nop
 800ea50:	feff8fff 	.word	0xfeff8fff
 800ea54:	40010000 	.word	0x40010000
 800ea58:	40010400 	.word	0x40010400
 800ea5c:	40014000 	.word	0x40014000
 800ea60:	40014400 	.word	0x40014400
 800ea64:	40014800 	.word	0x40014800

0800ea68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b087      	sub	sp, #28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a1b      	ldr	r3, [r3, #32]
 800ea7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4b33      	ldr	r3, [pc, #204]	@ (800eb60 <TIM_OC3_SetConfig+0xf8>)
 800ea94:	4013      	ands	r3, r2
 800ea96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f023 0303 	bic.w	r3, r3, #3
 800ea9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	021b      	lsls	r3, r3, #8
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a28      	ldr	r2, [pc, #160]	@ (800eb64 <TIM_OC3_SetConfig+0xfc>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d003      	beq.n	800eace <TIM_OC3_SetConfig+0x66>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a27      	ldr	r2, [pc, #156]	@ (800eb68 <TIM_OC3_SetConfig+0x100>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d10d      	bne.n	800eaea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ead4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	021b      	lsls	r3, r3, #8
 800eadc:	697a      	ldr	r2, [r7, #20]
 800eade:	4313      	orrs	r3, r2
 800eae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4a1d      	ldr	r2, [pc, #116]	@ (800eb64 <TIM_OC3_SetConfig+0xfc>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d00f      	beq.n	800eb12 <TIM_OC3_SetConfig+0xaa>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4a1c      	ldr	r2, [pc, #112]	@ (800eb68 <TIM_OC3_SetConfig+0x100>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d00b      	beq.n	800eb12 <TIM_OC3_SetConfig+0xaa>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4a1b      	ldr	r2, [pc, #108]	@ (800eb6c <TIM_OC3_SetConfig+0x104>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d007      	beq.n	800eb12 <TIM_OC3_SetConfig+0xaa>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4a1a      	ldr	r2, [pc, #104]	@ (800eb70 <TIM_OC3_SetConfig+0x108>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d003      	beq.n	800eb12 <TIM_OC3_SetConfig+0xaa>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4a19      	ldr	r2, [pc, #100]	@ (800eb74 <TIM_OC3_SetConfig+0x10c>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d113      	bne.n	800eb3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	011b      	lsls	r3, r3, #4
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	011b      	lsls	r3, r3, #4
 800eb34:	693a      	ldr	r2, [r7, #16]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	693a      	ldr	r2, [r7, #16]
 800eb3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	697a      	ldr	r2, [r7, #20]
 800eb52:	621a      	str	r2, [r3, #32]
}
 800eb54:	bf00      	nop
 800eb56:	371c      	adds	r7, #28
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	fffeff8f 	.word	0xfffeff8f
 800eb64:	40010000 	.word	0x40010000
 800eb68:	40010400 	.word	0x40010400
 800eb6c:	40014000 	.word	0x40014000
 800eb70:	40014400 	.word	0x40014400
 800eb74:	40014800 	.word	0x40014800

0800eb78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a1b      	ldr	r3, [r3, #32]
 800eb86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	4b24      	ldr	r3, [pc, #144]	@ (800ec34 <TIM_OC4_SetConfig+0xbc>)
 800eba4:	4013      	ands	r3, r2
 800eba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	021b      	lsls	r3, r3, #8
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ebc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	031b      	lsls	r3, r3, #12
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a19      	ldr	r2, [pc, #100]	@ (800ec38 <TIM_OC4_SetConfig+0xc0>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d00f      	beq.n	800ebf8 <TIM_OC4_SetConfig+0x80>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a18      	ldr	r2, [pc, #96]	@ (800ec3c <TIM_OC4_SetConfig+0xc4>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d00b      	beq.n	800ebf8 <TIM_OC4_SetConfig+0x80>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a17      	ldr	r2, [pc, #92]	@ (800ec40 <TIM_OC4_SetConfig+0xc8>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d007      	beq.n	800ebf8 <TIM_OC4_SetConfig+0x80>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a16      	ldr	r2, [pc, #88]	@ (800ec44 <TIM_OC4_SetConfig+0xcc>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d003      	beq.n	800ebf8 <TIM_OC4_SetConfig+0x80>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a15      	ldr	r2, [pc, #84]	@ (800ec48 <TIM_OC4_SetConfig+0xd0>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d109      	bne.n	800ec0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ebfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	019b      	lsls	r3, r3, #6
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	685a      	ldr	r2, [r3, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	621a      	str	r2, [r3, #32]
}
 800ec26:	bf00      	nop
 800ec28:	371c      	adds	r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	feff8fff 	.word	0xfeff8fff
 800ec38:	40010000 	.word	0x40010000
 800ec3c:	40010400 	.word	0x40010400
 800ec40:	40014000 	.word	0x40014000
 800ec44:	40014400 	.word	0x40014400
 800ec48:	40014800 	.word	0x40014800

0800ec4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a1b      	ldr	r3, [r3, #32]
 800ec5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a1b      	ldr	r3, [r3, #32]
 800ec60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	4b21      	ldr	r3, [pc, #132]	@ (800ecfc <TIM_OC5_SetConfig+0xb0>)
 800ec78:	4013      	ands	r3, r2
 800ec7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	4313      	orrs	r3, r2
 800ec84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	041b      	lsls	r3, r3, #16
 800ec94:	693a      	ldr	r2, [r7, #16]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a18      	ldr	r2, [pc, #96]	@ (800ed00 <TIM_OC5_SetConfig+0xb4>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d00f      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x76>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a17      	ldr	r2, [pc, #92]	@ (800ed04 <TIM_OC5_SetConfig+0xb8>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d00b      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x76>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a16      	ldr	r2, [pc, #88]	@ (800ed08 <TIM_OC5_SetConfig+0xbc>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d007      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x76>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4a15      	ldr	r2, [pc, #84]	@ (800ed0c <TIM_OC5_SetConfig+0xc0>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d003      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x76>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4a14      	ldr	r2, [pc, #80]	@ (800ed10 <TIM_OC5_SetConfig+0xc4>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d109      	bne.n	800ecd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	621a      	str	r2, [r3, #32]
}
 800ecf0:	bf00      	nop
 800ecf2:	371c      	adds	r7, #28
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	fffeff8f 	.word	0xfffeff8f
 800ed00:	40010000 	.word	0x40010000
 800ed04:	40010400 	.word	0x40010400
 800ed08:	40014000 	.word	0x40014000
 800ed0c:	40014400 	.word	0x40014400
 800ed10:	40014800 	.word	0x40014800

0800ed14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b087      	sub	sp, #28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a1b      	ldr	r3, [r3, #32]
 800ed28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	4b22      	ldr	r3, [pc, #136]	@ (800edc8 <TIM_OC6_SetConfig+0xb4>)
 800ed40:	4013      	ands	r3, r2
 800ed42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	021b      	lsls	r3, r3, #8
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	051b      	lsls	r3, r3, #20
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a19      	ldr	r2, [pc, #100]	@ (800edcc <TIM_OC6_SetConfig+0xb8>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d00f      	beq.n	800ed8c <TIM_OC6_SetConfig+0x78>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4a18      	ldr	r2, [pc, #96]	@ (800edd0 <TIM_OC6_SetConfig+0xbc>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d00b      	beq.n	800ed8c <TIM_OC6_SetConfig+0x78>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a17      	ldr	r2, [pc, #92]	@ (800edd4 <TIM_OC6_SetConfig+0xc0>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d007      	beq.n	800ed8c <TIM_OC6_SetConfig+0x78>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a16      	ldr	r2, [pc, #88]	@ (800edd8 <TIM_OC6_SetConfig+0xc4>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d003      	beq.n	800ed8c <TIM_OC6_SetConfig+0x78>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a15      	ldr	r2, [pc, #84]	@ (800eddc <TIM_OC6_SetConfig+0xc8>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d109      	bne.n	800eda0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	029b      	lsls	r3, r3, #10
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	621a      	str	r2, [r3, #32]
}
 800edba:	bf00      	nop
 800edbc:	371c      	adds	r7, #28
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	feff8fff 	.word	0xfeff8fff
 800edcc:	40010000 	.word	0x40010000
 800edd0:	40010400 	.word	0x40010400
 800edd4:	40014000 	.word	0x40014000
 800edd8:	40014400 	.word	0x40014400
 800eddc:	40014800 	.word	0x40014800

0800ede0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b087      	sub	sp, #28
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a1b      	ldr	r3, [r3, #32]
 800edf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	f023 0201 	bic.w	r2, r3, #1
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	011b      	lsls	r3, r3, #4
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f023 030a 	bic.w	r3, r3, #10
 800ee1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	621a      	str	r2, [r3, #32]
}
 800ee32:	bf00      	nop
 800ee34:	371c      	adds	r7, #28
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b087      	sub	sp, #28
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6a1b      	ldr	r3, [r3, #32]
 800ee54:	f023 0210 	bic.w	r2, r3, #16
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	031b      	lsls	r3, r3, #12
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	4313      	orrs	r3, r2
 800ee72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	697a      	ldr	r2, [r7, #20]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	697a      	ldr	r2, [r7, #20]
 800ee90:	621a      	str	r2, [r3, #32]
}
 800ee92:	bf00      	nop
 800ee94:	371c      	adds	r7, #28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
	...

0800eea0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	4b09      	ldr	r3, [pc, #36]	@ (800eed8 <TIM_ITRx_SetConfig+0x38>)
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eeb8:	683a      	ldr	r2, [r7, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	f043 0307 	orr.w	r3, r3, #7
 800eec2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	609a      	str	r2, [r3, #8]
}
 800eeca:	bf00      	nop
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	ffcfff8f 	.word	0xffcfff8f

0800eedc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eedc:	b480      	push	{r7}
 800eede:	b087      	sub	sp, #28
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	607a      	str	r2, [r7, #4]
 800eee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	021a      	lsls	r2, r3, #8
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	431a      	orrs	r2, r3
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	4313      	orrs	r3, r2
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	609a      	str	r2, [r3, #8]
}
 800ef10:	bf00      	nop
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d101      	bne.n	800ef34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef30:	2302      	movs	r3, #2
 800ef32:	e077      	b.n	800f024 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a35      	ldr	r2, [pc, #212]	@ (800f030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d004      	beq.n	800ef68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a34      	ldr	r2, [pc, #208]	@ (800f034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d108      	bne.n	800ef7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ef6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a25      	ldr	r2, [pc, #148]	@ (800f030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d02c      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efa6:	d027      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a22      	ldr	r2, [pc, #136]	@ (800f038 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d022      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a21      	ldr	r2, [pc, #132]	@ (800f03c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d01d      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a1f      	ldr	r2, [pc, #124]	@ (800f040 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d018      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a1a      	ldr	r2, [pc, #104]	@ (800f034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d013      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a1b      	ldr	r2, [pc, #108]	@ (800f044 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d00e      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4a1a      	ldr	r2, [pc, #104]	@ (800f048 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d009      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4a18      	ldr	r2, [pc, #96]	@ (800f04c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d004      	beq.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a17      	ldr	r2, [pc, #92]	@ (800f050 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d10c      	bne.n	800f012 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800effe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	68ba      	ldr	r2, [r7, #8]
 800f006:	4313      	orrs	r3, r2
 800f008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f022:	2300      	movs	r3, #0
}
 800f024:	4618      	mov	r0, r3
 800f026:	3714      	adds	r7, #20
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr
 800f030:	40010000 	.word	0x40010000
 800f034:	40010400 	.word	0x40010400
 800f038:	40000400 	.word	0x40000400
 800f03c:	40000800 	.word	0x40000800
 800f040:	40000c00 	.word	0x40000c00
 800f044:	40001800 	.word	0x40001800
 800f048:	40014000 	.word	0x40014000
 800f04c:	4000e000 	.word	0x4000e000
 800f050:	4000e400 	.word	0x4000e400

0800f054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f05e:	2300      	movs	r3, #0
 800f060:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d101      	bne.n	800f070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f06c:	2302      	movs	r3, #2
 800f06e:	e073      	b.n	800f158 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	4313      	orrs	r3, r2
 800f084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	4313      	orrs	r3, r2
 800f092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	691b      	ldr	r3, [r3, #16]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	695b      	ldr	r3, [r3, #20]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	699b      	ldr	r3, [r3, #24]
 800f0e4:	041b      	lsls	r3, r3, #16
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	69db      	ldr	r3, [r3, #28]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a19      	ldr	r2, [pc, #100]	@ (800f164 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d004      	beq.n	800f10c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a18      	ldr	r2, [pc, #96]	@ (800f168 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d11c      	bne.n	800f146 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f116:	051b      	lsls	r3, r3, #20
 800f118:	4313      	orrs	r3, r2
 800f11a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	6a1b      	ldr	r3, [r3, #32]
 800f126:	4313      	orrs	r3, r2
 800f128:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f134:	4313      	orrs	r3, r2
 800f136:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f142:	4313      	orrs	r3, r2
 800f144:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3714      	adds	r7, #20
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	40010000 	.word	0x40010000
 800f168:	40010400 	.word	0x40010400

0800f16c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f174:	bf00      	nop
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	e042      	b.n	800f240 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d106      	bne.n	800f1d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f7f3 f9d1 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2224      	movs	r2, #36	@ 0x24
 800f1d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f022 0201 	bic.w	r2, r2, #1
 800f1e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 ff22 	bl	801003c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f000 f8b3 	bl	800f364 <UART_SetConfig>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b01      	cmp	r3, #1
 800f202:	d101      	bne.n	800f208 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f204:	2301      	movs	r3, #1
 800f206:	e01b      	b.n	800f240 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	689a      	ldr	r2, [r3, #8]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f042 0201 	orr.w	r2, r2, #1
 800f236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 ffa1 	bl	8010180 <UART_CheckIdleState>
 800f23e:	4603      	mov	r3, r0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b08a      	sub	sp, #40	@ 0x28
 800f24c:	af02      	add	r7, sp, #8
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	603b      	str	r3, [r7, #0]
 800f254:	4613      	mov	r3, r2
 800f256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f25e:	2b20      	cmp	r3, #32
 800f260:	d17b      	bne.n	800f35a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <HAL_UART_Transmit+0x26>
 800f268:	88fb      	ldrh	r3, [r7, #6]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d101      	bne.n	800f272 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f26e:	2301      	movs	r3, #1
 800f270:	e074      	b.n	800f35c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2221      	movs	r2, #33	@ 0x21
 800f27e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f282:	f7f3 fc07 	bl	8002a94 <HAL_GetTick>
 800f286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	88fa      	ldrh	r2, [r7, #6]
 800f28c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	88fa      	ldrh	r2, [r7, #6]
 800f294:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2a0:	d108      	bne.n	800f2b4 <HAL_UART_Transmit+0x6c>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d104      	bne.n	800f2b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	61bb      	str	r3, [r7, #24]
 800f2b2:	e003      	b.n	800f2bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f2bc:	e030      	b.n	800f320 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	2180      	movs	r1, #128	@ 0x80
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f001 f803 	bl	80102d4 <UART_WaitOnFlagUntilTimeout>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d005      	beq.n	800f2e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2220      	movs	r2, #32
 800f2d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	e03d      	b.n	800f35c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d10b      	bne.n	800f2fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f2f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	3302      	adds	r3, #2
 800f2fa:	61bb      	str	r3, [r7, #24]
 800f2fc:	e007      	b.n	800f30e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	781a      	ldrb	r2, [r3, #0]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	3301      	adds	r3, #1
 800f30c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f314:	b29b      	uxth	r3, r3
 800f316:	3b01      	subs	r3, #1
 800f318:	b29a      	uxth	r2, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f326:	b29b      	uxth	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1c8      	bne.n	800f2be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	9300      	str	r3, [sp, #0]
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	2200      	movs	r2, #0
 800f334:	2140      	movs	r1, #64	@ 0x40
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f000 ffcc 	bl	80102d4 <UART_WaitOnFlagUntilTimeout>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d005      	beq.n	800f34e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2220      	movs	r2, #32
 800f346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e006      	b.n	800f35c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2220      	movs	r2, #32
 800f352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f356:	2300      	movs	r3, #0
 800f358:	e000      	b.n	800f35c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f35a:	2302      	movs	r3, #2
  }
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3720      	adds	r7, #32
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f368:	b092      	sub	sp, #72	@ 0x48
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	689a      	ldr	r2, [r3, #8]
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	431a      	orrs	r2, r3
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	695b      	ldr	r3, [r3, #20]
 800f382:	431a      	orrs	r2, r3
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	69db      	ldr	r3, [r3, #28]
 800f388:	4313      	orrs	r3, r2
 800f38a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	4bbe      	ldr	r3, [pc, #760]	@ (800f68c <UART_SetConfig+0x328>)
 800f394:	4013      	ands	r3, r2
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	6812      	ldr	r2, [r2, #0]
 800f39a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f39c:	430b      	orrs	r3, r1
 800f39e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	68da      	ldr	r2, [r3, #12]
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	430a      	orrs	r2, r1
 800f3b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	699b      	ldr	r3, [r3, #24]
 800f3ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4ab3      	ldr	r2, [pc, #716]	@ (800f690 <UART_SetConfig+0x32c>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d004      	beq.n	800f3d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	689a      	ldr	r2, [r3, #8]
 800f3d6:	4baf      	ldr	r3, [pc, #700]	@ (800f694 <UART_SetConfig+0x330>)
 800f3d8:	4013      	ands	r3, r2
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	6812      	ldr	r2, [r2, #0]
 800f3de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f3e0:	430b      	orrs	r3, r1
 800f3e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ea:	f023 010f 	bic.w	r1, r3, #15
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	430a      	orrs	r2, r1
 800f3f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4aa6      	ldr	r2, [pc, #664]	@ (800f698 <UART_SetConfig+0x334>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d177      	bne.n	800f4f4 <UART_SetConfig+0x190>
 800f404:	4ba5      	ldr	r3, [pc, #660]	@ (800f69c <UART_SetConfig+0x338>)
 800f406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f40c:	2b28      	cmp	r3, #40	@ 0x28
 800f40e:	d86d      	bhi.n	800f4ec <UART_SetConfig+0x188>
 800f410:	a201      	add	r2, pc, #4	@ (adr r2, 800f418 <UART_SetConfig+0xb4>)
 800f412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f416:	bf00      	nop
 800f418:	0800f4bd 	.word	0x0800f4bd
 800f41c:	0800f4ed 	.word	0x0800f4ed
 800f420:	0800f4ed 	.word	0x0800f4ed
 800f424:	0800f4ed 	.word	0x0800f4ed
 800f428:	0800f4ed 	.word	0x0800f4ed
 800f42c:	0800f4ed 	.word	0x0800f4ed
 800f430:	0800f4ed 	.word	0x0800f4ed
 800f434:	0800f4ed 	.word	0x0800f4ed
 800f438:	0800f4c5 	.word	0x0800f4c5
 800f43c:	0800f4ed 	.word	0x0800f4ed
 800f440:	0800f4ed 	.word	0x0800f4ed
 800f444:	0800f4ed 	.word	0x0800f4ed
 800f448:	0800f4ed 	.word	0x0800f4ed
 800f44c:	0800f4ed 	.word	0x0800f4ed
 800f450:	0800f4ed 	.word	0x0800f4ed
 800f454:	0800f4ed 	.word	0x0800f4ed
 800f458:	0800f4cd 	.word	0x0800f4cd
 800f45c:	0800f4ed 	.word	0x0800f4ed
 800f460:	0800f4ed 	.word	0x0800f4ed
 800f464:	0800f4ed 	.word	0x0800f4ed
 800f468:	0800f4ed 	.word	0x0800f4ed
 800f46c:	0800f4ed 	.word	0x0800f4ed
 800f470:	0800f4ed 	.word	0x0800f4ed
 800f474:	0800f4ed 	.word	0x0800f4ed
 800f478:	0800f4d5 	.word	0x0800f4d5
 800f47c:	0800f4ed 	.word	0x0800f4ed
 800f480:	0800f4ed 	.word	0x0800f4ed
 800f484:	0800f4ed 	.word	0x0800f4ed
 800f488:	0800f4ed 	.word	0x0800f4ed
 800f48c:	0800f4ed 	.word	0x0800f4ed
 800f490:	0800f4ed 	.word	0x0800f4ed
 800f494:	0800f4ed 	.word	0x0800f4ed
 800f498:	0800f4dd 	.word	0x0800f4dd
 800f49c:	0800f4ed 	.word	0x0800f4ed
 800f4a0:	0800f4ed 	.word	0x0800f4ed
 800f4a4:	0800f4ed 	.word	0x0800f4ed
 800f4a8:	0800f4ed 	.word	0x0800f4ed
 800f4ac:	0800f4ed 	.word	0x0800f4ed
 800f4b0:	0800f4ed 	.word	0x0800f4ed
 800f4b4:	0800f4ed 	.word	0x0800f4ed
 800f4b8:	0800f4e5 	.word	0x0800f4e5
 800f4bc:	2301      	movs	r3, #1
 800f4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c2:	e326      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ca:	e322      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4cc:	2308      	movs	r3, #8
 800f4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4d2:	e31e      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4d4:	2310      	movs	r3, #16
 800f4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4da:	e31a      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4dc:	2320      	movs	r3, #32
 800f4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4e2:	e316      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4e4:	2340      	movs	r3, #64	@ 0x40
 800f4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ea:	e312      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4ec:	2380      	movs	r3, #128	@ 0x80
 800f4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4f2:	e30e      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	4a69      	ldr	r2, [pc, #420]	@ (800f6a0 <UART_SetConfig+0x33c>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d130      	bne.n	800f560 <UART_SetConfig+0x1fc>
 800f4fe:	4b67      	ldr	r3, [pc, #412]	@ (800f69c <UART_SetConfig+0x338>)
 800f500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f502:	f003 0307 	and.w	r3, r3, #7
 800f506:	2b05      	cmp	r3, #5
 800f508:	d826      	bhi.n	800f558 <UART_SetConfig+0x1f4>
 800f50a:	a201      	add	r2, pc, #4	@ (adr r2, 800f510 <UART_SetConfig+0x1ac>)
 800f50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f510:	0800f529 	.word	0x0800f529
 800f514:	0800f531 	.word	0x0800f531
 800f518:	0800f539 	.word	0x0800f539
 800f51c:	0800f541 	.word	0x0800f541
 800f520:	0800f549 	.word	0x0800f549
 800f524:	0800f551 	.word	0x0800f551
 800f528:	2300      	movs	r3, #0
 800f52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52e:	e2f0      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f530:	2304      	movs	r3, #4
 800f532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f536:	e2ec      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f538:	2308      	movs	r3, #8
 800f53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f53e:	e2e8      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f540:	2310      	movs	r3, #16
 800f542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f546:	e2e4      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f548:	2320      	movs	r3, #32
 800f54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f54e:	e2e0      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f550:	2340      	movs	r3, #64	@ 0x40
 800f552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f556:	e2dc      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f558:	2380      	movs	r3, #128	@ 0x80
 800f55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f55e:	e2d8      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4a4f      	ldr	r2, [pc, #316]	@ (800f6a4 <UART_SetConfig+0x340>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d130      	bne.n	800f5cc <UART_SetConfig+0x268>
 800f56a:	4b4c      	ldr	r3, [pc, #304]	@ (800f69c <UART_SetConfig+0x338>)
 800f56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f56e:	f003 0307 	and.w	r3, r3, #7
 800f572:	2b05      	cmp	r3, #5
 800f574:	d826      	bhi.n	800f5c4 <UART_SetConfig+0x260>
 800f576:	a201      	add	r2, pc, #4	@ (adr r2, 800f57c <UART_SetConfig+0x218>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f595 	.word	0x0800f595
 800f580:	0800f59d 	.word	0x0800f59d
 800f584:	0800f5a5 	.word	0x0800f5a5
 800f588:	0800f5ad 	.word	0x0800f5ad
 800f58c:	0800f5b5 	.word	0x0800f5b5
 800f590:	0800f5bd 	.word	0x0800f5bd
 800f594:	2300      	movs	r3, #0
 800f596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59a:	e2ba      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f59c:	2304      	movs	r3, #4
 800f59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5a2:	e2b6      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f5a4:	2308      	movs	r3, #8
 800f5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5aa:	e2b2      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f5ac:	2310      	movs	r3, #16
 800f5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5b2:	e2ae      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f5b4:	2320      	movs	r3, #32
 800f5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ba:	e2aa      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f5bc:	2340      	movs	r3, #64	@ 0x40
 800f5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5c2:	e2a6      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f5c4:	2380      	movs	r3, #128	@ 0x80
 800f5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ca:	e2a2      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	4a35      	ldr	r2, [pc, #212]	@ (800f6a8 <UART_SetConfig+0x344>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d130      	bne.n	800f638 <UART_SetConfig+0x2d4>
 800f5d6:	4b31      	ldr	r3, [pc, #196]	@ (800f69c <UART_SetConfig+0x338>)
 800f5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5da:	f003 0307 	and.w	r3, r3, #7
 800f5de:	2b05      	cmp	r3, #5
 800f5e0:	d826      	bhi.n	800f630 <UART_SetConfig+0x2cc>
 800f5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5e8 <UART_SetConfig+0x284>)
 800f5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5e8:	0800f601 	.word	0x0800f601
 800f5ec:	0800f609 	.word	0x0800f609
 800f5f0:	0800f611 	.word	0x0800f611
 800f5f4:	0800f619 	.word	0x0800f619
 800f5f8:	0800f621 	.word	0x0800f621
 800f5fc:	0800f629 	.word	0x0800f629
 800f600:	2300      	movs	r3, #0
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f606:	e284      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f608:	2304      	movs	r3, #4
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f60e:	e280      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f610:	2308      	movs	r3, #8
 800f612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f616:	e27c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f618:	2310      	movs	r3, #16
 800f61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f61e:	e278      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f620:	2320      	movs	r3, #32
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f626:	e274      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f628:	2340      	movs	r3, #64	@ 0x40
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62e:	e270      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f630:	2380      	movs	r3, #128	@ 0x80
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f636:	e26c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a1b      	ldr	r2, [pc, #108]	@ (800f6ac <UART_SetConfig+0x348>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d142      	bne.n	800f6c8 <UART_SetConfig+0x364>
 800f642:	4b16      	ldr	r3, [pc, #88]	@ (800f69c <UART_SetConfig+0x338>)
 800f644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f646:	f003 0307 	and.w	r3, r3, #7
 800f64a:	2b05      	cmp	r3, #5
 800f64c:	d838      	bhi.n	800f6c0 <UART_SetConfig+0x35c>
 800f64e:	a201      	add	r2, pc, #4	@ (adr r2, 800f654 <UART_SetConfig+0x2f0>)
 800f650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f654:	0800f66d 	.word	0x0800f66d
 800f658:	0800f675 	.word	0x0800f675
 800f65c:	0800f67d 	.word	0x0800f67d
 800f660:	0800f685 	.word	0x0800f685
 800f664:	0800f6b1 	.word	0x0800f6b1
 800f668:	0800f6b9 	.word	0x0800f6b9
 800f66c:	2300      	movs	r3, #0
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f672:	e24e      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f674:	2304      	movs	r3, #4
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f67a:	e24a      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f67c:	2308      	movs	r3, #8
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f682:	e246      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f684:	2310      	movs	r3, #16
 800f686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f68a:	e242      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f68c:	cfff69f3 	.word	0xcfff69f3
 800f690:	58000c00 	.word	0x58000c00
 800f694:	11fff4ff 	.word	0x11fff4ff
 800f698:	40011000 	.word	0x40011000
 800f69c:	58024400 	.word	0x58024400
 800f6a0:	40004400 	.word	0x40004400
 800f6a4:	40004800 	.word	0x40004800
 800f6a8:	40004c00 	.word	0x40004c00
 800f6ac:	40005000 	.word	0x40005000
 800f6b0:	2320      	movs	r3, #32
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b6:	e22c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f6b8:	2340      	movs	r3, #64	@ 0x40
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6be:	e228      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f6c0:	2380      	movs	r3, #128	@ 0x80
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c6:	e224      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4ab1      	ldr	r2, [pc, #708]	@ (800f994 <UART_SetConfig+0x630>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d176      	bne.n	800f7c0 <UART_SetConfig+0x45c>
 800f6d2:	4bb1      	ldr	r3, [pc, #708]	@ (800f998 <UART_SetConfig+0x634>)
 800f6d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f6da:	2b28      	cmp	r3, #40	@ 0x28
 800f6dc:	d86c      	bhi.n	800f7b8 <UART_SetConfig+0x454>
 800f6de:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e4 <UART_SetConfig+0x380>)
 800f6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e4:	0800f789 	.word	0x0800f789
 800f6e8:	0800f7b9 	.word	0x0800f7b9
 800f6ec:	0800f7b9 	.word	0x0800f7b9
 800f6f0:	0800f7b9 	.word	0x0800f7b9
 800f6f4:	0800f7b9 	.word	0x0800f7b9
 800f6f8:	0800f7b9 	.word	0x0800f7b9
 800f6fc:	0800f7b9 	.word	0x0800f7b9
 800f700:	0800f7b9 	.word	0x0800f7b9
 800f704:	0800f791 	.word	0x0800f791
 800f708:	0800f7b9 	.word	0x0800f7b9
 800f70c:	0800f7b9 	.word	0x0800f7b9
 800f710:	0800f7b9 	.word	0x0800f7b9
 800f714:	0800f7b9 	.word	0x0800f7b9
 800f718:	0800f7b9 	.word	0x0800f7b9
 800f71c:	0800f7b9 	.word	0x0800f7b9
 800f720:	0800f7b9 	.word	0x0800f7b9
 800f724:	0800f799 	.word	0x0800f799
 800f728:	0800f7b9 	.word	0x0800f7b9
 800f72c:	0800f7b9 	.word	0x0800f7b9
 800f730:	0800f7b9 	.word	0x0800f7b9
 800f734:	0800f7b9 	.word	0x0800f7b9
 800f738:	0800f7b9 	.word	0x0800f7b9
 800f73c:	0800f7b9 	.word	0x0800f7b9
 800f740:	0800f7b9 	.word	0x0800f7b9
 800f744:	0800f7a1 	.word	0x0800f7a1
 800f748:	0800f7b9 	.word	0x0800f7b9
 800f74c:	0800f7b9 	.word	0x0800f7b9
 800f750:	0800f7b9 	.word	0x0800f7b9
 800f754:	0800f7b9 	.word	0x0800f7b9
 800f758:	0800f7b9 	.word	0x0800f7b9
 800f75c:	0800f7b9 	.word	0x0800f7b9
 800f760:	0800f7b9 	.word	0x0800f7b9
 800f764:	0800f7a9 	.word	0x0800f7a9
 800f768:	0800f7b9 	.word	0x0800f7b9
 800f76c:	0800f7b9 	.word	0x0800f7b9
 800f770:	0800f7b9 	.word	0x0800f7b9
 800f774:	0800f7b9 	.word	0x0800f7b9
 800f778:	0800f7b9 	.word	0x0800f7b9
 800f77c:	0800f7b9 	.word	0x0800f7b9
 800f780:	0800f7b9 	.word	0x0800f7b9
 800f784:	0800f7b1 	.word	0x0800f7b1
 800f788:	2301      	movs	r3, #1
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78e:	e1c0      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f790:	2304      	movs	r3, #4
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f796:	e1bc      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f798:	2308      	movs	r3, #8
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79e:	e1b8      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f7a0:	2310      	movs	r3, #16
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7a6:	e1b4      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f7a8:	2320      	movs	r3, #32
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ae:	e1b0      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f7b0:	2340      	movs	r3, #64	@ 0x40
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7b6:	e1ac      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f7b8:	2380      	movs	r3, #128	@ 0x80
 800f7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7be:	e1a8      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a75      	ldr	r2, [pc, #468]	@ (800f99c <UART_SetConfig+0x638>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d130      	bne.n	800f82c <UART_SetConfig+0x4c8>
 800f7ca:	4b73      	ldr	r3, [pc, #460]	@ (800f998 <UART_SetConfig+0x634>)
 800f7cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7ce:	f003 0307 	and.w	r3, r3, #7
 800f7d2:	2b05      	cmp	r3, #5
 800f7d4:	d826      	bhi.n	800f824 <UART_SetConfig+0x4c0>
 800f7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f7dc <UART_SetConfig+0x478>)
 800f7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7dc:	0800f7f5 	.word	0x0800f7f5
 800f7e0:	0800f7fd 	.word	0x0800f7fd
 800f7e4:	0800f805 	.word	0x0800f805
 800f7e8:	0800f80d 	.word	0x0800f80d
 800f7ec:	0800f815 	.word	0x0800f815
 800f7f0:	0800f81d 	.word	0x0800f81d
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fa:	e18a      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f7fc:	2304      	movs	r3, #4
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f802:	e186      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f804:	2308      	movs	r3, #8
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f80a:	e182      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f80c:	2310      	movs	r3, #16
 800f80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f812:	e17e      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f814:	2320      	movs	r3, #32
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81a:	e17a      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f81c:	2340      	movs	r3, #64	@ 0x40
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f822:	e176      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f824:	2380      	movs	r3, #128	@ 0x80
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82a:	e172      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4a5b      	ldr	r2, [pc, #364]	@ (800f9a0 <UART_SetConfig+0x63c>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d130      	bne.n	800f898 <UART_SetConfig+0x534>
 800f836:	4b58      	ldr	r3, [pc, #352]	@ (800f998 <UART_SetConfig+0x634>)
 800f838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f83a:	f003 0307 	and.w	r3, r3, #7
 800f83e:	2b05      	cmp	r3, #5
 800f840:	d826      	bhi.n	800f890 <UART_SetConfig+0x52c>
 800f842:	a201      	add	r2, pc, #4	@ (adr r2, 800f848 <UART_SetConfig+0x4e4>)
 800f844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f848:	0800f861 	.word	0x0800f861
 800f84c:	0800f869 	.word	0x0800f869
 800f850:	0800f871 	.word	0x0800f871
 800f854:	0800f879 	.word	0x0800f879
 800f858:	0800f881 	.word	0x0800f881
 800f85c:	0800f889 	.word	0x0800f889
 800f860:	2300      	movs	r3, #0
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f866:	e154      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f868:	2304      	movs	r3, #4
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f86e:	e150      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f870:	2308      	movs	r3, #8
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f876:	e14c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f878:	2310      	movs	r3, #16
 800f87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f87e:	e148      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f880:	2320      	movs	r3, #32
 800f882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f886:	e144      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f888:	2340      	movs	r3, #64	@ 0x40
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88e:	e140      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f890:	2380      	movs	r3, #128	@ 0x80
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f896:	e13c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	4a41      	ldr	r2, [pc, #260]	@ (800f9a4 <UART_SetConfig+0x640>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	f040 8082 	bne.w	800f9a8 <UART_SetConfig+0x644>
 800f8a4:	4b3c      	ldr	r3, [pc, #240]	@ (800f998 <UART_SetConfig+0x634>)
 800f8a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8ac:	2b28      	cmp	r3, #40	@ 0x28
 800f8ae:	d86d      	bhi.n	800f98c <UART_SetConfig+0x628>
 800f8b0:	a201      	add	r2, pc, #4	@ (adr r2, 800f8b8 <UART_SetConfig+0x554>)
 800f8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b6:	bf00      	nop
 800f8b8:	0800f95d 	.word	0x0800f95d
 800f8bc:	0800f98d 	.word	0x0800f98d
 800f8c0:	0800f98d 	.word	0x0800f98d
 800f8c4:	0800f98d 	.word	0x0800f98d
 800f8c8:	0800f98d 	.word	0x0800f98d
 800f8cc:	0800f98d 	.word	0x0800f98d
 800f8d0:	0800f98d 	.word	0x0800f98d
 800f8d4:	0800f98d 	.word	0x0800f98d
 800f8d8:	0800f965 	.word	0x0800f965
 800f8dc:	0800f98d 	.word	0x0800f98d
 800f8e0:	0800f98d 	.word	0x0800f98d
 800f8e4:	0800f98d 	.word	0x0800f98d
 800f8e8:	0800f98d 	.word	0x0800f98d
 800f8ec:	0800f98d 	.word	0x0800f98d
 800f8f0:	0800f98d 	.word	0x0800f98d
 800f8f4:	0800f98d 	.word	0x0800f98d
 800f8f8:	0800f96d 	.word	0x0800f96d
 800f8fc:	0800f98d 	.word	0x0800f98d
 800f900:	0800f98d 	.word	0x0800f98d
 800f904:	0800f98d 	.word	0x0800f98d
 800f908:	0800f98d 	.word	0x0800f98d
 800f90c:	0800f98d 	.word	0x0800f98d
 800f910:	0800f98d 	.word	0x0800f98d
 800f914:	0800f98d 	.word	0x0800f98d
 800f918:	0800f975 	.word	0x0800f975
 800f91c:	0800f98d 	.word	0x0800f98d
 800f920:	0800f98d 	.word	0x0800f98d
 800f924:	0800f98d 	.word	0x0800f98d
 800f928:	0800f98d 	.word	0x0800f98d
 800f92c:	0800f98d 	.word	0x0800f98d
 800f930:	0800f98d 	.word	0x0800f98d
 800f934:	0800f98d 	.word	0x0800f98d
 800f938:	0800f97d 	.word	0x0800f97d
 800f93c:	0800f98d 	.word	0x0800f98d
 800f940:	0800f98d 	.word	0x0800f98d
 800f944:	0800f98d 	.word	0x0800f98d
 800f948:	0800f98d 	.word	0x0800f98d
 800f94c:	0800f98d 	.word	0x0800f98d
 800f950:	0800f98d 	.word	0x0800f98d
 800f954:	0800f98d 	.word	0x0800f98d
 800f958:	0800f985 	.word	0x0800f985
 800f95c:	2301      	movs	r3, #1
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f962:	e0d6      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f964:	2304      	movs	r3, #4
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96a:	e0d2      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f96c:	2308      	movs	r3, #8
 800f96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f972:	e0ce      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f974:	2310      	movs	r3, #16
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97a:	e0ca      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f97c:	2320      	movs	r3, #32
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f982:	e0c6      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f984:	2340      	movs	r3, #64	@ 0x40
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98a:	e0c2      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f98c:	2380      	movs	r3, #128	@ 0x80
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f992:	e0be      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800f994:	40011400 	.word	0x40011400
 800f998:	58024400 	.word	0x58024400
 800f99c:	40007800 	.word	0x40007800
 800f9a0:	40007c00 	.word	0x40007c00
 800f9a4:	40011800 	.word	0x40011800
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4aad      	ldr	r2, [pc, #692]	@ (800fc64 <UART_SetConfig+0x900>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d176      	bne.n	800faa0 <UART_SetConfig+0x73c>
 800f9b2:	4bad      	ldr	r3, [pc, #692]	@ (800fc68 <UART_SetConfig+0x904>)
 800f9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f9ba:	2b28      	cmp	r3, #40	@ 0x28
 800f9bc:	d86c      	bhi.n	800fa98 <UART_SetConfig+0x734>
 800f9be:	a201      	add	r2, pc, #4	@ (adr r2, 800f9c4 <UART_SetConfig+0x660>)
 800f9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c4:	0800fa69 	.word	0x0800fa69
 800f9c8:	0800fa99 	.word	0x0800fa99
 800f9cc:	0800fa99 	.word	0x0800fa99
 800f9d0:	0800fa99 	.word	0x0800fa99
 800f9d4:	0800fa99 	.word	0x0800fa99
 800f9d8:	0800fa99 	.word	0x0800fa99
 800f9dc:	0800fa99 	.word	0x0800fa99
 800f9e0:	0800fa99 	.word	0x0800fa99
 800f9e4:	0800fa71 	.word	0x0800fa71
 800f9e8:	0800fa99 	.word	0x0800fa99
 800f9ec:	0800fa99 	.word	0x0800fa99
 800f9f0:	0800fa99 	.word	0x0800fa99
 800f9f4:	0800fa99 	.word	0x0800fa99
 800f9f8:	0800fa99 	.word	0x0800fa99
 800f9fc:	0800fa99 	.word	0x0800fa99
 800fa00:	0800fa99 	.word	0x0800fa99
 800fa04:	0800fa79 	.word	0x0800fa79
 800fa08:	0800fa99 	.word	0x0800fa99
 800fa0c:	0800fa99 	.word	0x0800fa99
 800fa10:	0800fa99 	.word	0x0800fa99
 800fa14:	0800fa99 	.word	0x0800fa99
 800fa18:	0800fa99 	.word	0x0800fa99
 800fa1c:	0800fa99 	.word	0x0800fa99
 800fa20:	0800fa99 	.word	0x0800fa99
 800fa24:	0800fa81 	.word	0x0800fa81
 800fa28:	0800fa99 	.word	0x0800fa99
 800fa2c:	0800fa99 	.word	0x0800fa99
 800fa30:	0800fa99 	.word	0x0800fa99
 800fa34:	0800fa99 	.word	0x0800fa99
 800fa38:	0800fa99 	.word	0x0800fa99
 800fa3c:	0800fa99 	.word	0x0800fa99
 800fa40:	0800fa99 	.word	0x0800fa99
 800fa44:	0800fa89 	.word	0x0800fa89
 800fa48:	0800fa99 	.word	0x0800fa99
 800fa4c:	0800fa99 	.word	0x0800fa99
 800fa50:	0800fa99 	.word	0x0800fa99
 800fa54:	0800fa99 	.word	0x0800fa99
 800fa58:	0800fa99 	.word	0x0800fa99
 800fa5c:	0800fa99 	.word	0x0800fa99
 800fa60:	0800fa99 	.word	0x0800fa99
 800fa64:	0800fa91 	.word	0x0800fa91
 800fa68:	2301      	movs	r3, #1
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6e:	e050      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fa70:	2304      	movs	r3, #4
 800fa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa76:	e04c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fa78:	2308      	movs	r3, #8
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7e:	e048      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fa80:	2310      	movs	r3, #16
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa86:	e044      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fa88:	2320      	movs	r3, #32
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa8e:	e040      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fa90:	2340      	movs	r3, #64	@ 0x40
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa96:	e03c      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fa98:	2380      	movs	r3, #128	@ 0x80
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9e:	e038      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a71      	ldr	r2, [pc, #452]	@ (800fc6c <UART_SetConfig+0x908>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d130      	bne.n	800fb0c <UART_SetConfig+0x7a8>
 800faaa:	4b6f      	ldr	r3, [pc, #444]	@ (800fc68 <UART_SetConfig+0x904>)
 800faac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800faae:	f003 0307 	and.w	r3, r3, #7
 800fab2:	2b05      	cmp	r3, #5
 800fab4:	d826      	bhi.n	800fb04 <UART_SetConfig+0x7a0>
 800fab6:	a201      	add	r2, pc, #4	@ (adr r2, 800fabc <UART_SetConfig+0x758>)
 800fab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fabc:	0800fad5 	.word	0x0800fad5
 800fac0:	0800fadd 	.word	0x0800fadd
 800fac4:	0800fae5 	.word	0x0800fae5
 800fac8:	0800faed 	.word	0x0800faed
 800facc:	0800faf5 	.word	0x0800faf5
 800fad0:	0800fafd 	.word	0x0800fafd
 800fad4:	2302      	movs	r3, #2
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fada:	e01a      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fadc:	2304      	movs	r3, #4
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae2:	e016      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fae4:	2308      	movs	r3, #8
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faea:	e012      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800faec:	2310      	movs	r3, #16
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf2:	e00e      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800faf4:	2320      	movs	r3, #32
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafa:	e00a      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fafc:	2340      	movs	r3, #64	@ 0x40
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb02:	e006      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fb04:	2380      	movs	r3, #128	@ 0x80
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0a:	e002      	b.n	800fb12 <UART_SetConfig+0x7ae>
 800fb0c:	2380      	movs	r3, #128	@ 0x80
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4a55      	ldr	r2, [pc, #340]	@ (800fc6c <UART_SetConfig+0x908>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	f040 80f8 	bne.w	800fd0e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fb22:	2b20      	cmp	r3, #32
 800fb24:	dc46      	bgt.n	800fbb4 <UART_SetConfig+0x850>
 800fb26:	2b02      	cmp	r3, #2
 800fb28:	db75      	blt.n	800fc16 <UART_SetConfig+0x8b2>
 800fb2a:	3b02      	subs	r3, #2
 800fb2c:	2b1e      	cmp	r3, #30
 800fb2e:	d872      	bhi.n	800fc16 <UART_SetConfig+0x8b2>
 800fb30:	a201      	add	r2, pc, #4	@ (adr r2, 800fb38 <UART_SetConfig+0x7d4>)
 800fb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb36:	bf00      	nop
 800fb38:	0800fbbb 	.word	0x0800fbbb
 800fb3c:	0800fc17 	.word	0x0800fc17
 800fb40:	0800fbc3 	.word	0x0800fbc3
 800fb44:	0800fc17 	.word	0x0800fc17
 800fb48:	0800fc17 	.word	0x0800fc17
 800fb4c:	0800fc17 	.word	0x0800fc17
 800fb50:	0800fbd3 	.word	0x0800fbd3
 800fb54:	0800fc17 	.word	0x0800fc17
 800fb58:	0800fc17 	.word	0x0800fc17
 800fb5c:	0800fc17 	.word	0x0800fc17
 800fb60:	0800fc17 	.word	0x0800fc17
 800fb64:	0800fc17 	.word	0x0800fc17
 800fb68:	0800fc17 	.word	0x0800fc17
 800fb6c:	0800fc17 	.word	0x0800fc17
 800fb70:	0800fbe3 	.word	0x0800fbe3
 800fb74:	0800fc17 	.word	0x0800fc17
 800fb78:	0800fc17 	.word	0x0800fc17
 800fb7c:	0800fc17 	.word	0x0800fc17
 800fb80:	0800fc17 	.word	0x0800fc17
 800fb84:	0800fc17 	.word	0x0800fc17
 800fb88:	0800fc17 	.word	0x0800fc17
 800fb8c:	0800fc17 	.word	0x0800fc17
 800fb90:	0800fc17 	.word	0x0800fc17
 800fb94:	0800fc17 	.word	0x0800fc17
 800fb98:	0800fc17 	.word	0x0800fc17
 800fb9c:	0800fc17 	.word	0x0800fc17
 800fba0:	0800fc17 	.word	0x0800fc17
 800fba4:	0800fc17 	.word	0x0800fc17
 800fba8:	0800fc17 	.word	0x0800fc17
 800fbac:	0800fc17 	.word	0x0800fc17
 800fbb0:	0800fc09 	.word	0x0800fc09
 800fbb4:	2b40      	cmp	r3, #64	@ 0x40
 800fbb6:	d02a      	beq.n	800fc0e <UART_SetConfig+0x8aa>
 800fbb8:	e02d      	b.n	800fc16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fbba:	f7fb ff37 	bl	800ba2c <HAL_RCCEx_GetD3PCLK1Freq>
 800fbbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fbc0:	e02f      	b.n	800fc22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fb ff46 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbd0:	e027      	b.n	800fc22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbd2:	f107 0318 	add.w	r3, r7, #24
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fc f892 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fbe0:	e01f      	b.n	800fc22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbe2:	4b21      	ldr	r3, [pc, #132]	@ (800fc68 <UART_SetConfig+0x904>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f003 0320 	and.w	r3, r3, #32
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d009      	beq.n	800fc02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbee:	4b1e      	ldr	r3, [pc, #120]	@ (800fc68 <UART_SetConfig+0x904>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	08db      	lsrs	r3, r3, #3
 800fbf4:	f003 0303 	and.w	r3, r3, #3
 800fbf8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc70 <UART_SetConfig+0x90c>)
 800fbfa:	fa22 f303 	lsr.w	r3, r2, r3
 800fbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc00:	e00f      	b.n	800fc22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fc02:	4b1b      	ldr	r3, [pc, #108]	@ (800fc70 <UART_SetConfig+0x90c>)
 800fc04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc06:	e00c      	b.n	800fc22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc08:	4b1a      	ldr	r3, [pc, #104]	@ (800fc74 <UART_SetConfig+0x910>)
 800fc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc0c:	e009      	b.n	800fc22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fc14:	e005      	b.n	800fc22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fc16:	2300      	movs	r3, #0
 800fc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fc20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 81ee 	beq.w	8010006 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc2e:	4a12      	ldr	r2, [pc, #72]	@ (800fc78 <UART_SetConfig+0x914>)
 800fc30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc34:	461a      	mov	r2, r3
 800fc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc38:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc3c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	4613      	mov	r3, r2
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	4413      	add	r3, r2
 800fc48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d305      	bcc.n	800fc5a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d910      	bls.n	800fc7c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc60:	e1d1      	b.n	8010006 <UART_SetConfig+0xca2>
 800fc62:	bf00      	nop
 800fc64:	40011c00 	.word	0x40011c00
 800fc68:	58024400 	.word	0x58024400
 800fc6c:	58000c00 	.word	0x58000c00
 800fc70:	03d09000 	.word	0x03d09000
 800fc74:	003d0900 	.word	0x003d0900
 800fc78:	080123e4 	.word	0x080123e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc7e:	2200      	movs	r2, #0
 800fc80:	60bb      	str	r3, [r7, #8]
 800fc82:	60fa      	str	r2, [r7, #12]
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc88:	4ac0      	ldr	r2, [pc, #768]	@ (800ff8c <UART_SetConfig+0xc28>)
 800fc8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	2200      	movs	r2, #0
 800fc92:	603b      	str	r3, [r7, #0]
 800fc94:	607a      	str	r2, [r7, #4]
 800fc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc9e:	f7f0 fb8f 	bl	80003c0 <__aeabi_uldivmod>
 800fca2:	4602      	mov	r2, r0
 800fca4:	460b      	mov	r3, r1
 800fca6:	4610      	mov	r0, r2
 800fca8:	4619      	mov	r1, r3
 800fcaa:	f04f 0200 	mov.w	r2, #0
 800fcae:	f04f 0300 	mov.w	r3, #0
 800fcb2:	020b      	lsls	r3, r1, #8
 800fcb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fcb8:	0202      	lsls	r2, r0, #8
 800fcba:	6979      	ldr	r1, [r7, #20]
 800fcbc:	6849      	ldr	r1, [r1, #4]
 800fcbe:	0849      	lsrs	r1, r1, #1
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	4605      	mov	r5, r0
 800fcc6:	eb12 0804 	adds.w	r8, r2, r4
 800fcca:	eb43 0905 	adc.w	r9, r3, r5
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	469a      	mov	sl, r3
 800fcd6:	4693      	mov	fp, r2
 800fcd8:	4652      	mov	r2, sl
 800fcda:	465b      	mov	r3, fp
 800fcdc:	4640      	mov	r0, r8
 800fcde:	4649      	mov	r1, r9
 800fce0:	f7f0 fb6e 	bl	80003c0 <__aeabi_uldivmod>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	4613      	mov	r3, r2
 800fcea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fcf2:	d308      	bcc.n	800fd06 <UART_SetConfig+0x9a2>
 800fcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fcfa:	d204      	bcs.n	800fd06 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd02:	60da      	str	r2, [r3, #12]
 800fd04:	e17f      	b.n	8010006 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fd06:	2301      	movs	r3, #1
 800fd08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fd0c:	e17b      	b.n	8010006 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	69db      	ldr	r3, [r3, #28]
 800fd12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd16:	f040 80bd 	bne.w	800fe94 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fd1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	2b20      	cmp	r3, #32
 800fd20:	dc48      	bgt.n	800fdb4 <UART_SetConfig+0xa50>
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	db7b      	blt.n	800fe1e <UART_SetConfig+0xaba>
 800fd26:	2b20      	cmp	r3, #32
 800fd28:	d879      	bhi.n	800fe1e <UART_SetConfig+0xaba>
 800fd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd30 <UART_SetConfig+0x9cc>)
 800fd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd30:	0800fdbb 	.word	0x0800fdbb
 800fd34:	0800fdc3 	.word	0x0800fdc3
 800fd38:	0800fe1f 	.word	0x0800fe1f
 800fd3c:	0800fe1f 	.word	0x0800fe1f
 800fd40:	0800fdcb 	.word	0x0800fdcb
 800fd44:	0800fe1f 	.word	0x0800fe1f
 800fd48:	0800fe1f 	.word	0x0800fe1f
 800fd4c:	0800fe1f 	.word	0x0800fe1f
 800fd50:	0800fddb 	.word	0x0800fddb
 800fd54:	0800fe1f 	.word	0x0800fe1f
 800fd58:	0800fe1f 	.word	0x0800fe1f
 800fd5c:	0800fe1f 	.word	0x0800fe1f
 800fd60:	0800fe1f 	.word	0x0800fe1f
 800fd64:	0800fe1f 	.word	0x0800fe1f
 800fd68:	0800fe1f 	.word	0x0800fe1f
 800fd6c:	0800fe1f 	.word	0x0800fe1f
 800fd70:	0800fdeb 	.word	0x0800fdeb
 800fd74:	0800fe1f 	.word	0x0800fe1f
 800fd78:	0800fe1f 	.word	0x0800fe1f
 800fd7c:	0800fe1f 	.word	0x0800fe1f
 800fd80:	0800fe1f 	.word	0x0800fe1f
 800fd84:	0800fe1f 	.word	0x0800fe1f
 800fd88:	0800fe1f 	.word	0x0800fe1f
 800fd8c:	0800fe1f 	.word	0x0800fe1f
 800fd90:	0800fe1f 	.word	0x0800fe1f
 800fd94:	0800fe1f 	.word	0x0800fe1f
 800fd98:	0800fe1f 	.word	0x0800fe1f
 800fd9c:	0800fe1f 	.word	0x0800fe1f
 800fda0:	0800fe1f 	.word	0x0800fe1f
 800fda4:	0800fe1f 	.word	0x0800fe1f
 800fda8:	0800fe1f 	.word	0x0800fe1f
 800fdac:	0800fe1f 	.word	0x0800fe1f
 800fdb0:	0800fe11 	.word	0x0800fe11
 800fdb4:	2b40      	cmp	r3, #64	@ 0x40
 800fdb6:	d02e      	beq.n	800fe16 <UART_SetConfig+0xab2>
 800fdb8:	e031      	b.n	800fe1e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdba:	f7f9 ff99 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800fdbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdc0:	e033      	b.n	800fe2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdc2:	f7f9 ffab 	bl	8009d1c <HAL_RCC_GetPCLK2Freq>
 800fdc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fdc8:	e02f      	b.n	800fe2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fdca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fb fe42 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdd8:	e027      	b.n	800fe2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdda:	f107 0318 	add.w	r3, r7, #24
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fb ff8e 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fde8:	e01f      	b.n	800fe2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdea:	4b69      	ldr	r3, [pc, #420]	@ (800ff90 <UART_SetConfig+0xc2c>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f003 0320 	and.w	r3, r3, #32
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d009      	beq.n	800fe0a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fdf6:	4b66      	ldr	r3, [pc, #408]	@ (800ff90 <UART_SetConfig+0xc2c>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	08db      	lsrs	r3, r3, #3
 800fdfc:	f003 0303 	and.w	r3, r3, #3
 800fe00:	4a64      	ldr	r2, [pc, #400]	@ (800ff94 <UART_SetConfig+0xc30>)
 800fe02:	fa22 f303 	lsr.w	r3, r2, r3
 800fe06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe08:	e00f      	b.n	800fe2a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fe0a:	4b62      	ldr	r3, [pc, #392]	@ (800ff94 <UART_SetConfig+0xc30>)
 800fe0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe0e:	e00c      	b.n	800fe2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe10:	4b61      	ldr	r3, [pc, #388]	@ (800ff98 <UART_SetConfig+0xc34>)
 800fe12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe14:	e009      	b.n	800fe2a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fe1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe1c:	e005      	b.n	800fe2a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fe22:	2301      	movs	r3, #1
 800fe24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fe28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f000 80ea 	beq.w	8010006 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe36:	4a55      	ldr	r2, [pc, #340]	@ (800ff8c <UART_SetConfig+0xc28>)
 800fe38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe40:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe44:	005a      	lsls	r2, r3, #1
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	085b      	lsrs	r3, r3, #1
 800fe4c:	441a      	add	r2, r3
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5a:	2b0f      	cmp	r3, #15
 800fe5c:	d916      	bls.n	800fe8c <UART_SetConfig+0xb28>
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe64:	d212      	bcs.n	800fe8c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	f023 030f 	bic.w	r3, r3, #15
 800fe6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe72:	085b      	lsrs	r3, r3, #1
 800fe74:	b29b      	uxth	r3, r3
 800fe76:	f003 0307 	and.w	r3, r3, #7
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fe88:	60da      	str	r2, [r3, #12]
 800fe8a:	e0bc      	b.n	8010006 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe92:	e0b8      	b.n	8010006 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe94:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe98:	2b20      	cmp	r3, #32
 800fe9a:	dc4b      	bgt.n	800ff34 <UART_SetConfig+0xbd0>
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f2c0 8087 	blt.w	800ffb0 <UART_SetConfig+0xc4c>
 800fea2:	2b20      	cmp	r3, #32
 800fea4:	f200 8084 	bhi.w	800ffb0 <UART_SetConfig+0xc4c>
 800fea8:	a201      	add	r2, pc, #4	@ (adr r2, 800feb0 <UART_SetConfig+0xb4c>)
 800feaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feae:	bf00      	nop
 800feb0:	0800ff3b 	.word	0x0800ff3b
 800feb4:	0800ff43 	.word	0x0800ff43
 800feb8:	0800ffb1 	.word	0x0800ffb1
 800febc:	0800ffb1 	.word	0x0800ffb1
 800fec0:	0800ff4b 	.word	0x0800ff4b
 800fec4:	0800ffb1 	.word	0x0800ffb1
 800fec8:	0800ffb1 	.word	0x0800ffb1
 800fecc:	0800ffb1 	.word	0x0800ffb1
 800fed0:	0800ff5b 	.word	0x0800ff5b
 800fed4:	0800ffb1 	.word	0x0800ffb1
 800fed8:	0800ffb1 	.word	0x0800ffb1
 800fedc:	0800ffb1 	.word	0x0800ffb1
 800fee0:	0800ffb1 	.word	0x0800ffb1
 800fee4:	0800ffb1 	.word	0x0800ffb1
 800fee8:	0800ffb1 	.word	0x0800ffb1
 800feec:	0800ffb1 	.word	0x0800ffb1
 800fef0:	0800ff6b 	.word	0x0800ff6b
 800fef4:	0800ffb1 	.word	0x0800ffb1
 800fef8:	0800ffb1 	.word	0x0800ffb1
 800fefc:	0800ffb1 	.word	0x0800ffb1
 800ff00:	0800ffb1 	.word	0x0800ffb1
 800ff04:	0800ffb1 	.word	0x0800ffb1
 800ff08:	0800ffb1 	.word	0x0800ffb1
 800ff0c:	0800ffb1 	.word	0x0800ffb1
 800ff10:	0800ffb1 	.word	0x0800ffb1
 800ff14:	0800ffb1 	.word	0x0800ffb1
 800ff18:	0800ffb1 	.word	0x0800ffb1
 800ff1c:	0800ffb1 	.word	0x0800ffb1
 800ff20:	0800ffb1 	.word	0x0800ffb1
 800ff24:	0800ffb1 	.word	0x0800ffb1
 800ff28:	0800ffb1 	.word	0x0800ffb1
 800ff2c:	0800ffb1 	.word	0x0800ffb1
 800ff30:	0800ffa3 	.word	0x0800ffa3
 800ff34:	2b40      	cmp	r3, #64	@ 0x40
 800ff36:	d037      	beq.n	800ffa8 <UART_SetConfig+0xc44>
 800ff38:	e03a      	b.n	800ffb0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff3a:	f7f9 fed9 	bl	8009cf0 <HAL_RCC_GetPCLK1Freq>
 800ff3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff40:	e03c      	b.n	800ffbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff42:	f7f9 feeb 	bl	8009d1c <HAL_RCC_GetPCLK2Freq>
 800ff46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff48:	e038      	b.n	800ffbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fb fd82 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff58:	e030      	b.n	800ffbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff5a:	f107 0318 	add.w	r3, r7, #24
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb fece 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff68:	e028      	b.n	800ffbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff6a:	4b09      	ldr	r3, [pc, #36]	@ (800ff90 <UART_SetConfig+0xc2c>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f003 0320 	and.w	r3, r3, #32
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d012      	beq.n	800ff9c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff76:	4b06      	ldr	r3, [pc, #24]	@ (800ff90 <UART_SetConfig+0xc2c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	08db      	lsrs	r3, r3, #3
 800ff7c:	f003 0303 	and.w	r3, r3, #3
 800ff80:	4a04      	ldr	r2, [pc, #16]	@ (800ff94 <UART_SetConfig+0xc30>)
 800ff82:	fa22 f303 	lsr.w	r3, r2, r3
 800ff86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff88:	e018      	b.n	800ffbc <UART_SetConfig+0xc58>
 800ff8a:	bf00      	nop
 800ff8c:	080123e4 	.word	0x080123e4
 800ff90:	58024400 	.word	0x58024400
 800ff94:	03d09000 	.word	0x03d09000
 800ff98:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff9c:	4b24      	ldr	r3, [pc, #144]	@ (8010030 <UART_SetConfig+0xccc>)
 800ff9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffa0:	e00c      	b.n	800ffbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffa2:	4b24      	ldr	r3, [pc, #144]	@ (8010034 <UART_SetConfig+0xcd0>)
 800ffa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffa6:	e009      	b.n	800ffbc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ffac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffae:	e005      	b.n	800ffbc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ffba:	bf00      	nop
    }

    if (pclk != 0U)
 800ffbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d021      	beq.n	8010006 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc6:	4a1c      	ldr	r2, [pc, #112]	@ (8010038 <UART_SetConfig+0xcd4>)
 800ffc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffcc:	461a      	mov	r2, r3
 800ffce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffd0:	fbb3 f2f2 	udiv	r2, r3, r2
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	085b      	lsrs	r3, r3, #1
 800ffda:	441a      	add	r2, r3
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffe4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe8:	2b0f      	cmp	r3, #15
 800ffea:	d909      	bls.n	8010000 <UART_SetConfig+0xc9c>
 800ffec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fff2:	d205      	bcs.n	8010000 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff6:	b29a      	uxth	r2, r3
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	60da      	str	r2, [r3, #12]
 800fffe:	e002      	b.n	8010006 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010000:	2301      	movs	r3, #1
 8010002:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	2201      	movs	r2, #1
 801000a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	2201      	movs	r2, #1
 8010012:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	2200      	movs	r2, #0
 801001a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2200      	movs	r2, #0
 8010020:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010022:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010026:	4618      	mov	r0, r3
 8010028:	3748      	adds	r7, #72	@ 0x48
 801002a:	46bd      	mov	sp, r7
 801002c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010030:	03d09000 	.word	0x03d09000
 8010034:	003d0900 	.word	0x003d0900
 8010038:	080123e4 	.word	0x080123e4

0801003c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010048:	f003 0308 	and.w	r3, r3, #8
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00a      	beq.n	8010066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	430a      	orrs	r2, r1
 8010064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801006a:	f003 0301 	and.w	r3, r3, #1
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00a      	beq.n	8010088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	430a      	orrs	r2, r1
 8010086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801008c:	f003 0302 	and.w	r3, r3, #2
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00a      	beq.n	80100aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	430a      	orrs	r2, r1
 80100a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100ae:	f003 0304 	and.w	r3, r3, #4
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00a      	beq.n	80100cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	430a      	orrs	r2, r1
 80100ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d0:	f003 0310 	and.w	r3, r3, #16
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00a      	beq.n	80100ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	430a      	orrs	r2, r1
 80100ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100f2:	f003 0320 	and.w	r3, r3, #32
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00a      	beq.n	8010110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	430a      	orrs	r2, r1
 801010e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010118:	2b00      	cmp	r3, #0
 801011a:	d01a      	beq.n	8010152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	430a      	orrs	r2, r1
 8010130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801013a:	d10a      	bne.n	8010152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	430a      	orrs	r2, r1
 8010150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	430a      	orrs	r2, r1
 8010172:	605a      	str	r2, [r3, #4]
  }
}
 8010174:	bf00      	nop
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr

08010180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b098      	sub	sp, #96	@ 0x60
 8010184:	af02      	add	r7, sp, #8
 8010186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010190:	f7f2 fc80 	bl	8002a94 <HAL_GetTick>
 8010194:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f003 0308 	and.w	r3, r3, #8
 80101a0:	2b08      	cmp	r3, #8
 80101a2:	d12f      	bne.n	8010204 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101ac:	2200      	movs	r2, #0
 80101ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f88e 	bl	80102d4 <UART_WaitOnFlagUntilTimeout>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d022      	beq.n	8010204 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c6:	e853 3f00 	ldrex	r3, [r3]
 80101ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80101cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	461a      	mov	r2, r3
 80101da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80101de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80101e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80101ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e6      	bne.n	80101be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2220      	movs	r2, #32
 80101f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010200:	2303      	movs	r3, #3
 8010202:	e063      	b.n	80102cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	f003 0304 	and.w	r3, r3, #4
 801020e:	2b04      	cmp	r3, #4
 8010210:	d149      	bne.n	80102a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010212:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010216:	9300      	str	r3, [sp, #0]
 8010218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801021a:	2200      	movs	r2, #0
 801021c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f857 	bl	80102d4 <UART_WaitOnFlagUntilTimeout>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d03c      	beq.n	80102a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010234:	e853 3f00 	ldrex	r3, [r3]
 8010238:	623b      	str	r3, [r7, #32]
   return(result);
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	461a      	mov	r2, r3
 8010248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801024a:	633b      	str	r3, [r7, #48]	@ 0x30
 801024c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801024e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010252:	e841 2300 	strex	r3, r2, [r1]
 8010256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1e6      	bne.n	801022c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	3308      	adds	r3, #8
 8010264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	e853 3f00 	ldrex	r3, [r3]
 801026c:	60fb      	str	r3, [r7, #12]
   return(result);
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f023 0301 	bic.w	r3, r3, #1
 8010274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3308      	adds	r3, #8
 801027c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801027e:	61fa      	str	r2, [r7, #28]
 8010280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010282:	69b9      	ldr	r1, [r7, #24]
 8010284:	69fa      	ldr	r2, [r7, #28]
 8010286:	e841 2300 	strex	r3, r2, [r1]
 801028a:	617b      	str	r3, [r7, #20]
   return(result);
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1e5      	bne.n	801025e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2220      	movs	r2, #32
 8010296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2200      	movs	r2, #0
 801029e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80102a2:	2303      	movs	r3, #3
 80102a4:	e012      	b.n	80102cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2220      	movs	r2, #32
 80102aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2220      	movs	r2, #32
 80102b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3758      	adds	r7, #88	@ 0x58
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	603b      	str	r3, [r7, #0]
 80102e0:	4613      	mov	r3, r2
 80102e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102e4:	e04f      	b.n	8010386 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ec:	d04b      	beq.n	8010386 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102ee:	f7f2 fbd1 	bl	8002a94 <HAL_GetTick>
 80102f2:	4602      	mov	r2, r0
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	1ad3      	subs	r3, r2, r3
 80102f8:	69ba      	ldr	r2, [r7, #24]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d302      	bcc.n	8010304 <UART_WaitOnFlagUntilTimeout+0x30>
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010304:	2303      	movs	r3, #3
 8010306:	e04e      	b.n	80103a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f003 0304 	and.w	r3, r3, #4
 8010312:	2b00      	cmp	r3, #0
 8010314:	d037      	beq.n	8010386 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2b80      	cmp	r3, #128	@ 0x80
 801031a:	d034      	beq.n	8010386 <UART_WaitOnFlagUntilTimeout+0xb2>
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	2b40      	cmp	r3, #64	@ 0x40
 8010320:	d031      	beq.n	8010386 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	69db      	ldr	r3, [r3, #28]
 8010328:	f003 0308 	and.w	r3, r3, #8
 801032c:	2b08      	cmp	r3, #8
 801032e:	d110      	bne.n	8010352 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2208      	movs	r2, #8
 8010336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f000 f839 	bl	80103b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2208      	movs	r2, #8
 8010342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801034e:	2301      	movs	r3, #1
 8010350:	e029      	b.n	80103a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801035c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010360:	d111      	bne.n	8010386 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801036a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 f81f 	bl	80103b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2220      	movs	r2, #32
 8010376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2200      	movs	r2, #0
 801037e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010382:	2303      	movs	r3, #3
 8010384:	e00f      	b.n	80103a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	69da      	ldr	r2, [r3, #28]
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	4013      	ands	r3, r2
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	429a      	cmp	r2, r3
 8010394:	bf0c      	ite	eq
 8010396:	2301      	moveq	r3, #1
 8010398:	2300      	movne	r3, #0
 801039a:	b2db      	uxtb	r3, r3
 801039c:	461a      	mov	r2, r3
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d0a0      	beq.n	80102e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103a4:	2300      	movs	r3, #0
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
	...

080103b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b095      	sub	sp, #84	@ 0x54
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c0:	e853 3f00 	ldrex	r3, [r3]
 80103c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80103c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	461a      	mov	r2, r3
 80103d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80103d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80103dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80103de:	e841 2300 	strex	r3, r2, [r1]
 80103e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1e6      	bne.n	80103b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	3308      	adds	r3, #8
 80103f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f2:	6a3b      	ldr	r3, [r7, #32]
 80103f4:	e853 3f00 	ldrex	r3, [r3]
 80103f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80103fa:	69fa      	ldr	r2, [r7, #28]
 80103fc:	4b1e      	ldr	r3, [pc, #120]	@ (8010478 <UART_EndRxTransfer+0xc8>)
 80103fe:	4013      	ands	r3, r2
 8010400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801040a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801040c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010412:	e841 2300 	strex	r3, r2, [r1]
 8010416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1e5      	bne.n	80103ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010422:	2b01      	cmp	r3, #1
 8010424:	d118      	bne.n	8010458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	e853 3f00 	ldrex	r3, [r3]
 8010432:	60bb      	str	r3, [r7, #8]
   return(result);
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	f023 0310 	bic.w	r3, r3, #16
 801043a:	647b      	str	r3, [r7, #68]	@ 0x44
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010444:	61bb      	str	r3, [r7, #24]
 8010446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010448:	6979      	ldr	r1, [r7, #20]
 801044a:	69ba      	ldr	r2, [r7, #24]
 801044c:	e841 2300 	strex	r3, r2, [r1]
 8010450:	613b      	str	r3, [r7, #16]
   return(result);
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1e6      	bne.n	8010426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2220      	movs	r2, #32
 801045c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2200      	movs	r2, #0
 8010464:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2200      	movs	r2, #0
 801046a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801046c:	bf00      	nop
 801046e:	3754      	adds	r7, #84	@ 0x54
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	effffffe 	.word	0xeffffffe

0801047c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801048a:	2b01      	cmp	r3, #1
 801048c:	d101      	bne.n	8010492 <HAL_UARTEx_DisableFifoMode+0x16>
 801048e:	2302      	movs	r3, #2
 8010490:	e027      	b.n	80104e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2201      	movs	r2, #1
 8010496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2224      	movs	r2, #36	@ 0x24
 801049e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f022 0201 	bic.w	r2, r2, #1
 80104b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80104c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2200      	movs	r2, #0
 80104c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2220      	movs	r2, #32
 80104d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3714      	adds	r7, #20
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr

080104ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b084      	sub	sp, #16
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
 80104f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80104fe:	2b01      	cmp	r3, #1
 8010500:	d101      	bne.n	8010506 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010502:	2302      	movs	r3, #2
 8010504:	e02d      	b.n	8010562 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2201      	movs	r2, #1
 801050a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2224      	movs	r2, #36	@ 0x24
 8010512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f022 0201 	bic.w	r2, r2, #1
 801052c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	683a      	ldr	r2, [r7, #0]
 801053e:	430a      	orrs	r2, r1
 8010540:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f850 	bl	80105e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2220      	movs	r2, #32
 8010554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b084      	sub	sp, #16
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801057a:	2b01      	cmp	r3, #1
 801057c:	d101      	bne.n	8010582 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801057e:	2302      	movs	r3, #2
 8010580:	e02d      	b.n	80105de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2201      	movs	r2, #1
 8010586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2224      	movs	r2, #36	@ 0x24
 801058e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f022 0201 	bic.w	r2, r2, #1
 80105a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	430a      	orrs	r2, r1
 80105bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 f812 	bl	80105e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2220      	movs	r2, #32
 80105d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105dc:	2300      	movs	r3, #0
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
	...

080105e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d108      	bne.n	801060a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010608:	e031      	b.n	801066e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801060a:	2310      	movs	r3, #16
 801060c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801060e:	2310      	movs	r3, #16
 8010610:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	0e5b      	lsrs	r3, r3, #25
 801061a:	b2db      	uxtb	r3, r3
 801061c:	f003 0307 	and.w	r3, r3, #7
 8010620:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	0f5b      	lsrs	r3, r3, #29
 801062a:	b2db      	uxtb	r3, r3
 801062c:	f003 0307 	and.w	r3, r3, #7
 8010630:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010632:	7bbb      	ldrb	r3, [r7, #14]
 8010634:	7b3a      	ldrb	r2, [r7, #12]
 8010636:	4911      	ldr	r1, [pc, #68]	@ (801067c <UARTEx_SetNbDataToProcess+0x94>)
 8010638:	5c8a      	ldrb	r2, [r1, r2]
 801063a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801063e:	7b3a      	ldrb	r2, [r7, #12]
 8010640:	490f      	ldr	r1, [pc, #60]	@ (8010680 <UARTEx_SetNbDataToProcess+0x98>)
 8010642:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010644:	fb93 f3f2 	sdiv	r3, r3, r2
 8010648:	b29a      	uxth	r2, r3
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	7b7a      	ldrb	r2, [r7, #13]
 8010654:	4909      	ldr	r1, [pc, #36]	@ (801067c <UARTEx_SetNbDataToProcess+0x94>)
 8010656:	5c8a      	ldrb	r2, [r1, r2]
 8010658:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801065c:	7b7a      	ldrb	r2, [r7, #13]
 801065e:	4908      	ldr	r1, [pc, #32]	@ (8010680 <UARTEx_SetNbDataToProcess+0x98>)
 8010660:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010662:	fb93 f3f2 	sdiv	r3, r3, r2
 8010666:	b29a      	uxth	r2, r3
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801066e:	bf00      	nop
 8010670:	3714      	adds	r7, #20
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	080123fc 	.word	0x080123fc
 8010680:	08012404 	.word	0x08012404

08010684 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010684:	b084      	sub	sp, #16
 8010686:	b480      	push	{r7}
 8010688:	b085      	sub	sp, #20
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	f107 001c 	add.w	r0, r7, #28
 8010692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010696:	2300      	movs	r3, #0
 8010698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801069a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801069c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801069e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80106a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80106a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80106a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80106a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80106aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	685a      	ldr	r2, [r3, #4]
 80106b6:	4b07      	ldr	r3, [pc, #28]	@ (80106d4 <SDMMC_Init+0x50>)
 80106b8:	4013      	ands	r3, r2
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	431a      	orrs	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	b004      	add	sp, #16
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	ffc02c00 	.word	0xffc02c00

080106d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80106d8:	b480      	push	{r7}
 80106da:	b083      	sub	sp, #12
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80106f2:	b480      	push	{r7}
 80106f4:	b083      	sub	sp, #12
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010706:	2300      	movs	r3, #0
}
 8010708:	4618      	mov	r0, r3
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f043 0203 	orr.w	r2, r3, #3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr

08010736 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010736:	b480      	push	{r7}
 8010738:	b083      	sub	sp, #12
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f003 0303 	and.w	r3, r3, #3
}
 8010746:	4618      	mov	r0, r3
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
	...

08010754 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010754:	b480      	push	{r7}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801075e:	2300      	movs	r3, #0
 8010760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010772:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010778:	431a      	orrs	r2, r3
                       Command->CPSM);
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801077e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	4313      	orrs	r3, r2
 8010784:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68da      	ldr	r2, [r3, #12]
 801078a:	4b06      	ldr	r3, [pc, #24]	@ (80107a4 <SDMMC_SendCommand+0x50>)
 801078c:	4013      	ands	r3, r2
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	431a      	orrs	r2, r3
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010796:	2300      	movs	r3, #0
}
 8010798:	4618      	mov	r0, r3
 801079a:	3714      	adds	r7, #20
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr
 80107a4:	fffee0c0 	.word	0xfffee0c0

080107a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	691b      	ldr	r3, [r3, #16]
 80107b4:	b2db      	uxtb	r3, r3
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	370c      	adds	r7, #12
 80107ba:	46bd      	mov	sp, r7
 80107bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c0:	4770      	bx	lr

080107c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80107c2:	b480      	push	{r7}
 80107c4:	b085      	sub	sp, #20
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3314      	adds	r3, #20
 80107d0:	461a      	mov	r2, r3
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	4413      	add	r3, r2
 80107d6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3714      	adds	r7, #20
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107f2:	2300      	movs	r3, #0
 80107f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	685a      	ldr	r2, [r3, #4]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801080e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010814:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801081a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	4313      	orrs	r3, r2
 8010820:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010826:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	431a      	orrs	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010832:	2300      	movs	r3, #0

}
 8010834:	4618      	mov	r0, r3
 8010836:	3714      	adds	r7, #20
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b088      	sub	sp, #32
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801084e:	2310      	movs	r3, #16
 8010850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010852:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010858:	2300      	movs	r3, #0
 801085a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801085c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010860:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010862:	f107 0308 	add.w	r3, r7, #8
 8010866:	4619      	mov	r1, r3
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff ff73 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801086e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010872:	2110      	movs	r1, #16
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fa5f 	bl	8010d38 <SDMMC_GetCmdResp1>
 801087a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801087c:	69fb      	ldr	r3, [r7, #28]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3720      	adds	r7, #32
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b088      	sub	sp, #32
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010894:	2311      	movs	r3, #17
 8010896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801089c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801089e:	2300      	movs	r3, #0
 80108a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108a8:	f107 0308 	add.w	r3, r7, #8
 80108ac:	4619      	mov	r1, r3
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff ff50 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80108b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108b8:	2111      	movs	r1, #17
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 fa3c 	bl	8010d38 <SDMMC_GetCmdResp1>
 80108c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108c2:	69fb      	ldr	r3, [r7, #28]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3720      	adds	r7, #32
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80108da:	2312      	movs	r3, #18
 80108dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80108e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108e4:	2300      	movs	r3, #0
 80108e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108ee:	f107 0308 	add.w	r3, r7, #8
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ff2d 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80108fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108fe:	2112      	movs	r1, #18
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 fa19 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010908:	69fb      	ldr	r3, [r7, #28]
}
 801090a:	4618      	mov	r0, r3
 801090c:	3720      	adds	r7, #32
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b088      	sub	sp, #32
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010920:	2318      	movs	r3, #24
 8010922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801092a:	2300      	movs	r3, #0
 801092c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801092e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010932:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010934:	f107 0308 	add.w	r3, r7, #8
 8010938:	4619      	mov	r1, r3
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f7ff ff0a 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010944:	2118      	movs	r1, #24
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 f9f6 	bl	8010d38 <SDMMC_GetCmdResp1>
 801094c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801094e:	69fb      	ldr	r3, [r7, #28]
}
 8010950:	4618      	mov	r0, r3
 8010952:	3720      	adds	r7, #32
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b088      	sub	sp, #32
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010966:	2319      	movs	r3, #25
 8010968:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801096a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801096e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010970:	2300      	movs	r3, #0
 8010972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010978:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801097a:	f107 0308 	add.w	r3, r7, #8
 801097e:	4619      	mov	r1, r3
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff fee7 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010986:	f241 3288 	movw	r2, #5000	@ 0x1388
 801098a:	2119      	movs	r1, #25
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f000 f9d3 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010994:	69fb      	ldr	r3, [r7, #28]
}
 8010996:	4618      	mov	r0, r3
 8010998:	3720      	adds	r7, #32
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
	...

080109a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109a8:	2300      	movs	r3, #0
 80109aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109ac:	230c      	movs	r3, #12
 80109ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109b6:	2300      	movs	r3, #0
 80109b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109be:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d8:	f107 0308 	add.w	r3, r7, #8
 80109dc:	4619      	mov	r1, r3
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f7ff feb8 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80109e4:	4a0b      	ldr	r2, [pc, #44]	@ (8010a14 <SDMMC_CmdStopTransfer+0x74>)
 80109e6:	210c      	movs	r1, #12
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f9a5 	bl	8010d38 <SDMMC_GetCmdResp1>
 80109ee:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010a02:	d101      	bne.n	8010a08 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010a04:	2300      	movs	r3, #0
 8010a06:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010a08:	69fb      	ldr	r3, [r7, #28]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3720      	adds	r7, #32
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	05f5e100 	.word	0x05f5e100

08010a18 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b088      	sub	sp, #32
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a26:	2307      	movs	r3, #7
 8010a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a30:	2300      	movs	r3, #0
 8010a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a3a:	f107 0308 	add.w	r3, r7, #8
 8010a3e:	4619      	mov	r1, r3
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff fe87 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a4a:	2107      	movs	r1, #7
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 f973 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a54:	69fb      	ldr	r3, [r7, #28]
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3720      	adds	r7, #32
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b088      	sub	sp, #32
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010a66:	2300      	movs	r3, #0
 8010a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a72:	2300      	movs	r3, #0
 8010a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a7c:	f107 0308 	add.w	r3, r7, #8
 8010a80:	4619      	mov	r1, r3
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7ff fe66 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fb97 	bl	80111bc <SDMMC_GetCmdError>
 8010a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a90:	69fb      	ldr	r3, [r7, #28]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3720      	adds	r7, #32
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}

08010a9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b088      	sub	sp, #32
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010aa2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010aa8:	2308      	movs	r3, #8
 8010aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010abc:	f107 0308 	add.w	r3, r7, #8
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7ff fe46 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f000 fb29 	bl	8011120 <SDMMC_GetCmdResp7>
 8010ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ad0:	69fb      	ldr	r3, [r7, #28]
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3720      	adds	r7, #32
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b088      	sub	sp, #32
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ae8:	2337      	movs	r3, #55	@ 0x37
 8010aea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010af0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010af2:	2300      	movs	r3, #0
 8010af4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010afa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010afc:	f107 0308 	add.w	r3, r7, #8
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff fe26 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b0c:	2137      	movs	r1, #55	@ 0x37
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 f912 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b16:	69fb      	ldr	r3, [r7, #28]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3720      	adds	r7, #32
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b2e:	2329      	movs	r3, #41	@ 0x29
 8010b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b42:	f107 0308 	add.w	r3, r7, #8
 8010b46:	4619      	mov	r1, r3
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7ff fe03 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fa2e 	bl	8010fb0 <SDMMC_GetCmdResp3>
 8010b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b56:	69fb      	ldr	r3, [r7, #28]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3720      	adds	r7, #32
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b088      	sub	sp, #32
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b6e:	2306      	movs	r3, #6
 8010b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b82:	f107 0308 	add.w	r3, r7, #8
 8010b86:	4619      	mov	r1, r3
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7ff fde3 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010b92:	2106      	movs	r1, #6
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f8cf 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3720      	adds	r7, #32
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b088      	sub	sp, #32
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010bb2:	2333      	movs	r3, #51	@ 0x33
 8010bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bc6:	f107 0308 	add.w	r3, r7, #8
 8010bca:	4619      	mov	r1, r3
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7ff fdc1 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bd6:	2133      	movs	r1, #51	@ 0x33
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 f8ad 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010be0:	69fb      	ldr	r3, [r7, #28]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3720      	adds	r7, #32
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b088      	sub	sp, #32
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bf6:	2302      	movs	r3, #2
 8010bf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010bfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c00:	2300      	movs	r3, #0
 8010c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c0a:	f107 0308 	add.w	r3, r7, #8
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7ff fd9f 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 f980 	bl	8010f1c <SDMMC_GetCmdResp2>
 8010c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c1e:	69fb      	ldr	r3, [r7, #28]
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3720      	adds	r7, #32
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b088      	sub	sp, #32
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c36:	2309      	movs	r3, #9
 8010c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010c3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c40:	2300      	movs	r3, #0
 8010c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c4a:	f107 0308 	add.w	r3, r7, #8
 8010c4e:	4619      	mov	r1, r3
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f7ff fd7f 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f960 	bl	8010f1c <SDMMC_GetCmdResp2>
 8010c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c5e:	69fb      	ldr	r3, [r7, #28]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3720      	adds	r7, #32
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b088      	sub	sp, #32
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c72:	2300      	movs	r3, #0
 8010c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c76:	2303      	movs	r3, #3
 8010c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c80:	2300      	movs	r3, #0
 8010c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c8a:	f107 0308 	add.w	r3, r7, #8
 8010c8e:	4619      	mov	r1, r3
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff fd5f 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c96:	683a      	ldr	r2, [r7, #0]
 8010c98:	2103      	movs	r1, #3
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 f9c8 	bl	8011030 <SDMMC_GetCmdResp6>
 8010ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ca2:	69fb      	ldr	r3, [r7, #28]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3720      	adds	r7, #32
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b088      	sub	sp, #32
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010cba:	230d      	movs	r3, #13
 8010cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ccc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cce:	f107 0308 	add.w	r3, r7, #8
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff fd3d 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cde:	210d      	movs	r1, #13
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 f829 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ce8:	69fb      	ldr	r3, [r7, #28]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3720      	adds	r7, #32
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b088      	sub	sp, #32
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010cfe:	230d      	movs	r3, #13
 8010d00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d12:	f107 0308 	add.w	r3, r7, #8
 8010d16:	4619      	mov	r1, r3
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ff fd1b 	bl	8010754 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d22:	210d      	movs	r1, #13
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 f807 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d2c:	69fb      	ldr	r3, [r7, #28]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3720      	adds	r7, #32
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
	...

08010d38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b088      	sub	sp, #32
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	460b      	mov	r3, r1
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d46:	4b70      	ldr	r3, [pc, #448]	@ (8010f08 <SDMMC_GetCmdResp1+0x1d0>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a70      	ldr	r2, [pc, #448]	@ (8010f0c <SDMMC_GetCmdResp1+0x1d4>)
 8010d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d50:	0a5a      	lsrs	r2, r3, #9
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	fb02 f303 	mul.w	r3, r2, r3
 8010d58:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	1e5a      	subs	r2, r3, #1
 8010d5e:	61fa      	str	r2, [r7, #28]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d102      	bne.n	8010d6a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d68:	e0c9      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d6e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010d70:	69ba      	ldr	r2, [r7, #24]
 8010d72:	4b67      	ldr	r3, [pc, #412]	@ (8010f10 <SDMMC_GetCmdResp1+0x1d8>)
 8010d74:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d0ef      	beq.n	8010d5a <SDMMC_GetCmdResp1+0x22>
 8010d7a:	69bb      	ldr	r3, [r7, #24]
 8010d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d1ea      	bne.n	8010d5a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d88:	f003 0304 	and.w	r3, r3, #4
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d004      	beq.n	8010d9a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2204      	movs	r2, #4
 8010d94:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d96:	2304      	movs	r3, #4
 8010d98:	e0b1      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d9e:	f003 0301 	and.w	r3, r3, #1
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d004      	beq.n	8010db0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2201      	movs	r2, #1
 8010daa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dac:	2301      	movs	r3, #1
 8010dae:	e0a6      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	4a58      	ldr	r2, [pc, #352]	@ (8010f14 <SDMMC_GetCmdResp1+0x1dc>)
 8010db4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f7ff fcf6 	bl	80107a8 <SDMMC_GetCommandResponse>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	7afb      	ldrb	r3, [r7, #11]
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d001      	beq.n	8010dca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	e099      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010dca:	2100      	movs	r1, #0
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f7ff fcf8 	bl	80107c2 <SDMMC_GetResponse>
 8010dd2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010dd4:	697a      	ldr	r2, [r7, #20]
 8010dd6:	4b50      	ldr	r3, [pc, #320]	@ (8010f18 <SDMMC_GetCmdResp1+0x1e0>)
 8010dd8:	4013      	ands	r3, r2
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d101      	bne.n	8010de2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010dde:	2300      	movs	r3, #0
 8010de0:	e08d      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	da02      	bge.n	8010dee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010dec:	e087      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010df8:	2340      	movs	r3, #64	@ 0x40
 8010dfa:	e080      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d001      	beq.n	8010e0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e06:	2380      	movs	r3, #128	@ 0x80
 8010e08:	e079      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d002      	beq.n	8010e1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e18:	e071      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e28:	e069      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e38:	e061      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d002      	beq.n	8010e4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010e48:	e059      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e58:	e051      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d002      	beq.n	8010e6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e68:	e049      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010e78:	e041      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e88:	e039      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010e98:	e031      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ea4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010ea8:	e029      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d002      	beq.n	8010eba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010eb4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010eb8:	e021      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ec4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010ec8:	e019      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ed4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010ed8:	e011      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d002      	beq.n	8010eea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ee4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010ee8:	e009      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	f003 0308 	and.w	r3, r3, #8
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ef4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010ef8:	e001      	b.n	8010efe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010efa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3720      	adds	r7, #32
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	2400000c 	.word	0x2400000c
 8010f0c:	10624dd3 	.word	0x10624dd3
 8010f10:	00200045 	.word	0x00200045
 8010f14:	002000c5 	.word	0x002000c5
 8010f18:	fdffe008 	.word	0xfdffe008

08010f1c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f24:	4b1f      	ldr	r3, [pc, #124]	@ (8010fa4 <SDMMC_GetCmdResp2+0x88>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	4a1f      	ldr	r2, [pc, #124]	@ (8010fa8 <SDMMC_GetCmdResp2+0x8c>)
 8010f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f2e:	0a5b      	lsrs	r3, r3, #9
 8010f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f34:	fb02 f303 	mul.w	r3, r2, r3
 8010f38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	1e5a      	subs	r2, r3, #1
 8010f3e:	60fa      	str	r2, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d102      	bne.n	8010f4a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010f48:	e026      	b.n	8010f98 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0ef      	beq.n	8010f3a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1ea      	bne.n	8010f3a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f68:	f003 0304 	and.w	r3, r3, #4
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d004      	beq.n	8010f7a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2204      	movs	r2, #4
 8010f74:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f76:	2304      	movs	r3, #4
 8010f78:	e00e      	b.n	8010f98 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f7e:	f003 0301 	and.w	r3, r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d004      	beq.n	8010f90 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e003      	b.n	8010f98 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4a06      	ldr	r2, [pc, #24]	@ (8010fac <SDMMC_GetCmdResp2+0x90>)
 8010f94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f96:	2300      	movs	r3, #0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3714      	adds	r7, #20
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr
 8010fa4:	2400000c 	.word	0x2400000c
 8010fa8:	10624dd3 	.word	0x10624dd3
 8010fac:	002000c5 	.word	0x002000c5

08010fb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8011024 <SDMMC_GetCmdResp3+0x74>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8011028 <SDMMC_GetCmdResp3+0x78>)
 8010fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010fc2:	0a5b      	lsrs	r3, r3, #9
 8010fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fc8:	fb02 f303 	mul.w	r3, r2, r3
 8010fcc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	1e5a      	subs	r2, r3, #1
 8010fd2:	60fa      	str	r2, [r7, #12]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d102      	bne.n	8010fde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010fdc:	e01b      	b.n	8011016 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fe2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d0ef      	beq.n	8010fce <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d1ea      	bne.n	8010fce <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ffc:	f003 0304 	and.w	r3, r3, #4
 8011000:	2b00      	cmp	r3, #0
 8011002:	d004      	beq.n	801100e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2204      	movs	r2, #4
 8011008:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801100a:	2304      	movs	r3, #4
 801100c:	e003      	b.n	8011016 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4a06      	ldr	r2, [pc, #24]	@ (801102c <SDMMC_GetCmdResp3+0x7c>)
 8011012:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3714      	adds	r7, #20
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	2400000c 	.word	0x2400000c
 8011028:	10624dd3 	.word	0x10624dd3
 801102c:	002000c5 	.word	0x002000c5

08011030 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b088      	sub	sp, #32
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	460b      	mov	r3, r1
 801103a:	607a      	str	r2, [r7, #4]
 801103c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801103e:	4b35      	ldr	r3, [pc, #212]	@ (8011114 <SDMMC_GetCmdResp6+0xe4>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	4a35      	ldr	r2, [pc, #212]	@ (8011118 <SDMMC_GetCmdResp6+0xe8>)
 8011044:	fba2 2303 	umull	r2, r3, r2, r3
 8011048:	0a5b      	lsrs	r3, r3, #9
 801104a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801104e:	fb02 f303 	mul.w	r3, r2, r3
 8011052:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	1e5a      	subs	r2, r3, #1
 8011058:	61fa      	str	r2, [r7, #28]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d102      	bne.n	8011064 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801105e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011062:	e052      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011068:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011070:	2b00      	cmp	r3, #0
 8011072:	d0ef      	beq.n	8011054 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1ea      	bne.n	8011054 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011082:	f003 0304 	and.w	r3, r3, #4
 8011086:	2b00      	cmp	r3, #0
 8011088:	d004      	beq.n	8011094 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2204      	movs	r2, #4
 801108e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011090:	2304      	movs	r3, #4
 8011092:	e03a      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	d004      	beq.n	80110aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2201      	movs	r2, #1
 80110a4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110a6:	2301      	movs	r3, #1
 80110a8:	e02f      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110aa:	68f8      	ldr	r0, [r7, #12]
 80110ac:	f7ff fb7c 	bl	80107a8 <SDMMC_GetCommandResponse>
 80110b0:	4603      	mov	r3, r0
 80110b2:	461a      	mov	r2, r3
 80110b4:	7afb      	ldrb	r3, [r7, #11]
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d001      	beq.n	80110be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110ba:	2301      	movs	r3, #1
 80110bc:	e025      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	4a16      	ldr	r2, [pc, #88]	@ (801111c <SDMMC_GetCmdResp6+0xec>)
 80110c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80110c4:	2100      	movs	r1, #0
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff fb7b 	bl	80107c2 <SDMMC_GetResponse>
 80110cc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d106      	bne.n	80110e6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	0c1b      	lsrs	r3, r3, #16
 80110dc:	b29a      	uxth	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80110e2:	2300      	movs	r3, #0
 80110e4:	e011      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d002      	beq.n	80110f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80110f4:	e009      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d002      	beq.n	8011106 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011104:	e001      	b.n	801110a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801110a:	4618      	mov	r0, r3
 801110c:	3720      	adds	r7, #32
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	2400000c 	.word	0x2400000c
 8011118:	10624dd3 	.word	0x10624dd3
 801111c:	002000c5 	.word	0x002000c5

08011120 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011120:	b480      	push	{r7}
 8011122:	b085      	sub	sp, #20
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011128:	4b22      	ldr	r3, [pc, #136]	@ (80111b4 <SDMMC_GetCmdResp7+0x94>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4a22      	ldr	r2, [pc, #136]	@ (80111b8 <SDMMC_GetCmdResp7+0x98>)
 801112e:	fba2 2303 	umull	r2, r3, r2, r3
 8011132:	0a5b      	lsrs	r3, r3, #9
 8011134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011138:	fb02 f303 	mul.w	r3, r2, r3
 801113c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	1e5a      	subs	r2, r3, #1
 8011142:	60fa      	str	r2, [r7, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d102      	bne.n	801114e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011148:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801114c:	e02c      	b.n	80111a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011152:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801115a:	2b00      	cmp	r3, #0
 801115c:	d0ef      	beq.n	801113e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1ea      	bne.n	801113e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801116c:	f003 0304 	and.w	r3, r3, #4
 8011170:	2b00      	cmp	r3, #0
 8011172:	d004      	beq.n	801117e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2204      	movs	r2, #4
 8011178:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801117a:	2304      	movs	r3, #4
 801117c:	e014      	b.n	80111a8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011182:	f003 0301 	and.w	r3, r3, #1
 8011186:	2b00      	cmp	r3, #0
 8011188:	d004      	beq.n	8011194 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2201      	movs	r2, #1
 801118e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011190:	2301      	movs	r3, #1
 8011192:	e009      	b.n	80111a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801119c:	2b00      	cmp	r3, #0
 801119e:	d002      	beq.n	80111a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2240      	movs	r2, #64	@ 0x40
 80111a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80111a6:	2300      	movs	r3, #0

}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3714      	adds	r7, #20
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr
 80111b4:	2400000c 	.word	0x2400000c
 80111b8:	10624dd3 	.word	0x10624dd3

080111bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80111c4:	4b11      	ldr	r3, [pc, #68]	@ (801120c <SDMMC_GetCmdError+0x50>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	4a11      	ldr	r2, [pc, #68]	@ (8011210 <SDMMC_GetCmdError+0x54>)
 80111ca:	fba2 2303 	umull	r2, r3, r2, r3
 80111ce:	0a5b      	lsrs	r3, r3, #9
 80111d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111d4:	fb02 f303 	mul.w	r3, r2, r3
 80111d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	1e5a      	subs	r2, r3, #1
 80111de:	60fa      	str	r2, [r7, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d102      	bne.n	80111ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80111e8:	e009      	b.n	80111fe <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d0f1      	beq.n	80111da <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4a06      	ldr	r2, [pc, #24]	@ (8011214 <SDMMC_GetCmdError+0x58>)
 80111fa:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3714      	adds	r7, #20
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	2400000c 	.word	0x2400000c
 8011210:	10624dd3 	.word	0x10624dd3
 8011214:	002000c5 	.word	0x002000c5

08011218 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801121c:	4904      	ldr	r1, [pc, #16]	@ (8011230 <MX_FATFS_Init+0x18>)
 801121e:	4805      	ldr	r0, [pc, #20]	@ (8011234 <MX_FATFS_Init+0x1c>)
 8011220:	f000 fa8e 	bl	8011740 <FATFS_LinkDriver>
 8011224:	4603      	mov	r3, r0
 8011226:	461a      	mov	r2, r3
 8011228:	4b03      	ldr	r3, [pc, #12]	@ (8011238 <MX_FATFS_Init+0x20>)
 801122a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801122c:	bf00      	nop
 801122e:	bd80      	pop	{r7, pc}
 8011230:	2400089c 	.word	0x2400089c
 8011234:	0801240c 	.word	0x0801240c
 8011238:	24000898 	.word	0x24000898

0801123c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011242:	2300      	movs	r3, #0
 8011244:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011246:	f000 f885 	bl	8011354 <BSP_SD_IsDetected>
 801124a:	4603      	mov	r3, r0
 801124c:	2b01      	cmp	r3, #1
 801124e:	d001      	beq.n	8011254 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011250:	2302      	movs	r3, #2
 8011252:	e012      	b.n	801127a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011254:	480b      	ldr	r0, [pc, #44]	@ (8011284 <BSP_SD_Init+0x48>)
 8011256:	f7fb f95d 	bl	800c514 <HAL_SD_Init>
 801125a:	4603      	mov	r3, r0
 801125c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801125e:	79fb      	ldrb	r3, [r7, #7]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d109      	bne.n	8011278 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011264:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011268:	4806      	ldr	r0, [pc, #24]	@ (8011284 <BSP_SD_Init+0x48>)
 801126a:	f7fc f813 	bl	800d294 <HAL_SD_ConfigWideBusOperation>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011274:	2301      	movs	r3, #1
 8011276:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011278:	79fb      	ldrb	r3, [r7, #7]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3708      	adds	r7, #8
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	240003cc 	.word	0x240003cc

08011288 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	68ba      	ldr	r2, [r7, #8]
 801129c:	68f9      	ldr	r1, [r7, #12]
 801129e:	4806      	ldr	r0, [pc, #24]	@ (80112b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80112a0:	f7fb fa58 	bl	800c754 <HAL_SD_ReadBlocks_DMA>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112aa:	2301      	movs	r3, #1
 80112ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3718      	adds	r7, #24
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	240003cc 	.word	0x240003cc

080112bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	68f9      	ldr	r1, [r7, #12]
 80112d2:	4806      	ldr	r0, [pc, #24]	@ (80112ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80112d4:	f7fb fae6 	bl	800c8a4 <HAL_SD_WriteBlocks_DMA>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3718      	adds	r7, #24
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	240003cc 	.word	0x240003cc

080112f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80112f4:	4805      	ldr	r0, [pc, #20]	@ (801130c <BSP_SD_GetCardState+0x1c>)
 80112f6:	f7fc f8df 	bl	800d4b8 <HAL_SD_GetCardState>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b04      	cmp	r3, #4
 80112fe:	bf14      	ite	ne
 8011300:	2301      	movne	r3, #1
 8011302:	2300      	moveq	r3, #0
 8011304:	b2db      	uxtb	r3, r3
}
 8011306:	4618      	mov	r0, r3
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	240003cc 	.word	0x240003cc

08011310 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	4803      	ldr	r0, [pc, #12]	@ (8011328 <BSP_SD_GetCardInfo+0x18>)
 801131c:	f7fb ff8e 	bl	800d23c <HAL_SD_GetCardInfo>
}
 8011320:	bf00      	nop
 8011322:	3708      	adds	r7, #8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	240003cc 	.word	0x240003cc

0801132c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011334:	f000 f9a0 	bl	8011678 <BSP_SD_WriteCpltCallback>
}
 8011338:	bf00      	nop
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011348:	f000 f9a2 	bl	8011690 <BSP_SD_ReadCpltCallback>
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801135a:	2301      	movs	r3, #1
 801135c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801135e:	f000 f80b 	bl	8011378 <BSP_PlatformIsDetected>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d101      	bne.n	801136c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011368:	2300      	movs	r3, #0
 801136a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	b2db      	uxtb	r3, r3
}
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801137e:	2301      	movs	r3, #1
 8011380:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011382:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011386:	4806      	ldr	r0, [pc, #24]	@ (80113a0 <BSP_PlatformIsDetected+0x28>)
 8011388:	f7f7 fd0c 	bl	8008da4 <HAL_GPIO_ReadPin>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d001      	beq.n	8011396 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011392:	2300      	movs	r3, #0
 8011394:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011396:	79fb      	ldrb	r3, [r7, #7]
}
 8011398:	4618      	mov	r0, r3
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	58021400 	.word	0x58021400

080113a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80113ac:	f7f1 fb72 	bl	8002a94 <HAL_GetTick>
 80113b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80113b2:	e006      	b.n	80113c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80113b4:	f7ff ff9c 	bl	80112f0 <BSP_SD_GetCardState>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d101      	bne.n	80113c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	e009      	b.n	80113d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80113c2:	f7f1 fb67 	bl	8002a94 <HAL_GetTick>
 80113c6:	4602      	mov	r2, r0
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d8f0      	bhi.n	80113b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80113d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80113ea:	4b0b      	ldr	r3, [pc, #44]	@ (8011418 <SD_CheckStatus+0x38>)
 80113ec:	2201      	movs	r2, #1
 80113ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80113f0:	f7ff ff7e 	bl	80112f0 <BSP_SD_GetCardState>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d107      	bne.n	801140a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80113fa:	4b07      	ldr	r3, [pc, #28]	@ (8011418 <SD_CheckStatus+0x38>)
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	f023 0301 	bic.w	r3, r3, #1
 8011404:	b2da      	uxtb	r2, r3
 8011406:	4b04      	ldr	r3, [pc, #16]	@ (8011418 <SD_CheckStatus+0x38>)
 8011408:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801140a:	4b03      	ldr	r3, [pc, #12]	@ (8011418 <SD_CheckStatus+0x38>)
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	b2db      	uxtb	r3, r3
}
 8011410:	4618      	mov	r0, r3
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	24000019 	.word	0x24000019

0801141c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011426:	f7ff ff09 	bl	801123c <BSP_SD_Init>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d107      	bne.n	8011440 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011430:	79fb      	ldrb	r3, [r7, #7]
 8011432:	4618      	mov	r0, r3
 8011434:	f7ff ffd4 	bl	80113e0 <SD_CheckStatus>
 8011438:	4603      	mov	r3, r0
 801143a:	461a      	mov	r2, r3
 801143c:	4b04      	ldr	r3, [pc, #16]	@ (8011450 <SD_initialize+0x34>)
 801143e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011440:	4b03      	ldr	r3, [pc, #12]	@ (8011450 <SD_initialize+0x34>)
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	b2db      	uxtb	r3, r3
}
 8011446:	4618      	mov	r0, r3
 8011448:	3708      	adds	r7, #8
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	24000019 	.word	0x24000019

08011454 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	4603      	mov	r3, r0
 801145c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801145e:	79fb      	ldrb	r3, [r7, #7]
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff ffbd 	bl	80113e0 <SD_CheckStatus>
 8011466:	4603      	mov	r3, r0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b086      	sub	sp, #24
 8011474:	af00      	add	r7, sp, #0
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	607a      	str	r2, [r7, #4]
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	4603      	mov	r3, r0
 801147e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011480:	2301      	movs	r3, #1
 8011482:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011484:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011488:	f7ff ff8c 	bl	80113a4 <SD_CheckStatusWithTimeout>
 801148c:	4603      	mov	r3, r0
 801148e:	2b00      	cmp	r3, #0
 8011490:	da01      	bge.n	8011496 <SD_read+0x26>
  {
    return res;
 8011492:	7dfb      	ldrb	r3, [r7, #23]
 8011494:	e03b      	b.n	801150e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011496:	683a      	ldr	r2, [r7, #0]
 8011498:	6879      	ldr	r1, [r7, #4]
 801149a:	68b8      	ldr	r0, [r7, #8]
 801149c:	f7ff fef4 	bl	8011288 <BSP_SD_ReadBlocks_DMA>
 80114a0:	4603      	mov	r3, r0
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d132      	bne.n	801150c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80114a6:	4b1c      	ldr	r3, [pc, #112]	@ (8011518 <SD_read+0xa8>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80114ac:	f7f1 faf2 	bl	8002a94 <HAL_GetTick>
 80114b0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114b2:	bf00      	nop
 80114b4:	4b18      	ldr	r3, [pc, #96]	@ (8011518 <SD_read+0xa8>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d108      	bne.n	80114ce <SD_read+0x5e>
 80114bc:	f7f1 faea 	bl	8002a94 <HAL_GetTick>
 80114c0:	4602      	mov	r2, r0
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d9f2      	bls.n	80114b4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80114ce:	4b12      	ldr	r3, [pc, #72]	@ (8011518 <SD_read+0xa8>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	75fb      	strb	r3, [r7, #23]
 80114da:	e017      	b.n	801150c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80114dc:	4b0e      	ldr	r3, [pc, #56]	@ (8011518 <SD_read+0xa8>)
 80114de:	2200      	movs	r2, #0
 80114e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80114e2:	f7f1 fad7 	bl	8002a94 <HAL_GetTick>
 80114e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114e8:	e007      	b.n	80114fa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80114ea:	f7ff ff01 	bl	80112f0 <BSP_SD_GetCardState>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <SD_read+0x8a>
          {
            res = RES_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80114f8:	e008      	b.n	801150c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114fa:	f7f1 facb 	bl	8002a94 <HAL_GetTick>
 80114fe:	4602      	mov	r2, r0
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011508:	4293      	cmp	r3, r2
 801150a:	d9ee      	bls.n	80114ea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801150c:	7dfb      	ldrb	r3, [r7, #23]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	240008a4 	.word	0x240008a4

0801151c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b086      	sub	sp, #24
 8011520:	af00      	add	r7, sp, #0
 8011522:	60b9      	str	r1, [r7, #8]
 8011524:	607a      	str	r2, [r7, #4]
 8011526:	603b      	str	r3, [r7, #0]
 8011528:	4603      	mov	r3, r0
 801152a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801152c:	2301      	movs	r3, #1
 801152e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011530:	4b24      	ldr	r3, [pc, #144]	@ (80115c4 <SD_write+0xa8>)
 8011532:	2200      	movs	r2, #0
 8011534:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011536:	f247 5030 	movw	r0, #30000	@ 0x7530
 801153a:	f7ff ff33 	bl	80113a4 <SD_CheckStatusWithTimeout>
 801153e:	4603      	mov	r3, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	da01      	bge.n	8011548 <SD_write+0x2c>
  {
    return res;
 8011544:	7dfb      	ldrb	r3, [r7, #23]
 8011546:	e038      	b.n	80115ba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011548:	683a      	ldr	r2, [r7, #0]
 801154a:	6879      	ldr	r1, [r7, #4]
 801154c:	68b8      	ldr	r0, [r7, #8]
 801154e:	f7ff feb5 	bl	80112bc <BSP_SD_WriteBlocks_DMA>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d12f      	bne.n	80115b8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011558:	f7f1 fa9c 	bl	8002a94 <HAL_GetTick>
 801155c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801155e:	bf00      	nop
 8011560:	4b18      	ldr	r3, [pc, #96]	@ (80115c4 <SD_write+0xa8>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d108      	bne.n	801157a <SD_write+0x5e>
 8011568:	f7f1 fa94 	bl	8002a94 <HAL_GetTick>
 801156c:	4602      	mov	r2, r0
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011576:	4293      	cmp	r3, r2
 8011578:	d9f2      	bls.n	8011560 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801157a:	4b12      	ldr	r3, [pc, #72]	@ (80115c4 <SD_write+0xa8>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d102      	bne.n	8011588 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011582:	2301      	movs	r3, #1
 8011584:	75fb      	strb	r3, [r7, #23]
 8011586:	e017      	b.n	80115b8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011588:	4b0e      	ldr	r3, [pc, #56]	@ (80115c4 <SD_write+0xa8>)
 801158a:	2200      	movs	r2, #0
 801158c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801158e:	f7f1 fa81 	bl	8002a94 <HAL_GetTick>
 8011592:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011594:	e007      	b.n	80115a6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011596:	f7ff feab 	bl	80112f0 <BSP_SD_GetCardState>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d102      	bne.n	80115a6 <SD_write+0x8a>
          {
            res = RES_OK;
 80115a0:	2300      	movs	r3, #0
 80115a2:	75fb      	strb	r3, [r7, #23]
            break;
 80115a4:	e008      	b.n	80115b8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80115a6:	f7f1 fa75 	bl	8002a94 <HAL_GetTick>
 80115aa:	4602      	mov	r2, r0
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	1ad3      	subs	r3, r2, r3
 80115b0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d9ee      	bls.n	8011596 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80115b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3718      	adds	r7, #24
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	240008a0 	.word	0x240008a0

080115c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08c      	sub	sp, #48	@ 0x30
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	4603      	mov	r3, r0
 80115d0:	603a      	str	r2, [r7, #0]
 80115d2:	71fb      	strb	r3, [r7, #7]
 80115d4:	460b      	mov	r3, r1
 80115d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80115d8:	2301      	movs	r3, #1
 80115da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80115de:	4b25      	ldr	r3, [pc, #148]	@ (8011674 <SD_ioctl+0xac>)
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <SD_ioctl+0x28>
 80115ec:	2303      	movs	r3, #3
 80115ee:	e03c      	b.n	801166a <SD_ioctl+0xa2>

  switch (cmd)
 80115f0:	79bb      	ldrb	r3, [r7, #6]
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	d834      	bhi.n	8011660 <SD_ioctl+0x98>
 80115f6:	a201      	add	r2, pc, #4	@ (adr r2, 80115fc <SD_ioctl+0x34>)
 80115f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115fc:	0801160d 	.word	0x0801160d
 8011600:	08011615 	.word	0x08011615
 8011604:	0801162d 	.word	0x0801162d
 8011608:	08011647 	.word	0x08011647
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011612:	e028      	b.n	8011666 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011614:	f107 0308 	add.w	r3, r7, #8
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff fe79 	bl	8011310 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801161e:	6a3a      	ldr	r2, [r7, #32]
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801162a:	e01c      	b.n	8011666 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801162c:	f107 0308 	add.w	r3, r7, #8
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff fe6d 	bl	8011310 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011638:	b29a      	uxth	r2, r3
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801163e:	2300      	movs	r3, #0
 8011640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011644:	e00f      	b.n	8011666 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011646:	f107 0308 	add.w	r3, r7, #8
 801164a:	4618      	mov	r0, r3
 801164c:	f7ff fe60 	bl	8011310 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	0a5a      	lsrs	r2, r3, #9
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801165e:	e002      	b.n	8011666 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011660:	2304      	movs	r3, #4
 8011662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801166a:	4618      	mov	r0, r3
 801166c:	3730      	adds	r7, #48	@ 0x30
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	24000019 	.word	0x24000019

08011678 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011678:	b480      	push	{r7}
 801167a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801167c:	4b03      	ldr	r3, [pc, #12]	@ (801168c <BSP_SD_WriteCpltCallback+0x14>)
 801167e:	2201      	movs	r2, #1
 8011680:	601a      	str	r2, [r3, #0]
}
 8011682:	bf00      	nop
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr
 801168c:	240008a0 	.word	0x240008a0

08011690 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011690:	b480      	push	{r7}
 8011692:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011694:	4b03      	ldr	r3, [pc, #12]	@ (80116a4 <BSP_SD_ReadCpltCallback+0x14>)
 8011696:	2201      	movs	r2, #1
 8011698:	601a      	str	r2, [r3, #0]
}
 801169a:	bf00      	nop
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	240008a4 	.word	0x240008a4

080116a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b087      	sub	sp, #28
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	4613      	mov	r3, r2
 80116b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80116b6:	2301      	movs	r3, #1
 80116b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80116be:	4b1f      	ldr	r3, [pc, #124]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116c0:	7a5b      	ldrb	r3, [r3, #9]
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d131      	bne.n	801172c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80116c8:	4b1c      	ldr	r3, [pc, #112]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116ca:	7a5b      	ldrb	r3, [r3, #9]
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	461a      	mov	r2, r3
 80116d0:	4b1a      	ldr	r3, [pc, #104]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116d2:	2100      	movs	r1, #0
 80116d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80116d6:	4b19      	ldr	r3, [pc, #100]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116d8:	7a5b      	ldrb	r3, [r3, #9]
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	4a17      	ldr	r2, [pc, #92]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	4413      	add	r3, r2
 80116e2:	68fa      	ldr	r2, [r7, #12]
 80116e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80116e6:	4b15      	ldr	r3, [pc, #84]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116e8:	7a5b      	ldrb	r3, [r3, #9]
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	461a      	mov	r2, r3
 80116ee:	4b13      	ldr	r3, [pc, #76]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116f0:	4413      	add	r3, r2
 80116f2:	79fa      	ldrb	r2, [r7, #7]
 80116f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80116f6:	4b11      	ldr	r3, [pc, #68]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 80116f8:	7a5b      	ldrb	r3, [r3, #9]
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	1c5a      	adds	r2, r3, #1
 80116fe:	b2d1      	uxtb	r1, r2
 8011700:	4a0e      	ldr	r2, [pc, #56]	@ (801173c <FATFS_LinkDriverEx+0x94>)
 8011702:	7251      	strb	r1, [r2, #9]
 8011704:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011706:	7dbb      	ldrb	r3, [r7, #22]
 8011708:	3330      	adds	r3, #48	@ 0x30
 801170a:	b2da      	uxtb	r2, r3
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	3301      	adds	r3, #1
 8011714:	223a      	movs	r2, #58	@ 0x3a
 8011716:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	3302      	adds	r3, #2
 801171c:	222f      	movs	r2, #47	@ 0x2f
 801171e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	3303      	adds	r3, #3
 8011724:	2200      	movs	r2, #0
 8011726:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011728:	2300      	movs	r3, #0
 801172a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801172c:	7dfb      	ldrb	r3, [r7, #23]
}
 801172e:	4618      	mov	r0, r3
 8011730:	371c      	adds	r7, #28
 8011732:	46bd      	mov	sp, r7
 8011734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop
 801173c:	240008a8 	.word	0x240008a8

08011740 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801174a:	2200      	movs	r2, #0
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f7ff ffaa 	bl	80116a8 <FATFS_LinkDriverEx>
 8011754:	4603      	mov	r3, r0
}
 8011756:	4618      	mov	r0, r3
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
	...

08011760 <siprintf>:
 8011760:	b40e      	push	{r1, r2, r3}
 8011762:	b510      	push	{r4, lr}
 8011764:	b09d      	sub	sp, #116	@ 0x74
 8011766:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011768:	9002      	str	r0, [sp, #8]
 801176a:	9006      	str	r0, [sp, #24]
 801176c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011770:	480a      	ldr	r0, [pc, #40]	@ (801179c <siprintf+0x3c>)
 8011772:	9107      	str	r1, [sp, #28]
 8011774:	9104      	str	r1, [sp, #16]
 8011776:	490a      	ldr	r1, [pc, #40]	@ (80117a0 <siprintf+0x40>)
 8011778:	f853 2b04 	ldr.w	r2, [r3], #4
 801177c:	9105      	str	r1, [sp, #20]
 801177e:	2400      	movs	r4, #0
 8011780:	a902      	add	r1, sp, #8
 8011782:	6800      	ldr	r0, [r0, #0]
 8011784:	9301      	str	r3, [sp, #4]
 8011786:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011788:	f000 f9a2 	bl	8011ad0 <_svfiprintf_r>
 801178c:	9b02      	ldr	r3, [sp, #8]
 801178e:	701c      	strb	r4, [r3, #0]
 8011790:	b01d      	add	sp, #116	@ 0x74
 8011792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011796:	b003      	add	sp, #12
 8011798:	4770      	bx	lr
 801179a:	bf00      	nop
 801179c:	2400001c 	.word	0x2400001c
 80117a0:	ffff0208 	.word	0xffff0208

080117a4 <memset>:
 80117a4:	4402      	add	r2, r0
 80117a6:	4603      	mov	r3, r0
 80117a8:	4293      	cmp	r3, r2
 80117aa:	d100      	bne.n	80117ae <memset+0xa>
 80117ac:	4770      	bx	lr
 80117ae:	f803 1b01 	strb.w	r1, [r3], #1
 80117b2:	e7f9      	b.n	80117a8 <memset+0x4>

080117b4 <__errno>:
 80117b4:	4b01      	ldr	r3, [pc, #4]	@ (80117bc <__errno+0x8>)
 80117b6:	6818      	ldr	r0, [r3, #0]
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	2400001c 	.word	0x2400001c

080117c0 <__libc_init_array>:
 80117c0:	b570      	push	{r4, r5, r6, lr}
 80117c2:	4d0d      	ldr	r5, [pc, #52]	@ (80117f8 <__libc_init_array+0x38>)
 80117c4:	4c0d      	ldr	r4, [pc, #52]	@ (80117fc <__libc_init_array+0x3c>)
 80117c6:	1b64      	subs	r4, r4, r5
 80117c8:	10a4      	asrs	r4, r4, #2
 80117ca:	2600      	movs	r6, #0
 80117cc:	42a6      	cmp	r6, r4
 80117ce:	d109      	bne.n	80117e4 <__libc_init_array+0x24>
 80117d0:	4d0b      	ldr	r5, [pc, #44]	@ (8011800 <__libc_init_array+0x40>)
 80117d2:	4c0c      	ldr	r4, [pc, #48]	@ (8011804 <__libc_init_array+0x44>)
 80117d4:	f000 fc64 	bl	80120a0 <_init>
 80117d8:	1b64      	subs	r4, r4, r5
 80117da:	10a4      	asrs	r4, r4, #2
 80117dc:	2600      	movs	r6, #0
 80117de:	42a6      	cmp	r6, r4
 80117e0:	d105      	bne.n	80117ee <__libc_init_array+0x2e>
 80117e2:	bd70      	pop	{r4, r5, r6, pc}
 80117e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80117e8:	4798      	blx	r3
 80117ea:	3601      	adds	r6, #1
 80117ec:	e7ee      	b.n	80117cc <__libc_init_array+0xc>
 80117ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80117f2:	4798      	blx	r3
 80117f4:	3601      	adds	r6, #1
 80117f6:	e7f2      	b.n	80117de <__libc_init_array+0x1e>
 80117f8:	0801245c 	.word	0x0801245c
 80117fc:	0801245c 	.word	0x0801245c
 8011800:	0801245c 	.word	0x0801245c
 8011804:	08012460 	.word	0x08012460

08011808 <__retarget_lock_acquire_recursive>:
 8011808:	4770      	bx	lr

0801180a <__retarget_lock_release_recursive>:
 801180a:	4770      	bx	lr

0801180c <memcpy>:
 801180c:	440a      	add	r2, r1
 801180e:	4291      	cmp	r1, r2
 8011810:	f100 33ff 	add.w	r3, r0, #4294967295
 8011814:	d100      	bne.n	8011818 <memcpy+0xc>
 8011816:	4770      	bx	lr
 8011818:	b510      	push	{r4, lr}
 801181a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801181e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011822:	4291      	cmp	r1, r2
 8011824:	d1f9      	bne.n	801181a <memcpy+0xe>
 8011826:	bd10      	pop	{r4, pc}

08011828 <_free_r>:
 8011828:	b538      	push	{r3, r4, r5, lr}
 801182a:	4605      	mov	r5, r0
 801182c:	2900      	cmp	r1, #0
 801182e:	d041      	beq.n	80118b4 <_free_r+0x8c>
 8011830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011834:	1f0c      	subs	r4, r1, #4
 8011836:	2b00      	cmp	r3, #0
 8011838:	bfb8      	it	lt
 801183a:	18e4      	addlt	r4, r4, r3
 801183c:	f000 f8e0 	bl	8011a00 <__malloc_lock>
 8011840:	4a1d      	ldr	r2, [pc, #116]	@ (80118b8 <_free_r+0x90>)
 8011842:	6813      	ldr	r3, [r2, #0]
 8011844:	b933      	cbnz	r3, 8011854 <_free_r+0x2c>
 8011846:	6063      	str	r3, [r4, #4]
 8011848:	6014      	str	r4, [r2, #0]
 801184a:	4628      	mov	r0, r5
 801184c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011850:	f000 b8dc 	b.w	8011a0c <__malloc_unlock>
 8011854:	42a3      	cmp	r3, r4
 8011856:	d908      	bls.n	801186a <_free_r+0x42>
 8011858:	6820      	ldr	r0, [r4, #0]
 801185a:	1821      	adds	r1, r4, r0
 801185c:	428b      	cmp	r3, r1
 801185e:	bf01      	itttt	eq
 8011860:	6819      	ldreq	r1, [r3, #0]
 8011862:	685b      	ldreq	r3, [r3, #4]
 8011864:	1809      	addeq	r1, r1, r0
 8011866:	6021      	streq	r1, [r4, #0]
 8011868:	e7ed      	b.n	8011846 <_free_r+0x1e>
 801186a:	461a      	mov	r2, r3
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	b10b      	cbz	r3, 8011874 <_free_r+0x4c>
 8011870:	42a3      	cmp	r3, r4
 8011872:	d9fa      	bls.n	801186a <_free_r+0x42>
 8011874:	6811      	ldr	r1, [r2, #0]
 8011876:	1850      	adds	r0, r2, r1
 8011878:	42a0      	cmp	r0, r4
 801187a:	d10b      	bne.n	8011894 <_free_r+0x6c>
 801187c:	6820      	ldr	r0, [r4, #0]
 801187e:	4401      	add	r1, r0
 8011880:	1850      	adds	r0, r2, r1
 8011882:	4283      	cmp	r3, r0
 8011884:	6011      	str	r1, [r2, #0]
 8011886:	d1e0      	bne.n	801184a <_free_r+0x22>
 8011888:	6818      	ldr	r0, [r3, #0]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	6053      	str	r3, [r2, #4]
 801188e:	4408      	add	r0, r1
 8011890:	6010      	str	r0, [r2, #0]
 8011892:	e7da      	b.n	801184a <_free_r+0x22>
 8011894:	d902      	bls.n	801189c <_free_r+0x74>
 8011896:	230c      	movs	r3, #12
 8011898:	602b      	str	r3, [r5, #0]
 801189a:	e7d6      	b.n	801184a <_free_r+0x22>
 801189c:	6820      	ldr	r0, [r4, #0]
 801189e:	1821      	adds	r1, r4, r0
 80118a0:	428b      	cmp	r3, r1
 80118a2:	bf04      	itt	eq
 80118a4:	6819      	ldreq	r1, [r3, #0]
 80118a6:	685b      	ldreq	r3, [r3, #4]
 80118a8:	6063      	str	r3, [r4, #4]
 80118aa:	bf04      	itt	eq
 80118ac:	1809      	addeq	r1, r1, r0
 80118ae:	6021      	streq	r1, [r4, #0]
 80118b0:	6054      	str	r4, [r2, #4]
 80118b2:	e7ca      	b.n	801184a <_free_r+0x22>
 80118b4:	bd38      	pop	{r3, r4, r5, pc}
 80118b6:	bf00      	nop
 80118b8:	240009f8 	.word	0x240009f8

080118bc <sbrk_aligned>:
 80118bc:	b570      	push	{r4, r5, r6, lr}
 80118be:	4e0f      	ldr	r6, [pc, #60]	@ (80118fc <sbrk_aligned+0x40>)
 80118c0:	460c      	mov	r4, r1
 80118c2:	6831      	ldr	r1, [r6, #0]
 80118c4:	4605      	mov	r5, r0
 80118c6:	b911      	cbnz	r1, 80118ce <sbrk_aligned+0x12>
 80118c8:	f000 fba4 	bl	8012014 <_sbrk_r>
 80118cc:	6030      	str	r0, [r6, #0]
 80118ce:	4621      	mov	r1, r4
 80118d0:	4628      	mov	r0, r5
 80118d2:	f000 fb9f 	bl	8012014 <_sbrk_r>
 80118d6:	1c43      	adds	r3, r0, #1
 80118d8:	d103      	bne.n	80118e2 <sbrk_aligned+0x26>
 80118da:	f04f 34ff 	mov.w	r4, #4294967295
 80118de:	4620      	mov	r0, r4
 80118e0:	bd70      	pop	{r4, r5, r6, pc}
 80118e2:	1cc4      	adds	r4, r0, #3
 80118e4:	f024 0403 	bic.w	r4, r4, #3
 80118e8:	42a0      	cmp	r0, r4
 80118ea:	d0f8      	beq.n	80118de <sbrk_aligned+0x22>
 80118ec:	1a21      	subs	r1, r4, r0
 80118ee:	4628      	mov	r0, r5
 80118f0:	f000 fb90 	bl	8012014 <_sbrk_r>
 80118f4:	3001      	adds	r0, #1
 80118f6:	d1f2      	bne.n	80118de <sbrk_aligned+0x22>
 80118f8:	e7ef      	b.n	80118da <sbrk_aligned+0x1e>
 80118fa:	bf00      	nop
 80118fc:	240009f4 	.word	0x240009f4

08011900 <_malloc_r>:
 8011900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011904:	1ccd      	adds	r5, r1, #3
 8011906:	f025 0503 	bic.w	r5, r5, #3
 801190a:	3508      	adds	r5, #8
 801190c:	2d0c      	cmp	r5, #12
 801190e:	bf38      	it	cc
 8011910:	250c      	movcc	r5, #12
 8011912:	2d00      	cmp	r5, #0
 8011914:	4606      	mov	r6, r0
 8011916:	db01      	blt.n	801191c <_malloc_r+0x1c>
 8011918:	42a9      	cmp	r1, r5
 801191a:	d904      	bls.n	8011926 <_malloc_r+0x26>
 801191c:	230c      	movs	r3, #12
 801191e:	6033      	str	r3, [r6, #0]
 8011920:	2000      	movs	r0, #0
 8011922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80119fc <_malloc_r+0xfc>
 801192a:	f000 f869 	bl	8011a00 <__malloc_lock>
 801192e:	f8d8 3000 	ldr.w	r3, [r8]
 8011932:	461c      	mov	r4, r3
 8011934:	bb44      	cbnz	r4, 8011988 <_malloc_r+0x88>
 8011936:	4629      	mov	r1, r5
 8011938:	4630      	mov	r0, r6
 801193a:	f7ff ffbf 	bl	80118bc <sbrk_aligned>
 801193e:	1c43      	adds	r3, r0, #1
 8011940:	4604      	mov	r4, r0
 8011942:	d158      	bne.n	80119f6 <_malloc_r+0xf6>
 8011944:	f8d8 4000 	ldr.w	r4, [r8]
 8011948:	4627      	mov	r7, r4
 801194a:	2f00      	cmp	r7, #0
 801194c:	d143      	bne.n	80119d6 <_malloc_r+0xd6>
 801194e:	2c00      	cmp	r4, #0
 8011950:	d04b      	beq.n	80119ea <_malloc_r+0xea>
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	4639      	mov	r1, r7
 8011956:	4630      	mov	r0, r6
 8011958:	eb04 0903 	add.w	r9, r4, r3
 801195c:	f000 fb5a 	bl	8012014 <_sbrk_r>
 8011960:	4581      	cmp	r9, r0
 8011962:	d142      	bne.n	80119ea <_malloc_r+0xea>
 8011964:	6821      	ldr	r1, [r4, #0]
 8011966:	1a6d      	subs	r5, r5, r1
 8011968:	4629      	mov	r1, r5
 801196a:	4630      	mov	r0, r6
 801196c:	f7ff ffa6 	bl	80118bc <sbrk_aligned>
 8011970:	3001      	adds	r0, #1
 8011972:	d03a      	beq.n	80119ea <_malloc_r+0xea>
 8011974:	6823      	ldr	r3, [r4, #0]
 8011976:	442b      	add	r3, r5
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	f8d8 3000 	ldr.w	r3, [r8]
 801197e:	685a      	ldr	r2, [r3, #4]
 8011980:	bb62      	cbnz	r2, 80119dc <_malloc_r+0xdc>
 8011982:	f8c8 7000 	str.w	r7, [r8]
 8011986:	e00f      	b.n	80119a8 <_malloc_r+0xa8>
 8011988:	6822      	ldr	r2, [r4, #0]
 801198a:	1b52      	subs	r2, r2, r5
 801198c:	d420      	bmi.n	80119d0 <_malloc_r+0xd0>
 801198e:	2a0b      	cmp	r2, #11
 8011990:	d917      	bls.n	80119c2 <_malloc_r+0xc2>
 8011992:	1961      	adds	r1, r4, r5
 8011994:	42a3      	cmp	r3, r4
 8011996:	6025      	str	r5, [r4, #0]
 8011998:	bf18      	it	ne
 801199a:	6059      	strne	r1, [r3, #4]
 801199c:	6863      	ldr	r3, [r4, #4]
 801199e:	bf08      	it	eq
 80119a0:	f8c8 1000 	streq.w	r1, [r8]
 80119a4:	5162      	str	r2, [r4, r5]
 80119a6:	604b      	str	r3, [r1, #4]
 80119a8:	4630      	mov	r0, r6
 80119aa:	f000 f82f 	bl	8011a0c <__malloc_unlock>
 80119ae:	f104 000b 	add.w	r0, r4, #11
 80119b2:	1d23      	adds	r3, r4, #4
 80119b4:	f020 0007 	bic.w	r0, r0, #7
 80119b8:	1ac2      	subs	r2, r0, r3
 80119ba:	bf1c      	itt	ne
 80119bc:	1a1b      	subne	r3, r3, r0
 80119be:	50a3      	strne	r3, [r4, r2]
 80119c0:	e7af      	b.n	8011922 <_malloc_r+0x22>
 80119c2:	6862      	ldr	r2, [r4, #4]
 80119c4:	42a3      	cmp	r3, r4
 80119c6:	bf0c      	ite	eq
 80119c8:	f8c8 2000 	streq.w	r2, [r8]
 80119cc:	605a      	strne	r2, [r3, #4]
 80119ce:	e7eb      	b.n	80119a8 <_malloc_r+0xa8>
 80119d0:	4623      	mov	r3, r4
 80119d2:	6864      	ldr	r4, [r4, #4]
 80119d4:	e7ae      	b.n	8011934 <_malloc_r+0x34>
 80119d6:	463c      	mov	r4, r7
 80119d8:	687f      	ldr	r7, [r7, #4]
 80119da:	e7b6      	b.n	801194a <_malloc_r+0x4a>
 80119dc:	461a      	mov	r2, r3
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	42a3      	cmp	r3, r4
 80119e2:	d1fb      	bne.n	80119dc <_malloc_r+0xdc>
 80119e4:	2300      	movs	r3, #0
 80119e6:	6053      	str	r3, [r2, #4]
 80119e8:	e7de      	b.n	80119a8 <_malloc_r+0xa8>
 80119ea:	230c      	movs	r3, #12
 80119ec:	6033      	str	r3, [r6, #0]
 80119ee:	4630      	mov	r0, r6
 80119f0:	f000 f80c 	bl	8011a0c <__malloc_unlock>
 80119f4:	e794      	b.n	8011920 <_malloc_r+0x20>
 80119f6:	6005      	str	r5, [r0, #0]
 80119f8:	e7d6      	b.n	80119a8 <_malloc_r+0xa8>
 80119fa:	bf00      	nop
 80119fc:	240009f8 	.word	0x240009f8

08011a00 <__malloc_lock>:
 8011a00:	4801      	ldr	r0, [pc, #4]	@ (8011a08 <__malloc_lock+0x8>)
 8011a02:	f7ff bf01 	b.w	8011808 <__retarget_lock_acquire_recursive>
 8011a06:	bf00      	nop
 8011a08:	240009f0 	.word	0x240009f0

08011a0c <__malloc_unlock>:
 8011a0c:	4801      	ldr	r0, [pc, #4]	@ (8011a14 <__malloc_unlock+0x8>)
 8011a0e:	f7ff befc 	b.w	801180a <__retarget_lock_release_recursive>
 8011a12:	bf00      	nop
 8011a14:	240009f0 	.word	0x240009f0

08011a18 <__ssputs_r>:
 8011a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a1c:	688e      	ldr	r6, [r1, #8]
 8011a1e:	461f      	mov	r7, r3
 8011a20:	42be      	cmp	r6, r7
 8011a22:	680b      	ldr	r3, [r1, #0]
 8011a24:	4682      	mov	sl, r0
 8011a26:	460c      	mov	r4, r1
 8011a28:	4690      	mov	r8, r2
 8011a2a:	d82d      	bhi.n	8011a88 <__ssputs_r+0x70>
 8011a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011a34:	d026      	beq.n	8011a84 <__ssputs_r+0x6c>
 8011a36:	6965      	ldr	r5, [r4, #20]
 8011a38:	6909      	ldr	r1, [r1, #16]
 8011a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a3e:	eba3 0901 	sub.w	r9, r3, r1
 8011a42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a46:	1c7b      	adds	r3, r7, #1
 8011a48:	444b      	add	r3, r9
 8011a4a:	106d      	asrs	r5, r5, #1
 8011a4c:	429d      	cmp	r5, r3
 8011a4e:	bf38      	it	cc
 8011a50:	461d      	movcc	r5, r3
 8011a52:	0553      	lsls	r3, r2, #21
 8011a54:	d527      	bpl.n	8011aa6 <__ssputs_r+0x8e>
 8011a56:	4629      	mov	r1, r5
 8011a58:	f7ff ff52 	bl	8011900 <_malloc_r>
 8011a5c:	4606      	mov	r6, r0
 8011a5e:	b360      	cbz	r0, 8011aba <__ssputs_r+0xa2>
 8011a60:	6921      	ldr	r1, [r4, #16]
 8011a62:	464a      	mov	r2, r9
 8011a64:	f7ff fed2 	bl	801180c <memcpy>
 8011a68:	89a3      	ldrh	r3, [r4, #12]
 8011a6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a72:	81a3      	strh	r3, [r4, #12]
 8011a74:	6126      	str	r6, [r4, #16]
 8011a76:	6165      	str	r5, [r4, #20]
 8011a78:	444e      	add	r6, r9
 8011a7a:	eba5 0509 	sub.w	r5, r5, r9
 8011a7e:	6026      	str	r6, [r4, #0]
 8011a80:	60a5      	str	r5, [r4, #8]
 8011a82:	463e      	mov	r6, r7
 8011a84:	42be      	cmp	r6, r7
 8011a86:	d900      	bls.n	8011a8a <__ssputs_r+0x72>
 8011a88:	463e      	mov	r6, r7
 8011a8a:	6820      	ldr	r0, [r4, #0]
 8011a8c:	4632      	mov	r2, r6
 8011a8e:	4641      	mov	r1, r8
 8011a90:	f000 faa6 	bl	8011fe0 <memmove>
 8011a94:	68a3      	ldr	r3, [r4, #8]
 8011a96:	1b9b      	subs	r3, r3, r6
 8011a98:	60a3      	str	r3, [r4, #8]
 8011a9a:	6823      	ldr	r3, [r4, #0]
 8011a9c:	4433      	add	r3, r6
 8011a9e:	6023      	str	r3, [r4, #0]
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa6:	462a      	mov	r2, r5
 8011aa8:	f000 fac4 	bl	8012034 <_realloc_r>
 8011aac:	4606      	mov	r6, r0
 8011aae:	2800      	cmp	r0, #0
 8011ab0:	d1e0      	bne.n	8011a74 <__ssputs_r+0x5c>
 8011ab2:	6921      	ldr	r1, [r4, #16]
 8011ab4:	4650      	mov	r0, sl
 8011ab6:	f7ff feb7 	bl	8011828 <_free_r>
 8011aba:	230c      	movs	r3, #12
 8011abc:	f8ca 3000 	str.w	r3, [sl]
 8011ac0:	89a3      	ldrh	r3, [r4, #12]
 8011ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ac6:	81a3      	strh	r3, [r4, #12]
 8011ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8011acc:	e7e9      	b.n	8011aa2 <__ssputs_r+0x8a>
	...

08011ad0 <_svfiprintf_r>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	4698      	mov	r8, r3
 8011ad6:	898b      	ldrh	r3, [r1, #12]
 8011ad8:	061b      	lsls	r3, r3, #24
 8011ada:	b09d      	sub	sp, #116	@ 0x74
 8011adc:	4607      	mov	r7, r0
 8011ade:	460d      	mov	r5, r1
 8011ae0:	4614      	mov	r4, r2
 8011ae2:	d510      	bpl.n	8011b06 <_svfiprintf_r+0x36>
 8011ae4:	690b      	ldr	r3, [r1, #16]
 8011ae6:	b973      	cbnz	r3, 8011b06 <_svfiprintf_r+0x36>
 8011ae8:	2140      	movs	r1, #64	@ 0x40
 8011aea:	f7ff ff09 	bl	8011900 <_malloc_r>
 8011aee:	6028      	str	r0, [r5, #0]
 8011af0:	6128      	str	r0, [r5, #16]
 8011af2:	b930      	cbnz	r0, 8011b02 <_svfiprintf_r+0x32>
 8011af4:	230c      	movs	r3, #12
 8011af6:	603b      	str	r3, [r7, #0]
 8011af8:	f04f 30ff 	mov.w	r0, #4294967295
 8011afc:	b01d      	add	sp, #116	@ 0x74
 8011afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b02:	2340      	movs	r3, #64	@ 0x40
 8011b04:	616b      	str	r3, [r5, #20]
 8011b06:	2300      	movs	r3, #0
 8011b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b0a:	2320      	movs	r3, #32
 8011b0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b14:	2330      	movs	r3, #48	@ 0x30
 8011b16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011cb4 <_svfiprintf_r+0x1e4>
 8011b1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b1e:	f04f 0901 	mov.w	r9, #1
 8011b22:	4623      	mov	r3, r4
 8011b24:	469a      	mov	sl, r3
 8011b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b2a:	b10a      	cbz	r2, 8011b30 <_svfiprintf_r+0x60>
 8011b2c:	2a25      	cmp	r2, #37	@ 0x25
 8011b2e:	d1f9      	bne.n	8011b24 <_svfiprintf_r+0x54>
 8011b30:	ebba 0b04 	subs.w	fp, sl, r4
 8011b34:	d00b      	beq.n	8011b4e <_svfiprintf_r+0x7e>
 8011b36:	465b      	mov	r3, fp
 8011b38:	4622      	mov	r2, r4
 8011b3a:	4629      	mov	r1, r5
 8011b3c:	4638      	mov	r0, r7
 8011b3e:	f7ff ff6b 	bl	8011a18 <__ssputs_r>
 8011b42:	3001      	adds	r0, #1
 8011b44:	f000 80a7 	beq.w	8011c96 <_svfiprintf_r+0x1c6>
 8011b48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b4a:	445a      	add	r2, fp
 8011b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f000 809f 	beq.w	8011c96 <_svfiprintf_r+0x1c6>
 8011b58:	2300      	movs	r3, #0
 8011b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b62:	f10a 0a01 	add.w	sl, sl, #1
 8011b66:	9304      	str	r3, [sp, #16]
 8011b68:	9307      	str	r3, [sp, #28]
 8011b6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b70:	4654      	mov	r4, sl
 8011b72:	2205      	movs	r2, #5
 8011b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b78:	484e      	ldr	r0, [pc, #312]	@ (8011cb4 <_svfiprintf_r+0x1e4>)
 8011b7a:	f7ee fbd1 	bl	8000320 <memchr>
 8011b7e:	9a04      	ldr	r2, [sp, #16]
 8011b80:	b9d8      	cbnz	r0, 8011bba <_svfiprintf_r+0xea>
 8011b82:	06d0      	lsls	r0, r2, #27
 8011b84:	bf44      	itt	mi
 8011b86:	2320      	movmi	r3, #32
 8011b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b8c:	0711      	lsls	r1, r2, #28
 8011b8e:	bf44      	itt	mi
 8011b90:	232b      	movmi	r3, #43	@ 0x2b
 8011b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b96:	f89a 3000 	ldrb.w	r3, [sl]
 8011b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b9c:	d015      	beq.n	8011bca <_svfiprintf_r+0xfa>
 8011b9e:	9a07      	ldr	r2, [sp, #28]
 8011ba0:	4654      	mov	r4, sl
 8011ba2:	2000      	movs	r0, #0
 8011ba4:	f04f 0c0a 	mov.w	ip, #10
 8011ba8:	4621      	mov	r1, r4
 8011baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bae:	3b30      	subs	r3, #48	@ 0x30
 8011bb0:	2b09      	cmp	r3, #9
 8011bb2:	d94b      	bls.n	8011c4c <_svfiprintf_r+0x17c>
 8011bb4:	b1b0      	cbz	r0, 8011be4 <_svfiprintf_r+0x114>
 8011bb6:	9207      	str	r2, [sp, #28]
 8011bb8:	e014      	b.n	8011be4 <_svfiprintf_r+0x114>
 8011bba:	eba0 0308 	sub.w	r3, r0, r8
 8011bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8011bc2:	4313      	orrs	r3, r2
 8011bc4:	9304      	str	r3, [sp, #16]
 8011bc6:	46a2      	mov	sl, r4
 8011bc8:	e7d2      	b.n	8011b70 <_svfiprintf_r+0xa0>
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	1d19      	adds	r1, r3, #4
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	9103      	str	r1, [sp, #12]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	bfbb      	ittet	lt
 8011bd6:	425b      	neglt	r3, r3
 8011bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8011bdc:	9307      	strge	r3, [sp, #28]
 8011bde:	9307      	strlt	r3, [sp, #28]
 8011be0:	bfb8      	it	lt
 8011be2:	9204      	strlt	r2, [sp, #16]
 8011be4:	7823      	ldrb	r3, [r4, #0]
 8011be6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011be8:	d10a      	bne.n	8011c00 <_svfiprintf_r+0x130>
 8011bea:	7863      	ldrb	r3, [r4, #1]
 8011bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bee:	d132      	bne.n	8011c56 <_svfiprintf_r+0x186>
 8011bf0:	9b03      	ldr	r3, [sp, #12]
 8011bf2:	1d1a      	adds	r2, r3, #4
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	9203      	str	r2, [sp, #12]
 8011bf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bfc:	3402      	adds	r4, #2
 8011bfe:	9305      	str	r3, [sp, #20]
 8011c00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011cc4 <_svfiprintf_r+0x1f4>
 8011c04:	7821      	ldrb	r1, [r4, #0]
 8011c06:	2203      	movs	r2, #3
 8011c08:	4650      	mov	r0, sl
 8011c0a:	f7ee fb89 	bl	8000320 <memchr>
 8011c0e:	b138      	cbz	r0, 8011c20 <_svfiprintf_r+0x150>
 8011c10:	9b04      	ldr	r3, [sp, #16]
 8011c12:	eba0 000a 	sub.w	r0, r0, sl
 8011c16:	2240      	movs	r2, #64	@ 0x40
 8011c18:	4082      	lsls	r2, r0
 8011c1a:	4313      	orrs	r3, r2
 8011c1c:	3401      	adds	r4, #1
 8011c1e:	9304      	str	r3, [sp, #16]
 8011c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c24:	4824      	ldr	r0, [pc, #144]	@ (8011cb8 <_svfiprintf_r+0x1e8>)
 8011c26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c2a:	2206      	movs	r2, #6
 8011c2c:	f7ee fb78 	bl	8000320 <memchr>
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d036      	beq.n	8011ca2 <_svfiprintf_r+0x1d2>
 8011c34:	4b21      	ldr	r3, [pc, #132]	@ (8011cbc <_svfiprintf_r+0x1ec>)
 8011c36:	bb1b      	cbnz	r3, 8011c80 <_svfiprintf_r+0x1b0>
 8011c38:	9b03      	ldr	r3, [sp, #12]
 8011c3a:	3307      	adds	r3, #7
 8011c3c:	f023 0307 	bic.w	r3, r3, #7
 8011c40:	3308      	adds	r3, #8
 8011c42:	9303      	str	r3, [sp, #12]
 8011c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c46:	4433      	add	r3, r6
 8011c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c4a:	e76a      	b.n	8011b22 <_svfiprintf_r+0x52>
 8011c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c50:	460c      	mov	r4, r1
 8011c52:	2001      	movs	r0, #1
 8011c54:	e7a8      	b.n	8011ba8 <_svfiprintf_r+0xd8>
 8011c56:	2300      	movs	r3, #0
 8011c58:	3401      	adds	r4, #1
 8011c5a:	9305      	str	r3, [sp, #20]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	f04f 0c0a 	mov.w	ip, #10
 8011c62:	4620      	mov	r0, r4
 8011c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c68:	3a30      	subs	r2, #48	@ 0x30
 8011c6a:	2a09      	cmp	r2, #9
 8011c6c:	d903      	bls.n	8011c76 <_svfiprintf_r+0x1a6>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d0c6      	beq.n	8011c00 <_svfiprintf_r+0x130>
 8011c72:	9105      	str	r1, [sp, #20]
 8011c74:	e7c4      	b.n	8011c00 <_svfiprintf_r+0x130>
 8011c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e7f0      	b.n	8011c62 <_svfiprintf_r+0x192>
 8011c80:	ab03      	add	r3, sp, #12
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	462a      	mov	r2, r5
 8011c86:	4b0e      	ldr	r3, [pc, #56]	@ (8011cc0 <_svfiprintf_r+0x1f0>)
 8011c88:	a904      	add	r1, sp, #16
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	f3af 8000 	nop.w
 8011c90:	1c42      	adds	r2, r0, #1
 8011c92:	4606      	mov	r6, r0
 8011c94:	d1d6      	bne.n	8011c44 <_svfiprintf_r+0x174>
 8011c96:	89ab      	ldrh	r3, [r5, #12]
 8011c98:	065b      	lsls	r3, r3, #25
 8011c9a:	f53f af2d 	bmi.w	8011af8 <_svfiprintf_r+0x28>
 8011c9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011ca0:	e72c      	b.n	8011afc <_svfiprintf_r+0x2c>
 8011ca2:	ab03      	add	r3, sp, #12
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	462a      	mov	r2, r5
 8011ca8:	4b05      	ldr	r3, [pc, #20]	@ (8011cc0 <_svfiprintf_r+0x1f0>)
 8011caa:	a904      	add	r1, sp, #16
 8011cac:	4638      	mov	r0, r7
 8011cae:	f000 f879 	bl	8011da4 <_printf_i>
 8011cb2:	e7ed      	b.n	8011c90 <_svfiprintf_r+0x1c0>
 8011cb4:	08012420 	.word	0x08012420
 8011cb8:	0801242a 	.word	0x0801242a
 8011cbc:	00000000 	.word	0x00000000
 8011cc0:	08011a19 	.word	0x08011a19
 8011cc4:	08012426 	.word	0x08012426

08011cc8 <_printf_common>:
 8011cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ccc:	4616      	mov	r6, r2
 8011cce:	4698      	mov	r8, r3
 8011cd0:	688a      	ldr	r2, [r1, #8]
 8011cd2:	690b      	ldr	r3, [r1, #16]
 8011cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	bfb8      	it	lt
 8011cdc:	4613      	movlt	r3, r2
 8011cde:	6033      	str	r3, [r6, #0]
 8011ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011ce4:	4607      	mov	r7, r0
 8011ce6:	460c      	mov	r4, r1
 8011ce8:	b10a      	cbz	r2, 8011cee <_printf_common+0x26>
 8011cea:	3301      	adds	r3, #1
 8011cec:	6033      	str	r3, [r6, #0]
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	0699      	lsls	r1, r3, #26
 8011cf2:	bf42      	ittt	mi
 8011cf4:	6833      	ldrmi	r3, [r6, #0]
 8011cf6:	3302      	addmi	r3, #2
 8011cf8:	6033      	strmi	r3, [r6, #0]
 8011cfa:	6825      	ldr	r5, [r4, #0]
 8011cfc:	f015 0506 	ands.w	r5, r5, #6
 8011d00:	d106      	bne.n	8011d10 <_printf_common+0x48>
 8011d02:	f104 0a19 	add.w	sl, r4, #25
 8011d06:	68e3      	ldr	r3, [r4, #12]
 8011d08:	6832      	ldr	r2, [r6, #0]
 8011d0a:	1a9b      	subs	r3, r3, r2
 8011d0c:	42ab      	cmp	r3, r5
 8011d0e:	dc26      	bgt.n	8011d5e <_printf_common+0x96>
 8011d10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011d14:	6822      	ldr	r2, [r4, #0]
 8011d16:	3b00      	subs	r3, #0
 8011d18:	bf18      	it	ne
 8011d1a:	2301      	movne	r3, #1
 8011d1c:	0692      	lsls	r2, r2, #26
 8011d1e:	d42b      	bmi.n	8011d78 <_printf_common+0xb0>
 8011d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011d24:	4641      	mov	r1, r8
 8011d26:	4638      	mov	r0, r7
 8011d28:	47c8      	blx	r9
 8011d2a:	3001      	adds	r0, #1
 8011d2c:	d01e      	beq.n	8011d6c <_printf_common+0xa4>
 8011d2e:	6823      	ldr	r3, [r4, #0]
 8011d30:	6922      	ldr	r2, [r4, #16]
 8011d32:	f003 0306 	and.w	r3, r3, #6
 8011d36:	2b04      	cmp	r3, #4
 8011d38:	bf02      	ittt	eq
 8011d3a:	68e5      	ldreq	r5, [r4, #12]
 8011d3c:	6833      	ldreq	r3, [r6, #0]
 8011d3e:	1aed      	subeq	r5, r5, r3
 8011d40:	68a3      	ldr	r3, [r4, #8]
 8011d42:	bf0c      	ite	eq
 8011d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d48:	2500      	movne	r5, #0
 8011d4a:	4293      	cmp	r3, r2
 8011d4c:	bfc4      	itt	gt
 8011d4e:	1a9b      	subgt	r3, r3, r2
 8011d50:	18ed      	addgt	r5, r5, r3
 8011d52:	2600      	movs	r6, #0
 8011d54:	341a      	adds	r4, #26
 8011d56:	42b5      	cmp	r5, r6
 8011d58:	d11a      	bne.n	8011d90 <_printf_common+0xc8>
 8011d5a:	2000      	movs	r0, #0
 8011d5c:	e008      	b.n	8011d70 <_printf_common+0xa8>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	4652      	mov	r2, sl
 8011d62:	4641      	mov	r1, r8
 8011d64:	4638      	mov	r0, r7
 8011d66:	47c8      	blx	r9
 8011d68:	3001      	adds	r0, #1
 8011d6a:	d103      	bne.n	8011d74 <_printf_common+0xac>
 8011d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d74:	3501      	adds	r5, #1
 8011d76:	e7c6      	b.n	8011d06 <_printf_common+0x3e>
 8011d78:	18e1      	adds	r1, r4, r3
 8011d7a:	1c5a      	adds	r2, r3, #1
 8011d7c:	2030      	movs	r0, #48	@ 0x30
 8011d7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011d82:	4422      	add	r2, r4
 8011d84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011d8c:	3302      	adds	r3, #2
 8011d8e:	e7c7      	b.n	8011d20 <_printf_common+0x58>
 8011d90:	2301      	movs	r3, #1
 8011d92:	4622      	mov	r2, r4
 8011d94:	4641      	mov	r1, r8
 8011d96:	4638      	mov	r0, r7
 8011d98:	47c8      	blx	r9
 8011d9a:	3001      	adds	r0, #1
 8011d9c:	d0e6      	beq.n	8011d6c <_printf_common+0xa4>
 8011d9e:	3601      	adds	r6, #1
 8011da0:	e7d9      	b.n	8011d56 <_printf_common+0x8e>
	...

08011da4 <_printf_i>:
 8011da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011da8:	7e0f      	ldrb	r7, [r1, #24]
 8011daa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011dac:	2f78      	cmp	r7, #120	@ 0x78
 8011dae:	4691      	mov	r9, r2
 8011db0:	4680      	mov	r8, r0
 8011db2:	460c      	mov	r4, r1
 8011db4:	469a      	mov	sl, r3
 8011db6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011dba:	d807      	bhi.n	8011dcc <_printf_i+0x28>
 8011dbc:	2f62      	cmp	r7, #98	@ 0x62
 8011dbe:	d80a      	bhi.n	8011dd6 <_printf_i+0x32>
 8011dc0:	2f00      	cmp	r7, #0
 8011dc2:	f000 80d1 	beq.w	8011f68 <_printf_i+0x1c4>
 8011dc6:	2f58      	cmp	r7, #88	@ 0x58
 8011dc8:	f000 80b8 	beq.w	8011f3c <_printf_i+0x198>
 8011dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011dd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011dd4:	e03a      	b.n	8011e4c <_printf_i+0xa8>
 8011dd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011dda:	2b15      	cmp	r3, #21
 8011ddc:	d8f6      	bhi.n	8011dcc <_printf_i+0x28>
 8011dde:	a101      	add	r1, pc, #4	@ (adr r1, 8011de4 <_printf_i+0x40>)
 8011de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011de4:	08011e3d 	.word	0x08011e3d
 8011de8:	08011e51 	.word	0x08011e51
 8011dec:	08011dcd 	.word	0x08011dcd
 8011df0:	08011dcd 	.word	0x08011dcd
 8011df4:	08011dcd 	.word	0x08011dcd
 8011df8:	08011dcd 	.word	0x08011dcd
 8011dfc:	08011e51 	.word	0x08011e51
 8011e00:	08011dcd 	.word	0x08011dcd
 8011e04:	08011dcd 	.word	0x08011dcd
 8011e08:	08011dcd 	.word	0x08011dcd
 8011e0c:	08011dcd 	.word	0x08011dcd
 8011e10:	08011f4f 	.word	0x08011f4f
 8011e14:	08011e7b 	.word	0x08011e7b
 8011e18:	08011f09 	.word	0x08011f09
 8011e1c:	08011dcd 	.word	0x08011dcd
 8011e20:	08011dcd 	.word	0x08011dcd
 8011e24:	08011f71 	.word	0x08011f71
 8011e28:	08011dcd 	.word	0x08011dcd
 8011e2c:	08011e7b 	.word	0x08011e7b
 8011e30:	08011dcd 	.word	0x08011dcd
 8011e34:	08011dcd 	.word	0x08011dcd
 8011e38:	08011f11 	.word	0x08011f11
 8011e3c:	6833      	ldr	r3, [r6, #0]
 8011e3e:	1d1a      	adds	r2, r3, #4
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6032      	str	r2, [r6, #0]
 8011e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e09c      	b.n	8011f8a <_printf_i+0x1e6>
 8011e50:	6833      	ldr	r3, [r6, #0]
 8011e52:	6820      	ldr	r0, [r4, #0]
 8011e54:	1d19      	adds	r1, r3, #4
 8011e56:	6031      	str	r1, [r6, #0]
 8011e58:	0606      	lsls	r6, r0, #24
 8011e5a:	d501      	bpl.n	8011e60 <_printf_i+0xbc>
 8011e5c:	681d      	ldr	r5, [r3, #0]
 8011e5e:	e003      	b.n	8011e68 <_printf_i+0xc4>
 8011e60:	0645      	lsls	r5, r0, #25
 8011e62:	d5fb      	bpl.n	8011e5c <_printf_i+0xb8>
 8011e64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011e68:	2d00      	cmp	r5, #0
 8011e6a:	da03      	bge.n	8011e74 <_printf_i+0xd0>
 8011e6c:	232d      	movs	r3, #45	@ 0x2d
 8011e6e:	426d      	negs	r5, r5
 8011e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e74:	4858      	ldr	r0, [pc, #352]	@ (8011fd8 <_printf_i+0x234>)
 8011e76:	230a      	movs	r3, #10
 8011e78:	e011      	b.n	8011e9e <_printf_i+0xfa>
 8011e7a:	6821      	ldr	r1, [r4, #0]
 8011e7c:	6833      	ldr	r3, [r6, #0]
 8011e7e:	0608      	lsls	r0, r1, #24
 8011e80:	f853 5b04 	ldr.w	r5, [r3], #4
 8011e84:	d402      	bmi.n	8011e8c <_printf_i+0xe8>
 8011e86:	0649      	lsls	r1, r1, #25
 8011e88:	bf48      	it	mi
 8011e8a:	b2ad      	uxthmi	r5, r5
 8011e8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8011e8e:	4852      	ldr	r0, [pc, #328]	@ (8011fd8 <_printf_i+0x234>)
 8011e90:	6033      	str	r3, [r6, #0]
 8011e92:	bf14      	ite	ne
 8011e94:	230a      	movne	r3, #10
 8011e96:	2308      	moveq	r3, #8
 8011e98:	2100      	movs	r1, #0
 8011e9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e9e:	6866      	ldr	r6, [r4, #4]
 8011ea0:	60a6      	str	r6, [r4, #8]
 8011ea2:	2e00      	cmp	r6, #0
 8011ea4:	db05      	blt.n	8011eb2 <_printf_i+0x10e>
 8011ea6:	6821      	ldr	r1, [r4, #0]
 8011ea8:	432e      	orrs	r6, r5
 8011eaa:	f021 0104 	bic.w	r1, r1, #4
 8011eae:	6021      	str	r1, [r4, #0]
 8011eb0:	d04b      	beq.n	8011f4a <_printf_i+0x1a6>
 8011eb2:	4616      	mov	r6, r2
 8011eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8011eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8011ebc:	5dc7      	ldrb	r7, [r0, r7]
 8011ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011ec2:	462f      	mov	r7, r5
 8011ec4:	42bb      	cmp	r3, r7
 8011ec6:	460d      	mov	r5, r1
 8011ec8:	d9f4      	bls.n	8011eb4 <_printf_i+0x110>
 8011eca:	2b08      	cmp	r3, #8
 8011ecc:	d10b      	bne.n	8011ee6 <_printf_i+0x142>
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	07df      	lsls	r7, r3, #31
 8011ed2:	d508      	bpl.n	8011ee6 <_printf_i+0x142>
 8011ed4:	6923      	ldr	r3, [r4, #16]
 8011ed6:	6861      	ldr	r1, [r4, #4]
 8011ed8:	4299      	cmp	r1, r3
 8011eda:	bfde      	ittt	le
 8011edc:	2330      	movle	r3, #48	@ 0x30
 8011ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ee2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011ee6:	1b92      	subs	r2, r2, r6
 8011ee8:	6122      	str	r2, [r4, #16]
 8011eea:	f8cd a000 	str.w	sl, [sp]
 8011eee:	464b      	mov	r3, r9
 8011ef0:	aa03      	add	r2, sp, #12
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	4640      	mov	r0, r8
 8011ef6:	f7ff fee7 	bl	8011cc8 <_printf_common>
 8011efa:	3001      	adds	r0, #1
 8011efc:	d14a      	bne.n	8011f94 <_printf_i+0x1f0>
 8011efe:	f04f 30ff 	mov.w	r0, #4294967295
 8011f02:	b004      	add	sp, #16
 8011f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	f043 0320 	orr.w	r3, r3, #32
 8011f0e:	6023      	str	r3, [r4, #0]
 8011f10:	4832      	ldr	r0, [pc, #200]	@ (8011fdc <_printf_i+0x238>)
 8011f12:	2778      	movs	r7, #120	@ 0x78
 8011f14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011f18:	6823      	ldr	r3, [r4, #0]
 8011f1a:	6831      	ldr	r1, [r6, #0]
 8011f1c:	061f      	lsls	r7, r3, #24
 8011f1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011f22:	d402      	bmi.n	8011f2a <_printf_i+0x186>
 8011f24:	065f      	lsls	r7, r3, #25
 8011f26:	bf48      	it	mi
 8011f28:	b2ad      	uxthmi	r5, r5
 8011f2a:	6031      	str	r1, [r6, #0]
 8011f2c:	07d9      	lsls	r1, r3, #31
 8011f2e:	bf44      	itt	mi
 8011f30:	f043 0320 	orrmi.w	r3, r3, #32
 8011f34:	6023      	strmi	r3, [r4, #0]
 8011f36:	b11d      	cbz	r5, 8011f40 <_printf_i+0x19c>
 8011f38:	2310      	movs	r3, #16
 8011f3a:	e7ad      	b.n	8011e98 <_printf_i+0xf4>
 8011f3c:	4826      	ldr	r0, [pc, #152]	@ (8011fd8 <_printf_i+0x234>)
 8011f3e:	e7e9      	b.n	8011f14 <_printf_i+0x170>
 8011f40:	6823      	ldr	r3, [r4, #0]
 8011f42:	f023 0320 	bic.w	r3, r3, #32
 8011f46:	6023      	str	r3, [r4, #0]
 8011f48:	e7f6      	b.n	8011f38 <_printf_i+0x194>
 8011f4a:	4616      	mov	r6, r2
 8011f4c:	e7bd      	b.n	8011eca <_printf_i+0x126>
 8011f4e:	6833      	ldr	r3, [r6, #0]
 8011f50:	6825      	ldr	r5, [r4, #0]
 8011f52:	6961      	ldr	r1, [r4, #20]
 8011f54:	1d18      	adds	r0, r3, #4
 8011f56:	6030      	str	r0, [r6, #0]
 8011f58:	062e      	lsls	r6, r5, #24
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	d501      	bpl.n	8011f62 <_printf_i+0x1be>
 8011f5e:	6019      	str	r1, [r3, #0]
 8011f60:	e002      	b.n	8011f68 <_printf_i+0x1c4>
 8011f62:	0668      	lsls	r0, r5, #25
 8011f64:	d5fb      	bpl.n	8011f5e <_printf_i+0x1ba>
 8011f66:	8019      	strh	r1, [r3, #0]
 8011f68:	2300      	movs	r3, #0
 8011f6a:	6123      	str	r3, [r4, #16]
 8011f6c:	4616      	mov	r6, r2
 8011f6e:	e7bc      	b.n	8011eea <_printf_i+0x146>
 8011f70:	6833      	ldr	r3, [r6, #0]
 8011f72:	1d1a      	adds	r2, r3, #4
 8011f74:	6032      	str	r2, [r6, #0]
 8011f76:	681e      	ldr	r6, [r3, #0]
 8011f78:	6862      	ldr	r2, [r4, #4]
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	f7ee f9cf 	bl	8000320 <memchr>
 8011f82:	b108      	cbz	r0, 8011f88 <_printf_i+0x1e4>
 8011f84:	1b80      	subs	r0, r0, r6
 8011f86:	6060      	str	r0, [r4, #4]
 8011f88:	6863      	ldr	r3, [r4, #4]
 8011f8a:	6123      	str	r3, [r4, #16]
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f92:	e7aa      	b.n	8011eea <_printf_i+0x146>
 8011f94:	6923      	ldr	r3, [r4, #16]
 8011f96:	4632      	mov	r2, r6
 8011f98:	4649      	mov	r1, r9
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	47d0      	blx	sl
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	d0ad      	beq.n	8011efe <_printf_i+0x15a>
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	079b      	lsls	r3, r3, #30
 8011fa6:	d413      	bmi.n	8011fd0 <_printf_i+0x22c>
 8011fa8:	68e0      	ldr	r0, [r4, #12]
 8011faa:	9b03      	ldr	r3, [sp, #12]
 8011fac:	4298      	cmp	r0, r3
 8011fae:	bfb8      	it	lt
 8011fb0:	4618      	movlt	r0, r3
 8011fb2:	e7a6      	b.n	8011f02 <_printf_i+0x15e>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	4632      	mov	r2, r6
 8011fb8:	4649      	mov	r1, r9
 8011fba:	4640      	mov	r0, r8
 8011fbc:	47d0      	blx	sl
 8011fbe:	3001      	adds	r0, #1
 8011fc0:	d09d      	beq.n	8011efe <_printf_i+0x15a>
 8011fc2:	3501      	adds	r5, #1
 8011fc4:	68e3      	ldr	r3, [r4, #12]
 8011fc6:	9903      	ldr	r1, [sp, #12]
 8011fc8:	1a5b      	subs	r3, r3, r1
 8011fca:	42ab      	cmp	r3, r5
 8011fcc:	dcf2      	bgt.n	8011fb4 <_printf_i+0x210>
 8011fce:	e7eb      	b.n	8011fa8 <_printf_i+0x204>
 8011fd0:	2500      	movs	r5, #0
 8011fd2:	f104 0619 	add.w	r6, r4, #25
 8011fd6:	e7f5      	b.n	8011fc4 <_printf_i+0x220>
 8011fd8:	08012431 	.word	0x08012431
 8011fdc:	08012442 	.word	0x08012442

08011fe0 <memmove>:
 8011fe0:	4288      	cmp	r0, r1
 8011fe2:	b510      	push	{r4, lr}
 8011fe4:	eb01 0402 	add.w	r4, r1, r2
 8011fe8:	d902      	bls.n	8011ff0 <memmove+0x10>
 8011fea:	4284      	cmp	r4, r0
 8011fec:	4623      	mov	r3, r4
 8011fee:	d807      	bhi.n	8012000 <memmove+0x20>
 8011ff0:	1e43      	subs	r3, r0, #1
 8011ff2:	42a1      	cmp	r1, r4
 8011ff4:	d008      	beq.n	8012008 <memmove+0x28>
 8011ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ffe:	e7f8      	b.n	8011ff2 <memmove+0x12>
 8012000:	4402      	add	r2, r0
 8012002:	4601      	mov	r1, r0
 8012004:	428a      	cmp	r2, r1
 8012006:	d100      	bne.n	801200a <memmove+0x2a>
 8012008:	bd10      	pop	{r4, pc}
 801200a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801200e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012012:	e7f7      	b.n	8012004 <memmove+0x24>

08012014 <_sbrk_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4d06      	ldr	r5, [pc, #24]	@ (8012030 <_sbrk_r+0x1c>)
 8012018:	2300      	movs	r3, #0
 801201a:	4604      	mov	r4, r0
 801201c:	4608      	mov	r0, r1
 801201e:	602b      	str	r3, [r5, #0]
 8012020:	f7f0 fbda 	bl	80027d8 <_sbrk>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	d102      	bne.n	801202e <_sbrk_r+0x1a>
 8012028:	682b      	ldr	r3, [r5, #0]
 801202a:	b103      	cbz	r3, 801202e <_sbrk_r+0x1a>
 801202c:	6023      	str	r3, [r4, #0]
 801202e:	bd38      	pop	{r3, r4, r5, pc}
 8012030:	240009ec 	.word	0x240009ec

08012034 <_realloc_r>:
 8012034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012038:	4607      	mov	r7, r0
 801203a:	4614      	mov	r4, r2
 801203c:	460d      	mov	r5, r1
 801203e:	b921      	cbnz	r1, 801204a <_realloc_r+0x16>
 8012040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012044:	4611      	mov	r1, r2
 8012046:	f7ff bc5b 	b.w	8011900 <_malloc_r>
 801204a:	b92a      	cbnz	r2, 8012058 <_realloc_r+0x24>
 801204c:	f7ff fbec 	bl	8011828 <_free_r>
 8012050:	4625      	mov	r5, r4
 8012052:	4628      	mov	r0, r5
 8012054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012058:	f000 f81a 	bl	8012090 <_malloc_usable_size_r>
 801205c:	4284      	cmp	r4, r0
 801205e:	4606      	mov	r6, r0
 8012060:	d802      	bhi.n	8012068 <_realloc_r+0x34>
 8012062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012066:	d8f4      	bhi.n	8012052 <_realloc_r+0x1e>
 8012068:	4621      	mov	r1, r4
 801206a:	4638      	mov	r0, r7
 801206c:	f7ff fc48 	bl	8011900 <_malloc_r>
 8012070:	4680      	mov	r8, r0
 8012072:	b908      	cbnz	r0, 8012078 <_realloc_r+0x44>
 8012074:	4645      	mov	r5, r8
 8012076:	e7ec      	b.n	8012052 <_realloc_r+0x1e>
 8012078:	42b4      	cmp	r4, r6
 801207a:	4622      	mov	r2, r4
 801207c:	4629      	mov	r1, r5
 801207e:	bf28      	it	cs
 8012080:	4632      	movcs	r2, r6
 8012082:	f7ff fbc3 	bl	801180c <memcpy>
 8012086:	4629      	mov	r1, r5
 8012088:	4638      	mov	r0, r7
 801208a:	f7ff fbcd 	bl	8011828 <_free_r>
 801208e:	e7f1      	b.n	8012074 <_realloc_r+0x40>

08012090 <_malloc_usable_size_r>:
 8012090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012094:	1f18      	subs	r0, r3, #4
 8012096:	2b00      	cmp	r3, #0
 8012098:	bfbc      	itt	lt
 801209a:	580b      	ldrlt	r3, [r1, r0]
 801209c:	18c0      	addlt	r0, r0, r3
 801209e:	4770      	bx	lr

080120a0 <_init>:
 80120a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a2:	bf00      	nop
 80120a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120a6:	bc08      	pop	{r3}
 80120a8:	469e      	mov	lr, r3
 80120aa:	4770      	bx	lr

080120ac <_fini>:
 80120ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ae:	bf00      	nop
 80120b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120b2:	bc08      	pop	{r3}
 80120b4:	469e      	mov	lr, r3
 80120b6:	4770      	bx	lr
